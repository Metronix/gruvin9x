
gruvin9x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000103a  00800200  0001575e  000157f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001575e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff3  0080123a  0080123a  0001682c  2**0
                  ALLOC
  3 .stab         00000ab0  00000000  00000000  0001682c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002aa  00000000  00000000  000172dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00017586  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001b47  00000000  00000000  00017786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000178a9  00000000  00000000  000192cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000343a  00000000  00000000  00030b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000ede3  00000000  00000000  00033fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001520  00000000  00000000  00042d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003fc9  00000000  00000000  000442b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000f751  00000000  00000000  0004827d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001669  00000000  00000000  000579ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b50  00000000  00000000  00059037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__ctors_end>
       4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
       8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
       c:	0c 94 b9 1f 	jmp	0x3f72	; 0x3f72 <__vector_3>
      10:	0c 94 cf 1f 	jmp	0x3f9e	; 0x3f9e <__vector_4>
      14:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      18:	0c 94 e5 1f 	jmp	0x3fca	; 0x3fca <__vector_6>
      1c:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <__vector_7>
      20:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      24:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      28:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      2c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      30:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      34:	0c 94 1c 1d 	jmp	0x3a38	; 0x3a38 <__vector_13>
      38:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      3c:	0c 94 fc 1c 	jmp	0x39f8	; 0x39f8 <__vector_15>
      40:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      44:	0c 94 74 1c 	jmp	0x38e8	; 0x38e8 <__vector_17>
      48:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      4c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      50:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      54:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      58:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      5c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      60:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      64:	0c 94 ec a4 	jmp	0x149d8	; 0x149d8 <__vector_25>
      68:	0c 94 5e a3 	jmp	0x146bc	; 0x146bc <__vector_26>
      6c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      70:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      74:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      78:	0c 94 1e 6d 	jmp	0xda3c	; 0xda3c <__vector_30>
      7c:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__vector_31>
      80:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      84:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      88:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      8c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      90:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      94:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      98:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      9c:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      a0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      a4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      a8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      ac:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      b0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      b4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      b8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      bc:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      c0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      c4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      c8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      cc:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      d0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      d4:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      d8:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      dc:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>
      e0:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__bad_interrupt>

000000e4 <modi12x3>:
      e4:	52 55 44 20 45 4c 45 20 54 48 52 20 41 49 4c 20     RUD ELE THR AIL 
      f4:	52 55 44 20 54 48 52 20 45 4c 45 20 41 49 4c 20     RUD THR ELE AIL 
     104:	41 49 4c 20 45 4c 45 20 54 48 52 20 52 55 44 20     AIL ELE THR RUD 
     114:	41 49 4c 20 54 48 52 20 45 4c 45 20 52 55 44 20     AIL THR ELE RUD 
	...

00000125 <_ZZ5alertPKcbE3__c_0>:
     125:	70 72 65 73 73 20 61 6e 79 20 4b 65 79 00           press any Key.

00000133 <_ZZ5alertPKcbE3__c>:
     133:	41 4c 45 52 54 00                                   ALERT.

00000139 <_ZZ7messagePKcE3__c>:
     139:	4d 45 53 53 41 47 45 00                             MESSAGE.

00000141 <_ZZ13checkSwitchesvE3__c_0>:
     141:	50 6c 65 61 73 65 20 72 65 73 65 74 20 74 68 65     Please reset the
     151:	6d 00                                               m.

00000153 <_ZZ13checkSwitchesvE3__c>:
     153:	53 77 69 74 63 68 65 73 20 6e 6f 74 20 6f 66 66     Switches not off
	...

00000164 <_ZZ10checkAlarmvE3__c>:
     164:	41 6c 61 72 6d 73 20 44 69 73 61 62 6c 65 64 00     Alarms Disabled.

00000174 <_ZZ8checkTHRvE3__c_0>:
     174:	52 65 73 65 74 20 74 68 72 6f 74 74 6c 65 00        Reset throttle.

00000183 <_ZZ8checkTHRvE3__c>:
     183:	54 68 72 6f 74 74 6c 65 20 6e 6f 74 20 69 64 6c     Throttle not idl
     193:	65 00                                               e.

00000195 <_ZZ13alertMessagesPKcS0_E3__c_0>:
     195:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 20 74 6f     Press any key to
     1a5:	20 73 6b 69 70 00                                    skip.

000001ab <_ZZ13alertMessagesPKcS0_E3__c>:
     1ab:	41 4c 45 52 54 00                                   ALERT.

000001b1 <_ZZ14checkLowEEPROMvE3__c>:
     1b1:	45 45 50 52 4f 4d 20 6c 6f 77 20 6d 65 6d 00        EEPROM low mem.

000001c0 <stamp1>:
     1c0:	56 45 52 53 3a 20 56 31 2e 32 2d 67 72 75 76 69     VERS: V1.2-gruvi
     1d0:	6e 00                                               n.

000001d2 <stamp2>:
     1d2:	44 41 54 45 3a 20 32 30 31 32 2d 30 35 2d 33 31     DATE: 2012-05-31
	...

000001e3 <stamp3>:
     1e3:	54 49 4d 45 3a 20 32 32 3a 31 30 3a 35 37 00        TIME: 22:10:57.

000001f2 <stamp4>:
     1f2:	20 53 56 4e 3a 20 66 72 73 6b 79 2d 72 31 35 39      SVN: frsky-r159
     202:	34 00                                               4.

00000204 <stamp5>:
     204:	20 42 4c 44 3a 20 36 32 00                           BLD: 62.

0000020d <_ZZ24setupPulsesTracerCtp1009vE3__c>:
     20d:	70 75 6c 73 65 20 74 61 62 20 6f 76 65 72 66 6c     pulse tab overfl
     21d:	6f 77 00                                            ow.

00000220 <_ZZ8pushMenuPFvhEE3__c>:
     220:	6d 65 6e 75 53 74 61 63 6b 20 6f 76 65 72 66 6c     menuStack overfl
     230:	6f 77 00                                            ow.

00000233 <_ZZ7popMenuvE3__c>:
     233:	6d 65 6e 75 53 74 61 63 6b 20 75 6e 64 65 72 66     menuStack underf
     243:	6c 6f 77 00                                         low.

00000247 <_ZZ16menu_lcd_HYPHINVhhhhE3__c>:
     247:	2d 2d 2d 49 4e 56 00                                ---INV.

0000024e <_ZZ14menu_lcd_onoffhhhhE3__c>:
     24e:	4f 46 46 4f 4e 20 00                                OFFON .

00000255 <_ZZ17menuProcTemplateshE3__c_1>:
     255:	43 4c 45 41 52 20 4d 49 58 45 53 20 5b 4d 45 4e     CLEAR MIXES [MEN
     265:	55 5d 00                                            U].

00000268 <_ZZ17menuProcTemplateshE3__c_0>:
     268:	53 69 6d 70 6c 65 20 34 2d 43 48 20 54 2d 43 75     Simple 4-CH T-Cu
     278:	74 20 20 20 20 20 20 20 56 2d 54 61 69 6c 20 20     t       V-Tail  
     288:	20 20 20 20 45 6c 65 76 6f 6e 5c 44 65 6c 74 61         Elevon\Delta
     298:	65 43 43 50 4d 20 20 20 20 20 20 20 48 65 6c 69     eCCPM       Heli
     2a8:	20 53 65 74 75 70 20 20 53 65 72 76 6f 20 54 65      Setup  Servo Te
     2b8:	73 74 20 20 00                                      st  .

000002bd <_ZZ17menuProcTemplateshE3__c>:
     2bd:	54 45 4d 50 4c 41 54 45 53 00                       TEMPLATES.

000002c7 <_ZZ17menuProcTelemetryhE3__c_9>:
     2c7:	3c 3e 00                                            <>.

000002ca <_ZZ17menuProcTelemetryhE3__c_8>:
     2ca:	2d 2d 2d 59 65 6c 4f 72 67 52 65 64 00              ---YelOrgRed.

000002d7 <_ZZ17menuProcTelemetryhE3__c_7>:
     2d7:	41 6c 61 72 6d 00                                   Alarm.

000002dd <_ZZ17menuProcTelemetryhE3__c_6>:
     2dd:	74 6f 00                                            to.

000002e0 <_ZZ17menuProcTelemetryhE3__c_5>:
     2e0:	47 2e 42 61 72 00                                   G.Bar.

000002e6 <_ZZ17menuProcTelemetryhE3__c_4>:
     2e6:	63 61 6c 00                                         cal.

000002ea <_ZZ17menuProcTelemetryhE3__c_3>:
     2ea:	4d 61 78 56 00                                      MaxV.

000002ef <_ZZ17menuProcTelemetryhE3__c_2>:
     2ef:	56 6f 6c 74 73 72 61 77 20 20 00                    Voltsraw  .

000002fa <_ZZ17menuProcTelemetryhE3__c_1>:
     2fa:	54 79 70 65 00                                      Type.

000002ff <_ZZ17menuProcTelemetryhE3__c_0>:
     2ff:	41 20 20 63 68 61 6e 6e 65 6c 00                    A  channel.

0000030a <_ZZ17menuProcTelemetryhE3__c>:
     30a:	54 45 4c 45 4d 45 54 52 59 00                       TELEMETRY.

00000314 <_ZZ22menuProcSafetySwitcheshE3__c>:
     314:	53 41 46 45 54 59 20 53 57 49 54 43 48 45 53 00     SAFETY SWITCHES.

00000324 <_ZZ24menuProcFunctionSwitcheshE3__c_0>:
     324:	2d 2d 2d 2d 20 20 20 20 20 20 20 20 20 20 54 72     ----          Tr
     334:	61 69 6e 65 72 20 20 20 20 20 20 20 54 72 61 69     ainer       Trai
     344:	6e 65 72 20 52 55 44 20 20 20 54 72 61 69 6e 65     ner RUD   Traine
     354:	72 20 45 4c 45 20 20 20 54 72 61 69 6e 65 72 20     r ELE   Trainer 
     364:	54 48 52 20 20 20 54 72 61 69 6e 65 72 20 41 49     THR   Trainer AI
     374:	4c 20 20 20 49 6e 73 74 61 6e 74 20 54 72 69 6d     L   Instant Trim
     384:	20 20 54 72 69 6d 73 32 4f 66 66 73 65 74 73 20       Trims2Offsets 
	...

00000395 <_ZZ24menuProcFunctionSwitcheshE3__c>:
     395:	46 55 4e 43 20 53 57 49 54 43 48 45 53 00           FUNC SWITCHES.

000003a3 <_ZZ22menuProcCustomSwitcheshE3__c_1>:
     3a3:	2d 2d 2d 2d 20 20 20 76 3e 6f 66 73 20 20 76 3c     ----   v>ofs  v<
     3b3:	6f 66 73 20 20 7c 76 7c 3e 6f 66 73 7c 76 7c 3c     ofs  |v|>ofs|v|<
     3c3:	6f 66 73 41 4e 44 20 20 20 20 4f 52 20 20 20 20     ofsAND    OR    
     3d3:	20 58 4f 52 20 20 20 20 76 31 3d 3d 76 32 20 76      XOR    v1==v2 v
     3e3:	31 21 3d 76 32 20 76 31 3e 76 32 20 20 76 31 3c     1!=v2 v1>v2  v1<
     3f3:	76 32 20 20 76 31 3e 3d 76 32 20 76 31 3c 3d 76     v2  v1>=v2 v1<=v
     403:	32 20 00                                            2 .

00000406 <_ZZ22menuProcCustomSwitcheshE3__c_0>:
     406:	53 57 00                                            SW.

00000409 <_ZZ22menuProcCustomSwitcheshE3__c>:
     409:	43 55 53 54 4f 4d 20 53 57 49 54 43 48 45 53 00     CUSTOM SWITCHES.

00000419 <_ZZ17menuProcCurvesAllhE3__c_0>:
     419:	43 56 00                                            CV.

0000041c <_ZZ17menuProcCurvesAllhE3__c>:
     41c:	43 55 52 56 45 53 00                                CURVES.

00000423 <_ZZ14menuProcLimitshE3__c_1>:
     423:	2d 2d 2d 49 4e 56 00                                ---INV.

0000042a <_ZZ14menuProcLimitshE3__c_0>:
     42a:	43 4f 50 59 20 54 52 49 4d 20 5b 4d 45 4e 55 5d     COPY TRIM [MENU]
	...

0000043b <_ZZ14menuProcLimitshE3__c>:
     43b:	4c 49 4d 49 54 53 00                                LIMITS.

00000442 <_ZZ15menuProcExpoMixhhE3__c_2>:
     442:	2f 33 32 00                                         /32.

00000446 <_ZZ15menuProcExpoMixhhE3__c_1>:
     446:	2f 31 34 00                                         /14.

0000044a <_ZZ15menuProcExpoMixhhE3__c_0>:
     44a:	4d 49 58 45 52 00                                   MIXER.

00000450 <_ZZ15menuProcExpoMixhhE3__c>:
     450:	44 52 2f 45 58 50 4f 00                             DR/EXPO.

00000458 <_ZZ16displayMixerLinehhhhhhE3__c>:
     458:	2b 3d 2a 3d 3a 3d 00                                +=*=:=.

0000045f <_ZZ14menuProcMixOnehE3__c_16>:
     45f:	53 6c 6f 77 20 20 55 70 00                          Slow  Up.

00000468 <_ZZ14menuProcMixOnehE3__c_15>:
     468:	53 6c 6f 77 20 20 44 6f 77 6e 00                    Slow  Down.

00000473 <_ZZ14menuProcMixOnehE3__c_14>:
     473:	44 65 6c 61 79 20 55 70 00                          Delay Up.

0000047c <_ZZ14menuProcMixOnehE3__c_13>:
     47c:	44 65 6c 61 79 20 44 6f 77 6e 00                    Delay Down.

00000487 <_ZZ14menuProcMixOnehE3__c_12>:
     487:	41 64 64 20 20 20 20 20 4d 75 6c 74 69 70 6c 79     Add     Multiply
     497:	52 65 70 6c 61 63 65 20 00                          Replace .

000004a0 <_ZZ14menuProcMixOnehE3__c_11>:
     4a0:	4d 75 6c 74 70 78 00                                Multpx.

000004a7 <_ZZ14menuProcMixOnehE3__c_10>:
     4a7:	4f 46 46 00                                         OFF.

000004ab <_ZZ14menuProcMixOnehE3__c_9>:
     4ab:	57 61 72 6e 69 6e 67 00                             Warning.

000004b3 <_ZZ14menuProcMixOnehE3__c_8>:
     4b3:	46 2e 50 68 61 73 65 00                             F.Phase.

000004bb <_ZZ14menuProcMixOnehE3__c_7>:
     4bb:	53 77 69 74 63 68 00                                Switch.

000004c2 <_ZZ14menuProcMixOnehE3__c_6>:
     4c2:	43 75 72 76 65 73 00                                Curves.

000004c9 <_ZZ14menuProcMixOnehE3__c_5>:
     4c9:	4f 4e 20 4f 46 46 00                                ON OFF.

000004d0 <_ZZ14menuProcMixOnehE3__c_4>:
     4d0:	54 72 69 6d 00                                      Trim.

000004d5 <_ZZ14menuProcMixOnehE3__c_3>:
     4d5:	4f 66 66 73 65 74 00                                Offset.

000004dc <_ZZ14menuProcMixOnehE3__c_2>:
     4dc:	57 65 69 67 68 74 00                                Weight.

000004e3 <_ZZ14menuProcMixOnehE3__c_1>:
     4e3:	53 6f 75 72 63 65 00                                Source.

000004ea <_ZZ14menuProcMixOnehE3__c_0>:
     4ea:	45 44 49 54 20 4d 49 58 20 00                       EDIT MIX .

000004f4 <_ZZ14menuProcMixOnehE3__c>:
     4f4:	49 4e 53 45 52 54 20 4d 49 58 20 00                 INSERT MIX .

00000500 <_ZZ15menuProcExpoOnehE3__c_0>:
     500:	57 65 69 67 68 74 45 78 70 6f 20 20 50 68 61 73     WeightExpo  Phas
     510:	65 20 53 77 74 63 68 20 57 68 65 6e 20 20 43 75     e Swtch When  Cu
     520:	72 76 65 20 20 20 20 20 20 20 00                    rve       .

0000052b <_ZZ15menuProcExpoOnehE3__c>:
     52b:	44 52 2f 45 58 50 4f 00                             DR/EXPO.

00000533 <_ZZ12editExpoValshhbhhE3__c>:
     533:	2d 2d 2d 78 3e 30 78 3c 30 00                       ---x>0x<0.

0000053d <_ZZ22reachExpoMixCountLimithE3__c_0>:
     53d:	4e 6f 20 66 72 65 65 20 6d 69 78 65 72 21 00        No free mixer!.

0000054c <_ZZ22reachExpoMixCountLimithE3__c>:
     54c:	4e 6f 20 66 72 65 65 20 65 78 70 6f 21 00           No free expo!.

0000055a <_ZZ16menuProcCurveOnehE3__c_1>:
     55a:	45 44 49 54 20 50 52 53 45 54 00                    EDIT PRSET.

00000565 <_ZZ16menuProcCurveOnehE3__c_0>:
     565:	4d 4f 44 45 00                                      MODE.

0000056a <_ZZ16menuProcCurveOnehE3__c>:
     56a:	43 55 52 56 45 00                                   CURVE.

00000570 <_ZZ17menuProcPhasesAllhE3__c_1>:
     570:	43 68 65 63 6b 20 20 20 20 20 54 72 69 6d 73 00     Check     Trims.

00000580 <_ZZ17menuProcPhasesAllhE3__c_0>:
     580:	28 64 65 66 61 75 6c 74 29 00                       (default).

0000058a <_ZZ17menuProcPhasesAllhE3__c>:
     58a:	46 4c 49 47 48 54 20 50 48 41 53 45 53 00           FLIGHT PHASES.

00000598 <_ZZ16menuProcPhaseOnehE3__c_4>:
     598:	46 61 64 65 20 4f 75 74 00                          Fade Out.

000005a1 <_ZZ16menuProcPhaseOnehE3__c_3>:
     5a1:	46 61 64 65 20 49 6e 00                             Fade In.

000005a9 <_ZZ16menuProcPhaseOnehE3__c_2>:
     5a9:	54 72 69 6d 73 00                                   Trims.

000005af <_ZZ16menuProcPhaseOnehE3__c_1>:
     5af:	53 77 69 74 63 68 00                                Switch.

000005b6 <_ZZ16menuProcPhaseOnehE3__c_0>:
     5b6:	4e 61 6d 65 00                                      Name.

000005bb <_ZZ16menuProcPhaseOnehE3__c>:
     5bb:	46 4c 49 47 48 54 20 50 48 41 53 45 00              FLIGHT PHASE.

000005c8 <_ZZ13menuProcModelhE3__c_18>:
     5c8:	50 4f 53 4e 45 47 00                                POSNEG.

000005cf <_ZZ13menuProcModelhE3__c_17>:
     5cf:	53 68 69 66 74 20 53 65 6c 00                       Shift Sel.

000005d9 <_ZZ13menuProcModelhE3__c_16>:
     5d9:	75 53 65 63 00                                      uSec.

000005de <_ZZ13menuProcModelhE3__c_15>:
     5de:	34 43 48 20 36 43 48 20 38 43 48 20 31 30 43 48     4CH 6CH 8CH 10CH
     5ee:	31 32 43 48 31 34 43 48 31 36 43 48 00              12CH14CH16CH.

000005fb <_ZZ13menuProcModelhE3__c_14>:
     5fb:	50 50 4d 20 20 20 53 49 4c 56 5f 41 53 49 4c 56     PPM   SILV_ASILV
     60b:	5f 42 53 49 4c 56 5f 43 54 52 41 43 30 39 00        _BSILV_CTRAC09.

0000061a <_ZZ13menuProcModelhE3__c_13>:
     61a:	50 72 6f 74 6f 00                                   Proto.

00000620 <_ZZ13menuProcModelhE3__c_12>:
     620:	52 45 54 41 31 32 33 00                             RETA123.

00000628 <_ZZ13menuProcModelhE3__c_11>:
     628:	42 65 65 70 20 43 74 72 00                          Beep Ctr.

00000631 <_ZZ13menuProcModelhE3__c_10>:
     631:	45 2e 20 54 72 69 6d 73 00                          E. Trims.

0000063a <_ZZ13menuProcModelhE3__c_9>:
     63a:	45 2e 20 4c 69 6d 69 74 73 00                       E. Limits.

00000644 <_ZZ13menuProcModelhE3__c_8>:
     644:	45 78 70 20 20 20 45 78 46 69 6e 65 46 69 6e 65     Exp   ExFineFine
     654:	20 20 4d 65 64 69 75 6d 43 6f 61 72 73 65 00          MediumCoarse.

00000663 <_ZZ13menuProcModelhE3__c_7>:
     663:	54 72 69 6d 20 49 6e 63 00                          Trim Inc.

0000066c <_ZZ13menuProcModelhE3__c_6>:
     66c:	54 2d 45 78 70 6f 00                                T-Expo.

00000673 <_ZZ13menuProcModelhE3__c_5>:
     673:	54 2d 54 72 69 6d 00                                T-Trim.

0000067a <_ZZ13menuProcModelhE3__c_4>:
     67a:	43 6f 75 6e 74 20 44 6f 77 6e 43 6f 75 6e 74 20     Count DownCount 
     68a:	55 70 20 20 00                                      Up  .

0000068f <_ZZ13menuProcModelhE3__c_3>:
     68f:	54 69 6d 65 72 20 00                                Timer .

00000696 <_ZZ13menuProcModelhE3__c_2>:
     696:	54 72 69 67 67 65 72 00                             Trigger.

0000069e <_ZZ13menuProcModelhE3__c_1>:
     69e:	54 69 6d 65 72 00                                   Timer.

000006a4 <_ZZ13menuProcModelhE3__c_0>:
     6a4:	4e 61 6d 65 00                                      Name.

000006a9 <_ZZ13menuProcModelhE3__c>:
     6a9:	53 45 54 55 50 00                                   SETUP.

000006af <_ZZ19menuProcModelSelecthE3__c_4>:
     6af:	4c 6f 61 64 69 6e 67 20 6d 6f 64 65 6c 2e 2e 2e     Loading model...
	...

000006c0 <_ZZ19menuProcModelSelecthE3__c_3>:
     6c0:	4d 6f 76 69 6e 67 20 6d 6f 64 65 6c 2e 2e 2e 00     Moving model....

000006d0 <_ZZ19menuProcModelSelecthE3__c_2>:
     6d0:	43 6f 70 79 69 6e 67 20 6d 6f 64 65 6c 2e 2e 2e     Copying model...
	...

000006e1 <_ZZ19menuProcModelSelecthE3__c_1>:
     6e1:	44 45 4c 45 54 45 20 4d 4f 44 45 4c 00              DELETE MODEL.

000006ee <_ZZ19menuProcModelSelecthE3__c_0>:
     6ee:	66 72 65 65 00                                      free.

000006f3 <_ZZ19menuProcModelSelecthE3__c>:
     6f3:	4d 4f 44 45 4c 53 45 4c 00                          MODELSEL.

000006fc <_ZZ19displayConfirmationhE3__c>:
     6fc:	5b 4d 45 4e 55 5d 20 20 20 20 5b 45 58 49 54 5d     [MENU]    [EXIT]
	...

0000070d <_ZZ14displayWarninghE3__c>:
     70d:	5b 45 58 49 54 5d 00                                [EXIT].

00000714 <_ZZ17menuProcDiagCalibhE3__c_2>:
     714:	20 4d 4f 56 45 20 53 54 49 43 4b 53 2f 50 4f 54      MOVE STICKS/POT
     724:	53 20 00                                            S .

00000727 <_ZZ17menuProcDiagCalibhE3__c_1>:
     727:	20 20 20 53 45 54 20 4d 49 44 50 4f 49 4e 54 20        SET MIDPOINT 
     737:	20 20 00                                              .

0000073a <_ZZ17menuProcDiagCalibhE3__c_0>:
     73a:	20 5b 4d 45 4e 55 5d 20 54 4f 20 53 54 41 52 54      [MENU] TO START
     74a:	20 20 00                                              .

0000074d <_ZZ17menuProcDiagCalibhE3__c>:
     74d:	43 41 4c 49 42 52 41 54 49 4f 4e 00                 CALIBRATION.

00000759 <_ZZ15menuProcDiagAnahE3__c_0>:
     759:	41 31 41 32 41 33 41 34 41 35 41 36 41 37 41 38     A1A2A3A4A5A6A7A8
	...

0000076a <_ZZ15menuProcDiagAnahE3__c>:
     76a:	41 4e 41 00                                         ANA.

0000076e <_ZZ16menuProcDiagKeyshE3__c_1>:
     76e:	54 72 69 6d 2d 20 2b 00                             Trim- +.

00000776 <_ZZ16menuProcDiagKeyshE3__c_0>:
     776:	20 4d 65 6e 75 20 45 78 69 74 20 44 6f 77 6e 20      Menu Exit Down 
     786:	20 20 55 70 52 69 67 68 74 20 4c 65 66 74 00          UpRight Left.

00000795 <_ZZ16menuProcDiagKeyshE3__c>:
     795:	44 49 41 47 00                                      DIAG.

0000079a <_ZZ16menuProcDiagVershE3__c_0>:
     79a:	45 45 50 52 4f 4d 20 76 00                          EEPROM v.

000007a3 <_ZZ16menuProcDiagVershE3__c>:
     7a3:	56 45 52 53 49 4f 4e 00                             VERSION.

000007ab <_ZZ15menuProcTrainerhE3__c_5>:
     7ab:	43 61 6c 00                                         Cal.

000007af <_ZZ15menuProcTrainerhE3__c_4>:
     7af:	4d 75 6c 74 69 70 6c 69 65 72 00                    Multiplier.

000007ba <_ZZ15menuProcTrainerhE3__c_3>:
     7ba:	63 68 31 63 68 32 63 68 33 63 68 34 00              ch1ch2ch3ch4.

000007c7 <_ZZ15menuProcTrainerhE3__c_2>:
     7c7:	6f 66 66 20 2b 3d 20 3a 3d 00                       off += :=.

000007d1 <_ZZ15menuProcTrainerhE3__c_1>:
     7d1:	6d 6f 64 65 20 20 20 25 20 73 72 63 00              mode   % src.

000007de <_ZZ15menuProcTrainerhE3__c_0>:
     7de:	53 6c 61 76 65 00                                   Slave.

000007e4 <_ZZ15menuProcTrainerhE3__c>:
     7e4:	54 52 41 49 4e 45 52 00                             TRAINER.

000007ec <_ZZ12menuProcTimehE3__c_0>:
     7ec:	44 41 54 45 3a 54 49 4d 45 3a 00                    DATE:TIME:.

000007f7 <_ZZ12menuProcTimehE3__c>:
     7f7:	44 41 54 45 20 41 4e 44 20 54 49 4d 45 00           DATE AND TIME.

00000805 <_ZZ13menuProcSetuphE3__c_22>:
     805:	4d 6f 64 65 00                                      Mode.

0000080a <_ZZ13menuProcSetuphE3__c_21>:
     80a:	52 78 20 43 68 61 6e 6e 65 6c 20 4f 72 64 00        Rx Channel Ord.

00000819 <_ZZ13menuProcSetuphE3__c_20>:
     819:	4e 4f 20 44 41 54 41 20 41 6c 61 72 6d 00           NO DATA Alarm.

00000827 <_ZZ13menuProcSetuphE3__c_19>:
     827:	41 6c 61 72 6d 20 57 61 72 6e 69 6e 67 00           Alarm Warning.

00000835 <_ZZ13menuProcSetuphE3__c_18>:
     835:	4d 65 6d 6f 72 79 20 57 61 72 6e 69 6e 67 00        Memory Warning.

00000844 <_ZZ13menuProcSetuphE3__c_17>:
     844:	44 6f 77 6e 4f 46 46 20 55 70 20 20 00              DownOFF Up  .

00000851 <_ZZ13menuProcSetuphE3__c_16>:
     851:	53 77 69 74 63 68 20 57 61 72 6e 69 6e 67 00        Switch Warning.

00000860 <_ZZ13menuProcSetuphE3__c_15>:
     860:	54 68 72 6f 74 74 6c 65 20 57 61 72 6e 69 6e 67     Throttle Warning
	...

00000871 <_ZZ13menuProcSetuphE3__c_14>:
     871:	53 70 6c 61 73 68 20 73 63 72 65 65 6e 00           Splash screen.

0000087f <_ZZ13menuProcSetuphE3__c_13>:
     87f:	4f 46 46 00                                         OFF.

00000883 <_ZZ13menuProcSetuphE3__c_12>:
     883:	4c 69 67 68 74 20 6f 66 66 20 61 66 74 65 72 00     Light off after.

00000893 <_ZZ13menuProcSetuphE3__c_11>:
     893:	4c 69 67 68 74 20 73 77 69 74 63 68 00              Light switch.

000008a0 <_ZZ13menuProcSetuphE3__c_10>:
     8a0:	46 6c 61 73 68 20 6f 6e 20 62 65 65 70 00           Flash on beep.

000008ae <_ZZ13menuProcSetuphE3__c_9>:
     8ae:	42 65 65 70 20 63 6f 75 6e 74 64 6f 77 6e 00        Beep countdown.

000008bd <_ZZ13menuProcSetuphE3__c_8>:
     8bd:	4d 69 6e 75 74 65 20 62 65 65 70 00                 Minute beep.

000008c9 <_ZZ13menuProcSetuphE3__c_7>:
     8c9:	54 68 72 6f 74 74 6c 65 20 72 65 76 65 72 73 65     Throttle reverse
	...

000008da <_ZZ13menuProcSetuphE3__c_6>:
     8da:	53 49 4e 47 4f 53 4d 50 46 49 4c 54 00              SINGOSMPFILT.

000008e7 <_ZZ13menuProcSetuphE3__c_5>:
     8e7:	46 69 6c 74 65 72 20 41 44 43 00                    Filter ADC.

000008f2 <_ZZ13menuProcSetuphE3__c_4>:
     8f2:	49 6e 61 63 74 69 76 69 74 79 20 61 6c 61 72 6d     Inactivity alarm
	...

00000903 <_ZZ13menuProcSetuphE3__c_3>:
     903:	42 61 74 74 65 72 79 20 77 61 72 6e 69 6e 67 00     Battery warning.

00000913 <_ZZ13menuProcSetuphE3__c_2>:
     913:	43 6f 6e 74 72 61 73 74 00                          Contrast.

0000091c <_ZZ13menuProcSetuphE3__c_1>:
     91c:	51 75 69 65 74 4e 6f 4b 65 79 4e 6f 72 6d 20 4c     QuietNoKeyNorm L
     92c:	6f 6e 67 20 78 4c 6f 6e 67 00                       ong xLong.

00000936 <_ZZ13menuProcSetuphE3__c_0>:
     936:	42 65 65 70 65 72 00                                Beeper.

0000093d <_ZZ13menuProcSetuphE3__c>:
     93d:	52 41 44 49 4f 20 53 45 54 55 50 00                 RADIO SETUP.

00000949 <_ZZ12menuMainViewhE3__c_21>:
     949:	4e 4f 20 44 41 54 41 00                             NO DATA.

00000951 <_ZZ12menuMainViewhE3__c_20>:
     951:	54 78 3d 00                                         Tx=.

00000955 <_ZZ12menuMainViewhE3__c_19>:
     955:	52 78 3d 00                                         Rx=.

00000959 <_ZZ12menuMainViewhE3__c_18>:
     959:	41 20 3d 00                                         A =.

0000095d <_ZZ12menuMainViewhE3__c_17>:
     95d:	7a 3d 00                                            z=.

00000960 <_ZZ12menuMainViewhE3__c_16>:
     960:	79 3d 00                                            y=.

00000963 <_ZZ12menuMainViewhE3__c_15>:
     963:	78 3d 00                                            x=.

00000966 <_ZZ12menuMainViewhE3__c_14>:
     966:	41 63 63 65 6c 00                                   Accel.

0000096c <_ZZ12menuMainViewhE3__c_13>:
     96c:	41 6c 74 3a 00                                      Alt:.

00000971 <_ZZ12menuMainViewhE3__c_12>:
     971:	56 6f 6c 74 73 3a 00                                Volts:.

00000978 <_ZZ12menuMainViewhE3__c_11>:
     978:	46 75 65 6c 3a 00                                   Fuel:.

0000097e <_ZZ12menuMainViewhE3__c_10>:
     97e:	52 50 4d 3a 00                                      RPM:.

00000983 <_ZZ12menuMainViewhE3__c_9>:
     983:	40 43 00                                            @C.

00000986 <_ZZ12menuMainViewhE3__c_8>:
     986:	54 65 6d 70 32 3a 00                                Temp2:.

0000098d <_ZZ12menuMainViewhE3__c_7>:
     98d:	40 43 00                                            @C.

00000990 <_ZZ12menuMainViewhE3__c_6>:
     990:	54 65 6d 70 31 3a 00                                Temp1:.

00000997 <_ZZ12menuMainViewhE3__c_5>:
     997:	41 6c 74 3a 00                                      Alt:.

0000099c <_ZZ12menuMainViewhE3__c_4>:
     99c:	53 70 64 3a 00                                      Spd:.

000009a1 <_ZZ12menuMainViewhE3__c_3>:
     9a1:	48 64 67 3a 00                                      Hdg:.

000009a6 <_ZZ12menuMainViewhE3__c_2>:
     9a6:	54 78 3d 00                                         Tx=.

000009aa <_ZZ12menuMainViewhE3__c_1>:
     9aa:	52 78 3d 00                                         Rx=.

000009ae <_ZZ12menuMainViewhE3__c_0>:
     9ae:	41 20 3d 00                                         A =.

000009b2 <_ZZ12menuMainViewhE3__c>:
     9b2:	20 4d 41 49 4e 20 20 47 50 53 4f 54 48 45 52 00      MAIN  GPSOTHER.

000009c2 <_ZZ18menuProcStatistic2hE3__c_6>:
     9c2:	5b 4d 45 4e 55 5d 20 74 6f 20 72 65 73 65 74 00     [MENU] to reset.

000009d2 <_ZZ18menuProcStatistic2hE3__c_5>:
     9d2:	46 72 65 65 20 53 74 61 63 6b 20 6d 69 6e 20 20     Free Stack min  
     9e2:	20 20 62 00                                           b.

000009e6 <_ZZ18menuProcStatistic2hE3__c_4>:
     9e6:	74 31 30 6d 73 20 20 20 20 20 20 20 20 20 20 75     t10ms          u
     9f6:	73 00                                               s.

000009f8 <_ZZ18menuProcStatistic2hE3__c_3>:
     9f8:	74 6d 61 69 6e 20 6d 61 78 20 20 20 20 20 20 6d     tmain max      m
     a08:	73 00                                               s.

00000a0a <_ZZ18menuProcStatistic2hE3__c_2>:
     a0a:	74 6d 72 31 20 4a 69 74 74 65 72 20 20 20 20 75     tmr1 Jitter    u
     a1a:	73 00                                               s.

00000a1c <_ZZ18menuProcStatistic2hE3__c_1>:
     a1c:	74 6d 72 31 4c 61 74 20 6d 69 6e 20 20 20 20 75     tmr1Lat min    u
     a2c:	73 00                                               s.

00000a2e <_ZZ18menuProcStatistic2hE3__c_0>:
     a2e:	74 6d 72 31 4c 61 74 20 6d 61 78 20 20 20 20 75     tmr1Lat max    u
     a3e:	73 00                                               s.

00000a40 <_ZZ18menuProcStatistic2hE3__c>:
     a40:	53 54 41 54 32 00                                   STAT2.

00000a46 <_ZZ17menuProcStatistichE3__c_4>:
     a46:	54 4f 54 00                                         TOT.

00000a4a <_ZZ17menuProcStatistichE3__c_3>:
     a4a:	53 54 25 00                                         ST%.

00000a4e <_ZZ17menuProcStatistichE3__c_2>:
     a4e:	53 54 4b 00                                         STK.

00000a52 <_ZZ17menuProcStatistichE3__c_1>:
     a52:	54 53 57 00                                         TSW.

00000a56 <_ZZ17menuProcStatistichE3__c_0>:
     a56:	54 4d 45 00                                         TME.

00000a5a <_ZZ17menuProcStatistichE3__c>:
     a5a:	53 54 41 54 00                                      STAT.

00000a5f <_ZZ9eeReadAllvE3__c_0>:
     a5f:	45 45 50 52 4f 4d 20 46 6f 72 6d 61 74 74 69 6e     EEPROM Formattin
     a6f:	67 00                                               g.

00000a71 <_ZZ9eeReadAllvE3__c>:
     a71:	42 61 64 20 45 45 70 72 6f 6d 20 44 61 74 61 00     Bad EEprom Data.

00000a81 <_ZZ9TranslatevE3__c_1>:
     a81:	45 45 50 52 4f 4d 20 43 6f 6e 76 65 72 74 69 6e     EEPROM Convertin
     a91:	67 00                                               g.

00000a93 <_ZZ9TranslatevE3__c_0>:
     a93:	45 45 70 72 6f 6d 20 44 61 74 61 20 45 72 39 78     EEprom Data Er9x
	...

00000aa4 <_ZZ9TranslatevE3__c>:
     aa4:	45 45 70 72 6f 6d 20 44 61 74 61 20 76 33 00        EEprom Data v3.

00000ab3 <_ZZN7RlcFile13nextWriteStepEvE3__c>:
     ab3:	45 45 50 52 4f 4d 20 6f 76 65 72 66 6c 6f 77 00     EEPROM overflow.

00000ac3 <_ZZ11putsTmrModehhhE3__c>:
     ac3:	4f 46 46 41 42 53 52 55 73 52 55 25 45 4c 73 45     OFFABSRUsRU%ELsE
     ad3:	4c 25 54 48 73 54 48 25 41 4c 73 41 4c 25 50 31     L%THsTH%ALsAL%P1
     ae3:	20 50 31 25 50 32 20 50 32 25 50 33 20 50 33 25      P1%P2 P2%P3 P3%
	...

00000af4 <_ZZ9putsCurvehhhhE3__c_0>:
     af4:	63 00                                               c.

00000af6 <_ZZ9putsCurvehhhhE3__c>:
     af6:	2d 2d 2d 78 3e 30 78 3c 30 7c 78 7c 66 3e 30 66     ---x>0x<0|x|f>0f
     b06:	3c 30 7c 66 7c 00                                   <0|f|.

00000b0c <_ZZ15putsFlightPhasehhahE3__c_0>:
     b0c:	46 50 00                                            FP.

00000b0f <_ZZ15putsFlightPhasehhahE3__c>:
     b0f:	2d 2d 2d 00                                         ---.

00000b13 <_ZZ12putsSwitcheshhahE3__c_2>:
     b13:	54 48 52 52 55 44 45 4c 45 49 44 30 49 44 31 49     THRRUDELEID0ID1I
     b23:	44 32 41 49 4c 47 45 41 54 52 4e 53 57 31 53 57     D2AILGEATRNSW1SW
     b33:	32 53 57 33 53 57 34 53 57 35 53 57 36 53 57 37     2SW3SW4SW5SW6SW7
     b43:	53 57 38 53 57 39 53 57 41 53 57 42 53 57 43 00     SW8SW9SWASWBSWC.

00000b53 <_ZZ12putsSwitcheshhahE3__c_1>:
     b53:	4f 46 46 00                                         OFF.

00000b57 <_ZZ12putsSwitcheshhahE3__c_0>:
     b57:	4f 4e 20 00                                         ON .

00000b5b <_ZZ12putsSwitcheshhahE3__c>:
     b5b:	2d 2d 2d 00                                         ---.

00000b5f <_ZZ13putsModelNamehhPchhE3__c>:
     b5f:	4d 4f 44 45 4c 00                                   MODEL.

00000b65 <_ZZ13putsChnLetterhhhhE3__c>:
     b65:	52 45 54 41 00                                      RETA.

00000b6a <_ZZ10putsChnRawhhhhE3__c_3>:
     b6a:	41 44 31 41 44 32 00                                AD1AD2.

00000b71 <_ZZ10putsChnRawhhhhE3__c_2>:
     b71:	43 48 00                                            CH.

00000b74 <_ZZ10putsChnRawhhhhE3__c_1>:
     b74:	50 50 4d 00                                         PPM.

00000b78 <_ZZ10putsChnRawhhhhE3__c_0>:
     b78:	50 31 20 20 50 32 20 20 50 33 20 20 4d 41 58 20     P1  P2  P3  MAX 
     b88:	46 55 4c 4c 43 59 43 31 43 59 43 32 43 59 43 33     FULLCYC1CYC2CYC3
	...

00000b99 <_ZZ10putsChnRawhhhhE3__c>:
     b99:	2d 2d 2d 2d 00                                      ----.

00000b9e <n_Templates>:
     b9e:	f8 11 04 12 0a 12 11 12 1e 12 24 12 2f 12           ..........$./.

00000bac <__ctors_end>:
     bac:	11 24       	eor	r1, r1
     bae:	1f be       	out	0x3f, r1	; 63
     bb0:	cf ef       	ldi	r28, 0xFF	; 255
     bb2:	d1 e2       	ldi	r29, 0x21	; 33
     bb4:	de bf       	out	0x3e, r29	; 62
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	00 e0       	ldi	r16, 0x00	; 0
     bba:	0c bf       	out	0x3c, r16	; 60

00000bbc <__do_copy_data>:
     bbc:	12 e1       	ldi	r17, 0x12	; 18
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b2 e0       	ldi	r27, 0x02	; 2
     bc2:	ee e5       	ldi	r30, 0x5E	; 94
     bc4:	f7 e5       	ldi	r31, 0x57	; 87
     bc6:	01 e0       	ldi	r16, 0x01	; 1
     bc8:	0b bf       	out	0x3b, r16	; 59
     bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__do_copy_data+0x14>
     bcc:	07 90       	elpm	r0, Z+
     bce:	0d 92       	st	X+, r0
     bd0:	aa 33       	cpi	r26, 0x3A	; 58
     bd2:	b1 07       	cpc	r27, r17
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <__do_copy_data+0x10>

00000bd6 <__do_clear_bss>:
     bd6:	12 e2       	ldi	r17, 0x22	; 34
     bd8:	aa e3       	ldi	r26, 0x3A	; 58
     bda:	b2 e1       	ldi	r27, 0x12	; 18
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <.do_clear_bss_start>

00000bde <.do_clear_bss_loop>:
     bde:	1d 92       	st	X+, r1

00000be0 <.do_clear_bss_start>:
     be0:	ad 32       	cpi	r26, 0x2D	; 45
     be2:	b1 07       	cpc	r27, r17
     be4:	e1 f7       	brne	.-8      	; 0xbde <.do_clear_bss_loop>
     be6:	0e 94 1b 20 	call	0x4036	; 0x4036 <main>
     bea:	0c 94 ad ab 	jmp	0x1575a	; 0x1575a <_exit>

00000bee <__bad_interrupt>:
     bee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bf2 <_Z11getADC_filtv>:

#define ADC_VREF_TYPE 0x40 // AVCC with external capacitor at AREF pin
void getADC_filt()
{
  static uint16_t t_ana[2][8];
  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     bf2:	af ea       	ldi	r26, 0xAF	; 175
     bf4:	b8 e1       	ldi	r27, 0x18	; 24
     bf6:	ef eb       	ldi	r30, 0xBF	; 191
     bf8:	f8 e1       	ldi	r31, 0x18	; 24
     bfa:	60 e0       	ldi	r22, 0x00	; 0
    ADMUX = adc_input|ADC_VREF_TYPE;
     bfc:	86 2f       	mov	r24, r22
     bfe:	80 64       	ori	r24, 0x40	; 64
     c00:	80 93 7c 00 	sts	0x007C, r24
    // Start the AD conversion
    ADCSRA |= 0x40;
     c04:	80 91 7a 00 	lds	r24, 0x007A
     c08:	80 64       	ori	r24, 0x40	; 64
     c0a:	80 93 7a 00 	sts	0x007A, r24

    // Do this while waiting
    s_anaFilt[adc_input] = (s_anaFilt[adc_input]/2 + t_ana[1][adc_input]) & 0xFFFE; //gain of 2 on last conversion - clear last bit
     c0e:	40 89       	ldd	r20, Z+16	; 0x10
     c10:	51 89       	ldd	r21, Z+17	; 0x11
     c12:	8d 91       	ld	r24, X+
     c14:	9c 91       	ld	r25, X
     c16:	11 97       	sbiw	r26, 0x01	; 1
     c18:	96 95       	lsr	r25
     c1a:	87 95       	ror	r24
     c1c:	84 0f       	add	r24, r20
     c1e:	95 1f       	adc	r25, r21
     c20:	8e 7f       	andi	r24, 0xFE	; 254
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	9c 93       	st	X, r25
     c26:	8e 93       	st	-X, r24
    t_ana[1][adc_input]  = (t_ana[1][adc_input] + t_ana[0][adc_input]) >> 1;
     c28:	20 81       	ld	r18, Z
     c2a:	31 81       	ldd	r19, Z+1	; 0x01
     c2c:	c9 01       	movw	r24, r18
     c2e:	84 0f       	add	r24, r20
     c30:	95 1f       	adc	r25, r21
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	91 8b       	std	Z+17, r25	; 0x11
     c38:	80 8b       	std	Z+16, r24	; 0x10

    // Wait for the AD conversion to complete
    while ((ADCSRA & 0x10)==0);
     c3a:	80 91 7a 00 	lds	r24, 0x007A
     c3e:	84 ff       	sbrs	r24, 4
     c40:	fc cf       	rjmp	.-8      	; 0xc3a <_Z11getADC_filtv+0x48>
    ADCSRA |= 0x10;
     c42:	80 91 7a 00 	lds	r24, 0x007A
     c46:	80 61       	ori	r24, 0x10	; 16
     c48:	80 93 7a 00 	sts	0x007A, r24

    t_ana[0][adc_input] = (t_ana[0][adc_input]  + ADCW) >> 1;
     c4c:	80 91 78 00 	lds	r24, 0x0078
     c50:	90 91 79 00 	lds	r25, 0x0079
     c54:	82 0f       	add	r24, r18
     c56:	93 1f       	adc	r25, r19
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	81 93       	st	Z+, r24
     c5e:	91 93       	st	Z+, r25

#define ADC_VREF_TYPE 0x40 // AVCC with external capacitor at AREF pin
void getADC_filt()
{
  static uint16_t t_ana[2][8];
  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     c60:	6f 5f       	subi	r22, 0xFF	; 255
     c62:	12 96       	adiw	r26, 0x02	; 2
     c64:	68 30       	cpi	r22, 0x08	; 8
     c66:	51 f6       	brne	.-108    	; 0xbfc <_Z11getADC_filtv+0xa>
    while ((ADCSRA & 0x10)==0);
    ADCSRA |= 0x10;

    t_ana[0][adc_input] = (t_ana[0][adc_input]  + ADCW) >> 1;
  }
}
     c68:	08 95       	ret

00000c6a <_Z11getADC_osmpv>:
void getADC_osmp()
{
  uint16_t temp_ana;

  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
    temp_ana = 0;
     c6a:	ef ea       	ldi	r30, 0xAF	; 175
     c6c:	f8 e1       	ldi	r31, 0x18	; 24

void getADC_osmp()
{
  uint16_t temp_ana;

  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     c6e:	40 e0       	ldi	r20, 0x00	; 0
    temp_ana = 0;
    ADMUX = adc_input|ADC_VREF_TYPE;
     c70:	84 2f       	mov	r24, r20
     c72:	80 64       	ori	r24, 0x40	; 64
     c74:	80 93 7c 00 	sts	0x007C, r24
     c78:	54 e0       	ldi	r21, 0x04	; 4
void getADC_osmp()
{
  uint16_t temp_ana;

  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
    temp_ana = 0;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
    ADMUX = adc_input|ADC_VREF_TYPE;
    for (uint8_t i=0; i<4; i++) {  // Going from 10bits to 11 bits.  Addition = n.  Loop 4^n times
      // Start the AD conversion
      ADCSRA |= 0x40;
     c7e:	20 91 7a 00 	lds	r18, 0x007A
     c82:	20 64       	ori	r18, 0x40	; 64
     c84:	20 93 7a 00 	sts	0x007A, r18
      // Wait for the AD conversion to complete
      while ((ADCSRA & 0x10)==0);
     c88:	20 91 7a 00 	lds	r18, 0x007A
     c8c:	24 ff       	sbrs	r18, 4
     c8e:	fc cf       	rjmp	.-8      	; 0xc88 <_Z11getADC_osmpv+0x1e>
      ADCSRA |= 0x10;
     c90:	20 91 7a 00 	lds	r18, 0x007A
     c94:	20 61       	ori	r18, 0x10	; 16
     c96:	20 93 7a 00 	sts	0x007A, r18
      temp_ana += ADCW;
     c9a:	20 91 78 00 	lds	r18, 0x0078
     c9e:	30 91 79 00 	lds	r19, 0x0079
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	51 50       	subi	r21, 0x01	; 1
  uint16_t temp_ana;

  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
    temp_ana = 0;
    ADMUX = adc_input|ADC_VREF_TYPE;
    for (uint8_t i=0; i<4; i++) {  // Going from 10bits to 11 bits.  Addition = n.  Loop 4^n times
     ca8:	51 f7       	brne	.-44     	; 0xc7e <_Z11getADC_osmpv+0x14>
      // Wait for the AD conversion to complete
      while ((ADCSRA & 0x10)==0);
      ADCSRA |= 0x10;
      temp_ana += ADCW;
    }
    s_anaFilt[adc_input] = temp_ana / 2; // divide by 2^n to normalize result.
     caa:	96 95       	lsr	r25
     cac:	87 95       	ror	r24
     cae:	81 93       	st	Z+, r24
     cb0:	91 93       	st	Z+, r25

void getADC_osmp()
{
  uint16_t temp_ana;

  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     cb2:	4f 5f       	subi	r20, 0xFF	; 255
     cb4:	48 30       	cpi	r20, 0x08	; 8
     cb6:	e1 f6       	brne	.-72     	; 0xc70 <_Z11getADC_osmpv+0x6>
      ADCSRA |= 0x10;
      temp_ana += ADCW;
    }
    s_anaFilt[adc_input] = temp_ana / 2; // divide by 2^n to normalize result.
  }
}
     cb8:	08 95       	ret

00000cba <_Z13getADC_singlev>:

void getADC_single()
{
  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     cba:	ef ea       	ldi	r30, 0xAF	; 175
     cbc:	f8 e1       	ldi	r31, 0x18	; 24
     cbe:	20 e0       	ldi	r18, 0x00	; 0
    ADMUX = adc_input|ADC_VREF_TYPE;
     cc0:	82 2f       	mov	r24, r18
     cc2:	80 64       	ori	r24, 0x40	; 64
     cc4:	80 93 7c 00 	sts	0x007C, r24
    // Start the AD conversion
    ADCSRA |= 0x40;
     cc8:	80 91 7a 00 	lds	r24, 0x007A
     ccc:	80 64       	ori	r24, 0x40	; 64
     cce:	80 93 7a 00 	sts	0x007A, r24
    // Wait for the AD conversion to complete
    while ((ADCSRA & 0x10)==0);
     cd2:	80 91 7a 00 	lds	r24, 0x007A
     cd6:	84 ff       	sbrs	r24, 4
     cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <_Z13getADC_singlev+0x18>
    ADCSRA |= 0x10;
     cda:	80 91 7a 00 	lds	r24, 0x007A
     cde:	80 61       	ori	r24, 0x10	; 16
     ce0:	80 93 7a 00 	sts	0x007A, r24
    s_anaFilt[adc_input] = ADCW * 2; // use 11 bit numbers
     ce4:	80 91 78 00 	lds	r24, 0x0078
     ce8:	90 91 79 00 	lds	r25, 0x0079
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	81 93       	st	Z+, r24
     cf2:	91 93       	st	Z+, r25
  }
}

void getADC_single()
{
  for (uint8_t adc_input=0; adc_input<8; adc_input++) {
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	28 30       	cpi	r18, 0x08	; 8
     cf8:	19 f7       	brne	.-58     	; 0xcc0 <_Z13getADC_singlev+0x6>
    // Wait for the AD conversion to complete
    while ((ADCSRA & 0x10)==0);
    ADCSRA |= 0x10;
    s_anaFilt[adc_input] = ADCW * 2; // use 11 bit numbers
  }
}
     cfa:	08 95       	ret

00000cfc <_Z13calc100toRESXa>:
#define NUM_XCHNOUT (NUM_CHNOUT) //(NUM_CHNOUT)//+NUM_VIRT)

extern inline int16_t calc100toRESX(int8_t x)
{
  // return (int16_t)x*10 + x/4 - x/64;
  return ((x*41)>>2) - x/64;
     cfc:	29 e2       	ldi	r18, 0x29	; 41
     cfe:	82 02       	muls	r24, r18
     d00:	90 01       	movw	r18, r0
     d02:	11 24       	eor	r1, r1
     d04:	35 95       	asr	r19
     d06:	27 95       	ror	r18
     d08:	35 95       	asr	r19
     d0a:	27 95       	ror	r18
     d0c:	87 fd       	sbrc	r24, 7
     d0e:	81 5c       	subi	r24, 0xC1	; 193
     d10:	86 fb       	bst	r24, 6
     d12:	88 0f       	add	r24, r24
     d14:	88 0b       	sbc	r24, r24
     d16:	80 f9       	bld	r24, 0
     d18:	99 27       	eor	r25, r25
     d1a:	87 fd       	sbrc	r24, 7
     d1c:	90 95       	com	r25
     d1e:	28 1b       	sub	r18, r24
     d20:	39 0b       	sbc	r19, r25
}
     d22:	c9 01       	movw	r24, r18
     d24:	08 95       	ret

00000d26 <_Z14calc1000toRESXi>:

extern inline int16_t calc1000toRESX(int16_t x)
{
  // return x + x/32 - x/128 + x/512;
  int16_t y = x>>5;
     d26:	9c 01       	movw	r18, r24
     d28:	e5 e0       	ldi	r30, 0x05	; 5
     d2a:	35 95       	asr	r19
     d2c:	27 95       	ror	r18
     d2e:	ea 95       	dec	r30
     d30:	e1 f7       	brne	.-8      	; 0xd2a <_Z14calc1000toRESXi+0x4>
  x+=y;
  y=y>>2;
     d32:	ac 01       	movw	r20, r24
     d34:	44 0f       	add	r20, r20
     d36:	45 2f       	mov	r20, r21
     d38:	44 1f       	adc	r20, r20
     d3a:	55 0b       	sbc	r21, r21

extern inline int16_t calc1000toRESX(int16_t x)
{
  // return x + x/32 - x/128 + x/512;
  int16_t y = x>>5;
  x+=y;
     d3c:	28 0f       	add	r18, r24
     d3e:	39 1f       	adc	r19, r25
  y=y>>2;
  x-=y;
  return x+(y>>2);
     d40:	89 2f       	mov	r24, r25
     d42:	99 0f       	add	r25, r25
     d44:	99 0b       	sbc	r25, r25
     d46:	85 95       	asr	r24
{
  // return x + x/32 - x/128 + x/512;
  int16_t y = x>>5;
  x+=y;
  y=y>>2;
  x-=y;
     d48:	28 0f       	add	r18, r24
     d4a:	39 1f       	adc	r19, r25
  return x+(y>>2);
     d4c:	24 1b       	sub	r18, r20
     d4e:	35 0b       	sbc	r19, r21
}
     d50:	c9 01       	movw	r24, r18
     d52:	08 95       	ret

00000d54 <_Z11get_tmr10msv>:
extern volatile uint16_t g_tmr10ms;

extern inline uint16_t get_tmr10ms()
{
  uint16_t time  ;
  cli();
     d54:	f8 94       	cli
  time = g_tmr10ms ;  
     d56:	20 91 32 1f 	lds	r18, 0x1F32
     d5a:	30 91 33 1f 	lds	r19, 0x1F33
  sei();
     d5e:	78 94       	sei
  return time ;
}
     d60:	c9 01       	movw	r24, r18
     d62:	08 95       	ret

00000d64 <_Z16isFunctionActiveh>:
extern void moveTrimsToOffsets(); // move state of 3 primary trims to offsets

extern uint16_t active_functions;
inline bool isFunctionActive(uint8_t func)
{
  return active_functions & (1 << (func-1));
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	21 e0       	ldi	r18, 0x01	; 1
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <_Z16isFunctionActiveh+0xe>
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	8a 95       	dec	r24
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <_Z16isFunctionActiveh+0xa>
     d76:	80 91 7c 18 	lds	r24, 0x187C
     d7a:	90 91 7d 18 	lds	r25, 0x187D
     d7e:	28 23       	and	r18, r24
     d80:	39 23       	and	r19, r25
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	21 15       	cp	r18, r1
     d86:	31 05       	cpc	r19, r1
     d88:	09 f4       	brne	.+2      	; 0xd8c <_Z16isFunctionActiveh+0x28>
     d8a:	80 e0       	ldi	r24, 0x00	; 0
}
     d8c:	08 95       	ret

00000d8e <_Z8char2idxc>:
    4, 3, 2, 1 };

#ifdef TRANSLATIONS
int8_t char2idx(char c)
{
  if (c==' ') return 0;
     d8e:	80 32       	cpi	r24, 0x20	; 32
     d90:	21 f1       	breq	.+72     	; 0xdda <_Z8char2idxc+0x4c>
  if (c>='A' && c<='Z') return 1+c-'A';
     d92:	98 2f       	mov	r25, r24
     d94:	91 54       	subi	r25, 0x41	; 65
     d96:	9a 31       	cpi	r25, 0x1A	; 26
     d98:	10 f4       	brcc	.+4      	; 0xd9e <_Z8char2idxc+0x10>
     d9a:	80 54       	subi	r24, 0x40	; 64
     d9c:	08 95       	ret
  if (c>='a' && c<='z') return -1-c+'a';
     d9e:	98 2f       	mov	r25, r24
     da0:	91 56       	subi	r25, 0x61	; 97
     da2:	9a 31       	cpi	r25, 0x1A	; 26
     da4:	18 f4       	brcc	.+6      	; 0xdac <_Z8char2idxc+0x1e>
     da6:	80 95       	com	r24
     da8:	8f 59       	subi	r24, 0x9F	; 159
     daa:	08 95       	ret
  if (c>='0' && c<='9') return 27+c-'0';
     dac:	98 2f       	mov	r25, r24
     dae:	90 53       	subi	r25, 0x30	; 48
     db0:	9a 30       	cpi	r25, 0x0A	; 10
     db2:	10 f4       	brcc	.+4      	; 0xdb8 <_Z8char2idxc+0x2a>
     db4:	85 51       	subi	r24, 0x15	; 21
     db6:	08 95       	ret
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
  for (int8_t i=0;;i++) {
    char cc = pgm_read_byte(s_charTab+i);
     dbc:	f9 01       	movw	r30, r18
     dbe:	e1 56       	subi	r30, 0x61	; 97
     dc0:	f9 4f       	sbci	r31, 0xF9	; 249
     dc2:	e4 91       	lpm	r30, Z+
    if(cc==c) return 37+i;
     dc4:	e8 17       	cp	r30, r24
     dc6:	19 f4       	brne	.+6      	; 0xdce <_Z8char2idxc+0x40>
     dc8:	82 2f       	mov	r24, r18
     dca:	8b 5d       	subi	r24, 0xDB	; 219
     dcc:	08 95       	ret
     dce:	2f 5f       	subi	r18, 0xFF	; 255
     dd0:	3f 4f       	sbci	r19, 0xFF	; 255
    if(cc==0) return 0;
     dd2:	ee 23       	and	r30, r30
     dd4:	99 f7       	brne	.-26     	; 0xdbc <_Z8char2idxc+0x2e>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	08 95       	ret
    4, 3, 2, 1 };

#ifdef TRANSLATIONS
int8_t char2idx(char c)
{
  if (c==' ') return 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
  for (int8_t i=0;;i++) {
    char cc = pgm_read_byte(s_charTab+i);
    if(cc==c) return 37+i;
    if(cc==0) return 0;
  }
}
     ddc:	08 95       	ret

00000dde <_Z8idx2chara>:
#endif

char idx2char(int8_t idx)
{
  if (idx == 0) return ' ';
     dde:	88 23       	and	r24, r24
     de0:	e9 f0       	breq	.+58     	; 0xe1c <_Z8idx2chara+0x3e>
  if (idx < 0) {
     de2:	87 ff       	sbrs	r24, 7
     de4:	07 c0       	rjmp	.+14     	; 0xdf4 <_Z8idx2chara+0x16>
    if (idx > -27) return 'a' - idx - 1;
     de6:	86 3e       	cpi	r24, 0xE6	; 230
     de8:	1c f0       	brlt	.+6      	; 0xdf0 <_Z8idx2chara+0x12>
     dea:	e0 e6       	ldi	r30, 0x60	; 96
     dec:	e8 1b       	sub	r30, r24
     dee:	17 c0       	rjmp	.+46     	; 0xe1e <_Z8idx2chara+0x40>
    idx = -idx;
     df0:	81 95       	neg	r24
     df2:	05 c0       	rjmp	.+10     	; 0xdfe <_Z8idx2chara+0x20>
  }
  if (idx < 27) return 'A' + idx - 1;
     df4:	8b 31       	cpi	r24, 0x1B	; 27
     df6:	1c f4       	brge	.+6      	; 0xdfe <_Z8idx2chara+0x20>
     df8:	e8 2f       	mov	r30, r24
     dfa:	e0 5c       	subi	r30, 0xC0	; 192
     dfc:	10 c0       	rjmp	.+32     	; 0xe1e <_Z8idx2chara+0x40>
  if (idx < 37) return '0' + idx - 27;
     dfe:	85 32       	cpi	r24, 0x25	; 37
     e00:	1c f4       	brge	.+6      	; 0xe08 <_Z8idx2chara+0x2a>
     e02:	e8 2f       	mov	r30, r24
     e04:	eb 5e       	subi	r30, 0xEB	; 235
     e06:	0b c0       	rjmp	.+22     	; 0xe1e <_Z8idx2chara+0x40>
  if (idx <= ZCHAR_MAX) return pgm_read_byte(s_charTab+idx-37);
     e08:	89 32       	cpi	r24, 0x29	; 41
     e0a:	44 f4       	brge	.+16     	; 0xe1c <_Z8idx2chara+0x3e>
     e0c:	e8 2f       	mov	r30, r24
     e0e:	ff 27       	eor	r31, r31
     e10:	e7 fd       	sbrc	r30, 7
     e12:	f0 95       	com	r31
     e14:	e6 58       	subi	r30, 0x86	; 134
     e16:	f9 4f       	sbci	r31, 0xF9	; 249
     e18:	e4 91       	lpm	r30, Z+
     e1a:	01 c0       	rjmp	.+2      	; 0xe1e <_Z8idx2chara+0x40>
  return ' ';
     e1c:	e0 e2       	ldi	r30, 0x20	; 32
}
     e1e:	8e 2f       	mov	r24, r30
     e20:	08 95       	ret

00000e22 <_Z12phaseaddressh>:

PhaseData *phaseaddress(uint8_t idx)
{
  return &g_model.phaseData[idx];
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	4d e0       	ldi	r20, 0x0D	; 13
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	84 9f       	mul	r24, r20
     e2a:	90 01       	movw	r18, r0
     e2c:	85 9f       	mul	r24, r21
     e2e:	30 0d       	add	r19, r0
     e30:	94 9f       	mul	r25, r20
     e32:	30 0d       	add	r19, r0
     e34:	11 24       	eor	r1, r1
     e36:	2a 5e       	subi	r18, 0xEA	; 234
     e38:	3a 4e       	sbci	r19, 0xEA	; 234
}
     e3a:	c9 01       	movw	r24, r18
     e3c:	08 95       	ret

00000e3e <_Z11expoaddressh>:

ExpoData *expoaddress(uint8_t idx )
{
  return &g_model.expoData[idx];
     e3e:	28 2f       	mov	r18, r24
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	22 0f       	add	r18, r18
     e44:	33 1f       	adc	r19, r19
     e46:	22 0f       	add	r18, r18
     e48:	33 1f       	adc	r19, r19
     e4a:	21 5f       	subi	r18, 0xF1	; 241
     e4c:	3b 4e       	sbci	r19, 0xEB	; 235
}
     e4e:	c9 01       	movw	r24, r18
     e50:	08 95       	ret

00000e52 <_Z10mixaddressh>:

MixData *mixaddress(uint8_t idx)
{
  return &g_model.mixData[idx];
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9c 01       	movw	r18, r24
     e56:	a3 e0       	ldi	r26, 0x03	; 3
     e58:	22 0f       	add	r18, r18
     e5a:	33 1f       	adc	r19, r19
     e5c:	aa 95       	dec	r26
     e5e:	e1 f7       	brne	.-8      	; 0xe58 <_Z10mixaddressh+0x6>
     e60:	28 0f       	add	r18, r24
     e62:	39 1f       	adc	r19, r25
     e64:	21 56       	subi	r18, 0x61	; 97
     e66:	3d 4e       	sbci	r19, 0xED	; 237
}
     e68:	c9 01       	movw	r24, r18
     e6a:	08 95       	ret

00000e6c <_Z12limitaddressh>:

LimitData *limitaddress(uint8_t idx)
{
  return &g_model.limitData[idx];
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9c 01       	movw	r18, r24
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	22 0f       	add	r18, r18
     e76:	33 1f       	adc	r19, r19
     e78:	28 0f       	add	r18, r24
     e7a:	39 1f       	adc	r19, r25
     e7c:	21 54       	subi	r18, 0x41	; 65
     e7e:	3c 4e       	sbci	r19, 0xEC	; 236
}
     e80:	c9 01       	movw	r24, r18
     e82:	08 95       	ret

00000e84 <_Z6intpolih>:

int16_t intpol(int16_t x, uint8_t idx) // -100, -75, -50, -25, 0 ,25 ,50, 75, 100
{
#define D9 (RESX * 2 / 8)
#define D5 (RESX * 2 / 4)
  bool    cv9 = idx >= MAX_CURVE5;
     e84:	e1 e0       	ldi	r30, 0x01	; 1
     e86:	68 30       	cpi	r22, 0x08	; 8
     e88:	68 f4       	brcc	.+26     	; 0xea4 <_Z6intpolih+0x20>
     e8a:	e0 e0       	ldi	r30, 0x00	; 0
  int8_t *crv = cv9 ? g_model.curves9[idx-MAX_CURVE5] : g_model.curves5[idx];
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	9b 01       	movw	r18, r22
     e90:	22 0f       	add	r18, r18
     e92:	33 1f       	adc	r19, r19
     e94:	22 0f       	add	r18, r18
     e96:	33 1f       	adc	r19, r19
     e98:	26 0f       	add	r18, r22
     e9a:	37 1f       	adc	r19, r23
     e9c:	a9 01       	movw	r20, r18
     e9e:	49 5b       	subi	r20, 0xB9	; 185
     ea0:	5b 4e       	sbci	r21, 0xEB	; 235
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <_Z6intpolih+0x3c>
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	68 50       	subi	r22, 0x08	; 8
     ea8:	70 40       	sbci	r23, 0x00	; 0
     eaa:	9b 01       	movw	r18, r22
     eac:	53 e0       	ldi	r21, 0x03	; 3
     eae:	22 0f       	add	r18, r18
     eb0:	33 1f       	adc	r19, r19
     eb2:	5a 95       	dec	r21
     eb4:	e1 f7       	brne	.-8      	; 0xeae <_Z6intpolih+0x2a>
     eb6:	26 0f       	add	r18, r22
     eb8:	37 1f       	adc	r19, r23
     eba:	a9 01       	movw	r20, r18
     ebc:	41 59       	subi	r20, 0x91	; 145
     ebe:	5b 4e       	sbci	r21, 0xEB	; 235
     ec0:	da 01       	movw	r26, r20
     ec2:	2c 91       	ld	r18, X
  int16_t erg;

  x+=RESXu;
     ec4:	80 50       	subi	r24, 0x00	; 0
     ec6:	9c 4f       	sbci	r25, 0xFC	; 252
  if(x < 0) {
     ec8:	97 fd       	sbrc	r25, 7
     eca:	0f c0       	rjmp	.+30     	; 0xeea <_Z6intpolih+0x66>
    erg = (int16_t)crv[0] * (RESX/4);
  } else if(x >= (RESX*2)) {
     ecc:	b8 e0       	ldi	r27, 0x08	; 8
     ece:	80 30       	cpi	r24, 0x00	; 0
     ed0:	9b 07       	cpc	r25, r27
     ed2:	8c f0       	brlt	.+34     	; 0xef6 <_Z6intpolih+0x72>
    erg = (int16_t)crv[(cv9 ? 8 : 4)] * (RESX/4);
     ed4:	ee 23       	and	r30, r30
     ed6:	19 f0       	breq	.+6      	; 0xede <_Z6intpolih+0x5a>
     ed8:	28 e0       	ldi	r18, 0x08	; 8
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <_Z6intpolih+0x5e>
     ede:	24 e0       	ldi	r18, 0x04	; 4
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	24 0f       	add	r18, r20
     ee4:	35 1f       	adc	r19, r21
     ee6:	f9 01       	movw	r30, r18
     ee8:	20 81       	ld	r18, Z
     eea:	33 27       	eor	r19, r19
     eec:	27 fd       	sbrc	r18, 7
     eee:	30 95       	com	r19
     ef0:	32 2f       	mov	r19, r18
     ef2:	22 27       	eor	r18, r18
     ef4:	30 c0       	rjmp	.+96     	; 0xf56 <_Z6intpolih+0xd2>
  } else {
    int16_t a,dx;
    if(cv9){
     ef6:	ee 23       	and	r30, r30
     ef8:	29 f0       	breq	.+10     	; 0xf04 <_Z6intpolih+0x80>
      a   = (uint16_t)x / D9;
     efa:	69 2f       	mov	r22, r25
      dx  =((uint16_t)x % D9) * 2;
     efc:	90 70       	andi	r25, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	03 c0       	rjmp	.+6      	; 0xf0a <_Z6intpolih+0x86>
    } else {
      a   = (uint16_t)x / D5;
     f04:	69 2f       	mov	r22, r25
     f06:	66 95       	lsr	r22
      dx  = (uint16_t)x % D5;
     f08:	91 70       	andi	r25, 0x01	; 1
    }
    erg  = (int16_t)crv[a]*((D5-dx)/2) + (int16_t)crv[a+1]*(dx/2);
     f0a:	26 2f       	mov	r18, r22
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	fa 01       	movw	r30, r20
     f10:	e2 0f       	add	r30, r18
     f12:	f3 1f       	adc	r31, r19
     f14:	61 81       	ldd	r22, Z+1	; 0x01
     f16:	77 27       	eor	r23, r23
     f18:	67 fd       	sbrc	r22, 7
     f1a:	70 95       	com	r23
     f1c:	ac 01       	movw	r20, r24
     f1e:	55 95       	asr	r21
     f20:	47 95       	ror	r20
     f22:	64 9f       	mul	r22, r20
     f24:	90 01       	movw	r18, r0
     f26:	65 9f       	mul	r22, r21
     f28:	30 0d       	add	r19, r0
     f2a:	74 9f       	mul	r23, r20
     f2c:	30 0d       	add	r19, r0
     f2e:	11 24       	eor	r1, r1
     f30:	60 81       	ld	r22, Z
     f32:	77 27       	eor	r23, r23
     f34:	67 fd       	sbrc	r22, 7
     f36:	70 95       	com	r23
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	52 e0       	ldi	r21, 0x02	; 2
     f3c:	48 1b       	sub	r20, r24
     f3e:	59 0b       	sbc	r21, r25
     f40:	55 95       	asr	r21
     f42:	47 95       	ror	r20
     f44:	64 9f       	mul	r22, r20
     f46:	c0 01       	movw	r24, r0
     f48:	65 9f       	mul	r22, r21
     f4a:	90 0d       	add	r25, r0
     f4c:	74 9f       	mul	r23, r20
     f4e:	90 0d       	add	r25, r0
     f50:	11 24       	eor	r1, r1
     f52:	28 0f       	add	r18, r24
     f54:	39 1f       	adc	r19, r25
  }
  return erg / 25; // 100*D5/RESX;
     f56:	c9 01       	movw	r24, r18
     f58:	69 e1       	ldi	r22, 0x19	; 25
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
}
     f60:	cb 01       	movw	r24, r22
     f62:	08 95       	ret

00000f64 <_Z10applyCurveihh>:

int16_t applyCurve(int16_t x, uint8_t idx, uint8_t srcRaw)
{
     f64:	9c 01       	movw	r18, r24
  switch(idx) {
     f66:	63 30       	cpi	r22, 0x03	; 3
     f68:	31 f1       	breq	.+76     	; 0xfb6 <_Z10applyCurveihh+0x52>
     f6a:	64 30       	cpi	r22, 0x04	; 4
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <_Z10applyCurveihh+0x14>
     f6e:	61 30       	cpi	r22, 0x01	; 1
     f70:	51 f0       	breq	.+20     	; 0xf86 <_Z10applyCurveihh+0x22>
     f72:	62 30       	cpi	r22, 0x02	; 2
     f74:	90 f4       	brcc	.+36     	; 0xf9a <_Z10applyCurveihh+0x36>
     f76:	3d c0       	rjmp	.+122    	; 0xff2 <_Z10applyCurveihh+0x8e>
     f78:	65 30       	cpi	r22, 0x05	; 5
     f7a:	39 f1       	breq	.+78     	; 0xfca <_Z10applyCurveihh+0x66>
     f7c:	65 30       	cpi	r22, 0x05	; 5
     f7e:	08 f1       	brcs	.+66     	; 0xfc2 <_Z10applyCurveihh+0x5e>
     f80:	66 30       	cpi	r22, 0x06	; 6
     f82:	51 f5       	brne	.+84     	; 0xfd8 <_Z10applyCurveihh+0x74>
     f84:	25 c0       	rjmp	.+74     	; 0xfd0 <_Z10applyCurveihh+0x6c>
  case 0:
    return x;
  case 1:
    if (srcRaw == MIX_FULL) { //FULL
     f86:	49 30       	cpi	r20, 0x09	; 9
     f88:	29 f4       	brne	.+10     	; 0xf94 <_Z10applyCurveihh+0x30>
      if (x<0 ) x=-RESX;   //x|x>0
     f8a:	97 fd       	sbrc	r25, 7
     f8c:	30 c0       	rjmp	.+96     	; 0xfee <_Z10applyCurveihh+0x8a>
      else x=-RESX+2*x;
     f8e:	20 50       	subi	r18, 0x00	; 0
     f90:	32 40       	sbci	r19, 0x02	; 2
     f92:	0a c0       	rjmp	.+20     	; 0xfa8 <_Z10applyCurveihh+0x44>
     f94:	97 ff       	sbrs	r25, 7
     f96:	2d c0       	rjmp	.+90     	; 0xff2 <_Z10applyCurveihh+0x8e>
     f98:	27 c0       	rjmp	.+78     	; 0xfe8 <_Z10applyCurveihh+0x84>
    else {
      if (x<0) x=0;   //x|x>0
    }
    return x;
  case 2:
    if (srcRaw == MIX_FULL) { //FULL
     f9a:	49 30       	cpi	r20, 0x09	; 9
     f9c:	41 f4       	brne	.+16     	; 0xfae <_Z10applyCurveihh+0x4a>
      if (x>0) x=RESX;   //x|x<0
     f9e:	18 16       	cp	r1, r24
     fa0:	19 06       	cpc	r1, r25
     fa2:	fc f0       	brlt	.+62     	; 0xfe2 <_Z10applyCurveihh+0x7e>
      else x=RESX+2*x;
     fa4:	20 50       	subi	r18, 0x00	; 0
     fa6:	3e 4f       	sbci	r19, 0xFE	; 254
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	22 c0       	rjmp	.+68     	; 0xff2 <_Z10applyCurveihh+0x8e>
     fae:	18 16       	cp	r1, r24
     fb0:	19 06       	cpc	r1, r25
     fb2:	d4 f0       	brlt	.+52     	; 0xfe8 <_Z10applyCurveihh+0x84>
     fb4:	1e c0       	rjmp	.+60     	; 0xff2 <_Z10applyCurveihh+0x8e>
    else {
      if (x>0) x=0;   //x|x<0
    }
    return x;
  case 3:       // x|abs(x)
    return abs(x);
     fb6:	97 ff       	sbrs	r25, 7
     fb8:	1c c0       	rjmp	.+56     	; 0xff2 <_Z10applyCurveihh+0x8e>
     fba:	30 95       	com	r19
     fbc:	21 95       	neg	r18
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	18 c0       	rjmp	.+48     	; 0xff2 <_Z10applyCurveihh+0x8e>
  case 4:       //f|f>0
    return x>0 ? RESX : 0;
     fc2:	18 16       	cp	r1, r24
     fc4:	19 06       	cpc	r1, r25
     fc6:	6c f0       	brlt	.+26     	; 0xfe2 <_Z10applyCurveihh+0x7e>
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <_Z10applyCurveihh+0x84>
  case 5:       //f|f<0
    return x<0 ? -RESX : 0;
     fca:	97 ff       	sbrs	r25, 7
     fcc:	0d c0       	rjmp	.+26     	; 0xfe8 <_Z10applyCurveihh+0x84>
     fce:	0f c0       	rjmp	.+30     	; 0xfee <_Z10applyCurveihh+0x8a>
  case 6:       //f|abs(f)
    return x>0 ? RESX : -RESX;
     fd0:	18 16       	cp	r1, r24
     fd2:	19 06       	cpc	r1, r25
     fd4:	34 f0       	brlt	.+12     	; 0xfe2 <_Z10applyCurveihh+0x7e>
     fd6:	0b c0       	rjmp	.+22     	; 0xfee <_Z10applyCurveihh+0x8a>
  }
  return intpol(x, idx-7);
     fd8:	67 50       	subi	r22, 0x07	; 7
     fda:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z6intpolih>
     fde:	9c 01       	movw	r18, r24
     fe0:	08 c0       	rjmp	.+16     	; 0xff2 <_Z10applyCurveihh+0x8e>
      if (x<0) x=0;   //x|x>0
    }
    return x;
  case 2:
    if (srcRaw == MIX_FULL) { //FULL
      if (x>0) x=RESX;   //x|x<0
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	34 e0       	ldi	r19, 0x04	; 4
     fe6:	05 c0       	rjmp	.+10     	; 0xff2 <_Z10applyCurveihh+0x8e>
  case 3:       // x|abs(x)
    return abs(x);
  case 4:       //f|f>0
    return x>0 ? RESX : 0;
  case 5:       //f|f<0
    return x<0 ? -RESX : 0;
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <_Z10applyCurveihh+0x8e>
  case 6:       //f|abs(f)
    return x>0 ? RESX : -RESX;
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	3c ef       	ldi	r19, 0xFC	; 252
  }
  return intpol(x, idx-7);
}
     ff2:	c9 01       	movw	r24, r18
     ff4:	08 95       	ret

00000ff6 <_Z5expoujj>:
// f(x,k)=x*x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=x*x*k/10 + x*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]
// f(x,k)=1+(x-1)*(x-1)*(x-1)*k/10 + (x-1)*(1-k/10) ;P[0,1,2,3,4,5,6,7,8,9,10]

uint16_t expou(uint16_t x, uint16_t k)
{
     ff6:	2f 92       	push	r2
     ff8:	3f 92       	push	r3
     ffa:	4f 92       	push	r4
     ffc:	5f 92       	push	r5
     ffe:	6f 92       	push	r6
    1000:	7f 92       	push	r7
    1002:	8f 92       	push	r8
    1004:	9f 92       	push	r9
    1006:	af 92       	push	r10
    1008:	bf 92       	push	r11
    100a:	cf 92       	push	r12
    100c:	df 92       	push	r13
    100e:	ef 92       	push	r14
    1010:	ff 92       	push	r15
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
  // k*x*x*x + (1-k)*x
  return ((unsigned long)x*x*x/0x10000*k/(RESXul*RESXul/0x10000) + (RESKul-k)*x+RESKul/2)/RESKul;
    1016:	5c 01       	movw	r10, r24
    1018:	cc 24       	eor	r12, r12
    101a:	dd 24       	eor	r13, r13
    101c:	3b 01       	movw	r6, r22
    101e:	88 24       	eor	r8, r8
    1020:	99 24       	eor	r9, r9
    1022:	34 e6       	ldi	r19, 0x64	; 100
    1024:	23 2e       	mov	r2, r19
    1026:	31 2c       	mov	r3, r1
    1028:	41 2c       	mov	r4, r1
    102a:	51 2c       	mov	r5, r1
    102c:	c2 01       	movw	r24, r4
    102e:	b1 01       	movw	r22, r2
    1030:	66 19       	sub	r22, r6
    1032:	77 09       	sbc	r23, r7
    1034:	88 09       	sbc	r24, r8
    1036:	99 09       	sbc	r25, r9
    1038:	a6 01       	movw	r20, r12
    103a:	95 01       	movw	r18, r10
    103c:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    1040:	7b 01       	movw	r14, r22
    1042:	8c 01       	movw	r16, r24
    1044:	82 e3       	ldi	r24, 0x32	; 50
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	a0 e0       	ldi	r26, 0x00	; 0
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 0e       	add	r14, r24
    104e:	f9 1e       	adc	r15, r25
    1050:	0a 1f       	adc	r16, r26
    1052:	1b 1f       	adc	r17, r27
    1054:	c6 01       	movw	r24, r12
    1056:	b5 01       	movw	r22, r10
    1058:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    105c:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    1060:	bc 01       	movw	r22, r24
    1062:	88 27       	eor	r24, r24
    1064:	99 27       	eor	r25, r25
    1066:	a4 01       	movw	r20, r8
    1068:	93 01       	movw	r18, r6
    106a:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    106e:	b4 e0       	ldi	r27, 0x04	; 4
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	77 95       	ror	r23
    1076:	67 95       	ror	r22
    1078:	ba 95       	dec	r27
    107a:	d1 f7       	brne	.-12     	; 0x1070 <_Z5expoujj+0x7a>
    107c:	e6 0e       	add	r14, r22
    107e:	f7 1e       	adc	r15, r23
    1080:	08 1f       	adc	r16, r24
    1082:	19 1f       	adc	r17, r25
    1084:	c8 01       	movw	r24, r16
    1086:	b7 01       	movw	r22, r14
    1088:	a2 01       	movw	r20, r4
    108a:	91 01       	movw	r18, r2
    108c:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
}
    1090:	c9 01       	movw	r24, r18
    1092:	1f 91       	pop	r17
    1094:	0f 91       	pop	r16
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	df 90       	pop	r13
    109c:	cf 90       	pop	r12
    109e:	bf 90       	pop	r11
    10a0:	af 90       	pop	r10
    10a2:	9f 90       	pop	r9
    10a4:	8f 90       	pop	r8
    10a6:	7f 90       	pop	r7
    10a8:	6f 90       	pop	r6
    10aa:	5f 90       	pop	r5
    10ac:	4f 90       	pop	r4
    10ae:	3f 90       	pop	r3
    10b0:	2f 90       	pop	r2
    10b2:	08 95       	ret

000010b4 <_Z4expoii>:

int16_t expo(int16_t x, int16_t k)
{
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	9c 01       	movw	r18, r24
  if(k == 0) return x;
    10bc:	61 15       	cp	r22, r1
    10be:	71 05       	cpc	r23, r1
    10c0:	11 f1       	breq	.+68     	; 0x1106 <_Z4expoii+0x52>
  int16_t   y;
  bool    neg =  x < 0;
    10c2:	13 2f       	mov	r17, r19
    10c4:	11 1f       	adc	r17, r17
    10c6:	11 27       	eor	r17, r17
    10c8:	11 1f       	adc	r17, r17
  if(neg)   x = -x;
    10ca:	19 f0       	breq	.+6      	; 0x10d2 <_Z4expoii+0x1e>
    10cc:	30 95       	com	r19
    10ce:	21 95       	neg	r18
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
  if(k<0){
    10d2:	77 ff       	sbrs	r23, 7
    10d4:	0e c0       	rjmp	.+28     	; 0x10f2 <_Z4expoii+0x3e>
    y = RESXu-expou(RESXu-x,-k);
    10d6:	c0 e0       	ldi	r28, 0x00	; 0
    10d8:	d4 e0       	ldi	r29, 0x04	; 4
    10da:	70 95       	com	r23
    10dc:	61 95       	neg	r22
    10de:	7f 4f       	sbci	r23, 0xFF	; 255
    10e0:	ce 01       	movw	r24, r28
    10e2:	82 1b       	sub	r24, r18
    10e4:	93 0b       	sbc	r25, r19
    10e6:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z5expoujj>
    10ea:	9e 01       	movw	r18, r28
    10ec:	28 1b       	sub	r18, r24
    10ee:	39 0b       	sbc	r19, r25
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <_Z4expoii+0x48>
  }else{
    y = expou(x,k);
    10f2:	c9 01       	movw	r24, r18
    10f4:	0e 94 fb 07 	call	0xff6	; 0xff6 <_Z5expoujj>
    10f8:	28 2f       	mov	r18, r24
    10fa:	39 2f       	mov	r19, r25
  }
  return neg? -y:y;
    10fc:	11 23       	and	r17, r17
    10fe:	19 f0       	breq	.+6      	; 0x1106 <_Z4expoii+0x52>
    1100:	30 95       	com	r19
    1102:	21 95       	neg	r18
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
}
    1106:	c9 01       	movw	r24, r18
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	08 95       	ret

00001110 <_Z11__getSwitcha>:
}

volatile uint16_t s_last_switch_used;
volatile uint16_t s_last_switch_value;
bool __getSwitch(int8_t swtch)
{
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	f8 2e       	mov	r15, r24
  bool result;

  if (swtch == 0)
    111e:	88 23       	and	r24, r24
    1120:	49 f4       	brne	.+18     	; 0x1134 <_Z11__getSwitcha+0x24>
    return s_last_switch_used & (1<<15);
    1122:	80 91 6d 15 	lds	r24, 0x156D
    1126:	90 91 6e 15 	lds	r25, 0x156E
    112a:	89 2f       	mov	r24, r25
    112c:	88 1f       	adc	r24, r24
    112e:	88 27       	eor	r24, r24
    1130:	88 1f       	adc	r24, r24
    1132:	81 c1       	rjmp	.+770    	; 0x1436 <_Z11__getSwitcha+0x326>

  uint8_t cs_idx = abs(swtch);
    1134:	99 27       	eor	r25, r25
    1136:	87 fd       	sbrc	r24, 7
    1138:	90 95       	com	r25
    113a:	97 ff       	sbrs	r25, 7
    113c:	03 c0       	rjmp	.+6      	; 0x1144 <_Z11__getSwitcha+0x34>
    113e:	90 95       	com	r25
    1140:	81 95       	neg	r24
    1142:	9f 4f       	sbci	r25, 0xFF	; 255

  if (cs_idx == MAX_SWITCH) {
    1144:	86 31       	cpi	r24, 0x16	; 22
    1146:	09 f4       	brne	.+2      	; 0x114a <_Z11__getSwitcha+0x3a>
    1148:	6f c1       	rjmp	.+734    	; 0x1428 <_Z11__getSwitcha+0x318>
    result = true;
  }
  else if (cs_idx < MAX_SWITCH-NUM_CSW) {
    114a:	8a 30       	cpi	r24, 0x0A	; 10
    114c:	28 f4       	brcc	.+10     	; 0x1158 <_Z11__getSwitcha+0x48>
    result = keyState((EnumKeys)(SW_BASE+cs_idx-1));
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0d 96       	adiw	r24, 0x0d	; 13
    1152:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    1156:	69 c1       	rjmp	.+722    	; 0x142a <_Z11__getSwitcha+0x31a>
  }
  else {
    cs_idx -= MAX_SWITCH-NUM_CSW;
    1158:	8a 50       	subi	r24, 0x0A	; 10
    volatile CustomSwData &cs = g_model.customSw[cs_idx];
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	89 01       	movw	r16, r18
    1160:	00 0f       	add	r16, r16
    1162:	11 1f       	adc	r17, r17
    1164:	02 0f       	add	r16, r18
    1166:	13 1f       	adc	r17, r19
    1168:	09 54       	subi	r16, 0x49	; 73
    116a:	1b 4e       	sbci	r17, 0xEB	; 235
    if (cs.func == CS_OFF) return false;
    116c:	d8 01       	movw	r26, r16
    116e:	12 96       	adiw	r26, 0x02	; 2
    1170:	9c 91       	ld	r25, X
    1172:	12 97       	sbiw	r26, 0x02	; 2
    1174:	99 23       	and	r25, r25
    1176:	09 f4       	brne	.+2      	; 0x117a <_Z11__getSwitcha+0x6a>
    1178:	5d c1       	rjmp	.+698    	; 0x1434 <_Z11__getSwitcha+0x324>

    uint8_t s = CS_STATE(cs.func);
    117a:	12 96       	adiw	r26, 0x02	; 2
    117c:	9c 91       	ld	r25, X
    117e:	12 97       	sbiw	r26, 0x02	; 2
    1180:	95 30       	cpi	r25, 0x05	; 5
    1182:	40 f0       	brcs	.+16     	; 0x1194 <_Z11__getSwitcha+0x84>
    1184:	12 96       	adiw	r26, 0x02	; 2
    1186:	9c 91       	ld	r25, X
    1188:	12 97       	sbiw	r26, 0x02	; 2
    118a:	98 30       	cpi	r25, 0x08	; 8
    118c:	08 f4       	brcc	.+2      	; 0x1190 <_Z11__getSwitcha+0x80>
    118e:	5a c1       	rjmp	.+692    	; 0x1444 <_Z11__getSwitcha+0x334>
    1190:	22 e0       	ldi	r18, 0x02	; 2
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <_Z11__getSwitcha+0x86>
    1194:	20 e0       	ldi	r18, 0x00	; 0
        s_last_switch_value |= (1<<cs_idx);
      else
        s_last_switch_value &= ~(1<<cs_idx);
    }
    else {
      int16_t x = getValue(cs.v1-1);
    1196:	d8 01       	movw	r26, r16
    1198:	ec 91       	ld	r30, X
    119a:	e1 50       	subi	r30, 0x01	; 1
}

bool s_noStickInputs = false;
FORCEINLINE int16_t getValue(uint8_t i)
{
    if(i<NUM_STICKS+NUM_POTS) return (s_noStickInputs ? 0 : calibratedStick[i]);
    119c:	e7 30       	cpi	r30, 0x07	; 7
    119e:	08 f4       	brcc	.+2      	; 0x11a2 <_Z11__getSwitcha+0x92>
    11a0:	4b c0       	rjmp	.+150    	; 0x1238 <_Z11__getSwitcha+0x128>
    11a2:	55 c0       	rjmp	.+170    	; 0x124e <_Z11__getSwitcha+0x13e>

    uint8_t s = CS_STATE(cs.func);
    if (s == CS_VBOOL) {
      uint16_t mask = (1 << cs_idx);
      if (s_last_switch_used & mask) {
        result = (s_last_switch_value & mask);
    11a4:	20 91 6f 15 	lds	r18, 0x156F
    11a8:	30 91 70 15 	lds	r19, 0x1570
    11ac:	2c 23       	and	r18, r28
    11ae:	3d 23       	and	r19, r29
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	21 15       	cp	r18, r1
    11b4:	31 05       	cpc	r19, r1
    11b6:	41 f5       	brne	.+80     	; 0x1208 <_Z11__getSwitcha+0xf8>
    11b8:	32 c0       	rjmp	.+100    	; 0x121e <_Z11__getSwitcha+0x10e>
      }
      else {
        s_last_switch_used |= mask;
    11ba:	80 91 6d 15 	lds	r24, 0x156D
    11be:	90 91 6e 15 	lds	r25, 0x156E
    11c2:	8c 2b       	or	r24, r28
    11c4:	9d 2b       	or	r25, r29
    11c6:	90 93 6e 15 	sts	0x156E, r25
    11ca:	80 93 6d 15 	sts	0x156D, r24
        bool res1 = __getSwitch(cs.v1);
    11ce:	f8 01       	movw	r30, r16
    11d0:	80 81       	ld	r24, Z
    11d2:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z11__getSwitcha>
    11d6:	e8 2e       	mov	r14, r24
        bool res2 = __getSwitch(cs.v2);
    11d8:	d8 01       	movw	r26, r16
    11da:	11 96       	adiw	r26, 0x01	; 1
    11dc:	8c 91       	ld	r24, X
    11de:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z11__getSwitcha>
        switch (cs.func) {
    11e2:	f8 01       	movw	r30, r16
    11e4:	92 81       	ldd	r25, Z+2	; 0x02
    11e6:	95 30       	cpi	r25, 0x05	; 5
    11e8:	19 f0       	breq	.+6      	; 0x11f0 <_Z11__getSwitcha+0xe0>
    11ea:	96 30       	cpi	r25, 0x06	; 6
    11ec:	49 f4       	brne	.+18     	; 0x1200 <_Z11__getSwitcha+0xf0>
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <_Z11__getSwitcha+0xe6>
          case CS_AND:
            result = (res1 && res2);
    11f0:	ee 20       	and	r14, r14
    11f2:	a9 f0       	breq	.+42     	; 0x121e <_Z11__getSwitcha+0x10e>
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <_Z11__getSwitcha+0xea>
            break;
          case CS_OR:
            result = (res1 || res2);
    11f6:	ee 20       	and	r14, r14
    11f8:	31 f4       	brne	.+12     	; 0x1206 <_Z11__getSwitcha+0xf6>
    11fa:	88 23       	and	r24, r24
    11fc:	21 f4       	brne	.+8      	; 0x1206 <_Z11__getSwitcha+0xf6>
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <_Z11__getSwitcha+0x10e>
            break;
          // case CS_XOR:
          default:
            result = (res1 ^ res2);
    1200:	8e 25       	eor	r24, r14
            break;
        }
      }
      if (result)
    1202:	69 f0       	breq	.+26     	; 0x121e <_Z11__getSwitcha+0x10e>
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <_Z11__getSwitcha+0xf8>
        switch (cs.func) {
          case CS_AND:
            result = (res1 && res2);
            break;
          case CS_OR:
            result = (res1 || res2);
    1206:	81 e0       	ldi	r24, 0x01	; 1
            result = (res1 ^ res2);
            break;
        }
      }
      if (result)
        s_last_switch_value |= (1<<cs_idx);
    1208:	20 91 6f 15 	lds	r18, 0x156F
    120c:	30 91 70 15 	lds	r19, 0x1570
    1210:	2c 2b       	or	r18, r28
    1212:	3d 2b       	or	r19, r29
    1214:	30 93 70 15 	sts	0x1570, r19
    1218:	20 93 6f 15 	sts	0x156F, r18
    121c:	06 c1       	rjmp	.+524    	; 0x142a <_Z11__getSwitcha+0x31a>
      else
        s_last_switch_value &= ~(1<<cs_idx);
    121e:	80 91 6f 15 	lds	r24, 0x156F
    1222:	90 91 70 15 	lds	r25, 0x1570
    1226:	c0 95       	com	r28
    1228:	d0 95       	com	r29
    122a:	c8 23       	and	r28, r24
    122c:	d9 23       	and	r29, r25
    122e:	d0 93 70 15 	sts	0x1570, r29
    1232:	c0 93 6f 15 	sts	0x156F, r28
    1236:	f6 c0       	rjmp	.+492    	; 0x1424 <_Z11__getSwitcha+0x314>
}

bool s_noStickInputs = false;
FORCEINLINE int16_t getValue(uint8_t i)
{
    if(i<NUM_STICKS+NUM_POTS) return (s_noStickInputs ? 0 : calibratedStick[i]);
    1238:	80 91 6c 15 	lds	r24, 0x156C
    123c:	88 23       	and	r24, r24
    123e:	09 f0       	breq	.+2      	; 0x1242 <_Z11__getSwitcha+0x132>
    1240:	44 c0       	rjmp	.+136    	; 0x12ca <_Z11__getSwitcha+0x1ba>
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	ee 0f       	add	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	e9 51       	subi	r30, 0x19	; 25
    124a:	f7 4e       	sbci	r31, 0xE7	; 231
    124c:	29 c0       	rjmp	.+82     	; 0x12a0 <_Z11__getSwitcha+0x190>
    else if(i<MIX_FULL/*srcRaw is shifted +1!*/) return 1024; //FULL/MAX
    124e:	e9 30       	cpi	r30, 0x09	; 9
    1250:	c8 f1       	brcs	.+114    	; 0x12c4 <_Z11__getSwitcha+0x1b4>
    else if(i<PPM_BASE+NUM_CAL_PPM) return (g_ppmIns[i-PPM_BASE] - g_eeGeneral.trainer.calib[i-PPM_BASE])*2;
    1252:	e0 31       	cpi	r30, 0x10	; 16
    1254:	90 f4       	brcc	.+36     	; 0x127a <_Z11__getSwitcha+0x16a>
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	df 01       	movw	r26, r30
    125a:	aa 0f       	add	r26, r26
    125c:	bb 1f       	adc	r27, r27
    125e:	aa 59       	subi	r26, 0x9A	; 154
    1260:	b7 4e       	sbci	r27, 0xE7	; 231
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	e8 5a       	subi	r30, 0xA8	; 168
    1268:	fd 4e       	sbci	r31, 0xED	; 237
    126a:	cd 91       	ld	r28, X+
    126c:	dc 91       	ld	r29, X
    126e:	11 97       	sbiw	r26, 0x01	; 1
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	c8 1b       	sub	r28, r24
    1276:	d9 0b       	sbc	r29, r25
    1278:	09 c0       	rjmp	.+18     	; 0x128c <_Z11__getSwitcha+0x17c>
    else if(i<PPM_BASE+NUM_PPM) return g_ppmIns[i-PPM_BASE]*2;
    127a:	e4 31       	cpi	r30, 0x14	; 20
    127c:	50 f4       	brcc	.+20     	; 0x1292 <_Z11__getSwitcha+0x182>
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	ee 0f       	add	r30, r30
    1282:	ff 1f       	adc	r31, r31
    1284:	ea 59       	subi	r30, 0x9A	; 154
    1286:	f7 4e       	sbci	r31, 0xE7	; 231
    1288:	c0 81       	ld	r28, Z
    128a:	d1 81       	ldd	r29, Z+1	; 0x01
    128c:	cc 0f       	add	r28, r28
    128e:	dd 1f       	adc	r29, r29
    1290:	1e c0       	rjmp	.+60     	; 0x12ce <_Z11__getSwitcha+0x1be>
    else if(i<CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CHOUT_BASE];
    1292:	e4 32       	cpi	r30, 0x24	; 36
    1294:	40 f4       	brcc	.+16     	; 0x12a6 <_Z11__getSwitcha+0x196>
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	ee 0f       	add	r30, r30
    129a:	ff 1f       	adc	r31, r31
    129c:	e3 53       	subi	r30, 0x33	; 51
    129e:	f7 4e       	sbci	r31, 0xE7	; 231
    12a0:	c0 81       	ld	r28, Z
    12a2:	d1 81       	ldd	r29, Z+1	; 0x01
    12a4:	14 c0       	rjmp	.+40     	; 0x12ce <_Z11__getSwitcha+0x1be>
#ifdef FRSKY
    else if(i<CHOUT_BASE+NUM_CHNOUT+NUM_TELEMETRY) return frskyTelemetry[i-CHOUT_BASE-NUM_CHNOUT].value;
    12a6:	e6 32       	cpi	r30, 0x26	; 38
    12a8:	80 f4       	brcc	.+32     	; 0x12ca <_Z11__getSwitcha+0x1ba>
    12aa:	8e 2f       	mov	r24, r30
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	84 97       	sbiw	r24, 0x24	; 36
    12b0:	fc 01       	movw	r30, r24
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	e8 0f       	add	r30, r24
    12b8:	f9 1f       	adc	r31, r25
    12ba:	eb 59       	subi	r30, 0x9B	; 155
    12bc:	f0 4e       	sbci	r31, 0xE0	; 224
    12be:	c0 81       	ld	r28, Z
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <_Z11__getSwitcha+0x1be>

bool s_noStickInputs = false;
FORCEINLINE int16_t getValue(uint8_t i)
{
    if(i<NUM_STICKS+NUM_POTS) return (s_noStickInputs ? 0 : calibratedStick[i]);
    else if(i<MIX_FULL/*srcRaw is shifted +1!*/) return 1024; //FULL/MAX
    12c4:	c0 e0       	ldi	r28, 0x00	; 0
    12c6:	d4 e0       	ldi	r29, 0x04	; 4
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <_Z11__getSwitcha+0x1be>
    else if(i<PPM_BASE+NUM_PPM) return g_ppmIns[i-PPM_BASE]*2;
    else if(i<CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CHOUT_BASE];
#ifdef FRSKY
    else if(i<CHOUT_BASE+NUM_CHNOUT+NUM_TELEMETRY) return frskyTelemetry[i-CHOUT_BASE-NUM_CHNOUT].value;
#endif
    else return 0;
    12ca:	c0 e0       	ldi	r28, 0x00	; 0
    12cc:	d0 e0       	ldi	r29, 0x00	; 0
        s_last_switch_value &= ~(1<<cs_idx);
    }
    else {
      int16_t x = getValue(cs.v1-1);
      int16_t y;
      if (s == CS_VOFS) {
    12ce:	22 23       	and	r18, r18
    12d0:	51 f5       	brne	.+84     	; 0x1326 <_Z11__getSwitcha+0x216>
#ifdef FRSKY
        if (cs.v1 > CHOUT_BASE+NUM_CHNOUT)
    12d2:	d8 01       	movw	r26, r16
    12d4:	8c 91       	ld	r24, X
    12d6:	85 32       	cpi	r24, 0x25	; 37
    12d8:	4c f0       	brlt	.+18     	; 0x12ec <_Z11__getSwitcha+0x1dc>
          y = 125+cs.v2;
    12da:	11 96       	adiw	r26, 0x01	; 1
    12dc:	2c 91       	ld	r18, X
    12de:	11 97       	sbiw	r26, 0x01	; 1
    12e0:	33 27       	eor	r19, r19
    12e2:	27 fd       	sbrc	r18, 7
    12e4:	30 95       	com	r19
    12e6:	23 58       	subi	r18, 0x83	; 131
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <_Z11__getSwitcha+0x1e6>
        else
#endif
          y = calc100toRESX(cs.v2);
    12ec:	f8 01       	movw	r30, r16
    12ee:	81 81       	ldd	r24, Z+1	; 0x01
    12f0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z13calc100toRESXa>
    12f4:	9c 01       	movw	r18, r24

        switch (cs.func) {
    12f6:	d8 01       	movw	r26, r16
    12f8:	12 96       	adiw	r26, 0x02	; 2
    12fa:	8c 91       	ld	r24, X
    12fc:	12 97       	sbiw	r26, 0x02	; 2
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	09 f4       	brne	.+2      	; 0x1304 <_Z11__getSwitcha+0x1f4>
    1302:	82 c0       	rjmp	.+260    	; 0x1408 <_Z11__getSwitcha+0x2f8>
    1304:	83 30       	cpi	r24, 0x03	; 3
    1306:	19 f0       	breq	.+6      	; 0x130e <_Z11__getSwitcha+0x1fe>
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	39 f4       	brne	.+14     	; 0x131a <_Z11__getSwitcha+0x20a>
    130c:	79 c0       	rjmp	.+242    	; 0x1400 <_Z11__getSwitcha+0x2f0>
            break;
          case CS_VNEG:
            result = (x<y);
            break;
          case CS_APOS:
            result = (abs(x)>y);
    130e:	d7 ff       	sbrs	r29, 7
    1310:	76 c0       	rjmp	.+236    	; 0x13fe <_Z11__getSwitcha+0x2ee>
    1312:	d0 95       	com	r29
    1314:	c1 95       	neg	r28
    1316:	df 4f       	sbci	r29, 0xFF	; 255
    1318:	72 c0       	rjmp	.+228    	; 0x13fe <_Z11__getSwitcha+0x2ee>
            break;
          // case CS_ANEG:
          default:
            result = (abs(x)<y);
    131a:	d7 ff       	sbrs	r29, 7
    131c:	75 c0       	rjmp	.+234    	; 0x1408 <_Z11__getSwitcha+0x2f8>
    131e:	d0 95       	com	r29
    1320:	c1 95       	neg	r28
    1322:	df 4f       	sbci	r29, 0xFF	; 255
    1324:	71 c0       	rjmp	.+226    	; 0x1408 <_Z11__getSwitcha+0x2f8>
        }
      }
      else {
        y = getValue(cs.v2-1);
    1326:	d8 01       	movw	r26, r16
    1328:	11 96       	adiw	r26, 0x01	; 1
    132a:	ec 91       	ld	r30, X
    132c:	11 97       	sbiw	r26, 0x01	; 1
    132e:	e1 50       	subi	r30, 0x01	; 1
}

bool s_noStickInputs = false;
FORCEINLINE int16_t getValue(uint8_t i)
{
    if(i<NUM_STICKS+NUM_POTS) return (s_noStickInputs ? 0 : calibratedStick[i]);
    1330:	e7 30       	cpi	r30, 0x07	; 7
    1332:	58 f4       	brcc	.+22     	; 0x134a <_Z11__getSwitcha+0x23a>
    1334:	80 91 6c 15 	lds	r24, 0x156C
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <_Z11__getSwitcha+0x22e>
    133c:	44 c0       	rjmp	.+136    	; 0x13c6 <_Z11__getSwitcha+0x2b6>
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	ee 0f       	add	r30, r30
    1342:	ff 1f       	adc	r31, r31
    1344:	e9 51       	subi	r30, 0x19	; 25
    1346:	f7 4e       	sbci	r31, 0xE7	; 231
    1348:	29 c0       	rjmp	.+82     	; 0x139c <_Z11__getSwitcha+0x28c>
    else if(i<MIX_FULL/*srcRaw is shifted +1!*/) return 1024; //FULL/MAX
    134a:	e9 30       	cpi	r30, 0x09	; 9
    134c:	c8 f1       	brcs	.+114    	; 0x13c0 <_Z11__getSwitcha+0x2b0>
    else if(i<PPM_BASE+NUM_CAL_PPM) return (g_ppmIns[i-PPM_BASE] - g_eeGeneral.trainer.calib[i-PPM_BASE])*2;
    134e:	e0 31       	cpi	r30, 0x10	; 16
    1350:	90 f4       	brcc	.+36     	; 0x1376 <_Z11__getSwitcha+0x266>
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	df 01       	movw	r26, r30
    1356:	aa 0f       	add	r26, r26
    1358:	bb 1f       	adc	r27, r27
    135a:	aa 59       	subi	r26, 0x9A	; 154
    135c:	b7 4e       	sbci	r27, 0xE7	; 231
    135e:	ee 0f       	add	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	e8 5a       	subi	r30, 0xA8	; 168
    1364:	fd 4e       	sbci	r31, 0xED	; 237
    1366:	2d 91       	ld	r18, X+
    1368:	3c 91       	ld	r19, X
    136a:	11 97       	sbiw	r26, 0x01	; 1
    136c:	80 81       	ld	r24, Z
    136e:	91 81       	ldd	r25, Z+1	; 0x01
    1370:	28 1b       	sub	r18, r24
    1372:	39 0b       	sbc	r19, r25
    1374:	09 c0       	rjmp	.+18     	; 0x1388 <_Z11__getSwitcha+0x278>
    else if(i<PPM_BASE+NUM_PPM) return g_ppmIns[i-PPM_BASE]*2;
    1376:	e4 31       	cpi	r30, 0x14	; 20
    1378:	50 f4       	brcc	.+20     	; 0x138e <_Z11__getSwitcha+0x27e>
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	ee 0f       	add	r30, r30
    137e:	ff 1f       	adc	r31, r31
    1380:	ea 59       	subi	r30, 0x9A	; 154
    1382:	f7 4e       	sbci	r31, 0xE7	; 231
    1384:	20 81       	ld	r18, Z
    1386:	31 81       	ldd	r19, Z+1	; 0x01
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	1e c0       	rjmp	.+60     	; 0x13ca <_Z11__getSwitcha+0x2ba>
    else if(i<CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CHOUT_BASE];
    138e:	e4 32       	cpi	r30, 0x24	; 36
    1390:	40 f4       	brcc	.+16     	; 0x13a2 <_Z11__getSwitcha+0x292>
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e3 53       	subi	r30, 0x33	; 51
    139a:	f7 4e       	sbci	r31, 0xE7	; 231
    139c:	20 81       	ld	r18, Z
    139e:	31 81       	ldd	r19, Z+1	; 0x01
    13a0:	14 c0       	rjmp	.+40     	; 0x13ca <_Z11__getSwitcha+0x2ba>
#ifdef FRSKY
    else if(i<CHOUT_BASE+NUM_CHNOUT+NUM_TELEMETRY) return frskyTelemetry[i-CHOUT_BASE-NUM_CHNOUT].value;
    13a2:	e6 32       	cpi	r30, 0x26	; 38
    13a4:	80 f4       	brcc	.+32     	; 0x13c6 <_Z11__getSwitcha+0x2b6>
    13a6:	8e 2f       	mov	r24, r30
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	84 97       	sbiw	r24, 0x24	; 36
    13ac:	fc 01       	movw	r30, r24
    13ae:	ee 0f       	add	r30, r30
    13b0:	ff 1f       	adc	r31, r31
    13b2:	e8 0f       	add	r30, r24
    13b4:	f9 1f       	adc	r31, r25
    13b6:	eb 59       	subi	r30, 0x9B	; 155
    13b8:	f0 4e       	sbci	r31, 0xE0	; 224
    13ba:	20 81       	ld	r18, Z
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	05 c0       	rjmp	.+10     	; 0x13ca <_Z11__getSwitcha+0x2ba>

bool s_noStickInputs = false;
FORCEINLINE int16_t getValue(uint8_t i)
{
    if(i<NUM_STICKS+NUM_POTS) return (s_noStickInputs ? 0 : calibratedStick[i]);
    else if(i<MIX_FULL/*srcRaw is shifted +1!*/) return 1024; //FULL/MAX
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	34 e0       	ldi	r19, 0x04	; 4
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <_Z11__getSwitcha+0x2ba>
    else if(i<PPM_BASE+NUM_PPM) return g_ppmIns[i-PPM_BASE]*2;
    else if(i<CHOUT_BASE+NUM_CHNOUT) return ex_chans[i-CHOUT_BASE];
#ifdef FRSKY
    else if(i<CHOUT_BASE+NUM_CHNOUT+NUM_TELEMETRY) return frskyTelemetry[i-CHOUT_BASE-NUM_CHNOUT].value;
#endif
    else return 0;
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
        }
      }
      else {
        y = getValue(cs.v2-1);

        switch (cs.func) {
    13ca:	f8 01       	movw	r30, r16
    13cc:	82 81       	ldd	r24, Z+2	; 0x02
    13ce:	89 30       	cpi	r24, 0x09	; 9
    13d0:	89 f0       	breq	.+34     	; 0x13f4 <_Z11__getSwitcha+0x2e4>
    13d2:	8a 30       	cpi	r24, 0x0A	; 10
    13d4:	18 f4       	brcc	.+6      	; 0x13dc <_Z11__getSwitcha+0x2cc>
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	09 f5       	brne	.+66     	; 0x141c <_Z11__getSwitcha+0x30c>
    13da:	07 c0       	rjmp	.+14     	; 0x13ea <_Z11__getSwitcha+0x2da>
    13dc:	8a 30       	cpi	r24, 0x0A	; 10
    13de:	79 f0       	breq	.+30     	; 0x13fe <_Z11__getSwitcha+0x2ee>
    13e0:	8b 30       	cpi	r24, 0x0B	; 11
    13e2:	91 f0       	breq	.+36     	; 0x1408 <_Z11__getSwitcha+0x2f8>
    13e4:	8c 30       	cpi	r24, 0x0C	; 12
    13e6:	d1 f4       	brne	.+52     	; 0x141c <_Z11__getSwitcha+0x30c>
    13e8:	14 c0       	rjmp	.+40     	; 0x1412 <_Z11__getSwitcha+0x302>
          case CS_EQUAL:
            result = (x==y);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	c2 17       	cp	r28, r18
    13ee:	d3 07       	cpc	r29, r19
    13f0:	c9 f4       	brne	.+50     	; 0x1424 <_Z11__getSwitcha+0x314>
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <_Z11__getSwitcha+0x31a>
            break;
          case CS_NEQUAL:
            result = (x!=y);
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	c2 17       	cp	r28, r18
    13f8:	d3 07       	cpc	r29, r19
    13fa:	b9 f4       	brne	.+46     	; 0x142a <_Z11__getSwitcha+0x31a>
    13fc:	13 c0       	rjmp	.+38     	; 0x1424 <_Z11__getSwitcha+0x314>
            break;
          case CS_GREATER:
            result = (x>y);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	2c 17       	cp	r18, r28
    1402:	3d 07       	cpc	r19, r29
    1404:	94 f0       	brlt	.+36     	; 0x142a <_Z11__getSwitcha+0x31a>
    1406:	0e c0       	rjmp	.+28     	; 0x1424 <_Z11__getSwitcha+0x314>
            break;
          case CS_LESS:
            result = (x<y);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	c2 17       	cp	r28, r18
    140c:	d3 07       	cpc	r29, r19
    140e:	6c f0       	brlt	.+26     	; 0x142a <_Z11__getSwitcha+0x31a>
    1410:	09 c0       	rjmp	.+18     	; 0x1424 <_Z11__getSwitcha+0x314>
            break;
          case CS_EGREATER:
            result = (x>=y);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	c2 17       	cp	r28, r18
    1416:	d3 07       	cpc	r29, r19
    1418:	44 f4       	brge	.+16     	; 0x142a <_Z11__getSwitcha+0x31a>
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <_Z11__getSwitcha+0x314>
            break;
          // case CS_ELESS:
          default:
            result = (x<=y);
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	2c 17       	cp	r18, r28
    1420:	3d 07       	cpc	r19, r29
    1422:	1c f4       	brge	.+6      	; 0x142a <_Z11__getSwitcha+0x31a>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	01 c0       	rjmp	.+2      	; 0x142a <_Z11__getSwitcha+0x31a>
    return s_last_switch_used & (1<<15);

  uint8_t cs_idx = abs(swtch);

  if (cs_idx == MAX_SWITCH) {
    result = true;
    1428:	81 e0       	ldi	r24, 0x01	; 1
        }
      }
    }
  }

  return swtch > 0 ? result : !result;
    142a:	1f 14       	cp	r1, r15
    142c:	24 f0       	brlt	.+8      	; 0x1436 <_Z11__getSwitcha+0x326>
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	89 27       	eor	r24, r25
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <_Z11__getSwitcha+0x326>
    result = keyState((EnumKeys)(SW_BASE+cs_idx-1));
  }
  else {
    cs_idx -= MAX_SWITCH-NUM_CSW;
    volatile CustomSwData &cs = g_model.customSw[cs_idx];
    if (cs.func == CS_OFF) return false;
    1434:	80 e0       	ldi	r24, 0x00	; 0
      }
    }
  }

  return swtch > 0 ? result : !result;
}
    1436:	df 91       	pop	r29
    1438:	cf 91       	pop	r28
    143a:	1f 91       	pop	r17
    143c:	0f 91       	pop	r16
    143e:	ff 90       	pop	r15
    1440:	ef 90       	pop	r14
    1442:	08 95       	ret
    volatile CustomSwData &cs = g_model.customSw[cs_idx];
    if (cs.func == CS_OFF) return false;

    uint8_t s = CS_STATE(cs.func);
    if (s == CS_VBOOL) {
      uint16_t mask = (1 << cs_idx);
    1444:	c1 e0       	ldi	r28, 0x01	; 1
    1446:	d0 e0       	ldi	r29, 0x00	; 0
    1448:	02 c0       	rjmp	.+4      	; 0x144e <_Z11__getSwitcha+0x33e>
    144a:	cc 0f       	add	r28, r28
    144c:	dd 1f       	adc	r29, r29
    144e:	8a 95       	dec	r24
    1450:	e2 f7       	brpl	.-8      	; 0x144a <_Z11__getSwitcha+0x33a>
      if (s_last_switch_used & mask) {
    1452:	80 91 6d 15 	lds	r24, 0x156D
    1456:	90 91 6e 15 	lds	r25, 0x156E
    145a:	8c 23       	and	r24, r28
    145c:	9d 23       	and	r25, r29
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	09 f0       	breq	.+2      	; 0x1464 <_Z11__getSwitcha+0x354>
    1462:	a0 ce       	rjmp	.-704    	; 0x11a4 <_Z11__getSwitcha+0x94>
    1464:	aa ce       	rjmp	.-684    	; 0x11ba <_Z11__getSwitcha+0xaa>

00001466 <_Z9getSwitchab>:
  return swtch > 0 ? result : !result;
}

bool getSwitch(int8_t swtch, bool nc)
{
  s_last_switch_used = (nc<<15);
    1466:	36 2f       	mov	r19, r22
    1468:	37 95       	ror	r19
    146a:	33 27       	eor	r19, r19
    146c:	37 95       	ror	r19
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 93 6e 15 	sts	0x156E, r19
    1474:	20 93 6d 15 	sts	0x156D, r18
  return __getSwitch(swtch);
    1478:	0e 94 88 08 	call	0x1110	; 0x1110 <_Z11__getSwitcha>
}
    147c:	08 95       	ret

0000147e <_Z14getFlightPhasev>:

uint8_t getFlightPhase()
{
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
      return i;
    }
  }
  return 0;
    1484:	c8 e2       	ldi	r28, 0x28	; 40
    1486:	d5 e1       	ldi	r29, 0x15	; 21
  return __getSwitch(swtch);
}

uint8_t getFlightPhase()
{
  for (uint8_t i=1; i<MAX_PHASES; i++) {
    1488:	11 e0       	ldi	r17, 0x01	; 1
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
    148a:	88 81       	ld	r24, Y
    148c:	88 23       	and	r24, r24
    148e:	51 f0       	breq	.+20     	; 0x14a4 <_Z14getFlightPhasev+0x26>
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1496:	88 23       	and	r24, r24
    1498:	29 f0       	breq	.+10     	; 0x14a4 <_Z14getFlightPhasev+0x26>
      return i;
    }
  }
  return 0;
}
    149a:	81 2f       	mov	r24, r17
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	08 95       	ret
  return __getSwitch(swtch);
}

uint8_t getFlightPhase()
{
  for (uint8_t i=1; i<MAX_PHASES; i++) {
    14a4:	1f 5f       	subi	r17, 0xFF	; 255
    14a6:	2d 96       	adiw	r28, 0x0d	; 13
    14a8:	15 30       	cpi	r17, 0x05	; 5
    14aa:	79 f7       	brne	.-34     	; 0x148a <_Z14getFlightPhasev+0xc>
    PhaseData *phase = &g_model.phaseData[i];
    if (phase->swtch && getSwitch(phase->swtch, 0)) {
      return i;
    }
  }
  return 0;
    14ac:	10 e0       	ldi	r17, 0x00	; 0
    14ae:	f5 cf       	rjmp	.-22     	; 0x149a <_Z14getFlightPhasev+0x1c>

000014b0 <_Z10applyExposPih>:
}
#endif


void applyExpos(int16_t *anas, uint8_t phase)
{
    14b0:	4f 92       	push	r4
    14b2:	5f 92       	push	r5
    14b4:	6f 92       	push	r6
    14b6:	7f 92       	push	r7
    14b8:	8f 92       	push	r8
    14ba:	9f 92       	push	r9
    14bc:	af 92       	push	r10
    14be:	bf 92       	push	r11
    14c0:	cf 92       	push	r12
    14c2:	df 92       	push	r13
    14c4:	ef 92       	push	r14
    14c6:	ff 92       	push	r15
    14c8:	0f 93       	push	r16
    14ca:	1f 93       	push	r17
    14cc:	cf 93       	push	r28
    14ce:	df 93       	push	r29
    14d0:	3c 01       	movw	r6, r24
    14d2:	86 2f       	mov	r24, r22
  static int16_t anas2[4]; // values before expo, to ensure same expo base when multiple expo lines are used
  memcpy(anas2, anas, sizeof(anas2));
    14d4:	af ed       	ldi	r26, 0xDF	; 223
    14d6:	b8 e1       	ldi	r27, 0x18	; 24
    14d8:	f3 01       	movw	r30, r6
    14da:	98 e0       	ldi	r25, 0x08	; 8
    14dc:	01 90       	ld	r0, Z+
    14de:	0d 92       	st	X+, r0
    14e0:	91 50       	subi	r25, 0x01	; 1
    14e2:	e1 f7       	brne	.-8      	; 0x14dc <_Z10applyExposPih+0x2c>

  if (phase == 255)
    14e4:	8f 3f       	cpi	r24, 0xFF	; 255
    14e6:	11 f4       	brne	.+4      	; 0x14ec <_Z10applyExposPih+0x3c>
    phase = getFlightPhase();
    14e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    14ec:	22 e1       	ldi	r18, 0x12	; 18
    14ee:	e2 2e       	mov	r14, r18
    14f0:	24 e1       	ldi	r18, 0x14	; 20
    14f2:	f2 2e       	mov	r15, r18
}
#endif


void applyExpos(int16_t *anas, uint8_t phase)
{
    14f4:	c0 e0       	ldi	r28, 0x00	; 0
    14f6:	d0 e0       	ldi	r29, 0x00	; 0
  memcpy(anas2, anas, sizeof(anas2));

  if (phase == 255)
    phase = getFlightPhase();

  int8_t cur_chn = -1;
    14f8:	0f ef       	ldi	r16, 0xFF	; 255
    if (getSwitch(ed.swtch, 1)) {
      int16_t v = anas2[ed.chn];
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
        cur_chn = ed.chn;
        int16_t k = ed.expo;
        if (IS_THROTTLE(cur_chn) && g_model.thrExpo)
    14fa:	92 e0       	ldi	r25, 0x02	; 2
    14fc:	49 2e       	mov	r4, r25
    14fe:	51 2c       	mov	r5, r1
      if (ed.negPhase) {
        if (phase+1 == -ed.phase)
          continue;
      }
      else {
        if (phase+1 != ed.phase)
    1500:	c8 2e       	mov	r12, r24
    1502:	dd 24       	eor	r13, r13
    1504:	08 94       	sec
    1506:	c1 1c       	adc	r12, r1
    1508:	d1 1c       	adc	r13, r1
    phase = getFlightPhase();

  int8_t cur_chn = -1;
  for (uint8_t i=0; i<DIM(g_model.expoData); i++) {
    ExpoData &ed = g_model.expoData[i];
    if (ed.mode==0) break; // end of list
    150a:	fe 01       	movw	r30, r28
    150c:	ee 0f       	add	r30, r30
    150e:	ff 1f       	adc	r31, r31
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	e1 5f       	subi	r30, 0xF1	; 241
    1516:	fb 4e       	sbci	r31, 0xEB	; 235
    1518:	20 81       	ld	r18, Z
    151a:	82 2f       	mov	r24, r18
    151c:	83 70       	andi	r24, 0x03	; 3
    151e:	09 f4       	brne	.+2      	; 0x1522 <_Z10applyExposPih+0x72>
    1520:	c8 c0       	rjmp	.+400    	; 0x16b2 <_Z10applyExposPih+0x202>
    if (ed.chn == cur_chn)
    1522:	26 95       	lsr	r18
    1524:	26 95       	lsr	r18
    1526:	23 70       	andi	r18, 0x03	; 3
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	80 2f       	mov	r24, r16
    152c:	99 27       	eor	r25, r25
    152e:	87 fd       	sbrc	r24, 7
    1530:	90 95       	com	r25
    1532:	28 17       	cp	r18, r24
    1534:	39 07       	cpc	r19, r25
    1536:	09 f4       	brne	.+2      	; 0x153a <_Z10applyExposPih+0x8a>
    1538:	b3 c0       	rjmp	.+358    	; 0x16a0 <_Z10applyExposPih+0x1f0>
      continue;
    if (ed.phase != 0) {
    153a:	81 81       	ldd	r24, Z+1	; 0x01
    153c:	80 7e       	andi	r24, 0xE0	; 224
    153e:	99 f0       	breq	.+38     	; 0x1566 <_Z10applyExposPih+0xb6>
      if (ed.negPhase) {
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	80 fd       	sbrc	r24, 0
    1544:	10 c0       	rjmp	.+32     	; 0x1566 <_Z10applyExposPih+0xb6>
        if (phase+1 == -ed.phase)
          continue;
      }
      else {
        if (phase+1 != ed.phase)
    1546:	fe 01       	movw	r30, r28
    1548:	ee 0f       	add	r30, r30
    154a:	ff 1f       	adc	r31, r31
    154c:	ee 0f       	add	r30, r30
    154e:	ff 1f       	adc	r31, r31
    1550:	e0 5f       	subi	r30, 0xF0	; 240
    1552:	fb 4e       	sbci	r31, 0xEB	; 235
    1554:	80 81       	ld	r24, Z
    1556:	82 95       	swap	r24
    1558:	86 95       	lsr	r24
    155a:	87 70       	andi	r24, 0x07	; 7
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	c8 16       	cp	r12, r24
    1560:	d9 06       	cpc	r13, r25
    1562:	09 f0       	breq	.+2      	; 0x1566 <_Z10applyExposPih+0xb6>
    1564:	9d c0       	rjmp	.+314    	; 0x16a0 <_Z10applyExposPih+0x1f0>
          continue;
      }
    }
    if (getSwitch(ed.swtch, 1)) {
    1566:	fe 01       	movw	r30, r28
    1568:	ee 0f       	add	r30, r30
    156a:	ff 1f       	adc	r31, r31
    156c:	ee 0f       	add	r30, r30
    156e:	ff 1f       	adc	r31, r31
    1570:	e0 5f       	subi	r30, 0xF0	; 240
    1572:	fb 4e       	sbci	r31, 0xEB	; 235
    1574:	80 81       	ld	r24, Z
    1576:	88 0f       	add	r24, r24
    1578:	88 0f       	add	r24, r24
    157a:	88 0f       	add	r24, r24
    157c:	85 95       	asr	r24
    157e:	85 95       	asr	r24
    1580:	85 95       	asr	r24
    1582:	61 e0       	ldi	r22, 0x01	; 1
    1584:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1588:	88 23       	and	r24, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <_Z10applyExposPih+0xde>
    158c:	89 c0       	rjmp	.+274    	; 0x16a0 <_Z10applyExposPih+0x1f0>
      int16_t v = anas2[ed.chn];
    158e:	fe 01       	movw	r30, r28
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	ee 0f       	add	r30, r30
    1596:	ff 1f       	adc	r31, r31
    1598:	e1 5f       	subi	r30, 0xF1	; 241
    159a:	fb 4e       	sbci	r31, 0xEB	; 235
    159c:	20 81       	ld	r18, Z
    159e:	12 2f       	mov	r17, r18
    15a0:	16 95       	lsr	r17
    15a2:	16 95       	lsr	r17
    15a4:	13 70       	andi	r17, 0x03	; 3
    15a6:	e1 2f       	mov	r30, r17
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	ee 0f       	add	r30, r30
    15ac:	ff 1f       	adc	r31, r31
    15ae:	e1 52       	subi	r30, 0x21	; 33
    15b0:	f7 4e       	sbci	r31, 0xE7	; 231
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	23 70       	andi	r18, 0x03	; 3
      if((v<0 && ed.mode&1) || (v>=0 && ed.mode&2)) {
    15b8:	97 ff       	sbrs	r25, 7
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <_Z10applyExposPih+0x112>
    15bc:	20 fd       	sbrc	r18, 0
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <_Z10applyExposPih+0x116>
    15c0:	6f c0       	rjmp	.+222    	; 0x16a0 <_Z10applyExposPih+0x1f0>
    15c2:	21 ff       	sbrs	r18, 1
    15c4:	6d c0       	rjmp	.+218    	; 0x16a0 <_Z10applyExposPih+0x1f0>
        cur_chn = ed.chn;
    15c6:	01 2f       	mov	r16, r17
        int16_t k = ed.expo;
    15c8:	f7 01       	movw	r30, r14
    15ca:	20 81       	ld	r18, Z
    15cc:	33 27       	eor	r19, r19
    15ce:	27 fd       	sbrc	r18, 7
    15d0:	30 95       	com	r19
        if (IS_THROTTLE(cur_chn) && g_model.thrExpo)
    15d2:	40 91 82 12 	lds	r20, 0x1282
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	41 70       	andi	r20, 0x01	; 1
    15da:	50 70       	andi	r21, 0x00	; 0
    15dc:	52 01       	movw	r10, r4
    15de:	a4 1a       	sub	r10, r20
    15e0:	b5 0a       	sbc	r11, r21
    15e2:	81 2e       	mov	r8, r17
    15e4:	99 24       	eor	r9, r9
    15e6:	87 fc       	sbrc	r8, 7
    15e8:	90 94       	com	r9
    15ea:	a8 14       	cp	r10, r8
    15ec:	b9 04       	cpc	r11, r9
    15ee:	81 f4       	brne	.+32     	; 0x1610 <_Z10applyExposPih+0x160>
    15f0:	40 91 99 12 	lds	r20, 0x1299
    15f4:	43 ff       	sbrs	r20, 3
    15f6:	0c c0       	rjmp	.+24     	; 0x1610 <_Z10applyExposPih+0x160>
          v = 2*expo((v+RESX)/2, k);
    15f8:	80 50       	subi	r24, 0x00	; 0
    15fa:	9c 4f       	sbci	r25, 0xFC	; 252
    15fc:	b2 01       	movw	r22, r4
    15fe:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    1602:	cb 01       	movw	r24, r22
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z4expoii>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	03 c0       	rjmp	.+6      	; 0x1616 <_Z10applyExposPih+0x166>
        else
          v = expo(v, k);
    1610:	b9 01       	movw	r22, r18
    1612:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_Z4expoii>
        if (ed.curve) v = applyCurve(v, ed.curve > 10 ? ed.curve + 4 : ed.curve, 0);
    1616:	fe 01       	movw	r30, r28
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	e1 5f       	subi	r30, 0xF1	; 241
    1622:	fb 4e       	sbci	r31, 0xEB	; 235
    1624:	60 81       	ld	r22, Z
    1626:	26 2f       	mov	r18, r22
    1628:	20 7f       	andi	r18, 0xF0	; 240
    162a:	59 f0       	breq	.+22     	; 0x1642 <_Z10applyExposPih+0x192>
    162c:	62 95       	swap	r22
    162e:	6f 70       	andi	r22, 0x0F	; 15
    1630:	26 2f       	mov	r18, r22
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	2b 30       	cpi	r18, 0x0B	; 11
    1636:	31 05       	cpc	r19, r1
    1638:	0c f0       	brlt	.+2      	; 0x163c <_Z10applyExposPih+0x18c>
    163a:	6c 5f       	subi	r22, 0xFC	; 252
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 b2 07 	call	0xf64	; 0xf64 <_Z10applyCurveihh>
        v = ((int32_t)v * ed.weight) / 100;
    1642:	9c 01       	movw	r18, r24
    1644:	b9 01       	movw	r22, r18
    1646:	88 27       	eor	r24, r24
    1648:	77 fd       	sbrc	r23, 7
    164a:	80 95       	com	r24
    164c:	98 2f       	mov	r25, r24
    164e:	fe 01       	movw	r30, r28
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	ef 5e       	subi	r30, 0xEF	; 239
    165a:	fb 4e       	sbci	r31, 0xEB	; 235
    165c:	20 81       	ld	r18, Z
    165e:	26 95       	lsr	r18
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	40 e0       	ldi	r20, 0x00	; 0
    1664:	50 e0       	ldi	r21, 0x00	; 0
    1666:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    166a:	24 e6       	ldi	r18, 0x64	; 100
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    1676:	82 2f       	mov	r24, r18
    1678:	93 2f       	mov	r25, r19
        if (IS_THROTTLE(cur_chn) && g_model.thrExpo) v -= RESX;
    167a:	a8 14       	cp	r10, r8
    167c:	b9 04       	cpc	r11, r9
    167e:	31 f4       	brne	.+12     	; 0x168c <_Z10applyExposPih+0x1dc>
    1680:	20 91 99 12 	lds	r18, 0x1299
    1684:	23 ff       	sbrs	r18, 3
    1686:	02 c0       	rjmp	.+4      	; 0x168c <_Z10applyExposPih+0x1dc>
    1688:	80 50       	subi	r24, 0x00	; 0
    168a:	94 40       	sbci	r25, 0x04	; 4
        anas[cur_chn] = v;
    168c:	e1 2f       	mov	r30, r17
    168e:	ff 27       	eor	r31, r31
    1690:	e7 fd       	sbrc	r30, 7
    1692:	f0 95       	com	r31
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e6 0d       	add	r30, r6
    169a:	f7 1d       	adc	r31, r7
    169c:	91 83       	std	Z+1, r25	; 0x01
    169e:	80 83       	st	Z, r24
    16a0:	21 96       	adiw	r28, 0x01	; 1
    16a2:	84 e0       	ldi	r24, 0x04	; 4
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	e8 0e       	add	r14, r24
    16a8:	f9 1e       	adc	r15, r25

  if (phase == 255)
    phase = getFlightPhase();

  int8_t cur_chn = -1;
  for (uint8_t i=0; i<DIM(g_model.expoData); i++) {
    16aa:	ce 30       	cpi	r28, 0x0E	; 14
    16ac:	d1 05       	cpc	r29, r1
    16ae:	09 f0       	breq	.+2      	; 0x16b2 <_Z10applyExposPih+0x202>
    16b0:	2c cf       	rjmp	.-424    	; 0x150a <_Z10applyExposPih+0x5a>
        if (IS_THROTTLE(cur_chn) && g_model.thrExpo) v -= RESX;
        anas[cur_chn] = v;
      }
    }
  }
}
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	9f 90       	pop	r9
    16c8:	8f 90       	pop	r8
    16ca:	7f 90       	pop	r7
    16cc:	6f 90       	pop	r6
    16ce:	5f 90       	pop	r5
    16d0:	4f 90       	pop	r4
    16d2:	08 95       	ret

000016d4 <_Z12getTrimValuehh>:
  }
  return 0;
}

int16_t getTrimValue(uint8_t phase, uint8_t idx)
{
    16d4:	df 93       	push	r29
    16d6:	cf 93       	push	r28
    16d8:	0f 92       	push	r0
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
  PhaseData *p = phaseaddress(phase);
    16de:	69 83       	std	Y+1, r22	; 0x01
    16e0:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z12phaseaddressh>
  return (((int16_t)p->trim[idx]) << 2) + ((p->trim_ext >> (2*idx)) & 0x03);
    16e4:	69 81       	ldd	r22, Y+1	; 0x01
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	fc 01       	movw	r30, r24
    16ea:	24 81       	ldd	r18, Z+4	; 0x04
    16ec:	33 27       	eor	r19, r19
    16ee:	27 fd       	sbrc	r18, 7
    16f0:	30 95       	com	r19
    16f2:	ab 01       	movw	r20, r22
    16f4:	44 0f       	add	r20, r20
    16f6:	55 1f       	adc	r21, r21
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <_Z12getTrimValuehh+0x2a>
    16fa:	35 95       	asr	r19
    16fc:	27 95       	ror	r18
    16fe:	4a 95       	dec	r20
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <_Z12getTrimValuehh+0x26>
    1702:	23 70       	andi	r18, 0x03	; 3
    1704:	30 70       	andi	r19, 0x00	; 0
    1706:	68 0f       	add	r22, r24
    1708:	79 1f       	adc	r23, r25
    170a:	fb 01       	movw	r30, r22
    170c:	80 81       	ld	r24, Z
    170e:	99 27       	eor	r25, r25
    1710:	87 fd       	sbrc	r24, 7
    1712:	90 95       	com	r25
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	28 0f       	add	r18, r24
    171e:	39 1f       	adc	r19, r25
}
    1720:	c9 01       	movw	r24, r18
    1722:	0f 90       	pop	r0
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <_Z12setTrimValuehhi>:

void setTrimValue(uint8_t phase, uint8_t idx, int16_t trim)
{
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	df 93       	push	r29
    1730:	cf 93       	push	r28
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	8a 01       	movw	r16, r20
  PhaseData *p = phaseaddress(phase);
    173a:	69 83       	std	Y+1, r22	; 0x01
    173c:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z12phaseaddressh>
    1740:	fc 01       	movw	r30, r24
  p->trim[idx] = (int8_t)(trim >> 2);
    1742:	69 81       	ldd	r22, Y+1	; 0x01
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	dc 01       	movw	r26, r24
    1748:	a6 0f       	add	r26, r22
    174a:	b7 1f       	adc	r27, r23
    174c:	c8 01       	movw	r24, r16
    174e:	95 95       	asr	r25
    1750:	87 95       	ror	r24
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	8c 93       	st	X, r24
  p->trim_ext = (p->trim_ext & ~(0x03 << (2*idx))) + (((trim & 0x03) << (2*idx)));
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	83 e0       	ldi	r24, 0x03	; 3
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	06 2e       	mov	r0, r22
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <_Z12setTrimValuehhi+0x3e>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <_Z12setTrimValuehhi+0x3a>
    176c:	80 95       	com	r24
    176e:	94 81       	ldd	r25, Z+4	; 0x04
    1770:	89 23       	and	r24, r25
    1772:	98 01       	movw	r18, r16
    1774:	23 70       	andi	r18, 0x03	; 3
    1776:	30 70       	andi	r19, 0x00	; 0
    1778:	02 c0       	rjmp	.+4      	; 0x177e <_Z12setTrimValuehhi+0x54>
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	6a 95       	dec	r22
    1780:	e2 f7       	brpl	.-8      	; 0x177a <_Z12setTrimValuehhi+0x50>
    1782:	82 0f       	add	r24, r18
    1784:	84 83       	std	Z+4, r24	; 0x04
  STORE_MODELVARS;
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
}
    178c:	0f 90       	pop	r0
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	1f 91       	pop	r17
    1794:	0f 91       	pop	r16
    1796:	08 95       	ret

00001798 <_Z18getTrimFlightPhasehh>:

uint8_t getTrimFlightPhase(uint8_t idx, uint8_t phase)
{
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	18 2f       	mov	r17, r24
    17a0:	c6 2f       	mov	r28, r22
    if (phase == 0) return 0;
    int16_t trim = getTrimValue(phase, idx);
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
    phase = result;
    17a2:	d5 e0       	ldi	r29, 0x05	; 5
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <_Z18getTrimFlightPhasehh+0x10>
    17a6:	c8 2f       	mov	r28, r24
}

uint8_t getTrimFlightPhase(uint8_t idx, uint8_t phase)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    if (phase == 0) return 0;
    17a8:	cc 23       	and	r28, r28
    17aa:	89 f0       	breq	.+34     	; 0x17ce <_Z18getTrimFlightPhasehh+0x36>
    int16_t trim = getTrimValue(phase, idx);
    17ac:	8c 2f       	mov	r24, r28
    17ae:	61 2f       	mov	r22, r17
    17b0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
    17b4:	9c 01       	movw	r18, r24
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	25 3f       	cpi	r18, 0xF5	; 245
    17ba:	38 07       	cpc	r19, r24
    17bc:	44 f0       	brlt	.+16     	; 0x17ce <_Z18getTrimFlightPhasehh+0x36>
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    17be:	82 2f       	mov	r24, r18
    17c0:	85 5f       	subi	r24, 0xF5	; 245
    if (result >= phase) result++;
    17c2:	8c 17       	cp	r24, r28
    17c4:	08 f0       	brcs	.+2      	; 0x17c8 <_Z18getTrimFlightPhasehh+0x30>
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	d1 50       	subi	r29, 0x01	; 1
  STORE_MODELVARS;
}

uint8_t getTrimFlightPhase(uint8_t idx, uint8_t phase)
{
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    17ca:	69 f7       	brne	.-38     	; 0x17a6 <_Z18getTrimFlightPhasehh+0xe>
    if (trim <= TRIM_EXTENDED_MAX) return phase;
    uint8_t result = trim-TRIM_EXTENDED_MAX-1;
    if (result >= phase) result++;
    phase = result;
  }
  return 0;
    17cc:	c0 e0       	ldi	r28, 0x00	; 0
}
    17ce:	8c 2f       	mov	r24, r28
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	08 95       	ret

000017d8 <_Z7keyDownv>:
}
#else
inline uint8_t keyDown()
{
#if defined (PCBV4)
  return (~PINL) & 0x3F;
    17d8:	80 91 09 01 	lds	r24, 0x0109
    17dc:	80 95       	com	r24
#else
  return (~PINB) & 0x7E;
#endif
}
    17de:	8f 73       	andi	r24, 0x3F	; 63
    17e0:	08 95       	ret

000017e2 <_Z14clearKeyEventsv>:
void clearKeyEvents()
{
#ifdef SIMU
    while (keyDown() && main_thread_running) sleep(1/*ms*/);
#else
    while(keyDown());  // loop until all keys are up
    17e2:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z7keyDownv>
    17e6:	88 23       	and	r24, r24
    17e8:	e1 f7       	brne	.-8      	; 0x17e2 <_Z14clearKeyEventsv>
#endif
    putEvent(0);
    17ea:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <_Z8putEventh>
}
    17ee:	08 95       	ret

000017f0 <_Z13alertMessagesPKcS0_>:
    alert(PSTR("EEPROM low mem"));
  }
}

void alertMessages( const pm_char * s, const pm_char * t )
{
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	df 93       	push	r29
    17f8:	8c 01       	movw	r16, r24
    17fa:	eb 01       	movw	r28, r22
  lcd_clear();
    17fc:	0e 94 58 66 	call	0xccb0	; 0xccb0 <_Z9lcd_clearv>
  lcd_putsAtt(64-5*FW,0*FH,PSTR("ALERT"),DBLSIZE);
    1800:	82 e2       	ldi	r24, 0x22	; 34
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	4b ea       	ldi	r20, 0xAB	; 171
    1806:	51 e0       	ldi	r21, 0x01	; 1
    1808:	24 e0       	ldi	r18, 0x04	; 4
    180a:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  lcd_puts_P(0,4*FH,s);
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	60 e2       	ldi	r22, 0x20	; 32
    1812:	a8 01       	movw	r20, r16
    1814:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0,5*FH,t);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	68 e2       	ldi	r22, 0x28	; 40
    181c:	ae 01       	movw	r20, r28
    181e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0,6*FH,  PSTR("Press any key to skip") ) ;
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	60 e3       	ldi	r22, 0x30	; 48
    1826:	45 e9       	ldi	r20, 0x95	; 149
    1828:	51 e0       	ldi	r21, 0x01	; 1
    182a:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  refreshDisplay();
    182e:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>
  lcdSetRefVolt(g_eeGeneral.contrast);
    1832:	80 91 6c 12 	lds	r24, 0x126C
    1836:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>

  clearKeyEvents();
    183a:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z14clearKeyEventsv>
}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	08 95       	ret

00001848 <_Z13checkSwitchesv>:
  if(g_eeGeneral.disableAlarmWarning) return;
  if(!g_eeGeneral.beeperVal) alert(PSTR("Alarms Disabled"));
}

void checkSwitches()
{
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
  if(!g_eeGeneral.switchWarning) return; // if warning is on
    184c:	80 91 81 12 	lds	r24, 0x1281
    1850:	86 70       	andi	r24, 0x06	; 6
    1852:	99 f1       	breq	.+102    	; 0x18ba <_Z13checkSwitchesv+0x72>

  // first - display warning
  alertMessages( PSTR("Switches not off"), PSTR("Please reset them") ) ;
    1854:	83 e5       	ldi	r24, 0x53	; 83
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	61 e4       	ldi	r22, 0x41	; 65
    185a:	71 e0       	ldi	r23, 0x01	; 1
    185c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_Z13alertMessagesPKcS0_>

  bool state = (g_eeGeneral.switchWarning > 0);
    1860:	80 91 81 12 	lds	r24, 0x1281
    1864:	86 70       	andi	r24, 0x06	; 6
    1866:	d1 e0       	ldi	r29, 0x01	; 1
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	09 f0       	breq	.+2      	; 0x186e <_Z13checkSwitchesv+0x26>
    186c:	d0 e0       	ldi	r29, 0x00	; 0
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif

    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    186e:	ce e0       	ldi	r28, 0x0E	; 14
    1870:	0a c0       	rjmp	.+20     	; 0x1886 <_Z13checkSwitchesv+0x3e>
    {
        if(i==SW_ID0) continue;
    1872:	c1 31       	cpi	r28, 0x11	; 17
    1874:	39 f0       	breq	.+14     	; 0x1884 <_Z13checkSwitchesv+0x3c>
        if(getSwitch(i-SW_BASE+1,0) != state) break;
    1876:	8c 2f       	mov	r24, r28
    1878:	8d 50       	subi	r24, 0x0D	; 13
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1880:	8d 17       	cp	r24, r29
    1882:	29 f4       	brne	.+10     	; 0x188e <_Z13checkSwitchesv+0x46>
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif

    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    1884:	cf 5f       	subi	r28, 0xFF	; 255
    1886:	c6 31       	cpi	r28, 0x16	; 22
    1888:	a0 f3       	brcs	.-24     	; 0x1872 <_Z13checkSwitchesv+0x2a>
    {
        if(i==SW_ID0) continue;
        if(getSwitch(i-SW_BASE+1,0) != state) break;
    }
    if(i==SW_Trainer || keyDown()) return;
    188a:	c6 31       	cpi	r28, 0x16	; 22
    188c:	b1 f0       	breq	.+44     	; 0x18ba <_Z13checkSwitchesv+0x72>
    188e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z7keyDownv>
    1892:	88 23       	and	r24, r24
    1894:	91 f4       	brne	.+36     	; 0x18ba <_Z13checkSwitchesv+0x72>
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <_Z13checkSwitchesv+0x5c>

    if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1898:	80 91 86 12 	lds	r24, 0x1286
    189c:	88 23       	and	r24, r24
    189e:	51 f0       	breq	.+20     	; 0x18b4 <_Z13checkSwitchesv+0x6c>
      BACKLIGHT_ON;
    18a0:	40 9a       	sbi	0x08, 0	; 8
    18a2:	09 c0       	rjmp	.+18     	; 0x18b6 <_Z13checkSwitchesv+0x6e>
        if(i==SW_ID0) continue;
        if(getSwitch(i-SW_BASE+1,0) != state) break;
    }
    if(i==SW_Trainer || keyDown()) return;

    if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    18a4:	80 91 6f 12 	lds	r24, 0x126F
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    18ae:	88 23       	and	r24, r24
    18b0:	b9 f7       	brne	.-18     	; 0x18a0 <_Z13checkSwitchesv+0x58>
    18b2:	f2 cf       	rjmp	.-28     	; 0x1898 <_Z13checkSwitchesv+0x50>
      BACKLIGHT_ON;
    else
      BACKLIGHT_OFF;
    18b4:	40 98       	cbi	0x08, 0	; 8
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif

    uint8_t i;
    for(i=SW_BASE; i<SW_Trainer; i++)
    18b6:	ce e0       	ldi	r28, 0x0E	; 14
    18b8:	de cf       	rjmp	.-68     	; 0x1876 <_Z13checkSwitchesv+0x2e>
    if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
      BACKLIGHT_ON;
    else
      BACKLIGHT_OFF;
  }
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	08 95       	ret

000018c0 <_Z7messagePKc>:

uint8_t  g_beepCnt;
uint8_t  g_beepVal[5];

void message(const pm_char * s)
{
    18c0:	cf 93       	push	r28
    18c2:	df 93       	push	r29
    18c4:	ec 01       	movw	r28, r24
  lcd_clear();
    18c6:	0e 94 58 66 	call	0xccb0	; 0xccb0 <_Z9lcd_clearv>
  lcd_putsAtt(64-5*FW,0*FH,PSTR("MESSAGE"),DBLSIZE);
    18ca:	82 e2       	ldi	r24, 0x22	; 34
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	49 e3       	ldi	r20, 0x39	; 57
    18d0:	51 e0       	ldi	r21, 0x01	; 1
    18d2:	24 e0       	ldi	r18, 0x04	; 4
    18d4:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  lcd_puts_P(0,4*FW,s);
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	68 e1       	ldi	r22, 0x18	; 24
    18dc:	ae 01       	movw	r20, r28
    18de:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  refreshDisplay();
    18e2:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>
  lcdSetRefVolt(g_eeGeneral.contrast);
    18e6:	80 91 6c 12 	lds	r24, 0x126C
    18ea:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	08 95       	ret

000018f4 <_Z5alertPKcb>:

void alert(const pm_char * s, bool defaults)
{
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	ec 01       	movw	r28, r24
    18fc:	16 2f       	mov	r17, r22
  lcd_clear();
    18fe:	0e 94 58 66 	call	0xccb0	; 0xccb0 <_Z9lcd_clearv>
  lcd_putsAtt(64-5*FW,0*FH,PSTR("ALERT"),DBLSIZE);
    1902:	82 e2       	ldi	r24, 0x22	; 34
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	43 e3       	ldi	r20, 0x33	; 51
    1908:	51 e0       	ldi	r21, 0x01	; 1
    190a:	24 e0       	ldi	r18, 0x04	; 4
    190c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  lcd_puts_P(0,4*FH,s);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	60 e2       	ldi	r22, 0x20	; 32
    1914:	ae 01       	movw	r20, r28
    1916:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(64-6*FW,7*FH,PSTR("press any Key"));
    191a:	8c e1       	ldi	r24, 0x1C	; 28
    191c:	68 e3       	ldi	r22, 0x38	; 56
    191e:	45 e2       	ldi	r20, 0x25	; 37
    1920:	51 e0       	ldi	r21, 0x01	; 1
    1922:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  refreshDisplay();
    1926:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>
  lcdSetRefVolt(defaults ? 25 : g_eeGeneral.contrast);
    192a:	11 23       	and	r17, r17
    192c:	19 f4       	brne	.+6      	; 0x1934 <_Z5alertPKcb+0x40>
    192e:	80 91 6c 12 	lds	r24, 0x126C
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <_Z5alertPKcb+0x42>
    1934:	89 e1       	ldi	r24, 0x19	; 25
    1936:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    193a:	80 91 76 15 	lds	r24, 0x1576
    193e:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    1942:	84 e6       	ldi	r24, 0x64	; 100
    1944:	87 bd       	out	0x27, r24	; 39
  beepErr();
  clearKeyEvents();
    1946:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z14clearKeyEventsv>
  {
#ifdef SIMU
    if (!main_thread_running) return;
    sleep(1/*ms*/);
#endif
    if(keyDown())   return;  //wait for key release
    194a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z7keyDownv>
    194e:	88 23       	and	r24, r24
    1950:	91 f4       	brne	.+36     	; 0x1976 <_Z5alertPKcb+0x82>

    if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff || defaults)
    1952:	80 91 6f 12 	lds	r24, 0x126F
    1956:	60 e0       	ldi	r22, 0x00	; 0
    1958:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    195c:	88 23       	and	r24, r24
    195e:	31 f4       	brne	.+12     	; 0x196c <_Z5alertPKcb+0x78>
    1960:	80 91 86 12 	lds	r24, 0x1286
    1964:	88 23       	and	r24, r24
    1966:	11 f4       	brne	.+4      	; 0x196c <_Z5alertPKcb+0x78>
    1968:	11 23       	and	r17, r17
    196a:	19 f0       	breq	.+6      	; 0x1972 <_Z5alertPKcb+0x7e>
        BACKLIGHT_ON;
    196c:	40 9a       	sbi	0x08, 0	; 8
      else
        BACKLIGHT_OFF;

    wdt_reset();
    196e:	a8 95       	wdr
  lcd_puts_P(64-6*FW,7*FH,PSTR("press any Key"));
  refreshDisplay();
  lcdSetRefVolt(defaults ? 25 : g_eeGeneral.contrast);
  beepErr();
  clearKeyEvents();
  while(1)
    1970:	ec cf       	rjmp	.-40     	; 0x194a <_Z5alertPKcb+0x56>
    if(keyDown())   return;  //wait for key release

    if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff || defaults)
        BACKLIGHT_ON;
      else
        BACKLIGHT_OFF;
    1972:	40 98       	cbi	0x08, 0	; 8
    1974:	fc cf       	rjmp	.-8      	; 0x196e <_Z5alertPKcb+0x7a>

    wdt_reset();
  }
}
    1976:	df 91       	pop	r29
    1978:	cf 91       	pop	r28
    197a:	1f 91       	pop	r17
    197c:	08 95       	ret

0000197e <_Z10checkAlarmv>:
  }
}

void checkAlarm() // added by Gohst
{
  if(g_eeGeneral.disableAlarmWarning) return;
    197e:	80 91 81 12 	lds	r24, 0x1281
    1982:	87 fd       	sbrc	r24, 7
    1984:	07 c0       	rjmp	.+14     	; 0x1994 <_Z10checkAlarmv+0x16>
  if(!g_eeGeneral.beeperVal) alert(PSTR("Alarms Disabled"));
    1986:	88 73       	andi	r24, 0x38	; 56
    1988:	29 f4       	brne	.+10     	; 0x1994 <_Z10checkAlarmv+0x16>
    198a:	84 e6       	ldi	r24, 0x64	; 100
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    1994:	08 95       	ret

00001996 <_Z14checkLowEEPROMv>:
    }
}

void checkLowEEPROM()
{
  if(g_eeGeneral.disableMemoryWarning) return;
    1996:	80 91 81 12 	lds	r24, 0x1281
    199a:	86 fd       	sbrc	r24, 6
    199c:	0a c0       	rjmp	.+20     	; 0x19b2 <_Z14checkLowEEPROMv+0x1c>
  if(EeFsGetFree() < 200)
    199e:	0e 94 4d 61 	call	0xc29a	; 0xc29a <_Z11EeFsGetFreev>
    19a2:	88 3c       	cpi	r24, 0xC8	; 200
    19a4:	91 05       	cpc	r25, r1
    19a6:	28 f4       	brcc	.+10     	; 0x19b2 <_Z14checkLowEEPROMv+0x1c>
  {
    alert(PSTR("EEPROM low mem"));
    19a8:	81 eb       	ldi	r24, 0xB1	; 177
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	60 e0       	ldi	r22, 0x00	; 0
    19ae:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    19b2:	08 95       	ret

000019b4 <_Z9checkTrimh>:
    wdt_reset();
  }
}

uint8_t checkTrim(uint8_t event)
{
    19b4:	cf 92       	push	r12
    19b6:	df 92       	push	r13
    19b8:	ef 92       	push	r14
    19ba:	ff 92       	push	r15
    19bc:	0f 93       	push	r16
    19be:	1f 93       	push	r17
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	0f 92       	push	r0
    19c6:	0f 92       	push	r0
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	18 2f       	mov	r17, r24
  int8_t  k = (event & EVT_KEY_MASK) - TRM_BASE;
    19ce:	78 2f       	mov	r23, r24
    19d0:	7f 70       	andi	r23, 0x0F	; 15
    19d2:	76 50       	subi	r23, 0x06	; 6
  int8_t  s = g_model.trimInc;
    19d4:	40 91 99 12 	lds	r20, 0x1299
    19d8:	47 70       	andi	r20, 0x07	; 7

  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    19da:	78 30       	cpi	r23, 0x08	; 8
    19dc:	08 f0       	brcs	.+2      	; 0x19e0 <_Z9checkTrimh+0x2c>
    19de:	eb c0       	rjmp	.+470    	; 0x1bb6 <_Z9checkTrimh+0x202>
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = k/2;
    19e0:	07 2f       	mov	r16, r23
    19e2:	05 95       	asr	r16
    uint8_t phase = getTrimFlightPhase(idx, getFlightPhase());
    19e4:	4a 83       	std	Y+2, r20	; 0x02
    19e6:	79 83       	std	Y+1, r23	; 0x01
    19e8:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    19ec:	68 2f       	mov	r22, r24
    19ee:	80 2f       	mov	r24, r16
    19f0:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_Z18getTrimFlightPhasehh>
    19f4:	f8 2e       	mov	r15, r24
    int16_t before = getTrimValue(phase, idx);
    19f6:	60 2f       	mov	r22, r16
    19f8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
    19fc:	9c 01       	movw	r18, r24
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
    19fe:	4a 81       	ldd	r20, Y+2	; 0x02
    1a00:	79 81       	ldd	r23, Y+1	; 0x01
    1a02:	44 23       	and	r20, r20
    1a04:	91 f4       	brne	.+36     	; 0x1a2a <_Z9checkTrimh+0x76>
    1a06:	37 ff       	sbrs	r19, 7
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <_Z9checkTrimh+0x5e>
    1a0a:	88 27       	eor	r24, r24
    1a0c:	99 27       	eor	r25, r25
    1a0e:	82 1b       	sub	r24, r18
    1a10:	93 0b       	sbc	r25, r19
    1a12:	95 95       	asr	r25
    1a14:	87 95       	ror	r24
    1a16:	95 95       	asr	r25
    1a18:	87 95       	ror	r24
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	81 32       	cpi	r24, 0x21	; 33
    1a1e:	91 05       	cpc	r25, r1
    1a20:	14 f0       	brlt	.+4      	; 0x1a26 <_Z9checkTrimh+0x72>
    1a22:	80 e2       	ldi	r24, 0x20	; 32
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	68 2f       	mov	r22, r24
    1a28:	0d c0       	rjmp	.+26     	; 0x1a44 <_Z9checkTrimh+0x90>
    1a2a:	84 2f       	mov	r24, r20
    1a2c:	99 27       	eor	r25, r25
    1a2e:	87 fd       	sbrc	r24, 7
    1a30:	90 95       	com	r25
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	41 e0       	ldi	r20, 0x01	; 1
    1a36:	50 e0       	ldi	r21, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <_Z9checkTrimh+0x8a>
    1a3a:	44 0f       	add	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <_Z9checkTrimh+0x86>
    1a42:	64 2f       	mov	r22, r20
    bool thro = (((2-(g_eeGeneral.stickMode&1)) == idx) && g_model.thrTrim);
    1a44:	e0 91 82 12 	lds	r30, 0x1282
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	e1 70       	andi	r30, 0x01	; 1
    1a4c:	f0 70       	andi	r31, 0x00	; 0
    1a4e:	42 e0       	ldi	r20, 0x02	; 2
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	4e 1b       	sub	r20, r30
    1a54:	5f 0b       	sbc	r21, r31
    1a56:	80 2f       	mov	r24, r16
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	48 17       	cp	r20, r24
    1a5c:	59 07       	cpc	r21, r25
    1a5e:	21 f4       	brne	.+8      	; 0x1a68 <_Z9checkTrimh+0xb4>
    1a60:	80 91 98 12 	lds	r24, 0x1298
    1a64:	83 fd       	sbrc	r24, 3
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <_Z9checkTrimh+0xb8>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <_Z9checkTrimh+0xbc>
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	c6 2e       	mov	r12, r22
    1a72:	dd 24       	eor	r13, r13
    1a74:	c7 fc       	sbrc	r12, 7
    1a76:	d0 94       	com	r13
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1
    1a78:	70 ff       	sbrs	r23, 0
    1a7a:	2a c0       	rjmp	.+84     	; 0x1ad0 <_Z9checkTrimh+0x11c>
    1a7c:	c2 0e       	add	r12, r18
    1a7e:	d3 1e       	adc	r13, r19

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
    1a80:	44 e8       	ldi	r20, 0x84	; 132
    1a82:	c4 16       	cp	r12, r20
    1a84:	4f ef       	ldi	r20, 0xFF	; 255
    1a86:	d4 06       	cpc	r13, r20
    1a88:	24 f4       	brge	.+8      	; 0x1a92 <_Z9checkTrimh+0xde>
    1a8a:	5f ef       	ldi	r21, 0xFF	; 255
    1a8c:	24 38       	cpi	r18, 0x84	; 132
    1a8e:	35 07       	cpc	r19, r21
    1a90:	14 f4       	brge	.+4      	; 0x1a96 <_Z9checkTrimh+0xe2>
    1a92:	ee 24       	eor	r14, r14
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <_Z9checkTrimh+0xee>
        after = mark;
        beepTrim = true;
    1a96:	ee 24       	eor	r14, r14
    1a98:	e3 94       	inc	r14
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
    1a9a:	e3 e8       	ldi	r30, 0x83	; 131
    1a9c:	ce 2e       	mov	r12, r30
    1a9e:	ef ef       	ldi	r30, 0xFF	; 255
    1aa0:	de 2e       	mov	r13, r30
    1aa2:	88 23       	and	r24, r24
    1aa4:	41 f0       	breq	.+16     	; 0x1ab6 <_Z9checkTrimh+0x102>
    1aa6:	0f c0       	rjmp	.+30     	; 0x1ac6 <_Z9checkTrimh+0x112>
    1aa8:	1c 14       	cp	r1, r12
    1aaa:	1d 04       	cpc	r1, r13
    1aac:	64 f0       	brlt	.+24     	; 0x1ac6 <_Z9checkTrimh+0x112>
    1aae:	12 16       	cp	r1, r18
    1ab0:	13 06       	cpc	r1, r19
    1ab2:	2c f0       	brlt	.+10     	; 0x1abe <_Z9checkTrimh+0x10a>
    1ab4:	08 c0       	rjmp	.+16     	; 0x1ac6 <_Z9checkTrimh+0x112>
    1ab6:	d7 fc       	sbrc	r13, 7
    1ab8:	fa cf       	rjmp	.-12     	; 0x1aae <_Z9checkTrimh+0xfa>
    1aba:	37 ff       	sbrs	r19, 7
    1abc:	f5 cf       	rjmp	.-22     	; 0x1aa8 <_Z9checkTrimh+0xf4>
        after = mark;
        beepTrim = true;
    1abe:	ee 24       	eor	r14, r14
    1ac0:	e3 94       	inc	r14
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
    1ac2:	cc 24       	eor	r12, r12
    1ac4:	dd 24       	eor	r13, r13
    1ac6:	8d e7       	ldi	r24, 0x7D	; 125
    1ac8:	c8 16       	cp	r12, r24
    1aca:	d1 04       	cpc	r13, r1
    1acc:	34 f4       	brge	.+12     	; 0x1ada <_Z9checkTrimh+0x126>
    1ace:	0d c0       	rjmp	.+26     	; 0x1aea <_Z9checkTrimh+0x136>
    uint8_t phase = getTrimFlightPhase(idx, getFlightPhase());
    int16_t before = getTrimValue(phase, idx);
    int8_t  v = (s==0) ? min(32, abs(before)/4+1) : 1 << (s-1); // 1=>1  2=>2  3=>4  4=>8
    bool thro = (((2-(g_eeGeneral.stickMode&1)) == idx) && g_model.thrTrim);
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1
    1ad0:	f9 01       	movw	r30, r18
    1ad2:	ec 19       	sub	r30, r12
    1ad4:	fd 09       	sbc	r31, r13
    1ad6:	6f 01       	movw	r12, r30
    1ad8:	d3 cf       	rjmp	.-90     	; 0x1a80 <_Z9checkTrimh+0xcc>

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
    1ada:	2d 37       	cpi	r18, 0x7D	; 125
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <_Z9checkTrimh+0x136>
        after = mark;
        beepTrim = true;
    1ae0:	ee 24       	eor	r14, r14
    1ae2:	e3 94       	inc	r14
    if (thro) v = 4; // if throttle trim and trim trottle then step=4
    int16_t after = (k&1) ? before + v : before - v;   // positive = k&1

    bool beepTrim = false;
    for (int16_t mark=TRIM_MIN; mark<=TRIM_MAX; mark+=TRIM_MAX) {
      if ((mark!=0 || !thro) && ((mark!=TRIM_MIN && after>=mark && before<mark) || (mark!=TRIM_MAX && after<=mark && before>mark))) {
    1ae4:	7d e7       	ldi	r23, 0x7D	; 125
    1ae6:	c7 2e       	mov	r12, r23
    1ae8:	d1 2c       	mov	r13, r1
        after = mark;
        beepTrim = true;
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
    1aea:	2c 15       	cp	r18, r12
    1aec:	3d 05       	cpc	r19, r13
    1aee:	2c f4       	brge	.+10     	; 0x1afa <_Z9checkTrimh+0x146>
    1af0:	fe e7       	ldi	r31, 0x7E	; 126
    1af2:	cf 16       	cp	r12, r31
    1af4:	d1 04       	cpc	r13, r1
    1af6:	4c f4       	brge	.+18     	; 0x1b0a <_Z9checkTrimh+0x156>
    1af8:	0e c0       	rjmp	.+28     	; 0x1b16 <_Z9checkTrimh+0x162>
    1afa:	c2 16       	cp	r12, r18
    1afc:	d3 06       	cpc	r13, r19
    1afe:	5c f4       	brge	.+22     	; 0x1b16 <_Z9checkTrimh+0x162>
    1b00:	43 e8       	ldi	r20, 0x83	; 131
    1b02:	c4 16       	cp	r12, r20
    1b04:	4f ef       	ldi	r20, 0xFF	; 255
    1b06:	d4 06       	cpc	r13, r20
    1b08:	5c f4       	brge	.+22     	; 0x1b20 <_Z9checkTrimh+0x16c>
      if (!g_model.extendedTrims) after = before;
    1b0a:	80 91 99 12 	lds	r24, 0x1299
    1b0e:	86 ff       	sbrs	r24, 6

  if (k>=0 && k<8) { // && (event & _MSK_KEY_REPT))
    //LH_DWN LH_UP LV_DWN LV_UP RV_DWN RV_UP RH_DWN RH_UP
    uint8_t idx = k/2;
    uint8_t phase = getTrimFlightPhase(idx, getFlightPhase());
    int16_t before = getTrimValue(phase, idx);
    1b10:	69 01       	movw	r12, r18
      }
    }

    if ((before<after && after>TRIM_MAX) || (before>after && after<TRIM_MIN)) {
      if (!g_model.extendedTrims) after = before;
      beepTrim = true; // no repetition, it could be dangerous
    1b12:	ee 24       	eor	r14, r14
    1b14:	e3 94       	inc	r14
    }

    if (after < TRIM_EXTENDED_MIN) {
    1b16:	5c e0       	ldi	r21, 0x0C	; 12
    1b18:	c5 16       	cp	r12, r21
    1b1a:	5e ef       	ldi	r21, 0xFE	; 254
    1b1c:	d5 06       	cpc	r13, r21
    1b1e:	34 f0       	brlt	.+12     	; 0x1b2c <_Z9checkTrimh+0x178>
      after = TRIM_EXTENDED_MIN;
    }
    if (after > TRIM_EXTENDED_MAX) {
    1b20:	85 ef       	ldi	r24, 0xF5	; 245
    1b22:	c8 16       	cp	r12, r24
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	d8 06       	cpc	r13, r24
    1b28:	34 f4       	brge	.+12     	; 0x1b36 <_Z9checkTrimh+0x182>
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <_Z9checkTrimh+0x18a>
      if (!g_model.extendedTrims) after = before;
      beepTrim = true; // no repetition, it could be dangerous
    }

    if (after < TRIM_EXTENDED_MIN) {
      after = TRIM_EXTENDED_MIN;
    1b2c:	6c e0       	ldi	r22, 0x0C	; 12
    1b2e:	c6 2e       	mov	r12, r22
    1b30:	6e ef       	ldi	r22, 0xFE	; 254
    1b32:	d6 2e       	mov	r13, r22
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <_Z9checkTrimh+0x18a>
    }
    if (after > TRIM_EXTENDED_MAX) {
      after = TRIM_EXTENDED_MAX;
    1b36:	54 ef       	ldi	r21, 0xF4	; 244
    1b38:	c5 2e       	mov	r12, r21
    1b3a:	51 e0       	ldi	r21, 0x01	; 1
    1b3c:	d5 2e       	mov	r13, r21
    }

    setTrimValue(phase, idx, after);
    1b3e:	8f 2d       	mov	r24, r15
    1b40:	60 2f       	mov	r22, r16
    1b42:	a6 01       	movw	r20, r12
    1b44:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z12setTrimValuehhi>

#if defined (BEEPSPKR)
    // toneFreq higher/lower according to trim position
    // limit the frequency, range -125 to 125 = toneFreq: 19 to 101
    if (after > TRIM_MAX)
    1b48:	9e e7       	ldi	r25, 0x7E	; 126
    1b4a:	c9 16       	cp	r12, r25
    1b4c:	d1 04       	cpc	r13, r1
    1b4e:	34 f4       	brge	.+12     	; 0x1b5c <_Z9checkTrimh+0x1a8>
      after = TRIM_MAX;
    if (after < TRIM_MIN)
    1b50:	e3 e8       	ldi	r30, 0x83	; 131
    1b52:	ce 16       	cp	r12, r30
    1b54:	ef ef       	ldi	r30, 0xFF	; 255
    1b56:	de 06       	cpc	r13, r30
    1b58:	2c f0       	brlt	.+10     	; 0x1b64 <_Z9checkTrimh+0x1b0>
    1b5a:	08 c0       	rjmp	.+16     	; 0x1b6c <_Z9checkTrimh+0x1b8>

#if defined (BEEPSPKR)
    // toneFreq higher/lower according to trim position
    // limit the frequency, range -125 to 125 = toneFreq: 19 to 101
    if (after > TRIM_MAX)
      after = TRIM_MAX;
    1b5c:	4d e7       	ldi	r20, 0x7D	; 125
    1b5e:	c4 2e       	mov	r12, r20
    1b60:	d1 2c       	mov	r13, r1
    1b62:	04 c0       	rjmp	.+8      	; 0x1b6c <_Z9checkTrimh+0x1b8>
    if (after < TRIM_MIN)
      after = TRIM_MIN;
    1b64:	33 e8       	ldi	r19, 0x83	; 131
    1b66:	c3 2e       	mov	r12, r19
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	d3 2e       	mov	r13, r19
    after /= 4;
    1b6c:	c6 01       	movw	r24, r12
    1b6e:	64 e0       	ldi	r22, 0x04	; 4
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    1b76:	6b 01       	movw	r12, r22
    after += 60;
    1b78:	4c e3       	ldi	r20, 0x3C	; 60
    1b7a:	50 e0       	ldi	r21, 0x00	; 0
    1b7c:	c4 0e       	add	r12, r20
    1b7e:	d5 1e       	adc	r13, r21
#endif

    if (beepTrim) {
    1b80:	ee 20       	and	r14, r14
    1b82:	41 f0       	breq	.+16     	; 0x1b94 <_Z9checkTrimh+0x1e0>
      killEvents(event);
    1b84:	81 2f       	mov	r24, r17
    1b86:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      warble = false;
    1b8a:	10 92 6b 15 	sts	0x156B, r1

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    1b8e:	80 91 74 15 	lds	r24, 0x1574
    1b92:	07 c0       	rjmp	.+14     	; 0x1ba2 <_Z9checkTrimh+0x1ee>
#else
      beepWarn2();
#endif
    }
    else {
      if (event & _MSK_KEY_REPT) warble = true;
    1b94:	16 ff       	sbrs	r17, 6
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <_Z9checkTrimh+0x1ea>
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	80 93 6b 15 	sts	0x156B, r24
    1b9e:	80 91 72 15 	lds	r24, 0x1572
    1ba2:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    1ba6:	6c 2d       	mov	r22, r12
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	88 e8       	ldi	r24, 0x88	; 136
    1bac:	93 e1       	ldi	r25, 0x13	; 19
    1bae:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    1bb2:	67 bd       	out	0x27, r22	; 39
      beepTrimSpkr(after);
#else
      beepWarn1();
#endif
    }
    return 0;
    1bb4:	10 e0       	ldi	r17, 0x00	; 0
  }
  return event;
}
    1bb6:	81 2f       	mov	r24, r17
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ff 90       	pop	r15
    1bc6:	ef 90       	pop	r14
    1bc8:	df 90       	pop	r13
    1bca:	cf 90       	pop	r12
    1bcc:	08 95       	ret

00001bce <_Z5anaInh>:
{
  //                     ana-in:   3 1 2 0 4 5 6 7
  //static pm_char crossAna[]={4,2,3,1,5,6,7,0}; // wenn schon Tabelle, dann muss sich auch lohnen
  //                        Google Translate (German): // if table already, then it must also be worthwhile
  static pm_char crossAna[]={3,1,2,0,4,5,6,7};
  volatile uint16_t *p = &s_anaFilt[pgm_read_byte(crossAna+chan)];
    1bce:	e8 2f       	mov	r30, r24
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	e9 56       	subi	r30, 0x69	; 105
    1bd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1bd6:	e4 91       	lpm	r30, Z+
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	e1 55       	subi	r30, 0x51	; 81
    1be0:	f7 4e       	sbci	r31, 0xE7	; 231
  return *p;
    1be2:	20 81       	ld	r18, Z
    1be4:	31 81       	ldd	r19, Z+1	; 0x01
}
    1be6:	c9 01       	movw	r24, r18
    1be8:	08 95       	ret

00001bea <_Z8checkTHRv>:

  clearKeyEvents();
}

void checkTHR()
{
    1bea:	ff 92       	push	r15
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
  if(g_eeGeneral.disableThrottleWarning) return;
    1bf4:	80 91 81 12 	lds	r24, 0x1281
    1bf8:	80 fd       	sbrc	r24, 0
    1bfa:	43 c0       	rjmp	.+134    	; 0x1c82 <_Z8checkTHRv+0x98>

  int thrchn=(2-(g_eeGeneral.stickMode&1));//stickMode=0123 -> thr=2121
    1bfc:	80 91 82 12 	lds	r24, 0x1282
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	02 e0       	ldi	r16, 0x02	; 2
    1c08:	10 e0       	ldi	r17, 0x00	; 0
    1c0a:	08 1b       	sub	r16, r24
    1c0c:	19 0b       	sbc	r17, r25

  int16_t lowLim = THRCHK_DEADBAND + g_eeGeneral.calibMid[thrchn] - g_eeGeneral.calibSpanNeg[thrchn];
    1c0e:	f8 01       	movw	r30, r16
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	e2 5c       	subi	r30, 0xC2	; 194
    1c16:	fd 4e       	sbci	r31, 0xED	; 237
    1c18:	c1 81       	ldd	r28, Z+1	; 0x01
    1c1a:	d2 81       	ldd	r29, Z+2	; 0x02
    1c1c:	60 96       	adiw	r28, 0x10	; 16
    1c1e:	87 85       	ldd	r24, Z+15	; 0x0f
    1c20:	90 89       	ldd	r25, Z+16	; 0x10
    1c22:	c8 1b       	sub	r28, r24
    1c24:	d9 0b       	sbc	r29, r25

#ifndef SIMU
  getADC_single();   // if thr is down - do not display warning at all
    1c26:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z13getADC_singlev>
#endif
  int16_t v = anaIn(thrchn);
    1c2a:	f0 2e       	mov	r15, r16
    1c2c:	80 2f       	mov	r24, r16
    1c2e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
  if(v<=lowLim) return;
    1c32:	c8 17       	cp	r28, r24
    1c34:	d9 07       	cpc	r29, r25
    1c36:	2c f5       	brge	.+74     	; 0x1c82 <_Z8checkTHRv+0x98>

  // first - display warning
  alertMessages( PSTR("Throttle not idle"), PSTR("Reset throttle") ) ;
    1c38:	83 e8       	ldi	r24, 0x83	; 131
    1c3a:	91 e0       	ldi	r25, 0x01	; 1
    1c3c:	64 e7       	ldi	r22, 0x74	; 116
    1c3e:	71 e0       	ldi	r23, 0x01	; 1
    1c40:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <_Z13alertMessagesPKcS0_>
  {
#ifdef SIMU
      if (!main_thread_running) return;
      sleep(1/*ms*/);
#else
      getADC_single();
    1c44:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z13getADC_singlev>
#endif
      int16_t v = anaIn(thrchn);
    1c48:	8f 2d       	mov	r24, r15
    1c4a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>

      if(v<=lowLim || keyDown()) {
    1c4e:	c8 17       	cp	r28, r24
    1c50:	d9 07       	cpc	r29, r25
    1c52:	24 f4       	brge	.+8      	; 0x1c5c <_Z8checkTHRv+0x72>
    1c54:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z7keyDownv>
    1c58:	88 23       	and	r24, r24
    1c5a:	49 f0       	breq	.+18     	; 0x1c6e <_Z8checkTHRv+0x84>
        clearKeyEvents();
    1c5c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z14clearKeyEventsv>
    1c60:	10 c0       	rjmp	.+32     	; 0x1c82 <_Z8checkTHRv+0x98>
        return;
      }

      if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1c62:	80 91 86 12 	lds	r24, 0x1286
    1c66:	88 23       	and	r24, r24
    1c68:	51 f0       	breq	.+20     	; 0x1c7e <_Z8checkTHRv+0x94>
          BACKLIGHT_ON;
    1c6a:	40 9a       	sbi	0x08, 0	; 8
    1c6c:	eb cf       	rjmp	.-42     	; 0x1c44 <_Z8checkTHRv+0x5a>
      if(v<=lowLim || keyDown()) {
        clearKeyEvents();
        return;
      }

      if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1c6e:	80 91 6f 12 	lds	r24, 0x126F
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1c78:	88 23       	and	r24, r24
    1c7a:	b9 f7       	brne	.-18     	; 0x1c6a <_Z8checkTHRv+0x80>
    1c7c:	f2 cf       	rjmp	.-28     	; 0x1c62 <_Z8checkTHRv+0x78>
          BACKLIGHT_ON;
      else
          BACKLIGHT_OFF;
    1c7e:	40 98       	cbi	0x08, 0	; 8
    1c80:	e1 cf       	rjmp	.-62     	; 0x1c44 <_Z8checkTHRv+0x5a>
  }
}
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	1f 91       	pop	r17
    1c88:	0f 91       	pop	r16
    1c8a:	ff 90       	pop	r15
    1c8c:	08 95       	ret

00001c8e <_Z8doSplashv>:
#endif
    putEvent(0);
}

void doSplash()
{
    1c8e:	af 92       	push	r10
    1c90:	bf 92       	push	r11
    1c92:	cf 92       	push	r12
    1c94:	df 92       	push	r13
    1c96:	ef 92       	push	r14
    1c98:	ff 92       	push	r15
    1c9a:	0f 93       	push	r16
    1c9c:	1f 93       	push	r17
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	0f 92       	push	r0
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    if(!g_eeGeneral.disableSplashScreen)
    1ca8:	80 91 84 12 	lds	r24, 0x1284
    1cac:	84 fd       	sbrc	r24, 4
    1cae:	6c c0       	rjmp	.+216    	; 0x1d88 <_Z8doSplashv+0xfa>
    {
      if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1cb0:	80 91 6f 12 	lds	r24, 0x126F
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1cba:	88 23       	and	r24, r24
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <_Z8doSplashv+0x3a>
    1cbe:	80 91 86 12 	lds	r24, 0x1286
    1cc2:	88 23       	and	r24, r24
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <_Z8doSplashv+0x3a>
    1cc6:	54 c0       	rjmp	.+168    	; 0x1d70 <_Z8doSplashv+0xe2>
        BACKLIGHT_ON;
    1cc8:	40 9a       	sbi	0x08, 0	; 8
      else
        BACKLIGHT_OFF;

      lcd_clear();
    1cca:	0e 94 58 66 	call	0xccb0	; 0xccb0 <_Z9lcd_clearv>
#if defined (PCBV4)
      lcd_img(0, 0, s9xsplashv4,0,0);
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	52 e0       	ldi	r21, 0x02	; 2
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	00 e0       	ldi	r16, 0x00	; 0
    1cda:	0e 94 63 66 	call	0xccc6	; 0xccc6 <_Z7lcd_imghhPKhhh>
#else
      lcd_img(0, 0, s9xsplash,0,0);
#endif
      refreshDisplay();
    1cde:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>
      lcdSetRefVolt(g_eeGeneral.contrast);
    1ce2:	80 91 6c 12 	lds	r24, 0x126C
    1ce6:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>
      clearKeyEvents();
    1cea:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z14clearKeyEventsv>
    1cee:	00 e2       	ldi	r16, 0x20	; 32

#ifndef SIMU
      for(uint8_t i=0; i<32; i++)
        getADC_filt(); // init ADC array
    1cf0:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_Z11getADC_filtv>
    1cf4:	01 50       	subi	r16, 0x01	; 1
      refreshDisplay();
      lcdSetRefVolt(g_eeGeneral.contrast);
      clearKeyEvents();

#ifndef SIMU
      for(uint8_t i=0; i<32; i++)
    1cf6:	e1 f7       	brne	.-8      	; 0x1cf0 <_Z8doSplashv+0x62>
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	00 e0       	ldi	r16, 0x00	; 0
    1cfc:	10 e0       	ldi	r17, 0x00	; 0
#endif

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
      uint16_t inacSum = 0;
      for(uint8_t i=0; i<4; i++)
        inacSum += anaIn(i)/INAC_DEVISOR;
    1cfe:	82 2f       	mov	r24, r18
    1d00:	29 83       	std	Y+1, r18	; 0x01
    1d02:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    1d06:	e9 2e       	mov	r14, r25
    1d08:	ff 24       	eor	r15, r15
    1d0a:	0e 0d       	add	r16, r14
    1d0c:	1f 1d       	adc	r17, r15
        getADC_filt(); // init ADC array
#endif

#define INAC_DEVISOR 256   // Bypass splash screen with stick movement
      uint16_t inacSum = 0;
      for(uint8_t i=0; i<4; i++)
    1d0e:	29 81       	ldd	r18, Y+1	; 0x01
    1d10:	2f 5f       	subi	r18, 0xFF	; 255
    1d12:	24 30       	cpi	r18, 0x04	; 4
    1d14:	a1 f7       	brne	.-24     	; 0x1cfe <_Z8doSplashv+0x70>
        inacSum += anaIn(i)/INAC_DEVISOR;

      uint16_t tgtime = get_tmr10ms() + SPLASH_TIMEOUT;  //2sec splash screen
    1d16:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    1d1a:	20 e9       	ldi	r18, 0x90	; 144
    1d1c:	a2 2e       	mov	r10, r18
    1d1e:	21 e0       	ldi	r18, 0x01	; 1
    1d20:	b2 2e       	mov	r11, r18
    1d22:	a8 0e       	add	r10, r24
    1d24:	b9 1e       	adc	r11, r25
      while(tgtime != get_tmr10ms())
    1d26:	1e c0       	rjmp	.+60     	; 0x1d64 <_Z8doSplashv+0xd6>
      {
#ifdef SIMU
        if (!main_thread_running) return;
        sleep(1/*ms*/);
#else
        getADC_filt();
    1d28:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <_Z11getADC_filtv>
#endif
        uint16_t tsum = 0;
        for(uint8_t i=0; i<4; i++)
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
        if (!main_thread_running) return;
        sleep(1/*ms*/);
#else
        getADC_filt();
#endif
        uint16_t tsum = 0;
    1d2e:	ee 24       	eor	r14, r14
    1d30:	ff 24       	eor	r15, r15
        for(uint8_t i=0; i<4; i++)
          tsum += anaIn(i)/INAC_DEVISOR;
    1d32:	82 2f       	mov	r24, r18
    1d34:	29 83       	std	Y+1, r18	; 0x01
    1d36:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    1d3a:	c9 2e       	mov	r12, r25
    1d3c:	dd 24       	eor	r13, r13
    1d3e:	ec 0c       	add	r14, r12
    1d40:	fd 1c       	adc	r15, r13
        sleep(1/*ms*/);
#else
        getADC_filt();
#endif
        uint16_t tsum = 0;
        for(uint8_t i=0; i<4; i++)
    1d42:	29 81       	ldd	r18, Y+1	; 0x01
    1d44:	2f 5f       	subi	r18, 0xFF	; 255
    1d46:	24 30       	cpi	r18, 0x04	; 4
    1d48:	a1 f7       	brne	.-24     	; 0x1d32 <_Z8doSplashv+0xa4>
          tsum += anaIn(i)/INAC_DEVISOR;

        if(keyDown() || (tsum!=inacSum))   return;  //wait for key release
    1d4a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_Z7keyDownv>
    1d4e:	88 23       	and	r24, r24
    1d50:	d9 f4       	brne	.+54     	; 0x1d88 <_Z8doSplashv+0xfa>
    1d52:	e0 16       	cp	r14, r16
    1d54:	f1 06       	cpc	r15, r17
    1d56:	c1 f4       	brne	.+48     	; 0x1d88 <_Z8doSplashv+0xfa>
    1d58:	0d c0       	rjmp	.+26     	; 0x1d74 <_Z8doSplashv+0xe6>

        if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1d5a:	80 91 86 12 	lds	r24, 0x1286
    1d5e:	88 23       	and	r24, r24
    1d60:	89 f0       	breq	.+34     	; 0x1d84 <_Z8doSplashv+0xf6>
          BACKLIGHT_ON;
    1d62:	40 9a       	sbi	0x08, 0	; 8
      uint16_t inacSum = 0;
      for(uint8_t i=0; i<4; i++)
        inacSum += anaIn(i)/INAC_DEVISOR;

      uint16_t tgtime = get_tmr10ms() + SPLASH_TIMEOUT;  //2sec splash screen
      while(tgtime != get_tmr10ms())
    1d64:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    1d68:	a8 16       	cp	r10, r24
    1d6a:	b9 06       	cpc	r11, r25
    1d6c:	e9 f6       	brne	.-70     	; 0x1d28 <_Z8doSplashv+0x9a>
    1d6e:	0c c0       	rjmp	.+24     	; 0x1d88 <_Z8doSplashv+0xfa>
    if(!g_eeGeneral.disableSplashScreen)
    {
      if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
        BACKLIGHT_ON;
      else
        BACKLIGHT_OFF;
    1d70:	40 98       	cbi	0x08, 0	; 8
    1d72:	ab cf       	rjmp	.-170    	; 0x1cca <_Z8doSplashv+0x3c>
        for(uint8_t i=0; i<4; i++)
          tsum += anaIn(i)/INAC_DEVISOR;

        if(keyDown() || (tsum!=inacSum))   return;  //wait for key release

        if(getSwitch(g_eeGeneral.lightSw,0) || g_eeGeneral.lightAutoOff)
    1d74:	80 91 6f 12 	lds	r24, 0x126F
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1d7e:	88 23       	and	r24, r24
    1d80:	81 f7       	brne	.-32     	; 0x1d62 <_Z8doSplashv+0xd4>
    1d82:	eb cf       	rjmp	.-42     	; 0x1d5a <_Z8doSplashv+0xcc>
          BACKLIGHT_ON;
        else
          BACKLIGHT_OFF;
    1d84:	40 98       	cbi	0x08, 0	; 8
    1d86:	ee cf       	rjmp	.-36     	; 0x1d64 <_Z8doSplashv+0xd6>
      }
    }
}
    1d88:	0f 90       	pop	r0
    1d8a:	cf 91       	pop	r28
    1d8c:	df 91       	pop	r29
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	08 95       	ret

00001da0 <_Z14getADC_bandgapv>:
#elif defined (PCBV4)
  // For PCB V4, use our own 1.2V, external reference (connected to ADC3)
  
  static uint8_t bgCount=0; // used for over-sampling low pass filter
  static uint16_t tmpBandgap=0;
  ADCSRB &= ~(1<<MUX5);
    1da0:	80 91 7b 00 	lds	r24, 0x007B
    1da4:	87 7f       	andi	r24, 0xF7	; 247
    1da6:	80 93 7b 00 	sts	0x007B, r24

  ADMUX=0x03|ADC_VREF_TYPE; // Switch MUX to internal 1.1V reference
    1daa:	83 e4       	ldi	r24, 0x43	; 67
    1dac:	80 93 7c 00 	sts	0x007C, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1db0:	85 e3       	ldi	r24, 0x35	; 53
    1db2:	8a 95       	dec	r24
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <_Z14getADC_bandgapv+0x12>
    1db6:	00 00       	nop
  _delay_us(10); // stablisation time needed to allow ADC capture-hold capacitor to complelyte charge

  ADCSRA|=0x40; while ((ADCSRA & 0x10)==0); ADCSRA|=0x10; // take a single 10-bit sample
    1db8:	80 91 7a 00 	lds	r24, 0x007A
    1dbc:	80 64       	ori	r24, 0x40	; 64
    1dbe:	80 93 7a 00 	sts	0x007A, r24
    1dc2:	80 91 7a 00 	lds	r24, 0x007A
    1dc6:	84 ff       	sbrs	r24, 4
    1dc8:	fc cf       	rjmp	.-8      	; 0x1dc2 <_Z14getADC_bandgapv+0x22>
    1dca:	80 91 7a 00 	lds	r24, 0x007A
    1dce:	80 61       	ori	r24, 0x10	; 16
    1dd0:	80 93 7a 00 	sts	0x007A, r24
  tmpBandgap += ADCW; 
    1dd4:	80 91 78 00 	lds	r24, 0x0078
    1dd8:	90 91 79 00 	lds	r25, 0x0079
    1ddc:	20 91 ac 18 	lds	r18, 0x18AC
    1de0:	30 91 ad 18 	lds	r19, 0x18AD
    1de4:	82 0f       	add	r24, r18
    1de6:	93 1f       	adc	r25, r19
    1de8:	90 93 ad 18 	sts	0x18AD, r25
    1dec:	80 93 ac 18 	sts	0x18AC, r24
  if (!(++bgCount % 8)) // 8 x over-sampling for v4 board (effectively 13-bit resolution)
    1df0:	20 91 ae 18 	lds	r18, 0x18AE
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	20 93 ae 18 	sts	0x18AE, r18
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	27 70       	andi	r18, 0x07	; 7
    1dfe:	30 70       	andi	r19, 0x00	; 0
    1e00:	21 15       	cp	r18, r1
    1e02:	31 05       	cpc	r19, r1
    1e04:	41 f4       	brne	.+16     	; 0x1e16 <_Z14getADC_bandgapv+0x76>
  {
    BandGap = tmpBandgap;
    1e06:	90 93 73 06 	sts	0x0673, r25
    1e0a:	80 93 72 06 	sts	0x0672, r24
    tmpBandgap = 0; 
    1e0e:	10 92 ad 18 	sts	0x18AD, r1
    1e12:	10 92 ac 18 	sts	0x18AC, r1
  }

  ADCSRB |= (1<<MUX5);
    1e16:	80 91 7b 00 	lds	r24, 0x007B
    1e1a:	88 60       	ori	r24, 0x08	; 8
    1e1c:	80 93 7b 00 	sts	0x007B, r24
  ADMUX=0x1E|ADC_VREF_TYPE; // Switch MUX to internal 1.1V reference
 _delay_us(400); // this somewhat costly delay is the only remedy for stable results on the Atmega2560/1 chips
  ADCSRA|=0x40; while ((ADCSRA & 0x10)==0); ADCSRA|=0x10; // take sample
  BandGap=ADCW;
#endif
}
    1e20:	08 95       	ret

00001e22 <_Z14checkSlaveModev>:
{
  // no power -> only phone jack = slave mode

// Issue 22: PCB=V4 => -DBEEPSPKR and V4 board also includes the hardware buzzer mod.
#if defined(BUZZER_MOD) || defined(BEEPSPKR)
  return SLAVE_MODE;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	91 9b       	sbis	0x12, 1	; 18
    1e26:	80 e0       	ldi	r24, 0x00	; 0
  else {
    lastSlaveMode = SLAVE_MODE;
  }
  return lastSlaveMode;
#endif
}
    1e28:	08 95       	ret

00001e2a <_Z11resetTimer1v>:

uint8_t  trimsCheckTimer = 0;

void resetTimer1()
{
  s_timerState = TMR_OFF; //is changed to RUNNING dep from mode
    1e2a:	10 92 8c 15 	sts	0x158C, r1
  s_timeCumAbs=0;
    1e2e:	10 92 85 15 	sts	0x1585, r1
    1e32:	10 92 84 15 	sts	0x1584, r1
  s_timeCumThr=0;
    1e36:	10 92 89 15 	sts	0x1589, r1
    1e3a:	10 92 88 15 	sts	0x1588, r1
  s_timeCumSw=0;
    1e3e:	10 92 87 15 	sts	0x1587, r1
    1e42:	10 92 86 15 	sts	0x1586, r1
  s_timeCum16ThrP=0;
    1e46:	10 92 8b 15 	sts	0x158B, r1
    1e4a:	10 92 8a 15 	sts	0x158A, r1
}
    1e4e:	08 95       	ret

00001e50 <_Z11resetTimer2v>:

void resetTimer2()
{
  Timer2_pre = 0 ;
    1e50:	10 92 90 15 	sts	0x1590, r1
  timer2 = 0 ;
    1e54:	10 92 92 15 	sts	0x1592, r1
    1e58:	10 92 91 15 	sts	0x1591, r1
}
    1e5c:	08 95       	ret

00001e5e <_Z5timerh>:

inline void timer(uint8_t val)
{
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	d8 2f       	mov	r29, r24
  int8_t tm = g_model.tmrMode;
    1e64:	c0 91 95 12 	lds	r28, 0x1295
    1e68:	cc 0f       	add	r28, r28
    1e6a:	c5 95       	asr	r28
  static uint16_t s_time;
  static uint16_t s_cnt;
  static uint16_t s_sum;
  static uint8_t sw_toggled;

  if(abs(tm)>=(TMR_VAROFS+MAX_SWITCH-1)){ //toggeled switch//abs(g_model.tmrMode)<(10+MAX_SWITCH-1)
    1e6c:	2c 2f       	mov	r18, r28
    1e6e:	33 27       	eor	r19, r19
    1e70:	27 fd       	sbrc	r18, 7
    1e72:	30 95       	com	r19
    1e74:	37 ff       	sbrs	r19, 7
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <_Z5timerh+0x20>
    1e78:	30 95       	com	r19
    1e7a:	21 95       	neg	r18
    1e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7e:	25 32       	cpi	r18, 0x25	; 37
    1e80:	31 05       	cpc	r19, r1
    1e82:	e4 f1       	brlt	.+120    	; 0x1efc <_Z5timerh+0x9e>
    static uint8_t lastSwPos;
    if(!(sw_toggled | s_sum | s_cnt | s_time | lastSwPos)) lastSwPos = tm < 0;  // if initializing then init the lastSwPos
    1e84:	20 91 2b 22 	lds	r18, 0x222B
    1e88:	30 91 2c 22 	lds	r19, 0x222C
    1e8c:	40 91 28 22 	lds	r20, 0x2228
    1e90:	50 91 29 22 	lds	r21, 0x2229
    1e94:	24 2b       	or	r18, r20
    1e96:	35 2b       	or	r19, r21
    1e98:	40 91 26 22 	lds	r20, 0x2226
    1e9c:	50 91 27 22 	lds	r21, 0x2227
    1ea0:	24 2b       	or	r18, r20
    1ea2:	35 2b       	or	r19, r21
    1ea4:	40 91 2a 22 	lds	r20, 0x222A
    1ea8:	50 e0       	ldi	r21, 0x00	; 0
    1eaa:	24 2b       	or	r18, r20
    1eac:	35 2b       	or	r19, r21
    1eae:	40 91 23 22 	lds	r20, 0x2223
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	24 2b       	or	r18, r20
    1eb6:	35 2b       	or	r19, r21
    1eb8:	21 15       	cp	r18, r1
    1eba:	31 05       	cpc	r19, r1
    1ebc:	31 f4       	brne	.+12     	; 0x1eca <_Z5timerh+0x6c>
    1ebe:	8c 2f       	mov	r24, r28
    1ec0:	88 1f       	adc	r24, r24
    1ec2:	88 27       	eor	r24, r24
    1ec4:	88 1f       	adc	r24, r24
    1ec6:	80 93 23 22 	sts	0x2223, r24
    uint8_t swPos = getSwitch(tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1-1) : tm+(TMR_VAROFS+MAX_SWITCH-1-1) ,0);
    1eca:	1c 16       	cp	r1, r28
    1ecc:	1c f4       	brge	.+6      	; 0x1ed4 <_Z5timerh+0x76>
    1ece:	8c 2f       	mov	r24, r28
    1ed0:	84 52       	subi	r24, 0x24	; 36
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <_Z5timerh+0x7a>
    1ed4:	8c 2f       	mov	r24, r28
    1ed6:	8c 5d       	subi	r24, 0xDC	; 220
    1ed8:	60 e0       	ldi	r22, 0x00	; 0
    1eda:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    if(swPos && !lastSwPos)  sw_toggled = !sw_toggled;  //if switcdh is flipped first time -> change counter state
    1ede:	88 23       	and	r24, r24
    1ee0:	59 f0       	breq	.+22     	; 0x1ef8 <_Z5timerh+0x9a>
    1ee2:	90 91 23 22 	lds	r25, 0x2223
    1ee6:	99 23       	and	r25, r25
    1ee8:	39 f4       	brne	.+14     	; 0x1ef8 <_Z5timerh+0x9a>
    1eea:	91 e0       	ldi	r25, 0x01	; 1
    1eec:	20 91 2a 22 	lds	r18, 0x222A
    1ef0:	21 11       	cpse	r18, r1
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	90 93 2a 22 	sts	0x222A, r25
    lastSwPos = swPos;
    1ef8:	80 93 23 22 	sts	0x2223, r24
  }

  s_cnt++;
    1efc:	20 91 2b 22 	lds	r18, 0x222B
    1f00:	30 91 2c 22 	lds	r19, 0x222C
    1f04:	2f 5f       	subi	r18, 0xFF	; 255
    1f06:	3f 4f       	sbci	r19, 0xFF	; 255
    1f08:	30 93 2c 22 	sts	0x222C, r19
    1f0c:	20 93 2b 22 	sts	0x222B, r18
  s_sum+=val;
    1f10:	20 91 28 22 	lds	r18, 0x2228
    1f14:	30 91 29 22 	lds	r19, 0x2229
    1f18:	2d 0f       	add	r18, r29
    1f1a:	31 1d       	adc	r19, r1
    1f1c:	30 93 29 22 	sts	0x2229, r19
    1f20:	20 93 28 22 	sts	0x2228, r18
  if((get_tmr10ms()-s_time)<100) return; //1 sec
    1f24:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    1f28:	20 91 26 22 	lds	r18, 0x2226
    1f2c:	30 91 27 22 	lds	r19, 0x2227
    1f30:	82 1b       	sub	r24, r18
    1f32:	93 0b       	sbc	r25, r19
    1f34:	84 36       	cpi	r24, 0x64	; 100
    1f36:	91 05       	cpc	r25, r1
    1f38:	08 f4       	brcc	.+2      	; 0x1f3c <_Z5timerh+0xde>
    1f3a:	8a c1       	rjmp	.+788    	; 0x2250 <__stack+0x51>
  s_time += 100;
    1f3c:	2c 59       	subi	r18, 0x9C	; 156
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	30 93 27 22 	sts	0x2227, r19
    1f44:	20 93 26 22 	sts	0x2226, r18
  val     = s_sum/s_cnt;
    1f48:	20 91 28 22 	lds	r18, 0x2228
    1f4c:	30 91 29 22 	lds	r19, 0x2229
    1f50:	e0 91 2b 22 	lds	r30, 0x222B
    1f54:	f0 91 2c 22 	lds	r31, 0x222C
    1f58:	c9 01       	movw	r24, r18
    1f5a:	bf 01       	movw	r22, r30
    1f5c:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    1f60:	d6 2f       	mov	r29, r22
  s_sum  -= val*s_cnt; //rest
    1f62:	46 2f       	mov	r20, r22
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	4e 9f       	mul	r20, r30
    1f68:	c0 01       	movw	r24, r0
    1f6a:	4f 9f       	mul	r20, r31
    1f6c:	90 0d       	add	r25, r0
    1f6e:	5e 9f       	mul	r21, r30
    1f70:	90 0d       	add	r25, r0
    1f72:	11 24       	eor	r1, r1
    1f74:	28 1b       	sub	r18, r24
    1f76:	39 0b       	sbc	r19, r25
    1f78:	30 93 29 22 	sts	0x2229, r19
    1f7c:	20 93 28 22 	sts	0x2228, r18
  s_cnt   = 0;
    1f80:	10 92 2c 22 	sts	0x222C, r1
    1f84:	10 92 2b 22 	sts	0x222B, r1

  if(abs(tm)<TMR_VAROFS) sw_toggled = false; // not switch - sw timer off
    1f88:	8c 2f       	mov	r24, r28
    1f8a:	81 5f       	subi	r24, 0xF1	; 241
    1f8c:	8f 31       	cpi	r24, 0x1F	; 31
    1f8e:	18 f4       	brcc	.+6      	; 0x1f96 <_Z5timerh+0x138>
    1f90:	10 92 2a 22 	sts	0x222A, r1
    1f94:	0d c0       	rjmp	.+26     	; 0x1fb0 <_Z5timerh+0x152>
  else if(abs(tm)<(TMR_VAROFS+MAX_SWITCH-1)) sw_toggled = getSwitch((tm>0 ? tm-(TMR_VAROFS-1) : tm+(TMR_VAROFS-1)) ,0); //normal switch
    1f96:	9c 2f       	mov	r25, r28
    1f98:	9c 5d       	subi	r25, 0xDC	; 220
    1f9a:	99 34       	cpi	r25, 0x49	; 73
    1f9c:	48 f4       	brcc	.+18     	; 0x1fb0 <_Z5timerh+0x152>
    1f9e:	1c 16       	cp	r1, r28
    1fa0:	14 f4       	brge	.+4      	; 0x1fa6 <_Z5timerh+0x148>
    1fa2:	8c 2f       	mov	r24, r28
    1fa4:	8f 50       	subi	r24, 0x0F	; 15
    1fa6:	60 e0       	ldi	r22, 0x00	; 0
    1fa8:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    1fac:	80 93 2a 22 	sts	0x222A, r24

  s_timeCumTot               += 1;
    1fb0:	80 91 82 15 	lds	r24, 0x1582
    1fb4:	90 91 83 15 	lds	r25, 0x1583
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	90 93 83 15 	sts	0x1583, r25
    1fbe:	80 93 82 15 	sts	0x1582, r24
  s_timeCumAbs               += 1;
    1fc2:	40 91 84 15 	lds	r20, 0x1584
    1fc6:	50 91 85 15 	lds	r21, 0x1585
    1fca:	4f 5f       	subi	r20, 0xFF	; 255
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	50 93 85 15 	sts	0x1585, r21
    1fd2:	40 93 84 15 	sts	0x1584, r20
  if(val) s_timeCumThr       += 1;
    1fd6:	dd 23       	and	r29, r29
    1fd8:	49 f0       	breq	.+18     	; 0x1fec <_Z5timerh+0x18e>
    1fda:	80 91 88 15 	lds	r24, 0x1588
    1fde:	90 91 89 15 	lds	r25, 0x1589
    1fe2:	01 96       	adiw	r24, 0x01	; 1
    1fe4:	90 93 89 15 	sts	0x1589, r25
    1fe8:	80 93 88 15 	sts	0x1588, r24
  if(sw_toggled) s_timeCumSw += 1;
    1fec:	80 91 2a 22 	lds	r24, 0x222A
    1ff0:	88 23       	and	r24, r24
    1ff2:	49 f0       	breq	.+18     	; 0x2006 <_Z5timerh+0x1a8>
    1ff4:	80 91 86 15 	lds	r24, 0x1586
    1ff8:	90 91 87 15 	lds	r25, 0x1587
    1ffc:	01 96       	adiw	r24, 0x01	; 1
    1ffe:	90 93 87 15 	sts	0x1587, r25
    2002:	80 93 86 15 	sts	0x1586, r24
  s_timeCum16ThrP            += val/2;
    2006:	d6 95       	lsr	r29
    2008:	20 91 8a 15 	lds	r18, 0x158A
    200c:	30 91 8b 15 	lds	r19, 0x158B
    2010:	2d 0f       	add	r18, r29
    2012:	31 1d       	adc	r19, r1
    2014:	30 93 8b 15 	sts	0x158B, r19
    2018:	20 93 8a 15 	sts	0x158A, r18

  s_timerVal = g_model.tmrVal;
    201c:	80 91 96 12 	lds	r24, 0x1296
    2020:	90 91 97 12 	lds	r25, 0x1297
    2024:	90 93 8e 15 	sts	0x158E, r25
    2028:	80 93 8d 15 	sts	0x158D, r24
  uint8_t tmrM = abs(g_model.tmrMode);
    202c:	60 91 95 12 	lds	r22, 0x1295
    2030:	66 0f       	add	r22, r22
    2032:	65 95       	asr	r22
    2034:	77 27       	eor	r23, r23
    2036:	67 fd       	sbrc	r22, 7
    2038:	70 95       	com	r23
    203a:	77 ff       	sbrs	r23, 7
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <_Z5timerh+0x1e6>
    203e:	70 95       	com	r23
    2040:	61 95       	neg	r22
    2042:	7f 4f       	sbci	r23, 0xFF	; 255
  if(tmrM==TMRMODE_NONE) s_timerState = TMR_OFF;
    2044:	66 23       	and	r22, r22
    2046:	19 f4       	brne	.+6      	; 0x204e <_Z5timerh+0x1f0>
    2048:	10 92 8c 15 	sts	0x158C, r1
    204c:	1e c0       	rjmp	.+60     	; 0x208a <_Z5timerh+0x22c>
  else if(tmrM==TMRMODE_ABS) s_timerVal -= s_timeCumAbs;
    204e:	61 30       	cpi	r22, 0x01	; 1
    2050:	19 f4       	brne	.+6      	; 0x2058 <_Z5timerh+0x1fa>
    2052:	84 1b       	sub	r24, r20
    2054:	95 0b       	sbc	r25, r21
    2056:	15 c0       	rjmp	.+42     	; 0x2082 <_Z5timerh+0x224>
  else if(tmrM<TMR_VAROFS) s_timerVal -= (tmrM&1) ? s_timeCum16ThrP/16 : s_timeCumThr;// stick% : stick
    2058:	60 31       	cpi	r22, 0x10	; 16
    205a:	68 f4       	brcc	.+26     	; 0x2076 <_Z5timerh+0x218>
    205c:	60 ff       	sbrs	r22, 0
    205e:	06 c0       	rjmp	.+12     	; 0x206c <_Z5timerh+0x20e>
    2060:	44 e0       	ldi	r20, 0x04	; 4
    2062:	36 95       	lsr	r19
    2064:	27 95       	ror	r18
    2066:	4a 95       	dec	r20
    2068:	e1 f7       	brne	.-8      	; 0x2062 <_Z5timerh+0x204>
    206a:	09 c0       	rjmp	.+18     	; 0x207e <_Z5timerh+0x220>
    206c:	20 91 88 15 	lds	r18, 0x1588
    2070:	30 91 89 15 	lds	r19, 0x1589
    2074:	04 c0       	rjmp	.+8      	; 0x207e <_Z5timerh+0x220>
  else s_timerVal -= s_timeCumSw; //switch
    2076:	20 91 86 15 	lds	r18, 0x1586
    207a:	30 91 87 15 	lds	r19, 0x1587
    207e:	82 1b       	sub	r24, r18
    2080:	93 0b       	sbc	r25, r19
    2082:	90 93 8e 15 	sts	0x158E, r25
    2086:	80 93 8d 15 	sts	0x158D, r24

  switch(s_timerState)
    208a:	80 91 8c 15 	lds	r24, 0x158C
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	51 f0       	breq	.+20     	; 0x20a6 <_Z5timerh+0x248>
    2092:	81 30       	cpi	r24, 0x01	; 1
    2094:	18 f0       	brcs	.+6      	; 0x209c <_Z5timerh+0x23e>
    2096:	82 30       	cpi	r24, 0x02	; 2
    2098:	49 f5       	brne	.+82     	; 0x20ec <_Z5timerh+0x28e>
    209a:	14 c0       	rjmp	.+40     	; 0x20c4 <_Z5timerh+0x266>
  {
    case TMR_OFF:
      if(g_model.tmrMode != TMRMODE_NONE) s_timerState=TMR_RUNNING;
    209c:	80 91 95 12 	lds	r24, 0x1295
    20a0:	8f 77       	andi	r24, 0x7F	; 127
    20a2:	21 f1       	breq	.+72     	; 0x20ec <_Z5timerh+0x28e>
    20a4:	20 c0       	rjmp	.+64     	; 0x20e6 <_Z5timerh+0x288>
      break;
    case TMR_RUNNING:
      if(s_timerVal<=0 && g_model.tmrVal) s_timerState=TMR_BEEPING;
    20a6:	80 91 8d 15 	lds	r24, 0x158D
    20aa:	90 91 8e 15 	lds	r25, 0x158E
    20ae:	18 16       	cp	r1, r24
    20b0:	19 06       	cpc	r1, r25
    20b2:	e4 f0       	brlt	.+56     	; 0x20ec <_Z5timerh+0x28e>
    20b4:	80 91 96 12 	lds	r24, 0x1296
    20b8:	90 91 97 12 	lds	r25, 0x1297
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	b1 f0       	breq	.+44     	; 0x20ec <_Z5timerh+0x28e>
    20c0:	82 e0       	ldi	r24, 0x02	; 2
    20c2:	12 c0       	rjmp	.+36     	; 0x20e8 <_Z5timerh+0x28a>
      break;
    case TMR_BEEPING:
      if(s_timerVal <= -MAX_ALERT_TIME)   s_timerState=TMR_STOPPED;
    20c4:	80 91 8d 15 	lds	r24, 0x158D
    20c8:	90 91 8e 15 	lds	r25, 0x158E
    20cc:	2f ef       	ldi	r18, 0xFF	; 255
    20ce:	85 3c       	cpi	r24, 0xC5	; 197
    20d0:	92 07       	cpc	r25, r18
    20d2:	1c f4       	brge	.+6      	; 0x20da <_Z5timerh+0x27c>
    20d4:	83 e0       	ldi	r24, 0x03	; 3
    20d6:	80 93 8c 15 	sts	0x158C, r24
      if(g_model.tmrVal == 0)             s_timerState=TMR_RUNNING;
    20da:	80 91 96 12 	lds	r24, 0x1296
    20de:	90 91 97 12 	lds	r25, 0x1297
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	19 f4       	brne	.+6      	; 0x20ec <_Z5timerh+0x28e>
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	80 93 8c 15 	sts	0x158C, r24
      break;
  }

  static int16_t last_tmr;

  if(last_tmr != s_timerVal)  //beep only if seconds advance
    20ec:	80 91 8d 15 	lds	r24, 0x158D
    20f0:	90 91 8e 15 	lds	r25, 0x158E
    20f4:	20 91 1f 22 	lds	r18, 0x221F
    20f8:	30 91 20 22 	lds	r19, 0x2220
    20fc:	28 17       	cp	r18, r24
    20fe:	39 07       	cpc	r19, r25
    2100:	09 f4       	brne	.+2      	; 0x2104 <_Z5timerh+0x2a6>
    2102:	90 c0       	rjmp	.+288    	; 0x2224 <__stack+0x25>
  {
      if(s_timerState==TMR_RUNNING)
    2104:	20 91 8c 15 	lds	r18, 0x158C
    2108:	21 30       	cpi	r18, 0x01	; 1
    210a:	09 f0       	breq	.+2      	; 0x210e <_Z5timerh+0x2b0>
    210c:	79 c0       	rjmp	.+242    	; 0x2200 <__stack+0x1>
      {
          if(g_eeGeneral.preBeep && g_model.tmrVal) // beep when 30, 15, 10, 5,4,3,2,1 seconds remaining
    210e:	20 91 84 12 	lds	r18, 0x1284
    2112:	22 ff       	sbrs	r18, 2
    2114:	58 c0       	rjmp	.+176    	; 0x21c6 <_Z5timerh+0x368>
    2116:	20 91 96 12 	lds	r18, 0x1296
    211a:	30 91 97 12 	lds	r19, 0x1297
    211e:	21 15       	cp	r18, r1
    2120:	31 05       	cpc	r19, r1
    2122:	09 f4       	brne	.+2      	; 0x2126 <_Z5timerh+0x2c8>
    2124:	50 c0       	rjmp	.+160    	; 0x21c6 <_Z5timerh+0x368>
          {
              if(s_timerVal==30) {beepAgain=2; beepWarn2();} //beep three times
    2126:	8e 31       	cpi	r24, 0x1E	; 30
    2128:	91 05       	cpc	r25, r1
    212a:	49 f4       	brne	.+18     	; 0x213e <_Z5timerh+0x2e0>
    212c:	82 e0       	ldi	r24, 0x02	; 2
    212e:	80 93 7d 15 	sts	0x157D, r24

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    2132:	80 91 74 15 	lds	r24, 0x1574
    2136:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    213a:	84 e6       	ldi	r24, 0x64	; 100
    213c:	87 bd       	out	0x27, r24	; 39
              if(s_timerVal==20) {beepAgain=1; beepWarn2();} //beep two times
    213e:	80 91 8d 15 	lds	r24, 0x158D
    2142:	90 91 8e 15 	lds	r25, 0x158E
    2146:	84 31       	cpi	r24, 0x14	; 20
    2148:	91 05       	cpc	r25, r1
    214a:	49 f4       	brne	.+18     	; 0x215e <_Z5timerh+0x300>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	80 93 7d 15 	sts	0x157D, r24

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    2152:	80 91 74 15 	lds	r24, 0x1574
    2156:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    215a:	84 e6       	ldi	r24, 0x64	; 100
    215c:	87 bd       	out	0x27, r24	; 39
              if(s_timerVal==10)  beepWarn2();
    215e:	80 91 8d 15 	lds	r24, 0x158D
    2162:	90 91 8e 15 	lds	r25, 0x158E
    2166:	8a 30       	cpi	r24, 0x0A	; 10
    2168:	91 05       	cpc	r25, r1
    216a:	31 f4       	brne	.+12     	; 0x2178 <_Z5timerh+0x31a>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    216c:	80 91 74 15 	lds	r24, 0x1574
    2170:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    2174:	84 e6       	ldi	r24, 0x64	; 100
    2176:	87 bd       	out	0x27, r24	; 39
              if(s_timerVal<= 3)  beepWarn2();
    2178:	80 91 8d 15 	lds	r24, 0x158D
    217c:	90 91 8e 15 	lds	r25, 0x158E
    2180:	84 30       	cpi	r24, 0x04	; 4
    2182:	91 05       	cpc	r25, r1
    2184:	34 f4       	brge	.+12     	; 0x2192 <_Z5timerh+0x334>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    2186:	80 91 74 15 	lds	r24, 0x1574
    218a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    218e:	84 e6       	ldi	r24, 0x64	; 100
    2190:	87 bd       	out	0x27, r24	; 39

              if(g_eeGeneral.flashBeep && (s_timerVal==30 || s_timerVal==20 || s_timerVal==10 || s_timerVal<=3))
    2192:	80 91 84 12 	lds	r24, 0x1284
    2196:	83 ff       	sbrs	r24, 3
    2198:	16 c0       	rjmp	.+44     	; 0x21c6 <_Z5timerh+0x368>
    219a:	80 91 8d 15 	lds	r24, 0x158D
    219e:	90 91 8e 15 	lds	r25, 0x158E
    21a2:	8e 31       	cpi	r24, 0x1E	; 30
    21a4:	91 05       	cpc	r25, r1
    21a6:	49 f0       	breq	.+18     	; 0x21ba <_Z5timerh+0x35c>
    21a8:	84 31       	cpi	r24, 0x14	; 20
    21aa:	91 05       	cpc	r25, r1
    21ac:	31 f0       	breq	.+12     	; 0x21ba <_Z5timerh+0x35c>
    21ae:	8a 30       	cpi	r24, 0x0A	; 10
    21b0:	91 05       	cpc	r25, r1
    21b2:	19 f0       	breq	.+6      	; 0x21ba <_Z5timerh+0x35c>
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	91 05       	cpc	r25, r1
    21b8:	34 f4       	brge	.+12     	; 0x21c6 <_Z5timerh+0x368>
                  g_LightOffCounter = FLASH_DURATION;
    21ba:	82 e3       	ldi	r24, 0x32	; 50
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	90 93 7c 15 	sts	0x157C, r25
    21c2:	80 93 7b 15 	sts	0x157B, r24
          }

          if(g_eeGeneral.minuteBeep && (((g_model.tmrDir ? g_model.tmrVal-s_timerVal : s_timerVal)%60)==0)) //short beep every minute
    21c6:	80 91 84 12 	lds	r24, 0x1284
    21ca:	81 ff       	sbrs	r24, 1
    21cc:	2b c0       	rjmp	.+86     	; 0x2224 <__stack+0x25>
    21ce:	80 91 95 12 	lds	r24, 0x1295
    21d2:	20 91 8d 15 	lds	r18, 0x158D
    21d6:	30 91 8e 15 	lds	r19, 0x158E
    21da:	87 ff       	sbrs	r24, 7
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <_Z5timerh+0x38e>
    21de:	80 91 96 12 	lds	r24, 0x1296
    21e2:	90 91 97 12 	lds	r25, 0x1297
    21e6:	82 1b       	sub	r24, r18
    21e8:	93 0b       	sbc	r25, r19
    21ea:	01 c0       	rjmp	.+2      	; 0x21ee <_Z5timerh+0x390>
    21ec:	c9 01       	movw	r24, r18
    21ee:	6c e3       	ldi	r22, 0x3C	; 60
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	a9 f4       	brne	.+42     	; 0x2224 <__stack+0x25>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    21fa:	80 91 74 15 	lds	r24, 0x1574
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <__stack+0x9>
          {
              beepWarn2();
              if(g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
          }
      }
      else if(s_timerState==TMR_BEEPING)
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	81 f4       	brne	.+32     	; 0x2224 <__stack+0x25>
    2204:	80 91 75 15 	lds	r24, 0x1575
    2208:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    220c:	84 e6       	ldi	r24, 0x64	; 100
    220e:	87 bd       	out	0x27, r24	; 39
      {
          beepWarn();
          if(g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    2210:	80 91 84 12 	lds	r24, 0x1284
    2214:	83 ff       	sbrs	r24, 3
    2216:	06 c0       	rjmp	.+12     	; 0x2224 <__stack+0x25>
    2218:	82 e3       	ldi	r24, 0x32	; 50
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	90 93 7c 15 	sts	0x157C, r25
    2220:	80 93 7b 15 	sts	0x157B, r24
      }
  }
  last_tmr = s_timerVal;
    2224:	20 91 8d 15 	lds	r18, 0x158D
    2228:	30 91 8e 15 	lds	r19, 0x158E
    222c:	30 93 20 22 	sts	0x2220, r19
    2230:	20 93 1f 22 	sts	0x221F, r18
  if(g_model.tmrDir) s_timerVal = g_model.tmrVal-s_timerVal; //if counting backwards - display backwards
    2234:	80 91 95 12 	lds	r24, 0x1295
    2238:	87 ff       	sbrs	r24, 7
    223a:	0a c0       	rjmp	.+20     	; 0x2250 <__stack+0x51>
    223c:	80 91 96 12 	lds	r24, 0x1296
    2240:	90 91 97 12 	lds	r25, 0x1297
    2244:	82 1b       	sub	r24, r18
    2246:	93 0b       	sbc	r25, r19
    2248:	90 93 8e 15 	sts	0x158E, r25
    224c:	80 93 8d 15 	sts	0x158D, r24
}
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	08 95       	ret

00002256 <_Z5tracev>:
inline void trace()   // called in perOut - once envery 0.01sec
{
  //value for time described in g_model.tmrMode
  //OFFABSRUsRU%ELsEL%THsTH%ALsAL%P1P1%P2P2%P3P3%
  uint16_t v = 0;
  if((abs(g_model.tmrMode)>1) && (abs(g_model.tmrMode)<TMR_VAROFS)) {
    2256:	40 91 95 12 	lds	r20, 0x1295
    225a:	44 0f       	add	r20, r20
    225c:	45 95       	asr	r20
    225e:	84 2f       	mov	r24, r20
    2260:	99 27       	eor	r25, r25
    2262:	87 fd       	sbrc	r24, 7
    2264:	90 95       	com	r25
    2266:	97 ff       	sbrs	r25, 7
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <_Z5tracev+0x1a>
    226a:	90 95       	com	r25
    226c:	81 95       	neg	r24
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	82 30       	cpi	r24, 0x02	; 2
    2272:	91 05       	cpc	r25, r1
    2274:	94 f1       	brlt	.+100    	; 0x22da <_Z5tracev+0x84>
    2276:	41 3f       	cpi	r20, 0xF1	; 241
    2278:	84 f1       	brlt	.+96     	; 0x22da <_Z5tracev+0x84>
    227a:	40 31       	cpi	r20, 0x10	; 16
    227c:	74 f5       	brge	.+92     	; 0x22da <_Z5tracev+0x84>
    v = calibratedStick[CONVERT_MODE(abs(g_model.tmrMode)/2)-1];
    227e:	47 3f       	cpi	r20, 0xF7	; 247
    2280:	94 f0       	brlt	.+36     	; 0x22a6 <_Z5tracev+0x50>
    2282:	4a 30       	cpi	r20, 0x0A	; 10
    2284:	84 f4       	brge	.+32     	; 0x22a6 <_Z5tracev+0x50>
    2286:	e0 91 82 12 	lds	r30, 0x1282
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	ee 0f       	add	r30, r30
    228e:	ff 1f       	adc	r31, r31
    2290:	ee 0f       	add	r30, r30
    2292:	ff 1f       	adc	r31, r31
    2294:	95 95       	asr	r25
    2296:	87 95       	ror	r24
    2298:	e8 0f       	add	r30, r24
    229a:	f9 1f       	adc	r31, r25
    229c:	ef 59       	subi	r30, 0x9F	; 159
    229e:	f9 4f       	sbci	r31, 0xF9	; 249
    22a0:	e4 91       	lpm	r30, Z+
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	03 c0       	rjmp	.+6      	; 0x22ac <_Z5tracev+0x56>
    22a6:	fc 01       	movw	r30, r24
    22a8:	f5 95       	asr	r31
    22aa:	e7 95       	ror	r30
    22ac:	31 97       	sbiw	r30, 0x01	; 1
    22ae:	ee 0f       	add	r30, r30
    22b0:	ff 1f       	adc	r31, r31
    22b2:	e9 51       	subi	r30, 0x19	; 25
    22b4:	f7 4e       	sbci	r31, 0xE7	; 231
    22b6:	20 81       	ld	r18, Z
    22b8:	31 81       	ldd	r19, Z+1	; 0x01
    v = (g_model.tmrMode<0 ? RESX-v : v+RESX ) / (RESX/16);
    22ba:	47 ff       	sbrs	r20, 7
    22bc:	05 c0       	rjmp	.+10     	; 0x22c8 <_Z5tracev+0x72>
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	94 e0       	ldi	r25, 0x04	; 4
    22c2:	82 1b       	sub	r24, r18
    22c4:	93 0b       	sbc	r25, r19
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <_Z5tracev+0x78>
    22c8:	c9 01       	movw	r24, r18
    22ca:	80 50       	subi	r24, 0x00	; 0
    22cc:	9c 4f       	sbci	r25, 0xFC	; 252
    22ce:	e6 e0       	ldi	r30, 0x06	; 6
    22d0:	96 95       	lsr	r25
    22d2:	87 95       	ror	r24
    22d4:	ea 95       	dec	r30
    22d6:	e1 f7       	brne	.-8      	; 0x22d0 <_Z5tracev+0x7a>
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <_Z5tracev+0x88>
uint16_t s_traceCnt;
inline void trace()   // called in perOut - once envery 0.01sec
{
  //value for time described in g_model.tmrMode
  //OFFABSRUsRU%ELsEL%THsTH%ALsAL%P1P1%P2P2%P3P3%
  uint16_t v = 0;
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
  if((abs(g_model.tmrMode)>1) && (abs(g_model.tmrMode)<TMR_VAROFS)) {
    v = calibratedStick[CONVERT_MODE(abs(g_model.tmrMode)/2)-1];
    v = (g_model.tmrMode<0 ? RESX-v : v+RESX ) / (RESX/16);
  }
  timer(v);
    22de:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <_Z5timerh>

  uint16_t val = calibratedStick[CONVERT_MODE(3)-1]; // get throttle channel value
    22e2:	e0 91 82 12 	lds	r30, 0x1282
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	ee 0f       	add	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	ee 0f       	add	r30, r30
    22ee:	ff 1f       	adc	r31, r31
    22f0:	ec 59       	subi	r30, 0x9C	; 156
    22f2:	f9 4f       	sbci	r31, 0xF9	; 249
    22f4:	e4 91       	lpm	r30, Z+
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	eb 51       	subi	r30, 0x1B	; 27
    22fe:	f7 4e       	sbci	r31, 0xE7	; 231
    2300:	20 81       	ld	r18, Z
    2302:	31 81       	ldd	r19, Z+1	; 0x01
  val = (g_eeGeneral.throttleReversed ? RESX-val : val+RESX);
    2304:	80 91 84 12 	lds	r24, 0x1284
    2308:	80 ff       	sbrs	r24, 0
    230a:	05 c0       	rjmp	.+10     	; 0x2316 <_Z5tracev+0xc0>
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	94 e0       	ldi	r25, 0x04	; 4
    2310:	82 1b       	sub	r24, r18
    2312:	93 0b       	sbc	r25, r19
    2314:	03 c0       	rjmp	.+6      	; 0x231c <_Z5tracev+0xc6>
    2316:	c9 01       	movw	r24, r18
    2318:	80 50       	subi	r24, 0x00	; 0
    231a:	9c 4f       	sbci	r25, 0xFC	; 252
  val /= (RESX/16); // calibrate it

  static uint16_t s_time;
  static uint16_t s_cnt;
  static uint16_t s_sum;
  s_cnt++;
    231c:	20 91 24 22 	lds	r18, 0x2224
    2320:	30 91 25 22 	lds	r19, 0x2225
    2324:	2f 5f       	subi	r18, 0xFF	; 255
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	30 93 25 22 	sts	0x2225, r19
    232c:	20 93 24 22 	sts	0x2224, r18
  }
  timer(v);

  uint16_t val = calibratedStick[CONVERT_MODE(3)-1]; // get throttle channel value
  val = (g_eeGeneral.throttleReversed ? RESX-val : val+RESX);
  val /= (RESX/16); // calibrate it
    2330:	56 e0       	ldi	r21, 0x06	; 6
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	5a 95       	dec	r21
    2338:	e1 f7       	brne	.-8      	; 0x2332 <_Z5tracev+0xdc>

  static uint16_t s_time;
  static uint16_t s_cnt;
  static uint16_t s_sum;
  s_cnt++;
  s_sum+=val;
    233a:	20 91 21 22 	lds	r18, 0x2221
    233e:	30 91 22 22 	lds	r19, 0x2222
    2342:	28 0f       	add	r18, r24
    2344:	39 1f       	adc	r19, r25
    2346:	30 93 22 22 	sts	0x2222, r19
    234a:	20 93 21 22 	sts	0x2221, r18
  if((get_tmr10ms()-s_time)<1000) //10 sec
    234e:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    2352:	20 91 1d 22 	lds	r18, 0x221D
    2356:	30 91 1e 22 	lds	r19, 0x221E
    235a:	82 1b       	sub	r24, r18
    235c:	93 0b       	sbc	r25, r19
    235e:	23 e0       	ldi	r18, 0x03	; 3
    2360:	88 3e       	cpi	r24, 0xE8	; 232
    2362:	92 07       	cpc	r25, r18
    2364:	a8 f1       	brcs	.+106    	; 0x23d0 <_Z5tracev+0x17a>
    return;
  s_time= get_tmr10ms();
    2366:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    236a:	90 93 1e 22 	sts	0x221E, r25
    236e:	80 93 1d 22 	sts	0x221D, r24
  val   = s_sum/s_cnt;
    2372:	80 91 21 22 	lds	r24, 0x2221
    2376:	90 91 22 22 	lds	r25, 0x2222
    237a:	60 91 24 22 	lds	r22, 0x2224
    237e:	70 91 25 22 	lds	r23, 0x2225
    2382:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
  s_sum = 0;
    2386:	10 92 22 22 	sts	0x2222, r1
    238a:	10 92 21 22 	sts	0x2221, r1
  s_cnt = 0;
    238e:	10 92 25 22 	sts	0x2225, r1
    2392:	10 92 24 22 	sts	0x2224, r1

  s_traceCnt++;
    2396:	80 91 0e 16 	lds	r24, 0x160E
    239a:	90 91 0f 16 	lds	r25, 0x160F
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	90 93 0f 16 	sts	0x160F, r25
    23a4:	80 93 0e 16 	sts	0x160E, r24
  s_traceBuf[s_traceWr++] = val;
    23a8:	80 91 0c 16 	lds	r24, 0x160C
    23ac:	90 91 0d 16 	lds	r25, 0x160D
    23b0:	fc 01       	movw	r30, r24
    23b2:	ec 56       	subi	r30, 0x6C	; 108
    23b4:	fa 4e       	sbci	r31, 0xEA	; 234
    23b6:	60 83       	st	Z, r22
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	90 93 0d 16 	sts	0x160D, r25
    23be:	80 93 0c 16 	sts	0x160C, r24
  if(s_traceWr>=MAXTRACE) s_traceWr=0;
    23c2:	88 37       	cpi	r24, 0x78	; 120
    23c4:	91 05       	cpc	r25, r1
    23c6:	20 f0       	brcs	.+8      	; 0x23d0 <_Z5tracev+0x17a>
    23c8:	10 92 0d 16 	sts	0x160D, r1
    23cc:	10 92 0c 16 	sts	0x160C, r1
    23d0:	08 95       	ret

000023d2 <_Z9evalTrimsh>:
int32_t  act   [MAX_MIXERS] = {0};
uint8_t  swOn  [MAX_MIXERS] = {0};
uint8_t mixWarning;

inline void evalTrims(uint8_t phase)
{
    23d2:	2f 92       	push	r2
    23d4:	3f 92       	push	r3
    23d6:	4f 92       	push	r4
    23d8:	5f 92       	push	r5
    23da:	6f 92       	push	r6
    23dc:	7f 92       	push	r7
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <_Z9evalTrimsh+0x26>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	89 83       	std	Y+1, r24	; 0x01
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
      trim = 0;
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	cf 2e       	mov	r12, r31
    2402:	f7 e1       	ldi	r31, 0x17	; 23
    2404:	df 2e       	mov	r13, r31
    2406:	ec e4       	ldi	r30, 0x4C	; 76
    2408:	ae 2e       	mov	r10, r30
    240a:	e7 e1       	ldi	r30, 0x17	; 23
    240c:	be 2e       	mov	r11, r30
int32_t  act   [MAX_MIXERS] = {0};
uint8_t  swOn  [MAX_MIXERS] = {0};
uint8_t mixWarning;

inline void evalTrims(uint8_t phase)
{
    240e:	00 e0       	ldi	r16, 0x00	; 0
    2410:	10 e0       	ldi	r17, 0x00	; 0
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    // do trim -> throttle trim if applicable
    int16_t v = anas[i];
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(getTrimFlightPhase(i, phase), i);
    if (IS_THROTTLE(i) && g_model.thrTrim) {
    2412:	72 e0       	ldi	r23, 0x02	; 2
    2414:	87 2e       	mov	r8, r23
    2416:	91 2c       	mov	r9, r1
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    2418:	61 2c       	mov	r6, r1
    241a:	64 e0       	ldi	r22, 0x04	; 4
    241c:	76 2e       	mov	r7, r22
    241e:	21 2c       	mov	r2, r1
    2420:	58 e0       	ldi	r21, 0x08	; 8
    2422:	35 2e       	mov	r3, r21
    2424:	41 2c       	mov	r4, r1
    2426:	51 2c       	mov	r5, r1

inline void evalTrims(uint8_t phase)
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    // do trim -> throttle trim if applicable
    int16_t v = anas[i];
    2428:	f6 01       	movw	r30, r12
    242a:	e1 90       	ld	r14, Z+
    242c:	f1 90       	ld	r15, Z+
    242e:	6f 01       	movw	r12, r30
    int32_t vv = 2*RESX;
    int16_t trim = getTrimValue(getTrimFlightPhase(i, phase), i);
    2430:	80 2f       	mov	r24, r16
    2432:	69 81       	ldd	r22, Y+1	; 0x01
    2434:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_Z18getTrimFlightPhasehh>
    2438:	60 2f       	mov	r22, r16
    243a:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
    if (IS_THROTTLE(i) && g_model.thrTrim) {
    2442:	80 91 82 12 	lds	r24, 0x1282
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	81 70       	andi	r24, 0x01	; 1
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	94 01       	movw	r18, r8
    244e:	28 1b       	sub	r18, r24
    2450:	39 0b       	sbc	r19, r25
    2452:	20 17       	cp	r18, r16
    2454:	31 07       	cpc	r19, r17
    2456:	81 f5       	brne	.+96     	; 0x24b8 <_Z9evalTrimsh+0xe6>
    2458:	80 91 98 12 	lds	r24, 0x1298
    245c:	83 ff       	sbrs	r24, 3
    245e:	2c c0       	rjmp	.+88     	; 0x24b8 <_Z9evalTrimsh+0xe6>
      if (g_eeGeneral.throttleReversed)
    2460:	80 91 84 12 	lds	r24, 0x1284
    2464:	80 ff       	sbrs	r24, 0
    2466:	07 c0       	rjmp	.+14     	; 0x2476 <_Z9evalTrimsh+0xa4>
        trim = -trim;
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	90 95       	com	r25
    246e:	81 95       	neg	r24
    2470:	9f 4f       	sbci	r25, 0xFF	; 255
    2472:	9b 83       	std	Y+3, r25	; 0x03
    2474:	8a 83       	std	Y+2, r24	; 0x02
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    2476:	ea 81       	ldd	r30, Y+2	; 0x02
    2478:	fb 81       	ldd	r31, Y+3	; 0x03
    247a:	bf 01       	movw	r22, r30
    247c:	88 27       	eor	r24, r24
    247e:	77 fd       	sbrc	r23, 7
    2480:	80 95       	com	r24
    2482:	98 2f       	mov	r25, r24
    2484:	63 58       	subi	r22, 0x83	; 131
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	8f 4f       	sbci	r24, 0xFF	; 255
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	93 01       	movw	r18, r6
    248e:	2e 19       	sub	r18, r14
    2490:	3f 09       	sbc	r19, r15
    2492:	44 27       	eor	r20, r20
    2494:	37 fd       	sbrc	r19, 7
    2496:	40 95       	com	r20
    2498:	54 2f       	mov	r21, r20
    249a:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    249e:	a2 01       	movw	r20, r4
    24a0:	91 01       	movw	r18, r2
    24a2:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    }
    else if (trimsCheckTimer > 0) {
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
    24a6:	20 30       	cpi	r18, 0x00	; 0
    24a8:	f8 e0       	ldi	r31, 0x08	; 8
    24aa:	3f 07       	cpc	r19, r31
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	4f 07       	cpc	r20, r31
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	5f 07       	cpc	r21, r31
    24b4:	39 f4       	brne	.+14     	; 0x24c4 <_Z9evalTrimsh+0xf2>
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <_Z9evalTrimsh+0xee>
    if (IS_THROTTLE(i) && g_model.thrTrim) {
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
    24b8:	80 91 93 15 	lds	r24, 0x1593
    24bc:	88 23       	and	r24, r24
    24be:	79 f4       	brne	.+30     	; 0x24de <_Z9evalTrimsh+0x10c>
      trim = 0;
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
    24c0:	2a 81       	ldd	r18, Y+2	; 0x02
    24c2:	3b 81       	ldd	r19, Y+3	; 0x03
    24c4:	22 0f       	add	r18, r18
    24c6:	33 1f       	adc	r19, r19
    24c8:	f5 01       	movw	r30, r10
    24ca:	21 93       	st	Z+, r18
    24cc:	31 93       	st	Z+, r19
    24ce:	5f 01       	movw	r10, r30
    24d0:	0f 5f       	subi	r16, 0xFF	; 255
    24d2:	1f 4f       	sbci	r17, 0xFF	; 255
uint8_t  swOn  [MAX_MIXERS] = {0};
uint8_t mixWarning;

inline void evalTrims(uint8_t phase)
{
  for (uint8_t i=0; i<NUM_STICKS; i++) {
    24d4:	04 30       	cpi	r16, 0x04	; 4
    24d6:	11 05       	cpc	r17, r1
    24d8:	09 f0       	breq	.+2      	; 0x24dc <_Z9evalTrimsh+0x10a>
    24da:	a6 cf       	rjmp	.-180    	; 0x2428 <_Z9evalTrimsh+0x56>
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <_Z9evalTrimsh+0x112>
      if (g_eeGeneral.throttleReversed)
        trim = -trim;
      vv = ((int32_t)trim-TRIM_MIN)*(RESX-v)/(2*RESX);
    }
    else if (trimsCheckTimer > 0) {
      trim = 0;
    24de:	1b 82       	std	Y+3, r1	; 0x03
    24e0:	1a 82       	std	Y+2, r1	; 0x02
    24e2:	ee cf       	rjmp	.-36     	; 0x24c0 <_Z9evalTrimsh+0xee>
    }

    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  }
}
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	df 90       	pop	r13
    24f8:	cf 90       	pop	r12
    24fa:	bf 90       	pop	r11
    24fc:	af 90       	pop	r10
    24fe:	9f 90       	pop	r9
    2500:	8f 90       	pop	r8
    2502:	7f 90       	pop	r7
    2504:	6f 90       	pop	r6
    2506:	5f 90       	pop	r5
    2508:	4f 90       	pop	r4
    250a:	3f 90       	pop	r3
    250c:	2f 90       	pop	r2
    250e:	08 95       	ret

00002510 <_Z10evalSticksh>:

uint8_t evalSticks(uint8_t phase)
{
    2510:	2f 92       	push	r2
    2512:	3f 92       	push	r3
    2514:	5f 92       	push	r5
    2516:	6f 92       	push	r6
    2518:	7f 92       	push	r7
    251a:	8f 92       	push	r8
    251c:	9f 92       	push	r9
    251e:	af 92       	push	r10
    2520:	bf 92       	push	r11
    2522:	cf 92       	push	r12
    2524:	df 92       	push	r13
    2526:	ef 92       	push	r14
    2528:	ff 92       	push	r15
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	58 2e       	mov	r5, r24
                                     g_eeGeneral.calibSpanPos[i] :
                                     g_eeGeneral.calibSpanNeg[i])));
#endif

    if(v <= -RESX) v = -RESX;
    if(v >=  RESX) v =  RESX;
    2534:	ff e3       	ldi	r31, 0x3F	; 63
    2536:	ef 2e       	mov	r14, r31
    2538:	f2 e1       	ldi	r31, 0x12	; 18
    253a:	ff 2e       	mov	r15, r31
    253c:	e0 e0       	ldi	r30, 0x00	; 0
    253e:	8e 2e       	mov	r8, r30
    2540:	e7 e1       	ldi	r30, 0x17	; 23
    2542:	9e 2e       	mov	r9, r30
    2544:	77 ee       	ldi	r23, 0xE7	; 231
    2546:	67 2e       	mov	r6, r23
    2548:	78 e1       	ldi	r23, 0x18	; 24
    254a:	77 2e       	mov	r7, r23
    trims[i] = (vv==2*RESX) ? trim*2 : (int16_t)vv*2; // if throttle trim -> trim low end
  }
}

uint8_t evalSticks(uint8_t phase)
{
    254c:	00 e0       	ldi	r16, 0x00	; 0
    254e:	10 e0       	ldi	r17, 0x00	; 0
    if(v>q)
      d = isqrt32(v);
  }
#endif

  uint8_t anaCenter = 0;
    2550:	cc 24       	eor	r12, r12
#endif

    if(v <= -RESX) v = -RESX;
    if(v >=  RESX) v =  RESX;

    if (g_eeGeneral.throttleReversed && i==THR_STICK)
    2552:	62 e0       	ldi	r22, 0x02	; 2
    2554:	26 2e       	mov	r2, r22
    2556:	31 2c       	mov	r3, r1
      v = -v;

    calibratedStick[i] = v; //for show in expo
    if(!(v/16)) anaCenter |= 1<<(CONVERT_MODE((i+1))-1);
    2558:	51 e0       	ldi	r21, 0x01	; 1
    255a:	a5 2e       	mov	r10, r21
    255c:	b1 2c       	mov	r11, r1
                                     g_eeGeneral.calibSpanPos[i] :
                                     g_eeGeneral.calibSpanNeg[i])));
#endif

    if(v <= -RESX) v = -RESX;
    if(v >=  RESX) v =  RESX;
    255e:	d0 2e       	mov	r13, r16

  for(uint8_t i=0; i<NUM_STICKS+NUM_POTS; i++) {

    // normalization [0..2048] -> [-1024..1024]

    int16_t v = anaIn(i);
    2560:	80 2f       	mov	r24, r16
    2562:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    2566:	9c 01       	movw	r18, r24

#ifndef SIMU
    v -= g_eeGeneral.calibMid[i];
    2568:	f7 01       	movw	r30, r14
    256a:	81 91       	ld	r24, Z+
    256c:	91 91       	ld	r25, Z+
    256e:	7f 01       	movw	r14, r30
    2570:	28 1b       	sub	r18, r24
    2572:	39 0b       	sbc	r19, r25
    v  =  v * (int32_t)RESX /  (max((int16_t)100,(v>0 ?
                                     g_eeGeneral.calibSpanPos[i] :
                                     g_eeGeneral.calibSpanNeg[i])));
    2574:	b9 01       	movw	r22, r18
    2576:	88 27       	eor	r24, r24
    2578:	77 fd       	sbrc	r23, 7
    257a:	80 95       	com	r24
    257c:	98 2f       	mov	r25, r24
    257e:	4a e0       	ldi	r20, 0x0A	; 10
    2580:	66 0f       	add	r22, r22
    2582:	77 1f       	adc	r23, r23
    2584:	88 1f       	adc	r24, r24
    2586:	99 1f       	adc	r25, r25
    2588:	4a 95       	dec	r20
    258a:	d1 f7       	brne	.-12     	; 0x2580 <_Z10evalSticksh+0x70>
    258c:	12 16       	cp	r1, r18
    258e:	13 06       	cpc	r1, r19
    2590:	1c f4       	brge	.+6      	; 0x2598 <_Z10evalSticksh+0x88>
    2592:	22 8d       	ldd	r18, Z+26	; 0x1a
    2594:	33 8d       	ldd	r19, Z+27	; 0x1b
    2596:	02 c0       	rjmp	.+4      	; 0x259c <_Z10evalSticksh+0x8c>
    2598:	24 85       	ldd	r18, Z+12	; 0x0c
    259a:	35 85       	ldd	r19, Z+13	; 0x0d
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
    259c:	24 36       	cpi	r18, 0x64	; 100
    259e:	31 05       	cpc	r19, r1
    25a0:	14 f4       	brge	.+4      	; 0x25a6 <_Z10evalSticksh+0x96>
    25a2:	24 e6       	ldi	r18, 0x64	; 100
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	44 27       	eor	r20, r20
    25a8:	37 fd       	sbrc	r19, 7
    25aa:	40 95       	com	r20
    25ac:	54 2f       	mov	r21, r20
    25ae:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    25b2:	e9 01       	movw	r28, r18
#endif

    if(v <= -RESX) v = -RESX;
    25b4:	fc ef       	ldi	r31, 0xFC	; 252
    25b6:	21 30       	cpi	r18, 0x01	; 1
    25b8:	3f 07       	cpc	r19, r31
    25ba:	2c f0       	brlt	.+10     	; 0x25c6 <_Z10evalSticksh+0xb6>
    if(v >=  RESX) v =  RESX;
    25bc:	24 e0       	ldi	r18, 0x04	; 4
    25be:	c0 30       	cpi	r28, 0x00	; 0
    25c0:	d2 07       	cpc	r29, r18
    25c2:	24 f4       	brge	.+8      	; 0x25cc <_Z10evalSticksh+0xbc>
    25c4:	05 c0       	rjmp	.+10     	; 0x25d0 <_Z10evalSticksh+0xc0>
    v  =  v * (int32_t)RESX /  (max((int16_t)100,(v>0 ?
                                     g_eeGeneral.calibSpanPos[i] :
                                     g_eeGeneral.calibSpanNeg[i])));
#endif

    if(v <= -RESX) v = -RESX;
    25c6:	c0 e0       	ldi	r28, 0x00	; 0
    25c8:	dc ef       	ldi	r29, 0xFC	; 252
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <_Z10evalSticksh+0xc0>
    if(v >=  RESX) v =  RESX;
    25cc:	c0 e0       	ldi	r28, 0x00	; 0
    25ce:	d4 e0       	ldi	r29, 0x04	; 4

    if (g_eeGeneral.throttleReversed && i==THR_STICK)
    25d0:	80 91 84 12 	lds	r24, 0x1284
    25d4:	80 ff       	sbrs	r24, 0
    25d6:	0e c0       	rjmp	.+28     	; 0x25f4 <_Z10evalSticksh+0xe4>
    25d8:	80 91 82 12 	lds	r24, 0x1282
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	81 70       	andi	r24, 0x01	; 1
    25e0:	90 70       	andi	r25, 0x00	; 0
    25e2:	f1 01       	movw	r30, r2
    25e4:	e8 1b       	sub	r30, r24
    25e6:	f9 0b       	sbc	r31, r25
    25e8:	0e 17       	cp	r16, r30
    25ea:	1f 07       	cpc	r17, r31
    25ec:	19 f4       	brne	.+6      	; 0x25f4 <_Z10evalSticksh+0xe4>
      v = -v;
    25ee:	d0 95       	com	r29
    25f0:	c1 95       	neg	r28
    25f2:	df 4f       	sbci	r29, 0xFF	; 255

    calibratedStick[i] = v; //for show in expo
    25f4:	f3 01       	movw	r30, r6
    25f6:	c1 93       	st	Z+, r28
    25f8:	d1 93       	st	Z+, r29
    25fa:	3f 01       	movw	r6, r30
    if(!(v/16)) anaCenter |= 1<<(CONVERT_MODE((i+1))-1);
    25fc:	ce 01       	movw	r24, r28
    25fe:	0f 96       	adiw	r24, 0x0f	; 15
    2600:	8f 31       	cpi	r24, 0x1F	; 31
    2602:	91 05       	cpc	r25, r1
    2604:	08 f5       	brcc	.+66     	; 0x2648 <_Z10evalSticksh+0x138>
    2606:	04 30       	cpi	r16, 0x04	; 4
    2608:	11 05       	cpc	r17, r1
    260a:	b4 f4       	brge	.+44     	; 0x2638 <_Z10evalSticksh+0x128>
    260c:	e0 91 82 12 	lds	r30, 0x1282
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	ee 0f       	add	r30, r30
    2614:	ff 1f       	adc	r31, r31
    2616:	ee 0f       	add	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	e0 0f       	add	r30, r16
    261c:	f1 1f       	adc	r31, r17
    261e:	ee 59       	subi	r30, 0x9E	; 158
    2620:	f9 4f       	sbci	r31, 0xF9	; 249
    2622:	e4 91       	lpm	r30, Z+
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	31 97       	sbiw	r30, 0x01	; 1
    2628:	95 01       	movw	r18, r10
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <_Z10evalSticksh+0x120>
    262c:	22 0f       	add	r18, r18
    262e:	33 1f       	adc	r19, r19
    2630:	ea 95       	dec	r30
    2632:	e2 f7       	brpl	.-8      	; 0x262c <_Z10evalSticksh+0x11c>
    2634:	f9 01       	movw	r30, r18
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <_Z10evalSticksh+0x136>
    2638:	f5 01       	movw	r30, r10
    263a:	00 2e       	mov	r0, r16
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <_Z10evalSticksh+0x132>
    263e:	ee 0f       	add	r30, r30
    2640:	ff 1f       	adc	r31, r31
    2642:	0a 94       	dec	r0
    2644:	e2 f7       	brpl	.-8      	; 0x263e <_Z10evalSticksh+0x12e>
    2646:	ce 2a       	or	r12, r30


    if (i < NUM_STICKS) { //only do this for sticks
    2648:	3d 2d       	mov	r19, r13
    264a:	34 30       	cpi	r19, 0x04	; 4
    264c:	08 f0       	brcs	.+2      	; 0x2650 <_Z10evalSticksh+0x140>
    264e:	51 c0       	rjmp	.+162    	; 0x26f2 <_Z10evalSticksh+0x1e2>
      if (!s_noStickInputs && (isFunctionActive(FUNC_TRAINER) || isFunctionActive(FUNC_TRAINER_RUD+i))) {
    2650:	80 91 6c 15 	lds	r24, 0x156C
    2654:	88 23       	and	r24, r24
    2656:	09 f0       	breq	.+2      	; 0x265a <_Z10evalSticksh+0x14a>
    2658:	4c c0       	rjmp	.+152    	; 0x26f2 <_Z10evalSticksh+0x1e2>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z16isFunctionActiveh>
    2660:	88 23       	and	r24, r24
    2662:	39 f4       	brne	.+14     	; 0x2672 <_Z10evalSticksh+0x162>
    2664:	8d 2d       	mov	r24, r13
    2666:	8e 5f       	subi	r24, 0xFE	; 254
    2668:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z16isFunctionActiveh>
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <_Z10evalSticksh+0x162>
    2670:	40 c0       	rjmp	.+128    	; 0x26f2 <_Z10evalSticksh+0x1e2>
        // trainer mode
        TrainerMix* td = &g_eeGeneral.trainer.mix[i];
        if (td->mode) {
    2672:	f8 01       	movw	r30, r16
    2674:	ee 0f       	add	r30, r30
    2676:	ff 1f       	adc	r31, r31
    2678:	e8 58       	subi	r30, 0x88	; 136
    267a:	fd 4e       	sbci	r31, 0xED	; 237
    267c:	d0 80       	ld	r13, Z
    267e:	8d 2d       	mov	r24, r13
    2680:	80 7c       	andi	r24, 0xC0	; 192
    2682:	b9 f1       	breq	.+110    	; 0x26f2 <_Z10evalSticksh+0x1e2>
          uint8_t chStud = td->srcChn;
    2684:	ed 2d       	mov	r30, r13
    2686:	ef 73       	andi	r30, 0x3F	; 63
          int32_t vStud  = (g_ppmIns[chStud]- g_eeGeneral.trainer.calib[chStud]);
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	df 01       	movw	r26, r30
    268c:	aa 0f       	add	r26, r26
    268e:	bb 1f       	adc	r27, r27
    2690:	a2 58       	subi	r26, 0x82	; 130
    2692:	b7 4e       	sbci	r27, 0xE7	; 231
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	e0 59       	subi	r30, 0x90	; 144
    269a:	fd 4e       	sbci	r31, 0xED	; 237
    269c:	6d 91       	ld	r22, X+
    269e:	7c 91       	ld	r23, X
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	68 1b       	sub	r22, r24
    26a6:	79 0b       	sbc	r23, r25
    26a8:	88 27       	eor	r24, r24
    26aa:	77 fd       	sbrc	r23, 7
    26ac:	80 95       	com	r24
    26ae:	98 2f       	mov	r25, r24
          vStud *= td->studWeight ;
    26b0:	f7 01       	movw	r30, r14
    26b2:	20 ad       	ldd	r18, Z+56	; 0x38
    26b4:	33 27       	eor	r19, r19
    26b6:	27 fd       	sbrc	r18, 7
    26b8:	30 95       	com	r19
    26ba:	43 2f       	mov	r20, r19
    26bc:	53 2f       	mov	r21, r19
    26be:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
          vStud /= 50;
    26c2:	22 e3       	ldi	r18, 0x32	; 50
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	50 e0       	ldi	r21, 0x00	; 0
    26ca:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
          switch (td->mode) {
    26ce:	d2 94       	swap	r13
    26d0:	d6 94       	lsr	r13
    26d2:	d6 94       	lsr	r13
    26d4:	a3 e0       	ldi	r26, 0x03	; 3
    26d6:	da 22       	and	r13, r26
    26d8:	8d 2d       	mov	r24, r13
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	81 30       	cpi	r24, 0x01	; 1
    26de:	91 05       	cpc	r25, r1
    26e0:	21 f0       	breq	.+8      	; 0x26ea <_Z10evalSticksh+0x1da>
    26e2:	82 30       	cpi	r24, 0x02	; 2
    26e4:	91 05       	cpc	r25, r1
    26e6:	29 f4       	brne	.+10     	; 0x26f2 <_Z10evalSticksh+0x1e2>
    26e8:	03 c0       	rjmp	.+6      	; 0x26f0 <_Z10evalSticksh+0x1e0>
            case 1: v += vStud;   break; // add-mode
    26ea:	c2 0f       	add	r28, r18
    26ec:	d3 1f       	adc	r29, r19
    26ee:	01 c0       	rjmp	.+2      	; 0x26f2 <_Z10evalSticksh+0x1e2>
            case 2: v  = vStud;   break; // subst-mode
    26f0:	e9 01       	movw	r28, r18
      if(d && (i==ELE_STICK || i==AIL_STICK))
        v = int32_t(v)*g_model.swashR.value*RESX/(int32_t(d)*100);
#endif

    }
    anas[i] = v; //set values for mixer
    26f2:	f4 01       	movw	r30, r8
    26f4:	c1 93       	st	Z+, r28
    26f6:	d1 93       	st	Z+, r29
    26f8:	4f 01       	movw	r8, r30
    26fa:	0f 5f       	subi	r16, 0xFF	; 255
    26fc:	1f 4f       	sbci	r17, 0xFF	; 255
  }
#endif

  uint8_t anaCenter = 0;

  for(uint8_t i=0; i<NUM_STICKS+NUM_POTS; i++) {
    26fe:	07 30       	cpi	r16, 0x07	; 7
    2700:	11 05       	cpc	r17, r1
    2702:	09 f0       	breq	.+2      	; 0x2706 <_Z10evalSticksh+0x1f6>
    2704:	2c cf       	rjmp	.-424    	; 0x255e <_Z10evalSticksh+0x4e>
    }
    anas[i] = v; //set values for mixer
  }

  /* EXPOs */
  applyExpos(anas, phase);
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	97 e1       	ldi	r25, 0x17	; 23
    270a:	65 2d       	mov	r22, r5
    270c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z10applyExposPih>

  /* TRIMs */
  evalTrims(phase);
    2710:	85 2d       	mov	r24, r5
    2712:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <_Z9evalTrimsh>

  return anaCenter;
}
    2716:	8c 2d       	mov	r24, r12
    2718:	df 91       	pop	r29
    271a:	cf 91       	pop	r28
    271c:	1f 91       	pop	r17
    271e:	0f 91       	pop	r16
    2720:	ff 90       	pop	r15
    2722:	ef 90       	pop	r14
    2724:	df 90       	pop	r13
    2726:	cf 90       	pop	r12
    2728:	bf 90       	pop	r11
    272a:	af 90       	pop	r10
    272c:	9f 90       	pop	r9
    272e:	8f 90       	pop	r8
    2730:	7f 90       	pop	r7
    2732:	6f 90       	pop	r6
    2734:	5f 90       	pop	r5
    2736:	3f 90       	pop	r3
    2738:	2f 90       	pop	r2
    273a:	08 95       	ret

0000273c <_Z13evalFunctionsv>:

uint16_t active_functions = 0; // current max = 16 functions

void evalFunctions()
{
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	0f 93       	push	r16
    2742:	1f 93       	push	r17
    2744:	cf 93       	push	r28
    2746:	df 93       	push	r29
    2748:	cb ef       	ldi	r28, 0xFB	; 251
    274a:	d4 e1       	ldi	r29, 0x14	; 20
  assert(sizeof(active_functions)*8 >= FUNC_LAST);

  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch && sd->func) {
      uint16_t mask = (1 << (sd->func-1));
    274c:	a1 e0       	ldi	r26, 0x01	; 1
    274e:	ea 2e       	mov	r14, r26
    2750:	f1 2c       	mov	r15, r1
{
  assert(sizeof(active_functions)*8 >= FUNC_LAST);

  for (uint8_t i=0; i<NUM_FSW; i++) {
    FuncSwData *sd = &g_model.funcSw[i];
    if (sd->swtch && sd->func) {
    2752:	88 81       	ld	r24, Y
    2754:	88 23       	and	r24, r24
    2756:	09 f1       	breq	.+66     	; 0x279a <_Z13evalFunctionsv+0x5e>
    2758:	09 81       	ldd	r16, Y+1	; 0x01
    275a:	00 23       	and	r16, r16
    275c:	f1 f0       	breq	.+60     	; 0x279a <_Z13evalFunctionsv+0x5e>
      uint16_t mask = (1 << (sd->func-1));
    275e:	10 e0       	ldi	r17, 0x00	; 0
    2760:	01 50       	subi	r16, 0x01	; 1
    2762:	10 40       	sbci	r17, 0x00	; 0
    2764:	97 01       	movw	r18, r14
    2766:	02 c0       	rjmp	.+4      	; 0x276c <_Z13evalFunctionsv+0x30>
    2768:	22 0f       	add	r18, r18
    276a:	33 1f       	adc	r19, r19
    276c:	0a 95       	dec	r16
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <_Z13evalFunctionsv+0x2c>
    2770:	89 01       	movw	r16, r18
      if (getSwitch(sd->swtch, 0))
    2772:	60 e0       	ldi	r22, 0x00	; 0
    2774:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    2778:	20 91 7c 18 	lds	r18, 0x187C
    277c:	30 91 7d 18 	lds	r19, 0x187D
    2780:	88 23       	and	r24, r24
    2782:	19 f0       	breq	.+6      	; 0x278a <_Z13evalFunctionsv+0x4e>
        active_functions |= mask;
    2784:	02 2b       	or	r16, r18
    2786:	13 2b       	or	r17, r19
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <_Z13evalFunctionsv+0x56>
      else
        active_functions &= (~mask);
    278a:	00 95       	com	r16
    278c:	10 95       	com	r17
    278e:	02 23       	and	r16, r18
    2790:	13 23       	and	r17, r19
    2792:	10 93 7d 18 	sts	0x187D, r17
    2796:	00 93 7c 18 	sts	0x187C, r16
    279a:	22 96       	adiw	r28, 0x02	; 2

void evalFunctions()
{
  assert(sizeof(active_functions)*8 >= FUNC_LAST);

  for (uint8_t i=0; i<NUM_FSW; i++) {
    279c:	35 e1       	ldi	r19, 0x15	; 21
    279e:	c3 31       	cpi	r28, 0x13	; 19
    27a0:	d3 07       	cpc	r29, r19
    27a2:	b9 f6       	brne	.-82     	; 0x2752 <_Z13evalFunctionsv+0x16>
        active_functions |= mask;
      else
        active_functions &= (~mask);
    }
  }
}
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	1f 91       	pop	r17
    27aa:	0f 91       	pop	r16
    27ac:	ff 90       	pop	r15
    27ae:	ef 90       	pop	r14
    27b0:	08 95       	ret

000027b2 <_Z6perOutPih>:

void perOut(int16_t *chanOut, uint8_t phase)
{
    27b2:	2f 92       	push	r2
    27b4:	3f 92       	push	r3
    27b6:	4f 92       	push	r4
    27b8:	5f 92       	push	r5
    27ba:	6f 92       	push	r6
    27bc:	7f 92       	push	r7
    27be:	8f 92       	push	r8
    27c0:	9f 92       	push	r9
    27c2:	af 92       	push	r10
    27c4:	bf 92       	push	r11
    27c6:	cf 92       	push	r12
    27c8:	df 92       	push	r13
    27ca:	ef 92       	push	r14
    27cc:	ff 92       	push	r15
    27ce:	0f 93       	push	r16
    27d0:	1f 93       	push	r17
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	61 97       	sbiw	r28, 0x11	; 17
    27dc:	0f b6       	in	r0, 0x3f	; 63
    27de:	f8 94       	cli
    27e0:	de bf       	out	0x3e, r29	; 62
    27e2:	0f be       	out	0x3f, r0	; 63
    27e4:	cd bf       	out	0x3d, r28	; 61
    27e6:	89 87       	std	Y+9, r24	; 0x09
    27e8:	9a 87       	std	Y+10, r25	; 0x0a
    27ea:	06 2f       	mov	r16, r22
  uint8_t anaCenter = evalSticks(phase);
    27ec:	86 2f       	mov	r24, r22
    27ee:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z10evalSticksh>

  //===========BEEP CENTER================
  anaCenter &= g_model.beepANACenter;
    27f2:	90 91 9b 12 	lds	r25, 0x129B
    27f6:	98 23       	and	r25, r24
  if(((bpanaCenter ^ anaCenter) & anaCenter)) beepWarn1();
    27f8:	80 91 9a 17 	lds	r24, 0x179A
    27fc:	80 95       	com	r24
    27fe:	89 23       	and	r24, r25
    2800:	31 f0       	breq	.+12     	; 0x280e <_Z6perOutPih+0x5c>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    2802:	80 91 73 15 	lds	r24, 0x1573
    2806:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    280a:	84 e6       	ldi	r24, 0x64	; 100
    280c:	87 bd       	out	0x27, r24	; 39
  bpanaCenter = anaCenter;
    280e:	90 93 9a 17 	sts	0x179A, r25

  anas[MIX_MAX-1]  = RESX;     // MAX
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	94 e0       	ldi	r25, 0x04	; 4
    2816:	90 93 0f 17 	sts	0x170F, r25
    281a:	80 93 0e 17 	sts	0x170E, r24
  anas[MIX_FULL-1] = RESX;     // FULL
    281e:	90 93 11 17 	sts	0x1711, r25
    2822:	80 93 10 17 	sts	0x1710, r24
          break;
      }
  }
#endif

  if (s_noStickInputs) {
    2826:	80 91 6c 15 	lds	r24, 0x156C
    282a:	88 23       	and	r24, r24
    282c:	09 f4       	brne	.+2      	; 0x2830 <_Z6perOutPih+0x7e>
    282e:	40 c0       	rjmp	.+128    	; 0x28b0 <_Z6perOutPih+0xfe>
    for (uint8_t i=0; i<NUM_STICKS; i++) {
      if (!IS_THROTTLE(i)) {
    2830:	80 91 82 12 	lds	r24, 0x1282
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	81 70       	andi	r24, 0x01	; 1
    2838:	90 70       	andi	r25, 0x00	; 0
    283a:	22 e0       	ldi	r18, 0x02	; 2
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	28 1b       	sub	r18, r24
    2840:	39 0b       	sbc	r19, r25
    2842:	e0 e0       	ldi	r30, 0x00	; 0
    2844:	f7 e1       	ldi	r31, 0x17	; 23
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	28 17       	cp	r18, r24
    284c:	39 07       	cpc	r19, r25
    284e:	11 f0       	breq	.+4      	; 0x2854 <_Z6perOutPih+0xa2>
        anas[i]  = 0;
    2850:	11 82       	std	Z+1, r1	; 0x01
    2852:	10 82       	st	Z, r1
    2854:	01 96       	adiw	r24, 0x01	; 1
    2856:	32 96       	adiw	r30, 0x02	; 2
      }
  }
#endif

  if (s_noStickInputs) {
    for (uint8_t i=0; i<NUM_STICKS; i++) {
    2858:	84 30       	cpi	r24, 0x04	; 4
    285a:	91 05       	cpc	r25, r1
    285c:	b1 f7       	brne	.-20     	; 0x284a <_Z6perOutPih+0x98>
      if (!IS_THROTTLE(i)) {
        anas[i]  = 0;
      }
    }
    for (uint8_t i=0; i<NUM_PPM; i++) anas[i+PPM_BASE] = 0;
    285e:	10 92 19 17 	sts	0x1719, r1
    2862:	10 92 18 17 	sts	0x1718, r1
    2866:	10 92 1b 17 	sts	0x171B, r1
    286a:	10 92 1a 17 	sts	0x171A, r1
    286e:	10 92 1d 17 	sts	0x171D, r1
    2872:	10 92 1c 17 	sts	0x171C, r1
    2876:	10 92 1f 17 	sts	0x171F, r1
    287a:	10 92 1e 17 	sts	0x171E, r1
    287e:	10 92 21 17 	sts	0x1721, r1
    2882:	10 92 20 17 	sts	0x1720, r1
    2886:	10 92 23 17 	sts	0x1723, r1
    288a:	10 92 22 17 	sts	0x1722, r1
    288e:	10 92 25 17 	sts	0x1725, r1
    2892:	10 92 24 17 	sts	0x1724, r1
    2896:	10 92 27 17 	sts	0x1727, r1
    289a:	10 92 26 17 	sts	0x1726, r1
    289e:	24 e5       	ldi	r18, 0x54	; 84
    28a0:	37 e1       	ldi	r19, 0x17	; 23
    28a2:	3a 83       	std	Y+2, r19	; 0x02
    28a4:	29 83       	std	Y+1, r18	; 0x01
    28a6:	28 e2       	ldi	r18, 0x28	; 40
    28a8:	37 e1       	ldi	r19, 0x17	; 23
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    28aa:	e9 81       	ldd	r30, Y+1	; 0x01
    28ac:	fa 81       	ldd	r31, Y+2	; 0x02
    28ae:	42 c0       	rjmp	.+132    	; 0x2934 <_Z6perOutPih+0x182>
    28b0:	ee e7       	ldi	r30, 0x7E	; 126
    28b2:	f8 e1       	ldi	r31, 0x18	; 24
    28b4:	20 e7       	ldi	r18, 0x70	; 112
    28b6:	32 e1       	ldi	r19, 0x12	; 18
    28b8:	a8 e1       	ldi	r26, 0x18	; 24
    28ba:	b7 e1       	ldi	r27, 0x17	; 23
    28bc:	bd 01       	movw	r22, r26
      }
    }
    for (uint8_t i=0; i<NUM_PPM; i++) anas[i+PPM_BASE] = 0;
  }
  else {
    for (uint8_t i=0; i<NUM_CAL_PPM; i++)       anas[i+PPM_BASE] = (g_ppmIns[i] - g_eeGeneral.trainer.calib[i])*2; // add ppm channels
    28be:	81 91       	ld	r24, Z+
    28c0:	91 91       	ld	r25, Z+
    28c2:	d9 01       	movw	r26, r18
    28c4:	4d 91       	ld	r20, X+
    28c6:	5d 91       	ld	r21, X+
    28c8:	9d 01       	movw	r18, r26
    28ca:	84 1b       	sub	r24, r20
    28cc:	95 0b       	sbc	r25, r21
    28ce:	88 0f       	add	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	db 01       	movw	r26, r22
    28d4:	8d 93       	st	X+, r24
    28d6:	9d 93       	st	X+, r25
    28d8:	bd 01       	movw	r22, r26
    28da:	b8 e1       	ldi	r27, 0x18	; 24
    28dc:	e6 38       	cpi	r30, 0x86	; 134
    28de:	fb 07       	cpc	r31, r27
    28e0:	71 f7       	brne	.-36     	; 0x28be <_Z6perOutPih+0x10c>
    for (uint8_t i=NUM_CAL_PPM; i<NUM_PPM; i++) anas[i+PPM_BASE] = g_ppmIns[i]*2; // add ppm channels
    28e2:	80 91 86 18 	lds	r24, 0x1886
    28e6:	90 91 87 18 	lds	r25, 0x1887
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	90 93 21 17 	sts	0x1721, r25
    28f2:	80 93 20 17 	sts	0x1720, r24
    28f6:	80 91 88 18 	lds	r24, 0x1888
    28fa:	90 91 89 18 	lds	r25, 0x1889
    28fe:	88 0f       	add	r24, r24
    2900:	99 1f       	adc	r25, r25
    2902:	90 93 23 17 	sts	0x1723, r25
    2906:	80 93 22 17 	sts	0x1722, r24
    290a:	80 91 8a 18 	lds	r24, 0x188A
    290e:	90 91 8b 18 	lds	r25, 0x188B
    2912:	88 0f       	add	r24, r24
    2914:	99 1f       	adc	r25, r25
    2916:	90 93 25 17 	sts	0x1725, r25
    291a:	80 93 24 17 	sts	0x1724, r24
    291e:	80 91 8c 18 	lds	r24, 0x188C
    2922:	90 91 8d 18 	lds	r25, 0x188D
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	90 93 27 17 	sts	0x1727, r25
    292e:	80 93 26 17 	sts	0x1726, r24
    2932:	b5 cf       	rjmp	.-150    	; 0x289e <_Z6perOutPih+0xec>
  }
  
  for (uint8_t i=CHOUT_BASE; i<NUM_XCHNRAW; i++) anas[i] = chans[i-CHOUT_BASE]; // other mixes previous outputs
    2934:	41 91       	ld	r20, Z+
    2936:	51 91       	ld	r21, Z+
    2938:	61 91       	ld	r22, Z+
    293a:	71 91       	ld	r23, Z+
    293c:	d9 01       	movw	r26, r18
    293e:	4d 93       	st	X+, r20
    2940:	5d 93       	st	X+, r21
    2942:	9d 01       	movw	r18, r26
    2944:	b7 e1       	ldi	r27, 0x17	; 23
    2946:	ec 39       	cpi	r30, 0x9C	; 156
    2948:	fb 07       	cpc	r31, r27
    294a:	a1 f7       	brne	.-24     	; 0x2934 <_Z6perOutPih+0x182>

  if(tick10ms) trace(); //trace thr 0..32  (/32)
    294c:	80 91 7a 15 	lds	r24, 0x157A
    2950:	88 23       	and	r24, r24
    2952:	11 f0       	breq	.+4      	; 0x2958 <_Z6perOutPih+0x1a6>
    2954:	0e 94 2b 11 	call	0x2256	; 0x2256 <_Z5tracev>

  memset(chans,0,sizeof(chans));        // All outputs to 0
    2958:	80 e4       	ldi	r24, 0x40	; 64
    295a:	e4 e5       	ldi	r30, 0x54	; 84
    295c:	f7 e1       	ldi	r31, 0x17	; 23
    295e:	df 01       	movw	r26, r30
    2960:	1d 92       	st	X+, r1
    2962:	8a 95       	dec	r24
    2964:	e9 f7       	brne	.-6      	; 0x2960 <_Z6perOutPih+0x1ae>

    //========== MIXER LOOP ===============
    mixWarning = 0;
    2966:	10 92 7b 18 	sts	0x187B, r1
    296a:	eb e5       	ldi	r30, 0x5B	; 91
    296c:	f8 e1       	ldi	r31, 0x18	; 24
    296e:	fe 83       	std	Y+6, r31	; 0x06
    2970:	ed 83       	std	Y+5, r30	; 0x05
    2972:	3b ed       	ldi	r19, 0xDB	; 219
    2974:	a3 2e       	mov	r10, r19
    2976:	37 e1       	ldi	r19, 0x17	; 23
    2978:	b3 2e       	mov	r11, r19
    297a:	2b e9       	ldi	r18, 0x9B	; 155
    297c:	22 2e       	mov	r2, r18
    297e:	27 e1       	ldi	r18, 0x17	; 23
    2980:	32 2e       	mov	r3, r18
    for(uint8_t i=0;i<MAX_MIXERS;i++){
    2982:	1b 82       	std	Y+3, r1	; 0x03
              act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                  ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
          }

          if(((diff>0) && (v<(act[i]/DEL_MULT))) || ((diff<0) && (v>(act[i]/DEL_MULT)))) act[i]=(int32_t)v*DEL_MULT; //deal with overflow
          v = act[i]/DEL_MULT;
    2984:	41 2c       	mov	r4, r1
    2986:	91 e0       	ldi	r25, 0x01	; 1
    2988:	59 2e       	mov	r5, r25
    298a:	61 2c       	mov	r6, r1
    298c:	71 2c       	mov	r7, r1
    298e:	20 2f       	mov	r18, r16
    2990:	30 e0       	ldi	r19, 0x00	; 0
        if (md->phase > 0) {
          if (phase+1 != md->phase)
            continue;
        }
        else {
          if (phase+1 == -md->phase)
    2992:	2f 5f       	subi	r18, 0xFF	; 255
    2994:	3f 4f       	sbci	r19, 0xFF	; 255
    2996:	38 87       	std	Y+8, r19	; 0x08
    2998:	2f 83       	std	Y+7, r18	; 0x07
    299a:	45 01       	movw	r8, r10
  memset(chans,0,sizeof(chans));        // All outputs to 0

    //========== MIXER LOOP ===============
    mixWarning = 0;
    for(uint8_t i=0;i<MAX_MIXERS;i++){
      MixData *md = mixaddress( i ) ;
    299c:	8b 81       	ldd	r24, Y+3	; 0x03
    299e:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    29a2:	9d 87       	std	Y+13, r25	; 0x0d
    29a4:	8c 87       	std	Y+12, r24	; 0x0c

      if((md->destCh==0) || (md->destCh>NUM_CHNOUT)) break;
    29a6:	dc 01       	movw	r26, r24
    29a8:	8c 91       	ld	r24, X
    29aa:	8f 71       	andi	r24, 0x1F	; 31
    29ac:	89 f4       	brne	.+34     	; 0x29d0 <_Z6perOutPih+0x21e>
    29ae:	85 ef       	ldi	r24, 0xF5	; 245
    29b0:	28 2e       	mov	r2, r24
    29b2:	88 e1       	ldi	r24, 0x18	; 24
    29b4:	38 2e       	mov	r3, r24
    29b6:	0b e8       	ldi	r16, 0x8B	; 139
    29b8:	60 2e       	mov	r6, r16
    29ba:	02 e1       	ldi	r16, 0x12	; 18
    29bc:	70 2e       	mov	r7, r16
    29be:	39 85       	ldd	r19, Y+9	; 0x09
    29c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    29c2:	83 2f       	mov	r24, r19
    29c4:	92 2f       	mov	r25, r18
    29c6:	9c 83       	std	Y+4, r25	; 0x04
    29c8:	8b 83       	std	Y+3, r24	; 0x03
        if (diff && (md->speedUp || md->speedDown)) {
          //rate = steps/sec => 32*1024/100*md->speedUp/Down
          //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
          //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
          if(tick10ms) {
              int32_t rate = (int32_t)DEL_MULT*2048*100;
    29ca:	44 24       	eor	r4, r4
    29cc:	55 24       	eor	r5, r5
    29ce:	94 c2       	rjmp	.+1320   	; 0x2ef8 <_Z6perOutPih+0x746>
    //========== MIXER LOOP ===============
    mixWarning = 0;
    for(uint8_t i=0;i<MAX_MIXERS;i++){
      MixData *md = mixaddress( i ) ;

      if((md->destCh==0) || (md->destCh>NUM_CHNOUT)) break;
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	81 31       	cpi	r24, 0x11	; 17
    29d4:	91 05       	cpc	r25, r1
    29d6:	5c f7       	brge	.-42     	; 0x29ae <_Z6perOutPih+0x1fc>

      if (md->phase != 0) {
    29d8:	ec 85       	ldd	r30, Y+12	; 0x0c
    29da:	fd 85       	ldd	r31, Y+13	; 0x0d
    29dc:	27 81       	ldd	r18, Z+7	; 0x07
    29de:	82 2f       	mov	r24, r18
    29e0:	80 7f       	andi	r24, 0xF0	; 240
    29e2:	d1 f0       	breq	.+52     	; 0x2a18 <_Z6perOutPih+0x266>
        if (md->phase > 0) {
    29e4:	25 95       	asr	r18
    29e6:	25 95       	asr	r18
    29e8:	25 95       	asr	r18
    29ea:	25 95       	asr	r18
    29ec:	82 2f       	mov	r24, r18
    29ee:	99 27       	eor	r25, r25
    29f0:	87 fd       	sbrc	r24, 7
    29f2:	90 95       	com	r25
    29f4:	12 16       	cp	r1, r18
    29f6:	3c f4       	brge	.+14     	; 0x2a06 <_Z6perOutPih+0x254>
          if (phase+1 != md->phase)
    29f8:	2f 81       	ldd	r18, Y+7	; 0x07
    29fa:	38 85       	ldd	r19, Y+8	; 0x08
    29fc:	28 17       	cp	r18, r24
    29fe:	39 07       	cpc	r19, r25
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <_Z6perOutPih+0x252>
    2a02:	65 c2       	rjmp	.+1226   	; 0x2ece <_Z6perOutPih+0x71c>
    2a04:	09 c0       	rjmp	.+18     	; 0x2a18 <_Z6perOutPih+0x266>
            continue;
        }
        else {
          if (phase+1 == -md->phase)
    2a06:	90 95       	com	r25
    2a08:	81 95       	neg	r24
    2a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a0c:	4f 81       	ldd	r20, Y+7	; 0x07
    2a0e:	58 85       	ldd	r21, Y+8	; 0x08
    2a10:	48 17       	cp	r20, r24
    2a12:	59 07       	cpc	r21, r25
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <_Z6perOutPih+0x266>
    2a16:	5b c2       	rjmp	.+1206   	; 0x2ece <_Z6perOutPih+0x71c>
      //Notice 0 = NC switch means not used -> always on line
      int16_t v  = 0;
      uint8_t swTog;

      //swOn[i]=false;
      if(!getSwitch(md->swtch,1)){ // switch on?  if no switch selected => on
    2a18:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a1a:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a1c:	13 96       	adiw	r26, 0x03	; 3
    2a1e:	8c 91       	ld	r24, X
    2a20:	61 e0       	ldi	r22, 0x01	; 1
    2a22:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    2a26:	ed 81       	ldd	r30, Y+5	; 0x05
    2a28:	fe 81       	ldd	r31, Y+6	; 0x06
    2a2a:	90 81       	ld	r25, Z
    2a2c:	88 23       	and	r24, r24
    2a2e:	c9 f4       	brne	.+50     	; 0x2a62 <_Z6perOutPih+0x2b0>
        swTog = swOn[i];
    2a30:	29 2f       	mov	r18, r25
        swOn[i] = false;
    2a32:	10 82       	st	Z, r1
        if(md->srcRaw!=MIX_MAX && md->srcRaw!=MIX_FULL) continue;// if not MAX or FULL - next loop
    2a34:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a36:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a38:	11 96       	adiw	r26, 0x01	; 1
    2a3a:	9c 91       	ld	r25, X
    2a3c:	11 97       	sbiw	r26, 0x01	; 1
    2a3e:	89 2f       	mov	r24, r25
    2a40:	88 50       	subi	r24, 0x08	; 8
    2a42:	82 30       	cpi	r24, 0x02	; 2
    2a44:	08 f0       	brcs	.+2      	; 0x2a48 <_Z6perOutPih+0x296>
    2a46:	43 c2       	rjmp	.+1158   	; 0x2ece <_Z6perOutPih+0x71c>
        if(md->mltpx==MLTPX_REP) continue; // if switch is off and REPLACE then off
    2a48:	17 96       	adiw	r26, 0x07	; 7
    2a4a:	8c 91       	ld	r24, X
    2a4c:	17 97       	sbiw	r26, 0x07	; 7
    2a4e:	8e 70       	andi	r24, 0x0E	; 14
    2a50:	84 30       	cpi	r24, 0x04	; 4
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <_Z6perOutPih+0x2a4>
    2a54:	3c c2       	rjmp	.+1144   	; 0x2ece <_Z6perOutPih+0x71c>
        v = (md->srcRaw == MIX_FULL ? -RESX : 0); // switch is off and it is either MAX=0 or FULL=-512
    2a56:	99 30       	cpi	r25, 0x09	; 9
    2a58:	09 f0       	breq	.+2      	; 0x2a5c <_Z6perOutPih+0x2aa>
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <_Z6perOutPih+0x328>
    2a5c:	00 e0       	ldi	r16, 0x00	; 0
    2a5e:	1c ef       	ldi	r17, 0xFC	; 252
    2a60:	3e c0       	rjmp	.+124    	; 0x2ade <_Z6perOutPih+0x32c>
      }
      else {
        swTog = !swOn[i];
    2a62:	21 e0       	ldi	r18, 0x01	; 1
    2a64:	91 11       	cpse	r25, r1
    2a66:	20 e0       	ldi	r18, 0x00	; 0
        swOn[i] = true;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	ed 81       	ldd	r30, Y+5	; 0x05
    2a6c:	fe 81       	ldd	r31, Y+6	; 0x06
    2a6e:	80 83       	st	Z, r24
        uint8_t k = md->srcRaw-1;
    2a70:	ac 85       	ldd	r26, Y+12	; 0x0c
    2a72:	bd 85       	ldd	r27, Y+13	; 0x0d
    2a74:	11 96       	adiw	r26, 0x01	; 1
    2a76:	3c 91       	ld	r19, X
    2a78:	11 97       	sbiw	r26, 0x01	; 1
    2a7a:	31 50       	subi	r19, 0x01	; 1
        v = anas[k]; //Switch is on. MAX=FULL=512 or value.
    2a7c:	83 2f       	mov	r24, r19
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	fc 01       	movw	r30, r24
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	e0 50       	subi	r30, 0x00	; 0
    2a88:	f9 4e       	sbci	r31, 0xE9	; 233
    2a8a:	00 81       	ld	r16, Z
    2a8c:	11 81       	ldd	r17, Z+1	; 0x01
        if(k>=CHOUT_BASE && (k<i)) v = chans[k]; // if we've already calculated the value - take it instead // anas[i+CHOUT_BASE] = chans[i]
    2a8e:	34 31       	cpi	r19, 0x14	; 20
    2a90:	60 f0       	brcs	.+24     	; 0x2aaa <_Z6perOutPih+0x2f8>
    2a92:	bb 81       	ldd	r27, Y+3	; 0x03
    2a94:	3b 17       	cp	r19, r27
    2a96:	48 f4       	brcc	.+18     	; 0x2aaa <_Z6perOutPih+0x2f8>
    2a98:	fc 01       	movw	r30, r24
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ee 0f       	add	r30, r30
    2aa0:	ff 1f       	adc	r31, r31
    2aa2:	ec 5a       	subi	r30, 0xAC	; 172
    2aa4:	f8 4e       	sbci	r31, 0xE8	; 232
    2aa6:	00 81       	ld	r16, Z
    2aa8:	11 81       	ldd	r17, Z+1	; 0x01
        if(md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
    2aaa:	ec 85       	ldd	r30, Y+12	; 0x0c
    2aac:	fd 85       	ldd	r31, Y+13	; 0x0d
    2aae:	80 81       	ld	r24, Z
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	90 7e       	andi	r25, 0xE0	; 224
    2ab4:	a1 f0       	breq	.+40     	; 0x2ade <_Z6perOutPih+0x32c>
    2ab6:	82 95       	swap	r24
    2ab8:	86 95       	lsr	r24
    2aba:	87 70       	andi	r24, 0x07	; 7
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	50 e0       	ldi	r21, 0x00	; 0
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <_Z6perOutPih+0x318>
    2ac6:	44 0f       	add	r20, r20
    2ac8:	55 1f       	adc	r21, r21
    2aca:	8a 95       	dec	r24
    2acc:	e2 f7       	brpl	.-8      	; 0x2ac6 <_Z6perOutPih+0x314>
    2ace:	30 91 7b 18 	lds	r19, 0x187B
    2ad2:	34 2b       	or	r19, r20
    2ad4:	30 93 7b 18 	sts	0x187B, r19
    2ad8:	02 c0       	rjmp	.+4      	; 0x2ade <_Z6perOutPih+0x32c>
      if(!getSwitch(md->swtch,1)){ // switch on?  if no switch selected => on
        swTog = swOn[i];
        swOn[i] = false;
        if(md->srcRaw!=MIX_MAX && md->srcRaw!=MIX_FULL) continue;// if not MAX or FULL - next loop
        if(md->mltpx==MLTPX_REP) continue; // if switch is off and REPLACE then off
        v = (md->srcRaw == MIX_FULL ? -RESX : 0); // switch is off and it is either MAX=0 or FULL=-512
    2ada:	00 e0       	ldi	r16, 0x00	; 0
    2adc:	10 e0       	ldi	r17, 0x00	; 0
        if(k>=CHOUT_BASE && (k<i)) v = chans[k]; // if we've already calculated the value - take it instead // anas[i+CHOUT_BASE] = chans[i]
        if(md->mixWarn) mixWarning |= 1<<(md->mixWarn-1); // Mix warning
      }

      //========== INPUT OFFSET ===============
      if(md->sOffset) v += calc100toRESX(md->sOffset);
    2ade:	ac 85       	ldd	r26, Y+12	; 0x0c
    2ae0:	bd 85       	ldd	r27, Y+13	; 0x0d
    2ae2:	18 96       	adiw	r26, 0x08	; 8
    2ae4:	8c 91       	ld	r24, X
    2ae6:	18 97       	sbiw	r26, 0x08	; 8
    2ae8:	88 23       	and	r24, r24
    2aea:	31 f0       	breq	.+12     	; 0x2af8 <_Z6perOutPih+0x346>
    2aec:	2b 87       	std	Y+11, r18	; 0x0b
    2aee:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z13calc100toRESXa>
    2af2:	08 0f       	add	r16, r24
    2af4:	19 1f       	adc	r17, r25
    2af6:	2b 85       	ldd	r18, Y+11	; 0x0b

      //========== DELAY and PAUSE ===============
      if (md->speedUp || md->speedDown || md->delayUp || md->delayDown)  // there are delay values
    2af8:	ec 85       	ldd	r30, Y+12	; 0x0c
    2afa:	fd 85       	ldd	r31, Y+13	; 0x0d
    2afc:	86 81       	ldd	r24, Z+6	; 0x06
    2afe:	88 23       	and	r24, r24
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <_Z6perOutPih+0x358>
    2b02:	85 81       	ldd	r24, Z+5	; 0x05
    2b04:	88 23       	and	r24, r24
    2b06:	09 f4       	brne	.+2      	; 0x2b0a <_Z6perOutPih+0x358>
    2b08:	5b c1       	rjmp	.+694    	; 0x2dc0 <_Z6perOutPih+0x60e>
      {
#define DEL_MULT 256

        int16_t diff = v-act[i]/DEL_MULT;
    2b0a:	d4 01       	movw	r26, r8
    2b0c:	6d 91       	ld	r22, X+
    2b0e:	7d 91       	ld	r23, X+
    2b10:	8d 91       	ld	r24, X+
    2b12:	9c 91       	ld	r25, X
    2b14:	13 97       	sbiw	r26, 0x03	; 3

        if(swTog) {
    2b16:	22 23       	and	r18, r18
    2b18:	79 f4       	brne	.+30     	; 0x2b38 <_Z6perOutPih+0x386>
      //========== DELAY and PAUSE ===============
      if (md->speedUp || md->speedDown || md->delayUp || md->delayDown)  // there are delay values
      {
#define DEL_MULT 256

        int16_t diff = v-act[i]/DEL_MULT;
    2b1a:	a3 01       	movw	r20, r6
    2b1c:	92 01       	movw	r18, r4
    2b1e:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2b22:	50 95       	com	r21
    2b24:	40 95       	com	r20
    2b26:	30 95       	com	r19
    2b28:	21 95       	neg	r18
    2b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2c:	4f 4f       	sbci	r20, 0xFF	; 255
    2b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b30:	58 01       	movw	r10, r16
    2b32:	a2 0e       	add	r10, r18
    2b34:	b3 1e       	adc	r11, r19
    2b36:	5d c0       	rjmp	.+186    	; 0x2bf2 <_Z6perOutPih+0x440>

        if(swTog) {
            //need to know which "v" will give "anas".
            //curves(v)*weight/100 -> anas
            // v * weight / 100 = anas => anas*100/weight = v
          if(md->mltpx==MLTPX_REP)
    2b38:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b3a:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b3c:	87 81       	ldd	r24, Z+7	; 0x07
    2b3e:	8e 70       	andi	r24, 0x0E	; 14
    2b40:	84 30       	cpi	r24, 0x04	; 4
    2b42:	59 f5       	brne	.+86     	; 0x2b9a <_Z6perOutPih+0x3e8>
          {
              act[i] = (int32_t)anas[md->destCh-1+CHOUT_BASE]*DEL_MULT;
    2b44:	e0 81       	ld	r30, Z
    2b46:	ef 71       	andi	r30, 0x1F	; 31
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	ee 0f       	add	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	ea 5d       	subi	r30, 0xDA	; 218
    2b50:	f8 4e       	sbci	r31, 0xE8	; 232
    2b52:	60 81       	ld	r22, Z
    2b54:	71 81       	ldd	r23, Z+1	; 0x01
    2b56:	88 27       	eor	r24, r24
    2b58:	77 fd       	sbrc	r23, 7
    2b5a:	80 95       	com	r24
    2b5c:	98 2f       	mov	r25, r24
              act[i] *=100;
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	34 e6       	ldi	r19, 0x64	; 100
    2b62:	40 e0       	ldi	r20, 0x00	; 0
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    2b6a:	d4 01       	movw	r26, r8
    2b6c:	6d 93       	st	X+, r22
    2b6e:	7d 93       	st	X+, r23
    2b70:	8d 93       	st	X+, r24
    2b72:	9c 93       	st	X, r25
    2b74:	13 97       	sbiw	r26, 0x03	; 3
              if(md->weight) act[i] /= md->weight;
    2b76:	ec 85       	ldd	r30, Y+12	; 0x0c
    2b78:	fd 85       	ldd	r31, Y+13	; 0x0d
    2b7a:	22 81       	ldd	r18, Z+2	; 0x02
    2b7c:	22 23       	and	r18, r18
    2b7e:	69 f0       	breq	.+26     	; 0x2b9a <_Z6perOutPih+0x3e8>
    2b80:	33 27       	eor	r19, r19
    2b82:	27 fd       	sbrc	r18, 7
    2b84:	30 95       	com	r19
    2b86:	43 2f       	mov	r20, r19
    2b88:	53 2f       	mov	r21, r19
    2b8a:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2b8e:	d4 01       	movw	r26, r8
    2b90:	2d 93       	st	X+, r18
    2b92:	3d 93       	st	X+, r19
    2b94:	4d 93       	st	X+, r20
    2b96:	5c 93       	st	X, r21
    2b98:	13 97       	sbiw	r26, 0x03	; 3
          }
          diff = v-act[i]/DEL_MULT;
    2b9a:	f4 01       	movw	r30, r8
    2b9c:	60 81       	ld	r22, Z
    2b9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ba0:	82 81       	ldd	r24, Z+2	; 0x02
    2ba2:	93 81       	ldd	r25, Z+3	; 0x03
    2ba4:	a3 01       	movw	r20, r6
    2ba6:	92 01       	movw	r18, r4
    2ba8:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2bac:	50 95       	com	r21
    2bae:	40 95       	com	r20
    2bb0:	30 95       	com	r19
    2bb2:	21 95       	neg	r18
    2bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb6:	4f 4f       	sbci	r20, 0xFF	; 255
    2bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bba:	58 01       	movw	r10, r16
    2bbc:	a2 0e       	add	r10, r18
    2bbe:	b3 1e       	adc	r11, r19
          if(diff) sDelay[i] = (diff<0 ? md->delayUp :  md->delayDown) * 100;
    2bc0:	a1 14       	cp	r10, r1
    2bc2:	b1 04       	cpc	r11, r1
    2bc4:	b1 f0       	breq	.+44     	; 0x2bf2 <_Z6perOutPih+0x440>
    2bc6:	ac 85       	ldd	r26, Y+12	; 0x0c
    2bc8:	bd 85       	ldd	r27, Y+13	; 0x0d
    2bca:	15 96       	adiw	r26, 0x05	; 5
    2bcc:	2c 91       	ld	r18, X
    2bce:	15 97       	sbiw	r26, 0x05	; 5
    2bd0:	b7 fe       	sbrs	r11, 7
    2bd2:	22 95       	swap	r18
    2bd4:	2f 70       	andi	r18, 0x0F	; 15
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	e4 e6       	ldi	r30, 0x64	; 100
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	2e 9f       	mul	r18, r30
    2bde:	c0 01       	movw	r24, r0
    2be0:	2f 9f       	mul	r18, r31
    2be2:	90 0d       	add	r25, r0
    2be4:	3e 9f       	mul	r19, r30
    2be6:	90 0d       	add	r25, r0
    2be8:	11 24       	eor	r1, r1
    2bea:	d1 01       	movw	r26, r2
    2bec:	11 96       	adiw	r26, 0x01	; 1
    2bee:	9c 93       	st	X, r25
    2bf0:	8e 93       	st	-X, r24
        }

        if (sDelay[i]){ // perform delay
    2bf2:	f1 01       	movw	r30, r2
    2bf4:	80 81       	ld	r24, Z
    2bf6:	91 81       	ldd	r25, Z+1	; 0x01
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	99 f0       	breq	.+38     	; 0x2c22 <_Z6perOutPih+0x470>
          if (tick10ms) sDelay[i]--;
    2bfc:	20 91 7a 15 	lds	r18, 0x157A
    2c00:	22 23       	and	r18, r18
    2c02:	19 f0       	breq	.+6      	; 0x2c0a <_Z6perOutPih+0x458>
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	91 83       	std	Z+1, r25	; 0x01
    2c08:	80 83       	st	Z, r24
          if (sDelay[i] != 0) {
    2c0a:	d1 01       	movw	r26, r2
    2c0c:	8d 91       	ld	r24, X+
    2c0e:	9c 91       	ld	r25, X
    2c10:	11 97       	sbiw	r26, 0x01	; 1
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	31 f0       	breq	.+12     	; 0x2c22 <_Z6perOutPih+0x470>
            v = act[i]/DEL_MULT; // Stay in old position until delay over
    2c16:	f4 01       	movw	r30, r8
    2c18:	60 81       	ld	r22, Z
    2c1a:	71 81       	ldd	r23, Z+1	; 0x01
    2c1c:	82 81       	ldd	r24, Z+2	; 0x02
    2c1e:	93 81       	ldd	r25, Z+3	; 0x03
    2c20:	bb c0       	rjmp	.+374    	; 0x2d98 <_Z6perOutPih+0x5e6>
            diff = 0;
          }
        }

        if (diff && (md->speedUp || md->speedDown)) {
    2c22:	a1 14       	cp	r10, r1
    2c24:	b1 04       	cpc	r11, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <_Z6perOutPih+0x478>
    2c28:	cb c0       	rjmp	.+406    	; 0x2dc0 <_Z6perOutPih+0x60e>
    2c2a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c2c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c2e:	16 96       	adiw	r26, 0x06	; 6
    2c30:	8c 91       	ld	r24, X
    2c32:	16 97       	sbiw	r26, 0x06	; 6
    2c34:	88 23       	and	r24, r24
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <_Z6perOutPih+0x488>
    2c38:	b5 c0       	rjmp	.+362    	; 0x2da4 <_Z6perOutPih+0x5f2>
          //rate = steps/sec => 32*1024/100*md->speedUp/Down
          //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
          //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
          if(tick10ms) {
    2c3a:	80 91 7a 15 	lds	r24, 0x157A
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <_Z6perOutPih+0x492>
    2c42:	76 c0       	rjmp	.+236    	; 0x2d30 <_Z6perOutPih+0x57e>
              int32_t rate = (int32_t)DEL_MULT*2048*100;
              if(md->weight) rate /= abs(md->weight);
    2c44:	12 96       	adiw	r26, 0x02	; 2
    2c46:	2c 91       	ld	r18, X
    2c48:	12 97       	sbiw	r26, 0x02	; 2
    2c4a:	22 23       	and	r18, r18
    2c4c:	a9 f0       	breq	.+42     	; 0x2c78 <_Z6perOutPih+0x4c6>
    2c4e:	33 27       	eor	r19, r19
    2c50:	27 fd       	sbrc	r18, 7
    2c52:	30 95       	com	r19
    2c54:	37 ff       	sbrs	r19, 7
    2c56:	03 c0       	rjmp	.+6      	; 0x2c5e <_Z6perOutPih+0x4ac>
    2c58:	30 95       	com	r19
    2c5a:	21 95       	neg	r18
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	44 27       	eor	r20, r20
    2c60:	37 fd       	sbrc	r19, 7
    2c62:	40 95       	com	r20
    2c64:	54 2f       	mov	r21, r20
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	70 e0       	ldi	r23, 0x00	; 0
    2c6a:	80 e2       	ldi	r24, 0x20	; 32
    2c6c:	93 e0       	ldi	r25, 0x03	; 3
    2c6e:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2c72:	69 01       	movw	r12, r18
    2c74:	7a 01       	movw	r14, r20
    2c76:	06 c0       	rjmp	.+12     	; 0x2c84 <_Z6perOutPih+0x4d2>
        if (diff && (md->speedUp || md->speedDown)) {
          //rate = steps/sec => 32*1024/100*md->speedUp/Down
          //act[i] += diff>0 ? (32768)/((int16_t)100*md->speedUp) : -(32768)/((int16_t)100*md->speedDown);
          //-100..100 => 32768 ->  100*83886/256 = 32768,   For MAX we divide by 2 sincde it's asymmetrical
          if(tick10ms) {
              int32_t rate = (int32_t)DEL_MULT*2048*100;
    2c78:	c1 2c       	mov	r12, r1
    2c7a:	d1 2c       	mov	r13, r1
    2c7c:	70 e2       	ldi	r23, 0x20	; 32
    2c7e:	e7 2e       	mov	r14, r23
    2c80:	73 e0       	ldi	r23, 0x03	; 3
    2c82:	f7 2e       	mov	r15, r23
    2c84:	ec 85       	ldd	r30, Y+12	; 0x0c
    2c86:	fd 85       	ldd	r31, Y+13	; 0x0d
    2c88:	86 81       	ldd	r24, Z+6	; 0x06
              if(md->weight) rate /= abs(md->weight);
              act[i] = (diff>0) ? ((md->speedUp>0)   ? act[i]+(rate)/((int16_t)100*md->speedUp)   :  (int32_t)v*DEL_MULT) :
                                  ((md->speedDown>0) ? act[i]-(rate)/((int16_t)100*md->speedDown) :  (int32_t)v*DEL_MULT) ;
    2c8a:	1a 14       	cp	r1, r10
    2c8c:	1b 04       	cpc	r1, r11
    2c8e:	fc f4       	brge	.+62     	; 0x2cce <_Z6perOutPih+0x51c>
    2c90:	8f 70       	andi	r24, 0x0F	; 15
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	00 97       	sbiw	r24, 0x00	; 0
    2c96:	f1 f1       	breq	.+124    	; 0x2d14 <_Z6perOutPih+0x562>
    2c98:	44 e6       	ldi	r20, 0x64	; 100
    2c9a:	50 e0       	ldi	r21, 0x00	; 0
    2c9c:	84 9f       	mul	r24, r20
    2c9e:	90 01       	movw	r18, r0
    2ca0:	85 9f       	mul	r24, r21
    2ca2:	30 0d       	add	r19, r0
    2ca4:	94 9f       	mul	r25, r20
    2ca6:	30 0d       	add	r19, r0
    2ca8:	11 24       	eor	r1, r1
    2caa:	44 27       	eor	r20, r20
    2cac:	37 fd       	sbrc	r19, 7
    2cae:	40 95       	com	r20
    2cb0:	54 2f       	mov	r21, r20
    2cb2:	c7 01       	movw	r24, r14
    2cb4:	b6 01       	movw	r22, r12
    2cb6:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2cba:	f4 01       	movw	r30, r8
    2cbc:	80 81       	ld	r24, Z
    2cbe:	91 81       	ldd	r25, Z+1	; 0x01
    2cc0:	a2 81       	ldd	r26, Z+2	; 0x02
    2cc2:	b3 81       	ldd	r27, Z+3	; 0x03
    2cc4:	28 0f       	add	r18, r24
    2cc6:	39 1f       	adc	r19, r25
    2cc8:	4a 1f       	adc	r20, r26
    2cca:	5b 1f       	adc	r21, r27
    2ccc:	2c c0       	rjmp	.+88     	; 0x2d26 <_Z6perOutPih+0x574>
    2cce:	82 95       	swap	r24
    2cd0:	8f 70       	andi	r24, 0x0F	; 15
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	00 97       	sbiw	r24, 0x00	; 0
    2cd6:	f1 f0       	breq	.+60     	; 0x2d14 <_Z6perOutPih+0x562>
    2cd8:	44 e6       	ldi	r20, 0x64	; 100
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	84 9f       	mul	r24, r20
    2cde:	90 01       	movw	r18, r0
    2ce0:	85 9f       	mul	r24, r21
    2ce2:	30 0d       	add	r19, r0
    2ce4:	94 9f       	mul	r25, r20
    2ce6:	30 0d       	add	r19, r0
    2ce8:	11 24       	eor	r1, r1
    2cea:	44 27       	eor	r20, r20
    2cec:	37 fd       	sbrc	r19, 7
    2cee:	40 95       	com	r20
    2cf0:	54 2f       	mov	r21, r20
    2cf2:	c7 01       	movw	r24, r14
    2cf4:	b6 01       	movw	r22, r12
    2cf6:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2cfa:	69 01       	movw	r12, r18
    2cfc:	7a 01       	movw	r14, r20
    2cfe:	d4 01       	movw	r26, r8
    2d00:	2d 91       	ld	r18, X+
    2d02:	3d 91       	ld	r19, X+
    2d04:	4d 91       	ld	r20, X+
    2d06:	5c 91       	ld	r21, X
    2d08:	13 97       	sbiw	r26, 0x03	; 3
    2d0a:	2c 19       	sub	r18, r12
    2d0c:	3d 09       	sbc	r19, r13
    2d0e:	4e 09       	sbc	r20, r14
    2d10:	5f 09       	sbc	r21, r15
    2d12:	09 c0       	rjmp	.+18     	; 0x2d26 <_Z6perOutPih+0x574>
    2d14:	98 01       	movw	r18, r16
    2d16:	44 27       	eor	r20, r20
    2d18:	37 fd       	sbrc	r19, 7
    2d1a:	40 95       	com	r20
    2d1c:	54 2f       	mov	r21, r20
    2d1e:	54 2f       	mov	r21, r20
    2d20:	43 2f       	mov	r20, r19
    2d22:	32 2f       	mov	r19, r18
    2d24:	22 27       	eor	r18, r18
    2d26:	f4 01       	movw	r30, r8
    2d28:	20 83       	st	Z, r18
    2d2a:	31 83       	std	Z+1, r19	; 0x01
    2d2c:	42 83       	std	Z+2, r20	; 0x02
    2d2e:	53 83       	std	Z+3, r21	; 0x03
    2d30:	d4 01       	movw	r26, r8
    2d32:	6d 91       	ld	r22, X+
    2d34:	7d 91       	ld	r23, X+
    2d36:	8d 91       	ld	r24, X+
    2d38:	9c 91       	ld	r25, X
    2d3a:	13 97       	sbiw	r26, 0x03	; 3
    2d3c:	68 01       	movw	r12, r16
    2d3e:	ee 24       	eor	r14, r14
    2d40:	d7 fc       	sbrc	r13, 7
    2d42:	e0 94       	com	r14
    2d44:	fe 2c       	mov	r15, r14
          }

          if(((diff>0) && (v<(act[i]/DEL_MULT))) || ((diff<0) && (v>(act[i]/DEL_MULT)))) act[i]=(int32_t)v*DEL_MULT; //deal with overflow
    2d46:	1a 14       	cp	r1, r10
    2d48:	1b 04       	cpc	r1, r11
    2d4a:	54 f4       	brge	.+20     	; 0x2d60 <_Z6perOutPih+0x5ae>
    2d4c:	a3 01       	movw	r20, r6
    2d4e:	92 01       	movw	r18, r4
    2d50:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2d54:	c2 16       	cp	r12, r18
    2d56:	d3 06       	cpc	r13, r19
    2d58:	e4 06       	cpc	r14, r20
    2d5a:	f5 06       	cpc	r15, r21
    2d5c:	54 f0       	brlt	.+20     	; 0x2d72 <_Z6perOutPih+0x5c0>
    2d5e:	16 c0       	rjmp	.+44     	; 0x2d8c <_Z6perOutPih+0x5da>
    2d60:	a3 01       	movw	r20, r6
    2d62:	92 01       	movw	r18, r4
    2d64:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2d68:	2c 15       	cp	r18, r12
    2d6a:	3d 05       	cpc	r19, r13
    2d6c:	4e 05       	cpc	r20, r14
    2d6e:	5f 05       	cpc	r21, r15
    2d70:	6c f4       	brge	.+26     	; 0x2d8c <_Z6perOutPih+0x5da>
    2d72:	22 27       	eor	r18, r18
    2d74:	17 fd       	sbrc	r17, 7
    2d76:	20 95       	com	r18
    2d78:	32 2f       	mov	r19, r18
    2d7a:	32 2f       	mov	r19, r18
    2d7c:	21 2f       	mov	r18, r17
    2d7e:	10 2f       	mov	r17, r16
    2d80:	00 27       	eor	r16, r16
    2d82:	f4 01       	movw	r30, r8
    2d84:	00 83       	st	Z, r16
    2d86:	11 83       	std	Z+1, r17	; 0x01
    2d88:	22 83       	std	Z+2, r18	; 0x02
    2d8a:	33 83       	std	Z+3, r19	; 0x03
          v = act[i]/DEL_MULT;
    2d8c:	d4 01       	movw	r26, r8
    2d8e:	6d 91       	ld	r22, X+
    2d90:	7d 91       	ld	r23, X+
    2d92:	8d 91       	ld	r24, X+
    2d94:	9c 91       	ld	r25, X
    2d96:	13 97       	sbiw	r26, 0x03	; 3
    2d98:	a3 01       	movw	r20, r6
    2d9a:	92 01       	movw	r18, r4
    2d9c:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2da0:	89 01       	movw	r16, r18
    2da2:	0e c0       	rjmp	.+28     	; 0x2dc0 <_Z6perOutPih+0x60e>
        }
        else if (diff) {
          act[i]=(int32_t)v*DEL_MULT;
    2da4:	c8 01       	movw	r24, r16
    2da6:	aa 27       	eor	r26, r26
    2da8:	97 fd       	sbrc	r25, 7
    2daa:	a0 95       	com	r26
    2dac:	ba 2f       	mov	r27, r26
    2dae:	ba 2f       	mov	r27, r26
    2db0:	a9 2f       	mov	r26, r25
    2db2:	98 2f       	mov	r25, r24
    2db4:	88 27       	eor	r24, r24
    2db6:	f4 01       	movw	r30, r8
    2db8:	80 83       	st	Z, r24
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	a2 83       	std	Z+2, r26	; 0x02
    2dbe:	b3 83       	std	Z+3, r27	; 0x03
        }
      }

      //========== CURVES ===============
      if (md->curve)
    2dc0:	ac 85       	ldd	r26, Y+12	; 0x0c
    2dc2:	bd 85       	ldd	r27, Y+13	; 0x0d
    2dc4:	14 96       	adiw	r26, 0x04	; 4
    2dc6:	6c 91       	ld	r22, X
    2dc8:	14 97       	sbiw	r26, 0x04	; 4
    2dca:	66 23       	and	r22, r22
    2dcc:	31 f0       	breq	.+12     	; 0x2dda <_Z6perOutPih+0x628>
        v = applyCurve(v, md->curve, md->srcRaw);
    2dce:	c8 01       	movw	r24, r16
    2dd0:	11 96       	adiw	r26, 0x01	; 1
    2dd2:	4c 91       	ld	r20, X
    2dd4:	0e 94 b2 07 	call	0xf64	; 0xf64 <_Z10applyCurveihh>
    2dd8:	8c 01       	movw	r16, r24

      //========== TRIM ===============
      if((md->carryTrim==0) && (md->srcRaw>0) && (md->srcRaw<=4)) v += trims[md->srcRaw-1];  //  0 = Trim ON  =  Default
    2dda:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ddc:	fd 85       	ldd	r31, Y+13	; 0x0d
    2dde:	87 81       	ldd	r24, Z+7	; 0x07
    2de0:	80 fd       	sbrc	r24, 0
    2de2:	0e c0       	rjmp	.+28     	; 0x2e00 <_Z6perOutPih+0x64e>
    2de4:	e1 81       	ldd	r30, Z+1	; 0x01
    2de6:	ee 23       	and	r30, r30
    2de8:	59 f0       	breq	.+22     	; 0x2e00 <_Z6perOutPih+0x64e>
    2dea:	e5 30       	cpi	r30, 0x05	; 5
    2dec:	48 f4       	brcc	.+18     	; 0x2e00 <_Z6perOutPih+0x64e>
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	ee 0f       	add	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	e6 5b       	subi	r30, 0xB6	; 182
    2df6:	f8 4e       	sbci	r31, 0xE8	; 232
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	08 0f       	add	r16, r24
    2dfe:	19 1f       	adc	r17, r25

      //========== MULTIPLEX ===============
      int32_t dv = (int32_t)v*md->weight;
    2e00:	b8 01       	movw	r22, r16
    2e02:	88 27       	eor	r24, r24
    2e04:	77 fd       	sbrc	r23, 7
    2e06:	80 95       	com	r24
    2e08:	98 2f       	mov	r25, r24
    2e0a:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e0c:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e0e:	12 96       	adiw	r26, 0x02	; 2
    2e10:	2c 91       	ld	r18, X
    2e12:	12 97       	sbiw	r26, 0x02	; 2
    2e14:	33 27       	eor	r19, r19
    2e16:	27 fd       	sbrc	r18, 7
    2e18:	30 95       	com	r19
    2e1a:	43 2f       	mov	r20, r19
    2e1c:	53 2f       	mov	r21, r19
    2e1e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
      switch(md->mltpx){
    2e22:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e24:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e26:	27 81       	ldd	r18, Z+7	; 0x07
    2e28:	26 95       	lsr	r18
    2e2a:	27 70       	andi	r18, 0x07	; 7
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	21 30       	cpi	r18, 0x01	; 1
    2e30:	31 05       	cpc	r19, r1
    2e32:	89 f0       	breq	.+34     	; 0x2e56 <_Z6perOutPih+0x6a4>
    2e34:	e0 81       	ld	r30, Z
    2e36:	22 30       	cpi	r18, 0x02	; 2
    2e38:	31 05       	cpc	r19, r1
    2e3a:	a9 f5       	brne	.+106    	; 0x2ea6 <_Z6perOutPih+0x6f4>
        case MLTPX_REP:
          chans[md->destCh-1] = dv;
    2e3c:	ef 71       	andi	r30, 0x1F	; 31
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	ee 0f       	add	r30, r30
    2e42:	ff 1f       	adc	r31, r31
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	e0 5b       	subi	r30, 0xB0	; 176
    2e4a:	f8 4e       	sbci	r31, 0xE8	; 232
    2e4c:	60 83       	st	Z, r22
    2e4e:	71 83       	std	Z+1, r23	; 0x01
    2e50:	82 83       	std	Z+2, r24	; 0x02
    2e52:	93 83       	std	Z+3, r25	; 0x03
          break;
    2e54:	3c c0       	rjmp	.+120    	; 0x2ece <_Z6perOutPih+0x71c>
        case MLTPX_MUL:
          chans[md->destCh-1] *= dv/100l;
    2e56:	ac 85       	ldd	r26, Y+12	; 0x0c
    2e58:	bd 85       	ldd	r27, Y+13	; 0x0d
    2e5a:	2c 91       	ld	r18, X
    2e5c:	2f 71       	andi	r18, 0x1F	; 31
    2e5e:	c2 2e       	mov	r12, r18
    2e60:	dd 24       	eor	r13, r13
          chans[md->destCh-1] /= RESXl;
    2e62:	cc 0c       	add	r12, r12
    2e64:	dd 1c       	adc	r13, r13
    2e66:	cc 0c       	add	r12, r12
    2e68:	dd 1c       	adc	r13, r13
    2e6a:	e0 e5       	ldi	r30, 0x50	; 80
    2e6c:	f7 e1       	ldi	r31, 0x17	; 23
    2e6e:	ce 0e       	add	r12, r30
    2e70:	df 1e       	adc	r13, r31
      switch(md->mltpx){
        case MLTPX_REP:
          chans[md->destCh-1] = dv;
          break;
        case MLTPX_MUL:
          chans[md->destCh-1] *= dv/100l;
    2e72:	24 e6       	ldi	r18, 0x64	; 100
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2e7e:	d6 01       	movw	r26, r12
    2e80:	ed 90       	ld	r14, X+
    2e82:	fd 90       	ld	r15, X+
    2e84:	0d 91       	ld	r16, X+
    2e86:	1c 91       	ld	r17, X
    2e88:	13 97       	sbiw	r26, 0x03	; 3
    2e8a:	ca 01       	movw	r24, r20
    2e8c:	b9 01       	movw	r22, r18
    2e8e:	a8 01       	movw	r20, r16
    2e90:	97 01       	movw	r18, r14
    2e92:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
          chans[md->destCh-1] /= RESXl;
    2e96:	20 e0       	ldi	r18, 0x00	; 0
    2e98:	34 e0       	ldi	r19, 0x04	; 4
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2ea2:	f6 01       	movw	r30, r12
    2ea4:	10 c0       	rjmp	.+32     	; 0x2ec6 <_Z6perOutPih+0x714>
          break;
        default:  // MLTPX_ADD
          chans[md->destCh-1] += dv; //Mixer output add up to the line (dv + (dv>0 ? 100/2 : -100/2))/(100);
    2ea6:	ef 71       	andi	r30, 0x1F	; 31
    2ea8:	f0 e0       	ldi	r31, 0x00	; 0
    2eaa:	ee 0f       	add	r30, r30
    2eac:	ff 1f       	adc	r31, r31
    2eae:	ee 0f       	add	r30, r30
    2eb0:	ff 1f       	adc	r31, r31
    2eb2:	e0 5b       	subi	r30, 0xB0	; 176
    2eb4:	f8 4e       	sbci	r31, 0xE8	; 232
    2eb6:	20 81       	ld	r18, Z
    2eb8:	31 81       	ldd	r19, Z+1	; 0x01
    2eba:	42 81       	ldd	r20, Z+2	; 0x02
    2ebc:	53 81       	ldd	r21, Z+3	; 0x03
    2ebe:	26 0f       	add	r18, r22
    2ec0:	37 1f       	adc	r19, r23
    2ec2:	48 1f       	adc	r20, r24
    2ec4:	59 1f       	adc	r21, r25
    2ec6:	20 83       	st	Z, r18
    2ec8:	31 83       	std	Z+1, r19	; 0x01
    2eca:	42 83       	std	Z+2, r20	; 0x02
    2ecc:	53 83       	std	Z+3, r21	; 0x03

  memset(chans,0,sizeof(chans));        // All outputs to 0

    //========== MIXER LOOP ===============
    mixWarning = 0;
    for(uint8_t i=0;i<MAX_MIXERS;i++){
    2ece:	fb 81       	ldd	r31, Y+3	; 0x03
    2ed0:	ff 5f       	subi	r31, 0xFF	; 255
    2ed2:	fb 83       	std	Y+3, r31	; 0x03
    2ed4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ed6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ed8:	2f 5f       	subi	r18, 0xFF	; 255
    2eda:	3f 4f       	sbci	r19, 0xFF	; 255
    2edc:	3e 83       	std	Y+6, r19	; 0x06
    2ede:	2d 83       	std	Y+5, r18	; 0x05
    2ee0:	44 e0       	ldi	r20, 0x04	; 4
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	84 0e       	add	r8, r20
    2ee6:	95 1e       	adc	r9, r21
    2ee8:	62 e0       	ldi	r22, 0x02	; 2
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	26 0e       	add	r2, r22
    2eee:	37 1e       	adc	r3, r23
    2ef0:	f0 32       	cpi	r31, 0x20	; 32
    2ef2:	09 f0       	breq	.+2      	; 0x2ef6 <_Z6perOutPih+0x744>
    2ef4:	53 cd       	rjmp	.-1370   	; 0x299c <_Z6perOutPih+0x1ea>
    2ef6:	5b cd       	rjmp	.-1354   	; 0x29ae <_Z6perOutPih+0x1fc>
      // later we multiply by the limit (up to 100) and then we need to normalize
      // at the end chans[i] = chans[i]/100 =>  -1024..1024
      // interpolate value with min/max so we get smooth motion from center to stop
      // this limits based on v original values and min=-1024, max=1024  RESX=1024

      int32_t q = chans[i];// + (int32_t)g_model.limitData[i].offset*100; // offset before limit
    2ef8:	a9 81       	ldd	r26, Y+1	; 0x01
    2efa:	ba 81       	ldd	r27, Y+2	; 0x02
    2efc:	ed 90       	ld	r14, X+
    2efe:	fd 90       	ld	r15, X+
    2f00:	0d 91       	ld	r16, X+
    2f02:	1c 91       	ld	r17, X

      chans[i] /= 100; // chans back to -1024..1024
    2f04:	c8 01       	movw	r24, r16
    2f06:	b7 01       	movw	r22, r14
    2f08:	24 e6       	ldi	r18, 0x64	; 100
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	fa 81       	ldd	r31, Y+2	; 0x02
    2f18:	20 83       	st	Z, r18
    2f1a:	31 83       	std	Z+1, r19	; 0x01
    2f1c:	42 83       	std	Z+2, r20	; 0x02
    2f1e:	53 83       	std	Z+3, r21	; 0x03
      ex_chans[i] = chans[i]; //for getswitch
    2f20:	d1 01       	movw	r26, r2
    2f22:	2d 93       	st	X+, r18
    2f24:	3d 93       	st	X+, r19
    2f26:	1d 01       	movw	r2, r26
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    2f28:	f3 01       	movw	r30, r6
    2f2a:	e9 5c       	subi	r30, 0xC9	; 201
    2f2c:	fe 4f       	sbci	r31, 0xFE	; 254
      int32_t q = chans[i];// + (int32_t)g_model.limitData[i].offset*100; // offset before limit

      chans[i] /= 100; // chans back to -1024..1024
      ex_chans[i] = chans[i]; //for getswitch

      int16_t ofs = g_model.limitData[i].offset;
    2f2e:	80 81       	ld	r24, Z
    2f30:	91 81       	ldd	r25, Z+1	; 0x01
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    2f32:	f3 01       	movw	r30, r6
    2f34:	eb 5c       	subi	r30, 0xCB	; 203
    2f36:	fe 4f       	sbci	r31, 0xFE	; 254

      chans[i] /= 100; // chans back to -1024..1024
      ex_chans[i] = chans[i]; //for getswitch

      int16_t ofs = g_model.limitData[i].offset;
      int16_t lim_p = 10*(g_model.limitData[i].max+100);
    2f38:	30 81       	ld	r19, Z
    2f3a:	fa e0       	ldi	r31, 0x0A	; 10
    2f3c:	3f 02       	muls	r19, r31
    2f3e:	f0 01       	movw	r30, r0
    2f40:	11 24       	eor	r1, r1
    2f42:	e8 51       	subi	r30, 0x18	; 24
    2f44:	fc 4f       	sbci	r31, 0xFC	; 252
    2f46:	fe 83       	std	Y+6, r31	; 0x06
    2f48:	ed 83       	std	Y+5, r30	; 0x05
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    2f4a:	f3 01       	movw	r30, r6
    2f4c:	ec 5c       	subi	r30, 0xCC	; 204
    2f4e:	fe 4f       	sbci	r31, 0xFE	; 254
      chans[i] /= 100; // chans back to -1024..1024
      ex_chans[i] = chans[i]; //for getswitch

      int16_t ofs = g_model.limitData[i].offset;
      int16_t lim_p = 10*(g_model.limitData[i].max+100);
      int16_t lim_n = 10*(g_model.limitData[i].min-100); //multiply by 10 to get same range as ofs (-1000..1000)
    2f50:	20 81       	ld	r18, Z
    2f52:	3a e0       	ldi	r19, 0x0A	; 10
    2f54:	23 02       	muls	r18, r19
    2f56:	60 01       	movw	r12, r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	48 e1       	ldi	r20, 0x18	; 24
    2f5c:	5c ef       	ldi	r21, 0xFC	; 252
    2f5e:	c4 0e       	add	r12, r20
    2f60:	d5 1e       	adc	r13, r21
    2f62:	2d 81       	ldd	r18, Y+5	; 0x05
    2f64:	3e 81       	ldd	r19, Y+6	; 0x06
    2f66:	42 2f       	mov	r20, r18
    2f68:	23 2f       	mov	r18, r19
    2f6a:	6d 81       	ldd	r22, Y+5	; 0x05
    2f6c:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6e:	86 17       	cp	r24, r22
    2f70:	97 07       	cpc	r25, r23
    2f72:	14 f4       	brge	.+4      	; 0x2f78 <_Z6perOutPih+0x7c6>
    2f74:	48 2f       	mov	r20, r24
    2f76:	29 2f       	mov	r18, r25
    2f78:	a4 2e       	mov	r10, r20
    2f7a:	b2 2e       	mov	r11, r18
    2f7c:	ac 14       	cp	r10, r12
    2f7e:	bd 04       	cpc	r11, r13
    2f80:	0c f4       	brge	.+2      	; 0x2f84 <_Z6perOutPih+0x7d2>
    2f82:	56 01       	movw	r10, r12
      if(ofs>lim_p) ofs = lim_p;
      if(ofs<lim_n) ofs = lim_n;

      if(q) q = (q>0) ?
    2f84:	e1 14       	cp	r14, r1
    2f86:	f1 04       	cpc	r15, r1
    2f88:	01 05       	cpc	r16, r1
    2f8a:	11 05       	cpc	r17, r1
    2f8c:	c9 f1       	breq	.+114    	; 0x3000 <_Z6perOutPih+0x84e>
    2f8e:	c5 01       	movw	r24, r10
    2f90:	aa 27       	eor	r26, r26
    2f92:	97 fd       	sbrc	r25, 7
    2f94:	a0 95       	com	r26
    2f96:	ba 2f       	mov	r27, r26
    2f98:	8e 87       	std	Y+14, r24	; 0x0e
    2f9a:	9f 87       	std	Y+15, r25	; 0x0f
    2f9c:	a8 8b       	std	Y+16, r26	; 0x10
    2f9e:	b9 8b       	std	Y+17, r27	; 0x11
                q*((int32_t)lim_p-ofs)/100000 :
               -q*((int32_t)lim_n-ofs)/100000 ; //div by 100000 -> output = -1024..1024
    2fa0:	1e 14       	cp	r1, r14
    2fa2:	1f 04       	cpc	r1, r15
    2fa4:	10 06       	cpc	r1, r16
    2fa6:	11 06       	cpc	r1, r17
    2fa8:	84 f4       	brge	.+32     	; 0x2fca <_Z6perOutPih+0x818>
    2faa:	ad 81       	ldd	r26, Y+5	; 0x05
    2fac:	be 81       	ldd	r27, Y+6	; 0x06
    2fae:	bd 01       	movw	r22, r26
    2fb0:	88 27       	eor	r24, r24
    2fb2:	77 fd       	sbrc	r23, 7
    2fb4:	80 95       	com	r24
    2fb6:	98 2f       	mov	r25, r24
    2fb8:	2e 85       	ldd	r18, Y+14	; 0x0e
    2fba:	3f 85       	ldd	r19, Y+15	; 0x0f
    2fbc:	48 89       	ldd	r20, Y+16	; 0x10
    2fbe:	59 89       	ldd	r21, Y+17	; 0x11
    2fc0:	62 1b       	sub	r22, r18
    2fc2:	73 0b       	sbc	r23, r19
    2fc4:	84 0b       	sbc	r24, r20
    2fc6:	95 0b       	sbc	r25, r21
    2fc8:	0f c0       	rjmp	.+30     	; 0x2fe8 <_Z6perOutPih+0x836>
    2fca:	c6 01       	movw	r24, r12
    2fcc:	aa 27       	eor	r26, r26
    2fce:	97 fd       	sbrc	r25, 7
    2fd0:	a0 95       	com	r26
    2fd2:	ba 2f       	mov	r27, r26
    2fd4:	2e 85       	ldd	r18, Y+14	; 0x0e
    2fd6:	3f 85       	ldd	r19, Y+15	; 0x0f
    2fd8:	48 89       	ldd	r20, Y+16	; 0x10
    2fda:	59 89       	ldd	r21, Y+17	; 0x11
    2fdc:	28 1b       	sub	r18, r24
    2fde:	39 0b       	sbc	r19, r25
    2fe0:	4a 0b       	sbc	r20, r26
    2fe2:	5b 0b       	sbc	r21, r27
    2fe4:	ca 01       	movw	r24, r20
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	a8 01       	movw	r20, r16
    2fea:	97 01       	movw	r18, r14
    2fec:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    2ff0:	20 ea       	ldi	r18, 0xA0	; 160
    2ff2:	36 e8       	ldi	r19, 0x86	; 134
    2ff4:	41 e0       	ldi	r20, 0x01	; 1
    2ff6:	50 e0       	ldi	r21, 0x00	; 0
    2ff8:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    2ffc:	79 01       	movw	r14, r18
    2ffe:	8a 01       	movw	r16, r20

      q += calc1000toRESX(ofs);
    3000:	c5 01       	movw	r24, r10
    3002:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z14calc1000toRESXi>
    3006:	4c 01       	movw	r8, r24
    3008:	aa 24       	eor	r10, r10
    300a:	97 fc       	sbrc	r9, 7
    300c:	a0 94       	com	r10
    300e:	ba 2c       	mov	r11, r10
    3010:	8e 0c       	add	r8, r14
    3012:	9f 1c       	adc	r9, r15
    3014:	a0 1e       	adc	r10, r16
    3016:	b1 1e       	adc	r11, r17
      lim_p = calc1000toRESX(lim_p);
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	9e 81       	ldd	r25, Y+6	; 0x06
    301c:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z14calc1000toRESXi>
    3020:	8c 01       	movw	r16, r24
      lim_n = calc1000toRESX(lim_n);
    3022:	c6 01       	movw	r24, r12
    3024:	0e 94 93 06 	call	0xd26	; 0xd26 <_Z14calc1000toRESXi>
      if(q>lim_p) q = lim_p;
    3028:	98 01       	movw	r18, r16
    302a:	44 27       	eor	r20, r20
    302c:	37 fd       	sbrc	r19, 7
    302e:	40 95       	com	r20
    3030:	54 2f       	mov	r21, r20
                q*((int32_t)lim_p-ofs)/100000 :
               -q*((int32_t)lim_n-ofs)/100000 ; //div by 100000 -> output = -1024..1024

      q += calc1000toRESX(ofs);
      lim_p = calc1000toRESX(lim_p);
      lim_n = calc1000toRESX(lim_n);
    3032:	85 01       	movw	r16, r10
    3034:	74 01       	movw	r14, r8
    3036:	28 15       	cp	r18, r8
    3038:	39 05       	cpc	r19, r9
    303a:	4a 05       	cpc	r20, r10
    303c:	5b 05       	cpc	r21, r11
    303e:	14 f4       	brge	.+4      	; 0x3044 <_Z6perOutPih+0x892>
    3040:	79 01       	movw	r14, r18
    3042:	8a 01       	movw	r16, r20
      if(q>lim_p) q = lim_p;
      if(q<lim_n) q = lim_n;
    3044:	aa 27       	eor	r26, r26
    3046:	97 fd       	sbrc	r25, 7
    3048:	a0 95       	com	r26
    304a:	ba 2f       	mov	r27, r26
                q*((int32_t)lim_p-ofs)/100000 :
               -q*((int32_t)lim_n-ofs)/100000 ; //div by 100000 -> output = -1024..1024

      q += calc1000toRESX(ofs);
      lim_p = calc1000toRESX(lim_p);
      lim_n = calc1000toRESX(lim_n);
    304c:	e8 16       	cp	r14, r24
    304e:	f9 06       	cpc	r15, r25
    3050:	0a 07       	cpc	r16, r26
    3052:	1b 07       	cpc	r17, r27
    3054:	14 f4       	brge	.+4      	; 0x305a <_Z6perOutPih+0x8a8>
    3056:	7c 01       	movw	r14, r24
    3058:	8d 01       	movw	r16, r26
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    305a:	f3 01       	movw	r30, r6
    305c:	ea 5c       	subi	r30, 0xCA	; 202
    305e:	fe 4f       	sbci	r31, 0xFE	; 254
      q += calc1000toRESX(ofs);
      lim_p = calc1000toRESX(lim_p);
      lim_n = calc1000toRESX(lim_n);
      if(q>lim_p) q = lim_p;
      if(q<lim_n) q = lim_n;
      if(g_model.limitData[i].revert) q=-q;// finally do the reverse.
    3060:	80 81       	ld	r24, Z
    3062:	88 23       	and	r24, r24
    3064:	41 f0       	breq	.+16     	; 0x3076 <_Z6perOutPih+0x8c4>
    3066:	10 95       	com	r17
    3068:	00 95       	com	r16
    306a:	f0 94       	com	r15
    306c:	e0 94       	com	r14
    306e:	e1 1c       	adc	r14, r1
    3070:	f1 1c       	adc	r15, r1
    3072:	01 1d       	adc	r16, r1
    3074:	11 1d       	adc	r17, r1
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    3076:	bb e8       	ldi	r27, 0x8B	; 139
    3078:	cb 2e       	mov	r12, r27
    307a:	b2 e1       	ldi	r27, 0x12	; 18
    307c:	db 2e       	mov	r13, r27
    307e:	c4 0c       	add	r12, r4
    3080:	d5 1c       	adc	r13, r5
    3082:	f6 01       	movw	r30, r12
    3084:	e0 5b       	subi	r30, 0xB0	; 176
    3086:	fd 4f       	sbci	r31, 0xFD	; 253
      lim_n = calc1000toRESX(lim_n);
      if(q>lim_p) q = lim_p;
      if(q<lim_n) q = lim_n;
      if(g_model.limitData[i].revert) q=-q;// finally do the reverse.

      if(g_model.safetySw[i].swtch)  //if safety sw available for channel check and replace val if needed
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	81 f0       	breq	.+32     	; 0x30ae <_Z6perOutPih+0x8fc>
          if(getSwitch(g_model.safetySw[i].swtch,0)) q = calc100toRESX(g_model.safetySw[i].val);
    308e:	60 e0       	ldi	r22, 0x00	; 0
    3090:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    3094:	88 23       	and	r24, r24
    3096:	59 f0       	breq	.+22     	; 0x30ae <_Z6perOutPih+0x8fc>
        active_functions &= (~mask);
    }
  }
}

void perOut(int16_t *chanOut, uint8_t phase)
    3098:	f6 01       	movw	r30, r12
    309a:	ef 5a       	subi	r30, 0xAF	; 175
    309c:	fd 4f       	sbci	r31, 0xFD	; 253
      if(q>lim_p) q = lim_p;
      if(q<lim_n) q = lim_n;
      if(g_model.limitData[i].revert) q=-q;// finally do the reverse.

      if(g_model.safetySw[i].swtch)  //if safety sw available for channel check and replace val if needed
          if(getSwitch(g_model.safetySw[i].swtch,0)) q = calc100toRESX(g_model.safetySw[i].val);
    309e:	80 81       	ld	r24, Z
    30a0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <_Z13calc100toRESXa>
    30a4:	7c 01       	movw	r14, r24
    30a6:	00 27       	eor	r16, r16
    30a8:	f7 fc       	sbrc	r15, 7
    30aa:	00 95       	com	r16
    30ac:	10 2f       	mov	r17, r16

      chanOut[i] = q; //copy consistent word to int-level
    30ae:	ab 81       	ldd	r26, Y+3	; 0x03
    30b0:	bc 81       	ldd	r27, Y+4	; 0x04
    30b2:	ed 92       	st	X+, r14
    30b4:	fd 92       	st	X+, r15
    30b6:	bc 83       	std	Y+4, r27	; 0x04
    30b8:	ab 83       	std	Y+3, r26	; 0x03
    30ba:	e9 81       	ldd	r30, Y+1	; 0x01
    30bc:	fa 81       	ldd	r31, Y+2	; 0x02
    30be:	34 96       	adiw	r30, 0x04	; 4
    30c0:	fa 83       	std	Y+2, r31	; 0x02
    30c2:	e9 83       	std	Y+1, r30	; 0x01
    30c4:	22 e0       	ldi	r18, 0x02	; 2
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	42 0e       	add	r4, r18
    30ca:	53 1e       	adc	r5, r19
    30cc:	45 e0       	ldi	r20, 0x05	; 5
    30ce:	50 e0       	ldi	r21, 0x00	; 0
    30d0:	64 0e       	add	r6, r20
    30d2:	75 1e       	adc	r7, r21
    if(mixWarning & 2) if(((tmr10ms&0xFF)== 64) || ((tmr10ms&0xFF)== 72)) beepWarn1();
    if(mixWarning & 4) if(((tmr10ms&0xFF)==128) || ((tmr10ms&0xFF)==136) || ((tmr10ms&0xFF)==144)) beepWarn1();
  } */

  //========== LIMITS ===============
  for (uint8_t i=0;i<NUM_CHNOUT;i++) {
    30d4:	50 e2       	ldi	r21, 0x20	; 32
    30d6:	45 16       	cp	r4, r21
    30d8:	51 04       	cpc	r5, r1
    30da:	09 f0       	breq	.+2      	; 0x30de <_Z6perOutPih+0x92c>
    30dc:	0d cf       	rjmp	.-486    	; 0x2ef8 <_Z6perOutPih+0x746>
      if(g_model.safetySw[i].swtch)  //if safety sw available for channel check and replace val if needed
          if(getSwitch(g_model.safetySw[i].swtch,0)) q = calc100toRESX(g_model.safetySw[i].val);

      chanOut[i] = q; //copy consistent word to int-level
  }
}
    30de:	61 96       	adiw	r28, 0x11	; 17
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	1f 91       	pop	r17
    30f0:	0f 91       	pop	r16
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	df 90       	pop	r13
    30f8:	cf 90       	pop	r12
    30fa:	bf 90       	pop	r11
    30fc:	af 90       	pop	r10
    30fe:	9f 90       	pop	r9
    3100:	8f 90       	pop	r8
    3102:	7f 90       	pop	r7
    3104:	6f 90       	pop	r6
    3106:	5f 90       	pop	r5
    3108:	4f 90       	pop	r4
    310a:	3f 90       	pop	r3
    310c:	2f 90       	pop	r2
    310e:	08 95       	ret

00003110 <_Z7perMainv>:
#ifdef DISPLAY_USER_DATA
char userDataDisplayBuf[TELEM_SCREEN_BUFFER_SIZE];
#endif

void perMain()
{
    3110:	3f 92       	push	r3
    3112:	4f 92       	push	r4
    3114:	5f 92       	push	r5
    3116:	6f 92       	push	r6
    3118:	7f 92       	push	r7
    311a:	8f 92       	push	r8
    311c:	9f 92       	push	r9
    311e:	af 92       	push	r10
    3120:	bf 92       	push	r11
    3122:	cf 92       	push	r12
    3124:	df 92       	push	r13
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	c9 56       	subi	r28, 0x69	; 105
    3138:	d0 40       	sbci	r29, 0x00	; 0
    313a:	0f b6       	in	r0, 0x3f	; 63
    313c:	f8 94       	cli
    313e:	de bf       	out	0x3e, r29	; 62
    3140:	0f be       	out	0x3f, r0	; 63
    3142:	cd bf       	out	0x3d, r28	; 61
  static uint16_t lastTMR;
  tick10ms = (get_tmr10ms() != lastTMR);
    3144:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    3148:	41 e0       	ldi	r20, 0x01	; 1
    314a:	20 91 aa 18 	lds	r18, 0x18AA
    314e:	30 91 ab 18 	lds	r19, 0x18AB
    3152:	82 17       	cp	r24, r18
    3154:	93 07       	cpc	r25, r19
    3156:	09 f4       	brne	.+2      	; 0x315a <_Z7perMainv+0x4a>
    3158:	40 e0       	ldi	r20, 0x00	; 0
    315a:	40 93 7a 15 	sts	0x157A, r20
  lastTMR = get_tmr10ms();
    315e:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    3162:	90 93 ab 18 	sts	0x18AB, r25
    3166:	80 93 aa 18 	sts	0x18AA, r24
#define MAX_ACT 0xffff
  static uint16_t fp_act[MAX_PHASES] = {0};
  static uint16_t delta = 0;
  static uint8_t s_fade_flight_phases = 0;
  static uint8_t s_last_phase = 255;
  uint8_t phase = getFlightPhase();
    316a:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    316e:	e8 2e       	mov	r14, r24

  if (s_last_phase != phase) {
    3170:	70 91 96 06 	lds	r23, 0x0696
    3174:	78 17       	cp	r23, r24
    3176:	09 f4       	brne	.+2      	; 0x317a <_Z7perMainv+0x6a>
    3178:	72 c0       	rjmp	.+228    	; 0x325e <_Z7perMainv+0x14e>
    317a:	e8 2f       	mov	r30, r24
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    if (s_last_phase == 255) {
    317e:	7f 3f       	cpi	r23, 0xFF	; 255
    3180:	49 f4       	brne	.+18     	; 0x3194 <_Z7perMainv+0x84>
      fp_act[phase] = MAX_ACT;
    3182:	ee 0f       	add	r30, r30
    3184:	ff 1f       	adc	r31, r31
    3186:	e0 56       	subi	r30, 0x60	; 96
    3188:	f7 4e       	sbci	r31, 0xE7	; 231
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	9f ef       	ldi	r25, 0xFF	; 255
    318e:	91 83       	std	Z+1, r25	; 0x01
    3190:	80 83       	st	Z, r24
    3192:	63 c0       	rjmp	.+198    	; 0x325a <_Z7perMainv+0x14a>
    }
    else {
      uint8_t fadeTime = max(g_model.phaseData[s_last_phase].fadeOut, g_model.phaseData[phase].fadeIn);
    3194:	27 2f       	mov	r18, r23
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	4d e0       	ldi	r20, 0x0D	; 13
    319a:	50 e0       	ldi	r21, 0x00	; 0
    319c:	24 9f       	mul	r18, r20
    319e:	d0 01       	movw	r26, r0
    31a0:	25 9f       	mul	r18, r21
    31a2:	b0 0d       	add	r27, r0
    31a4:	34 9f       	mul	r19, r20
    31a6:	b0 0d       	add	r27, r0
    31a8:	11 24       	eor	r1, r1
    31aa:	ae 5d       	subi	r26, 0xDE	; 222
    31ac:	ba 4e       	sbci	r27, 0xEA	; 234
    31ae:	6c 91       	ld	r22, X
    31b0:	62 95       	swap	r22
    31b2:	6f 70       	andi	r22, 0x0F	; 15
    31b4:	e4 9f       	mul	r30, r20
    31b6:	d0 01       	movw	r26, r0
    31b8:	e5 9f       	mul	r30, r21
    31ba:	b0 0d       	add	r27, r0
    31bc:	f4 9f       	mul	r31, r20
    31be:	b0 0d       	add	r27, r0
    31c0:	11 24       	eor	r1, r1
    31c2:	ae 5d       	subi	r26, 0xDE	; 222
    31c4:	ba 4e       	sbci	r27, 0xEA	; 234
    31c6:	8c 91       	ld	r24, X
    31c8:	8f 70       	andi	r24, 0x0F	; 15
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
    31ca:	86 17       	cp	r24, r22
    31cc:	18 f0       	brcs	.+6      	; 0x31d4 <_Z7perMainv+0xc4>
      if (fadeTime) {
    31ce:	88 23       	and	r24, r24
    31d0:	f9 f0       	breq	.+62     	; 0x3210 <_Z7perMainv+0x100>
    31d2:	68 2f       	mov	r22, r24
        s_fade_flight_phases |= (1<<s_last_phase) + (1<<phase);
    31d4:	21 e0       	ldi	r18, 0x01	; 1
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	a9 01       	movw	r20, r18
    31da:	0e 2c       	mov	r0, r14
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <_Z7perMainv+0xd2>
    31de:	44 0f       	add	r20, r20
    31e0:	55 1f       	adc	r21, r21
    31e2:	0a 94       	dec	r0
    31e4:	e2 f7       	brpl	.-8      	; 0x31de <_Z7perMainv+0xce>
    31e6:	02 c0       	rjmp	.+4      	; 0x31ec <_Z7perMainv+0xdc>
    31e8:	22 0f       	add	r18, r18
    31ea:	33 1f       	adc	r19, r19
    31ec:	7a 95       	dec	r23
    31ee:	e2 f7       	brpl	.-8      	; 0x31e8 <_Z7perMainv+0xd8>
    31f0:	24 0f       	add	r18, r20
    31f2:	90 91 9d 18 	lds	r25, 0x189D
    31f6:	92 2b       	or	r25, r18
    31f8:	90 93 9d 18 	sts	0x189D, r25
        delta = (MAX_ACT / 100) / fadeTime;
    31fc:	8f e8       	ldi	r24, 0x8F	; 143
    31fe:	92 e0       	ldi	r25, 0x02	; 2
    3200:	70 e0       	ldi	r23, 0x00	; 0
    3202:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    3206:	70 93 9f 18 	sts	0x189F, r23
    320a:	60 93 9e 18 	sts	0x189E, r22
    320e:	25 c0       	rjmp	.+74     	; 0x325a <_Z7perMainv+0x14a>
      }
      else {
        fp_act[s_last_phase] = 0;
    3210:	d9 01       	movw	r26, r18
    3212:	aa 0f       	add	r26, r26
    3214:	bb 1f       	adc	r27, r27
    3216:	a0 56       	subi	r26, 0x60	; 96
    3218:	b7 4e       	sbci	r27, 0xE7	; 231
    321a:	11 96       	adiw	r26, 0x01	; 1
    321c:	1c 92       	st	X, r1
    321e:	1e 92       	st	-X, r1
        fp_act[phase] = MAX_ACT;
    3220:	ee 0f       	add	r30, r30
    3222:	ff 1f       	adc	r31, r31
    3224:	e0 56       	subi	r30, 0x60	; 96
    3226:	f7 4e       	sbci	r31, 0xE7	; 231
    3228:	4f ef       	ldi	r20, 0xFF	; 255
    322a:	5f ef       	ldi	r21, 0xFF	; 255
    322c:	51 83       	std	Z+1, r21	; 0x01
    322e:	40 83       	st	Z, r20
        s_fade_flight_phases &= ~((1<<s_last_phase) + (1<<phase));
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	ac 01       	movw	r20, r24
    3236:	0e 2c       	mov	r0, r14
    3238:	02 c0       	rjmp	.+4      	; 0x323e <_Z7perMainv+0x12e>
    323a:	44 0f       	add	r20, r20
    323c:	55 1f       	adc	r21, r21
    323e:	0a 94       	dec	r0
    3240:	e2 f7       	brpl	.-8      	; 0x323a <_Z7perMainv+0x12a>
    3242:	02 c0       	rjmp	.+4      	; 0x3248 <_Z7perMainv+0x138>
    3244:	88 0f       	add	r24, r24
    3246:	99 1f       	adc	r25, r25
    3248:	7a 95       	dec	r23
    324a:	e2 f7       	brpl	.-8      	; 0x3244 <_Z7perMainv+0x134>
    324c:	84 0f       	add	r24, r20
    324e:	80 95       	com	r24
    3250:	90 91 9d 18 	lds	r25, 0x189D
    3254:	98 23       	and	r25, r24
    3256:	90 93 9d 18 	sts	0x189D, r25
      }
    }
    s_last_phase = phase;
    325a:	e0 92 96 06 	sts	0x0696, r14
  }

  int16_t next_chans512[NUM_CHNOUT];

  if (s_fade_flight_phases) {
    325e:	80 91 9d 18 	lds	r24, 0x189D
    3262:	88 23       	and	r24, r24
    3264:	09 f4       	brne	.+2      	; 0x3268 <_Z7perMainv+0x158>
    3266:	a4 c0       	rjmp	.+328    	; 0x33b0 <_Z7perMainv+0x2a0>
    int32_t sum_chans512[NUM_CHNOUT] = {0};
    3268:	f1 e2       	ldi	r31, 0x21	; 33
    326a:	4f 2e       	mov	r4, r31
    326c:	51 2c       	mov	r5, r1
    326e:	4c 0e       	add	r4, r28
    3270:	5d 1e       	adc	r5, r29
    3272:	80 e4       	ldi	r24, 0x40	; 64
    3274:	d2 01       	movw	r26, r4
    3276:	1d 92       	st	X+, r1
    3278:	8a 95       	dec	r24
    327a:	e9 f7       	brne	.-6      	; 0x3276 <_Z7perMainv+0x166>
    327c:	e0 ea       	ldi	r30, 0xA0	; 160
    327e:	6e 2e       	mov	r6, r30
    3280:	e8 e1       	ldi	r30, 0x18	; 24
    3282:	7e 2e       	mov	r7, r30
    3284:	00 e0       	ldi	r16, 0x00	; 0
    3286:	10 e0       	ldi	r17, 0x00	; 0
    int32_t weight = 0;
    3288:	a5 96       	adiw	r28, 0x25	; 37
    328a:	1c ae       	std	Y+60, r1	; 0x3c
    328c:	1d ae       	std	Y+61, r1	; 0x3d
    328e:	1e ae       	std	Y+62, r1	; 0x3e
    3290:	1f ae       	std	Y+63, r1	; 0x3f
    3292:	a5 97       	sbiw	r28, 0x25	; 37
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(next_chans512, p);
    3294:	5e 01       	movw	r10, r28
    3296:	08 94       	sec
    3298:	a1 1c       	adc	r10, r1
    329a:	b1 1c       	adc	r11, r1
        perOut(next_chans512, p); // TODO temporary fix for issue 80. I think th9x has a better algorithm for dealing with it!
        // printf("perOut(%d - %d)=>%d\n", p, fp_act[p], next_chans512[2]);
        for (uint8_t i=0; i<NUM_CHNOUT; i++) {
          sum_chans512[i] += (int32_t)next_chans512[i] * fp_act[p];
    329c:	c2 01       	movw	r24, r4
    329e:	34 2c       	mov	r3, r4
    32a0:	f9 2e       	mov	r15, r25

  if (s_fade_flight_phases) {
    int32_t sum_chans512[NUM_CHNOUT] = {0};
    int32_t weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
    32a2:	80 91 9d 18 	lds	r24, 0x189D
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	00 2e       	mov	r0, r16
    32aa:	02 c0       	rjmp	.+4      	; 0x32b0 <_Z7perMainv+0x1a0>
    32ac:	95 95       	asr	r25
    32ae:	87 95       	ror	r24
    32b0:	0a 94       	dec	r0
    32b2:	e2 f7       	brpl	.-8      	; 0x32ac <_Z7perMainv+0x19c>
    32b4:	80 ff       	sbrs	r24, 0
    32b6:	50 c0       	rjmp	.+160    	; 0x3358 <_Z7perMainv+0x248>
        perOut(next_chans512, p);
    32b8:	c5 01       	movw	r24, r10
    32ba:	60 2f       	mov	r22, r16
    32bc:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z6perOutPih>
        perOut(next_chans512, p); // TODO temporary fix for issue 80. I think th9x has a better algorithm for dealing with it!
    32c0:	c5 01       	movw	r24, r10
    32c2:	60 2f       	mov	r22, r16
    32c4:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z6perOutPih>
        // printf("perOut(%d - %d)=>%d\n", p, fp_act[p], next_chans512[2]);
        for (uint8_t i=0; i<NUM_CHNOUT; i++) {
          sum_chans512[i] += (int32_t)next_chans512[i] * fp_act[p];
    32c8:	f3 01       	movw	r30, r6
    32ca:	80 81       	ld	r24, Z
    32cc:	91 81       	ldd	r25, Z+1	; 0x01
    32ce:	9c 01       	movw	r18, r24
    32d0:	40 e0       	ldi	r20, 0x00	; 0
    32d2:	50 e0       	ldi	r21, 0x00	; 0
    32d4:	a9 96       	adiw	r28, 0x29	; 41
    32d6:	2c af       	std	Y+60, r18	; 0x3c
    32d8:	3d af       	std	Y+61, r19	; 0x3d
    32da:	4e af       	std	Y+62, r20	; 0x3e
    32dc:	5f af       	std	Y+63, r21	; 0x3f
    32de:	a9 97       	sbiw	r28, 0x29	; 41
    32e0:	65 01       	movw	r12, r10
    32e2:	83 2c       	mov	r8, r3
    32e4:	9f 2c       	mov	r9, r15
    32e6:	d6 01       	movw	r26, r12
    32e8:	2d 91       	ld	r18, X+
    32ea:	3d 91       	ld	r19, X+
    32ec:	6d 01       	movw	r12, r26
    32ee:	44 27       	eor	r20, r20
    32f0:	37 fd       	sbrc	r19, 7
    32f2:	40 95       	com	r20
    32f4:	54 2f       	mov	r21, r20
    32f6:	a9 96       	adiw	r28, 0x29	; 41
    32f8:	6c ad       	ldd	r22, Y+60	; 0x3c
    32fa:	7d ad       	ldd	r23, Y+61	; 0x3d
    32fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    32fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    3300:	a9 97       	sbiw	r28, 0x29	; 41
    3302:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    3306:	9b 01       	movw	r18, r22
    3308:	ac 01       	movw	r20, r24
    330a:	f4 01       	movw	r30, r8
    330c:	80 81       	ld	r24, Z
    330e:	91 81       	ldd	r25, Z+1	; 0x01
    3310:	a2 81       	ldd	r26, Z+2	; 0x02
    3312:	b3 81       	ldd	r27, Z+3	; 0x03
    3314:	82 0f       	add	r24, r18
    3316:	93 1f       	adc	r25, r19
    3318:	a4 1f       	adc	r26, r20
    331a:	b5 1f       	adc	r27, r21
    331c:	81 93       	st	Z+, r24
    331e:	91 93       	st	Z+, r25
    3320:	a1 93       	st	Z+, r26
    3322:	b1 93       	st	Z+, r27
    3324:	4f 01       	movw	r8, r30
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        perOut(next_chans512, p);
        perOut(next_chans512, p); // TODO temporary fix for issue 80. I think th9x has a better algorithm for dealing with it!
        // printf("perOut(%d - %d)=>%d\n", p, fp_act[p], next_chans512[2]);
        for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    3326:	c4 14       	cp	r12, r4
    3328:	d5 04       	cpc	r13, r5
    332a:	e9 f6       	brne	.-70     	; 0x32e6 <_Z7perMainv+0x1d6>
          sum_chans512[i] += (int32_t)next_chans512[i] * fp_act[p];
        }
        weight += fp_act[p];
    332c:	a5 96       	adiw	r28, 0x25	; 37
    332e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3330:	3d ad       	ldd	r19, Y+61	; 0x3d
    3332:	4e ad       	ldd	r20, Y+62	; 0x3e
    3334:	5f ad       	ldd	r21, Y+63	; 0x3f
    3336:	a5 97       	sbiw	r28, 0x25	; 37
    3338:	a9 96       	adiw	r28, 0x29	; 41
    333a:	8c ad       	ldd	r24, Y+60	; 0x3c
    333c:	9d ad       	ldd	r25, Y+61	; 0x3d
    333e:	ae ad       	ldd	r26, Y+62	; 0x3e
    3340:	bf ad       	ldd	r27, Y+63	; 0x3f
    3342:	a9 97       	sbiw	r28, 0x29	; 41
    3344:	28 0f       	add	r18, r24
    3346:	39 1f       	adc	r19, r25
    3348:	4a 1f       	adc	r20, r26
    334a:	5b 1f       	adc	r21, r27
    334c:	a5 96       	adiw	r28, 0x25	; 37
    334e:	2c af       	std	Y+60, r18	; 0x3c
    3350:	3d af       	std	Y+61, r19	; 0x3d
    3352:	4e af       	std	Y+62, r20	; 0x3e
    3354:	5f af       	std	Y+63, r21	; 0x3f
    3356:	a5 97       	sbiw	r28, 0x25	; 37
    3358:	0f 5f       	subi	r16, 0xFF	; 255
    335a:	1f 4f       	sbci	r17, 0xFF	; 255
    335c:	a2 e0       	ldi	r26, 0x02	; 2
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	6a 0e       	add	r6, r26
    3362:	7b 1e       	adc	r7, r27
  int16_t next_chans512[NUM_CHNOUT];

  if (s_fade_flight_phases) {
    int32_t sum_chans512[NUM_CHNOUT] = {0};
    int32_t weight = 0;
    for (uint8_t p=0; p<MAX_PHASES; p++) {
    3364:	05 30       	cpi	r16, 0x05	; 5
    3366:	11 05       	cpc	r17, r1
    3368:	09 f0       	breq	.+2      	; 0x336c <_Z7perMainv+0x25c>
    336a:	9b cf       	rjmp	.-202    	; 0x32a2 <_Z7perMainv+0x192>
    336c:	8e 01       	movw	r16, r28
    336e:	0f 5d       	subi	r16, 0xDF	; 223
    3370:	1f 4f       	sbci	r17, 0xFF	; 255
    3372:	6e 01       	movw	r12, r28
    3374:	08 94       	sec
    3376:	c1 1c       	adc	r12, r1
    3378:	d1 1c       	adc	r13, r1

#ifdef DISPLAY_USER_DATA
char userDataDisplayBuf[TELEM_SCREEN_BUFFER_SIZE];
#endif

void perMain()
    337a:	71 e6       	ldi	r23, 0x61	; 97
    337c:	a7 2e       	mov	r10, r23
    337e:	b1 2c       	mov	r11, r1
    3380:	ac 0e       	add	r10, r28
    3382:	bd 1e       	adc	r11, r29
      }
    }
    // printf("sum=%d, weight=%d ", sum_chans512[2], weight); fflush(stdout);
    assert(weight);
    for (uint8_t i=0; i<NUM_CHNOUT; i++) {
      next_chans512[i] = ((int32_t)sum_chans512[i] / weight);
    3384:	f8 01       	movw	r30, r16
    3386:	61 91       	ld	r22, Z+
    3388:	71 91       	ld	r23, Z+
    338a:	81 91       	ld	r24, Z+
    338c:	91 91       	ld	r25, Z+
    338e:	8f 01       	movw	r16, r30
    3390:	a5 96       	adiw	r28, 0x25	; 37
    3392:	2c ad       	ldd	r18, Y+60	; 0x3c
    3394:	3d ad       	ldd	r19, Y+61	; 0x3d
    3396:	4e ad       	ldd	r20, Y+62	; 0x3e
    3398:	5f ad       	ldd	r21, Y+63	; 0x3f
    339a:	a5 97       	sbiw	r28, 0x25	; 37
    339c:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    33a0:	d6 01       	movw	r26, r12
    33a2:	2d 93       	st	X+, r18
    33a4:	3d 93       	st	X+, r19
    33a6:	6d 01       	movw	r12, r26
        weight += fp_act[p];
      }
    }
    // printf("sum=%d, weight=%d ", sum_chans512[2], weight); fflush(stdout);
    assert(weight);
    for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    33a8:	0a 15       	cp	r16, r10
    33aa:	1b 05       	cpc	r17, r11
    33ac:	59 f7       	brne	.-42     	; 0x3384 <_Z7perMainv+0x274>
    33ae:	05 c0       	rjmp	.+10     	; 0x33ba <_Z7perMainv+0x2aa>
      next_chans512[i] = ((int32_t)sum_chans512[i] / weight);
    }
    // printf("output = %d\n", next_chans512[2]); fflush(stdout);
  }
  else {
    perOut(next_chans512, phase);
    33b0:	ce 01       	movw	r24, r28
    33b2:	01 96       	adiw	r24, 0x01	; 1
    33b4:	6e 2d       	mov	r22, r14
    33b6:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z6perOutPih>
    33ba:	fe 01       	movw	r30, r28
    33bc:	31 96       	adiw	r30, 0x01	; 1
    33be:	a9 e1       	ldi	r26, 0x19	; 25
    33c0:	b9 e1       	ldi	r27, 0x19	; 25

#ifdef DISPLAY_USER_DATA
char userDataDisplayBuf[TELEM_SCREEN_BUFFER_SIZE];
#endif

void perMain()
    33c2:	ce 01       	movw	r24, r28
    33c4:	81 96       	adiw	r24, 0x21	; 33
  else {
    perOut(next_chans512, phase);
  }

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    cli();
    33c6:	f8 94       	cli
    g_chans512[i] = next_chans512[i];
    33c8:	21 91       	ld	r18, Z+
    33ca:	31 91       	ld	r19, Z+
    33cc:	2d 93       	st	X+, r18
    33ce:	3d 93       	st	X+, r19
    sei();
    33d0:	78 94       	sei
  }
  else {
    perOut(next_chans512, phase);
  }

  for (uint8_t i=0; i<NUM_CHNOUT; i++) {
    33d2:	e8 17       	cp	r30, r24
    33d4:	f9 07       	cpc	r31, r25
    33d6:	b9 f7       	brne	.-18     	; 0x33c6 <_Z7perMainv+0x2b6>
    cli();
    g_chans512[i] = next_chans512[i];
    sei();
  }

  if (!eeprom_buffer_size) {
    33d8:	80 91 07 1f 	lds	r24, 0x1F07
    33dc:	88 23       	and	r24, r24
    33de:	81 f4       	brne	.+32     	; 0x3400 <_Z7perMainv+0x2f0>
    if (theFile.isWriting())
    33e0:	80 91 b4 19 	lds	r24, 0x19B4
    33e4:	88 23       	and	r24, r24
    33e6:	29 f0       	breq	.+10     	; 0x33f2 <_Z7perMainv+0x2e2>
      theFile.nextWriteStep();
    33e8:	8c ea       	ldi	r24, 0xAC	; 172
    33ea:	99 e1       	ldi	r25, 0x19	; 25
    33ec:	0e 94 cc 64 	call	0xc998	; 0xc998 <_ZN7RlcFile13nextWriteStepEv>
    33f0:	07 c0       	rjmp	.+14     	; 0x3400 <_Z7perMainv+0x2f0>
    else if (s_eeDirtyMsk)
    33f2:	80 91 bf 19 	lds	r24, 0x19BF
    33f6:	88 23       	and	r24, r24
    33f8:	19 f0       	breq	.+6      	; 0x3400 <_Z7perMainv+0x2f0>
      eeCheck();
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	0e 94 45 60 	call	0xc08a	; 0xc08a <_Z7eeCheckb>
  }

  if(!tick10ms) return; //make sure the rest happen only every 10ms.
    3400:	80 91 7a 15 	lds	r24, 0x157A
    3404:	88 23       	and	r24, r24
    3406:	09 f4       	brne	.+2      	; 0x340a <_Z7perMainv+0x2fa>
    3408:	56 c2       	rjmp	.+1196   	; 0x38b6 <_Z7perMainv+0x7a6>

  if (s_fade_flight_phases) {
    340a:	f0 90 9d 18 	lds	r15, 0x189D
    340e:	ff 20       	and	r15, r15
    3410:	09 f4       	brne	.+2      	; 0x3414 <_Z7perMainv+0x304>
    3412:	47 c0       	rjmp	.+142    	; 0x34a2 <_Z7perMainv+0x392>
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
    3414:	20 91 9e 18 	lds	r18, 0x189E
    3418:	30 91 9f 18 	lds	r19, 0x189F
    341c:	e0 ea       	ldi	r30, 0xA0	; 160
    341e:	f8 e1       	ldi	r31, 0x18	; 24
    3420:	80 e0       	ldi	r24, 0x00	; 0
    3422:	90 e0       	ldi	r25, 0x00	; 0
        else {
          if (fp_act[p] > delta)
            fp_act[p] -= delta;
          else {
            fp_act[p] = 0;
            s_fade_flight_phases -= (1<<p);
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	70 e0       	ldi	r23, 0x00	; 0
      if (s_fade_flight_phases & (1<<p)) {
        if (p == phase) {
          if (MAX_ACT - fp_act[p] > delta)
            fp_act[p] += delta;
          else {
            fp_act[p] = MAX_ACT;
    3428:	0f ef       	ldi	r16, 0xFF	; 255
    342a:	1f ef       	ldi	r17, 0xFF	; 255
            s_fade_flight_phases -= (1<<p);
    342c:	6b 01       	movw	r12, r22
    342e:	0e 2c       	mov	r0, r14
    3430:	02 c0       	rjmp	.+4      	; 0x3436 <_Z7perMainv+0x326>
    3432:	cc 0c       	add	r12, r12
    3434:	dd 1c       	adc	r13, r13
    3436:	0a 94       	dec	r0
    3438:	e2 f7       	brpl	.-8      	; 0x3432 <_Z7perMainv+0x322>

  if(!tick10ms) return; //make sure the rest happen only every 10ms.

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
      if (s_fade_flight_phases & (1<<p)) {
    343a:	4f 2d       	mov	r20, r15
    343c:	50 e0       	ldi	r21, 0x00	; 0
    343e:	08 2e       	mov	r0, r24
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <_Z7perMainv+0x336>
    3442:	55 95       	asr	r21
    3444:	47 95       	ror	r20
    3446:	0a 94       	dec	r0
    3448:	e2 f7       	brpl	.-8      	; 0x3442 <_Z7perMainv+0x332>
    344a:	40 ff       	sbrs	r20, 0
    344c:	23 c0       	rjmp	.+70     	; 0x3494 <_Z7perMainv+0x384>
    344e:	40 81       	ld	r20, Z
    3450:	51 81       	ldd	r21, Z+1	; 0x01
        if (p == phase) {
    3452:	e8 16       	cp	r14, r24
    3454:	69 f4       	brne	.+26     	; 0x3470 <_Z7perMainv+0x360>
          if (MAX_ACT - fp_act[p] > delta)
    3456:	da 01       	movw	r26, r20
    3458:	a0 95       	com	r26
    345a:	b0 95       	com	r27
    345c:	2a 17       	cp	r18, r26
    345e:	3b 07       	cpc	r19, r27
    3460:	18 f4       	brcc	.+6      	; 0x3468 <_Z7perMainv+0x358>
            fp_act[p] += delta;
    3462:	42 0f       	add	r20, r18
    3464:	53 1f       	adc	r21, r19
    3466:	09 c0       	rjmp	.+18     	; 0x347a <_Z7perMainv+0x36a>
          else {
            fp_act[p] = MAX_ACT;
    3468:	11 83       	std	Z+1, r17	; 0x01
    346a:	00 83       	st	Z, r16
            s_fade_flight_phases -= (1<<p);
    346c:	fc 18       	sub	r15, r12
    346e:	12 c0       	rjmp	.+36     	; 0x3494 <_Z7perMainv+0x384>
          }
        }
        else {
          if (fp_act[p] > delta)
    3470:	24 17       	cp	r18, r20
    3472:	35 07       	cpc	r19, r21
    3474:	28 f4       	brcc	.+10     	; 0x3480 <_Z7perMainv+0x370>
            fp_act[p] -= delta;
    3476:	42 1b       	sub	r20, r18
    3478:	53 0b       	sbc	r21, r19
    347a:	51 83       	std	Z+1, r21	; 0x01
    347c:	40 83       	st	Z, r20
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <_Z7perMainv+0x384>
          else {
            fp_act[p] = 0;
    3480:	11 82       	std	Z+1, r1	; 0x01
    3482:	10 82       	st	Z, r1
            s_fade_flight_phases -= (1<<p);
    3484:	ab 01       	movw	r20, r22
    3486:	08 2e       	mov	r0, r24
    3488:	02 c0       	rjmp	.+4      	; 0x348e <_Z7perMainv+0x37e>
    348a:	44 0f       	add	r20, r20
    348c:	55 1f       	adc	r21, r21
    348e:	0a 94       	dec	r0
    3490:	e2 f7       	brpl	.-8      	; 0x348a <_Z7perMainv+0x37a>
    3492:	f4 1a       	sub	r15, r20
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	32 96       	adiw	r30, 0x02	; 2
  }

  if(!tick10ms) return; //make sure the rest happen only every 10ms.

  if (s_fade_flight_phases) {
    for (uint8_t p=0; p<MAX_PHASES; p++) {
    3498:	85 30       	cpi	r24, 0x05	; 5
    349a:	91 05       	cpc	r25, r1
    349c:	71 f6       	brne	.-100    	; 0x343a <_Z7perMainv+0x32a>
    349e:	f0 92 9d 18 	sts	0x189D, r15
        }
      }
    }
  }

  if ( Timer2_running ) {
    34a2:	80 91 8f 15 	lds	r24, 0x158F
    34a6:	88 23       	and	r24, r24
    34a8:	a1 f0       	breq	.+40     	; 0x34d2 <_Z7perMainv+0x3c2>
    if ( (Timer2_pre += 1 ) >= 100 ) {
    34aa:	80 91 90 15 	lds	r24, 0x1590
    34ae:	98 2f       	mov	r25, r24
    34b0:	9f 5f       	subi	r25, 0xFF	; 255
    34b2:	90 93 90 15 	sts	0x1590, r25
    34b6:	94 36       	cpi	r25, 0x64	; 100
    34b8:	60 f0       	brcs	.+24     	; 0x34d2 <_Z7perMainv+0x3c2>
      Timer2_pre -= 100 ;
    34ba:	83 56       	subi	r24, 0x63	; 99
    34bc:	80 93 90 15 	sts	0x1590, r24
      timer2 += 1 ;
    34c0:	80 91 91 15 	lds	r24, 0x1591
    34c4:	90 91 92 15 	lds	r25, 0x1592
    34c8:	01 96       	adiw	r24, 0x01	; 1
    34ca:	90 93 92 15 	sts	0x1592, r25
    34ce:	80 93 91 15 	sts	0x1591, r24
    }
  }

  evalFunctions();
    34d2:	0e 94 9e 13 	call	0x273c	; 0x273c <_Z13evalFunctionsv>
  
  if (s_noHi) s_noHi--;
    34d6:	80 91 17 19 	lds	r24, 0x1917
    34da:	88 23       	and	r24, r24
    34dc:	19 f0       	breq	.+6      	; 0x34e4 <_Z7perMainv+0x3d4>
    34de:	81 50       	subi	r24, 0x01	; 1
    34e0:	80 93 17 19 	sts	0x1917, r24
  if (g_eeGeneral.inactivityTimer
    34e4:	80 91 83 12 	lds	r24, 0x1283
    34e8:	88 23       	and	r24, r24
    34ea:	09 f4       	brne	.+2      	; 0x34ee <_Z7perMainv+0x3de>
    34ec:	68 c0       	rjmp	.+208    	; 0x35be <_Z7perMainv+0x4ae>
    34ee:	91 99       	sbic	0x12, 1	; 18
    34f0:	66 c0       	rjmp	.+204    	; 0x35be <_Z7perMainv+0x4ae>
        && !SLAVE_MODE) { // G: disable inactivity timer when in SLAVE mode (or when powered only from Flash programmer.)
    inacCounter++;
    34f2:	80 91 94 17 	lds	r24, 0x1794
    34f6:	90 91 95 17 	lds	r25, 0x1795
    34fa:	a0 91 96 17 	lds	r26, 0x1796
    34fe:	b0 91 97 17 	lds	r27, 0x1797
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	a1 1d       	adc	r26, r1
    3506:	b1 1d       	adc	r27, r1
    3508:	80 93 94 17 	sts	0x1794, r24
    350c:	90 93 95 17 	sts	0x1795, r25
    3510:	a0 93 96 17 	sts	0x1796, r26
    3514:	b0 93 97 17 	sts	0x1797, r27
    uint16_t tsum = 0;
    for(uint8_t i=0;i<4;i++) tsum += anaIn(i)/64;  // reduce sensitivity
    3518:	40 e0       	ldi	r20, 0x00	; 0
  
  if (s_noHi) s_noHi--;
  if (g_eeGeneral.inactivityTimer
        && !SLAVE_MODE) { // G: disable inactivity timer when in SLAVE mode (or when powered only from Flash programmer.)
    inacCounter++;
    uint16_t tsum = 0;
    351a:	00 e0       	ldi	r16, 0x00	; 0
    351c:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i=0;i<4;i++) tsum += anaIn(i)/64;  // reduce sensitivity
    351e:	84 2f       	mov	r24, r20
    3520:	aa 96       	adiw	r28, 0x2a	; 42
    3522:	4f af       	std	Y+63, r20	; 0x3f
    3524:	aa 97       	sbiw	r28, 0x2a	; 42
    3526:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    352a:	9c 01       	movw	r18, r24
    352c:	66 e0       	ldi	r22, 0x06	; 6
    352e:	36 95       	lsr	r19
    3530:	27 95       	ror	r18
    3532:	6a 95       	dec	r22
    3534:	e1 f7       	brne	.-8      	; 0x352e <_Z7perMainv+0x41e>
    3536:	02 0f       	add	r16, r18
    3538:	13 1f       	adc	r17, r19
    353a:	aa 96       	adiw	r28, 0x2a	; 42
    353c:	4f ad       	ldd	r20, Y+63	; 0x3f
    353e:	aa 97       	sbiw	r28, 0x2a	; 42
    3540:	4f 5f       	subi	r20, 0xFF	; 255
    3542:	44 30       	cpi	r20, 0x04	; 4
    3544:	61 f7       	brne	.-40     	; 0x351e <_Z7perMainv+0x40e>
    if(tsum!=inacSum){
    3546:	80 91 98 17 	lds	r24, 0x1798
    354a:	90 91 99 17 	lds	r25, 0x1799
    354e:	08 17       	cp	r16, r24
    3550:	19 07       	cpc	r17, r25
    3552:	61 f0       	breq	.+24     	; 0x356c <_Z7perMainv+0x45c>
      inacSum = tsum;
    3554:	10 93 99 17 	sts	0x1799, r17
    3558:	00 93 98 17 	sts	0x1798, r16
      inacCounter=0;
    355c:	10 92 94 17 	sts	0x1794, r1
    3560:	10 92 95 17 	sts	0x1795, r1
    3564:	10 92 96 17 	sts	0x1796, r1
    3568:	10 92 97 17 	sts	0x1797, r1
    }
    if(inacCounter>((uint32_t)g_eeGeneral.inactivityTimer*100*60))
    356c:	e0 90 94 17 	lds	r14, 0x1794
    3570:	f0 90 95 17 	lds	r15, 0x1795
    3574:	00 91 96 17 	lds	r16, 0x1796
    3578:	10 91 97 17 	lds	r17, 0x1797
    357c:	60 91 83 12 	lds	r22, 0x1283
    3580:	70 e0       	ldi	r23, 0x00	; 0
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	20 e7       	ldi	r18, 0x70	; 112
    3588:	37 e1       	ldi	r19, 0x17	; 23
    358a:	40 e0       	ldi	r20, 0x00	; 0
    358c:	50 e0       	ldi	r21, 0x00	; 0
    358e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    3592:	6e 15       	cp	r22, r14
    3594:	7f 05       	cpc	r23, r15
    3596:	80 07       	cpc	r24, r16
    3598:	91 07       	cpc	r25, r17
    359a:	88 f4       	brcc	.+34     	; 0x35be <_Z7perMainv+0x4ae>
      if((inacCounter&0x3F)==10) beepWarn();
    359c:	d8 01       	movw	r26, r16
    359e:	c7 01       	movw	r24, r14
    35a0:	8f 73       	andi	r24, 0x3F	; 63
    35a2:	90 70       	andi	r25, 0x00	; 0
    35a4:	a0 70       	andi	r26, 0x00	; 0
    35a6:	b0 70       	andi	r27, 0x00	; 0
    35a8:	8a 30       	cpi	r24, 0x0A	; 10
    35aa:	91 05       	cpc	r25, r1
    35ac:	a1 05       	cpc	r26, r1
    35ae:	b1 05       	cpc	r27, r1
    35b0:	31 f4       	brne	.+12     	; 0x35be <_Z7perMainv+0x4ae>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    35b2:	80 91 75 15 	lds	r24, 0x1575
    35b6:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    35ba:	84 e6       	ldi	r24, 0x64	; 100
    35bc:	87 bd       	out	0x27, r24	; 39
  }
  
  if (trimsCheckTimer > 0)
    35be:	80 91 93 15 	lds	r24, 0x1593
    35c2:	88 23       	and	r24, r24
    35c4:	19 f0       	breq	.+6      	; 0x35cc <_Z7perMainv+0x4bc>
    trimsCheckTimer -= 1;
    35c6:	81 50       	subi	r24, 0x01	; 1
    35c8:	80 93 93 15 	sts	0x1593, r24
  /* Use light switch (on) to open telemtry test log file */
  static FRESULT result;

  static int8_t testLogOpen = 0;

  if(getSwitch(g_eeGeneral.lightSw,0))
    35cc:	80 91 6f 12 	lds	r24, 0x126F
    35d0:	60 e0       	ldi	r22, 0x00	; 0
    35d2:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    35d6:	90 91 9a 18 	lds	r25, 0x189A
    35da:	88 23       	and	r24, r24
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <_Z7perMainv+0x4d0>
    35de:	45 c0       	rjmp	.+138    	; 0x366a <_Z7perMainv+0x55a>
  {
    // while(1); // Test WDT
    if ((testLogOpen==0) // if we know we haven't started logging ...
    35e0:	99 23       	and	r25, r25
    35e2:	51 f0       	breq	.+20     	; 0x35f8 <_Z7perMainv+0x4e8>
    35e4:	91 30       	cpi	r25, 0x01	; 1
    35e6:	09 f0       	breq	.+2      	; 0x35ea <_Z7perMainv+0x4da>
    35e8:	4e c0       	rjmp	.+156    	; 0x3686 <_Z7perMainv+0x576>
    35ea:	80 91 f8 21 	lds	r24, 0x21F8
    35ee:	90 91 f9 21 	lds	r25, 0x21F9
    35f2:	00 97       	sbiw	r24, 0x00	; 0
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <_Z7perMainv+0x4e8>
    35f6:	47 c0       	rjmp	.+142    	; 0x3686 <_Z7perMainv+0x576>
        || ((testLogOpen==1) && !g_oLogFile.fs)) //  ... or we thought we had, but the file got closed
    {
      result = f_mount(0, &FATFS_Obj);
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	66 ec       	ldi	r22, 0xC6	; 198
    35fc:	7f e1       	ldi	r23, 0x1F	; 31
    35fe:	0e 94 55 86 	call	0x10caa	; 0x10caa <f_mount>
    3602:	90 93 9c 18 	sts	0x189C, r25
    3606:	80 93 9b 18 	sts	0x189B, r24
      if (result!=FR_OK)
    360a:	00 97       	sbiw	r24, 0x00	; 0
    360c:	11 f0       	breq	.+4      	; 0x3612 <_Z7perMainv+0x502>
      {
        testLogOpen = -1;
    360e:	2f ef       	ldi	r18, 0xFF	; 255
    3610:	0e c0       	rjmp	.+28     	; 0x362e <_Z7perMainv+0x51e>
        beepKey();
      }
      else
      {
        // create new log file using filename set up in pers.cpp::resetTelemetry()
        result = f_open(&g_oLogFile, g_logFilename, FA_OPEN_ALWAYS | FA_WRITE);
    3612:	88 ef       	ldi	r24, 0xF8	; 248
    3614:	91 e2       	ldi	r25, 0x21	; 33
    3616:	60 eb       	ldi	r22, 0xB0	; 176
    3618:	7f e1       	ldi	r23, 0x1F	; 31
    361a:	42 e1       	ldi	r20, 0x12	; 18
    361c:	0e 94 6e 86 	call	0x10cdc	; 0x10cdc <f_open>
    3620:	90 93 9c 18 	sts	0x189C, r25
    3624:	80 93 9b 18 	sts	0x189B, r24
        if (result!=FR_OK)
    3628:	00 97       	sbiw	r24, 0x00	; 0
    362a:	49 f0       	breq	.+18     	; 0x363e <_Z7perMainv+0x52e>
        {
          testLogOpen = -2;
    362c:	2e ef       	ldi	r18, 0xFE	; 254
    362e:	20 93 9a 18 	sts	0x189A, r18
          beepAgain = result - 1;
    3632:	81 50       	subi	r24, 0x01	; 1
    3634:	80 93 7d 15 	sts	0x157D, r24

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    3638:	80 91 72 15 	lds	r24, 0x1572
    363c:	11 c0       	rjmp	.+34     	; 0x3660 <_Z7perMainv+0x550>
          beepKey();
        }
        else
        {
          f_lseek(&g_oLogFile, g_oLogFile.fsize); // append
    363e:	40 91 02 22 	lds	r20, 0x2202
    3642:	50 91 03 22 	lds	r21, 0x2203
    3646:	60 91 04 22 	lds	r22, 0x2204
    364a:	70 91 05 22 	lds	r23, 0x2205
    364e:	88 ef       	ldi	r24, 0xF8	; 248
    3650:	91 e2       	ldi	r25, 0x21	; 33
    3652:	0e 94 b0 8d 	call	0x11b60	; 0x11b60 <f_lseek>

          testLogOpen = 1;
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	80 93 9a 18 	sts	0x189A, r24
    365c:	80 91 74 15 	lds	r24, 0x1574
    3660:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    3664:	84 e6       	ldi	r24, 0x64	; 100
    3666:	87 bd       	out	0x27, r24	; 39
    3668:	0e c0       	rjmp	.+28     	; 0x3686 <_Z7perMainv+0x576>
      }
    }
  } 
  else
  {
    if (testLogOpen==1)
    366a:	91 30       	cpi	r25, 0x01	; 1
    366c:	51 f4       	brne	.+20     	; 0x3682 <_Z7perMainv+0x572>
    {
      f_close(&g_oLogFile);
    366e:	88 ef       	ldi	r24, 0xF8	; 248
    3670:	91 e2       	ldi	r25, 0x21	; 33
    3672:	0e 94 ce 8b 	call	0x1179c	; 0x1179c <f_close>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    3676:	80 91 74 15 	lds	r24, 0x1574
    367a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    367e:	84 e6       	ldi	r24, 0x64	; 100
    3680:	87 bd       	out	0x27, r24	; 39
      beepWarn2();
    }
    testLogOpen = 0;
    3682:	10 92 9a 18 	sts	0x189A, r1
// PCBV3
#endif
// FRSKY
#endif

  lcd_clear();
    3686:	0e 94 58 66 	call	0xccb0	; 0xccb0 <_Z9lcd_clearv>
  uint8_t evt=getEvent();
    368a:	0e 94 6b 6d 	call	0xdad6	; 0xdad6 <_Z8getEventv>
  evt = checkTrim(evt);
    368e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_Z9checkTrimh>
    3692:	08 2f       	mov	r16, r24

  if(g_LightOffCounter) g_LightOffCounter--;
    3694:	80 91 7b 15 	lds	r24, 0x157B
    3698:	90 91 7c 15 	lds	r25, 0x157C
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	29 f0       	breq	.+10     	; 0x36aa <_Z7perMainv+0x59a>
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	90 93 7c 15 	sts	0x157C, r25
    36a6:	80 93 7b 15 	sts	0x157B, r24
  if(evt) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100
    36aa:	00 23       	and	r16, r16
    36ac:	81 f0       	breq	.+32     	; 0x36ce <_Z7perMainv+0x5be>
    36ae:	40 91 86 12 	lds	r20, 0x1286
    36b2:	50 e0       	ldi	r21, 0x00	; 0
    36b4:	24 ef       	ldi	r18, 0xF4	; 244
    36b6:	31 e0       	ldi	r19, 0x01	; 1
    36b8:	42 9f       	mul	r20, r18
    36ba:	c0 01       	movw	r24, r0
    36bc:	43 9f       	mul	r20, r19
    36be:	90 0d       	add	r25, r0
    36c0:	52 9f       	mul	r21, r18
    36c2:	90 0d       	add	r25, r0
    36c4:	11 24       	eor	r1, r1
    36c6:	90 93 7c 15 	sts	0x157C, r25
    36ca:	80 93 7b 15 	sts	0x157B, r24

  if( getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
    36ce:	80 91 6f 12 	lds	r24, 0x126F
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    36d8:	88 23       	and	r24, r24
    36da:	39 f4       	brne	.+14     	; 0x36ea <_Z7perMainv+0x5da>
    36dc:	80 91 7b 15 	lds	r24, 0x157B
    36e0:	90 91 7c 15 	lds	r25, 0x157C
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	09 f4       	brne	.+2      	; 0x36ea <_Z7perMainv+0x5da>
    36e8:	e4 c0       	rjmp	.+456    	; 0x38b2 <_Z7perMainv+0x7a2>
    BACKLIGHT_ON;
    36ea:	40 9a       	sbi	0x08, 0	; 8

  ////////////////
  // G: TODO This shouldn't be in perMain(). It should be in the same place 
  // all the other ADC samples happen
  static int16_t p1valprev;
  p1valdiff = (p1val-calibratedStick[6])/32;
    36ec:	20 91 f3 18 	lds	r18, 0x18F3
    36f0:	30 91 f4 18 	lds	r19, 0x18F4
    36f4:	80 91 80 15 	lds	r24, 0x1580
    36f8:	90 91 81 15 	lds	r25, 0x1581
    36fc:	82 1b       	sub	r24, r18
    36fe:	93 0b       	sbc	r25, r19
    3700:	60 e2       	ldi	r22, 0x20	; 32
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    3708:	70 93 3a 19 	sts	0x193A, r23
    370c:	60 93 39 19 	sts	0x1939, r22
  if(p1valdiff) {
    3710:	61 15       	cp	r22, r1
    3712:	71 05       	cpc	r23, r1
    3714:	91 f0       	breq	.+36     	; 0x373a <_Z7perMainv+0x62a>
      p1valdiff = (p1valprev-calibratedStick[6])/2;
    3716:	80 91 98 18 	lds	r24, 0x1898
    371a:	90 91 99 18 	lds	r25, 0x1899
    371e:	82 1b       	sub	r24, r18
    3720:	93 0b       	sbc	r25, r19
    3722:	62 e0       	ldi	r22, 0x02	; 2
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    372a:	70 93 3a 19 	sts	0x193A, r23
    372e:	60 93 39 19 	sts	0x1939, r22
      p1val = calibratedStick[6];
    3732:	30 93 81 15 	sts	0x1581, r19
    3736:	20 93 80 15 	sts	0x1580, r18
  }
  p1valprev = calibratedStick[6];
    373a:	30 93 99 18 	sts	0x1899, r19
    373e:	20 93 98 18 	sts	0x1898, r18
  /////////////////

  g_menuStack[g_menuStackPtr](evt);
    3742:	e0 91 4a 19 	lds	r30, 0x194A
    3746:	f0 e0       	ldi	r31, 0x00	; 0
    3748:	ee 0f       	add	r30, r30
    374a:	ff 1f       	adc	r31, r31
    374c:	e4 5c       	subi	r30, 0xC4	; 196
    374e:	f6 4e       	sbci	r31, 0xE6	; 230
    3750:	01 90       	ld	r0, Z+
    3752:	f0 81       	ld	r31, Z
    3754:	e0 2d       	mov	r30, r0
    3756:	80 2f       	mov	r24, r16
    3758:	19 95       	eicall
  refreshDisplay();
    375a:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>

#if defined (PCBV4)
  // PPM signal on phono-jack. In or out? ...
  if(checkSlaveMode()) {
    375e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <_Z14checkSlaveModev>
    3762:	88 23       	and	r24, r24
    3764:	11 f0       	breq	.+4      	; 0x376a <_Z7perMainv+0x65a>
    PORTG |= (1<<OUT_G_SIM_CTL); // 1=ppm out
    3766:	a4 9a       	sbi	0x14, 4	; 20
    3768:	01 c0       	rjmp	.+2      	; 0x376c <_Z7perMainv+0x65c>
  }
  else{
    PORTG &=  ~(1<<OUT_G_SIM_CTL); // 0=ppm in
    376a:	a4 98       	cbi	0x14, 4	; 20
  else{
    PORTG |=  (1<<OUT_G_SIM_CTL); // 1=ppm-in
  }
#endif

  switch( get_tmr10ms() & 0x1f ) { //alle 10ms*32
    376c:	0e 94 aa 06 	call	0xd54	; 0xd54 <_Z11get_tmr10msv>
    3770:	8f 71       	andi	r24, 0x1F	; 31
    3772:	90 70       	andi	r25, 0x00	; 0
    3774:	82 30       	cpi	r24, 0x02	; 2
    3776:	91 05       	cpc	r25, r1
    3778:	29 f0       	breq	.+10     	; 0x3784 <_Z7perMainv+0x674>
    377a:	83 30       	cpi	r24, 0x03	; 3
    377c:	91 05       	cpc	r25, r1
    377e:	09 f0       	breq	.+2      	; 0x3782 <_Z7perMainv+0x672>
    3780:	9a c0       	rjmp	.+308    	; 0x38b6 <_Z7perMainv+0x7a6>
    3782:	80 c0       	rjmp	.+256    	; 0x3884 <_Z7perMainv+0x774>

    case 2:
      {
        // initialize to first sample if on first averaging cycle
        if (abRunningAvg == 0) abRunningAvg = anaIn(7);
    3784:	80 91 77 15 	lds	r24, 0x1577
    3788:	90 91 78 15 	lds	r25, 0x1578
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	39 f4       	brne	.+14     	; 0x379e <_Z7perMainv+0x68e>
    3790:	87 e0       	ldi	r24, 0x07	; 7
    3792:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    3796:	90 93 78 15 	sts	0x1578, r25
    379a:	80 93 77 15 	sts	0x1577, r24

        // G: Running average (virtual 7 stored plus current sample) for batt volts to stablise display
        // Average the raw samples so the calibrartion screen updates instantly
        int32_t ab = ((abRunningAvg * 7) + anaIn(7)) / 8;
    379e:	80 91 77 15 	lds	r24, 0x1577
    37a2:	90 91 78 15 	lds	r25, 0x1578
    37a6:	8c 01       	movw	r16, r24
    37a8:	43 e0       	ldi	r20, 0x03	; 3
    37aa:	00 0f       	add	r16, r16
    37ac:	11 1f       	adc	r17, r17
    37ae:	4a 95       	dec	r20
    37b0:	e1 f7       	brne	.-8      	; 0x37aa <_Z7perMainv+0x69a>
    37b2:	08 1b       	sub	r16, r24
    37b4:	19 0b       	sbc	r17, r25
    37b6:	87 e0       	ldi	r24, 0x07	; 7
    37b8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    37bc:	08 0f       	add	r16, r24
    37be:	19 1f       	adc	r17, r25
    37c0:	33 e0       	ldi	r19, 0x03	; 3
    37c2:	16 95       	lsr	r17
    37c4:	07 95       	ror	r16
    37c6:	3a 95       	dec	r19
    37c8:	e1 f7       	brne	.-8      	; 0x37c2 <_Z7perMainv+0x6b2>
    37ca:	58 01       	movw	r10, r16
    37cc:	cc 24       	eor	r12, r12
    37ce:	dd 24       	eor	r13, r13
        abRunningAvg = (uint16_t)ab;
    37d0:	10 93 78 15 	sts	0x1578, r17
    37d4:	00 93 77 15 	sts	0x1577, r16
        // _with rounding_, to arrive at 100mV (rounded) resolution. EG. 704 = 7.04V => 7.0V and 705 = 7.05B => 7.1V
        //
        // g_vbat100mV = ((1390*(uint32_t)ab + (10*(int32_t)ab*g_eeGeneral.vBatCalib/8)+(5*BandGap))/10) / BandGap;
        //
        // Simplified, this becomes ...
        g_vbat100mV = (1112*(uint32_t)ab + (int32_t)ab*g_eeGeneral.vBatCalib + (BandGap<<2)) / (BandGap<<3);
    37d8:	80 90 72 06 	lds	r8, 0x0672
    37dc:	90 90 73 06 	lds	r9, 0x0673
    37e0:	c6 01       	movw	r24, r12
    37e2:	b5 01       	movw	r22, r10
    37e4:	28 e5       	ldi	r18, 0x58	; 88
    37e6:	34 e0       	ldi	r19, 0x04	; 4
    37e8:	40 e0       	ldi	r20, 0x00	; 0
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    37f0:	7b 01       	movw	r14, r22
    37f2:	8c 01       	movw	r16, r24
    37f4:	20 91 6e 12 	lds	r18, 0x126E
    37f8:	33 27       	eor	r19, r19
    37fa:	27 fd       	sbrc	r18, 7
    37fc:	30 95       	com	r19
    37fe:	43 2f       	mov	r20, r19
    3800:	53 2f       	mov	r21, r19
    3802:	c6 01       	movw	r24, r12
    3804:	b5 01       	movw	r22, r10
    3806:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    380a:	e6 0e       	add	r14, r22
    380c:	f7 1e       	adc	r15, r23
    380e:	08 1f       	adc	r16, r24
    3810:	19 1f       	adc	r17, r25
    3812:	c4 01       	movw	r24, r8
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	88 0f       	add	r24, r24
    381a:	99 1f       	adc	r25, r25
    381c:	a0 e0       	ldi	r26, 0x00	; 0
    381e:	b0 e0       	ldi	r27, 0x00	; 0
    3820:	e8 0e       	add	r14, r24
    3822:	f9 1e       	adc	r15, r25
    3824:	0a 1f       	adc	r16, r26
    3826:	1b 1f       	adc	r17, r27
    3828:	94 01       	movw	r18, r8
    382a:	83 e0       	ldi	r24, 0x03	; 3
    382c:	22 0f       	add	r18, r18
    382e:	33 1f       	adc	r19, r19
    3830:	8a 95       	dec	r24
    3832:	e1 f7       	brne	.-8      	; 0x382c <_Z7perMainv+0x71c>
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	50 e0       	ldi	r21, 0x00	; 0
    3838:	c8 01       	movw	r24, r16
    383a:	b7 01       	movw	r22, r14
    383c:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
    3840:	20 93 79 15 	sts	0x1579, r18
#else
        g_vbat100mV = (ab*16 + ab*g_eeGeneral.vBatCalib/8)/BandGap;
#endif   
        static uint8_t s_batCheck;
        s_batCheck+=32;
    3844:	80 91 97 18 	lds	r24, 0x1897
    3848:	80 5e       	subi	r24, 0xE0	; 224
    384a:	80 93 97 18 	sts	0x1897, r24
        if(s_batCheck==0 && g_vbat100mV<g_eeGeneral.vBatWarn 
    384e:	88 23       	and	r24, r24
    3850:	91 f5       	brne	.+100    	; 0x38b6 <_Z7perMainv+0x7a6>
    3852:	80 91 6d 12 	lds	r24, 0x126D
    3856:	28 17       	cp	r18, r24
    3858:	70 f5       	brcc	.+92     	; 0x38b6 <_Z7perMainv+0x7a6>
    385a:	91 99       	sbic	0x12, 1	; 18
    385c:	2c c0       	rjmp	.+88     	; 0x38b6 <_Z7perMainv+0x7a6>
    385e:	22 33       	cpi	r18, 0x32	; 50
    3860:	50 f1       	brcs	.+84     	; 0x38b6 <_Z7perMainv+0x7a6>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    3862:	80 91 76 15 	lds	r24, 0x1576
    3866:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    386a:	84 e6       	ldi	r24, 0x64	; 100
    386c:	87 bd       	out	0x27, r24	; 39
                                                // have been sounding for along time by now, plus the trainer 
                                                // can take back control of of the model, if needed. So I think 
                                                // it's OK.
        {
          beepErr();
          if (g_eeGeneral.flashBeep) g_LightOffCounter = FLASH_DURATION;
    386e:	80 91 84 12 	lds	r24, 0x1284
    3872:	83 ff       	sbrs	r24, 3
    3874:	20 c0       	rjmp	.+64     	; 0x38b6 <_Z7perMainv+0x7a6>
    3876:	82 e3       	ldi	r24, 0x32	; 50
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	90 93 7c 15 	sts	0x157C, r25
    387e:	80 93 7b 15 	sts	0x157B, r24
    3882:	19 c0       	rjmp	.+50     	; 0x38b6 <_Z7perMainv+0x7a6>
          0,  1,  8, 30, 100, //silent
          1,  1,  8, 30, 100, //normal
          1,  1, 15, 50, 150, //for motor
         10, 10, 30, 50, 150, //for motor
        };
        memcpy_P(g_beepVal,beepTab+5*g_eeGeneral.beeperVal,5);
    3884:	80 91 81 12 	lds	r24, 0x1281
    3888:	86 95       	lsr	r24
    388a:	86 95       	lsr	r24
    388c:	86 95       	lsr	r24
    388e:	87 70       	andi	r24, 0x07	; 7
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	bc 01       	movw	r22, r24
    3894:	66 0f       	add	r22, r22
    3896:	77 1f       	adc	r23, r23
    3898:	66 0f       	add	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	68 0f       	add	r22, r24
    389e:	79 1f       	adc	r23, r25
    38a0:	63 58       	subi	r22, 0x83	; 131
    38a2:	79 4f       	sbci	r23, 0xF9	; 249
    38a4:	82 e7       	ldi	r24, 0x72	; 114
    38a6:	95 e1       	ldi	r25, 0x15	; 21
    38a8:	45 e0       	ldi	r20, 0x05	; 5
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	0e 94 6b ab 	call	0x156d6	; 0x156d6 <memcpy_P>
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <_Z7perMainv+0x7a6>
  if(evt) g_LightOffCounter = g_eeGeneral.lightAutoOff*500; // on keypress turn the light on 5*100

  if( getSwitch(g_eeGeneral.lightSw,0) || g_LightOffCounter)
    BACKLIGHT_ON;
  else
    BACKLIGHT_OFF;
    38b2:	40 98       	cbi	0x08, 0	; 8
    38b4:	1b cf       	rjmp	.-458    	; 0x36ec <_Z7perMainv+0x5dc>
          //g_beepVal = BEEP_VAL;
      }
      break;
  }

}
    38b6:	c7 59       	subi	r28, 0x97	; 151
    38b8:	df 4f       	sbci	r29, 0xFF	; 255
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	f8 94       	cli
    38be:	de bf       	out	0x3e, r29	; 62
    38c0:	0f be       	out	0x3f, r0	; 63
    38c2:	cd bf       	out	0x3d, r28	; 61
    38c4:	cf 91       	pop	r28
    38c6:	df 91       	pop	r29
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	ff 90       	pop	r15
    38ce:	ef 90       	pop	r14
    38d0:	df 90       	pop	r13
    38d2:	cf 90       	pop	r12
    38d4:	bf 90       	pop	r11
    38d6:	af 90       	pop	r10
    38d8:	9f 90       	pop	r9
    38da:	8f 90       	pop	r8
    38dc:	7f 90       	pop	r7
    38de:	6f 90       	pop	r6
    38e0:	5f 90       	pop	r5
    38e2:	4f 90       	pop	r4
    38e4:	3f 90       	pop	r3
    38e6:	08 95       	ret

000038e8 <__vector_17>:

uint8_t heartbeat;


ISR(TIMER1_COMPA_vect) //2MHz pulse generation
{
    38e8:	1f 92       	push	r1
    38ea:	0f 92       	push	r0
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	0f 92       	push	r0
    38f0:	0b b6       	in	r0, 0x3b	; 59
    38f2:	0f 92       	push	r0
    38f4:	11 24       	eor	r1, r1
    38f6:	2f 93       	push	r18
    38f8:	3f 93       	push	r19
    38fa:	4f 93       	push	r20
    38fc:	5f 93       	push	r21
    38fe:	6f 93       	push	r22
    3900:	7f 93       	push	r23
    3902:	8f 93       	push	r24
    3904:	9f 93       	push	r25
    3906:	af 93       	push	r26
    3908:	bf 93       	push	r27
    390a:	ef 93       	push	r30
    390c:	ff 93       	push	r31
  static uint8_t   pulsePol;
  static uint16_t *pulsePtr = pulses2MHz;

  // Latency -- how far further on from interrupt trigger has the timer counted?
  // (or -- how long did it take to get to this function)
  uint8_t i = 0;
    390e:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t dt;
  do{
    dt=TCNT1L;//-OCR1A;
    3910:	80 91 84 00 	lds	r24, 0x0084

  // Latency -- how far further on from interrupt trigger has the timer counted?
  // (or -- how long did it take to get to this function)
  uint8_t i = 0;
  uint8_t dt;
  do{
    3914:	88 23       	and	r24, r24
    3916:	19 f4       	brne	.+6      	; 0x391e <__vector_17+0x36>
    dt=TCNT1L;//-OCR1A;
    i++;
    3918:	9f 5f       	subi	r25, 0xFF	; 255

  // Latency -- how far further on from interrupt trigger has the timer counted?
  // (or -- how long did it take to get to this function)
  uint8_t i = 0;
  uint8_t dt;
  do{
    391a:	95 30       	cpi	r25, 0x05	; 5
    391c:	c9 f7       	brne	.-14     	; 0x3910 <__vector_17+0x28>
    dt=TCNT1L;//-OCR1A;
    i++;
  }while(dt<1 && i<5);

  g_tmr1Latency_max = max(dt,g_tmr1Latency_max);
    391e:	20 91 65 15 	lds	r18, 0x1565
    3922:	98 2f       	mov	r25, r24
    3924:	82 17       	cp	r24, r18
    3926:	08 f4       	brcc	.+2      	; 0x392a <__vector_17+0x42>
    3928:	92 2f       	mov	r25, r18
    392a:	90 93 65 15 	sts	0x1565, r25
  g_tmr1Latency_min = min(dt,g_tmr1Latency_min);
    392e:	90 91 66 15 	lds	r25, 0x1566
    3932:	98 17       	cp	r25, r24
    3934:	08 f4       	brcc	.+2      	; 0x3938 <__vector_17+0x50>
    3936:	89 2f       	mov	r24, r25
    3938:	80 93 66 15 	sts	0x1566, r24
  }else{
    PORTB &= ~(1<<OUT_B_PPM); // GCC optimisation should result in a single CBI instruction
    pulsePol = 1;
  }
#endif
  OCR1A = *pulsePtr; // Schedule next interrupt vector (to this handler)
    393c:	e0 91 7b 06 	lds	r30, 0x067B
    3940:	f0 91 7c 06 	lds	r31, 0x067C
    3944:	80 81       	ld	r24, Z
    3946:	91 81       	ldd	r25, Z+1	; 0x01
    3948:	90 93 89 00 	sts	0x0089, r25
    394c:	80 93 88 00 	sts	0x0088, r24

#if defined (PCBV4)
  OCR1B = *pulsePtr; /* G: Using timer in CTC mode, restricted to using OCR1A for interrupt triggering.  
    3950:	80 81       	ld	r24, Z
    3952:	91 81       	ldd	r25, Z+1	; 0x01
    3954:	90 93 8b 00 	sts	0x008B, r25
    3958:	80 93 8a 00 	sts	0x008A, r24
                        So we actually have to handle the OCR1B register separately in this way. */

  // We cannot read the status of the PPM_OUT pin when OC1B is connected to it on the ATmega2560.
  // So the only way to set polarity is to manually control set/reset mode in COM1B0/1
  if (pulsePol)
    395c:	80 91 96 18 	lds	r24, 0x1896
    3960:	88 23       	and	r24, r24
    3962:	31 f0       	breq	.+12     	; 0x3970 <__vector_17+0x88>
  {
    TCCR1A = (3<<COM1B0); // SET the state of PB6(OC1B) on next TCNT1==OCR1B
    3964:	80 e3       	ldi	r24, 0x30	; 48
    3966:	80 93 80 00 	sts	0x0080, r24
    pulsePol = 0;
    396a:	10 92 96 18 	sts	0x1896, r1
    396e:	06 c0       	rjmp	.+12     	; 0x397c <__vector_17+0x94>
  }
  else
  {
    TCCR1A = (2<<COM1B0); // CLEAR the state of PB6(OC1B) on next TCNT1==OCR1B
    3970:	80 e2       	ldi	r24, 0x20	; 32
    3972:	80 93 80 00 	sts	0x0080, r24
    pulsePol = 1;
    3976:	81 e0       	ldi	r24, 0x01	; 1
    3978:	80 93 96 18 	sts	0x1896, r24
#elif defined (DPPMPB7_HARDWARE)
  OCR1C = *pulsePtr;  // just copy the value of the OCR1A to OCR1C to test PPM out without too 
                      // much change in the code not optimum but will not alter ppm precision
#endif

  *pulsePtr++;
    397c:	cf 01       	movw	r24, r30
    397e:	02 96       	adiw	r24, 0x02	; 2
    3980:	90 93 7c 06 	sts	0x067C, r25
    3984:	80 93 7b 06 	sts	0x067B, r24

  if( *pulsePtr == 0)
    3988:	82 81       	ldd	r24, Z+2	; 0x02
    398a:	93 81       	ldd	r25, Z+3	; 0x03
    398c:	00 97       	sbiw	r24, 0x00	; 0
    398e:	e1 f4       	brne	.+56     	; 0x39c8 <__vector_17+0xe0>
  {
    //currpulse=0;
    pulsePtr = pulses2MHz;
    3990:	80 e1       	ldi	r24, 0x10	; 16
    3992:	96 e1       	ldi	r25, 0x16	; 22
    3994:	90 93 7c 06 	sts	0x067C, r25
    3998:	80 93 7b 06 	sts	0x067B, r24
    pulsePol = g_model.pulsePol;//0;
    399c:	80 91 99 12 	lds	r24, 0x1299
    39a0:	82 95       	swap	r24
    39a2:	81 70       	andi	r24, 0x01	; 1
    39a4:	80 93 96 18 	sts	0x1896, r24

    cli();
    39a8:	f8 94       	cli
#if defined (PCBV3)
    TIMSK1 &= ~(1<<OCIE1A); //stop reentrance
    39aa:	80 91 6f 00 	lds	r24, 0x006F
    39ae:	8d 7f       	andi	r24, 0xFD	; 253
    39b0:	80 93 6f 00 	sts	0x006F, r24
#else
    TIMSK &= ~(1<<OCIE1A); //stop reentrance
#endif
    sei();
    39b4:	78 94       	sei

    setupPulses();
    39b6:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <_Z11setupPulsesv>
  //          it works on the '64A. I haven't personally tested it.
  if(PINB & (1<<OUT_B_PPM) && g_model.pulsePol)
       TCCR1C=(1<<FOC1C);
#endif

    cli();
    39ba:	f8 94       	cli
#if defined (PCBV3)
    TIMSK1 |= (1<<OCIE1A);
    39bc:	80 91 6f 00 	lds	r24, 0x006F
    39c0:	82 60       	ori	r24, 0x02	; 2
    39c2:	80 93 6f 00 	sts	0x006F, r24
#else
    TIMSK |= (1<<OCIE1A);
#endif
    sei();
    39c6:	78 94       	sei
  }
  heartbeat |= HEART_TIMER2Mhz;
    39c8:	80 91 8f 18 	lds	r24, 0x188F
    39cc:	81 60       	ori	r24, 0x01	; 1
    39ce:	80 93 8f 18 	sts	0x188F, r24
}
    39d2:	ff 91       	pop	r31
    39d4:	ef 91       	pop	r30
    39d6:	bf 91       	pop	r27
    39d8:	af 91       	pop	r26
    39da:	9f 91       	pop	r25
    39dc:	8f 91       	pop	r24
    39de:	7f 91       	pop	r23
    39e0:	6f 91       	pop	r22
    39e2:	5f 91       	pop	r21
    39e4:	4f 91       	pop	r20
    39e6:	3f 91       	pop	r19
    39e8:	2f 91       	pop	r18
    39ea:	0f 90       	pop	r0
    39ec:	0b be       	out	0x3b, r0	; 59
    39ee:	0f 90       	pop	r0
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	0f 90       	pop	r0
    39f4:	1f 90       	pop	r1
    39f6:	18 95       	reti

000039f8 <__vector_15>:
#if defined (PCBV3)
ISR(TIMER2_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    39f8:	1f 92       	push	r1
    39fa:	0f 92       	push	r0
    39fc:	0f b6       	in	r0, 0x3f	; 63
    39fe:	0f 92       	push	r0
    3a00:	11 24       	eor	r1, r1
    3a02:	8f 93       	push	r24
  g_tmr16KHz++; // gruvin: Not 16KHz. Overflows occur at 61.035Hz (1/256th of 15.625KHz)
    3a04:	80 91 90 18 	lds	r24, 0x1890
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	80 93 90 18 	sts	0x1890, r24
                // to give *16.384ms* intervals. Kind of matters for accuracy elsewhere. ;)
                // g_tmr16KHz is used to software-construct a 16-bit timer
                // from TIMER-0 (8-bit). See getTmr16KHz, below.
}
    3a0e:	8f 91       	pop	r24
    3a10:	0f 90       	pop	r0
    3a12:	0f be       	out	0x3f, r0	; 63
    3a14:	0f 90       	pop	r0
    3a16:	1f 90       	pop	r1
    3a18:	18 95       	reti

00003a1a <_Z11getTmr16KHzv>:

uint16_t getTmr16KHz()
{
  while(1){
    uint8_t hb  = g_tmr16KHz;
    3a1a:	30 91 90 18 	lds	r19, 0x1890
#if defined (PCBV3)
    uint8_t lb  = TCNT2;
    3a1e:	20 91 b2 00 	lds	r18, 0x00B2
#else
    uint8_t lb  = TCNT0;
#endif
    if(hb-g_tmr16KHz==0) return (hb<<8)|lb;
    3a22:	80 91 90 18 	lds	r24, 0x1890
    3a26:	38 17       	cp	r19, r24
    3a28:	c1 f7       	brne	.-16     	; 0x3a1a <_Z11getTmr16KHzv>
    3a2a:	93 2f       	mov	r25, r19
    3a2c:	80 e0       	ldi	r24, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	28 2b       	or	r18, r24
    3a32:	39 2b       	or	r19, r25
  }
}
    3a34:	c9 01       	movw	r24, r18
    3a36:	08 95       	ret

00003a38 <__vector_13>:
#if defined (PCBV3)
ISR(TIMER2_COMPA_vect, ISR_NOBLOCK) //10ms timer
#else
ISR(TIMER0_COMP_vect, ISR_NOBLOCK) //10ms timer
#endif
{
    3a38:	78 94       	sei
    3a3a:	1f 92       	push	r1
    3a3c:	0f 92       	push	r0
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	0f 92       	push	r0
    3a42:	0b b6       	in	r0, 0x3b	; 59
    3a44:	0f 92       	push	r0
    3a46:	11 24       	eor	r1, r1
    3a48:	2f 93       	push	r18
    3a4a:	3f 93       	push	r19
    3a4c:	4f 93       	push	r20
    3a4e:	5f 93       	push	r21
    3a50:	6f 93       	push	r22
    3a52:	7f 93       	push	r23
    3a54:	8f 93       	push	r24
    3a56:	9f 93       	push	r25
    3a58:	af 93       	push	r26
    3a5a:	bf 93       	push	r27
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	ef 93       	push	r30
    3a62:	ff 93       	push	r31
  cli();
    3a64:	f8 94       	cli
#if defined (PCBV3)
  static uint8_t accuracyWarble = 4; // becasue 16M / 1024 / 100 = 156.25. So bump every 4.
  uint8_t bump = (!(accuracyWarble++ & 0x03)) ? 157 : 156;
    3a66:	80 91 7a 06 	lds	r24, 0x067A
    3a6a:	98 2f       	mov	r25, r24
    3a6c:	9f 5f       	subi	r25, 0xFF	; 255
    3a6e:	90 93 7a 06 	sts	0x067A, r25
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	83 70       	andi	r24, 0x03	; 3
    3a76:	90 70       	andi	r25, 0x00	; 0
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	11 f0       	breq	.+4      	; 0x3a80 <__vector_13+0x48>
    3a7c:	9c e9       	ldi	r25, 0x9C	; 156
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <__vector_13+0x4a>
    3a80:	9d e9       	ldi	r25, 0x9D	; 157
  TIMSK2 &= ~(1<<OCIE2A); //stop reentrance
    3a82:	80 91 70 00 	lds	r24, 0x0070
    3a86:	8d 7f       	andi	r24, 0xFD	; 253
    3a88:	80 93 70 00 	sts	0x0070, r24
  OCR2A += bump;
    3a8c:	80 91 b3 00 	lds	r24, 0x00B3
    3a90:	89 0f       	add	r24, r25
    3a92:	80 93 b3 00 	sts	0x00B3, r24
  static uint8_t accuracyWarble = 4; // becasue 16M / 1024 / 100 = 156.25. So bump every 4.
  uint8_t bump = (!(accuracyWarble++ & 0x03)) ? 157 : 156;
  OCR0 += bump;
#endif
#endif
  sei();
    3a96:	78 94       	sei
    cnt10ms = 77;

#endif

    // Record start time from TCNT1 to record excution time
    cli();
    3a98:	f8 94       	cli
    uint16_t dt=TCNT1;// TCNT1 (used for PPM out pulse generation) is running at 2MHz
    3a9a:	c0 91 84 00 	lds	r28, 0x0084
    3a9e:	d0 91 85 00 	lds	r29, 0x0085
    sei();
    3aa2:	78 94       	sei

    //cnt >/=0
    //beepon/off
    //beepagain y/n
    if(g_beepCnt) {
    3aa4:	80 91 71 15 	lds	r24, 0x1571
    3aa8:	88 23       	and	r24, r24
    3aaa:	69 f0       	breq	.+26     	; 0x3ac6 <__vector_13+0x8e>
        if(!beepAgainOrig) {
    3aac:	90 91 7e 15 	lds	r25, 0x157E
    3ab0:	99 23       	and	r25, r25
    3ab2:	29 f4       	brne	.+10     	; 0x3abe <__vector_13+0x86>
            beepAgainOrig = g_beepCnt;
    3ab4:	80 93 7e 15 	sts	0x157E, r24
            beepOn = true;
    3ab8:	91 e0       	ldi	r25, 0x01	; 1
    3aba:	90 93 7f 15 	sts	0x157F, r25
        }
        g_beepCnt--;
    3abe:	81 50       	subi	r24, 0x01	; 1
    3ac0:	80 93 71 15 	sts	0x1571, r24
    3ac4:	20 c0       	rjmp	.+64     	; 0x3b06 <__vector_13+0xce>
    }
    else
    {
        if(beepAgain && beepAgainOrig) {
    3ac6:	20 91 7d 15 	lds	r18, 0x157D
    3aca:	22 23       	and	r18, r18
    3acc:	b1 f0       	breq	.+44     	; 0x3afa <__vector_13+0xc2>
    3ace:	90 91 7e 15 	lds	r25, 0x157E
    3ad2:	99 23       	and	r25, r25
    3ad4:	91 f0       	breq	.+36     	; 0x3afa <__vector_13+0xc2>
            beepOn = !beepOn;
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	30 91 7f 15 	lds	r19, 0x157F
    3adc:	31 11       	cpse	r19, r1
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	80 93 7f 15 	sts	0x157F, r24
            g_beepCnt = beepOn ? beepAgainOrig : 8;
    3ae4:	88 23       	and	r24, r24
    3ae6:	09 f4       	brne	.+2      	; 0x3aea <__vector_13+0xb2>
    3ae8:	98 e0       	ldi	r25, 0x08	; 8
    3aea:	90 93 71 15 	sts	0x1571, r25
            if(beepOn) beepAgain--;
    3aee:	88 23       	and	r24, r24
    3af0:	51 f0       	breq	.+20     	; 0x3b06 <__vector_13+0xce>
    3af2:	21 50       	subi	r18, 0x01	; 1
    3af4:	20 93 7d 15 	sts	0x157D, r18
    3af8:	06 c0       	rjmp	.+12     	; 0x3b06 <__vector_13+0xce>
        }
        else {
            beepAgainOrig = 0;
    3afa:	10 92 7e 15 	sts	0x157E, r1
            beepOn = false;
    3afe:	10 92 7f 15 	sts	0x157F, r1
            warble = false;
    3b02:	10 92 6b 15 	sts	0x156B, r1
        }
    }

#if defined (PCBV3) && defined (BEEPSPKR)
    // G: use timer0 WGM mode tone generator for beeps
    if(beepOn)
    3b06:	80 91 7f 15 	lds	r24, 0x157F
    3b0a:	88 23       	and	r24, r24
    3b0c:	89 f0       	breq	.+34     	; 0x3b30 <__vector_13+0xf8>
    {
      static bool warbleC;
      warbleC = warble && !warbleC;
    3b0e:	80 91 6b 15 	lds	r24, 0x156B
    3b12:	88 23       	and	r24, r24
    3b14:	29 f0       	breq	.+10     	; 0x3b20 <__vector_13+0xe8>
}

extern uint16_t g_time_per10; // instantiated in menus.cpp

#if defined (PCBV3)
ISR(TIMER2_COMPA_vect, ISR_NOBLOCK) //10ms timer
    3b16:	80 91 95 18 	lds	r24, 0x1895
    3b1a:	91 e0       	ldi	r25, 0x01	; 1
    3b1c:	89 27       	eor	r24, r25
    3b1e:	01 c0       	rjmp	.+2      	; 0x3b22 <__vector_13+0xea>
#if defined (PCBV3) && defined (BEEPSPKR)
    // G: use timer0 WGM mode tone generator for beeps
    if(beepOn)
    {
      static bool warbleC;
      warbleC = warble && !warbleC;
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	80 93 95 18 	sts	0x1895, r24
      if(warbleC)
    3b26:	88 23       	and	r24, r24
    3b28:	19 f4       	brne	.+6      	; 0x3b30 <__vector_13+0xf8>
        TCCR0A  &= ~(0b01<<COM0A0); // tone off
      else
        TCCR0A  |= (0b01<<COM0A0);  // tone on
    3b2a:	84 b5       	in	r24, 0x24	; 36
    3b2c:	80 64       	ori	r24, 0x40	; 64
    3b2e:	02 c0       	rjmp	.+4      	; 0x3b34 <__vector_13+0xfc>
    }else{
      TCCR0A  &= ~(0b01<<COM0A0);   // tone off
    3b30:	84 b5       	in	r24, 0x24	; 36
    3b32:	8f 7b       	andi	r24, 0xBF	; 191
    3b34:	84 bd       	out	0x24, r24	; 36
      PORTE &= ~(1<<OUT_E_BUZZER);
    }
#endif // BEEPSPKR
#endif // PCBV3 && BEEPSPKR

    per10ms();
    3b36:	0e 94 9d 6e 	call	0xdd3a	; 0xdd3a <_Z7per10msv>

#if defined (PCBV3)
    disk_timerproc();
    3b3a:	0e 94 49 a2 	call	0x14492	; 0x14492 <_Z14disk_timerprocv>
#endif

    heartbeat |= HEART_TIMER10ms;
    3b3e:	80 91 8f 18 	lds	r24, 0x188F
    3b42:	82 60       	ori	r24, 0x02	; 2
    3b44:	80 93 8f 18 	sts	0x188F, r24

    // Record per10ms ISR execution time, in us(x2) for STAT2 page
    cli();
    3b48:	f8 94       	cli
    uint16_t dt2 = TCNT1; // capture end time
    3b4a:	80 91 84 00 	lds	r24, 0x0084
    3b4e:	90 91 85 00 	lds	r25, 0x0085
    sei();
    3b52:	78 94       	sei
    g_time_per10 = dt2 - dt; // NOTE: These spike to nearly 65535 just now and then. Why? :/
    3b54:	8c 1b       	sub	r24, r28
    3b56:	9d 0b       	sbc	r25, r29
    3b58:	90 93 6a 15 	sts	0x156A, r25
    3b5c:	80 93 69 15 	sts	0x1569, r24

#if defined (PCBSTD) && defined (BEEPSPKR)
  } // end 10ms event
#endif

  cli();
    3b60:	f8 94       	cli
#if defined (PCBV3)
  TIMSK2 |= (1<<OCIE2A);
    3b62:	80 91 70 00 	lds	r24, 0x0070
    3b66:	82 60       	ori	r24, 0x02	; 2
    3b68:	80 93 70 00 	sts	0x0070, r24
#else
  TIMSK |= (1<<OCIE0);
#endif
  sei();
    3b6c:	78 94       	sei
}
    3b6e:	ff 91       	pop	r31
    3b70:	ef 91       	pop	r30
    3b72:	df 91       	pop	r29
    3b74:	cf 91       	pop	r28
    3b76:	bf 91       	pop	r27
    3b78:	af 91       	pop	r26
    3b7a:	9f 91       	pop	r25
    3b7c:	8f 91       	pop	r24
    3b7e:	7f 91       	pop	r23
    3b80:	6f 91       	pop	r22
    3b82:	5f 91       	pop	r21
    3b84:	4f 91       	pop	r20
    3b86:	3f 91       	pop	r19
    3b88:	2f 91       	pop	r18
    3b8a:	0f 90       	pop	r0
    3b8c:	0b be       	out	0x3b, r0	; 59
    3b8e:	0f 90       	pop	r0
    3b90:	0f be       	out	0x3f, r0	; 63
    3b92:	0f 90       	pop	r0
    3b94:	1f 90       	pop	r1
    3b96:	18 95       	reti

00003b98 <__vector_31>:
// equating to one count every half millisecond. (2 counts = 1ms). Control channel
// count delta values thus can range from about 1600 to 4400 counts (800us to 2200us),
// corresponding to a PPM signal in the range 0.8ms to 2.2ms (1.5ms at center).
// (The timer is free-running and is thus not reset to zero at each capture interval.)
ISR(TIMER3_CAPT_vect) // G: High frequency noise can cause stack overflo with ISR_NOBLOCK
{
    3b98:	1f 92       	push	r1
    3b9a:	0f 92       	push	r0
    3b9c:	0f b6       	in	r0, 0x3f	; 63
    3b9e:	0f 92       	push	r0
    3ba0:	0b b6       	in	r0, 0x3b	; 59
    3ba2:	0f 92       	push	r0
    3ba4:	11 24       	eor	r1, r1
    3ba6:	2f 93       	push	r18
    3ba8:	3f 93       	push	r19
    3baa:	4f 93       	push	r20
    3bac:	5f 93       	push	r21
    3bae:	6f 93       	push	r22
    3bb0:	7f 93       	push	r23
    3bb2:	8f 93       	push	r24
    3bb4:	9f 93       	push	r25
    3bb6:	af 93       	push	r26
    3bb8:	bf 93       	push	r27
    3bba:	cf 93       	push	r28
    3bbc:	ef 93       	push	r30
    3bbe:	ff 93       	push	r31
  static uint16_t lastCapt;

  uint16_t capture=ICR3;
    3bc0:	20 91 96 00 	lds	r18, 0x0096
    3bc4:	30 91 97 00 	lds	r19, 0x0097

  // Prevent rentrance for this IRQ only
#if defined (PCBV3)
  TIMSK3 &= ~(1<<ICIE3);
    3bc8:	80 91 71 00 	lds	r24, 0x0071
    3bcc:	8f 7d       	andi	r24, 0xDF	; 223
    3bce:	80 93 71 00 	sts	0x0071, r24
#else
  ETIMSK &= ~(1<<TICIE3);
#endif
  sei(); // enable other interrupts
    3bd2:	78 94       	sei

  uint16_t val = (capture - lastCapt) / 2;
    3bd4:	80 91 93 18 	lds	r24, 0x1893
    3bd8:	90 91 94 18 	lds	r25, 0x1894
    3bdc:	a9 01       	movw	r20, r18
    3bde:	48 1b       	sub	r20, r24
    3be0:	59 0b       	sbc	r21, r25
    3be2:	ca 01       	movw	r24, r20
    3be4:	96 95       	lsr	r25
    3be6:	87 95       	ror	r24

  // G: We prcoess g_ppmIns immediately here, to make servo movement as smooth as possible
  //    while under trainee control
  if (val>4000 && val < 16000) // G: Prioritize reset pulse. (Needed when less than 8 incoming pulses)
    3be8:	ac 01       	movw	r20, r24
    3bea:	41 5a       	subi	r20, 0xA1	; 161
    3bec:	5f 40       	sbci	r21, 0x0F	; 15
    3bee:	6e e2       	ldi	r22, 0x2E	; 46
    3bf0:	4f 3d       	cpi	r20, 0xDF	; 223
    3bf2:	56 07       	cpc	r21, r22
    3bf4:	20 f4       	brcc	.+8      	; 0x3bfe <__vector_31+0x66>
    ppmInState = 1; // triggered
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	80 93 8e 18 	sts	0x188E, r24
    3bfc:	30 c0       	rjmp	.+96     	; 0x3c5e <__vector_31+0xc6>
  else
  {
    if (ppmInState && ppmInState<=8)
    3bfe:	c0 91 8e 18 	lds	r28, 0x188E
    3c02:	4c 2f       	mov	r20, r28
    3c04:	41 50       	subi	r20, 0x01	; 1
    3c06:	48 30       	cpi	r20, 0x08	; 8
    3c08:	50 f5       	brcc	.+84     	; 0x3c5e <__vector_31+0xc6>
    {
      if (val>800 && val<2200) // if valid pulse-width range
    3c0a:	ac 01       	movw	r20, r24
    3c0c:	41 52       	subi	r20, 0x21	; 33
    3c0e:	53 40       	sbci	r21, 0x03	; 3
    3c10:	65 e0       	ldi	r22, 0x05	; 5
    3c12:	47 37       	cpi	r20, 0x77	; 119
    3c14:	56 07       	cpc	r21, r22
    3c16:	08 f5       	brcc	.+66     	; 0x3c5a <__vector_31+0xc2>
      {
        g_ppmIns[ppmInState++ - 1] =
    3c18:	ec 2f       	mov	r30, r28
    3c1a:	f0 e0       	ldi	r31, 0x00	; 0
          (int16_t)(val - 1500)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
    3c1c:	ee 0f       	add	r30, r30
    3c1e:	ff 1f       	adc	r31, r31
    3c20:	e4 58       	subi	r30, 0x84	; 132
    3c22:	f7 4e       	sbci	r31, 0xE7	; 231
    3c24:	bc 01       	movw	r22, r24
    3c26:	6c 5d       	subi	r22, 0xDC	; 220
    3c28:	75 40       	sbci	r23, 0x05	; 5
    3c2a:	40 91 88 12 	lds	r20, 0x1288
    3c2e:	55 27       	eor	r21, r21
    3c30:	47 fd       	sbrc	r20, 7
    3c32:	50 95       	com	r21
    3c34:	46 5f       	subi	r20, 0xF6	; 246
    3c36:	5f 4f       	sbci	r21, 0xFF	; 255
    3c38:	64 9f       	mul	r22, r20
    3c3a:	c0 01       	movw	r24, r0
    3c3c:	65 9f       	mul	r22, r21
    3c3e:	90 0d       	add	r25, r0
    3c40:	74 9f       	mul	r23, r20
    3c42:	90 0d       	add	r25, r0
    3c44:	11 24       	eor	r1, r1
    3c46:	6a e0       	ldi	r22, 0x0A	; 10
    3c48:	70 e0       	ldi	r23, 0x00	; 0
    3c4a:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    3c4e:	71 83       	std	Z+1, r23	; 0x01
    3c50:	60 83       	st	Z, r22
  {
    if (ppmInState && ppmInState<=8)
    {
      if (val>800 && val<2200) // if valid pulse-width range
      {
        g_ppmIns[ppmInState++ - 1] =
    3c52:	cf 5f       	subi	r28, 0xFF	; 255
    3c54:	c0 93 8e 18 	sts	0x188E, r28
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <__vector_31+0xc6>
          (int16_t)(val - 1500)*(g_eeGeneral.PPM_Multiplier+10)/10; //+-500 != 512, but close enough.
      }
      else
        ppmInState = 0; // not triggered
    3c5a:	10 92 8e 18 	sts	0x188E, r1
    }
  }

  lastCapt = capture;
    3c5e:	30 93 94 18 	sts	0x1894, r19
    3c62:	20 93 93 18 	sts	0x1893, r18

  cli(); // disable other interrupts for stack pops before this function's RETI
    3c66:	f8 94       	cli
#if defined (PCBV3)
  TIMSK3 |= (1<<ICIE3);
    3c68:	80 91 71 00 	lds	r24, 0x0071
    3c6c:	80 62       	ori	r24, 0x20	; 32
    3c6e:	80 93 71 00 	sts	0x0071, r24
#else
  ETIMSK |= (1<<TICIE3);
#endif
}
    3c72:	ff 91       	pop	r31
    3c74:	ef 91       	pop	r30
    3c76:	cf 91       	pop	r28
    3c78:	bf 91       	pop	r27
    3c7a:	af 91       	pop	r26
    3c7c:	9f 91       	pop	r25
    3c7e:	8f 91       	pop	r24
    3c80:	7f 91       	pop	r23
    3c82:	6f 91       	pop	r22
    3c84:	5f 91       	pop	r21
    3c86:	4f 91       	pop	r20
    3c88:	3f 91       	pop	r19
    3c8a:	2f 91       	pop	r18
    3c8c:	0f 90       	pop	r0
    3c8e:	0b be       	out	0x3b, r0	; 59
    3c90:	0f 90       	pop	r0
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	0f 90       	pop	r0
    3c96:	1f 90       	pop	r1
    3c98:	18 95       	reti

00003c9a <get_fattime>:
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */
/* This is not required in read-only configuration.        */

uint32_t get_fattime(void)
{
    3c9a:	df 93       	push	r29
    3c9c:	cf 93       	push	r28
    3c9e:	cd b7       	in	r28, 0x3d	; 61
    3ca0:	de b7       	in	r29, 0x3e	; 62
    3ca2:	29 97       	sbiw	r28, 0x09	; 9
    3ca4:	0f b6       	in	r0, 0x3f	; 63
    3ca6:	f8 94       	cli
    3ca8:	de bf       	out	0x3e, r29	; 62
    3caa:	0f be       	out	0x3f, r0	; 63
    3cac:	cd bf       	out	0x3d, r28	; 61
  struct tm t;
  filltm(&g_unixTime, &t); // create a struct tm date/time structure from global unix time stamp
    3cae:	8a e3       	ldi	r24, 0x3A	; 58
    3cb0:	92 e1       	ldi	r25, 0x12	; 18
    3cb2:	be 01       	movw	r22, r28
    3cb4:	6f 5f       	subi	r22, 0xFF	; 255
    3cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb8:	0e 94 d3 75 	call	0xeba6	; 0xeba6 <_Z6filltmPlP2tm>
  return    ((DWORD)(t.tm_year - 80) << 25)
    | ((uint32_t)(t.tm_mon+1) << 21)
    | ((uint32_t)t.tm_mday << 16)
    | ((uint32_t)t.tm_hour << 11)
    | ((uint32_t)t.tm_min << 5)
    | ((uint32_t)t.tm_sec >> 1);
    3cbc:	2b 81       	ldd	r18, Y+3	; 0x03
    3cbe:	33 27       	eor	r19, r19
    3cc0:	27 fd       	sbrc	r18, 7
    3cc2:	30 95       	com	r19
    3cc4:	43 2f       	mov	r20, r19
    3cc6:	53 2f       	mov	r21, r19
    3cc8:	7b e0       	ldi	r23, 0x0B	; 11
    3cca:	22 0f       	add	r18, r18
    3ccc:	33 1f       	adc	r19, r19
    3cce:	44 1f       	adc	r20, r20
    3cd0:	55 1f       	adc	r21, r21
    3cd2:	7a 95       	dec	r23
    3cd4:	d1 f7       	brne	.-12     	; 0x3cca <get_fattime+0x30>
    3cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd8:	99 27       	eor	r25, r25
    3cda:	87 fd       	sbrc	r24, 7
    3cdc:	90 95       	com	r25
    3cde:	a9 2f       	mov	r26, r25
    3ce0:	b9 2f       	mov	r27, r25
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	99 27       	eor	r25, r25
    3ce6:	88 27       	eor	r24, r24
    3ce8:	28 2b       	or	r18, r24
    3cea:	39 2b       	or	r19, r25
    3cec:	4a 2b       	or	r20, r26
    3cee:	5b 2b       	or	r21, r27
    3cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf2:	99 27       	eor	r25, r25
    3cf4:	87 fd       	sbrc	r24, 7
    3cf6:	90 95       	com	r25
    3cf8:	a9 2f       	mov	r26, r25
    3cfa:	b9 2f       	mov	r27, r25
    3cfc:	f5 e0       	ldi	r31, 0x05	; 5
    3cfe:	88 0f       	add	r24, r24
    3d00:	99 1f       	adc	r25, r25
    3d02:	aa 1f       	adc	r26, r26
    3d04:	bb 1f       	adc	r27, r27
    3d06:	fa 95       	dec	r31
    3d08:	d1 f7       	brne	.-12     	; 0x3cfe <get_fattime+0x64>
    3d0a:	28 2b       	or	r18, r24
    3d0c:	39 2b       	or	r19, r25
    3d0e:	4a 2b       	or	r20, r26
    3d10:	5b 2b       	or	r21, r27
    3d12:	89 81       	ldd	r24, Y+1	; 0x01
    3d14:	99 27       	eor	r25, r25
    3d16:	87 fd       	sbrc	r24, 7
    3d18:	90 95       	com	r25
    3d1a:	a9 2f       	mov	r26, r25
    3d1c:	b9 2f       	mov	r27, r25
    3d1e:	b6 95       	lsr	r27
    3d20:	a7 95       	ror	r26
    3d22:	97 95       	ror	r25
    3d24:	87 95       	ror	r24
    3d26:	28 2b       	or	r18, r24
    3d28:	39 2b       	or	r19, r25
    3d2a:	4a 2b       	or	r20, r26
    3d2c:	5b 2b       	or	r21, r27
    3d2e:	8e 81       	ldd	r24, Y+6	; 0x06
    3d30:	99 27       	eor	r25, r25
    3d32:	87 fd       	sbrc	r24, 7
    3d34:	90 95       	com	r25
    3d36:	80 55       	subi	r24, 0x50	; 80
    3d38:	90 40       	sbci	r25, 0x00	; 0
    3d3a:	aa 27       	eor	r26, r26
    3d3c:	97 fd       	sbrc	r25, 7
    3d3e:	a0 95       	com	r26
    3d40:	ba 2f       	mov	r27, r26
    3d42:	79 e1       	ldi	r23, 0x19	; 25
    3d44:	88 0f       	add	r24, r24
    3d46:	99 1f       	adc	r25, r25
    3d48:	aa 1f       	adc	r26, r26
    3d4a:	bb 1f       	adc	r27, r27
    3d4c:	7a 95       	dec	r23
    3d4e:	d1 f7       	brne	.-12     	; 0x3d44 <get_fattime+0xaa>
    3d50:	28 2b       	or	r18, r24
    3d52:	39 2b       	or	r19, r25
    3d54:	4a 2b       	or	r20, r26
    3d56:	5b 2b       	or	r21, r27
    3d58:	8d 81       	ldd	r24, Y+5	; 0x05
    3d5a:	99 27       	eor	r25, r25
    3d5c:	87 fd       	sbrc	r24, 7
    3d5e:	90 95       	com	r25
    3d60:	01 96       	adiw	r24, 0x01	; 1
    3d62:	aa 27       	eor	r26, r26
    3d64:	97 fd       	sbrc	r25, 7
    3d66:	a0 95       	com	r26
    3d68:	ba 2f       	mov	r27, r26
    3d6a:	65 e1       	ldi	r22, 0x15	; 21
    3d6c:	88 0f       	add	r24, r24
    3d6e:	99 1f       	adc	r25, r25
    3d70:	aa 1f       	adc	r26, r26
    3d72:	bb 1f       	adc	r27, r27
    3d74:	6a 95       	dec	r22
    3d76:	d1 f7       	brne	.-12     	; 0x3d6c <get_fattime+0xd2>
    3d78:	28 2b       	or	r18, r24
    3d7a:	39 2b       	or	r19, r25
    3d7c:	4a 2b       	or	r20, r26
    3d7e:	5b 2b       	or	r21, r27
}
    3d80:	b9 01       	movw	r22, r18
    3d82:	ca 01       	movw	r24, r20
    3d84:	29 96       	adiw	r28, 0x09	; 9
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	de bf       	out	0x3e, r29	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	cd bf       	out	0x3d, r28	; 61
    3d90:	cf 91       	pop	r28
    3d92:	df 91       	pop	r29
    3d94:	08 95       	ret

00003d96 <_Z11instantTrimv>:

#endif


void instantTrim()
{
    3d96:	8f 92       	push	r8
    3d98:	9f 92       	push	r9
    3d9a:	af 92       	push	r10
    3d9c:	bf 92       	push	r11
    3d9e:	cf 92       	push	r12
    3da0:	df 92       	push	r13
    3da2:	ef 92       	push	r14
    3da4:	ff 92       	push	r15
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
  uint8_t phase = getFlightPhase();
    3dae:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    3db2:	b8 2e       	mov	r11, r24
    3db4:	00 e0       	ldi	r16, 0x00	; 0
    3db6:	17 e1       	ldi	r17, 0x17	; 23
    3db8:	fc e4       	ldi	r31, 0x4C	; 76
    3dba:	ef 2e       	mov	r14, r31
    3dbc:	f7 e1       	ldi	r31, 0x17	; 23
    3dbe:	ff 2e       	mov	r15, r31
    3dc0:	c0 e0       	ldi	r28, 0x00	; 0
    3dc2:	d0 e0       	ldi	r29, 0x00	; 0

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (!IS_THROTTLE(i)) {
    3dc4:	e2 e0       	ldi	r30, 0x02	; 2
    3dc6:	ce 2e       	mov	r12, r30
    3dc8:	d1 2c       	mov	r13, r1
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(i, phase);
      s_noStickInputs = true;
    3dca:	88 24       	eor	r8, r8
    3dcc:	83 94       	inc	r8
#endif


void instantTrim()
{
  uint8_t phase = getFlightPhase();
    3dce:	9c 2e       	mov	r9, r28

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    if (!IS_THROTTLE(i)) {
    3dd0:	80 91 82 12 	lds	r24, 0x1282
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	81 70       	andi	r24, 0x01	; 1
    3dd8:	90 70       	andi	r25, 0x00	; 0
    3dda:	96 01       	movw	r18, r12
    3ddc:	28 1b       	sub	r18, r24
    3dde:	39 0b       	sbc	r19, r25
    3de0:	2c 17       	cp	r18, r28
    3de2:	3d 07       	cpc	r19, r29
    3de4:	51 f1       	breq	.+84     	; 0x3e3a <_Z11instantTrimv+0xa4>
      // don't instant trim the throttle stick
      uint8_t trim_phase = getTrimFlightPhase(i, phase);
    3de6:	8c 2f       	mov	r24, r28
    3de8:	6b 2d       	mov	r22, r11
    3dea:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_Z18getTrimFlightPhasehh>
    3dee:	a8 2e       	mov	r10, r24
      s_noStickInputs = true;
    3df0:	80 92 6c 15 	sts	0x156C, r8
      evalSticks(phase);
    3df4:	8b 2d       	mov	r24, r11
    3df6:	0e 94 88 12 	call	0x2510	; 0x2510 <_Z10evalSticksh>
      s_noStickInputs = false;
    3dfa:	10 92 6c 15 	sts	0x156C, r1
      int16_t trim = (anas[i] + trims[i]) / 2;
    3dfe:	f7 01       	movw	r30, r14
    3e00:	80 81       	ld	r24, Z
    3e02:	91 81       	ldd	r25, Z+1	; 0x01
    3e04:	f8 01       	movw	r30, r16
    3e06:	20 81       	ld	r18, Z
    3e08:	31 81       	ldd	r19, Z+1	; 0x01
    3e0a:	82 0f       	add	r24, r18
    3e0c:	93 1f       	adc	r25, r19
    3e0e:	b6 01       	movw	r22, r12
    3e10:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    3e14:	ab 01       	movw	r20, r22
      if (trim < TRIM_EXTENDED_MIN) {
    3e16:	fe ef       	ldi	r31, 0xFE	; 254
    3e18:	6c 30       	cpi	r22, 0x0C	; 12
    3e1a:	7f 07       	cpc	r23, r31
    3e1c:	2c f0       	brlt	.+10     	; 0x3e28 <_Z11instantTrimv+0x92>
        trim = TRIM_EXTENDED_MIN;
      }
      if (trim > TRIM_EXTENDED_MAX) {
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	65 3f       	cpi	r22, 0xF5	; 245
    3e22:	72 07       	cpc	r23, r18
    3e24:	24 f4       	brge	.+8      	; 0x3e2e <_Z11instantTrimv+0x98>
    3e26:	05 c0       	rjmp	.+10     	; 0x3e32 <_Z11instantTrimv+0x9c>
      s_noStickInputs = true;
      evalSticks(phase);
      s_noStickInputs = false;
      int16_t trim = (anas[i] + trims[i]) / 2;
      if (trim < TRIM_EXTENDED_MIN) {
        trim = TRIM_EXTENDED_MIN;
    3e28:	4c e0       	ldi	r20, 0x0C	; 12
    3e2a:	5e ef       	ldi	r21, 0xFE	; 254
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <_Z11instantTrimv+0x9c>
      }
      if (trim > TRIM_EXTENDED_MAX) {
        trim = TRIM_EXTENDED_MAX;
    3e2e:	44 ef       	ldi	r20, 0xF4	; 244
    3e30:	51 e0       	ldi	r21, 0x01	; 1
      }
      setTrimValue(trim_phase, i, trim);
    3e32:	8a 2d       	mov	r24, r10
    3e34:	69 2d       	mov	r22, r9
    3e36:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z12setTrimValuehhi>
    3e3a:	21 96       	adiw	r28, 0x01	; 1
    3e3c:	0e 5f       	subi	r16, 0xFE	; 254
    3e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e40:	82 e0       	ldi	r24, 0x02	; 2
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	e8 0e       	add	r14, r24
    3e46:	f9 1e       	adc	r15, r25

void instantTrim()
{
  uint8_t phase = getFlightPhase();

  for (uint8_t i=0; i<NUM_STICKS; i++) {
    3e48:	c4 30       	cpi	r28, 0x04	; 4
    3e4a:	d1 05       	cpc	r29, r1
    3e4c:	09 f0       	breq	.+2      	; 0x3e50 <_Z11instantTrimv+0xba>
    3e4e:	bf cf       	rjmp	.-130    	; 0x3dce <_Z11instantTrimv+0x38>
      }
      setTrimValue(trim_phase, i, trim);
    }
  }

  STORE_MODELVARS;
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    3e56:	80 91 73 15 	lds	r24, 0x1573
    3e5a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    3e5e:	84 e6       	ldi	r24, 0x64	; 100
    3e60:	87 bd       	out	0x27, r24	; 39
  beepWarn1();
}
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	1f 91       	pop	r17
    3e68:	0f 91       	pop	r16
    3e6a:	ff 90       	pop	r15
    3e6c:	ef 90       	pop	r14
    3e6e:	df 90       	pop	r13
    3e70:	cf 90       	pop	r12
    3e72:	bf 90       	pop	r11
    3e74:	af 90       	pop	r10
    3e76:	9f 90       	pop	r9
    3e78:	8f 90       	pop	r8
    3e7a:	08 95       	ret

00003e7c <_Z18moveTrimsToOffsetsv>:

void moveTrimsToOffsets() // copy state of 3 primary to subtrim
{
    3e7c:	cf 92       	push	r12
    3e7e:	df 92       	push	r13
    3e80:	ef 92       	push	r14
    3e82:	ff 92       	push	r15
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	df 93       	push	r29
    3e8a:	cf 93       	push	r28
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	a0 97       	sbiw	r28, 0x20	; 32
    3e92:	0f b6       	in	r0, 0x3f	; 63
    3e94:	f8 94       	cli
    3e96:	de bf       	out	0x3e, r29	; 62
    3e98:	0f be       	out	0x3f, r0	; 63
    3e9a:	cd bf       	out	0x3d, r28	; 61
  int16_t zero_chans512[NUM_CHNOUT];

  s_noStickInputs = true;
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	80 93 6c 15 	sts	0x156C, r24
  perOut(zero_chans512, getFlightPhase()); // do output loop - zero input sticks
    3ea2:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    3ea6:	68 2f       	mov	r22, r24
    3ea8:	8e 01       	movw	r16, r28
    3eaa:	0f 5f       	subi	r16, 0xFF	; 255
    3eac:	1f 4f       	sbci	r17, 0xFF	; 255
    3eae:	c8 01       	movw	r24, r16
    3eb0:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z6perOutPih>
  s_noStickInputs = false;
    3eb4:	10 92 6c 15 	sts	0x156C, r1
    3eb8:	d8 01       	movw	r26, r16
    3eba:	e2 ec       	ldi	r30, 0xC2	; 194
    3ebc:	f3 e1       	ldi	r31, 0x13	; 19

  STORE_MODELVARS;
  beepWarn1();
}

void moveTrimsToOffsets() // copy state of 3 primary to subtrim
    3ebe:	9e 01       	movw	r18, r28
    3ec0:	2f 5d       	subi	r18, 0xDF	; 223
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
  s_noStickInputs = true;
  perOut(zero_chans512, getFlightPhase()); // do output loop - zero input sticks
  s_noStickInputs = false;

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    g_model.limitData[i].offset = limit((int16_t)-1000, zero_chans512[i], (int16_t)1000); // make sure the offset doesn't go haywire
    3ec4:	8d 91       	ld	r24, X+
    3ec6:	9d 91       	ld	r25, X+
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
    3ec8:	4c ef       	ldi	r20, 0xFC	; 252
    3eca:	88 31       	cpi	r24, 0x18	; 24
    3ecc:	94 07       	cpc	r25, r20
    3ece:	2c f0       	brlt	.+10     	; 0x3eda <_Z18moveTrimsToOffsetsv+0x5e>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
    3ed0:	43 e0       	ldi	r20, 0x03	; 3
    3ed2:	88 3e       	cpi	r24, 0xE8	; 232
    3ed4:	94 07       	cpc	r25, r20
    3ed6:	24 f4       	brge	.+8      	; 0x3ee0 <_Z18moveTrimsToOffsetsv+0x64>
    3ed8:	05 c0       	rjmp	.+10     	; 0x3ee4 <_Z18moveTrimsToOffsetsv+0x68>
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
    3eda:	88 e1       	ldi	r24, 0x18	; 24
    3edc:	9c ef       	ldi	r25, 0xFC	; 252
    3ede:	02 c0       	rjmp	.+4      	; 0x3ee4 <_Z18moveTrimsToOffsetsv+0x68>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
    3ee0:	88 ee       	ldi	r24, 0xE8	; 232
    3ee2:	93 e0       	ldi	r25, 0x03	; 3
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	80 83       	st	Z, r24
    3ee8:	35 96       	adiw	r30, 0x05	; 5

  s_noStickInputs = true;
  perOut(zero_chans512, getFlightPhase()); // do output loop - zero input sticks
  s_noStickInputs = false;

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    3eea:	a2 17       	cp	r26, r18
    3eec:	b3 07       	cpc	r27, r19
    3eee:	51 f7       	brne	.-44     	; 0x3ec4 <_Z18moveTrimsToOffsetsv+0x48>
    3ef0:	00 e0       	ldi	r16, 0x00	; 0
    3ef2:	10 e0       	ldi	r17, 0x00	; 0
    g_model.limitData[i].offset = limit((int16_t)-1000, zero_chans512[i], (int16_t)1000); // make sure the offset doesn't go haywire

  // reset all trims, except throttle
  for (uint8_t i=0; i<4; i++) {
    if (!IS_THROTTLE(i)) {
    3ef4:	a2 e0       	ldi	r26, 0x02	; 2
    3ef6:	ea 2e       	mov	r14, r26
    3ef8:	f1 2c       	mov	r15, r1

  s_noStickInputs = true;
  perOut(zero_chans512, getFlightPhase()); // do output loop - zero input sticks
  s_noStickInputs = false;

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    3efa:	c0 2e       	mov	r12, r16
    g_model.limitData[i].offset = limit((int16_t)-1000, zero_chans512[i], (int16_t)1000); // make sure the offset doesn't go haywire

  // reset all trims, except throttle
  for (uint8_t i=0; i<4; i++) {
    if (!IS_THROTTLE(i)) {
    3efc:	80 91 82 12 	lds	r24, 0x1282
    3f00:	90 e0       	ldi	r25, 0x00	; 0
    3f02:	81 70       	andi	r24, 0x01	; 1
    3f04:	90 70       	andi	r25, 0x00	; 0
    3f06:	97 01       	movw	r18, r14
    3f08:	28 1b       	sub	r18, r24
    3f0a:	39 0b       	sbc	r19, r25
    3f0c:	20 17       	cp	r18, r16
    3f0e:	31 07       	cpc	r19, r17
    3f10:	99 f0       	breq	.+38     	; 0x3f38 <_Z18moveTrimsToOffsetsv+0xbc>
    3f12:	dd 24       	eor	r13, r13
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
        int16_t trim = getTrimValue(phase, i);
    3f14:	8d 2d       	mov	r24, r13
    3f16:	6c 2d       	mov	r22, r12
    3f18:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
        if (trim <= TRIM_EXTENDED_MAX)
    3f1c:	31 e0       	ldi	r19, 0x01	; 1
    3f1e:	85 3f       	cpi	r24, 0xF5	; 245
    3f20:	93 07       	cpc	r25, r19
    3f22:	34 f4       	brge	.+12     	; 0x3f30 <_Z18moveTrimsToOffsetsv+0xb4>
          setTrimValue(phase, i, 0);
    3f24:	8d 2d       	mov	r24, r13
    3f26:	6c 2d       	mov	r22, r12
    3f28:	40 e0       	ldi	r20, 0x00	; 0
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z12setTrimValuehhi>
    g_model.limitData[i].offset = limit((int16_t)-1000, zero_chans512[i], (int16_t)1000); // make sure the offset doesn't go haywire

  // reset all trims, except throttle
  for (uint8_t i=0; i<4; i++) {
    if (!IS_THROTTLE(i)) {
      for (uint8_t phase=0; phase<MAX_PHASES; phase++) {
    3f30:	d3 94       	inc	r13
    3f32:	4d 2d       	mov	r20, r13
    3f34:	45 30       	cpi	r20, 0x05	; 5
    3f36:	71 f7       	brne	.-36     	; 0x3f14 <_Z18moveTrimsToOffsetsv+0x98>
    3f38:	0f 5f       	subi	r16, 0xFF	; 255
    3f3a:	1f 4f       	sbci	r17, 0xFF	; 255

  for (uint8_t i=0; i<NUM_CHNOUT; i++)
    g_model.limitData[i].offset = limit((int16_t)-1000, zero_chans512[i], (int16_t)1000); // make sure the offset doesn't go haywire

  // reset all trims, except throttle
  for (uint8_t i=0; i<4; i++) {
    3f3c:	04 30       	cpi	r16, 0x04	; 4
    3f3e:	11 05       	cpc	r17, r1
    3f40:	e1 f6       	brne	.-72     	; 0x3efa <_Z18moveTrimsToOffsetsv+0x7e>
          setTrimValue(phase, i, 0);
      }
    }
  }

  STORE_MODELVARS;
    3f42:	82 e0       	ldi	r24, 0x02	; 2
    3f44:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    3f48:	80 91 73 15 	lds	r24, 0x1573
    3f4c:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    3f50:	84 e6       	ldi	r24, 0x64	; 100
    3f52:	87 bd       	out	0x27, r24	; 39
  beepWarn1();
}
    3f54:	a0 96       	adiw	r28, 0x20	; 32
    3f56:	0f b6       	in	r0, 0x3f	; 63
    3f58:	f8 94       	cli
    3f5a:	de bf       	out	0x3e, r29	; 62
    3f5c:	0f be       	out	0x3f, r0	; 63
    3f5e:	cd bf       	out	0x3d, r28	; 61
    3f60:	cf 91       	pop	r28
    3f62:	df 91       	pop	r29
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	ff 90       	pop	r15
    3f6a:	ef 90       	pop	r14
    3f6c:	df 90       	pop	r13
    3f6e:	cf 90       	pop	r12
    3f70:	08 95       	ret

00003f72 <__vector_3>:

#if defined (PCBV4)
// Rotary encoder interrupts
uint8_t volatile g_rotenc1, g_rotenc2 = 0;
ISR(INT2_vect)
{
    3f72:	1f 92       	push	r1
    3f74:	0f 92       	push	r0
    3f76:	0f b6       	in	r0, 0x3f	; 63
    3f78:	0f 92       	push	r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	8f 93       	push	r24
  uint8_t input = PIND & 0b00001100;
    3f7e:	89 b1       	in	r24, 0x09	; 9
    3f80:	8c 70       	andi	r24, 0x0C	; 12
  if (input == 0 || input == 0b00001100) g_rotenc1--;
    3f82:	11 f0       	breq	.+4      	; 0x3f88 <__vector_3+0x16>
    3f84:	8c 30       	cpi	r24, 0x0C	; 12
    3f86:	29 f4       	brne	.+10     	; 0x3f92 <__vector_3+0x20>
    3f88:	80 91 91 18 	lds	r24, 0x1891
    3f8c:	81 50       	subi	r24, 0x01	; 1
    3f8e:	80 93 91 18 	sts	0x1891, r24
}
    3f92:	8f 91       	pop	r24
    3f94:	0f 90       	pop	r0
    3f96:	0f be       	out	0x3f, r0	; 63
    3f98:	0f 90       	pop	r0
    3f9a:	1f 90       	pop	r1
    3f9c:	18 95       	reti

00003f9e <__vector_4>:
ISR(INT3_vect)
{
    3f9e:	1f 92       	push	r1
    3fa0:	0f 92       	push	r0
    3fa2:	0f b6       	in	r0, 0x3f	; 63
    3fa4:	0f 92       	push	r0
    3fa6:	11 24       	eor	r1, r1
    3fa8:	8f 93       	push	r24
  uint8_t input = PIND & 0b00001100;
    3faa:	89 b1       	in	r24, 0x09	; 9
    3fac:	8c 70       	andi	r24, 0x0C	; 12
  if (input == 0 || input == 0b00001100) g_rotenc1++;
    3fae:	11 f0       	breq	.+4      	; 0x3fb4 <__vector_4+0x16>
    3fb0:	8c 30       	cpi	r24, 0x0C	; 12
    3fb2:	29 f4       	brne	.+10     	; 0x3fbe <__vector_4+0x20>
    3fb4:	80 91 91 18 	lds	r24, 0x1891
    3fb8:	8f 5f       	subi	r24, 0xFF	; 255
    3fba:	80 93 91 18 	sts	0x1891, r24
}
    3fbe:	8f 91       	pop	r24
    3fc0:	0f 90       	pop	r0
    3fc2:	0f be       	out	0x3f, r0	; 63
    3fc4:	0f 90       	pop	r0
    3fc6:	1f 90       	pop	r1
    3fc8:	18 95       	reti

00003fca <__vector_6>:

ISR(INT5_vect)
{
    3fca:	1f 92       	push	r1
    3fcc:	0f 92       	push	r0
    3fce:	0f b6       	in	r0, 0x3f	; 63
    3fd0:	0f 92       	push	r0
    3fd2:	11 24       	eor	r1, r1
    3fd4:	8f 93       	push	r24
  uint8_t input = PINE & 0b01100000;
    3fd6:	8c b1       	in	r24, 0x0c	; 12
    3fd8:	80 76       	andi	r24, 0x60	; 96
  if (input == 0 || input == 0b01100000) g_rotenc2++;
    3fda:	11 f0       	breq	.+4      	; 0x3fe0 <__vector_6+0x16>
    3fdc:	80 36       	cpi	r24, 0x60	; 96
    3fde:	29 f4       	brne	.+10     	; 0x3fea <__vector_6+0x20>
    3fe0:	80 91 92 18 	lds	r24, 0x1892
    3fe4:	8f 5f       	subi	r24, 0xFF	; 255
    3fe6:	80 93 92 18 	sts	0x1892, r24
}
    3fea:	8f 91       	pop	r24
    3fec:	0f 90       	pop	r0
    3fee:	0f be       	out	0x3f, r0	; 63
    3ff0:	0f 90       	pop	r0
    3ff2:	1f 90       	pop	r1
    3ff4:	18 95       	reti

00003ff6 <__vector_7>:
ISR(INT6_vect)
{
    3ff6:	1f 92       	push	r1
    3ff8:	0f 92       	push	r0
    3ffa:	0f b6       	in	r0, 0x3f	; 63
    3ffc:	0f 92       	push	r0
    3ffe:	11 24       	eor	r1, r1
    4000:	8f 93       	push	r24
  uint8_t input = PINE & 0b01100000;
    4002:	8c b1       	in	r24, 0x0c	; 12
    4004:	80 76       	andi	r24, 0x60	; 96
  if (input == 0 || input == 0b01100000) g_rotenc2--;
    4006:	11 f0       	breq	.+4      	; 0x400c <__vector_7+0x16>
    4008:	80 36       	cpi	r24, 0x60	; 96
    400a:	29 f4       	brne	.+10     	; 0x4016 <__vector_7+0x20>
    400c:	80 91 92 18 	lds	r24, 0x1892
    4010:	81 50       	subi	r24, 0x01	; 1
    4012:	80 93 92 18 	sts	0x1892, r24
}
    4016:	8f 91       	pop	r24
    4018:	0f 90       	pop	r0
    401a:	0f be       	out	0x3f, r0	; 63
    401c:	0f 90       	pop	r0
    401e:	1f 90       	pop	r1
    4020:	18 95       	reti

00004022 <_Z10stack_freev>:
#ifndef SIMU

extern unsigned char __bss_end ;

uint16_t stack_free()
{
    4022:	ee e2       	ldi	r30, 0x2E	; 46
    4024:	f2 e2       	ldi	r31, 0x22	; 34
  unsigned char *p ;

  p = &__bss_end + 1 ;
  while ( *p == 0x55 )
    4026:	9f 01       	movw	r18, r30
    4028:	81 91       	ld	r24, Z+
    402a:	85 35       	cpi	r24, 0x55	; 85
    402c:	e1 f3       	breq	.-8      	; 0x4026 <_Z10stack_freev+0x4>
  {
    p+= 1 ;
  }
  return p - &__bss_end ;
    402e:	2d 52       	subi	r18, 0x2D	; 45
    4030:	32 42       	sbci	r19, 0x22	; 34
}
    4032:	c9 01       	movw	r24, r18
    4034:	08 95       	ret

00004036 <main>:

int main(void)
{
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	df 93       	push	r29
    403c:	cf 93       	push	r28
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	61 97       	sbiw	r28, 0x11	; 17
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
  // Disbale WDT to prevent 15ms cyclic reboot bug (Issue 98)
#if defined (PCBV3)
  MCUSR = 0; // must be zeroed before disabling the WDT 
    404e:	14 be       	out	0x34, r1	; 52
#else
  MCUCSR = 0;
#endif
  wdt_disable();
    4050:	88 e1       	ldi	r24, 0x18	; 24
    4052:	0f b6       	in	r0, 0x3f	; 63
    4054:	f8 94       	cli
    4056:	80 93 60 00 	sts	0x0060, r24
    405a:	10 92 60 00 	sts	0x0060, r1
    405e:	0f be       	out	0x3f, r0	; 63

  // Set up I/O port data directions and initial states
  DDRA = 0xff;  PORTA = 0x00; // LCD data
    4060:	8f ef       	ldi	r24, 0xFF	; 255
    4062:	81 b9       	out	0x01, r24	; 1
    4064:	12 b8       	out	0x02, r1	; 2

#if defined (PCBV4)
  DDRB = 0b11000111;  PORTB = 0b00111111; // 7:SPKR, 6:PPM_OUT,  5:TrainSW,  4:IDL2_SW, SDCARD[3:MISO 2:MOSI 1:SCK 0:CS]
    4066:	97 ec       	ldi	r25, 0xC7	; 199
    4068:	94 b9       	out	0x04, r25	; 4
    406a:	9f e3       	ldi	r25, 0x3F	; 63
    406c:	95 b9       	out	0x05, r25	; 5
  DDRC = 0x3f;  PORTC = 0xc0; // 7:AilDR, 6:EleDR, LCD[5,4,3,2,1], 0:BackLight
    406e:	97 b9       	out	0x07, r25	; 7
    4070:	90 ec       	ldi	r25, 0xC0	; 192
    4072:	98 b9       	out	0x08, r25	; 8
  DDRD = 0x00;  PORTD = 0b11111100; // 7/6:Spare3/4, 5:RENC2_PUSH, 4:RENC1_PUSH, 3:RENC2_B, 2:RENC2_A, 1:I2C_SDA, 0:I2C_SCL
    4074:	1a b8       	out	0x0a, r1	; 10
    4076:	9c ef       	ldi	r25, 0xFC	; 252
    4078:	9b b9       	out	0x0b, r25	; 11
  DDRE = 0b00001010;  PORTE = 0b11110101; // 7:PPM_IN, 6: RENC1_B, 5:RENC1_A, 4:USB_DNEG, 3:BUZZER, 2:USB_DPOS, 1:TELEM_TX, 0:TELEM_RX
    407a:	0a e0       	ldi	r16, 0x0A	; 10
    407c:	0d b9       	out	0x0d, r16	; 13
    407e:	95 ef       	ldi	r25, 0xF5	; 245
    4080:	9e b9       	out	0x0e, r25	; 14
  DDRF = 0x00;  PORTF = 0x00; // 7-4:JTAG, 3:ADC_REF_1.2V input, 2-0:ADC_SPARE_2-0
    4082:	10 ba       	out	0x10, r1	; 16
    4084:	11 ba       	out	0x11, r1	; 17
  DDRG = 0b00010000;  PORTG = 0xff; // 7-6:N/A, 5:GearSW, 4: Sim_Ctrl[out], 3:IDL1_Sw, 2:TCut_Sw, 1:RF_Power[in], 0: RudDr_Sw 
    4086:	90 e1       	ldi	r25, 0x10	; 16
    4088:	93 bb       	out	0x13, r25	; 19
    408a:	84 bb       	out	0x14, r24	; 20
  DDRH = 0x00;  PORTH = 0xff; // 7:0 Spare port -- all inputs for now [Bit 2:VIB_OPTION -- setting to input for now]
    408c:	10 92 01 01 	sts	0x0101, r1
    4090:	80 93 02 01 	sts	0x0102, r24
  DDRJ = 0x00;  PORTJ = 0xff; // 7-0:Trim switch inputs
    4094:	10 92 04 01 	sts	0x0104, r1
    4098:	80 93 05 01 	sts	0x0105, r24
  DDRK = 0x00;  PORTK = 0x00; // anain. No pull-ups!
    409c:	10 92 07 01 	sts	0x0107, r1
    40a0:	10 92 08 01 	sts	0x0108, r1
  DDRL = 0x80;  PORTL = 0x7f; // 7: Hold_PWR_On (1=On, default Off), 6:Jack_Presence_TTL, 5-0: User Button inputs
    40a4:	80 e8       	ldi	r24, 0x80	; 128
    40a6:	80 93 0a 01 	sts	0x010A, r24
    40aa:	8f e7       	ldi	r24, 0x7F	; 127
    40ac:	80 93 0b 01 	sts	0x010B, r24
  DDRE = (1<<OUT_E_BUZZER);  PORTE = 0xff-(1<<OUT_E_BUZZER); //pullups + buzzer 0
  DDRF = 0x00;  PORTF = 0x00; //anain
  DDRG = 0x10;  PORTG = 0xff; //pullups + SIM_CTL=1 = phonejack = ppm_in
#endif

  lcd_init();
    40b0:	0e 94 a0 6c 	call	0xd940	; 0xd940 <_Z8lcd_initv>

  ADMUX=ADC_VREF_TYPE;
    40b4:	80 e4       	ldi	r24, 0x40	; 64
    40b6:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA=0x85; // ADC enabled, pre-scaler division=32 (no interrupt, no auto-triggering)
    40ba:	85 e8       	ldi	r24, 0x85	; 133
    40bc:	80 93 7a 00 	sts	0x007A, r24
#if defined (PCBV4)
  ADCSRB=(1<<MUX5);
    40c0:	88 e0       	ldi	r24, 0x08	; 8
    40c2:	80 93 7b 00 	sts	0x007B, r24
#if defined (PCBV3)
  /** Move old 64A Timer0 functions to Timer2 and use WGM on OC0(A) (PB7) for spkear tone output **/

  // TCNT0  10ms = 16MHz/1024/156(.25) periodic timer (100ms interval)
  //        cycles at 9.984ms but includes 1:4 duty cycle correction to /157 to average at 10.0ms
  TCCR2B  = (0b111 << CS20); // Norm mode, clk/1024 (differs from ATmega64 chip)
    40c6:	87 e0       	ldi	r24, 0x07	; 7
    40c8:	80 93 b1 00 	sts	0x00B1, r24
  OCR2A   = 156;
    40cc:	8c e9       	ldi	r24, 0x9C	; 156
    40ce:	80 93 b3 00 	sts	0x00B3, r24
  TIMSK2 |= (1<<OCIE2A) |  (1<<TOIE2); // Enable Output-Compare and Overflow interrrupts
    40d2:	80 91 70 00 	lds	r24, 0x0070
    40d6:	83 60       	ori	r24, 0x03	; 3
    40d8:	80 93 70 00 	sts	0x0070, r24

  // Set up Phase correct Waveform Gen. mode, at clk/64 = 250,000 counts/second
  // (Higher speed allows for finer control of frquencies in the audio range.)
  // Used for audio tone generation
  TCCR0B  = (1<<WGM02) | (0b011 << CS00);
    40dc:	8b e0       	ldi	r24, 0x0B	; 11
    40de:	85 bd       	out	0x25, r24	; 37
  TCCR0A  = (0b01<<WGM00);
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	84 bd       	out	0x24, r24	; 36

#endif

  // TCNT1 2MHz counter (auto-cleared) plus Capture Compare int.
  //       Used for PPM pulse generator
  TCCR1B = (1 << WGM12) | (2<<CS10); // CTC OCR1A, 16MHz / 8
    40e4:	00 93 81 00 	sts	0x0081, r16
#if defined (PPMIN_MOD1) || (defined (PCBV3) && !defined (PCBV4)) 
  // Noise Canceller enabled, pos. edge, clock at 16MHz / 8 (2MHz)
  TCCR3B  = (1<<ICNC3) | (1<<ICES3) | (0b010 << CS30);
#else
  // Noise Canceller enabled, neg. edge, clock at 16MHz / 8 (2MHz) (Correct for PCB V4.x+ also)
  TCCR3B  = (1<<ICNC3) | (0b010 << CS30);
    40e8:	82 e8       	ldi	r24, 0x82	; 130
    40ea:	80 93 91 00 	sts	0x0091, r24
#endif

#if defined (PCBV3)
  TIMSK3 |= (1<<ICIE3);         // Enable Timer 3 (PPM_IN) capture event interrupt
    40ee:	80 91 71 00 	lds	r24, 0x0071
    40f2:	80 62       	ori	r24, 0x20	; 32
    40f4:	80 93 71 00 	sts	0x0071, r24
#define STACKPTR     _SFR_IO16(0x3D)
  {
    unsigned char *p ;
    unsigned char *q ;

    p = (unsigned char *) STACKPTR ;
    40f8:	ed b7       	in	r30, 0x3d	; 61
    40fa:	fe b7       	in	r31, 0x3e	; 62
    q = &__bss_end ;
    p -= 2 ;
    40fc:	32 97       	sbiw	r30, 0x02	; 2
    while ( p > q )
    {
      *p-- = 0x55 ;
    40fe:	85 e5       	ldi	r24, 0x55	; 85
    unsigned char *q ;

    p = (unsigned char *) STACKPTR ;
    q = &__bss_end ;
    p -= 2 ;
    while ( p > q )
    4100:	02 c0       	rjmp	.+4      	; 0x4106 <main+0xd0>
    {
      *p-- = 0x55 ;
    4102:	80 83       	st	Z, r24
    4104:	31 97       	sbiw	r30, 0x01	; 1
    unsigned char *q ;

    p = (unsigned char *) STACKPTR ;
    q = &__bss_end ;
    p -= 2 ;
    while ( p > q )
    4106:	92 e2       	ldi	r25, 0x22	; 34
    4108:	ed 32       	cpi	r30, 0x2D	; 45
    410a:	f9 07       	cpc	r31, r25
    410c:	09 f0       	breq	.+2      	; 0x4110 <main+0xda>
    410e:	c8 f7       	brcc	.-14     	; 0x4102 <main+0xcc>
    {
      *p-- = 0x55 ;
    }
  }

  g_menuStack[0] = menuMainView;
    4110:	8c ec       	ldi	r24, 0xCC	; 204
    4112:	92 e5       	ldi	r25, 0x52	; 82
    4114:	90 93 3d 19 	sts	0x193D, r25
    4118:	80 93 3c 19 	sts	0x193C, r24
  g_menuStack[1] = menuProcModelSelect;
    411c:	81 e1       	ldi	r24, 0x11	; 17
    411e:	94 e3       	ldi	r25, 0x34	; 52
    4120:	90 93 3f 19 	sts	0x193F, r25
    4124:	80 93 3e 19 	sts	0x193E, r24

  lcdSetRefVolt(25);
    4128:	89 e1       	ldi	r24, 0x19	; 25
    412a:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>

  sei(); // interrupts needed for FRSKY_Init and eeReadAll functions.
    412e:	78 94       	sei

#if defined (FRSKY)
  FRSKY_Init();
    4130:	0e 94 f8 a5 	call	0x14bf0	; 0x14bf0 <_Z10FRSKY_Initv>

#ifdef JETI
  JETI_Init();
#endif

  sei(); // interrupts needed for eeReadAll function.
    4134:	78 94       	sei

  eeReadAll();
    4136:	0e 94 a1 60 	call	0xc142	; 0xc142 <_Z9eeReadAllv>

  uint8_t cModel = g_eeGeneral.currModel;
    413a:	00 91 6b 12 	lds	r16, 0x126B

#if defined (PCBV3)
  if (~MCUSR & (1 << WDRF)) {
    413e:	04 b6       	in	r0, 0x34	; 52
    4140:	03 fc       	sbrc	r0, 3
    4142:	0c c0       	rjmp	.+24     	; 0x415c <main+0x126>
#else
  if (~MCUCSR & (1 << WDRF)) {
#endif
    doSplash();
    4144:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <_Z8doSplashv>
    checkLowEEPROM();
    4148:	0e 94 cb 0c 	call	0x1996	; 0x1996 <_Z14checkLowEEPROMv>

    getADC_single();
    414c:	0e 94 5d 06 	call	0xcba	; 0xcba <_Z13getADC_singlev>
    checkTHR();
    4150:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <_Z8checkTHRv>

    checkSwitches();
    4154:	0e 94 24 0c 	call	0x1848	; 0x1848 <_Z13checkSwitchesv>
    checkAlarm();
    4158:	0e 94 bf 0c 	call	0x197e	; 0x197e <_Z10checkAlarmv>
  }

  clearKeyEvents(); //make sure no keys are down before proceeding
    415c:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <_Z14clearKeyEventsv>

  perOut(g_chans512, getFlightPhase());
    4160:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    4164:	68 2f       	mov	r22, r24
    4166:	89 e1       	ldi	r24, 0x19	; 25
    4168:	99 e1       	ldi	r25, 0x19	; 25
    416a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <_Z6perOutPih>

  lcdSetRefVolt(g_eeGeneral.contrast);
    416e:	80 91 6c 12 	lds	r24, 0x126C
    4172:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>
  g_LightOffCounter = g_eeGeneral.lightAutoOff*500; //turn on light for x seconds - no need to press key Issue 152
    4176:	40 91 86 12 	lds	r20, 0x1286
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	24 ef       	ldi	r18, 0xF4	; 244
    417e:	31 e0       	ldi	r19, 0x01	; 1
    4180:	42 9f       	mul	r20, r18
    4182:	c0 01       	movw	r24, r0
    4184:	43 9f       	mul	r20, r19
    4186:	90 0d       	add	r25, r0
    4188:	52 9f       	mul	r21, r18
    418a:	90 0d       	add	r25, r0
    418c:	11 24       	eor	r1, r1
    418e:	90 93 7c 15 	sts	0x157C, r25
    4192:	80 93 7b 15 	sts	0x157B, r24

  if(cModel!=g_eeGeneral.currModel) eeDirty(EE_GENERAL); // if model was quick-selected, make sure it sticks
    4196:	80 91 6b 12 	lds	r24, 0x126B
    419a:	08 17       	cp	r16, r24
    419c:	19 f0       	breq	.+6      	; 0x41a4 <main+0x16e>
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

#if defined (PCBV3)
// Initialise global unix timestamp with current time from RTC chip on SD card interface
  RTC rtc;
  struct tm utm;
  rtc_gettime(&rtc);
    41a4:	ce 01       	movw	r24, r28
    41a6:	01 96       	adiw	r24, 0x01	; 1
    41a8:	0e 94 03 77 	call	0xee06	; 0xee06 <_Z11rtc_gettimeP3RTC>
  utm.tm_year = rtc.year - 1900;
    41ac:	89 81       	ldd	r24, Y+1	; 0x01
    41ae:	8c 56       	subi	r24, 0x6C	; 108
    41b0:	8e 87       	std	Y+14, r24	; 0x0e
  utm.tm_mon =  rtc.month - 1;
    41b2:	8b 81       	ldd	r24, Y+3	; 0x03
    41b4:	81 50       	subi	r24, 0x01	; 1
    41b6:	8d 87       	std	Y+13, r24	; 0x0d
  utm.tm_mday = rtc.mday;
    41b8:	8c 81       	ldd	r24, Y+4	; 0x04
    41ba:	8c 87       	std	Y+12, r24	; 0x0c
  utm.tm_hour = rtc.hour;
    41bc:	8e 81       	ldd	r24, Y+6	; 0x06
    41be:	8b 87       	std	Y+11, r24	; 0x0b
  utm.tm_min =  rtc.min;
    41c0:	8f 81       	ldd	r24, Y+7	; 0x07
    41c2:	8a 87       	std	Y+10, r24	; 0x0a
  utm.tm_sec =  rtc.sec;
    41c4:	88 85       	ldd	r24, Y+8	; 0x08
    41c6:	89 87       	std	Y+9, r24	; 0x09
  utm.tm_wday = rtc.wday - 1;
    41c8:	8d 81       	ldd	r24, Y+5	; 0x05
    41ca:	81 50       	subi	r24, 0x01	; 1
    41cc:	8f 87       	std	Y+15, r24	; 0x0f
  g_unixTime = mktime(&utm);
    41ce:	ce 01       	movw	r24, r28
    41d0:	09 96       	adiw	r24, 0x09	; 9
    41d2:	0e 94 cc 75 	call	0xeb98	; 0xeb98 <_Z6mktimeP2tm>
    41d6:	60 93 3a 12 	sts	0x123A, r22
    41da:	70 93 3b 12 	sts	0x123B, r23
    41de:	80 93 3c 12 	sts	0x123C, r24
    41e2:	90 93 3d 12 	sts	0x123D, r25
/***************************************************/
/* Rotary encoder interrupt set-up (V4 board only) */

// All external interrupts initialise to disabled. But maybe not after 
// a WDT or BOD event? So to be safe ...
EIMSK = 0; // disable ALL external interrupts.
    41e6:	1d ba       	out	0x1d, r1	; 29

// encoder 1
EICRB = (1<<ISC60) | (1<<ISC50); // 01 = interrupt on any edge
    41e8:	84 e1       	ldi	r24, 0x14	; 20
    41ea:	80 93 6a 00 	sts	0x006A, r24
EIFR = (3<<INTF5); // clear the int. flag in case it got set when changing modes
    41ee:	80 e6       	ldi	r24, 0x60	; 96
    41f0:	8c bb       	out	0x1c, r24	; 28

// encoder 2
EICRA = (1<<ISC30) | (1<<ISC20); // do the same for encoder 1
    41f2:	80 e5       	ldi	r24, 0x50	; 80
    41f4:	80 93 69 00 	sts	0x0069, r24
EIFR = (3<<INTF2);
    41f8:	8c e0       	ldi	r24, 0x0C	; 12
    41fa:	8c bb       	out	0x1c, r24	; 28

EIMSK = (3<<INT5) | (3<<INT2); // enable the two rot. enc. ext. int. pairs.
    41fc:	8c e6       	ldi	r24, 0x6C	; 108
    41fe:	8d bb       	out	0x1d, r24	; 29
#endif

/***********************************************************/
/*** Keep this code block directly before the main loop ****/
  
  setupPulses();
    4200:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <_Z11setupPulsesv>

#if defined (PCBV4)
    OCR1B = 0xffff; /* Prevent any PPM_PUT pin toggle before the TCNT1 interrupt 
    4204:	8f ef       	ldi	r24, 0xFF	; 255
    4206:	9f ef       	ldi	r25, 0xFF	; 255
    4208:	90 93 8b 00 	sts	0x008B, r25
    420c:	80 93 8a 00 	sts	0x008A, r24
                       fires for the first time and sets up the pulse period. */
    // TCCR1A |= (1<<COM1B0); // (COM1B1=0 and COM1B0=1 in TCCR1A)  toogle the state of PB6(OC1B) on each TCNT1==OCR1B
    TCCR1A = (3<<COM1B0); // Connect OC1B to PPM_OUT pin (SET the state of PB6(OC1B) on next TCNT1==OCR1B)
    4210:	80 e3       	ldi	r24, 0x30	; 48
    4212:	80 93 80 00 	sts	0x0080, r24
    TCCR1A |= (1<<COM1C0); // (COM1C1=0 and COM1C0=1 in TCCR1A)  toogle the state of PB7(OC1C) on each TCNT1==OCR1C
#  endif
#endif

#if defined (PCBV3)
  TIMSK1 |= (1<<OCIE1A); // Pulse generator enable immediately before mainloop
    4216:	80 91 6f 00 	lds	r24, 0x006F
    421a:	82 60       	ori	r24, 0x02	; 2
    421c:	80 93 6f 00 	sts	0x006F, r24
#else
  TIMSK |= (1<<OCIE1A); // Pulse generator enable immediately before mainloop
#endif

  wdt_enable(WDTO_500MS);
    4220:	2d e0       	ldi	r18, 0x0D	; 13
    4222:	88 e1       	ldi	r24, 0x18	; 24
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	a8 95       	wdr
    422c:	80 93 60 00 	sts	0x0060, r24
    4230:	0f be       	out	0x3f, r0	; 63
    4232:	20 93 60 00 	sts	0x0060, r18
/*** Keep this code block directly before the main loop ****/
/***********************************************************/

  while(1){
    uint16_t t0 = getTmr16KHz();
    4236:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_Z11getTmr16KHzv>
    423a:	8c 01       	movw	r16, r24
    getADC[g_eeGeneral.filterInput]();
    423c:	e0 91 85 12 	lds	r30, 0x1285
    4240:	f0 e0       	ldi	r31, 0x00	; 0
    4242:	ee 0f       	add	r30, r30
    4244:	ff 1f       	adc	r31, r31
    4246:	ec 58       	subi	r30, 0x8C	; 140
    4248:	f9 4f       	sbci	r31, 0xF9	; 249
    424a:	01 90       	ld	r0, Z+
    424c:	f0 81       	ld	r31, Z
    424e:	e0 2d       	mov	r30, r0
    4250:	19 95       	eicall
    getADC_bandgap() ;
    4252:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <_Z14getADC_bandgapv>
    perMain();
    4256:	0e 94 88 18 	call	0x3110	; 0x3110 <_Z7perMainv>

    if(heartbeat == 0x3)
    425a:	80 91 8f 18 	lds	r24, 0x188F
    425e:	83 30       	cpi	r24, 0x03	; 3
    4260:	19 f4       	brne	.+6      	; 0x4268 <main+0x232>
    {
      wdt_reset();
    4262:	a8 95       	wdr
      heartbeat = 0;
    4264:	10 92 8f 18 	sts	0x188F, r1
    }
    t0 = getTmr16KHz() - t0;
    4268:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <_Z11getTmr16KHzv>
    g_timeMain = max(g_timeMain,t0);
    426c:	20 91 67 15 	lds	r18, 0x1567
    4270:	30 91 68 15 	lds	r19, 0x1568
    4274:	80 1b       	sub	r24, r16
    4276:	91 0b       	sbc	r25, r17
    4278:	82 17       	cp	r24, r18
    427a:	93 07       	cpc	r25, r19
    427c:	08 f4       	brcc	.+2      	; 0x4280 <main+0x24a>
    427e:	c9 01       	movw	r24, r18
    4280:	90 93 68 15 	sts	0x1568, r25
    4284:	80 93 67 15 	sts	0x1567, r24

  wdt_enable(WDTO_500MS);
/*** Keep this code block directly before the main loop ****/
/***********************************************************/

  while(1){
    4288:	d6 cf       	rjmp	.-84     	; 0x4236 <main+0x200>

0000428a <_Z5minitv>:
  var = checkIncDecGen(event,var,min,max)

// Menus related stuff ...
extern uint8_t m_posVert;
extern uint8_t m_posHorz;
inline void minit(){m_posVert=m_posHorz=0;}
    428a:	10 92 4c 19 	sts	0x194C, r1
    428e:	10 92 4b 19 	sts	0x194B, r1
    4292:	08 95       	ret

00004294 <_Z14menu_lcd_onoffhhhh>:
uint8_t s_noScroll;

int16_t g_chans512[NUM_CHNOUT];

void menu_lcd_onoff( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
    4294:	0f 93       	push	r16
  lcd_putsnAtt( x, y, PSTR("OFFON ")+3*value,3,mode ? INVERS:0) ;
    4296:	93 e0       	ldi	r25, 0x03	; 3
    4298:	49 9f       	mul	r20, r25
    429a:	a0 01       	movw	r20, r0
    429c:	11 24       	eor	r1, r1
    429e:	42 5b       	subi	r20, 0xB2	; 178
    42a0:	5d 4f       	sbci	r21, 0xFD	; 253
    42a2:	22 23       	and	r18, r18
    42a4:	11 f0       	breq	.+4      	; 0x42aa <_Z14menu_lcd_onoffhhhh+0x16>
    42a6:	02 e0       	ldi	r16, 0x02	; 2
    42a8:	01 c0       	rjmp	.+2      	; 0x42ac <_Z14menu_lcd_onoffhhhh+0x18>
    42aa:	00 e0       	ldi	r16, 0x00	; 0
    42ac:	23 e0       	ldi	r18, 0x03	; 3
    42ae:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    42b2:	0f 91       	pop	r16
    42b4:	08 95       	ret

000042b6 <_Z16menu_lcd_HYPHINVhhhh>:

void menu_lcd_HYPHINV( uint8_t x,uint8_t y, uint8_t value, uint8_t mode )
{
    42b6:	0f 93       	push	r16
  lcd_putsnAtt( x, y, PSTR("---INV")+3*value,3,mode ? INVERS:0) ;
    42b8:	93 e0       	ldi	r25, 0x03	; 3
    42ba:	49 9f       	mul	r20, r25
    42bc:	a0 01       	movw	r20, r0
    42be:	11 24       	eor	r1, r1
    42c0:	49 5b       	subi	r20, 0xB9	; 185
    42c2:	5d 4f       	sbci	r21, 0xFD	; 253
    42c4:	22 23       	and	r18, r18
    42c6:	11 f0       	breq	.+4      	; 0x42cc <_Z16menu_lcd_HYPHINVhhhh+0x16>
    42c8:	02 e0       	ldi	r16, 0x02	; 2
    42ca:	01 c0       	rjmp	.+2      	; 0x42ce <_Z16menu_lcd_HYPHINVhhhh+0x18>
    42cc:	00 e0       	ldi	r16, 0x00	; 0
    42ce:	23 e0       	ldi	r18, 0x03	; 3
    42d0:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    42d4:	0f 91       	pop	r16
    42d6:	08 95       	ret

000042d8 <_Z18DisplayScreenIndexhhh>:

void DisplayScreenIndex(uint8_t index, uint8_t count, uint8_t attr)
{
    42d8:	1f 93       	push	r17
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	18 2f       	mov	r17, r24
    42e0:	d6 2f       	mov	r29, r22
    42e2:	c4 2f       	mov	r28, r20
  lcd_outdezAtt(128,0,count,attr);
    42e4:	80 e8       	ldi	r24, 0x80	; 128
    42e6:	60 e0       	ldi	r22, 0x00	; 0
    42e8:	4d 2f       	mov	r20, r29
    42ea:	50 e0       	ldi	r21, 0x00	; 0
    42ec:	2c 2f       	mov	r18, r28
    42ee:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  lcd_putcAtt(1+128-FW*(count>9 ? 3 : 2),0,'/',attr);
    42f2:	da 30       	cpi	r29, 0x0A	; 10
    42f4:	10 f0       	brcs	.+4      	; 0x42fa <_Z18DisplayScreenIndexhhh+0x22>
    42f6:	8f e6       	ldi	r24, 0x6F	; 111
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <_Z18DisplayScreenIndexhhh+0x24>
    42fa:	85 e7       	ldi	r24, 0x75	; 117
    42fc:	60 e0       	ldi	r22, 0x00	; 0
    42fe:	4f e2       	ldi	r20, 0x2F	; 47
    4300:	2c 2f       	mov	r18, r28
    4302:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
  lcd_outdezAtt(1+128-FW*(count>9 ? 3 : 2),0,index+1,attr);
    4306:	da 30       	cpi	r29, 0x0A	; 10
    4308:	10 f0       	brcs	.+4      	; 0x430e <_Z18DisplayScreenIndexhhh+0x36>
    430a:	8f e6       	ldi	r24, 0x6F	; 111
    430c:	01 c0       	rjmp	.+2      	; 0x4310 <_Z18DisplayScreenIndexhhh+0x38>
    430e:	85 e7       	ldi	r24, 0x75	; 117
    4310:	41 2f       	mov	r20, r17
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	4f 5f       	subi	r20, 0xFF	; 255
    4316:	5f 4f       	sbci	r21, 0xFF	; 255
    4318:	60 e0       	ldi	r22, 0x00	; 0
    431a:	2c 2f       	mov	r18, r28
    431c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
}
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	1f 91       	pop	r17
    4326:	08 95       	ret

00004328 <_Z11checkIncDechiiih>:

int16_t p1valdiff;
int8_t  checkIncDec_Ret;
int16_t checkIncDec(uint8_t event, int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags)
{
    4328:	6f 92       	push	r6
    432a:	7f 92       	push	r7
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	0f 93       	push	r16
    433c:	1f 93       	push	r17
    433e:	df 93       	push	r29
    4340:	cf 93       	push	r28
    4342:	0f 92       	push	r0
    4344:	cd b7       	in	r28, 0x3d	; 61
    4346:	de b7       	in	r29, 0x3e	; 62
    4348:	18 2f       	mov	r17, r24
    434a:	3b 01       	movw	r6, r22
    434c:	5a 01       	movw	r10, r20
    434e:	69 01       	movw	r12, r18
    4350:	90 2e       	mov	r9, r16
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
    4352:	84 ff       	sbrs	r24, 4
    4354:	05 c0       	rjmp	.+10     	; 0x4360 <_Z11checkIncDechiiih+0x38>
    uint8_t hlp=kpl;
    kpl=kmi;
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
    4356:	1f 70       	andi	r17, 0x0F	; 15
    4358:	10 66       	ori	r17, 0x60	; 96
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
    uint8_t hlp=kpl;
    kpl=kmi;
    kmi=hlp;
    435a:	24 e0       	ldi	r18, 0x04	; 4
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;

  if(event & _MSK_KEY_DBL){ 
    uint8_t hlp=kpl;
    kpl=kmi;
    435c:	05 e0       	ldi	r16, 0x05	; 5
    435e:	02 c0       	rjmp	.+4      	; 0x4364 <_Z11checkIncDechiiih+0x3c>
int16_t p1valdiff;
int8_t  checkIncDec_Ret;
int16_t checkIncDec(uint8_t event, int16_t val, int16_t i_min, int16_t i_max, uint8_t i_flags)
{
  int16_t newval = val;
  uint8_t kpl=KEY_RIGHT, kmi=KEY_LEFT, kother = -1;
    4360:	25 e0       	ldi	r18, 0x05	; 5
    4362:	04 e0       	ldi	r16, 0x04	; 4
    uint8_t hlp=kpl;
    kpl=kmi;
    kmi=hlp;
    event=EVT_KEY_FIRST(EVT_KEY_MASK & event);
  }
  if(event==EVT_KEY_FIRST(kpl) || event== EVT_KEY_REPT(kpl) || (s_editMode && (event==EVT_KEY_FIRST(KEY_UP) || event== EVT_KEY_REPT(KEY_UP))) ) {
    4364:	80 2f       	mov	r24, r16
    4366:	80 66       	ori	r24, 0x60	; 96
    4368:	18 17       	cp	r17, r24
    436a:	61 f0       	breq	.+24     	; 0x4384 <_Z11checkIncDechiiih+0x5c>
    436c:	80 2f       	mov	r24, r16
    436e:	80 64       	ori	r24, 0x40	; 64
    4370:	18 17       	cp	r17, r24
    4372:	41 f0       	breq	.+16     	; 0x4384 <_Z11checkIncDechiiih+0x5c>
    4374:	80 91 16 19 	lds	r24, 0x1916
    4378:	88 23       	and	r24, r24
    437a:	81 f0       	breq	.+32     	; 0x439c <_Z11checkIncDechiiih+0x74>
    437c:	13 36       	cpi	r17, 0x63	; 99
    437e:	11 f0       	breq	.+4      	; 0x4384 <_Z11checkIncDechiiih+0x5c>
    4380:	13 34       	cpi	r17, 0x43	; 67
    4382:	61 f4       	brne	.+24     	; 0x439c <_Z11checkIncDechiiih+0x74>
    newval++;
    4384:	73 01       	movw	r14, r6
    4386:	08 94       	sec
    4388:	e1 1c       	adc	r14, r1
    438a:	f1 1c       	adc	r15, r1

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    438c:	80 91 72 15 	lds	r24, 0x1572
    4390:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4394:	8a e5       	ldi	r24, 0x5A	; 90
    4396:	87 bd       	out	0x27, r24	; 39
#if defined (BEEPSPKR)
    beepKeySpkr(BEEP_KEY_UP_FREQ);
#else
    beepKey();
#endif
    kother=kmi;
    4398:	82 2f       	mov	r24, r18
    439a:	1b c0       	rjmp	.+54     	; 0x43d2 <_Z11checkIncDechiiih+0xaa>
  }else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
    439c:	92 2f       	mov	r25, r18
    439e:	90 66       	ori	r25, 0x60	; 96
    43a0:	19 17       	cp	r17, r25
    43a2:	61 f0       	breq	.+24     	; 0x43bc <_Z11checkIncDechiiih+0x94>
    43a4:	92 2f       	mov	r25, r18
    43a6:	90 64       	ori	r25, 0x40	; 64
    43a8:	19 17       	cp	r17, r25
    43aa:	41 f0       	breq	.+16     	; 0x43bc <_Z11checkIncDechiiih+0x94>
    43ac:	88 23       	and	r24, r24
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <_Z11checkIncDechiiih+0x8a>
    43b0:	8b c0       	rjmp	.+278    	; 0x44c8 <_Z11checkIncDechiiih+0x1a0>
    43b2:	12 36       	cpi	r17, 0x62	; 98
    43b4:	19 f0       	breq	.+6      	; 0x43bc <_Z11checkIncDechiiih+0x94>
    43b6:	12 34       	cpi	r17, 0x42	; 66
    43b8:	09 f0       	breq	.+2      	; 0x43bc <_Z11checkIncDechiiih+0x94>
    43ba:	86 c0       	rjmp	.+268    	; 0x44c8 <_Z11checkIncDechiiih+0x1a0>
    newval--;
    43bc:	73 01       	movw	r14, r6
    43be:	08 94       	sec
    43c0:	e1 08       	sbc	r14, r1
    43c2:	f1 08       	sbc	r15, r1

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    43c4:	80 91 72 15 	lds	r24, 0x1572
    43c8:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    43cc:	8f e6       	ldi	r24, 0x6F	; 111
    43ce:	87 bd       	out	0x27, r24	; 39
#if defined (BEEPSPKR)
    beepKeySpkr(BEEP_KEY_DOWN_FREQ);
#else
    beepKey();
#endif
    kother=kpl;
    43d0:	80 2f       	mov	r24, r16
  }
  if((kother != (uint8_t)-1) && keyState((EnumKeys)kother)){
    43d2:	90 e0       	ldi	r25, 0x00	; 0
    43d4:	29 83       	std	Y+1, r18	; 0x01
    43d6:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    43da:	29 81       	ldd	r18, Y+1	; 0x01
    43dc:	88 23       	and	r24, r24
    43de:	51 f0       	breq	.+20     	; 0x43f4 <_Z11checkIncDechiiih+0xcc>
    newval=-val;
    43e0:	ee 24       	eor	r14, r14
    43e2:	ff 24       	eor	r15, r15
    43e4:	e6 18       	sub	r14, r6
    43e6:	f7 08       	sbc	r15, r7
    killEvents(kmi);
    43e8:	82 2f       	mov	r24, r18
    43ea:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
    killEvents(kpl);
    43ee:	80 2f       	mov	r24, r16
    43f0:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
  }
  if(i_min==0 && i_max==1 && event==EVT_KEY_FIRST(KEY_MENU)) {
    43f4:	a1 14       	cp	r10, r1
    43f6:	b1 04       	cpc	r11, r1
    43f8:	99 f4       	brne	.+38     	; 0x4420 <_Z11checkIncDechiiih+0xf8>
    43fa:	81 e0       	ldi	r24, 0x01	; 1
    43fc:	c8 16       	cp	r12, r24
    43fe:	d1 04       	cpc	r13, r1
    4400:	79 f4       	brne	.+30     	; 0x4420 <_Z11checkIncDechiiih+0xf8>
    4402:	10 36       	cpi	r17, 0x60	; 96
    4404:	69 f4       	brne	.+26     	; 0x4420 <_Z11checkIncDechiiih+0xf8>
    s_editMode = false;
    4406:	10 92 16 19 	sts	0x1916, r1
    newval=!val;
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	e8 2e       	mov	r14, r24
    440e:	f1 2c       	mov	r15, r1
    4410:	61 14       	cp	r6, r1
    4412:	71 04       	cpc	r7, r1
    4414:	11 f0       	breq	.+4      	; 0x441a <_Z11checkIncDechiiih+0xf2>
    4416:	ee 24       	eor	r14, r14
    4418:	ff 24       	eor	r15, r15
    killEvents(event);
    441a:	80 e6       	ldi	r24, 0x60	; 96
    441c:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
  }

  //change values based on P1
  newval -= p1valdiff;
    4420:	20 91 39 19 	lds	r18, 0x1939
    4424:	30 91 3a 19 	lds	r19, 0x193A
    4428:	e2 1a       	sub	r14, r18
    442a:	f3 0a       	sbc	r15, r19

  if(newval > i_max)
    442c:	ce 14       	cp	r12, r14
    442e:	df 04       	cpc	r13, r15
    4430:	54 f4       	brge	.+20     	; 0x4446 <_Z11checkIncDechiiih+0x11e>
  {
    newval = i_max;
    killEvents(event);
    4432:	81 2f       	mov	r24, r17
    4434:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4438:	80 91 74 15 	lds	r24, 0x1574
    443c:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4440:	8a e5       	ldi	r24, 0x5A	; 90
    4442:	87 bd       	out	0x27, r24	; 39
    4444:	76 01       	movw	r14, r12
    beepWarn2Spkr(BEEP_KEY_UP_FREQ);
#else
    beepWarn2();
#endif
  }
  if(newval < i_min)
    4446:	ea 14       	cp	r14, r10
    4448:	fb 04       	cpc	r15, r11
    444a:	54 f4       	brge	.+20     	; 0x4460 <_Z11checkIncDechiiih+0x138>
  {
    newval = i_min;
    killEvents(event);
    444c:	81 2f       	mov	r24, r17
    444e:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4452:	80 91 74 15 	lds	r24, 0x1574
    4456:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    445a:	8f e6       	ldi	r24, 0x6F	; 111
    445c:	87 bd       	out	0x27, r24	; 39
    445e:	75 01       	movw	r14, r10
    beepWarn2Spkr(BEEP_KEY_DOWN_FREQ);
#else
    beepWarn2();
#endif
  }
  if(newval != val){
    4460:	e6 14       	cp	r14, r6
    4462:	f7 04       	cpc	r15, r7
    4464:	f9 f0       	breq	.+62     	; 0x44a4 <_Z11checkIncDechiiih+0x17c>
    if(newval==0) {
    4466:	e1 14       	cp	r14, r1
    4468:	f1 04       	cpc	r15, r1
    446a:	79 f4       	brne	.+30     	; 0x448a <_Z11checkIncDechiiih+0x162>
      pauseEvents(event); // delay before auto-repeat continues
    446c:	81 2f       	mov	r24, r17
    446e:	0e 94 7d 6e 	call	0xdcfa	; 0xdcfa <_Z11pauseEventsh>
    4472:	80 91 74 15 	lds	r24, 0x1574
#if defined (BEEPSPKR)
      if (newval>val)
    4476:	77 fe       	sbrs	r7, 7
    4478:	04 c0       	rjmp	.+8      	; 0x4482 <_Z11checkIncDechiiih+0x15a>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    447a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    447e:	8a e5       	ldi	r24, 0x5A	; 90
    4480:	03 c0       	rjmp	.+6      	; 0x4488 <_Z11checkIncDechiiih+0x160>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4482:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4486:	8f e6       	ldi	r24, 0x6F	; 111
    4488:	87 bd       	out	0x27, r24	; 39
        beepWarn2Spkr(BEEP_KEY_DOWN_FREQ);
#else
      beepKey();
#endif
    }
    eeDirty(i_flags & (EE_GENERAL|EE_MODEL));
    448a:	89 2d       	mov	r24, r9
    448c:	83 70       	andi	r24, 0x03	; 3
    448e:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
    checkIncDec_Ret = (newval > val ? 1 : -1);
    4492:	6e 14       	cp	r6, r14
    4494:	7f 04       	cpc	r7, r15
    4496:	14 f4       	brge	.+4      	; 0x449c <_Z11checkIncDechiiih+0x174>
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	01 c0       	rjmp	.+2      	; 0x449e <_Z11checkIncDechiiih+0x176>
    449c:	8f ef       	ldi	r24, 0xFF	; 255
    449e:	80 93 3b 19 	sts	0x193B, r24
    44a2:	02 c0       	rjmp	.+4      	; 0x44a8 <_Z11checkIncDechiiih+0x180>
  }
  else {
    checkIncDec_Ret = 0;
    44a4:	10 92 3b 19 	sts	0x193B, r1
  }
  return newval;
}
    44a8:	c7 01       	movw	r24, r14
    44aa:	0f 90       	pop	r0
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	1f 91       	pop	r17
    44b2:	0f 91       	pop	r16
    44b4:	ff 90       	pop	r15
    44b6:	ef 90       	pop	r14
    44b8:	df 90       	pop	r13
    44ba:	cf 90       	pop	r12
    44bc:	bf 90       	pop	r11
    44be:	af 90       	pop	r10
    44c0:	9f 90       	pop	r9
    44c2:	7f 90       	pop	r7
    44c4:	6f 90       	pop	r6
    44c6:	08 95       	ret
    beepKeySpkr(BEEP_KEY_UP_FREQ);
#else
    beepKey();
#endif
    kother=kmi;
  }else if(event==EVT_KEY_FIRST(kmi) || event== EVT_KEY_REPT(kmi) || (s_editMode && (event==EVT_KEY_FIRST(KEY_DOWN) || event== EVT_KEY_REPT(KEY_DOWN))) ) {
    44c8:	73 01       	movw	r14, r6
    44ca:	94 cf       	rjmp	.-216    	; 0x43f4 <_Z11checkIncDechiiih+0xcc>

000044cc <_Z16checkIncDecModelhaaa>:
  }
  return newval;
}

int8_t checkIncDecModel(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
    44cc:	0f 93       	push	r16
  return checkIncDec(event,i_val,i_min,i_max,EE_MODEL);
    44ce:	77 27       	eor	r23, r23
    44d0:	67 fd       	sbrc	r22, 7
    44d2:	70 95       	com	r23
    44d4:	55 27       	eor	r21, r21
    44d6:	47 fd       	sbrc	r20, 7
    44d8:	50 95       	com	r21
    44da:	33 27       	eor	r19, r19
    44dc:	27 fd       	sbrc	r18, 7
    44de:	30 95       	com	r19
    44e0:	02 e0       	ldi	r16, 0x02	; 2
    44e2:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
}
    44e6:	0f 91       	pop	r16
    44e8:	08 95       	ret

000044ea <_Z14checkIncDecGenhaaa>:

int8_t checkIncDecGen(uint8_t event, int8_t i_val, int8_t i_min, int8_t i_max)
{
    44ea:	0f 93       	push	r16
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
    44ec:	77 27       	eor	r23, r23
    44ee:	67 fd       	sbrc	r22, 7
    44f0:	70 95       	com	r23
    44f2:	55 27       	eor	r21, r21
    44f4:	47 fd       	sbrc	r20, 7
    44f6:	50 95       	com	r21
    44f8:	33 27       	eor	r19, r19
    44fa:	27 fd       	sbrc	r18, 7
    44fc:	30 95       	com	r19
    44fe:	01 e0       	ldi	r16, 0x01	; 1
    4500:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
}
    4504:	0f 91       	pop	r16
    4506:	08 95       	ret

00004508 <_Z7popMenuv>:
uint8_t m_posVert;
uint8_t m_posHorz;

void popMenu()
{
  if (g_menuStackPtr>0) {
    4508:	e0 91 4a 19 	lds	r30, 0x194A
    450c:	ee 23       	and	r30, r30
    450e:	e1 f0       	breq	.+56     	; 0x4548 <_Z7popMenuv+0x40>
    g_menuStackPtr = g_menuStackPtr-1;
    4510:	e1 50       	subi	r30, 0x01	; 1
    4512:	e0 93 4a 19 	sts	0x194A, r30

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4516:	80 91 72 15 	lds	r24, 0x1572
    451a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    451e:	84 e6       	ldi	r24, 0x64	; 100
    4520:	87 bd       	out	0x27, r24	; 39
    beepKey();
    m_posHorz = 0;
    4522:	10 92 4c 19 	sts	0x194C, r1
    m_posVert = g_menuPos[g_menuStackPtr];
    4526:	f0 e0       	ldi	r31, 0x00	; 0
    4528:	df 01       	movw	r26, r30
    452a:	aa 5b       	subi	r26, 0xBA	; 186
    452c:	b6 4e       	sbci	r27, 0xE6	; 230
    452e:	8c 91       	ld	r24, X
    4530:	80 93 4b 19 	sts	0x194B, r24
    (*g_menuStack[g_menuStackPtr])(EVT_ENTRY_UP);
    4534:	ee 0f       	add	r30, r30
    4536:	ff 1f       	adc	r31, r31
    4538:	e4 5c       	subi	r30, 0xC4	; 196
    453a:	f6 4e       	sbci	r31, 0xE6	; 230
    453c:	01 90       	ld	r0, Z+
    453e:	f0 81       	ld	r31, Z
    4540:	e0 2d       	mov	r30, r0
    4542:	8e eb       	ldi	r24, 0xBE	; 190
    4544:	19 95       	eicall
    4546:	08 95       	ret
  }
  else {
    alert(PSTR("menuStack underflow"));
    4548:	83 e3       	ldi	r24, 0x33	; 51
    454a:	92 e0       	ldi	r25, 0x02	; 2
    454c:	60 e0       	ldi	r22, 0x00	; 0
    454e:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    4552:	08 95       	ret

00004554 <_Z9chainMenuPFvhE>:
  }
}

void chainMenu(MenuFuncP newMenu)
{
    4554:	fc 01       	movw	r30, r24
  g_menuStack[g_menuStackPtr] = newMenu;
    4556:	a0 91 4a 19 	lds	r26, 0x194A
    455a:	b0 e0       	ldi	r27, 0x00	; 0
    455c:	aa 0f       	add	r26, r26
    455e:	bb 1f       	adc	r27, r27
    4560:	a4 5c       	subi	r26, 0xC4	; 196
    4562:	b6 4e       	sbci	r27, 0xE6	; 230
    4564:	8d 93       	st	X+, r24
    4566:	9c 93       	st	X, r25
  (*newMenu)(EVT_ENTRY);
    4568:	8f eb       	ldi	r24, 0xBF	; 191
    456a:	19 95       	eicall

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    456c:	80 91 72 15 	lds	r24, 0x1572
    4570:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4574:	84 e6       	ldi	r24, 0x64	; 100
    4576:	87 bd       	out	0x27, r24	; 39
  beepKey();
}
    4578:	08 95       	ret

0000457a <_Z5checkhhPPFvhEhPhhh>:

#define MAXCOL(row) (horTab ? pgm_read_byte(horTab+min(row, horTabMax)) : (const uint8_t)0)
#define INC(val,max) if(val<max) {val++;} else {val=0;}
#define DEC(val,max) if(val>0  ) {val--;} else {val=max;}
bool check(uint8_t event, uint8_t curr, MenuFuncP *menuTab, uint8_t menuTabSize, pm_uint8_t *horTab, uint8_t horTabMax, uint8_t maxrow)
{
    457a:	af 92       	push	r10
    457c:	bf 92       	push	r11
    457e:	cf 92       	push	r12
    4580:	ef 92       	push	r14
    4582:	0f 93       	push	r16
    4584:	1f 93       	push	r17
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	c8 2f       	mov	r28, r24
    458c:	d6 2f       	mov	r29, r22
    458e:	5a 01       	movw	r10, r20
  if (menuTab) {
    4590:	41 15       	cp	r20, r1
    4592:	51 05       	cpc	r21, r1
    4594:	09 f4       	brne	.+2      	; 0x4598 <_Z5checkhhPPFvhEhPhhh+0x1e>
    4596:	57 c0       	rjmp	.+174    	; 0x4646 <_Z5checkhhPPFvhEhPhhh+0xcc>
    uint8_t attr = 0;

    if (m_posVert==0 && !s_noScroll) {
    4598:	80 91 4b 19 	lds	r24, 0x194B
    459c:	88 23       	and	r24, r24
    459e:	09 f0       	breq	.+2      	; 0x45a2 <_Z5checkhhPPFvhEhPhhh+0x28>
    45a0:	39 c0       	rjmp	.+114    	; 0x4614 <_Z5checkhhPPFvhEhPhhh+0x9a>
    45a2:	80 91 18 19 	lds	r24, 0x1918
    45a6:	88 23       	and	r24, r24
    45a8:	09 f0       	breq	.+2      	; 0x45ac <_Z5checkhhPPFvhEhPhhh+0x32>
    45aa:	34 c0       	rjmp	.+104    	; 0x4614 <_Z5checkhhPPFvhEhPhhh+0x9a>
      attr = INVERS;
      switch(event)
    45ac:	c4 36       	cpi	r28, 0x64	; 100
    45ae:	d1 f0       	breq	.+52     	; 0x45e4 <_Z5checkhhPPFvhEhPhhh+0x6a>
    45b0:	c5 36       	cpi	r28, 0x65	; 101
    45b2:	09 f0       	breq	.+2      	; 0x45b6 <_Z5checkhhPPFvhEhPhhh+0x3c>
    45b4:	31 c0       	rjmp	.+98     	; 0x4618 <_Z5checkhhPPFvhEhPhhh+0x9e>
      {
        case EVT_KEY_FIRST(KEY_LEFT):
          if(curr>0)
    45b6:	66 23       	and	r22, r22
    45b8:	51 f0       	breq	.+20     	; 0x45ce <_Z5checkhhPPFvhEhPhhh+0x54>
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[curr-1]));
    45ba:	e6 2f       	mov	r30, r22
    45bc:	f0 e0       	ldi	r31, 0x00	; 0
    45be:	31 97       	sbiw	r30, 0x01	; 1
    45c0:	ee 0f       	add	r30, r30
    45c2:	ff 1f       	adc	r31, r31
    45c4:	ea 0d       	add	r30, r10
    45c6:	fb 1d       	adc	r31, r11
    45c8:	25 91       	lpm	r18, Z+
    45ca:	34 91       	lpm	r19, Z+
    45cc:	1a c0       	rjmp	.+52     	; 0x4602 <_Z5checkhhPPFvhEhPhhh+0x88>
          else
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[menuTabSize-1]));
    45ce:	e2 2f       	mov	r30, r18
    45d0:	f0 e0       	ldi	r31, 0x00	; 0
    45d2:	31 97       	sbiw	r30, 0x01	; 1
    45d4:	ee 0f       	add	r30, r30
    45d6:	ff 1f       	adc	r31, r31
    45d8:	ea 0d       	add	r30, r10
    45da:	fb 1d       	adc	r31, r11
    45dc:	45 91       	lpm	r20, Z+
    45de:	54 91       	lpm	r21, Z+
    45e0:	ca 01       	movw	r24, r20
    45e2:	10 c0       	rjmp	.+32     	; 0x4604 <_Z5checkhhPPFvhEhPhhh+0x8a>
          return false;
        case EVT_KEY_FIRST(KEY_RIGHT):
          if(curr < (menuTabSize-1))
    45e4:	e6 2f       	mov	r30, r22
    45e6:	f0 e0       	ldi	r31, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	21 50       	subi	r18, 0x01	; 1
    45ec:	30 40       	sbci	r19, 0x00	; 0
    45ee:	e2 17       	cp	r30, r18
    45f0:	f3 07       	cpc	r31, r19
    45f2:	64 f4       	brge	.+24     	; 0x460c <_Z5checkhhPPFvhEhPhhh+0x92>
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[curr+1]));
    45f4:	31 96       	adiw	r30, 0x01	; 1
    45f6:	ee 0f       	add	r30, r30
    45f8:	ff 1f       	adc	r31, r31
    45fa:	e4 0f       	add	r30, r20
    45fc:	f5 1f       	adc	r31, r21
    45fe:	25 91       	lpm	r18, Z+
    4600:	34 91       	lpm	r19, Z+
    4602:	c9 01       	movw	r24, r18
    4604:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
          else
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[0]));
          return false;
    4608:	80 e0       	ldi	r24, 0x00	; 0
    460a:	36 c1       	rjmp	.+620    	; 0x4878 <_Z5checkhhPPFvhEhPhhh+0x2fe>
          return false;
        case EVT_KEY_FIRST(KEY_RIGHT):
          if(curr < (menuTabSize-1))
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[curr+1]));
          else
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[0]));
    460c:	fa 01       	movw	r30, r20
    460e:	25 91       	lpm	r18, Z+
    4610:	34 91       	lpm	r19, Z+
    4612:	f7 cf       	rjmp	.-18     	; 0x4602 <_Z5checkhhPPFvhEhPhhh+0x88>
#define INC(val,max) if(val<max) {val++;} else {val=0;}
#define DEC(val,max) if(val>0  ) {val--;} else {val=max;}
bool check(uint8_t event, uint8_t curr, MenuFuncP *menuTab, uint8_t menuTabSize, pm_uint8_t *horTab, uint8_t horTabMax, uint8_t maxrow)
{
  if (menuTab) {
    uint8_t attr = 0;
    4614:	40 e0       	ldi	r20, 0x00	; 0
    4616:	01 c0       	rjmp	.+2      	; 0x461a <_Z5checkhhPPFvhEhPhhh+0xa0>

    if (m_posVert==0 && !s_noScroll) {
      attr = INVERS;
    4618:	42 e0       	ldi	r20, 0x02	; 2
          else
            chainMenu((MenuFuncP)pgm_read_adr(&menuTab[0]));
          return false;
      }
    }
    s_noScroll = 0;
    461a:	10 92 18 19 	sts	0x1918, r1
    DisplayScreenIndex(curr, menuTabSize, attr);
    461e:	8d 2f       	mov	r24, r29
    4620:	62 2f       	mov	r22, r18
    4622:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_Z18DisplayScreenIndexhhh>
  }

  theFile.DisplayProgressBar(menuTab ? lcd_lastPos-2*FW-((curr+1)/10*FWNUM)-2 : 20*FW+1);
    4626:	20 91 02 1f 	lds	r18, 0x1F02
    462a:	2e 50       	subi	r18, 0x0E	; 14
    462c:	8d 2f       	mov	r24, r29
    462e:	90 e0       	ldi	r25, 0x00	; 0
    4630:	01 96       	adiw	r24, 0x01	; 1
    4632:	66 ef       	ldi	r22, 0xF6	; 246
    4634:	7f ef       	ldi	r23, 0xFF	; 255
    4636:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    463a:	86 2f       	mov	r24, r22
    463c:	88 0f       	add	r24, r24
    463e:	88 0f       	add	r24, r24
    4640:	86 0f       	add	r24, r22
    4642:	28 0f       	add	r18, r24
    4644:	01 c0       	rjmp	.+2      	; 0x4648 <_Z5checkhhPPFvhEhPhhh+0xce>
    4646:	29 e7       	ldi	r18, 0x79	; 121
    4648:	8c ea       	ldi	r24, 0xAC	; 172
    464a:	99 e1       	ldi	r25, 0x19	; 25
    464c:	62 2f       	mov	r22, r18
    464e:	0e 94 24 66 	call	0xcc48	; 0xcc48 <_ZN7RlcFile18DisplayProgressBarEh>

  uint8_t maxcol = MAXCOL(m_posVert);
    4652:	01 15       	cp	r16, r1
    4654:	11 05       	cpc	r17, r1
    4656:	59 f0       	breq	.+22     	; 0x466e <_Z5checkhhPPFvhEhPhhh+0xf4>
    4658:	90 91 4b 19 	lds	r25, 0x194B
    465c:	8e 2d       	mov	r24, r14
    465e:	9e 15       	cp	r25, r14
    4660:	08 f4       	brcc	.+2      	; 0x4664 <_Z5checkhhPPFvhEhPhhh+0xea>
    4662:	89 2f       	mov	r24, r25
    4664:	f8 01       	movw	r30, r16
    4666:	e8 0f       	add	r30, r24
    4668:	f1 1d       	adc	r31, r1
    466a:	e4 91       	lpm	r30, Z+
    466c:	01 c0       	rjmp	.+2      	; 0x4670 <_Z5checkhhPPFvhEhPhhh+0xf6>
    466e:	e0 e0       	ldi	r30, 0x00	; 0
  switch(event)
    4670:	c0 36       	cpi	r28, 0x60	; 96
    4672:	59 f1       	breq	.+86     	; 0x46ca <_Z5checkhhPPFvhEhPhhh+0x150>
    4674:	c1 36       	cpi	r28, 0x61	; 97
    4676:	90 f4       	brcc	.+36     	; 0x469c <_Z5checkhhPPFvhEhPhhh+0x122>
    4678:	c3 34       	cpi	r28, 0x43	; 67
    467a:	09 f4       	brne	.+2      	; 0x467e <_Z5checkhhPPFvhEhPhhh+0x104>
    467c:	ac c0       	rjmp	.+344    	; 0x47d6 <_Z5checkhhPPFvhEhPhhh+0x25c>
    467e:	c4 34       	cpi	r28, 0x44	; 68
    4680:	30 f4       	brcc	.+12     	; 0x468e <_Z5checkhhPPFvhEhPhhh+0x114>
    4682:	c1 32       	cpi	r28, 0x21	; 33
    4684:	81 f1       	breq	.+96     	; 0x46e6 <_Z5checkhhPPFvhEhPhhh+0x16c>
    4686:	c2 34       	cpi	r28, 0x42	; 66
    4688:	09 f0       	breq	.+2      	; 0x468c <_Z5checkhhPPFvhEhPhhh+0x112>
    468a:	d5 c0       	rjmp	.+426    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    468c:	79 c0       	rjmp	.+242    	; 0x4780 <_Z5checkhhPPFvhEhPhhh+0x206>
    468e:	c4 34       	cpi	r28, 0x44	; 68
    4690:	09 f4       	brne	.+2      	; 0x4694 <_Z5checkhhPPFvhEhPhhh+0x11a>
    4692:	46 c0       	rjmp	.+140    	; 0x4720 <_Z5checkhhPPFvhEhPhhh+0x1a6>
    4694:	c5 34       	cpi	r28, 0x45	; 69
    4696:	09 f0       	breq	.+2      	; 0x469a <_Z5checkhhPPFvhEhPhhh+0x120>
    4698:	ce c0       	rjmp	.+412    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    469a:	59 c0       	rjmp	.+178    	; 0x474e <_Z5checkhhPPFvhEhPhhh+0x1d4>
    469c:	c4 36       	cpi	r28, 0x64	; 100
    469e:	09 f4       	brne	.+2      	; 0x46a2 <_Z5checkhhPPFvhEhPhhh+0x128>
    46a0:	44 c0       	rjmp	.+136    	; 0x472a <_Z5checkhhPPFvhEhPhhh+0x1b0>
    46a2:	c5 36       	cpi	r28, 0x65	; 101
    46a4:	38 f4       	brcc	.+14     	; 0x46b4 <_Z5checkhhPPFvhEhPhhh+0x13a>
    46a6:	c2 36       	cpi	r28, 0x62	; 98
    46a8:	09 f4       	brne	.+2      	; 0x46ac <_Z5checkhhPPFvhEhPhhh+0x132>
    46aa:	6f c0       	rjmp	.+222    	; 0x478a <_Z5checkhhPPFvhEhPhhh+0x210>
    46ac:	c3 36       	cpi	r28, 0x63	; 99
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <_Z5checkhhPPFvhEhPhhh+0x138>
    46b0:	c2 c0       	rjmp	.+388    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    46b2:	95 c0       	rjmp	.+298    	; 0x47de <_Z5checkhhPPFvhEhPhhh+0x264>
    46b4:	c1 38       	cpi	r28, 0x81	; 129
    46b6:	a1 f0       	breq	.+40     	; 0x46e0 <_Z5checkhhPPFvhEhPhhh+0x166>
    46b8:	cf 3b       	cpi	r28, 0xBF	; 191
    46ba:	21 f0       	breq	.+8      	; 0x46c4 <_Z5checkhhPPFvhEhPhhh+0x14a>
    46bc:	c5 36       	cpi	r28, 0x65	; 101
    46be:	09 f0       	breq	.+2      	; 0x46c2 <_Z5checkhhPPFvhEhPhhh+0x148>
    46c0:	ba c0       	rjmp	.+372    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    46c2:	4a c0       	rjmp	.+148    	; 0x4758 <_Z5checkhhPPFvhEhPhhh+0x1de>
  {
    case EVT_ENTRY:
      minit();
    46c4:	0e 94 45 21 	call	0x428a	; 0x428a <_Z5minitv>
    46c8:	12 c0       	rjmp	.+36     	; 0x46ee <_Z5checkhhPPFvhEhPhhh+0x174>
      s_editMode = false;
      break;
    case EVT_KEY_FIRST(KEY_MENU):
      if (maxcol > 0)
    46ca:	ee 23       	and	r30, r30
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <_Z5checkhhPPFvhEhPhhh+0x156>
    46ce:	b3 c0       	rjmp	.+358    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
        s_editMode = !s_editMode;
    46d0:	81 e0       	ldi	r24, 0x01	; 1
    46d2:	90 91 16 19 	lds	r25, 0x1916
    46d6:	91 11       	cpse	r25, r1
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	80 93 16 19 	sts	0x1916, r24
    46de:	ab c0       	rjmp	.+342    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      s_editMode = false;
    46e0:	10 92 16 19 	sts	0x1916, r1
    46e4:	0e c0       	rjmp	.+28     	; 0x4702 <_Z5checkhhPPFvhEhPhhh+0x188>
      popMenu();
      break;
    case EVT_KEY_BREAK(KEY_EXIT):
      if(s_editMode) {
    46e6:	80 91 16 19 	lds	r24, 0x1916
    46ea:	88 23       	and	r24, r24
    46ec:	19 f0       	breq	.+6      	; 0x46f4 <_Z5checkhhPPFvhEhPhhh+0x17a>
        s_editMode = false;
    46ee:	10 92 16 19 	sts	0x1916, r1
        break;
    46f2:	a1 c0       	rjmp	.+322    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
      }
      if(m_posVert==0 || !menuTab) {
    46f4:	80 91 4b 19 	lds	r24, 0x194B
    46f8:	88 23       	and	r24, r24
    46fa:	19 f0       	breq	.+6      	; 0x4702 <_Z5checkhhPPFvhEhPhhh+0x188>
    46fc:	a1 14       	cp	r10, r1
    46fe:	b1 04       	cpc	r11, r1
    4700:	19 f4       	brne	.+6      	; 0x4708 <_Z5checkhhPPFvhEhPhhh+0x18e>
        popMenu();  //beeps itself
    4702:	0e 94 84 22 	call	0x4508	; 0x4508 <_Z7popMenuv>
    4706:	97 c0       	rjmp	.+302    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4708:	80 91 72 15 	lds	r24, 0x1572
    470c:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4710:	84 e6       	ldi	r24, 0x64	; 100
    4712:	87 bd       	out	0x27, r24	; 39
      }
      else {
        beepKey();
        minit();BLINK_SYNC;
    4714:	0e 94 45 21 	call	0x428a	; 0x428a <_Z5minitv>
    4718:	80 e6       	ldi	r24, 0x60	; 96
    471a:	80 93 34 1f 	sts	0x1F34, r24
    471e:	8e c0       	rjmp	.+284    	; 0x483c <_Z5checkhhPPFvhEhPhhh+0x2c2>
      }
      break;

    case EVT_KEY_REPT(KEY_RIGHT):  //inc
      if(m_posHorz==maxcol) break;
    4720:	80 91 4c 19 	lds	r24, 0x194C
    4724:	8e 17       	cp	r24, r30
    4726:	09 f4       	brne	.+2      	; 0x472a <_Z5checkhhPPFvhEhPhhh+0x1b0>
    4728:	86 c0       	rjmp	.+268    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    case EVT_KEY_FIRST(KEY_RIGHT)://inc
      if(!horTab || s_editMode)break;
    472a:	01 15       	cp	r16, r1
    472c:	11 05       	cpc	r17, r1
    472e:	09 f4       	brne	.+2      	; 0x4732 <_Z5checkhhPPFvhEhPhhh+0x1b8>
    4730:	82 c0       	rjmp	.+260    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    4732:	80 91 16 19 	lds	r24, 0x1916
    4736:	88 23       	and	r24, r24
    4738:	09 f0       	breq	.+2      	; 0x473c <_Z5checkhhPPFvhEhPhhh+0x1c2>
    473a:	7d c0       	rjmp	.+250    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
      INC(m_posHorz,maxcol);
    473c:	80 91 4c 19 	lds	r24, 0x194C
    4740:	8e 17       	cp	r24, r30
    4742:	10 f4       	brcc	.+4      	; 0x4748 <_Z5checkhhPPFvhEhPhhh+0x1ce>
    4744:	8f 5f       	subi	r24, 0xFF	; 255
    4746:	16 c0       	rjmp	.+44     	; 0x4774 <_Z5checkhhPPFvhEhPhhh+0x1fa>
    4748:	10 92 4c 19 	sts	0x194C, r1
    474c:	71 c0       	rjmp	.+226    	; 0x4830 <_Z5checkhhPPFvhEhPhhh+0x2b6>
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_LEFT):  //dec
      if(m_posHorz==0) break;
    474e:	80 91 4c 19 	lds	r24, 0x194C
    4752:	88 23       	and	r24, r24
    4754:	09 f4       	brne	.+2      	; 0x4758 <_Z5checkhhPPFvhEhPhhh+0x1de>
    4756:	6f c0       	rjmp	.+222    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    case EVT_KEY_FIRST(KEY_LEFT)://dec
      if(!horTab || s_editMode)break;
    4758:	01 15       	cp	r16, r1
    475a:	11 05       	cpc	r17, r1
    475c:	09 f4       	brne	.+2      	; 0x4760 <_Z5checkhhPPFvhEhPhhh+0x1e6>
    475e:	6b c0       	rjmp	.+214    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    4760:	80 91 16 19 	lds	r24, 0x1916
    4764:	88 23       	and	r24, r24
    4766:	09 f0       	breq	.+2      	; 0x476a <_Z5checkhhPPFvhEhPhhh+0x1f0>
    4768:	66 c0       	rjmp	.+204    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
      DEC(m_posHorz,maxcol);
    476a:	80 91 4c 19 	lds	r24, 0x194C
    476e:	88 23       	and	r24, r24
    4770:	21 f0       	breq	.+8      	; 0x477a <_Z5checkhhPPFvhEhPhhh+0x200>
    4772:	81 50       	subi	r24, 0x01	; 1
    4774:	80 93 4c 19 	sts	0x194C, r24
    4778:	5b c0       	rjmp	.+182    	; 0x4830 <_Z5checkhhPPFvhEhPhhh+0x2b6>
    477a:	e0 93 4c 19 	sts	0x194C, r30
    477e:	58 c0       	rjmp	.+176    	; 0x4830 <_Z5checkhhPPFvhEhPhhh+0x2b6>
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
    4780:	80 91 4b 19 	lds	r24, 0x194B
    4784:	8c 15       	cp	r24, r12
    4786:	09 f4       	brne	.+2      	; 0x478a <_Z5checkhhPPFvhEhPhhh+0x210>
    4788:	56 c0       	rjmp	.+172    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode)break;
    478a:	80 91 16 19 	lds	r24, 0x1916
    478e:	88 23       	and	r24, r24
    4790:	09 f0       	breq	.+2      	; 0x4794 <_Z5checkhhPPFvhEhPhhh+0x21a>
    4792:	51 c0       	rjmp	.+162    	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    4794:	80 91 4b 19 	lds	r24, 0x194B
      do {
        INC(m_posVert,maxrow);
    4798:	8c 15       	cp	r24, r12
    479a:	10 f4       	brcc	.+4      	; 0x47a0 <_Z5checkhhPPFvhEhPhhh+0x226>
    479c:	8f 5f       	subi	r24, 0xFF	; 255
    479e:	01 c0       	rjmp	.+2      	; 0x47a2 <_Z5checkhhPPFvhEhPhhh+0x228>
    47a0:	80 e0       	ldi	r24, 0x00	; 0

    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode)break;
      do {
    47a2:	01 15       	cp	r16, r1
    47a4:	11 05       	cpc	r17, r1
    47a6:	09 f4       	brne	.+2      	; 0x47aa <_Z5checkhhPPFvhEhPhhh+0x230>
    47a8:	70 c0       	rjmp	.+224    	; 0x488a <_Z5checkhhPPFvhEhPhhh+0x310>
        INC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
    47aa:	98 2f       	mov	r25, r24
    47ac:	e8 16       	cp	r14, r24
    47ae:	08 f4       	brcc	.+2      	; 0x47b2 <_Z5checkhhPPFvhEhPhhh+0x238>
    47b0:	9e 2d       	mov	r25, r14
    47b2:	f8 01       	movw	r30, r16
    47b4:	e9 0f       	add	r30, r25
    47b6:	f1 1d       	adc	r31, r1
    47b8:	e4 91       	lpm	r30, Z+

    case EVT_KEY_REPT(KEY_DOWN):  //inc
      if(m_posVert==maxrow) break;
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode)break;
      do {
    47ba:	ef 3f       	cpi	r30, 0xFF	; 255
    47bc:	09 f0       	breq	.+2      	; 0x47c0 <_Z5checkhhPPFvhEhPhhh+0x246>
    47be:	65 c0       	rjmp	.+202    	; 0x488a <_Z5checkhhPPFvhEhPhhh+0x310>
    47c0:	eb cf       	rjmp	.-42     	; 0x4798 <_Z5checkhhPPFvhEhPhhh+0x21e>
        INC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
    47c2:	90 91 4b 19 	lds	r25, 0x194B
    47c6:	9e 15       	cp	r25, r14
    47c8:	08 f4       	brcc	.+2      	; 0x47cc <_Z5checkhhPPFvhEhPhhh+0x252>
    47ca:	e9 2e       	mov	r14, r25
    47cc:	0e 0d       	add	r16, r14
    47ce:	11 1d       	adc	r17, r1
    47d0:	f8 01       	movw	r30, r16
    47d2:	04 91       	lpm	r16, Z+
    47d4:	28 c0       	rjmp	.+80     	; 0x4826 <_Z5checkhhPPFvhEhPhhh+0x2ac>
      BLINK_SYNC;
      break;

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    47d6:	80 91 4b 19 	lds	r24, 0x194B
    47da:	88 23       	and	r24, r24
    47dc:	61 f1       	breq	.+88     	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode)break;
    47de:	80 91 16 19 	lds	r24, 0x1916
    47e2:	88 23       	and	r24, r24
    47e4:	41 f5       	brne	.+80     	; 0x4836 <_Z5checkhhPPFvhEhPhhh+0x2bc>
    47e6:	80 91 4b 19 	lds	r24, 0x194B
      do {
        DEC(m_posVert,maxrow);
    47ea:	88 23       	and	r24, r24
    47ec:	11 f0       	breq	.+4      	; 0x47f2 <_Z5checkhhPPFvhEhPhhh+0x278>
    47ee:	81 50       	subi	r24, 0x01	; 1
    47f0:	01 c0       	rjmp	.+2      	; 0x47f4 <_Z5checkhhPPFvhEhPhhh+0x27a>
    47f2:	8c 2d       	mov	r24, r12

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode)break;
      do {
    47f4:	01 15       	cp	r16, r1
    47f6:	11 05       	cpc	r17, r1
    47f8:	09 f4       	brne	.+2      	; 0x47fc <_Z5checkhhPPFvhEhPhhh+0x282>
    47fa:	50 c0       	rjmp	.+160    	; 0x489c <_Z5checkhhPPFvhEhPhhh+0x322>
        DEC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
    47fc:	98 2f       	mov	r25, r24
    47fe:	e8 16       	cp	r14, r24
    4800:	08 f4       	brcc	.+2      	; 0x4804 <_Z5checkhhPPFvhEhPhhh+0x28a>
    4802:	9e 2d       	mov	r25, r14
    4804:	f8 01       	movw	r30, r16
    4806:	e9 0f       	add	r30, r25
    4808:	f1 1d       	adc	r31, r1
    480a:	e4 91       	lpm	r30, Z+

    case EVT_KEY_REPT(KEY_UP):  //dec
      if(m_posVert==0) break;
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode)break;
      do {
    480c:	ef 3f       	cpi	r30, 0xFF	; 255
    480e:	09 f0       	breq	.+2      	; 0x4812 <_Z5checkhhPPFvhEhPhhh+0x298>
    4810:	45 c0       	rjmp	.+138    	; 0x489c <_Z5checkhhPPFvhEhPhhh+0x322>
    4812:	eb cf       	rjmp	.-42     	; 0x47ea <_Z5checkhhPPFvhEhPhhh+0x270>
        DEC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
    4814:	90 91 4b 19 	lds	r25, 0x194B
    4818:	9e 15       	cp	r25, r14
    481a:	08 f4       	brcc	.+2      	; 0x481e <_Z5checkhhPPFvhEhPhhh+0x2a4>
    481c:	e9 2e       	mov	r14, r25
    481e:	0e 0d       	add	r16, r14
    4820:	11 1d       	adc	r17, r1
    4822:	f8 01       	movw	r30, r16
    4824:	04 91       	lpm	r16, Z+
    4826:	80 17       	cp	r24, r16
    4828:	08 f4       	brcc	.+2      	; 0x482c <_Z5checkhhPPFvhEhPhhh+0x2b2>
    482a:	08 2f       	mov	r16, r24
    482c:	00 93 4c 19 	sts	0x194C, r16
      BLINK_SYNC;
    4830:	80 e6       	ldi	r24, 0x60	; 96
    4832:	80 93 34 1f 	sts	0x1F34, r24
      break;
  }

  uint8_t max = menuTab ? 7 : 6;
    4836:	a1 14       	cp	r10, r1
    4838:	b1 04       	cpc	r11, r1
    483a:	11 f0       	breq	.+4      	; 0x4840 <_Z5checkhhPPFvhEhPhhh+0x2c6>
    483c:	57 e0       	ldi	r21, 0x07	; 7
    483e:	01 c0       	rjmp	.+2      	; 0x4842 <_Z5checkhhPPFvhEhPhhh+0x2c8>
    4840:	56 e0       	ldi	r21, 0x06	; 6
  if(m_posVert<1) s_pgOfs=0;
    4842:	40 91 4b 19 	lds	r20, 0x194B
    4846:	44 23       	and	r20, r20
    4848:	19 f4       	brne	.+6      	; 0x4850 <_Z5checkhhPPFvhEhPhhh+0x2d6>
    484a:	10 92 15 19 	sts	0x1915, r1
    484e:	13 c0       	rjmp	.+38     	; 0x4876 <_Z5checkhhPPFvhEhPhhh+0x2fc>
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
    4850:	84 2f       	mov	r24, r20
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	20 91 15 19 	lds	r18, 0x1915
    4858:	82 1b       	sub	r24, r18
    485a:	91 09       	sbc	r25, r1
    485c:	25 2f       	mov	r18, r21
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	28 17       	cp	r18, r24
    4862:	39 07       	cpc	r19, r25
    4864:	14 f4       	brge	.+4      	; 0x486a <_Z5checkhhPPFvhEhPhhh+0x2f0>
    4866:	45 1b       	sub	r20, r21
    4868:	04 c0       	rjmp	.+8      	; 0x4872 <_Z5checkhhPPFvhEhPhhh+0x2f8>
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
    486a:	18 16       	cp	r1, r24
    486c:	19 06       	cpc	r1, r25
    486e:	1c f0       	brlt	.+6      	; 0x4876 <_Z5checkhhPPFvhEhPhhh+0x2fc>
    4870:	41 50       	subi	r20, 0x01	; 1
    4872:	40 93 15 19 	sts	0x1915, r20
  return true;
    4876:	81 e0       	ldi	r24, 0x01	; 1
}
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	ef 90       	pop	r14
    4882:	cf 90       	pop	r12
    4884:	bf 90       	pop	r11
    4886:	af 90       	pop	r10
    4888:	08 95       	ret
  }

  uint8_t max = menuTab ? 7 : 6;
  if(m_posVert<1) s_pgOfs=0;
  else if(m_posVert-s_pgOfs>max) s_pgOfs = m_posVert-max;
  else if(m_posVert-s_pgOfs<1) s_pgOfs = m_posVert-1;
    488a:	80 93 4b 19 	sts	0x194B, r24
    case EVT_KEY_FIRST(KEY_DOWN): //inc
      if(s_editMode)break;
      do {
        INC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
    488e:	80 91 4c 19 	lds	r24, 0x194C
    4892:	01 15       	cp	r16, r1
    4894:	11 05       	cpc	r17, r1
    4896:	09 f0       	breq	.+2      	; 0x489a <_Z5checkhhPPFvhEhPhhh+0x320>
    4898:	94 cf       	rjmp	.-216    	; 0x47c2 <_Z5checkhhPPFvhEhPhhh+0x248>
    489a:	08 c0       	rjmp	.+16     	; 0x48ac <_Z5checkhhPPFvhEhPhhh+0x332>
    489c:	80 93 4b 19 	sts	0x194B, r24
    case EVT_KEY_FIRST(KEY_UP): //dec
      if(s_editMode)break;
      do {
        DEC(m_posVert,maxrow);
      } while(MAXCOL(m_posVert) == (uint8_t)-1);
      m_posHorz = min(m_posHorz, MAXCOL(m_posVert));
    48a0:	80 91 4c 19 	lds	r24, 0x194C
    48a4:	01 15       	cp	r16, r1
    48a6:	11 05       	cpc	r17, r1
    48a8:	09 f0       	breq	.+2      	; 0x48ac <_Z5checkhhPPFvhEhPhhh+0x332>
    48aa:	b4 cf       	rjmp	.-152    	; 0x4814 <_Z5checkhhPPFvhEhPhhh+0x29a>
    48ac:	00 e0       	ldi	r16, 0x00	; 0
    48ae:	be cf       	rjmp	.-132    	; 0x482c <_Z5checkhhPPFvhEhPhhh+0x2b2>

000048b0 <_Z12check_simplehhPPFvhEhh>:
{
  return checkIncDec(event,i_val,i_min,i_max,EE_GENERAL);
}

bool check_simple(uint8_t event, uint8_t curr, MenuFuncP *menuTab, uint8_t menuTabSize, uint8_t maxrow)
{
    48b0:	cf 92       	push	r12
    48b2:	ef 92       	push	r14
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	c0 2e       	mov	r12, r16
  return check(event, curr, menuTab, menuTabSize, 0, 0, maxrow);
    48ba:	00 e0       	ldi	r16, 0x00	; 0
    48bc:	10 e0       	ldi	r17, 0x00	; 0
    48be:	ee 24       	eor	r14, r14
    48c0:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
}
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	ef 90       	pop	r14
    48ca:	cf 90       	pop	r12
    48cc:	08 95       	ret

000048ce <_Z20check_submenu_simplehh>:

bool check_submenu_simple(uint8_t event, uint8_t maxrow)
{
    48ce:	0f 93       	push	r16
    48d0:	06 2f       	mov	r16, r22
  return check_simple(event, 0, 0, 0, maxrow);
    48d2:	60 e0       	ldi	r22, 0x00	; 0
    48d4:	40 e0       	ldi	r20, 0x00	; 0
    48d6:	50 e0       	ldi	r21, 0x00	; 0
    48d8:	20 e0       	ldi	r18, 0x00	; 0
    48da:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
}
    48de:	0f 91       	pop	r16
    48e0:	08 95       	ret

000048e2 <_Z8pushMenuPFvhE>:
  (*newMenu)(EVT_ENTRY);
  beepKey();
}

void pushMenu(MenuFuncP newMenu)
{
    48e2:	fc 01       	movw	r30, r24
  g_menuPos[g_menuStackPtr] = m_posVert;
    48e4:	80 91 4a 19 	lds	r24, 0x194A
    48e8:	a8 2f       	mov	r26, r24
    48ea:	b0 e0       	ldi	r27, 0x00	; 0
    48ec:	aa 5b       	subi	r26, 0xBA	; 186
    48ee:	b6 4e       	sbci	r27, 0xE6	; 230
    48f0:	90 91 4b 19 	lds	r25, 0x194B
    48f4:	9c 93       	st	X, r25

  g_menuStackPtr++;
    48f6:	a8 2f       	mov	r26, r24
    48f8:	af 5f       	subi	r26, 0xFF	; 255
    48fa:	a0 93 4a 19 	sts	0x194A, r26
  if(g_menuStackPtr >= DIM(g_menuStack))
    48fe:	a5 30       	cpi	r26, 0x05	; 5
    4900:	40 f0       	brcs	.+16     	; 0x4912 <_Z8pushMenuPFvhE+0x30>
  {
    g_menuStackPtr--;
    4902:	80 93 4a 19 	sts	0x194A, r24
    alert(PSTR("menuStack overflow"));
    4906:	80 e2       	ldi	r24, 0x20	; 32
    4908:	92 e0       	ldi	r25, 0x02	; 2
    490a:	60 e0       	ldi	r22, 0x00	; 0
    490c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    return;
    4910:	08 95       	ret

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4912:	80 91 72 15 	lds	r24, 0x1572
    4916:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    491a:	84 e6       	ldi	r24, 0x64	; 100
    491c:	87 bd       	out	0x27, r24	; 39
  }
  beepKey();
  g_menuStack[g_menuStackPtr] = newMenu;
    491e:	b0 e0       	ldi	r27, 0x00	; 0
    4920:	aa 0f       	add	r26, r26
    4922:	bb 1f       	adc	r27, r27
    4924:	a4 5c       	subi	r26, 0xC4	; 196
    4926:	b6 4e       	sbci	r27, 0xE6	; 230
    4928:	ed 93       	st	X+, r30
    492a:	fc 93       	st	X, r31
  (*newMenu)(EVT_ENTRY);
    492c:	8f eb       	ldi	r24, 0xBF	; 191
    492e:	19 95       	eicall
    4930:	08 95       	ret

00004932 <_Z14setupPulsesPPMv>:
//{
//    return x-(x/4);  //512+128 =? 640,  640 - 640/4  == 640 * 3/4 => 480 (just below 500msec - it can still reach 500 with offset)
//}

void setupPulsesPPM() // changed 10/05/2010 by dino Issue 128
{
    4932:	8f 92       	push	r8
    4934:	9f 92       	push	r9
    4936:	bf 92       	push	r11
    4938:	cf 92       	push	r12
    493a:	df 92       	push	r13
    493c:	ef 92       	push	r14
    493e:	ff 92       	push	r15
    4940:	0f 93       	push	r16
    4942:	1f 93       	push	r17
    4944:	cf 93       	push	r28
    4946:	df 93       	push	r29
#define PPM_CENTER 1200*2
    int16_t PPM_range = g_model.extendedLimits ? 640*2 : 512*2;   //range of 0.7..1.7msec
    4948:	80 91 99 12 	lds	r24, 0x1299
    494c:	85 ff       	sbrs	r24, 5
    494e:	03 c0       	rjmp	.+6      	; 0x4956 <_Z14setupPulsesPPMv+0x24>
    4950:	60 e0       	ldi	r22, 0x00	; 0
    4952:	75 e0       	ldi	r23, 0x05	; 5
    4954:	02 c0       	rjmp	.+4      	; 0x495a <_Z14setupPulsesPPMv+0x28>
    4956:	60 e0       	ldi	r22, 0x00	; 0
    4958:	74 e0       	ldi	r23, 0x04	; 4
    // G: Found the following reference at th9x. The below code does not seem 
    // to produce quite exactly this, to my eye. *shrug*
    //   http://www.aerodesign.de/peter/2000/PCM/frame_ppm.gif

    uint8_t j=0;
    uint8_t p=8+g_model.ppmNCH*2; //Channels *2
    495a:	b0 90 98 12 	lds	r11, 0x1298
    495e:	b5 94       	asr	r11
    4960:	b5 94       	asr	r11
    4962:	b5 94       	asr	r11
    4964:	b5 94       	asr	r11
    4966:	bb 0c       	add	r11, r11
    4968:	88 e0       	ldi	r24, 0x08	; 8
    496a:	b8 0e       	add	r11, r24
    uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    496c:	40 91 9a 12 	lds	r20, 0x129A
    4970:	84 e6       	ldi	r24, 0x64	; 100
    4972:	48 02       	muls	r20, r24
    4974:	a0 01       	movw	r20, r0
    4976:	11 24       	eor	r1, r1
    4978:	9a 01       	movw	r18, r20
    497a:	28 5a       	subi	r18, 0xA8	; 168
    497c:	3d 4f       	sbci	r19, 0xFD	; 253
    uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    497e:	ab 2d       	mov	r26, r11
    4980:	aa 30       	cpi	r26, 0x0A	; 10
    4982:	28 f4       	brcc	.+10     	; 0x498e <_Z14setupPulsesPPMv+0x5c>
    //   http://www.aerodesign.de/peter/2000/PCM/frame_ppm.gif

    uint8_t j=0;
    uint8_t p=8+g_model.ppmNCH*2; //Channels *2
    uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    4984:	88 ec       	ldi	r24, 0xC8	; 200
    4986:	9f ea       	ldi	r25, 0xAF	; 175
    4988:	82 1b       	sub	r24, r18
    498a:	93 0b       	sbc	r25, r19
    498c:	0d c0       	rjmp	.+26     	; 0x49a8 <_Z14setupPulsesPPMv+0x76>
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    498e:	48 53       	subi	r20, 0x38	; 56
    4990:	50 4f       	sbci	r21, 0xF0	; 240
    4992:	eb 2d       	mov	r30, r11
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	4e 9f       	mul	r20, r30
    4998:	c0 01       	movw	r24, r0
    499a:	4f 9f       	mul	r20, r31
    499c:	90 0d       	add	r25, r0
    499e:	5e 9f       	mul	r21, r30
    49a0:	90 0d       	add	r25, r0
    49a2:	11 24       	eor	r1, r1
    49a4:	80 5c       	subi	r24, 0xC0	; 192
    49a6:	90 4e       	sbci	r25, 0xE0	; 224
    49a8:	09 e1       	ldi	r16, 0x19	; 25
    49aa:	19 e1       	ldi	r17, 0x19	; 25
    49ac:	e0 e1       	ldi	r30, 0x10	; 16
    49ae:	f6 e1       	ldi	r31, 0x16	; 22
//inline int16_t reduceRange(int16_t x)  // for in case we want to have room for subtrims
//{
//    return x-(x/4);  //512+128 =? 640,  640 - 640/4  == 640 * 3/4 => 480 (just below 500msec - it can still reach 500 with offset)
//}

void setupPulsesPPM() // changed 10/05/2010 by dino Issue 128
    49b0:	4b 2d       	mov	r20, r11
    49b2:	50 e0       	ldi	r21, 0x00	; 0
    49b4:	44 0f       	add	r20, r20
    49b6:	55 1f       	adc	r21, r21
    49b8:	40 0f       	add	r20, r16
    49ba:	51 1f       	adc	r21, r17
    uint8_t p=8+g_model.ppmNCH*2; //Channels *2
    uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    for(uint8_t i=0;i<p;i++){ //NUM_CHNOUT
        int16_t v = max(min(g_chans512[i],(int16_t)PPM_range),(int16_t)-PPM_range) + (int16_t)PPM_CENTER;
    49bc:	cc 24       	eor	r12, r12
    49be:	dd 24       	eor	r13, r13
    49c0:	c6 1a       	sub	r12, r22
    49c2:	d7 0a       	sbc	r13, r23
//inline int16_t reduceRange(int16_t x)  // for in case we want to have room for subtrims
//{
//    return x-(x/4);  //512+128 =? 640,  640 - 640/4  == 640 * 3/4 => 480 (just below 500msec - it can still reach 500 with offset)
//}

void setupPulsesPPM() // changed 10/05/2010 by dino Issue 128
    49c4:	88 24       	eor	r8, r8
    49c6:	99 24       	eor	r9, r9
    49c8:	82 1a       	sub	r8, r18
    49ca:	93 0a       	sbc	r9, r19
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    for(uint8_t i=0;i<p;i++){ //NUM_CHNOUT
        int16_t v = max(min(g_chans512[i],(int16_t)PPM_range),(int16_t)-PPM_range) + (int16_t)PPM_CENTER;
        rest-=(v+q);
        pulses2MHz[j++] = q;
        pulses2MHz[j++] = v - q + 600; /* as Pat MacKenzie suggests */
    49cc:	a8 e5       	ldi	r26, 0x58	; 88
    49ce:	ea 2e       	mov	r14, r26
    49d0:	a2 e0       	ldi	r26, 0x02	; 2
    49d2:	fa 2e       	mov	r15, r26
    49d4:	e2 1a       	sub	r14, r18
    49d6:	f3 0a       	sbc	r15, r19
    49d8:	1d c0       	rjmp	.+58     	; 0x4a14 <_Z14setupPulsesPPMv+0xe2>
    uint8_t p=8+g_model.ppmNCH*2; //Channels *2
    uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    for(uint8_t i=0;i<p;i++){ //NUM_CHNOUT
        int16_t v = max(min(g_chans512[i],(int16_t)PPM_range),(int16_t)-PPM_range) + (int16_t)PPM_CENTER;
    49da:	d8 01       	movw	r26, r16
    49dc:	cd 91       	ld	r28, X+
    49de:	dd 91       	ld	r29, X+
    49e0:	8d 01       	movw	r16, r26
    49e2:	db 01       	movw	r26, r22
    49e4:	c6 17       	cp	r28, r22
    49e6:	d7 07       	cpc	r29, r23
    49e8:	0c f4       	brge	.+2      	; 0x49ec <_Z14setupPulsesPPMv+0xba>
    49ea:	de 01       	movw	r26, r28
    49ec:	e6 01       	movw	r28, r12
    49ee:	ca 16       	cp	r12, r26
    49f0:	db 06       	cpc	r13, r27
    49f2:	0c f4       	brge	.+2      	; 0x49f6 <_Z14setupPulsesPPMv+0xc4>
    49f4:	ed 01       	movw	r28, r26
    49f6:	de 01       	movw	r26, r28
    49f8:	a0 5a       	subi	r26, 0xA0	; 160
    49fa:	b6 4f       	sbci	r27, 0xF6	; 246
        rest-=(v+q);
    49fc:	e4 01       	movw	r28, r8
    49fe:	ca 1b       	sub	r28, r26
    4a00:	db 0b       	sbc	r29, r27
    4a02:	8c 0f       	add	r24, r28
    4a04:	9d 1f       	adc	r25, r29
        pulses2MHz[j++] = q;
    4a06:	31 83       	std	Z+1, r19	; 0x01
    4a08:	20 83       	st	Z, r18
        pulses2MHz[j++] = v - q + 600; /* as Pat MacKenzie suggests */
    4a0a:	ae 0d       	add	r26, r14
    4a0c:	bf 1d       	adc	r27, r15
    4a0e:	b3 83       	std	Z+3, r27	; 0x03
    4a10:	a2 83       	std	Z+2, r26	; 0x02
    4a12:	34 96       	adiw	r30, 0x04	; 4
    uint8_t j=0;
    uint8_t p=8+g_model.ppmNCH*2; //Channels *2
    uint16_t q=(g_model.ppmDelay*50+300)*2; //Stoplen *2
    uint16_t rest=22500u*2-q; //Minimum Framelen=22.5 ms
    if(p>9) rest=p*(1720u*2 + q) + 4000u*2; //for more than 9 channels, frame must be longer
    for(uint8_t i=0;i<p;i++){ //NUM_CHNOUT
    4a14:	04 17       	cp	r16, r20
    4a16:	15 07       	cpc	r17, r21
    4a18:	01 f7       	brne	.-64     	; 0x49da <_Z14setupPulsesPPMv+0xa8>
    4a1a:	bb 0c       	add	r11, r11
        int16_t v = max(min(g_chans512[i],(int16_t)PPM_range),(int16_t)-PPM_range) + (int16_t)PPM_CENTER;
        rest-=(v+q);
        pulses2MHz[j++] = q;
        pulses2MHz[j++] = v - q + 600; /* as Pat MacKenzie suggests */
    }
    pulses2MHz[j++]=q;
    4a1c:	ab 2d       	mov	r26, r11
    4a1e:	b0 e0       	ldi	r27, 0x00	; 0
    4a20:	aa 0f       	add	r26, r26
    4a22:	bb 1f       	adc	r27, r27
    4a24:	a0 5f       	subi	r26, 0xF0	; 240
    4a26:	b9 4e       	sbci	r27, 0xE9	; 233
    4a28:	2d 93       	st	X+, r18
    4a2a:	3c 93       	st	X, r19
    4a2c:	b3 94       	inc	r11
    pulses2MHz[j++]=rest;
    4a2e:	ab 2d       	mov	r26, r11
    4a30:	b0 e0       	ldi	r27, 0x00	; 0
    4a32:	aa 0f       	add	r26, r26
    4a34:	bb 1f       	adc	r27, r27
    4a36:	a0 5f       	subi	r26, 0xF0	; 240
    4a38:	b9 4e       	sbci	r27, 0xE9	; 233
    4a3a:	11 96       	adiw	r26, 0x01	; 1
    4a3c:	9c 93       	st	X, r25
    4a3e:	8e 93       	st	-X, r24
    4a40:	b3 94       	inc	r11
    pulses2MHz[j++]=0;
    4a42:	eb 2d       	mov	r30, r11
    4a44:	f0 e0       	ldi	r31, 0x00	; 0
    4a46:	ee 0f       	add	r30, r30
    4a48:	ff 1f       	adc	r31, r31
    4a4a:	e0 5f       	subi	r30, 0xF0	; 240
    4a4c:	f9 4e       	sbci	r31, 0xE9	; 233
    4a4e:	11 82       	std	Z+1, r1	; 0x01
    4a50:	10 82       	st	Z, r1

}
    4a52:	df 91       	pop	r29
    4a54:	cf 91       	pop	r28
    4a56:	1f 91       	pop	r17
    4a58:	0f 91       	pop	r16
    4a5a:	ff 90       	pop	r15
    4a5c:	ef 90       	pop	r14
    4a5e:	df 90       	pop	r13
    4a60:	cf 90       	pop	r12
    4a62:	bf 90       	pop	r11
    4a64:	9f 90       	pop	r9
    4a66:	8f 90       	pop	r8
    4a68:	08 95       	ret

00004a6a <_Z10_send_hilojj>:

uint16_t *pulses2MHzPtr;
#define BITLEN (600u*2)
void _send_hilo(uint16_t hi,uint16_t lo)
{
  *pulses2MHzPtr++=hi; *pulses2MHzPtr++=lo;
    4a6a:	a0 91 4d 19 	lds	r26, 0x194D
    4a6e:	b0 91 4e 19 	lds	r27, 0x194E
    4a72:	fd 01       	movw	r30, r26
    4a74:	81 93       	st	Z+, r24
    4a76:	91 93       	st	Z+, r25
    4a78:	13 96       	adiw	r26, 0x03	; 3
    4a7a:	7c 93       	st	X, r23
    4a7c:	6e 93       	st	-X, r22
    4a7e:	12 97       	sbiw	r26, 0x02	; 2
    4a80:	32 96       	adiw	r30, 0x02	; 2
    4a82:	f0 93 4e 19 	sts	0x194E, r31
    4a86:	e0 93 4d 19 	sts	0x194D, r30
}
    4a8a:	08 95       	ret

00004a8c <_Z11sendBitSilvh>:
#define send_hilo_silv( hi, lo) _send_hilo( (hi)*BITLEN,(lo)*BITLEN )

void sendBitSilv(uint8_t val)
{
  send_hilo_silv((val)?2:1,(val)?2:1);
    4a8c:	88 23       	and	r24, r24
    4a8e:	19 f0       	breq	.+6      	; 0x4a96 <_Z11sendBitSilvh+0xa>
    4a90:	60 e6       	ldi	r22, 0x60	; 96
    4a92:	79 e0       	ldi	r23, 0x09	; 9
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <_Z11sendBitSilvh+0xe>
    4a96:	60 eb       	ldi	r22, 0xB0	; 176
    4a98:	74 e0       	ldi	r23, 0x04	; 4
    4a9a:	cb 01       	movw	r24, r22
    4a9c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>
}
    4aa0:	08 95       	ret

00004aa2 <_Z13send2BitsSilvh>:
void send2BitsSilv(uint8_t val)
{
    4aa2:	cf 93       	push	r28
    4aa4:	c8 2f       	mov	r28, r24
  sendBitSilv(val&2);sendBitSilv(val&1);
    4aa6:	82 70       	andi	r24, 0x02	; 2
    4aa8:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <_Z11sendBitSilvh>
    4aac:	8c 2f       	mov	r24, r28
    4aae:	81 70       	andi	r24, 0x01	; 1
    4ab0:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <_Z11sendBitSilvh>
}
    4ab4:	cf 91       	pop	r28
    4ab6:	08 95       	ret

00004ab8 <_Z17setupPulsesSilverv>:
//chk = 0 - chan -m1>>2 -m1 -m2>>2 -m2
//<= 500us Probleme
//>= 650us Probleme
//periode orig: 450ms
void setupPulsesSilver()
{
    4ab8:	ef 92       	push	r14
    4aba:	ff 92       	push	r15
    4abc:	0f 93       	push	r16
    4abe:	1f 93       	push	r17
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
  int8_t chan=1; //chan 1=C 2=B 0=A?

  switch(g_model.protocol)
    4ac4:	80 91 98 12 	lds	r24, 0x1298
    4ac8:	87 70       	andi	r24, 0x07	; 7
    4aca:	90 e0       	ldi	r25, 0x00	; 0
    4acc:	9c 01       	movw	r18, r24
    4ace:	21 50       	subi	r18, 0x01	; 1
    4ad0:	30 40       	sbci	r19, 0x00	; 0
    4ad2:	23 30       	cpi	r18, 0x03	; 3
    4ad4:	31 05       	cpc	r19, r1
    4ad6:	28 f4       	brcc	.+10     	; 0x4ae2 <_Z17setupPulsesSilverv+0x2a>
    4ad8:	8d 55       	subi	r24, 0x5D	; 93
    4ada:	99 4f       	sbci	r25, 0xF9	; 249
    4adc:	fc 01       	movw	r30, r24
    4ade:	00 81       	ld	r16, Z
    4ae0:	01 c0       	rjmp	.+2      	; 0x4ae4 <_Z17setupPulsesSilverv+0x2c>
    4ae2:	01 e0       	ldi	r16, 0x01	; 1
    case PROTO_SILV_A: chan=0; break;
    case PROTO_SILV_B: chan=2; break;
    case PROTO_SILV_C: chan=1; break;
  }

  int8_t m1 = (uint16_t)(g_chans512[0]+1024)*2 / 256;
    4ae4:	20 91 19 19 	lds	r18, 0x1919
    4ae8:	30 91 1a 19 	lds	r19, 0x191A
    4aec:	20 50       	subi	r18, 0x00	; 0
    4aee:	3c 4f       	sbci	r19, 0xFC	; 252
    4af0:	22 0f       	add	r18, r18
    4af2:	33 1f       	adc	r19, r19
  int8_t m2 = (uint16_t)(g_chans512[1]+1024)*2 / 256;
    4af4:	40 91 1b 19 	lds	r20, 0x191B
    4af8:	50 91 1c 19 	lds	r21, 0x191C
    4afc:	40 50       	subi	r20, 0x00	; 0
    4afe:	5c 4f       	sbci	r21, 0xFC	; 252
    4b00:	44 0f       	add	r20, r20
    4b02:	55 1f       	adc	r21, r21
    4b04:	15 2f       	mov	r17, r21
    4b06:	83 2f       	mov	r24, r19
    4b08:	37 fd       	sbrc	r19, 7
    4b0a:	80 e0       	ldi	r24, 0x00	; 0
    4b0c:	17 fd       	sbrc	r17, 7
    4b0e:	10 e0       	ldi	r17, 0x00	; 0
    4b10:	f8 2e       	mov	r15, r24
    4b12:	80 31       	cpi	r24, 0x10	; 16
    4b14:	14 f0       	brlt	.+4      	; 0x4b1a <_Z17setupPulsesSilverv+0x62>
    4b16:	2f e0       	ldi	r18, 0x0F	; 15
    4b18:	f2 2e       	mov	r15, r18
    4b1a:	10 31       	cpi	r17, 0x10	; 16
    4b1c:	0c f0       	brlt	.+2      	; 0x4b20 <_Z17setupPulsesSilverv+0x68>
    4b1e:	1f e0       	ldi	r17, 0x0F	; 15
  if (m1 < 0)    m1=0;
  if (m2 < 0)    m2=0;
  if (m1 > 15)   m1=15;
  if (m2 > 15)   m2=15;
  if (m2 > m1+9) m1=m2-9;
    4b20:	41 2f       	mov	r20, r17
    4b22:	55 27       	eor	r21, r21
    4b24:	47 fd       	sbrc	r20, 7
    4b26:	50 95       	com	r21
    4b28:	2f 2d       	mov	r18, r15
    4b2a:	33 27       	eor	r19, r19
    4b2c:	27 fd       	sbrc	r18, 7
    4b2e:	30 95       	com	r19
    4b30:	27 5f       	subi	r18, 0xF7	; 247
    4b32:	3f 4f       	sbci	r19, 0xFF	; 255
    4b34:	24 17       	cp	r18, r20
    4b36:	35 07       	cpc	r19, r21
    4b38:	1c f4       	brge	.+6      	; 0x4b40 <_Z17setupPulsesSilverv+0x88>
    4b3a:	97 ef       	ldi	r25, 0xF7	; 247
    4b3c:	f9 2e       	mov	r15, r25
    4b3e:	f1 0e       	add	r15, r17
  if (m1 > m2+9) m2=m1-9;
    4b40:	cf 2d       	mov	r28, r15
    4b42:	dd 27       	eor	r29, r29
    4b44:	c7 fd       	sbrc	r28, 7
    4b46:	d0 95       	com	r29
    4b48:	47 5f       	subi	r20, 0xF7	; 247
    4b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4b4c:	4c 17       	cp	r20, r28
    4b4e:	5d 07       	cpc	r21, r29
    4b50:	14 f4       	brge	.+4      	; 0x4b56 <_Z17setupPulsesSilverv+0x9e>
    4b52:	1f 2d       	mov	r17, r15
    4b54:	19 50       	subi	r17, 0x09	; 9
  //uint8_t i=0;
  pulses2MHzPtr=pulses2MHz;
    4b56:	20 e1       	ldi	r18, 0x10	; 16
    4b58:	36 e1       	ldi	r19, 0x16	; 22
    4b5a:	30 93 4e 19 	sts	0x194E, r19
    4b5e:	20 93 4d 19 	sts	0x194D, r18
  send_hilo_silv(5,1); //idx 0 erzeugt pegel=0 am Ausgang, wird  als high gesendet
    4b62:	80 e7       	ldi	r24, 0x70	; 112
    4b64:	97 e1       	ldi	r25, 0x17	; 23
    4b66:	60 eb       	ldi	r22, 0xB0	; 176
    4b68:	74 e0       	ldi	r23, 0x04	; 4
    4b6a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>
  send2BitsSilv(0);
    4b6e:	80 e0       	ldi	r24, 0x00	; 0
    4b70:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  send_hilo_silv(2,1);
    4b74:	80 e6       	ldi	r24, 0x60	; 96
    4b76:	99 e0       	ldi	r25, 0x09	; 9
    4b78:	60 eb       	ldi	r22, 0xB0	; 176
    4b7a:	74 e0       	ldi	r23, 0x04	; 4
    4b7c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>
  send_hilo_silv(2,1);
    4b80:	80 e6       	ldi	r24, 0x60	; 96
    4b82:	99 e0       	ldi	r25, 0x09	; 9
    4b84:	60 eb       	ldi	r22, 0xB0	; 176
    4b86:	74 e0       	ldi	r23, 0x04	; 4
    4b88:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>

  send2BitsSilv(chan); //chan 1=C 2=B 0=A?
    4b8c:	80 2f       	mov	r24, r16
    4b8e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  uint8_t sum = 0 - chan;
    4b92:	01 95       	neg	r16

  send2BitsSilv(m1>>2); //m1
    4b94:	d5 95       	asr	r29
    4b96:	c7 95       	ror	r28
    4b98:	d5 95       	asr	r29
    4b9a:	c7 95       	ror	r28
    4b9c:	8c 2f       	mov	r24, r28
    4b9e:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  sum-=m1>>2;
    4ba2:	0c 1b       	sub	r16, r28
  send2BitsSilv(m1);
    4ba4:	8f 2d       	mov	r24, r15
    4ba6:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  sum-=m1;
    4baa:	0f 19       	sub	r16, r15

  send2BitsSilv(m2>>2); //m2
    4bac:	21 2f       	mov	r18, r17
    4bae:	33 27       	eor	r19, r19
    4bb0:	27 fd       	sbrc	r18, 7
    4bb2:	30 95       	com	r19
    4bb4:	35 95       	asr	r19
    4bb6:	27 95       	ror	r18
    4bb8:	35 95       	asr	r19
    4bba:	27 95       	ror	r18
    4bbc:	c2 2f       	mov	r28, r18
    4bbe:	82 2f       	mov	r24, r18
    4bc0:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  sum-=m2>>2;
    4bc4:	0c 1b       	sub	r16, r28
  send2BitsSilv(m2);
    4bc6:	81 2f       	mov	r24, r17
    4bc8:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>
  sum-=m2;

  send2BitsSilv(sum); //chk
    4bcc:	80 2f       	mov	r24, r16
    4bce:	81 1b       	sub	r24, r17
    4bd0:	0e 94 51 25 	call	0x4aa2	; 0x4aa2 <_Z13send2BitsSilvh>

  sendBitSilv(0);
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <_Z11sendBitSilvh>
  pulses2MHzPtr--;
    4bda:	80 91 4d 19 	lds	r24, 0x194D
    4bde:	90 91 4e 19 	lds	r25, 0x194E
    4be2:	02 97       	sbiw	r24, 0x02	; 2
    4be4:	90 93 4e 19 	sts	0x194E, r25
    4be8:	80 93 4d 19 	sts	0x194D, r24
  send_hilo_silv(50,0); //low-impuls (pegel=1) ueberschreiben
    4bec:	80 e6       	ldi	r24, 0x60	; 96
    4bee:	9a ee       	ldi	r25, 0xEA	; 234
    4bf0:	60 e0       	ldi	r22, 0x00	; 0
    4bf2:	70 e0       	ldi	r23, 0x00	; 0
    4bf4:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>


}
    4bf8:	df 91       	pop	r29
    4bfa:	cf 91       	pop	r28
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	ff 90       	pop	r15
    4c02:	ef 90       	pop	r14
    4c04:	08 95       	ret

00004c06 <_Z10sendBitTrah>:
 */

#define BIT_TRA (400u*2)
void sendBitTra(uint8_t val)
{
  if(val) _send_hilo( BIT_TRA*1 , BIT_TRA*2 );
    4c06:	88 23       	and	r24, r24
    4c08:	29 f0       	breq	.+10     	; 0x4c14 <_Z10sendBitTrah+0xe>
    4c0a:	80 e2       	ldi	r24, 0x20	; 32
    4c0c:	93 e0       	ldi	r25, 0x03	; 3
    4c0e:	60 e4       	ldi	r22, 0x40	; 64
    4c10:	76 e0       	ldi	r23, 0x06	; 6
    4c12:	04 c0       	rjmp	.+8      	; 0x4c1c <_Z10sendBitTrah+0x16>
  else    _send_hilo( BIT_TRA*2 , BIT_TRA*1 );
    4c14:	80 e4       	ldi	r24, 0x40	; 64
    4c16:	96 e0       	ldi	r25, 0x06	; 6
    4c18:	60 e2       	ldi	r22, 0x20	; 32
    4c1a:	73 e0       	ldi	r23, 0x03	; 3
    4c1c:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>
    4c20:	08 95       	ret

00004c22 <_Z11sendByteTrah>:
}
void sendByteTra(uint8_t val)
{
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	d8 2f       	mov	r29, r24
    4c28:	c8 e0       	ldi	r28, 0x08	; 8
  for(uint8_t i=0; i<8; i++, val>>=1) sendBitTra(val&1);
    4c2a:	8d 2f       	mov	r24, r29
    4c2c:	81 70       	andi	r24, 0x01	; 1
    4c2e:	0e 94 03 26 	call	0x4c06	; 0x4c06 <_Z10sendBitTrah>
    4c32:	d6 95       	lsr	r29
    4c34:	c1 50       	subi	r28, 0x01	; 1
    4c36:	c9 f7       	brne	.-14     	; 0x4c2a <_Z11sendByteTrah+0x8>
}
    4c38:	df 91       	pop	r29
    4c3a:	cf 91       	pop	r28
    4c3c:	08 95       	ret

00004c3e <_Z24setupPulsesTracerCtp1009v>:
void setupPulsesTracerCtp1009()
{
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
  pulses2MHzPtr=pulses2MHz;
    4c42:	80 e1       	ldi	r24, 0x10	; 16
    4c44:	96 e1       	ldi	r25, 0x16	; 22
    4c46:	90 93 4e 19 	sts	0x194E, r25
    4c4a:	80 93 4d 19 	sts	0x194D, r24
  static bool phase;
  if( (phase=!phase) ){
    4c4e:	80 91 4f 19 	lds	r24, 0x194F
    4c52:	91 e0       	ldi	r25, 0x01	; 1
    4c54:	89 27       	eor	r24, r25
    4c56:	80 93 4f 19 	sts	0x194F, r24
    4c5a:	88 23       	and	r24, r24
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <_Z24setupPulsesTracerCtp1009v+0x22>
    4c5e:	50 c0       	rjmp	.+160    	; 0x4d00 <_Z24setupPulsesTracerCtp1009v+0xc2>
    uint8_t thr = min(127u,(uint16_t)(g_chans512[0]+1024+8) /  16u);
    4c60:	80 91 19 19 	lds	r24, 0x1919
    4c64:	90 91 1a 19 	lds	r25, 0x191A
    4c68:	88 5f       	subi	r24, 0xF8	; 248
    4c6a:	9b 4f       	sbci	r25, 0xFB	; 251
    4c6c:	24 e0       	ldi	r18, 0x04	; 4
    4c6e:	96 95       	lsr	r25
    4c70:	87 95       	ror	r24
    4c72:	2a 95       	dec	r18
    4c74:	e1 f7       	brne	.-8      	; 0x4c6e <_Z24setupPulsesTracerCtp1009v+0x30>
    4c76:	80 38       	cpi	r24, 0x80	; 128
    4c78:	91 05       	cpc	r25, r1
    4c7a:	10 f0       	brcs	.+4      	; 0x4c80 <_Z24setupPulsesTracerCtp1009v+0x42>
    4c7c:	8f e7       	ldi	r24, 0x7F	; 127
    4c7e:	90 e0       	ldi	r25, 0x00	; 0
    4c80:	d8 2f       	mov	r29, r24
    uint8_t rot;
    if (g_chans512[1] >= 0)
    4c82:	40 91 1b 19 	lds	r20, 0x191B
    4c86:	50 91 1c 19 	lds	r21, 0x191C
    4c8a:	57 fd       	sbrc	r21, 7
    4c8c:	10 c0       	rjmp	.+32     	; 0x4cae <_Z24setupPulsesTracerCtp1009v+0x70>
    {
      rot = min(63u,(uint16_t)( g_chans512[1]+16) / 32u) | 0x40;
    4c8e:	9a 01       	movw	r18, r20
    4c90:	20 5f       	subi	r18, 0xF0	; 240
    4c92:	3f 4f       	sbci	r19, 0xFF	; 255
    4c94:	95 e0       	ldi	r25, 0x05	; 5
    4c96:	36 95       	lsr	r19
    4c98:	27 95       	ror	r18
    4c9a:	9a 95       	dec	r25
    4c9c:	e1 f7       	brne	.-8      	; 0x4c96 <_Z24setupPulsesTracerCtp1009v+0x58>
    4c9e:	20 34       	cpi	r18, 0x40	; 64
    4ca0:	31 05       	cpc	r19, r1
    4ca2:	10 f0       	brcs	.+4      	; 0x4ca8 <_Z24setupPulsesTracerCtp1009v+0x6a>
    4ca4:	2f e3       	ldi	r18, 0x3F	; 63
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	c2 2f       	mov	r28, r18
    4caa:	c0 64       	ori	r28, 0x40	; 64
    4cac:	0f c0       	rjmp	.+30     	; 0x4ccc <_Z24setupPulsesTracerCtp1009v+0x8e>
    }else{
      rot = min(63u,(uint16_t)(-g_chans512[1]+16) / 32u);
    4cae:	20 e1       	ldi	r18, 0x10	; 16
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	24 1b       	sub	r18, r20
    4cb4:	35 0b       	sbc	r19, r21
    4cb6:	85 e0       	ldi	r24, 0x05	; 5
    4cb8:	36 95       	lsr	r19
    4cba:	27 95       	ror	r18
    4cbc:	8a 95       	dec	r24
    4cbe:	e1 f7       	brne	.-8      	; 0x4cb8 <_Z24setupPulsesTracerCtp1009v+0x7a>
    4cc0:	20 34       	cpi	r18, 0x40	; 64
    4cc2:	31 05       	cpc	r19, r1
    4cc4:	10 f0       	brcs	.+4      	; 0x4cca <_Z24setupPulsesTracerCtp1009v+0x8c>
    4cc6:	2f e3       	ldi	r18, 0x3F	; 63
    4cc8:	30 e0       	ldi	r19, 0x00	; 0
    4cca:	c2 2f       	mov	r28, r18
    }
    sendByteTra(thr);
    4ccc:	8d 2f       	mov	r24, r29
    4cce:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    sendByteTra(rot);
    4cd2:	8c 2f       	mov	r24, r28
    4cd4:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    uint8_t chk=thr^rot;
    4cd8:	cd 27       	eor	r28, r29
    sendByteTra( (chk>>4) | (chk<<4) );
    4cda:	2c 2f       	mov	r18, r28
    4cdc:	30 e0       	ldi	r19, 0x00	; 0
    4cde:	c9 01       	movw	r24, r18
    4ce0:	c4 e0       	ldi	r28, 0x04	; 4
    4ce2:	88 0f       	add	r24, r24
    4ce4:	99 1f       	adc	r25, r25
    4ce6:	ca 95       	dec	r28
    4ce8:	e1 f7       	brne	.-8      	; 0x4ce2 <_Z24setupPulsesTracerCtp1009v+0xa4>
    4cea:	b4 e0       	ldi	r27, 0x04	; 4
    4cec:	35 95       	asr	r19
    4cee:	27 95       	ror	r18
    4cf0:	ba 95       	dec	r27
    4cf2:	e1 f7       	brne	.-8      	; 0x4cec <_Z24setupPulsesTracerCtp1009v+0xae>
    4cf4:	82 2b       	or	r24, r18
    4cf6:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    _send_hilo( 5000*2, 2000*2 );
    4cfa:	80 e1       	ldi	r24, 0x10	; 16
    4cfc:	97 e2       	ldi	r25, 0x27	; 39
    4cfe:	2b c0       	rjmp	.+86     	; 0x4d56 <_Z24setupPulsesTracerCtp1009v+0x118>
  }else{
    uint8_t fwd = min(127u,(uint16_t)(g_chans512[2]+1024) /  16u) | 0x80;
    4d00:	80 91 1d 19 	lds	r24, 0x191D
    4d04:	90 91 1e 19 	lds	r25, 0x191E
    4d08:	80 50       	subi	r24, 0x00	; 0
    4d0a:	9c 4f       	sbci	r25, 0xFC	; 252
    4d0c:	a4 e0       	ldi	r26, 0x04	; 4
    4d0e:	96 95       	lsr	r25
    4d10:	87 95       	ror	r24
    4d12:	aa 95       	dec	r26
    4d14:	e1 f7       	brne	.-8      	; 0x4d0e <_Z24setupPulsesTracerCtp1009v+0xd0>
    4d16:	80 38       	cpi	r24, 0x80	; 128
    4d18:	91 05       	cpc	r25, r1
    4d1a:	10 f0       	brcs	.+4      	; 0x4d20 <_Z24setupPulsesTracerCtp1009v+0xe2>
    4d1c:	8f e7       	ldi	r24, 0x7F	; 127
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	c8 2f       	mov	r28, r24
    4d22:	c0 68       	ori	r28, 0x80	; 128
    sendByteTra(fwd);
    4d24:	8c 2f       	mov	r24, r28
    4d26:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    sendByteTra(0x8e);
    4d2a:	8e e8       	ldi	r24, 0x8E	; 142
    4d2c:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    uint8_t chk=fwd^0x8e;
    4d30:	2e e8       	ldi	r18, 0x8E	; 142
    4d32:	2c 27       	eor	r18, r28
    sendByteTra( (chk>>4) | (chk<<4) );
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	c9 01       	movw	r24, r18
    4d38:	f4 e0       	ldi	r31, 0x04	; 4
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	fa 95       	dec	r31
    4d40:	e1 f7       	brne	.-8      	; 0x4d3a <_Z24setupPulsesTracerCtp1009v+0xfc>
    4d42:	e4 e0       	ldi	r30, 0x04	; 4
    4d44:	35 95       	asr	r19
    4d46:	27 95       	ror	r18
    4d48:	ea 95       	dec	r30
    4d4a:	e1 f7       	brne	.-8      	; 0x4d44 <_Z24setupPulsesTracerCtp1009v+0x106>
    4d4c:	82 2b       	or	r24, r18
    4d4e:	0e 94 11 26 	call	0x4c22	; 0x4c22 <_Z11sendByteTrah>
    _send_hilo( 7000*2, 2000*2 );
    4d52:	80 eb       	ldi	r24, 0xB0	; 176
    4d54:	96 e3       	ldi	r25, 0x36	; 54
    4d56:	60 ea       	ldi	r22, 0xA0	; 160
    4d58:	7f e0       	ldi	r23, 0x0F	; 15
    4d5a:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <_Z10_send_hilojj>
  }
  *pulses2MHzPtr++=0;
    4d5e:	e0 91 4d 19 	lds	r30, 0x194D
    4d62:	f0 91 4e 19 	lds	r31, 0x194E
    4d66:	11 92       	st	Z+, r1
    4d68:	11 92       	st	Z+, r1
    4d6a:	f0 93 4e 19 	sts	0x194E, r31
    4d6e:	e0 93 4d 19 	sts	0x194D, r30
  if((pulses2MHzPtr-pulses2MHz) >= (signed)DIM(pulses2MHz)) alert(PSTR("pulse tab overflow"));
    4d72:	e0 51       	subi	r30, 0x10	; 16
    4d74:	f6 41       	sbci	r31, 0x16	; 22
    4d76:	e0 3f       	cpi	r30, 0xF0	; 240
    4d78:	f1 05       	cpc	r31, r1
    4d7a:	2c f0       	brlt	.+10     	; 0x4d86 <_Z24setupPulsesTracerCtp1009v+0x148>
    4d7c:	8d e0       	ldi	r24, 0x0D	; 13
    4d7e:	92 e0       	ldi	r25, 0x02	; 2
    4d80:	60 e0       	ldi	r22, 0x00	; 0
    4d82:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
}
    4d86:	df 91       	pop	r29
    4d88:	cf 91       	pop	r28
    4d8a:	08 95       	ret

00004d8c <_Z11setupPulsesv>:
  the functions below are from int-level
******************************************************************************/

void setupPulses()
{
  switch(g_model.protocol)
    4d8c:	80 91 98 12 	lds	r24, 0x1298
    4d90:	87 70       	andi	r24, 0x07	; 7
    4d92:	90 e0       	ldi	r25, 0x00	; 0
    4d94:	84 30       	cpi	r24, 0x04	; 4
    4d96:	91 05       	cpc	r25, r1
    4d98:	34 f4       	brge	.+12     	; 0x4da6 <_Z11setupPulsesv+0x1a>
    4d9a:	81 30       	cpi	r24, 0x01	; 1
    4d9c:	91 05       	cpc	r25, r1
    4d9e:	54 f4       	brge	.+20     	; 0x4db4 <_Z11setupPulsesv+0x28>
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	29 f0       	breq	.+10     	; 0x4dae <_Z11setupPulsesv+0x22>
    4da4:	08 95       	ret
    4da6:	84 30       	cpi	r24, 0x04	; 4
    4da8:	91 05       	cpc	r25, r1
    4daa:	49 f4       	brne	.+18     	; 0x4dbe <_Z11setupPulsesv+0x32>
    4dac:	06 c0       	rjmp	.+12     	; 0x4dba <_Z11setupPulsesv+0x2e>
  {
    case PROTO_PPM:
      setupPulsesPPM();
    4dae:	0e 94 99 24 	call	0x4932	; 0x4932 <_Z14setupPulsesPPMv>
      break;
    4db2:	08 95       	ret
    case PROTO_SILV_A:
    case PROTO_SILV_B:
    case PROTO_SILV_C:
      setupPulsesSilver();
    4db4:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <_Z17setupPulsesSilverv>
      break;
    4db8:	08 95       	ret
    case PROTO_TRACER_CTP1009:
      setupPulsesTracerCtp1009();
    4dba:	0e 94 1f 26 	call	0x4c3e	; 0x4c3e <_Z24setupPulsesTracerCtp1009v>
    4dbe:	08 95       	ret

00004dc0 <_Z17menuProcTemplatesh>:
}
#endif

#ifdef TEMPLATES
void menuProcTemplates(uint8_t event)
{
    4dc0:	af 92       	push	r10
    4dc2:	bf 92       	push	r11
    4dc4:	df 92       	push	r13
    4dc6:	ef 92       	push	r14
    4dc8:	ff 92       	push	r15
    4dca:	0f 93       	push	r16
    4dcc:	1f 93       	push	r17
    4dce:	df 93       	push	r29
    4dd0:	cf 93       	push	r28
    4dd2:	0f 92       	push	r0
    4dd4:	cd b7       	in	r28, 0x3d	; 61
    4dd6:	de b7       	in	r29, 0x3e	; 62
    4dd8:	e8 2e       	mov	r14, r24
  SIMPLE_MENU("TEMPLATES", menuTabModel, e_Templates, 1+NUM_TEMPLATES+1);
    4dda:	80 e0       	ldi	r24, 0x00	; 0
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	4d eb       	ldi	r20, 0xBD	; 189
    4de0:	52 e0       	ldi	r21, 0x02	; 2
    4de2:	22 e0       	ldi	r18, 0x02	; 2
    4de4:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    4de8:	8e 2d       	mov	r24, r14
    4dea:	6b e0       	ldi	r22, 0x0B	; 11
    4dec:	47 ea       	ldi	r20, 0xA7	; 167
    4dee:	56 e0       	ldi	r21, 0x06	; 6
    4df0:	2c e0       	ldi	r18, 0x0C	; 12
    4df2:	08 e0       	ldi	r16, 0x08	; 8
    4df4:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    4df8:	88 23       	and	r24, r24
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <_Z17menuProcTemplatesh+0x3e>
    4dfc:	67 c0       	rjmp	.+206    	; 0x4ecc <_Z17menuProcTemplatesh+0x10c>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
    4dfe:	10 91 4b 19 	lds	r17, 0x194B
    4e02:	11 50       	subi	r17, 0x01	; 1

  switch(event)
    4e04:	8e 2d       	mov	r24, r14
    4e06:	80 38       	cpi	r24, 0x80	; 128
    4e08:	a1 f4       	brne	.+40     	; 0x4e32 <_Z17menuProcTemplatesh+0x72>
  {
    case EVT_KEY_LONG(KEY_MENU):
      killEvents(event);
    4e0a:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      //apply mixes or delete
      s_noHi = NO_HI_LEN;
    4e0e:	89 e1       	ldi	r24, 0x19	; 25
    4e10:	80 93 17 19 	sts	0x1917, r24
      if (sub>=0 && sub<(int8_t)NUM_TEMPLATES)
    4e14:	17 30       	cpi	r17, 0x07	; 7
    4e16:	18 f4       	brcc	.+6      	; 0x4e1e <_Z17menuProcTemplatesh+0x5e>
        applyTemplate(sub);
    4e18:	81 2f       	mov	r24, r17
    4e1a:	0e 94 e9 a6 	call	0x14dd2	; 0x14dd2 <_Z13applyTemplateh>
      if (sub==NUM_TEMPLATES)
    4e1e:	17 30       	cpi	r17, 0x07	; 7
    4e20:	11 f4       	brne	.+4      	; 0x4e26 <_Z17menuProcTemplatesh+0x66>
        clearMixes();
    4e22:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <_Z10clearMixesv>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    4e26:	80 91 73 15 	lds	r24, 0x1573
    4e2a:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    4e2e:	84 e6       	ldi	r24, 0x64	; 100
    4e30:	87 bd       	out	0x27, r24	; 39
}
#endif

#ifdef TEMPLATES
void menuProcTemplates(uint8_t event)
{
    4e32:	dd 24       	eor	r13, r13
    4e34:	98 e0       	ldi	r25, 0x08	; 8
  for(uint8_t i=0; i<7; i++){
    k=i+s_pgOfs;
    if(k==NUM_TEMPLATES) break;

    //write mix names here
    lcd_outdezNAtt(3*FW, y, k+1, (sub==k ? INVERS : 0)|LEADING0, 2);
    4e36:	e1 2e       	mov	r14, r17
    4e38:	ff 24       	eor	r15, r15
    4e3a:	e7 fc       	sbrc	r14, 7
    4e3c:	f0 94       	com	r15
      break;
  }

  y=1*FH;
  for(uint8_t i=0; i<7; i++){
    k=i+s_pgOfs;
    4e3e:	80 91 15 19 	lds	r24, 0x1915
    4e42:	8d 0d       	add	r24, r13
    if(k==NUM_TEMPLATES) break;
    4e44:	87 30       	cpi	r24, 0x07	; 7
    4e46:	89 f1       	breq	.+98     	; 0x4eaa <_Z17menuProcTemplatesh+0xea>

    //write mix names here
    lcd_outdezNAtt(3*FW, y, k+1, (sub==k ? INVERS : 0)|LEADING0, 2);
    4e48:	a8 2e       	mov	r10, r24
    4e4a:	bb 24       	eor	r11, r11
    4e4c:	a5 01       	movw	r20, r10
    4e4e:	4f 5f       	subi	r20, 0xFF	; 255
    4e50:	5f 4f       	sbci	r21, 0xFF	; 255
    4e52:	ea 14       	cp	r14, r10
    4e54:	fb 04       	cpc	r15, r11
    4e56:	11 f4       	brne	.+4      	; 0x4e5c <_Z17menuProcTemplatesh+0x9c>
    4e58:	22 e1       	ldi	r18, 0x12	; 18
    4e5a:	01 c0       	rjmp	.+2      	; 0x4e5e <_Z17menuProcTemplatesh+0x9e>
    4e5c:	20 e1       	ldi	r18, 0x10	; 16
    4e5e:	82 e1       	ldi	r24, 0x12	; 18
    4e60:	69 2f       	mov	r22, r25
    4e62:	02 e0       	ldi	r16, 0x02	; 2
    4e64:	99 83       	std	Y+1, r25	; 0x01
    4e66:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
    lcd_putsnAtt(4*FW, y, PSTR(TEMPLATES_STR)+TEMPLATES_LEN*k, TEMPLATES_LEN, (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
    4e6a:	a5 01       	movw	r20, r10
    4e6c:	44 0f       	add	r20, r20
    4e6e:	55 1f       	adc	r21, r21
    4e70:	4a 0d       	add	r20, r10
    4e72:	5b 1d       	adc	r21, r11
    4e74:	44 0f       	add	r20, r20
    4e76:	55 1f       	adc	r21, r21
    4e78:	44 0f       	add	r20, r20
    4e7a:	55 1f       	adc	r21, r21
    4e7c:	48 59       	subi	r20, 0x98	; 152
    4e7e:	5d 4f       	sbci	r21, 0xFD	; 253
    4e80:	80 91 17 19 	lds	r24, 0x1917
    4e84:	99 81       	ldd	r25, Y+1	; 0x01
    4e86:	88 23       	and	r24, r24
    4e88:	19 f4       	brne	.+6      	; 0x4e90 <_Z17menuProcTemplatesh+0xd0>
    4e8a:	ea 14       	cp	r14, r10
    4e8c:	fb 04       	cpc	r15, r11
    4e8e:	09 f0       	breq	.+2      	; 0x4e92 <_Z17menuProcTemplatesh+0xd2>
    4e90:	00 e0       	ldi	r16, 0x00	; 0
    4e92:	88 e1       	ldi	r24, 0x18	; 24
    4e94:	69 2f       	mov	r22, r25
    4e96:	2c e0       	ldi	r18, 0x0C	; 12
    4e98:	99 83       	std	Y+1, r25	; 0x01
    4e9a:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    y+=FH;
    4e9e:	99 81       	ldd	r25, Y+1	; 0x01
    4ea0:	98 5f       	subi	r25, 0xF8	; 248
      beepWarn1();
      break;
  }

  y=1*FH;
  for(uint8_t i=0; i<7; i++){
    4ea2:	d3 94       	inc	r13
    4ea4:	ed 2d       	mov	r30, r13
    4ea6:	e7 30       	cpi	r30, 0x07	; 7
    4ea8:	51 f6       	brne	.-108    	; 0x4e3e <_Z17menuProcTemplatesh+0x7e>
    //write mix names here
    lcd_outdezNAtt(3*FW, y, k+1, (sub==k ? INVERS : 0)|LEADING0, 2);
    lcd_putsnAtt(4*FW, y, PSTR(TEMPLATES_STR)+TEMPLATES_LEN*k, TEMPLATES_LEN, (s_noHi ? 0 : (sub==k ? INVERS  : 0)));
    y+=FH;
  }
  if(y>7*FH) return;
    4eaa:	99 33       	cpi	r25, 0x39	; 57
    4eac:	78 f4       	brcc	.+30     	; 0x4ecc <_Z17menuProcTemplatesh+0x10c>

  uint8_t attr = s_noHi ? 0 : ((sub==NUM_TEMPLATES) ? INVERS : 0);
    4eae:	80 91 17 19 	lds	r24, 0x1917
    4eb2:	88 23       	and	r24, r24
    4eb4:	21 f4       	brne	.+8      	; 0x4ebe <_Z17menuProcTemplatesh+0xfe>
    4eb6:	17 30       	cpi	r17, 0x07	; 7
    4eb8:	11 f4       	brne	.+4      	; 0x4ebe <_Z17menuProcTemplatesh+0xfe>
    4eba:	22 e0       	ldi	r18, 0x02	; 2
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <_Z17menuProcTemplatesh+0x100>
    4ebe:	20 e0       	ldi	r18, 0x00	; 0
  lcd_putsAtt(  1*FW,y,PSTR("CLEAR MIXES [MENU]"),attr);
    4ec0:	86 e0       	ldi	r24, 0x06	; 6
    4ec2:	69 2f       	mov	r22, r25
    4ec4:	45 e5       	ldi	r20, 0x55	; 85
    4ec6:	52 e0       	ldi	r21, 0x02	; 2
    4ec8:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  y+=FH;
}
    4ecc:	0f 90       	pop	r0
    4ece:	cf 91       	pop	r28
    4ed0:	df 91       	pop	r29
    4ed2:	1f 91       	pop	r17
    4ed4:	0f 91       	pop	r16
    4ed6:	ff 90       	pop	r15
    4ed8:	ef 90       	pop	r14
    4eda:	df 90       	pop	r13
    4edc:	bf 90       	pop	r11
    4ede:	af 90       	pop	r10
    4ee0:	08 95       	ret

00004ee2 <_Z17menuProcTelemetryh>:
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
{
    4ee2:	2f 92       	push	r2
    4ee4:	3f 92       	push	r3
    4ee6:	4f 92       	push	r4
    4ee8:	5f 92       	push	r5
    4eea:	6f 92       	push	r6
    4eec:	7f 92       	push	r7
    4eee:	8f 92       	push	r8
    4ef0:	9f 92       	push	r9
    4ef2:	af 92       	push	r10
    4ef4:	bf 92       	push	r11
    4ef6:	cf 92       	push	r12
    4ef8:	df 92       	push	r13
    4efa:	ef 92       	push	r14
    4efc:	ff 92       	push	r15
    4efe:	0f 93       	push	r16
    4f00:	1f 93       	push	r17
    4f02:	df 93       	push	r29
    4f04:	cf 93       	push	r28
    4f06:	cd b7       	in	r28, 0x3d	; 61
    4f08:	de b7       	in	r29, 0x3e	; 62
    4f0a:	2a 97       	sbiw	r28, 0x0a	; 10
    4f0c:	0f b6       	in	r0, 0x3f	; 63
    4f0e:	f8 94       	cli
    4f10:	de bf       	out	0x3e, r29	; 62
    4f12:	0f be       	out	0x3f, r0	; 63
    4f14:	cd bf       	out	0x3d, r28	; 61
    4f16:	b8 2e       	mov	r11, r24
  MENU("TELEMETRY", menuTabModel, e_Telemetry, 13, {0, -1, 0, 0, 1, 2, 2, -1, 1, 0, 1, 2/*, 2*/});
    4f18:	80 e0       	ldi	r24, 0x00	; 0
    4f1a:	60 e0       	ldi	r22, 0x00	; 0
    4f1c:	4a e0       	ldi	r20, 0x0A	; 10
    4f1e:	53 e0       	ldi	r21, 0x03	; 3
    4f20:	22 e0       	ldi	r18, 0x02	; 2
    4f22:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    4f26:	8b 2d       	mov	r24, r11
    4f28:	6a e0       	ldi	r22, 0x0A	; 10
    4f2a:	47 ea       	ldi	r20, 0xA7	; 167
    4f2c:	56 e0       	ldi	r21, 0x06	; 6
    4f2e:	2c e0       	ldi	r18, 0x0C	; 12
    4f30:	0f eb       	ldi	r16, 0xBF	; 191
    4f32:	16 e0       	ldi	r17, 0x06	; 6
    4f34:	9b e0       	ldi	r25, 0x0B	; 11
    4f36:	e9 2e       	mov	r14, r25
    4f38:	bc e0       	ldi	r27, 0x0C	; 12
    4f3a:	cb 2e       	mov	r12, r27
    4f3c:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    4f40:	88 23       	and	r24, r24
    4f42:	09 f4       	brne	.+2      	; 0x4f46 <_Z17menuProcTelemetryh+0x64>
    4f44:	a8 c3       	rjmp	.+1872   	; 0x5696 <_Z17menuProcTelemetryh+0x7b4>

  int8_t  sub    = m_posVert;
    4f46:	10 91 4b 19 	lds	r17, 0x194B
  uint8_t blink;
  uint8_t y;
  uint8_t ch = 0;
  uint16_t ratio;

  switch(event) {
    4f4a:	2b 2d       	mov	r18, r11
    4f4c:	20 36       	cpi	r18, 0x60	; 96
    4f4e:	69 f0       	breq	.+26     	; 0x4f6a <_Z17menuProcTelemetryh+0x88>
    4f50:	21 36       	cpi	r18, 0x61	; 97
    4f52:	30 f4       	brcc	.+12     	; 0x4f60 <_Z17menuProcTelemetryh+0x7e>
    4f54:	8b 2d       	mov	r24, r11
    4f56:	82 52       	subi	r24, 0x22	; 34
    4f58:	84 30       	cpi	r24, 0x04	; 4
    4f5a:	08 f0       	brcs	.+2      	; 0x4f5e <_Z17menuProcTelemetryh+0x7c>
    4f5c:	8d c0       	rjmp	.+282    	; 0x5078 <_Z17menuProcTelemetryh+0x196>
    4f5e:	81 c0       	rjmp	.+258    	; 0x5062 <_Z17menuProcTelemetryh+0x180>
    4f60:	3b 2d       	mov	r19, r11
    4f62:	30 38       	cpi	r19, 0x80	; 128
    4f64:	09 f0       	breq	.+2      	; 0x4f68 <_Z17menuProcTelemetryh+0x86>
    4f66:	88 c0       	rjmp	.+272    	; 0x5078 <_Z17menuProcTelemetryh+0x196>
    4f68:	41 c0       	rjmp	.+130    	; 0x4fec <_Z17menuProcTelemetryh+0x10a>

    case EVT_KEY_FIRST(KEY_MENU): // press [MENU] to advance to next whole volt
      if (sub == 3)
    4f6a:	13 30       	cpi	r17, 0x03	; 3
    4f6c:	f1 f4       	brne	.+60     	; 0x4faa <_Z17menuProcTelemetryh+0xc8>
        g_model.frsky.channels[0].ratio = ((g_model.frsky.channels[0].ratio + 100) % 4096)/100*100;
    4f6e:	80 91 57 15 	lds	r24, 0x1557
    4f72:	40 91 58 15 	lds	r20, 0x1558
    4f76:	94 2f       	mov	r25, r20
    4f78:	9f 70       	andi	r25, 0x0F	; 15
    4f7a:	8c 59       	subi	r24, 0x9C	; 156
    4f7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f7e:	9f 70       	andi	r25, 0x0F	; 15
    4f80:	24 e6       	ldi	r18, 0x64	; 100
    4f82:	30 e0       	ldi	r19, 0x00	; 0
    4f84:	b9 01       	movw	r22, r18
    4f86:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    4f8a:	62 9f       	mul	r22, r18
    4f8c:	c0 01       	movw	r24, r0
    4f8e:	63 9f       	mul	r22, r19
    4f90:	90 0d       	add	r25, r0
    4f92:	72 9f       	mul	r23, r18
    4f94:	90 0d       	add	r25, r0
    4f96:	11 24       	eor	r1, r1
    4f98:	80 93 57 15 	sts	0x1557, r24
    4f9c:	89 2f       	mov	r24, r25
    4f9e:	8f 70       	andi	r24, 0x0F	; 15
    4fa0:	40 7f       	andi	r20, 0xF0	; 240
    4fa2:	48 2b       	or	r20, r24
    4fa4:	40 93 58 15 	sts	0x1558, r20
    4fa8:	58 c0       	rjmp	.+176    	; 0x505a <_Z17menuProcTelemetryh+0x178>
      else if (sub == 9)
    4faa:	19 30       	cpi	r17, 0x09	; 9
    4fac:	09 f0       	breq	.+2      	; 0x4fb0 <_Z17menuProcTelemetryh+0xce>
    4fae:	64 c0       	rjmp	.+200    	; 0x5078 <_Z17menuProcTelemetryh+0x196>
        g_model.frsky.channels[1].ratio = ((g_model.frsky.channels[1].ratio + 100) % 4096)/100*100;
    4fb0:	80 91 5e 15 	lds	r24, 0x155E
    4fb4:	40 91 5f 15 	lds	r20, 0x155F
    4fb8:	94 2f       	mov	r25, r20
    4fba:	9f 70       	andi	r25, 0x0F	; 15
    4fbc:	8c 59       	subi	r24, 0x9C	; 156
    4fbe:	9f 4f       	sbci	r25, 0xFF	; 255
    4fc0:	9f 70       	andi	r25, 0x0F	; 15
    4fc2:	24 e6       	ldi	r18, 0x64	; 100
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	b9 01       	movw	r22, r18
    4fc8:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    4fcc:	62 9f       	mul	r22, r18
    4fce:	c0 01       	movw	r24, r0
    4fd0:	63 9f       	mul	r22, r19
    4fd2:	90 0d       	add	r25, r0
    4fd4:	72 9f       	mul	r23, r18
    4fd6:	90 0d       	add	r25, r0
    4fd8:	11 24       	eor	r1, r1
    4fda:	80 93 5e 15 	sts	0x155E, r24
    4fde:	89 2f       	mov	r24, r25
    4fe0:	8f 70       	andi	r24, 0x0F	; 15
    4fe2:	40 7f       	andi	r20, 0xF0	; 240
    4fe4:	48 2b       	or	r20, r24
    4fe6:	40 93 5f 15 	sts	0x155F, r20
    4fea:	37 c0       	rjmp	.+110    	; 0x505a <_Z17menuProcTelemetryh+0x178>
      if (sub == 3 || sub == 9) eeDirty(EE_MODEL);
      break;

    case EVT_KEY_LONG(KEY_MENU): // press [MENU_LONG] to select standard 2:1 or 4:1 resistor divder (max volts)

      if (sub == 3) ch = 0;
    4fec:	13 30       	cpi	r17, 0x03	; 3
    4fee:	29 f0       	breq	.+10     	; 0x4ffa <_Z17menuProcTelemetryh+0x118>
      else if (sub == 9) ch = 1;
    4ff0:	19 30       	cpi	r17, 0x09	; 9
    4ff2:	09 f0       	breq	.+2      	; 0x4ff6 <_Z17menuProcTelemetryh+0x114>
    4ff4:	41 c0       	rjmp	.+130    	; 0x5078 <_Z17menuProcTelemetryh+0x196>
    4ff6:	21 e0       	ldi	r18, 0x01	; 1
    4ff8:	01 c0       	rjmp	.+2      	; 0x4ffc <_Z17menuProcTelemetryh+0x11a>
      if (sub == 3 || sub == 9) eeDirty(EE_MODEL);
      break;

    case EVT_KEY_LONG(KEY_MENU): // press [MENU_LONG] to select standard 2:1 or 4:1 resistor divder (max volts)

      if (sub == 3) ch = 0;
    4ffa:	20 e0       	ldi	r18, 0x00	; 0
      else if (sub == 9) ch = 1;
      else break;

      ratio = g_model.frsky.channels[ch].ratio;  
    4ffc:	30 e0       	ldi	r19, 0x00	; 0
    4ffe:	f9 01       	movw	r30, r18
    5000:	a3 e0       	ldi	r26, 0x03	; 3
    5002:	ee 0f       	add	r30, r30
    5004:	ff 1f       	adc	r31, r31
    5006:	aa 95       	dec	r26
    5008:	e1 f7       	brne	.-8      	; 0x5002 <_Z17menuProcTelemetryh+0x120>
    500a:	e2 1b       	sub	r30, r18
    500c:	f3 0b       	sbc	r31, r19
    500e:	e9 5a       	subi	r30, 0xA9	; 169
    5010:	fa 4e       	sbci	r31, 0xEA	; 234
    5012:	80 81       	ld	r24, Z
    5014:	41 81       	ldd	r20, Z+1	; 0x01
    5016:	94 2f       	mov	r25, r20
    5018:	9f 70       	andi	r25, 0x0F	; 15
      if (ratio < 660) ratio = 660;
    501a:	42 e0       	ldi	r20, 0x02	; 2
    501c:	84 39       	cpi	r24, 0x94	; 148
    501e:	94 07       	cpc	r25, r20
    5020:	38 f0       	brcs	.+14     	; 0x5030 <_Z17menuProcTelemetryh+0x14e>
      else if (ratio < 1320) ratio = 1320;
    5022:	a5 e0       	ldi	r26, 0x05	; 5
    5024:	88 32       	cpi	r24, 0x28	; 40
    5026:	9a 07       	cpc	r25, r26
    5028:	30 f4       	brcc	.+12     	; 0x5036 <_Z17menuProcTelemetryh+0x154>
    502a:	88 e2       	ldi	r24, 0x28	; 40
    502c:	95 e0       	ldi	r25, 0x05	; 5
    502e:	05 c0       	rjmp	.+10     	; 0x503a <_Z17menuProcTelemetryh+0x158>
      if (sub == 3) ch = 0;
      else if (sub == 9) ch = 1;
      else break;

      ratio = g_model.frsky.channels[ch].ratio;  
      if (ratio < 660) ratio = 660;
    5030:	84 e9       	ldi	r24, 0x94	; 148
    5032:	92 e0       	ldi	r25, 0x02	; 2
    5034:	02 c0       	rjmp	.+4      	; 0x503a <_Z17menuProcTelemetryh+0x158>
      else if (ratio < 1320) ratio = 1320;
      else ratio = 0;
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	90 e0       	ldi	r25, 0x00	; 0
      g_model.frsky.channels[ch].ratio = ratio;
    503a:	f9 01       	movw	r30, r18
    503c:	73 e0       	ldi	r23, 0x03	; 3
    503e:	ee 0f       	add	r30, r30
    5040:	ff 1f       	adc	r31, r31
    5042:	7a 95       	dec	r23
    5044:	e1 f7       	brne	.-8      	; 0x503e <_Z17menuProcTelemetryh+0x15c>
    5046:	e2 1b       	sub	r30, r18
    5048:	f3 0b       	sbc	r31, r19
    504a:	e9 5a       	subi	r30, 0xA9	; 169
    504c:	fa 4e       	sbci	r31, 0xEA	; 234
    504e:	80 83       	st	Z, r24
    5050:	9f 70       	andi	r25, 0x0F	; 15
    5052:	81 81       	ldd	r24, Z+1	; 0x01
    5054:	80 7f       	andi	r24, 0xF0	; 240
    5056:	89 2b       	or	r24, r25
    5058:	81 83       	std	Z+1, r24	; 0x01
      eeDirty(EE_MODEL);
    505a:	82 e0       	ldi	r24, 0x02	; 2
    505c:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
      
      break;
    5060:	0b c0       	rjmp	.+22     	; 0x5078 <_Z17menuProcTelemetryh+0x196>

    case EVT_KEY_BREAK(KEY_DOWN):
    case EVT_KEY_BREAK(KEY_UP):
    case EVT_KEY_BREAK(KEY_LEFT):
    case EVT_KEY_BREAK(KEY_RIGHT):
      if(s_editMode && (sub != 4 && sub != 10)) // gbar lines are only other edit mode fields
    5062:	80 91 16 19 	lds	r24, 0x1916
    5066:	88 23       	and	r24, r24
    5068:	39 f0       	breq	.+14     	; 0x5078 <_Z17menuProcTelemetryh+0x196>
    506a:	14 30       	cpi	r17, 0x04	; 4
    506c:	29 f0       	breq	.+10     	; 0x5078 <_Z17menuProcTelemetryh+0x196>
    506e:	1a 30       	cpi	r17, 0x0A	; 10
    5070:	19 f0       	breq	.+6      	; 0x5078 <_Z17menuProcTelemetryh+0x196>
void FRSKY_Init(void);
void FRSKY10mspoll(void);

inline void FRSKY_setModelAlarms(void)
{
  FrskyAlarmSendState = SEND_MODEL_ALARMS;
    5072:	84 e0       	ldi	r24, 0x04	; 4
    5074:	80 93 af 1f 	sts	0x1FAF, r24
        FRSKY_setModelAlarms(); // update Fr-Sky module when edit mode exited
  }

  blink = s_editMode ? BLINK : INVERS ;
    5078:	80 91 16 19 	lds	r24, 0x1916
    507c:	88 23       	and	r24, r24
    507e:	19 f0       	breq	.+6      	; 0x5086 <_Z17menuProcTelemetryh+0x1a4>
    5080:	b1 e0       	ldi	r27, 0x01	; 1
    5082:	bd 83       	std	Y+5, r27	; 0x05
    5084:	02 c0       	rjmp	.+4      	; 0x508a <_Z17menuProcTelemetryh+0x1a8>
    5086:	e2 e0       	ldi	r30, 0x02	; 2
    5088:	ed 83       	std	Y+5, r30	; 0x05
    508a:	6c e5       	ldi	r22, 0x5C	; 92
    508c:	66 2e       	mov	r6, r22
    508e:	65 e1       	ldi	r22, 0x15	; 21
    5090:	76 2e       	mov	r7, r22
    5092:	1a 82       	std	Y+2, r1	; 0x02
    5094:	19 82       	std	Y+1, r1	; 0x01
  uint8_t subN = 1;
  uint8_t t;

  for (int i=0; i<2; i++) {
    5096:	20 e0       	ldi	r18, 0x00	; 0
    5098:	30 e0       	ldi	r19, 0x00	; 0
      if(s_editMode && (sub != 4 && sub != 10)) // gbar lines are only other edit mode fields
        FRSKY_setModelAlarms(); // update Fr-Sky module when edit mode exited
  }

  blink = s_editMode ? BLINK : INVERS ;
  uint8_t subN = 1;
    509a:	aa 24       	eor	r10, r10
    509c:	a3 94       	inc	r10
    subN++;

    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
      lcd_putsAtt(4, y, PSTR("Type"), 0); // TODO puts_P
      lcd_putsnAtt(7*FW, y, PSTR("Volts""raw  ")+5*g_model.frsky.channels[i].type, 5, (sub==subN ? INVERS:0));
    509e:	e1 2e       	mov	r14, r17
    50a0:	ff 24       	eor	r15, r15
    50a2:	e7 fc       	sbrc	r14, 7
    50a4:	f0 94       	com	r15
      // These voltages need to extend all the way out a possbile maxVolts 40.95 (4096)
      frskyPutAValue(7*FW+1, y, i, g_model.frsky.channels[i].barMin, (sub==subN && m_posHorz==0 ? blink:0)|LEFT|PREC2);

      lcd_puts_P(lcd_lastPos+FW, y, PSTR("to"));
      
      frskyPutAValue(lcd_lastPos+FW, y, i, g_model.frsky.channels[i].barMax, (sub==subN && m_posHorz==1 ? blink:0)|LEFT|PREC2);
    50a6:	fd 81       	ldd	r31, Y+5	; 0x05
    50a8:	f0 6e       	ori	r31, 0xE0	; 224
    50aa:	f8 87       	std	Y+8, r31	; 0x08
    50ac:	3f 83       	std	Y+7, r19	; 0x07
    50ae:	2e 83       	std	Y+6, r18	; 0x06
    50b0:	2a 2c       	mov	r2, r10
    50b2:	8b 2c       	mov	r8, r11
  blink = s_editMode ? BLINK : INVERS ;
  uint8_t subN = 1;
  uint8_t t;

  for (int i=0; i<2; i++) {
    if(s_pgOfs<subN) {
    50b4:	20 91 15 19 	lds	r18, 0x1915
    50b8:	22 15       	cp	r18, r2
    50ba:	d8 f4       	brcc	.+54     	; 0x50f2 <_Z17menuProcTelemetryh+0x210>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    50bc:	89 81       	ldd	r24, Y+1	; 0x01
    50be:	9a 81       	ldd	r25, Y+2	; 0x02
    50c0:	88 0f       	add	r24, r24
    50c2:	99 1f       	adc	r25, r25
    50c4:	01 96       	adiw	r24, 0x01	; 1
  uint8_t subN = 1;
  uint8_t t;

  for (int i=0; i<2; i++) {
    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
    50c6:	82 1b       	sub	r24, r18
    50c8:	91 09       	sbc	r25, r1
    50ca:	18 2f       	mov	r17, r24
    50cc:	11 0f       	add	r17, r17
    50ce:	11 0f       	add	r17, r17
    50d0:	11 0f       	add	r17, r17
      lcd_putsAtt(0, y, PSTR("A  channel"), 0);
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	61 2f       	mov	r22, r17
    50d6:	4f ef       	ldi	r20, 0xFF	; 255
    50d8:	52 e0       	ldi	r21, 0x02	; 2
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    50e0:	4e 81       	ldd	r20, Y+6	; 0x06
    50e2:	5f 81       	ldd	r21, Y+7	; 0x07
    50e4:	4f 5f       	subi	r20, 0xFF	; 255
    50e6:	5f 4f       	sbci	r21, 0xFF	; 255

  for (int i=0; i<2; i++) {
    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
      lcd_putsAtt(0, y, PSTR("A  channel"), 0);
      lcd_outdezAtt(2*FW, y, 1+i, 0);
    50e8:	8c e0       	ldi	r24, 0x0C	; 12
    50ea:	61 2f       	mov	r22, r17
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    }
    subN++;

    if(s_pgOfs<subN) {
    50f2:	80 91 15 19 	lds	r24, 0x1915
    50f6:	92 2d       	mov	r25, r2
    50f8:	9f 5f       	subi	r25, 0xFF	; 255
    50fa:	89 17       	cp	r24, r25
    50fc:	08 f0       	brcs	.+2      	; 0x5100 <_Z17menuProcTelemetryh+0x21e>
    50fe:	5a c0       	rjmp	.+180    	; 0x51b4 <_Z17menuProcTelemetryh+0x2d2>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    5100:	c9 80       	ldd	r12, Y+1	; 0x01
    5102:	da 80       	ldd	r13, Y+2	; 0x02
    5104:	08 94       	sec
    5106:	c1 1c       	adc	r12, r1
    5108:	d1 1c       	adc	r13, r1
    510a:	cc 0c       	add	r12, r12
    510c:	dd 1c       	adc	r13, r13
      lcd_outdezAtt(2*FW, y, 1+i, 0);
    }
    subN++;

    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
    510e:	96 01       	movw	r18, r12
    5110:	28 1b       	sub	r18, r24
    5112:	31 09       	sbc	r19, r1
    5114:	12 2f       	mov	r17, r18
    5116:	11 0f       	add	r17, r17
    5118:	11 0f       	add	r17, r17
    511a:	11 0f       	add	r17, r17
      lcd_putsAtt(4, y, PSTR("Type"), 0); // TODO puts_P
    511c:	84 e0       	ldi	r24, 0x04	; 4
    511e:	61 2f       	mov	r22, r17
    5120:	4a ef       	ldi	r20, 0xFA	; 250
    5122:	52 e0       	ldi	r21, 0x02	; 2
    5124:	20 e0       	ldi	r18, 0x00	; 0
    5126:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
      lcd_putsnAtt(7*FW, y, PSTR("Volts""raw  ")+5*g_model.frsky.channels[i].type, 5, (sub==subN ? INVERS:0));
    512a:	ee 81       	ldd	r30, Y+6	; 0x06
    512c:	ff 81       	ldd	r31, Y+7	; 0x07
    512e:	33 e0       	ldi	r19, 0x03	; 3
    5130:	ee 0f       	add	r30, r30
    5132:	ff 1f       	adc	r31, r31
    5134:	3a 95       	dec	r19
    5136:	e1 f7       	brne	.-8      	; 0x5130 <_Z17menuProcTelemetryh+0x24e>
    5138:	8e 81       	ldd	r24, Y+6	; 0x06
    513a:	9f 81       	ldd	r25, Y+7	; 0x07
    513c:	e8 1b       	sub	r30, r24
    513e:	f9 0b       	sbc	r31, r25
    5140:	e8 5a       	subi	r30, 0xA8	; 168
    5142:	fa 4e       	sbci	r31, 0xEA	; 234
    5144:	80 81       	ld	r24, Z
    5146:	82 95       	swap	r24
    5148:	8f 70       	andi	r24, 0x0F	; 15
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	ac 01       	movw	r20, r24
    514e:	44 0f       	add	r20, r20
    5150:	55 1f       	adc	r21, r21
    5152:	44 0f       	add	r20, r20
    5154:	55 1f       	adc	r21, r21
    5156:	48 0f       	add	r20, r24
    5158:	59 1f       	adc	r21, r25
    515a:	41 51       	subi	r20, 0x11	; 17
    515c:	5d 4f       	sbci	r21, 0xFD	; 253
    515e:	ec 14       	cp	r14, r12
    5160:	fd 04       	cpc	r15, r13
    5162:	11 f4       	brne	.+4      	; 0x5168 <_Z17menuProcTelemetryh+0x286>
    5164:	02 e0       	ldi	r16, 0x02	; 2
    5166:	01 c0       	rjmp	.+2      	; 0x516a <_Z17menuProcTelemetryh+0x288>
    5168:	00 e0       	ldi	r16, 0x00	; 0
    516a:	8a e2       	ldi	r24, 0x2A	; 42
    516c:	61 2f       	mov	r22, r17
    516e:	25 e0       	ldi	r18, 0x05	; 5
    5170:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      if (sub==subN)  CHECK_INCDEC_MODELVAR(event, g_model.frsky.channels[i].type, 0, 1);
    5174:	ec 14       	cp	r14, r12
    5176:	fd 04       	cpc	r15, r13
    5178:	e9 f4       	brne	.+58     	; 0x51b4 <_Z17menuProcTelemetryh+0x2d2>
    517a:	0e 81       	ldd	r16, Y+6	; 0x06
    517c:	1f 81       	ldd	r17, Y+7	; 0x07
    517e:	83 e0       	ldi	r24, 0x03	; 3
    5180:	00 0f       	add	r16, r16
    5182:	11 1f       	adc	r17, r17
    5184:	8a 95       	dec	r24
    5186:	e1 f7       	brne	.-8      	; 0x5180 <_Z17menuProcTelemetryh+0x29e>
    5188:	ae 81       	ldd	r26, Y+6	; 0x06
    518a:	bf 81       	ldd	r27, Y+7	; 0x07
    518c:	0a 1b       	sub	r16, r26
    518e:	1b 0b       	sbc	r17, r27
    5190:	08 5a       	subi	r16, 0xA8	; 168
    5192:	1a 4e       	sbci	r17, 0xEA	; 234
    5194:	f8 01       	movw	r30, r16
    5196:	60 81       	ld	r22, Z
    5198:	62 95       	swap	r22
    519a:	6f 70       	andi	r22, 0x0F	; 15
    519c:	88 2d       	mov	r24, r8
    519e:	40 e0       	ldi	r20, 0x00	; 0
    51a0:	21 e0       	ldi	r18, 0x01	; 1
    51a2:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    51a6:	82 95       	swap	r24
    51a8:	80 7f       	andi	r24, 0xF0	; 240
    51aa:	d8 01       	movw	r26, r16
    51ac:	9c 91       	ld	r25, X
    51ae:	9f 70       	andi	r25, 0x0F	; 15
    51b0:	98 2b       	or	r25, r24
    51b2:	9c 93       	st	X, r25
    }
    subN++;

    // subN == 3
    if(s_pgOfs<subN) {
    51b4:	80 91 15 19 	lds	r24, 0x1915
    51b8:	92 2d       	mov	r25, r2
    51ba:	9e 5f       	subi	r25, 0xFE	; 254
    51bc:	89 17       	cp	r24, r25
    51be:	08 f0       	brcs	.+2      	; 0x51c2 <_Z17menuProcTelemetryh+0x2e0>
    51c0:	92 c0       	rjmp	.+292    	; 0x52e6 <_Z17menuProcTelemetryh+0x404>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    51c2:	c9 80       	ldd	r12, Y+1	; 0x01
    51c4:	da 80       	ldd	r13, Y+2	; 0x02
    51c6:	cc 0c       	add	r12, r12
    51c8:	dd 1c       	adc	r13, r13
    51ca:	e3 e0       	ldi	r30, 0x03	; 3
    51cc:	f0 e0       	ldi	r31, 0x00	; 0
    51ce:	ce 0e       	add	r12, r30
    51d0:	df 1e       	adc	r13, r31
    }
    subN++;

    // subN == 3
    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
    51d2:	96 01       	movw	r18, r12
    51d4:	28 1b       	sub	r18, r24
    51d6:	31 09       	sbc	r19, r1
    51d8:	12 2f       	mov	r17, r18
    51da:	11 0f       	add	r17, r17
    51dc:	11 0f       	add	r17, r17
    51de:	11 0f       	add	r17, r17
      lcd_putsAtt(4, y, PSTR("MaxV"), 0);
    51e0:	84 e0       	ldi	r24, 0x04	; 4
    51e2:	61 2f       	mov	r22, r17
    51e4:	4a ee       	ldi	r20, 0xEA	; 234
    51e6:	52 e0       	ldi	r21, 0x02	; 2
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
      lcd_outdezNAtt(7*FW+1, y, g_model.frsky.channels[i].ratio, (sub==subN ? INVERS:0)|PREC2|LEFT);
    51ee:	ee 81       	ldd	r30, Y+6	; 0x06
    51f0:	ff 81       	ldd	r31, Y+7	; 0x07
    51f2:	b3 e0       	ldi	r27, 0x03	; 3
    51f4:	ee 0f       	add	r30, r30
    51f6:	ff 1f       	adc	r31, r31
    51f8:	ba 95       	dec	r27
    51fa:	e1 f7       	brne	.-8      	; 0x51f4 <_Z17menuProcTelemetryh+0x312>
    51fc:	8e 81       	ldd	r24, Y+6	; 0x06
    51fe:	9f 81       	ldd	r25, Y+7	; 0x07
    5200:	e8 1b       	sub	r30, r24
    5202:	f9 0b       	sbc	r31, r25
    5204:	e9 5a       	subi	r30, 0xA9	; 169
    5206:	fa 4e       	sbci	r31, 0xEA	; 234
    5208:	40 81       	ld	r20, Z
    520a:	51 81       	ldd	r21, Z+1	; 0x01
    520c:	5f 70       	andi	r21, 0x0F	; 15
    520e:	ec 14       	cp	r14, r12
    5210:	fd 04       	cpc	r15, r13
    5212:	11 f4       	brne	.+4      	; 0x5218 <_Z17menuProcTelemetryh+0x336>
    5214:	22 ee       	ldi	r18, 0xE2	; 226
    5216:	01 c0       	rjmp	.+2      	; 0x521a <_Z17menuProcTelemetryh+0x338>
    5218:	20 ee       	ldi	r18, 0xE0	; 224
    521a:	8b e2       	ldi	r24, 0x2B	; 43
    521c:	61 2f       	mov	r22, r17
    521e:	00 e0       	ldi	r16, 0x00	; 0
    5220:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
      lcd_putc(lcd_lastPos, y, 'v');
    5224:	80 91 02 1f 	lds	r24, 0x1F02
    5228:	61 2f       	mov	r22, r17
    522a:	46 e7       	ldi	r20, 0x76	; 118
    522c:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

      if (g_model.frsky.channels[i].type == 0) // display 'cal(ibrate) and arrow only if type == volts
    5230:	ee 81       	ldd	r30, Y+6	; 0x06
    5232:	ff 81       	ldd	r31, Y+7	; 0x07
    5234:	a3 e0       	ldi	r26, 0x03	; 3
    5236:	ee 0f       	add	r30, r30
    5238:	ff 1f       	adc	r31, r31
    523a:	aa 95       	dec	r26
    523c:	e1 f7       	brne	.-8      	; 0x5236 <_Z17menuProcTelemetryh+0x354>
    523e:	ae 81       	ldd	r26, Y+6	; 0x06
    5240:	bf 81       	ldd	r27, Y+7	; 0x07
    5242:	ea 1b       	sub	r30, r26
    5244:	fb 0b       	sbc	r31, r27
    5246:	e8 5a       	subi	r30, 0xA8	; 168
    5248:	fa 4e       	sbci	r31, 0xEA	; 234
    524a:	80 81       	ld	r24, Z
    524c:	82 95       	swap	r24
    524e:	8f 70       	andi	r24, 0x0F	; 15
    5250:	21 f5       	brne	.+72     	; 0x529a <_Z17menuProcTelemetryh+0x3b8>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    5252:	e9 81       	ldd	r30, Y+1	; 0x01
    5254:	fa 81       	ldd	r31, Y+2	; 0x02
    5256:	eb 59       	subi	r30, 0x9B	; 155
    5258:	f0 4e       	sbci	r31, 0xE0	; 224
      lcd_outdezNAtt(7*FW+1, y, g_model.frsky.channels[i].ratio, (sub==subN ? INVERS:0)|PREC2|LEFT);
      lcd_putc(lcd_lastPos, y, 'v');

      if (g_model.frsky.channels[i].type == 0) // display 'cal(ibrate) and arrow only if type == volts
      {
        frskyPutAValue(16*FW, y, i, frskyTelemetry[i].value, LEFT|PREC2);
    525a:	80 e6       	ldi	r24, 0x60	; 96
    525c:	61 2f       	mov	r22, r17
    525e:	4e 81       	ldd	r20, Y+6	; 0x06
    5260:	20 81       	ld	r18, Z
    5262:	00 ee       	ldi	r16, 0xE0	; 224
    5264:	0e 94 86 a2 	call	0x1450c	; 0x1450c <_Z14frskyPutAValuehhhhh>
        lcd_puts_P(12*FW-3, y, PSTR("cal"));
    5268:	85 e4       	ldi	r24, 0x45	; 69
    526a:	61 2f       	mov	r22, r17
    526c:	46 ee       	ldi	r20, 0xE6	; 230
    526e:	52 e0       	ldi	r21, 0x02	; 2
    5270:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_hline(14*FW+3, y+3, 7);
    5274:	61 2f       	mov	r22, r17
    5276:	6d 5f       	subi	r22, 0xFD	; 253
    5278:	87 e5       	ldi	r24, 0x57	; 87
    527a:	47 e0       	ldi	r20, 0x07	; 7
    527c:	20 e0       	ldi	r18, 0x00	; 0
    527e:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
        lcd_plot(14*FW+8, y+2);
    5282:	61 2f       	mov	r22, r17
    5284:	6e 5f       	subi	r22, 0xFE	; 254
    5286:	8c e5       	ldi	r24, 0x5C	; 92
    5288:	40 e0       	ldi	r20, 0x00	; 0
    528a:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_plot(14*FW+8, y+4);
    528e:	61 2f       	mov	r22, r17
    5290:	6c 5f       	subi	r22, 0xFC	; 252
    5292:	8c e5       	ldi	r24, 0x5C	; 92
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
      }

      if (sub==subN)
    529a:	ec 14       	cp	r14, r12
    529c:	fd 04       	cpc	r15, r13
    529e:	19 f5       	brne	.+70     	; 0x52e6 <_Z17menuProcTelemetryh+0x404>
          g_model.frsky.channels[i].ratio = checkIncDec(event, g_model.frsky.channels[i].ratio, 0, 4095/* 40.95V */, EE_MODEL);
    52a0:	ce 80       	ldd	r12, Y+6	; 0x06
    52a2:	df 80       	ldd	r13, Y+7	; 0x07
    52a4:	e3 e0       	ldi	r30, 0x03	; 3
    52a6:	cc 0c       	add	r12, r12
    52a8:	dd 1c       	adc	r13, r13
    52aa:	ea 95       	dec	r30
    52ac:	e1 f7       	brne	.-8      	; 0x52a6 <_Z17menuProcTelemetryh+0x3c4>
    52ae:	ee 81       	ldd	r30, Y+6	; 0x06
    52b0:	ff 81       	ldd	r31, Y+7	; 0x07
    52b2:	ce 1a       	sub	r12, r30
    52b4:	df 0a       	sbc	r13, r31
    52b6:	27 e5       	ldi	r18, 0x57	; 87
    52b8:	35 e1       	ldi	r19, 0x15	; 21
    52ba:	c2 0e       	add	r12, r18
    52bc:	d3 1e       	adc	r13, r19
    52be:	d6 01       	movw	r26, r12
    52c0:	6c 91       	ld	r22, X
    52c2:	11 96       	adiw	r26, 0x01	; 1
    52c4:	7c 91       	ld	r23, X
    52c6:	7f 70       	andi	r23, 0x0F	; 15
    52c8:	88 2d       	mov	r24, r8
    52ca:	40 e0       	ldi	r20, 0x00	; 0
    52cc:	50 e0       	ldi	r21, 0x00	; 0
    52ce:	2f ef       	ldi	r18, 0xFF	; 255
    52d0:	3f e0       	ldi	r19, 0x0F	; 15
    52d2:	02 e0       	ldi	r16, 0x02	; 2
    52d4:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    52d8:	f6 01       	movw	r30, r12
    52da:	80 83       	st	Z, r24
    52dc:	9f 70       	andi	r25, 0x0F	; 15
    52de:	81 81       	ldd	r24, Z+1	; 0x01
    52e0:	80 7f       	andi	r24, 0xF0	; 240
    52e2:	89 2b       	or	r24, r25
    52e4:	81 83       	std	Z+1, r24	; 0x01
    }
    subN++;

    // subN == 4
    if(s_pgOfs<subN) {
    52e6:	80 91 15 19 	lds	r24, 0x1915
    52ea:	92 2d       	mov	r25, r2
    52ec:	9d 5f       	subi	r25, 0xFD	; 253
    52ee:	89 17       	cp	r24, r25
    52f0:	08 f0       	brcs	.+2      	; 0x52f4 <_Z17menuProcTelemetryh+0x412>
    52f2:	7e c0       	rjmp	.+252    	; 0x53f0 <_Z17menuProcTelemetryh+0x50e>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    52f4:	c9 80       	ldd	r12, Y+1	; 0x01
    52f6:	da 80       	ldd	r13, Y+2	; 0x02
    52f8:	22 e0       	ldi	r18, 0x02	; 2
    52fa:	30 e0       	ldi	r19, 0x00	; 0
    52fc:	c2 0e       	add	r12, r18
    52fe:	d3 1e       	adc	r13, r19
    5300:	cc 0c       	add	r12, r12
    5302:	dd 1c       	adc	r13, r13
    }
    subN++;

    // subN == 4
    if(s_pgOfs<subN) {
      y=(subN-s_pgOfs)*FH;
    5304:	d6 01       	movw	r26, r12
    5306:	a8 1b       	sub	r26, r24
    5308:	b1 09       	sbc	r27, r1
    530a:	1a 2f       	mov	r17, r26
    530c:	11 0f       	add	r17, r17
    530e:	11 0f       	add	r17, r17
    5310:	11 0f       	add	r17, r17
      lcd_puts_P(4, y, PSTR("G.Bar"));
    5312:	84 e0       	ldi	r24, 0x04	; 4
    5314:	61 2f       	mov	r22, r17
    5316:	40 ee       	ldi	r20, 0xE0	; 224
    5318:	52 e0       	ldi	r21, 0x02	; 2
    531a:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    531e:	be 80       	ldd	r11, Y+6	; 0x06

      // These voltages need to extend all the way out a possbile maxVolts 40.95 (4096)
      frskyPutAValue(7*FW+1, y, i, g_model.frsky.channels[i].barMin, (sub==subN && m_posHorz==0 ? blink:0)|LEFT|PREC2);
    5320:	f3 01       	movw	r30, r6
    5322:	20 81       	ld	r18, Z
    5324:	ec 14       	cp	r14, r12
    5326:	fd 04       	cpc	r15, r13
    5328:	31 f4       	brne	.+12     	; 0x5336 <_Z17menuProcTelemetryh+0x454>
    532a:	80 91 4c 19 	lds	r24, 0x194C
    532e:	88 23       	and	r24, r24
    5330:	11 f4       	brne	.+4      	; 0x5336 <_Z17menuProcTelemetryh+0x454>
    5332:	08 85       	ldd	r16, Y+8	; 0x08
    5334:	01 c0       	rjmp	.+2      	; 0x5338 <_Z17menuProcTelemetryh+0x456>
    5336:	00 ee       	ldi	r16, 0xE0	; 224
    5338:	8b e2       	ldi	r24, 0x2B	; 43
    533a:	61 2f       	mov	r22, r17
    533c:	4b 2d       	mov	r20, r11
    533e:	0e 94 86 a2 	call	0x1450c	; 0x1450c <_Z14frskyPutAValuehhhhh>

      lcd_puts_P(lcd_lastPos+FW, y, PSTR("to"));
    5342:	80 91 02 1f 	lds	r24, 0x1F02
    5346:	8a 5f       	subi	r24, 0xFA	; 250
    5348:	61 2f       	mov	r22, r17
    534a:	4d ed       	ldi	r20, 0xDD	; 221
    534c:	52 e0       	ldi	r21, 0x02	; 2
    534e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      
      frskyPutAValue(lcd_lastPos+FW, y, i, g_model.frsky.channels[i].barMax, (sub==subN && m_posHorz==1 ? blink:0)|LEFT|PREC2);
    5352:	80 91 02 1f 	lds	r24, 0x1F02
    5356:	8a 5f       	subi	r24, 0xFA	; 250
    5358:	d3 01       	movw	r26, r6
    535a:	11 96       	adiw	r26, 0x01	; 1
    535c:	2c 91       	ld	r18, X
    535e:	11 97       	sbiw	r26, 0x01	; 1
    5360:	ec 14       	cp	r14, r12
    5362:	fd 04       	cpc	r15, r13
    5364:	31 f4       	brne	.+12     	; 0x5372 <_Z17menuProcTelemetryh+0x490>
    5366:	90 91 4c 19 	lds	r25, 0x194C
    536a:	91 30       	cpi	r25, 0x01	; 1
    536c:	11 f4       	brne	.+4      	; 0x5372 <_Z17menuProcTelemetryh+0x490>
    536e:	08 85       	ldd	r16, Y+8	; 0x08
    5370:	01 c0       	rjmp	.+2      	; 0x5374 <_Z17menuProcTelemetryh+0x492>
    5372:	00 ee       	ldi	r16, 0xE0	; 224
    5374:	61 2f       	mov	r22, r17
    5376:	4b 2d       	mov	r20, r11
    5378:	0e 94 86 a2 	call	0x1450c	; 0x1450c <_Z14frskyPutAValuehhhhh>

      if(sub==subN && m_posHorz==0 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMin =
    537c:	ec 14       	cp	r14, r12
    537e:	fd 04       	cpc	r15, r13
    5380:	b9 f5       	brne	.+110    	; 0x53f0 <_Z17menuProcTelemetryh+0x50e>
    5382:	80 91 4c 19 	lds	r24, 0x194C
    5386:	88 23       	and	r24, r24
    5388:	09 f0       	breq	.+2      	; 0x538c <_Z17menuProcTelemetryh+0x4aa>
    538a:	7f c1       	rjmp	.+766    	; 0x568a <_Z17menuProcTelemetryh+0x7a8>
    538c:	80 91 16 19 	lds	r24, 0x1916
    5390:	88 23       	and	r24, r24
    5392:	39 f4       	brne	.+14     	; 0x53a2 <_Z17menuProcTelemetryh+0x4c0>
    5394:	80 91 39 19 	lds	r24, 0x1939
    5398:	90 91 3a 19 	lds	r25, 0x193A
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	09 f4       	brne	.+2      	; 0x53a2 <_Z17menuProcTelemetryh+0x4c0>
    53a0:	74 c1       	rjmp	.+744    	; 0x568a <_Z17menuProcTelemetryh+0x7a8>
        checkIncDec(event, g_model.frsky.channels[i].barMin, 0, g_model.frsky.channels[i].barMax, EE_MODEL);
    53a2:	f3 01       	movw	r30, r6
    53a4:	60 81       	ld	r22, Z
    53a6:	21 81       	ldd	r18, Z+1	; 0x01
    53a8:	88 2d       	mov	r24, r8
    53aa:	70 e0       	ldi	r23, 0x00	; 0
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	30 e0       	ldi	r19, 0x00	; 0
    53b2:	02 e0       	ldi	r16, 0x02	; 2
    53b4:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    53b8:	d3 01       	movw	r26, r6
    53ba:	8c 93       	st	X, r24
    53bc:	66 c1       	rjmp	.+716    	; 0x568a <_Z17menuProcTelemetryh+0x7a8>
      if(sub==subN && m_posHorz==1 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMax =
    53be:	80 91 16 19 	lds	r24, 0x1916
    53c2:	88 23       	and	r24, r24
    53c4:	31 f4       	brne	.+12     	; 0x53d2 <_Z17menuProcTelemetryh+0x4f0>
    53c6:	80 91 39 19 	lds	r24, 0x1939
    53ca:	90 91 3a 19 	lds	r25, 0x193A
    53ce:	00 97       	sbiw	r24, 0x00	; 0
    53d0:	79 f0       	breq	.+30     	; 0x53f0 <_Z17menuProcTelemetryh+0x50e>
        checkIncDec(event, g_model.frsky.channels[i].barMax, g_model.frsky.channels[i].barMin, 255, EE_MODEL);
    53d2:	f3 01       	movw	r30, r6
    53d4:	61 81       	ldd	r22, Z+1	; 0x01
    53d6:	40 81       	ld	r20, Z
    53d8:	88 2d       	mov	r24, r8
    53da:	70 e0       	ldi	r23, 0x00	; 0
    53dc:	50 e0       	ldi	r21, 0x00	; 0
    53de:	2f ef       	ldi	r18, 0xFF	; 255
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	02 e0       	ldi	r16, 0x02	; 2
    53e4:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    53e8:	d3 01       	movw	r26, r6
    53ea:	11 96       	adiw	r26, 0x01	; 1
    53ec:	8c 93       	st	X, r24
    53ee:	11 97       	sbiw	r26, 0x01	; 1
    53f0:	64 e0       	ldi	r22, 0x04	; 4
    53f2:	96 2e       	mov	r9, r22
    53f4:	92 0c       	add	r9, r2
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    53f6:	8e 81       	ldd	r24, Y+6	; 0x06
    53f8:	9f 81       	ldd	r25, Y+7	; 0x07
    53fa:	53 e0       	ldi	r21, 0x03	; 3
    53fc:	88 0f       	add	r24, r24
    53fe:	99 1f       	adc	r25, r25
    5400:	5a 95       	dec	r21
    5402:	e1 f7       	brne	.-8      	; 0x53fc <_Z17menuProcTelemetryh+0x51a>
    5404:	ee 81       	ldd	r30, Y+6	; 0x06
    5406:	ff 81       	ldd	r31, Y+7	; 0x07
    5408:	8e 1b       	sub	r24, r30
    540a:	9f 0b       	sbc	r25, r31
    540c:	9c 01       	movw	r18, r24
    540e:	27 5a       	subi	r18, 0xA7	; 167
    5410:	3a 4e       	sbci	r19, 0xEA	; 234
    5412:	3c 83       	std	Y+4, r19	; 0x04
    5414:	2b 83       	std	Y+3, r18	; 0x03
      if(sub==subN && m_posHorz==1 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMax =
        checkIncDec(event, g_model.frsky.channels[i].barMax, g_model.frsky.channels[i].barMin, 255, EE_MODEL);
    }
    subN++;

    for (int j=0; j<2; j++) {
    5416:	aa 24       	eor	r10, r10
    5418:	bb 24       	eor	r11, r11
      if(s_pgOfs<subN) {
        y=(subN-s_pgOfs)*FH;
        lcd_putsAtt(4, y, PSTR("Alarm"), 0); lcd_putc(lcd_lastPos, y, '1'+j);
        lcd_putsnAtt(8*FW, y, PSTR("---YelOrgRed")+3*ALARM_LEVEL(i, j),3,(sub==subN && m_posHorz==0 ? blink:0));
    541a:	4b e5       	ldi	r20, 0x5B	; 91
    541c:	c4 2e       	mov	r12, r20
    541e:	45 e1       	ldi	r20, 0x15	; 21
    5420:	d4 2e       	mov	r13, r20
    5422:	c8 0e       	add	r12, r24
    5424:	d9 1e       	adc	r13, r25
        lcd_putsnAtt(13*FW, y, PSTR("<>")+ALARM_GREATER(i, j),1,(sub==subN && m_posHorz==1 ? blink:0));
    5426:	3e 80       	ldd	r3, Y+6	; 0x06
    5428:	23 01       	movw	r4, r6
    542a:	3f 01       	movw	r6, r30
    542c:	da 86       	std	Y+10, r13	; 0x0a
    542e:	c9 86       	std	Y+9, r12	; 0x09
        checkIncDec(event, g_model.frsky.channels[i].barMax, g_model.frsky.channels[i].barMin, 255, EE_MODEL);
    }
    subN++;

    for (int j=0; j<2; j++) {
      if(s_pgOfs<subN) {
    5430:	80 91 15 19 	lds	r24, 0x1915
    5434:	89 15       	cp	r24, r9
    5436:	08 f0       	brcs	.+2      	; 0x543a <_Z17menuProcTelemetryh+0x558>
    5438:	02 c1       	rjmp	.+516    	; 0x563e <_Z17menuProcTelemetryh+0x75c>
        y=(subN-s_pgOfs)*FH;
    543a:	c9 2c       	mov	r12, r9
    543c:	dd 24       	eor	r13, r13
    543e:	d6 01       	movw	r26, r12
    5440:	a8 1b       	sub	r26, r24
    5442:	b1 09       	sbc	r27, r1
    5444:	1a 2f       	mov	r17, r26
    5446:	11 0f       	add	r17, r17
    5448:	11 0f       	add	r17, r17
    544a:	11 0f       	add	r17, r17
        lcd_putsAtt(4, y, PSTR("Alarm"), 0); lcd_putc(lcd_lastPos, y, '1'+j);
    544c:	84 e0       	ldi	r24, 0x04	; 4
    544e:	61 2f       	mov	r22, r17
    5450:	47 ed       	ldi	r20, 0xD7	; 215
    5452:	52 e0       	ldi	r21, 0x02	; 2
    5454:	20 e0       	ldi	r18, 0x00	; 0
    5456:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    545a:	4a 2d       	mov	r20, r10
    545c:	4f 5c       	subi	r20, 0xCF	; 207
    subN++;

    for (int j=0; j<2; j++) {
      if(s_pgOfs<subN) {
        y=(subN-s_pgOfs)*FH;
        lcd_putsAtt(4, y, PSTR("Alarm"), 0); lcd_putc(lcd_lastPos, y, '1'+j);
    545e:	80 91 02 1f 	lds	r24, 0x1F02
    5462:	61 2f       	mov	r22, r17
    5464:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    }
  }
}

#ifdef FRSKY
void menuProcTelemetry(uint8_t event)
    5468:	f5 01       	movw	r30, r10
    546a:	ee 0f       	add	r30, r30
    546c:	ff 1f       	adc	r31, r31
    546e:	ff 83       	std	Y+7, r31	; 0x07
    5470:	ee 83       	std	Y+6, r30	; 0x06

    for (int j=0; j<2; j++) {
      if(s_pgOfs<subN) {
        y=(subN-s_pgOfs)*FH;
        lcd_putsAtt(4, y, PSTR("Alarm"), 0); lcd_putc(lcd_lastPos, y, '1'+j);
        lcd_putsnAtt(8*FW, y, PSTR("---YelOrgRed")+3*ALARM_LEVEL(i, j),3,(sub==subN && m_posHorz==0 ? blink:0));
    5472:	a9 85       	ldd	r26, Y+9	; 0x09
    5474:	ba 85       	ldd	r27, Y+10	; 0x0a
    5476:	8c 91       	ld	r24, X
    5478:	8f 70       	andi	r24, 0x0F	; 15
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	0e 80       	ldd	r0, Y+6	; 0x06
    547e:	02 c0       	rjmp	.+4      	; 0x5484 <_Z17menuProcTelemetryh+0x5a2>
    5480:	95 95       	asr	r25
    5482:	87 95       	ror	r24
    5484:	0a 94       	dec	r0
    5486:	e2 f7       	brpl	.-8      	; 0x5480 <_Z17menuProcTelemetryh+0x59e>
    5488:	83 70       	andi	r24, 0x03	; 3
    548a:	90 70       	andi	r25, 0x00	; 0
    548c:	ac 01       	movw	r20, r24
    548e:	44 0f       	add	r20, r20
    5490:	55 1f       	adc	r21, r21
    5492:	48 0f       	add	r20, r24
    5494:	59 1f       	adc	r21, r25
    5496:	46 53       	subi	r20, 0x36	; 54
    5498:	5d 4f       	sbci	r21, 0xFD	; 253
    549a:	ec 14       	cp	r14, r12
    549c:	fd 04       	cpc	r15, r13
    549e:	21 f4       	brne	.+8      	; 0x54a8 <_Z17menuProcTelemetryh+0x5c6>
    54a0:	80 91 4c 19 	lds	r24, 0x194C
    54a4:	88 23       	and	r24, r24
    54a6:	11 f0       	breq	.+4      	; 0x54ac <_Z17menuProcTelemetryh+0x5ca>
    54a8:	00 e0       	ldi	r16, 0x00	; 0
    54aa:	01 c0       	rjmp	.+2      	; 0x54ae <_Z17menuProcTelemetryh+0x5cc>
    54ac:	0d 81       	ldd	r16, Y+5	; 0x05
    54ae:	80 e3       	ldi	r24, 0x30	; 48
    54b0:	61 2f       	mov	r22, r17
    54b2:	23 e0       	ldi	r18, 0x03	; 3
    54b4:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
        lcd_putsnAtt(13*FW, y, PSTR("<>")+ALARM_GREATER(i, j),1,(sub==subN && m_posHorz==1 ? blink:0));
    54b8:	e9 85       	ldd	r30, Y+9	; 0x09
    54ba:	fa 85       	ldd	r31, Y+10	; 0x0a
    54bc:	40 81       	ld	r20, Z
    54be:	42 95       	swap	r20
    54c0:	43 70       	andi	r20, 0x03	; 3
    54c2:	50 e0       	ldi	r21, 0x00	; 0
    54c4:	0a 2c       	mov	r0, r10
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <_Z17menuProcTelemetryh+0x5ea>
    54c8:	55 95       	asr	r21
    54ca:	47 95       	ror	r20
    54cc:	0a 94       	dec	r0
    54ce:	e2 f7       	brpl	.-8      	; 0x54c8 <_Z17menuProcTelemetryh+0x5e6>
    54d0:	41 70       	andi	r20, 0x01	; 1
    54d2:	50 70       	andi	r21, 0x00	; 0
    54d4:	49 53       	subi	r20, 0x39	; 57
    54d6:	5d 4f       	sbci	r21, 0xFD	; 253
    54d8:	ec 14       	cp	r14, r12
    54da:	fd 04       	cpc	r15, r13
    54dc:	21 f4       	brne	.+8      	; 0x54e6 <_Z17menuProcTelemetryh+0x604>
    54de:	80 91 4c 19 	lds	r24, 0x194C
    54e2:	81 30       	cpi	r24, 0x01	; 1
    54e4:	11 f0       	breq	.+4      	; 0x54ea <_Z17menuProcTelemetryh+0x608>
    54e6:	00 e0       	ldi	r16, 0x00	; 0
    54e8:	01 c0       	rjmp	.+2      	; 0x54ec <_Z17menuProcTelemetryh+0x60a>
    54ea:	0d 81       	ldd	r16, Y+5	; 0x05
    54ec:	8e e4       	ldi	r24, 0x4E	; 78
    54ee:	61 2f       	mov	r22, r17
    54f0:	21 e0       	ldi	r18, 0x01	; 1
    54f2:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      
        frskyPutAValue(16*FW, y, i, g_model.frsky.channels[i].alarms_value[j], (sub==subN && m_posHorz==2 ? blink:0)|LEFT|PREC2);
    54f6:	ab 81       	ldd	r26, Y+3	; 0x03
    54f8:	bc 81       	ldd	r27, Y+4	; 0x04
    54fa:	2c 91       	ld	r18, X
    54fc:	ec 14       	cp	r14, r12
    54fe:	fd 04       	cpc	r15, r13
    5500:	31 f4       	brne	.+12     	; 0x550e <_Z17menuProcTelemetryh+0x62c>
    5502:	80 91 4c 19 	lds	r24, 0x194C
    5506:	82 30       	cpi	r24, 0x02	; 2
    5508:	11 f4       	brne	.+4      	; 0x550e <_Z17menuProcTelemetryh+0x62c>
    550a:	08 85       	ldd	r16, Y+8	; 0x08
    550c:	01 c0       	rjmp	.+2      	; 0x5510 <_Z17menuProcTelemetryh+0x62e>
    550e:	00 ee       	ldi	r16, 0xE0	; 224
    5510:	80 e6       	ldi	r24, 0x60	; 96
    5512:	61 2f       	mov	r22, r17
    5514:	43 2d       	mov	r20, r3
    5516:	0e 94 86 a2 	call	0x1450c	; 0x1450c <_Z14frskyPutAValuehhhhh>

        if(sub==subN && (s_editMode || p1valdiff)) {
    551a:	ec 14       	cp	r14, r12
    551c:	fd 04       	cpc	r15, r13
    551e:	09 f0       	breq	.+2      	; 0x5522 <_Z17menuProcTelemetryh+0x640>
    5520:	8e c0       	rjmp	.+284    	; 0x563e <_Z17menuProcTelemetryh+0x75c>
    5522:	80 91 16 19 	lds	r24, 0x1916
    5526:	88 23       	and	r24, r24
    5528:	39 f4       	brne	.+14     	; 0x5538 <_Z17menuProcTelemetryh+0x656>
    552a:	80 91 39 19 	lds	r24, 0x1939
    552e:	90 91 3a 19 	lds	r25, 0x193A
    5532:	00 97       	sbiw	r24, 0x00	; 0
    5534:	09 f4       	brne	.+2      	; 0x5538 <_Z17menuProcTelemetryh+0x656>
    5536:	83 c0       	rjmp	.+262    	; 0x563e <_Z17menuProcTelemetryh+0x75c>
          switch (m_posHorz) {
    5538:	80 91 4c 19 	lds	r24, 0x194C
    553c:	81 30       	cpi	r24, 0x01	; 1
    553e:	b1 f1       	breq	.+108    	; 0x55ac <_Z17menuProcTelemetryh+0x6ca>
    5540:	81 30       	cpi	r24, 0x01	; 1
    5542:	20 f0       	brcs	.+8      	; 0x554c <_Z17menuProcTelemetryh+0x66a>
    5544:	82 30       	cpi	r24, 0x02	; 2
    5546:	09 f0       	breq	.+2      	; 0x554a <_Z17menuProcTelemetryh+0x668>
    5548:	7a c0       	rjmp	.+244    	; 0x563e <_Z17menuProcTelemetryh+0x75c>
    554a:	6a c0       	rjmp	.+212    	; 0x5620 <_Z17menuProcTelemetryh+0x73e>
            case 0:
              t = ALARM_LEVEL(i, j);
    554c:	e9 85       	ldd	r30, Y+9	; 0x09
    554e:	fa 85       	ldd	r31, Y+10	; 0x0a
    5550:	10 81       	ld	r17, Z
    5552:	1f 70       	andi	r17, 0x0F	; 15
    5554:	61 2f       	mov	r22, r17
    5556:	70 e0       	ldi	r23, 0x00	; 0
    5558:	0e 80       	ldd	r0, Y+6	; 0x06
    555a:	02 c0       	rjmp	.+4      	; 0x5560 <_Z17menuProcTelemetryh+0x67e>
    555c:	75 95       	asr	r23
    555e:	67 95       	ror	r22
    5560:	0a 94       	dec	r0
    5562:	e2 f7       	brpl	.-8      	; 0x555c <_Z17menuProcTelemetryh+0x67a>
    5564:	63 70       	andi	r22, 0x03	; 3
              g_model.frsky.channels[i].alarms_level = (g_model.frsky.channels[i].alarms_level & ~(3<<(2*j)))
                + (checkIncDec(event, t, 0, 3, EE_MODEL) << (2*j));
    5566:	88 2d       	mov	r24, r8
    5568:	70 e0       	ldi	r23, 0x00	; 0
    556a:	40 e0       	ldi	r20, 0x00	; 0
    556c:	50 e0       	ldi	r21, 0x00	; 0
    556e:	23 e0       	ldi	r18, 0x03	; 3
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	02 e0       	ldi	r16, 0x02	; 2
    5574:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    5578:	9c 01       	movw	r18, r24
    557a:	0e 80       	ldd	r0, Y+6	; 0x06
    557c:	02 c0       	rjmp	.+4      	; 0x5582 <_Z17menuProcTelemetryh+0x6a0>
    557e:	22 0f       	add	r18, r18
    5580:	33 1f       	adc	r19, r19
    5582:	0a 94       	dec	r0
    5584:	e2 f7       	brpl	.-8      	; 0x557e <_Z17menuProcTelemetryh+0x69c>
    5586:	83 e0       	ldi	r24, 0x03	; 3
    5588:	90 e0       	ldi	r25, 0x00	; 0
    558a:	0e 80       	ldd	r0, Y+6	; 0x06
    558c:	02 c0       	rjmp	.+4      	; 0x5592 <_Z17menuProcTelemetryh+0x6b0>
    558e:	88 0f       	add	r24, r24
    5590:	99 1f       	adc	r25, r25
    5592:	0a 94       	dec	r0
    5594:	e2 f7       	brpl	.-8      	; 0x558e <_Z17menuProcTelemetryh+0x6ac>
    5596:	80 95       	com	r24
    5598:	81 23       	and	r24, r17
    559a:	82 0f       	add	r24, r18
    559c:	8f 70       	andi	r24, 0x0F	; 15
    559e:	a9 85       	ldd	r26, Y+9	; 0x09
    55a0:	ba 85       	ldd	r27, Y+10	; 0x0a
    55a2:	9c 91       	ld	r25, X
    55a4:	90 7f       	andi	r25, 0xF0	; 240
    55a6:	98 2b       	or	r25, r24
    55a8:	9c 93       	st	X, r25
              break;
    55aa:	49 c0       	rjmp	.+146    	; 0x563e <_Z17menuProcTelemetryh+0x75c>
            case 1:
              t = ALARM_GREATER(i, j);
    55ac:	e9 85       	ldd	r30, Y+9	; 0x09
    55ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    55b0:	10 81       	ld	r17, Z
    55b2:	12 95       	swap	r17
    55b4:	13 70       	andi	r17, 0x03	; 3
    55b6:	61 2f       	mov	r22, r17
    55b8:	70 e0       	ldi	r23, 0x00	; 0
    55ba:	0a 2c       	mov	r0, r10
    55bc:	02 c0       	rjmp	.+4      	; 0x55c2 <_Z17menuProcTelemetryh+0x6e0>
    55be:	75 95       	asr	r23
    55c0:	67 95       	ror	r22
    55c2:	0a 94       	dec	r0
    55c4:	e2 f7       	brpl	.-8      	; 0x55be <_Z17menuProcTelemetryh+0x6dc>
    55c6:	61 70       	andi	r22, 0x01	; 1
              g_model.frsky.channels[i].alarms_greater = (g_model.frsky.channels[i].alarms_greater & ~(1<<j))
                + (checkIncDec(event, t, 0, 1, EE_MODEL) << j);
    55c8:	88 2d       	mov	r24, r8
    55ca:	70 e0       	ldi	r23, 0x00	; 0
    55cc:	40 e0       	ldi	r20, 0x00	; 0
    55ce:	50 e0       	ldi	r21, 0x00	; 0
    55d0:	21 e0       	ldi	r18, 0x01	; 1
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	02 e0       	ldi	r16, 0x02	; 2
    55d6:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    55da:	9c 01       	movw	r18, r24
    55dc:	0a 2c       	mov	r0, r10
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <_Z17menuProcTelemetryh+0x702>
    55e0:	22 0f       	add	r18, r18
    55e2:	33 1f       	adc	r19, r19
    55e4:	0a 94       	dec	r0
    55e6:	e2 f7       	brpl	.-8      	; 0x55e0 <_Z17menuProcTelemetryh+0x6fe>
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	90 e0       	ldi	r25, 0x00	; 0
    55ec:	0a 2c       	mov	r0, r10
    55ee:	02 c0       	rjmp	.+4      	; 0x55f4 <_Z17menuProcTelemetryh+0x712>
    55f0:	88 0f       	add	r24, r24
    55f2:	99 1f       	adc	r25, r25
    55f4:	0a 94       	dec	r0
    55f6:	e2 f7       	brpl	.-8      	; 0x55f0 <_Z17menuProcTelemetryh+0x70e>
    55f8:	80 95       	com	r24
    55fa:	81 23       	and	r24, r17
    55fc:	82 0f       	add	r24, r18
    55fe:	83 70       	andi	r24, 0x03	; 3
    5600:	82 95       	swap	r24
    5602:	80 7f       	andi	r24, 0xF0	; 240
    5604:	a9 85       	ldd	r26, Y+9	; 0x09
    5606:	ba 85       	ldd	r27, Y+10	; 0x0a
    5608:	9c 91       	ld	r25, X
    560a:	9f 7c       	andi	r25, 0xCF	; 207
    560c:	98 2b       	or	r25, r24
    560e:	9c 93       	st	X, r25
              if(checkIncDec_Ret)
    5610:	80 91 3b 19 	lds	r24, 0x193B
    5614:	88 23       	and	r24, r24
    5616:	99 f0       	breq	.+38     	; 0x563e <_Z17menuProcTelemetryh+0x75c>
    5618:	84 e0       	ldi	r24, 0x04	; 4
    561a:	80 93 af 1f 	sts	0x1FAF, r24
    561e:	0f c0       	rjmp	.+30     	; 0x563e <_Z17menuProcTelemetryh+0x75c>
                FRSKY_setModelAlarms();
              break;
            case 2:
              g_model.frsky.channels[i].alarms_value[j] = 
                checkIncDec(event, g_model.frsky.channels[i].alarms_value[j], 0, 255, EE_MODEL);
    5620:	eb 81       	ldd	r30, Y+3	; 0x03
    5622:	fc 81       	ldd	r31, Y+4	; 0x04
    5624:	60 81       	ld	r22, Z
    5626:	88 2d       	mov	r24, r8
    5628:	70 e0       	ldi	r23, 0x00	; 0
    562a:	40 e0       	ldi	r20, 0x00	; 0
    562c:	50 e0       	ldi	r21, 0x00	; 0
    562e:	2f ef       	ldi	r18, 0xFF	; 255
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	02 e0       	ldi	r16, 0x02	; 2
    5634:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    5638:	ab 81       	ldd	r26, Y+3	; 0x03
    563a:	bc 81       	ldd	r27, Y+4	; 0x04
    563c:	8c 93       	st	X, r24
              break;
          }
        }
      }
      subN++;
    563e:	93 94       	inc	r9
      if(sub==subN && m_posHorz==1 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMax =
        checkIncDec(event, g_model.frsky.channels[i].barMax, g_model.frsky.channels[i].barMin, 255, EE_MODEL);
    }
    subN++;

    for (int j=0; j<2; j++) {
    5640:	08 94       	sec
    5642:	a1 1c       	adc	r10, r1
    5644:	b1 1c       	adc	r11, r1
    5646:	eb 81       	ldd	r30, Y+3	; 0x03
    5648:	fc 81       	ldd	r31, Y+4	; 0x04
    564a:	31 96       	adiw	r30, 0x01	; 1
    564c:	fc 83       	std	Y+4, r31	; 0x04
    564e:	eb 83       	std	Y+3, r30	; 0x03
    5650:	f2 e0       	ldi	r31, 0x02	; 2
    5652:	af 16       	cp	r10, r31
    5654:	b1 04       	cpc	r11, r1
    5656:	09 f0       	breq	.+2      	; 0x565a <_Z17menuProcTelemetryh+0x778>
    5658:	eb ce       	rjmp	.-554    	; 0x5430 <_Z17menuProcTelemetryh+0x54e>
    565a:	7f 82       	std	Y+7, r7	; 0x07
    565c:	6e 82       	std	Y+6, r6	; 0x06
    565e:	32 01       	movw	r6, r4
    5660:	26 e0       	ldi	r18, 0x06	; 6
    5662:	22 0e       	add	r2, r18

  blink = s_editMode ? BLINK : INVERS ;
  uint8_t subN = 1;
  uint8_t t;

  for (int i=0; i<2; i++) {
    5664:	8e 81       	ldd	r24, Y+6	; 0x06
    5666:	9f 81       	ldd	r25, Y+7	; 0x07
    5668:	01 96       	adiw	r24, 0x01	; 1
    566a:	9f 83       	std	Y+7, r25	; 0x07
    566c:	8e 83       	std	Y+6, r24	; 0x06
    566e:	a7 e0       	ldi	r26, 0x07	; 7
    5670:	b0 e0       	ldi	r27, 0x00	; 0
    5672:	6a 0e       	add	r6, r26
    5674:	7b 1e       	adc	r7, r27
    5676:	e9 81       	ldd	r30, Y+1	; 0x01
    5678:	fa 81       	ldd	r31, Y+2	; 0x02
    567a:	33 96       	adiw	r30, 0x03	; 3
    567c:	fa 83       	std	Y+2, r31	; 0x02
    567e:	e9 83       	std	Y+1, r30	; 0x01
    5680:	f2 2d       	mov	r31, r2
    5682:	fd 30       	cpi	r31, 0x0D	; 13
    5684:	09 f0       	breq	.+2      	; 0x5688 <_Z17menuProcTelemetryh+0x7a6>
    5686:	16 cd       	rjmp	.-1492   	; 0x50b4 <_Z17menuProcTelemetryh+0x1d2>
    5688:	06 c0       	rjmp	.+12     	; 0x5696 <_Z17menuProcTelemetryh+0x7b4>
      
      frskyPutAValue(lcd_lastPos+FW, y, i, g_model.frsky.channels[i].barMax, (sub==subN && m_posHorz==1 ? blink:0)|LEFT|PREC2);

      if(sub==subN && m_posHorz==0 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMin =
        checkIncDec(event, g_model.frsky.channels[i].barMin, 0, g_model.frsky.channels[i].barMax, EE_MODEL);
      if(sub==subN && m_posHorz==1 && (s_editMode || p1valdiff)) g_model.frsky.channels[i].barMax =
    568a:	80 91 4c 19 	lds	r24, 0x194C
    568e:	81 30       	cpi	r24, 0x01	; 1
    5690:	09 f0       	breq	.+2      	; 0x5694 <_Z17menuProcTelemetryh+0x7b2>
    5692:	ae ce       	rjmp	.-676    	; 0x53f0 <_Z17menuProcTelemetryh+0x50e>
    5694:	94 ce       	rjmp	.-728    	; 0x53be <_Z17menuProcTelemetryh+0x4dc>
        }
      }
      subN++;
    }
  }
}
    5696:	2a 96       	adiw	r28, 0x0a	; 10
    5698:	0f b6       	in	r0, 0x3f	; 63
    569a:	f8 94       	cli
    569c:	de bf       	out	0x3e, r29	; 62
    569e:	0f be       	out	0x3f, r0	; 63
    56a0:	cd bf       	out	0x3d, r28	; 61
    56a2:	cf 91       	pop	r28
    56a4:	df 91       	pop	r29
    56a6:	1f 91       	pop	r17
    56a8:	0f 91       	pop	r16
    56aa:	ff 90       	pop	r15
    56ac:	ef 90       	pop	r14
    56ae:	df 90       	pop	r13
    56b0:	cf 90       	pop	r12
    56b2:	bf 90       	pop	r11
    56b4:	af 90       	pop	r10
    56b6:	9f 90       	pop	r9
    56b8:	8f 90       	pop	r8
    56ba:	7f 90       	pop	r7
    56bc:	6f 90       	pop	r6
    56be:	5f 90       	pop	r5
    56c0:	4f 90       	pop	r4
    56c2:	3f 90       	pop	r3
    56c4:	2f 90       	pop	r2
    56c6:	08 95       	ret

000056c8 <_Z22menuProcSafetySwitchesh>:
    }
  }
}

void menuProcSafetySwitches(uint8_t event)
{
    56c8:	9f 92       	push	r9
    56ca:	af 92       	push	r10
    56cc:	bf 92       	push	r11
    56ce:	cf 92       	push	r12
    56d0:	df 92       	push	r13
    56d2:	ef 92       	push	r14
    56d4:	ff 92       	push	r15
    56d6:	0f 93       	push	r16
    56d8:	1f 93       	push	r17
    56da:	cf 93       	push	r28
    56dc:	df 93       	push	r29
    56de:	98 2e       	mov	r9, r24
  MENU("SAFETY SWITCHES", menuTabModel, e_SafetySwitches, NUM_CHNOUT+1, {0, 1/*repeated*/});
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	60 e0       	ldi	r22, 0x00	; 0
    56e4:	44 e1       	ldi	r20, 0x14	; 20
    56e6:	53 e0       	ldi	r21, 0x03	; 3
    56e8:	22 e0       	ldi	r18, 0x02	; 2
    56ea:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    56ee:	89 2d       	mov	r24, r9
    56f0:	69 e0       	ldi	r22, 0x09	; 9
    56f2:	47 ea       	ldi	r20, 0xA7	; 167
    56f4:	56 e0       	ldi	r21, 0x06	; 6
    56f6:	2c e0       	ldi	r18, 0x0C	; 12
    56f8:	0b ec       	ldi	r16, 0xCB	; 203
    56fa:	16 e0       	ldi	r17, 0x06	; 6
    56fc:	ee 24       	eor	r14, r14
    56fe:	e3 94       	inc	r14
    5700:	70 e1       	ldi	r23, 0x10	; 16
    5702:	c7 2e       	mov	r12, r23
    5704:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    5708:	88 23       	and	r24, r24
    570a:	09 f4       	brne	.+2      	; 0x570e <_Z22menuProcSafetySwitchesh+0x46>
    570c:	70 c0       	rjmp	.+224    	; 0x57ee <_Z22menuProcSafetySwitchesh+0x126>
    570e:	48 e0       	ldi	r20, 0x08	; 8
    5710:	c4 2e       	mov	r12, r20
    5712:	bb 24       	eor	r11, r11
  uint8_t y = 0;
  uint8_t k = 0;

  for(uint8_t i=0; i<7; i++){
    y=(i+1)*FH;
    k=i+s_pgOfs;
    5714:	40 91 15 19 	lds	r20, 0x1915
    5718:	4b 0d       	add	r20, r11
    if(k==NUM_CHNOUT) break;
    571a:	40 31       	cpi	r20, 0x10	; 16
    571c:	09 f4       	brne	.+2      	; 0x5720 <_Z22menuProcSafetySwitchesh+0x58>
    571e:	67 c0       	rjmp	.+206    	; 0x57ee <_Z22menuProcSafetySwitchesh+0x126>
    SafetySwData *sd = &g_model.safetySw[k];
    5720:	e4 2e       	mov	r14, r20
    5722:	ff 24       	eor	r15, r15
    putsChn(0,y,k+1,0);
    5724:	4f 5f       	subi	r20, 0xFF	; 255
    5726:	80 e0       	ldi	r24, 0x00	; 0
    5728:	6c 2d       	mov	r22, r12
    572a:	20 e0       	ldi	r18, 0x00	; 0
    572c:	0e 94 76 6b 	call	0xd6ec	; 0xd6ec <_Z7putsChnhhhh>
    for(uint8_t j=0; j<=2;j++){
    5730:	dd 24       	eor	r13, r13
      uint8_t attr = ((m_posVert-1==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
      uint8_t active = (attr && (s_editMode || p1valdiff));
      switch(j)
      {
        case 0:
          putsSwitches(6*FW, y, sd->swtch  , attr);
    5732:	e7 01       	movw	r28, r14
    5734:	cc 0f       	add	r28, r28
    5736:	dd 1f       	adc	r29, r29
    5738:	c5 52       	subi	r28, 0x25	; 37
    573a:	db 4e       	sbci	r29, 0xEB	; 235
          if (active) {
            CHECK_INCDEC_MODELVAR( event, sd->swtch, -MAX_SWITCH, MAX_SWITCH);
          }
          break;
        case 1:
          lcd_outdezAtt(16*FW, y, sd->val,   attr);
    573c:	87 01       	movw	r16, r14
    573e:	00 0f       	add	r16, r16
    5740:	11 1f       	adc	r17, r17
    5742:	04 52       	subi	r16, 0x24	; 36
    5744:	1b 4e       	sbci	r17, 0xEB	; 235
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    SafetySwData *sd = &g_model.safetySw[k];
    putsChn(0,y,k+1,0);
    for(uint8_t j=0; j<=2;j++){
      uint8_t attr = ((m_posVert-1==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5746:	80 91 4b 19 	lds	r24, 0x194B
    574a:	90 e0       	ldi	r25, 0x00	; 0
    574c:	01 97       	sbiw	r24, 0x01	; 1
    574e:	8e 15       	cp	r24, r14
    5750:	9f 05       	cpc	r25, r15
    5752:	81 f4       	brne	.+32     	; 0x5774 <_Z22menuProcSafetySwitchesh+0xac>
    5754:	80 91 4c 19 	lds	r24, 0x194C
    5758:	8d 15       	cp	r24, r13
    575a:	61 f4       	brne	.+24     	; 0x5774 <_Z22menuProcSafetySwitchesh+0xac>
    575c:	80 91 16 19 	lds	r24, 0x1916
    5760:	88 23       	and	r24, r24
    5762:	59 f4       	brne	.+22     	; 0x577a <_Z22menuProcSafetySwitchesh+0xb2>
      uint8_t active = (attr && (s_editMode || p1valdiff));
    5764:	80 91 39 19 	lds	r24, 0x1939
    5768:	90 91 3a 19 	lds	r25, 0x193A
    576c:	00 97       	sbiw	r24, 0x00	; 0
    576e:	39 f4       	brne	.+14     	; 0x577e <_Z22menuProcSafetySwitchesh+0xb6>
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    SafetySwData *sd = &g_model.safetySw[k];
    putsChn(0,y,k+1,0);
    for(uint8_t j=0; j<=2;j++){
      uint8_t attr = ((m_posVert-1==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5770:	22 e0       	ldi	r18, 0x02	; 2
    5772:	01 c0       	rjmp	.+2      	; 0x5776 <_Z22menuProcSafetySwitchesh+0xae>
    5774:	20 e0       	ldi	r18, 0x00	; 0
      uint8_t active = (attr && (s_editMode || p1valdiff));
    5776:	aa 24       	eor	r10, r10
    5778:	05 c0       	rjmp	.+10     	; 0x5784 <_Z22menuProcSafetySwitchesh+0xbc>
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    SafetySwData *sd = &g_model.safetySw[k];
    putsChn(0,y,k+1,0);
    for(uint8_t j=0; j<=2;j++){
      uint8_t attr = ((m_posVert-1==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    577a:	21 e0       	ldi	r18, 0x01	; 1
    577c:	01 c0       	rjmp	.+2      	; 0x5780 <_Z22menuProcSafetySwitchesh+0xb8>
    577e:	22 e0       	ldi	r18, 0x02	; 2
      uint8_t active = (attr && (s_editMode || p1valdiff));
    5780:	aa 24       	eor	r10, r10
    5782:	a3 94       	inc	r10
      switch(j)
    5784:	dd 20       	and	r13, r13
    5786:	21 f0       	breq	.+8      	; 0x5790 <_Z22menuProcSafetySwitchesh+0xc8>
    5788:	8d 2d       	mov	r24, r13
    578a:	81 30       	cpi	r24, 0x01	; 1
    578c:	21 f5       	brne	.+72     	; 0x57d6 <_Z22menuProcSafetySwitchesh+0x10e>
    578e:	0f c0       	rjmp	.+30     	; 0x57ae <_Z22menuProcSafetySwitchesh+0xe6>
      {
        case 0:
          putsSwitches(6*FW, y, sd->swtch  , attr);
    5790:	84 e2       	ldi	r24, 0x24	; 36
    5792:	6c 2d       	mov	r22, r12
    5794:	48 81       	ld	r20, Y
    5796:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
          if (active) {
    579a:	aa 20       	and	r10, r10
    579c:	e1 f0       	breq	.+56     	; 0x57d6 <_Z22menuProcSafetySwitchesh+0x10e>
            CHECK_INCDEC_MODELVAR( event, sd->swtch, -MAX_SWITCH, MAX_SWITCH);
    579e:	89 2d       	mov	r24, r9
    57a0:	68 81       	ld	r22, Y
    57a2:	4a ee       	ldi	r20, 0xEA	; 234
    57a4:	26 e1       	ldi	r18, 0x16	; 22
    57a6:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    57aa:	88 83       	st	Y, r24
    57ac:	14 c0       	rjmp	.+40     	; 0x57d6 <_Z22menuProcSafetySwitchesh+0x10e>
          }
          break;
        case 1:
          lcd_outdezAtt(16*FW, y, sd->val,   attr);
    57ae:	f8 01       	movw	r30, r16
    57b0:	40 81       	ld	r20, Z
    57b2:	55 27       	eor	r21, r21
    57b4:	47 fd       	sbrc	r20, 7
    57b6:	50 95       	com	r21
    57b8:	80 e6       	ldi	r24, 0x60	; 96
    57ba:	6c 2d       	mov	r22, r12
    57bc:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
          if (active) {
    57c0:	aa 20       	and	r10, r10
    57c2:	49 f0       	breq	.+18     	; 0x57d6 <_Z22menuProcSafetySwitchesh+0x10e>
            CHECK_INCDEC_MODELVAR( event, sd->val, -125, 125);
    57c4:	89 2d       	mov	r24, r9
    57c6:	f8 01       	movw	r30, r16
    57c8:	60 81       	ld	r22, Z
    57ca:	43 e8       	ldi	r20, 0x83	; 131
    57cc:	2d e7       	ldi	r18, 0x7D	; 125
    57ce:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    57d2:	f8 01       	movw	r30, r16
    57d4:	80 83       	st	Z, r24
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    SafetySwData *sd = &g_model.safetySw[k];
    putsChn(0,y,k+1,0);
    for(uint8_t j=0; j<=2;j++){
    57d6:	d3 94       	inc	r13
    57d8:	fd 2d       	mov	r31, r13
    57da:	f3 30       	cpi	r31, 0x03	; 3
    57dc:	09 f0       	breq	.+2      	; 0x57e0 <_Z22menuProcSafetySwitchesh+0x118>
    57de:	b3 cf       	rjmp	.-154    	; 0x5746 <_Z22menuProcSafetySwitchesh+0x7e>
  MENU("SAFETY SWITCHES", menuTabModel, e_SafetySwitches, NUM_CHNOUT+1, {0, 1/*repeated*/});
 
  uint8_t y = 0;
  uint8_t k = 0;

  for(uint8_t i=0; i<7; i++){
    57e0:	b3 94       	inc	r11
    57e2:	88 e0       	ldi	r24, 0x08	; 8
    57e4:	c8 0e       	add	r12, r24
    57e6:	eb 2d       	mov	r30, r11
    57e8:	e7 30       	cpi	r30, 0x07	; 7
    57ea:	09 f0       	breq	.+2      	; 0x57ee <_Z22menuProcSafetySwitchesh+0x126>
    57ec:	93 cf       	rjmp	.-218    	; 0x5714 <_Z22menuProcSafetySwitchesh+0x4c>
          }
          break;
      }
    }
  }
}
    57ee:	df 91       	pop	r29
    57f0:	cf 91       	pop	r28
    57f2:	1f 91       	pop	r17
    57f4:	0f 91       	pop	r16
    57f6:	ff 90       	pop	r15
    57f8:	ef 90       	pop	r14
    57fa:	df 90       	pop	r13
    57fc:	cf 90       	pop	r12
    57fe:	bf 90       	pop	r11
    5800:	af 90       	pop	r10
    5802:	9f 90       	pop	r9
    5804:	08 95       	ret

00005806 <_Z24menuProcFunctionSwitchesh>:
      }
  }
}

void menuProcFunctionSwitches(uint8_t event)
{
    5806:	6f 92       	push	r6
    5808:	7f 92       	push	r7
    580a:	8f 92       	push	r8
    580c:	9f 92       	push	r9
    580e:	af 92       	push	r10
    5810:	bf 92       	push	r11
    5812:	cf 92       	push	r12
    5814:	df 92       	push	r13
    5816:	ef 92       	push	r14
    5818:	ff 92       	push	r15
    581a:	0f 93       	push	r16
    581c:	1f 93       	push	r17
    581e:	cf 93       	push	r28
    5820:	df 93       	push	r29
    5822:	a8 2e       	mov	r10, r24
  MENU("FUNC SWITCHES", menuTabModel, e_FunctionSwitches, NUM_FSW+1, {0, 1/*repeated*/});
    5824:	80 e0       	ldi	r24, 0x00	; 0
    5826:	60 e0       	ldi	r22, 0x00	; 0
    5828:	45 e9       	ldi	r20, 0x95	; 149
    582a:	53 e0       	ldi	r21, 0x03	; 3
    582c:	22 e0       	ldi	r18, 0x02	; 2
    582e:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    5832:	8a 2d       	mov	r24, r10
    5834:	68 e0       	ldi	r22, 0x08	; 8
    5836:	47 ea       	ldi	r20, 0xA7	; 167
    5838:	56 e0       	ldi	r21, 0x06	; 6
    583a:	2c e0       	ldi	r18, 0x0C	; 12
    583c:	0d ec       	ldi	r16, 0xCD	; 205
    583e:	16 e0       	ldi	r17, 0x06	; 6
    5840:	ee 24       	eor	r14, r14
    5842:	e3 94       	inc	r14
    5844:	bc e0       	ldi	r27, 0x0C	; 12
    5846:	cb 2e       	mov	r12, r27
    5848:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    584c:	88 23       	and	r24, r24
    584e:	09 f4       	brne	.+2      	; 0x5852 <_Z24menuProcFunctionSwitchesh+0x4c>
    5850:	76 c0       	rjmp	.+236    	; 0x593e <_Z24menuProcFunctionSwitchesh+0x138>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
    5852:	60 90 4b 19 	lds	r6, 0x194B
    5856:	6a 94       	dec	r6
    5858:	a8 e0       	ldi	r26, 0x08	; 8
    585a:	ca 2e       	mov	r12, r26

  for(uint8_t i=0; i<7; i++) {
    585c:	dd 24       	eor	r13, r13
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<2; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    585e:	77 24       	eor	r7, r7
    5860:	67 fc       	sbrc	r6, 7
    5862:	70 94       	com	r7
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    5864:	80 91 15 19 	lds	r24, 0x1915
    5868:	8d 0d       	add	r24, r13
    if(k==NUM_CHNOUT) break;
    586a:	80 31       	cpi	r24, 0x10	; 16
    586c:	09 f4       	brne	.+2      	; 0x5870 <_Z24menuProcFunctionSwitchesh+0x6a>
    586e:	67 c0       	rjmp	.+206    	; 0x593e <_Z24menuProcFunctionSwitchesh+0x138>
    FuncSwData *sd = &g_model.funcSw[k];
    5870:	88 2e       	mov	r8, r24
    5872:	99 24       	eor	r9, r9
    for (uint8_t j=0; j<2; j++) {
    5874:	10 e0       	ldi	r17, 0x00	; 0
          if (active) {
            CHECK_INCDEC_MODELVAR( event, sd->swtch, -MAX_SWITCH, MAX_SWITCH);
          }
          break;
        case 1:
          if (sd->swtch) {
    5876:	e4 01       	movw	r28, r8
    5878:	cc 0f       	add	r28, r28
    587a:	dd 1f       	adc	r29, r29
    587c:	c5 50       	subi	r28, 0x05	; 5
    587e:	db 4e       	sbci	r29, 0xEB	; 235
            lcd_putsnAtt(5*FW, y, PSTR(FSWITCH_STR)+FSW_LEN_FUNC*sd->func, FSW_LEN_FUNC, attr);
    5880:	74 01       	movw	r14, r8
    5882:	ee 0c       	add	r14, r14
    5884:	ff 1c       	adc	r15, r15
    5886:	8c ef       	ldi	r24, 0xFC	; 252
    5888:	94 e1       	ldi	r25, 0x14	; 20
    588a:	e8 0e       	add	r14, r24
    588c:	f9 1e       	adc	r15, r25
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<2; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    588e:	68 14       	cp	r6, r8
    5890:	79 04       	cpc	r7, r9
    5892:	81 f4       	brne	.+32     	; 0x58b4 <_Z24menuProcFunctionSwitchesh+0xae>
    5894:	80 91 4c 19 	lds	r24, 0x194C
    5898:	81 17       	cp	r24, r17
    589a:	61 f4       	brne	.+24     	; 0x58b4 <_Z24menuProcFunctionSwitchesh+0xae>
    589c:	80 91 16 19 	lds	r24, 0x1916
    58a0:	88 23       	and	r24, r24
    58a2:	59 f4       	brne	.+22     	; 0x58ba <_Z24menuProcFunctionSwitchesh+0xb4>
      uint8_t active = (attr && (s_editMode || p1valdiff));
    58a4:	80 91 39 19 	lds	r24, 0x1939
    58a8:	90 91 3a 19 	lds	r25, 0x193A
    58ac:	00 97       	sbiw	r24, 0x00	; 0
    58ae:	39 f4       	brne	.+14     	; 0x58be <_Z24menuProcFunctionSwitchesh+0xb8>
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<2; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    58b0:	02 e0       	ldi	r16, 0x02	; 2
    58b2:	01 c0       	rjmp	.+2      	; 0x58b6 <_Z24menuProcFunctionSwitchesh+0xb0>
    58b4:	00 e0       	ldi	r16, 0x00	; 0
      uint8_t active = (attr && (s_editMode || p1valdiff));
    58b6:	bb 24       	eor	r11, r11
    58b8:	05 c0       	rjmp	.+10     	; 0x58c4 <_Z24menuProcFunctionSwitchesh+0xbe>
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<2; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    58ba:	01 e0       	ldi	r16, 0x01	; 1
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <_Z24menuProcFunctionSwitchesh+0xba>
    58be:	02 e0       	ldi	r16, 0x02	; 2
      uint8_t active = (attr && (s_editMode || p1valdiff));
    58c0:	bb 24       	eor	r11, r11
    58c2:	b3 94       	inc	r11
      switch (j) {
    58c4:	11 30       	cpi	r17, 0x01	; 1
    58c6:	81 f0       	breq	.+32     	; 0x58e8 <_Z24menuProcFunctionSwitchesh+0xe2>
        case 0:
          putsSwitches(1*FW, y, sd->swtch, attr);
    58c8:	86 e0       	ldi	r24, 0x06	; 6
    58ca:	6c 2d       	mov	r22, r12
    58cc:	48 81       	ld	r20, Y
    58ce:	20 2f       	mov	r18, r16
    58d0:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
          if (active) {
    58d4:	bb 20       	and	r11, r11
    58d6:	41 f1       	breq	.+80     	; 0x5928 <_Z24menuProcFunctionSwitchesh+0x122>
            CHECK_INCDEC_MODELVAR( event, sd->swtch, -MAX_SWITCH, MAX_SWITCH);
    58d8:	8a 2d       	mov	r24, r10
    58da:	68 81       	ld	r22, Y
    58dc:	4a ee       	ldi	r20, 0xEA	; 234
    58de:	26 e1       	ldi	r18, 0x16	; 22
    58e0:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    58e4:	88 83       	st	Y, r24
    58e6:	20 c0       	rjmp	.+64     	; 0x5928 <_Z24menuProcFunctionSwitchesh+0x122>
          }
          break;
        case 1:
          if (sd->swtch) {
    58e8:	88 81       	ld	r24, Y
    58ea:	88 23       	and	r24, r24
    58ec:	c9 f0       	breq	.+50     	; 0x5920 <_Z24menuProcFunctionSwitchesh+0x11a>
            lcd_putsnAtt(5*FW, y, PSTR(FSWITCH_STR)+FSW_LEN_FUNC*sd->func, FSW_LEN_FUNC, attr);
    58ee:	f7 01       	movw	r30, r14
    58f0:	40 81       	ld	r20, Z
    58f2:	fe e0       	ldi	r31, 0x0E	; 14
    58f4:	4f 9f       	mul	r20, r31
    58f6:	a0 01       	movw	r20, r0
    58f8:	11 24       	eor	r1, r1
    58fa:	4c 5d       	subi	r20, 0xDC	; 220
    58fc:	5c 4f       	sbci	r21, 0xFC	; 252
    58fe:	8e e1       	ldi	r24, 0x1E	; 30
    5900:	6c 2d       	mov	r22, r12
    5902:	2e e0       	ldi	r18, 0x0E	; 14
    5904:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
            if (active) {
    5908:	bb 20       	and	r11, r11
    590a:	71 f0       	breq	.+28     	; 0x5928 <_Z24menuProcFunctionSwitchesh+0x122>
              CHECK_INCDEC_MODELVAR( event, sd->func, 0, FUNC_LAST);
    590c:	8a 2d       	mov	r24, r10
    590e:	f7 01       	movw	r30, r14
    5910:	60 81       	ld	r22, Z
    5912:	40 e0       	ldi	r20, 0x00	; 0
    5914:	27 e0       	ldi	r18, 0x07	; 7
    5916:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    591a:	f7 01       	movw	r30, r14
    591c:	80 83       	st	Z, r24
    591e:	04 c0       	rjmp	.+8      	; 0x5928 <_Z24menuProcFunctionSwitchesh+0x122>
            }
          }
          else if (attr) {
    5920:	00 23       	and	r16, r16
    5922:	11 f0       	breq	.+4      	; 0x5928 <_Z24menuProcFunctionSwitchesh+0x122>
            m_posHorz = 0;
    5924:	10 92 4c 19 	sts	0x194C, r1
  for(uint8_t i=0; i<7; i++) {
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CHNOUT) break;
    FuncSwData *sd = &g_model.funcSw[k];
    for (uint8_t j=0; j<2; j++) {
    5928:	1f 5f       	subi	r17, 0xFF	; 255
    592a:	12 30       	cpi	r17, 0x02	; 2
    592c:	09 f0       	breq	.+2      	; 0x5930 <_Z24menuProcFunctionSwitchesh+0x12a>
    592e:	af cf       	rjmp	.-162    	; 0x588e <_Z24menuProcFunctionSwitchesh+0x88>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++) {
    5930:	d3 94       	inc	r13
    5932:	f8 e0       	ldi	r31, 0x08	; 8
    5934:	cf 0e       	add	r12, r31
    5936:	8d 2d       	mov	r24, r13
    5938:	87 30       	cpi	r24, 0x07	; 7
    593a:	09 f0       	breq	.+2      	; 0x593e <_Z24menuProcFunctionSwitchesh+0x138>
    593c:	93 cf       	rjmp	.-218    	; 0x5864 <_Z24menuProcFunctionSwitchesh+0x5e>
          }
          break;
      }
    }
  }
}
    593e:	df 91       	pop	r29
    5940:	cf 91       	pop	r28
    5942:	1f 91       	pop	r17
    5944:	0f 91       	pop	r16
    5946:	ff 90       	pop	r15
    5948:	ef 90       	pop	r14
    594a:	df 90       	pop	r13
    594c:	cf 90       	pop	r12
    594e:	bf 90       	pop	r11
    5950:	af 90       	pop	r10
    5952:	9f 90       	pop	r9
    5954:	8f 90       	pop	r8
    5956:	7f 90       	pop	r7
    5958:	6f 90       	pop	r6
    595a:	08 95       	ret

0000595c <_Z22menuProcCustomSwitchesh>:

  if(!m) s_pgOfs++;
}

void menuProcCustomSwitches(uint8_t event)
{
    595c:	af 92       	push	r10
    595e:	bf 92       	push	r11
    5960:	cf 92       	push	r12
    5962:	df 92       	push	r13
    5964:	ef 92       	push	r14
    5966:	ff 92       	push	r15
    5968:	0f 93       	push	r16
    596a:	1f 93       	push	r17
    596c:	cf 93       	push	r28
    596e:	df 93       	push	r29
    5970:	d8 2e       	mov	r13, r24
  MENU("CUSTOM SWITCHES", menuTabModel, e_CustomSwitches, NUM_CSW+1, {0, 2/*repeated...*/});
    5972:	80 e0       	ldi	r24, 0x00	; 0
    5974:	60 e0       	ldi	r22, 0x00	; 0
    5976:	49 e0       	ldi	r20, 0x09	; 9
    5978:	54 e0       	ldi	r21, 0x04	; 4
    597a:	22 e0       	ldi	r18, 0x02	; 2
    597c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    5980:	8d 2d       	mov	r24, r13
    5982:	67 e0       	ldi	r22, 0x07	; 7
    5984:	47 ea       	ldi	r20, 0xA7	; 167
    5986:	56 e0       	ldi	r21, 0x06	; 6
    5988:	2c e0       	ldi	r18, 0x0C	; 12
    598a:	0f ec       	ldi	r16, 0xCF	; 207
    598c:	16 e0       	ldi	r17, 0x06	; 6
    598e:	ee 24       	eor	r14, r14
    5990:	e3 94       	inc	r14
    5992:	bc e0       	ldi	r27, 0x0C	; 12
    5994:	cb 2e       	mov	r12, r27
    5996:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    599a:	88 23       	and	r24, r24
    599c:	09 f4       	brne	.+2      	; 0x59a0 <_Z22menuProcCustomSwitchesh+0x44>
    599e:	5d c1       	rjmp	.+698    	; 0x5c5a <_Z22menuProcCustomSwitchesh+0x2fe>

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;
    59a0:	a0 90 4b 19 	lds	r10, 0x194B
    59a4:	aa 94       	dec	r10
    59a6:	18 e0       	ldi	r17, 0x08	; 8

  for(uint8_t i=0; i<7; i++){
    59a8:	cc 24       	eor	r12, r12
    y=(i+1)*FH;
    k=i+s_pgOfs;
    if(k==NUM_CSW) break;
    uint8_t attr = (sub==k ? (s_editMode ? BLINK : INVERS)  : 0);
    59aa:	bb 24       	eor	r11, r11
    59ac:	a7 fc       	sbrc	r10, 7
    59ae:	b0 94       	com	r11
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++){
    y=(i+1)*FH;
    k=i+s_pgOfs;
    59b0:	d0 91 15 19 	lds	r29, 0x1915
    59b4:	dc 0d       	add	r29, r12
    if(k==NUM_CSW) break;
    59b6:	dc 30       	cpi	r29, 0x0C	; 12
    59b8:	09 f4       	brne	.+2      	; 0x59bc <_Z22menuProcCustomSwitchesh+0x60>
    59ba:	4f c1       	rjmp	.+670    	; 0x5c5a <_Z22menuProcCustomSwitchesh+0x2fe>
    uint8_t attr = (sub==k ? (s_editMode ? BLINK : INVERS)  : 0);
    59bc:	ed 2e       	mov	r14, r29
    59be:	ff 24       	eor	r15, r15
    59c0:	ae 14       	cp	r10, r14
    59c2:	bf 04       	cpc	r11, r15
    59c4:	31 f4       	brne	.+12     	; 0x59d2 <_Z22menuProcCustomSwitchesh+0x76>
    59c6:	80 91 16 19 	lds	r24, 0x1916
    59ca:	88 23       	and	r24, r24
    59cc:	21 f0       	breq	.+8      	; 0x59d6 <_Z22menuProcCustomSwitchesh+0x7a>
    59ce:	c1 e0       	ldi	r28, 0x01	; 1
    59d0:	03 c0       	rjmp	.+6      	; 0x59d8 <_Z22menuProcCustomSwitchesh+0x7c>
    59d2:	c0 e0       	ldi	r28, 0x00	; 0
    59d4:	01 c0       	rjmp	.+2      	; 0x59d8 <_Z22menuProcCustomSwitchesh+0x7c>
    59d6:	c2 e0       	ldi	r28, 0x02	; 2
    CustomSwData &cs = g_model.customSw[k];

    //write SW names here
    lcd_putsnAtt( 0*FW , y, PSTR("SW"),2,0);
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    59da:	61 2f       	mov	r22, r17
    59dc:	46 e0       	ldi	r20, 0x06	; 6
    59de:	54 e0       	ldi	r21, 0x04	; 4
    59e0:	22 e0       	ldi	r18, 0x02	; 2
    59e2:	00 e0       	ldi	r16, 0x00	; 0
    59e4:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    lcd_putc(  2*FW, y, k + (k>8 ? 'A'-9: '1'));
    59e8:	d9 30       	cpi	r29, 0x09	; 9
    59ea:	10 f0       	brcs	.+4      	; 0x59f0 <_Z22menuProcCustomSwitchesh+0x94>
    59ec:	48 e3       	ldi	r20, 0x38	; 56
    59ee:	01 c0       	rjmp	.+2      	; 0x59f2 <_Z22menuProcCustomSwitchesh+0x96>
    59f0:	41 e3       	ldi	r20, 0x31	; 49
    59f2:	4d 0f       	add	r20, r29
    59f4:	8c e0       	ldi	r24, 0x0C	; 12
    59f6:	61 2f       	mov	r22, r17
    59f8:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    lcd_putsnAtt( 4*FW - 1, y, PSTR(CSWITCH_STR)+CSW_LEN_FUNC*cs.func,CSW_LEN_FUNC,m_posHorz==0 ? attr : 0);
    59fc:	f7 01       	movw	r30, r14
    59fe:	ee 0f       	add	r30, r30
    5a00:	ff 1f       	adc	r31, r31
    5a02:	ee 0d       	add	r30, r14
    5a04:	ff 1d       	adc	r31, r15
    5a06:	e7 54       	subi	r30, 0x47	; 71
    5a08:	fb 4e       	sbci	r31, 0xEB	; 235
    5a0a:	40 81       	ld	r20, Z
    5a0c:	87 e0       	ldi	r24, 0x07	; 7
    5a0e:	48 9f       	mul	r20, r24
    5a10:	a0 01       	movw	r20, r0
    5a12:	11 24       	eor	r1, r1
    5a14:	4d 55       	subi	r20, 0x5D	; 93
    5a16:	5c 4f       	sbci	r21, 0xFC	; 252
    5a18:	80 91 4c 19 	lds	r24, 0x194C
    5a1c:	88 23       	and	r24, r24
    5a1e:	11 f0       	breq	.+4      	; 0x5a24 <_Z22menuProcCustomSwitchesh+0xc8>
    5a20:	00 e0       	ldi	r16, 0x00	; 0
    5a22:	01 c0       	rjmp	.+2      	; 0x5a26 <_Z22menuProcCustomSwitchesh+0xca>
    5a24:	0c 2f       	mov	r16, r28
    5a26:	87 e1       	ldi	r24, 0x17	; 23
    5a28:	61 2f       	mov	r22, r17
    5a2a:	27 e0       	ldi	r18, 0x07	; 7
    5a2c:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>

    uint8_t cstate = CS_STATE(cs.func);
    5a30:	c7 01       	movw	r24, r14
    5a32:	88 0f       	add	r24, r24
    5a34:	99 1f       	adc	r25, r25
    5a36:	8e 0d       	add	r24, r14
    5a38:	9f 1d       	adc	r25, r15
    5a3a:	85 57       	subi	r24, 0x75	; 117
    5a3c:	9d 4e       	sbci	r25, 0xED	; 237
    5a3e:	fc 01       	movw	r30, r24
    5a40:	e2 5d       	subi	r30, 0xD2	; 210
    5a42:	fd 4f       	sbci	r31, 0xFD	; 253
    5a44:	30 81       	ld	r19, Z
    5a46:	35 30       	cpi	r19, 0x05	; 5
    5a48:	08 f4       	brcc	.+2      	; 0x5a4c <_Z22menuProcCustomSwitchesh+0xf0>
    5a4a:	f6 c0       	rjmp	.+492    	; 0x5c38 <_Z22menuProcCustomSwitchesh+0x2dc>
    5a4c:	20 91 4c 19 	lds	r18, 0x194C
    5a50:	fc 01       	movw	r30, r24
    5a52:	e4 5d       	subi	r30, 0xD4	; 212
    5a54:	fd 4f       	sbci	r31, 0xFD	; 253
    5a56:	38 30       	cpi	r19, 0x08	; 8
    5a58:	08 f4       	brcc	.+2      	; 0x5a5c <_Z22menuProcCustomSwitchesh+0x100>
    5a5a:	f9 c0       	rjmp	.+498    	; 0x5c4e <_Z22menuProcCustomSwitchesh+0x2f2>
        putsSwitches(13*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
        putsSwitches(17*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    }
    else // cstate == CS_COMP
    {
        putsChnRaw(    12*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5a5c:	40 81       	ld	r20, Z
    5a5e:	21 30       	cpi	r18, 0x01	; 1
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <_Z22menuProcCustomSwitchesh+0x108>
    5a62:	49 c0       	rjmp	.+146    	; 0x5af6 <_Z22menuProcCustomSwitchesh+0x19a>
    5a64:	20 e0       	ldi	r18, 0x00	; 0
    5a66:	48 c0       	rjmp	.+144    	; 0x5af8 <_Z22menuProcCustomSwitchesh+0x19c>

    uint8_t cstate = CS_STATE(cs.func);

    if(cstate == CS_VOFS)
    {
        putsChnRaw(    12*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5a68:	2c 2f       	mov	r18, r28
    5a6a:	88 e4       	ldi	r24, 0x48	; 72
    5a6c:	61 2f       	mov	r22, r17
    5a6e:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
#if defined(FRSKY)
        if (cs.v1 > NUM_XCHNRAW-NUM_TELEMETRY)
    5a72:	c7 01       	movw	r24, r14
    5a74:	88 0f       	add	r24, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	8e 0d       	add	r24, r14
    5a7a:	9f 1d       	adc	r25, r15
    5a7c:	85 57       	subi	r24, 0x75	; 117
    5a7e:	9d 4e       	sbci	r25, 0xED	; 237
    5a80:	fc 01       	movw	r30, r24
    5a82:	e4 5d       	subi	r30, 0xD4	; 212
    5a84:	fd 4f       	sbci	r31, 0xFD	; 253
    5a86:	30 81       	ld	r19, Z
    5a88:	20 91 4c 19 	lds	r18, 0x194C
    5a8c:	fc 01       	movw	r30, r24
    5a8e:	e3 5d       	subi	r30, 0xD3	; 211
    5a90:	fd 4f       	sbci	r31, 0xFD	; 253
    5a92:	35 32       	cpi	r19, 0x25	; 37
    5a94:	3c f0       	brlt	.+14     	; 0x5aa4 <_Z22menuProcCustomSwitchesh+0x148>
          lcd_outdezAtt( 20*FW, y, 125+cs.v2  ,m_posHorz==2 ? attr : 0);
    5a96:	40 81       	ld	r20, Z
    5a98:	55 27       	eor	r21, r21
    5a9a:	47 fd       	sbrc	r20, 7
    5a9c:	50 95       	com	r21
    5a9e:	43 58       	subi	r20, 0x83	; 131
    5aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa2:	04 c0       	rjmp	.+8      	; 0x5aac <_Z22menuProcCustomSwitchesh+0x150>
        else
#endif
        lcd_outdezAtt( 20*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    5aa4:	40 81       	ld	r20, Z
    5aa6:	55 27       	eor	r21, r21
    5aa8:	47 fd       	sbrc	r20, 7
    5aaa:	50 95       	com	r21
    5aac:	22 30       	cpi	r18, 0x02	; 2
    5aae:	11 f0       	breq	.+4      	; 0x5ab4 <_Z22menuProcCustomSwitchesh+0x158>
    5ab0:	20 e0       	ldi	r18, 0x00	; 0
    5ab2:	01 c0       	rjmp	.+2      	; 0x5ab6 <_Z22menuProcCustomSwitchesh+0x15a>
    5ab4:	2c 2f       	mov	r18, r28
    5ab6:	88 e7       	ldi	r24, 0x78	; 120
    5ab8:	61 2f       	mov	r22, r17
    5aba:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    //write SW names here
    lcd_putsnAtt( 0*FW , y, PSTR("SW"),2,0);
    lcd_putc(  2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsnAtt( 4*FW - 1, y, PSTR(CSWITCH_STR)+CSW_LEN_FUNC*cs.func,CSW_LEN_FUNC,m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    5abe:	00 e0       	ldi	r16, 0x00	; 0
    5ac0:	33 c0       	rjmp	.+102    	; 0x5b28 <_Z22menuProcCustomSwitchesh+0x1cc>
#endif
        lcd_outdezAtt( 20*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    }
    else if(cstate == CS_VBOOL)
    {
        putsSwitches(13*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5ac2:	2c 2f       	mov	r18, r28
    5ac4:	8e e4       	ldi	r24, 0x4E	; 78
    5ac6:	61 2f       	mov	r22, r17
    5ac8:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
        putsSwitches(17*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    5acc:	f7 01       	movw	r30, r14
    5ace:	ee 0f       	add	r30, r30
    5ad0:	ff 1f       	adc	r31, r31
    5ad2:	ee 0d       	add	r30, r14
    5ad4:	ff 1d       	adc	r31, r15
    5ad6:	e8 54       	subi	r30, 0x48	; 72
    5ad8:	fb 4e       	sbci	r31, 0xEB	; 235
    5ada:	40 81       	ld	r20, Z
    5adc:	80 91 4c 19 	lds	r24, 0x194C
    5ae0:	82 30       	cpi	r24, 0x02	; 2
    5ae2:	11 f0       	breq	.+4      	; 0x5ae8 <_Z22menuProcCustomSwitchesh+0x18c>
    5ae4:	20 e0       	ldi	r18, 0x00	; 0
    5ae6:	01 c0       	rjmp	.+2      	; 0x5aea <_Z22menuProcCustomSwitchesh+0x18e>
    5ae8:	2c 2f       	mov	r18, r28
    5aea:	86 e6       	ldi	r24, 0x66	; 102
    5aec:	61 2f       	mov	r22, r17
    5aee:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    //write SW names here
    lcd_putsnAtt( 0*FW , y, PSTR("SW"),2,0);
    lcd_putc(  2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsnAtt( 4*FW - 1, y, PSTR(CSWITCH_STR)+CSW_LEN_FUNC*cs.func,CSW_LEN_FUNC,m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    5af2:	01 e0       	ldi	r16, 0x01	; 1
    5af4:	19 c0       	rjmp	.+50     	; 0x5b28 <_Z22menuProcCustomSwitchesh+0x1cc>
        putsSwitches(13*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
        putsSwitches(17*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    }
    else // cstate == CS_COMP
    {
        putsChnRaw(    12*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5af6:	2c 2f       	mov	r18, r28
    5af8:	88 e4       	ldi	r24, 0x48	; 72
    5afa:	61 2f       	mov	r22, r17
    5afc:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
        putsChnRaw(    17*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    5b00:	f7 01       	movw	r30, r14
    5b02:	ee 0f       	add	r30, r30
    5b04:	ff 1f       	adc	r31, r31
    5b06:	ee 0d       	add	r30, r14
    5b08:	ff 1d       	adc	r31, r15
    5b0a:	e8 54       	subi	r30, 0x48	; 72
    5b0c:	fb 4e       	sbci	r31, 0xEB	; 235
    5b0e:	40 81       	ld	r20, Z
    5b10:	80 91 4c 19 	lds	r24, 0x194C
    5b14:	82 30       	cpi	r24, 0x02	; 2
    5b16:	11 f0       	breq	.+4      	; 0x5b1c <_Z22menuProcCustomSwitchesh+0x1c0>
    5b18:	20 e0       	ldi	r18, 0x00	; 0
    5b1a:	01 c0       	rjmp	.+2      	; 0x5b1e <_Z22menuProcCustomSwitchesh+0x1c2>
    5b1c:	2c 2f       	mov	r18, r28
    5b1e:	86 e6       	ldi	r24, 0x66	; 102
    5b20:	61 2f       	mov	r22, r17
    5b22:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
    //write SW names here
    lcd_putsnAtt( 0*FW , y, PSTR("SW"),2,0);
    lcd_putc(  2*FW, y, k + (k>8 ? 'A'-9: '1'));
    lcd_putsnAtt( 4*FW - 1, y, PSTR(CSWITCH_STR)+CSW_LEN_FUNC*cs.func,CSW_LEN_FUNC,m_posHorz==0 ? attr : 0);

    uint8_t cstate = CS_STATE(cs.func);
    5b26:	02 e0       	ldi	r16, 0x02	; 2
    {
        putsChnRaw(    12*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
        putsChnRaw(    17*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    }

    if((s_editMode || p1valdiff) && attr)
    5b28:	80 91 16 19 	lds	r24, 0x1916
    5b2c:	88 23       	and	r24, r24
    5b2e:	39 f4       	brne	.+14     	; 0x5b3e <_Z22menuProcCustomSwitchesh+0x1e2>
    5b30:	80 91 39 19 	lds	r24, 0x1939
    5b34:	90 91 3a 19 	lds	r25, 0x193A
    5b38:	00 97       	sbiw	r24, 0x00	; 0
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <_Z22menuProcCustomSwitchesh+0x1e2>
    5b3c:	76 c0       	rjmp	.+236    	; 0x5c2a <_Z22menuProcCustomSwitchesh+0x2ce>
    5b3e:	cc 23       	and	r28, r28
    5b40:	09 f4       	brne	.+2      	; 0x5b44 <_Z22menuProcCustomSwitchesh+0x1e8>
    5b42:	73 c0       	rjmp	.+230    	; 0x5c2a <_Z22menuProcCustomSwitchesh+0x2ce>
      switch (m_posHorz) {
    5b44:	80 91 4c 19 	lds	r24, 0x194C
    5b48:	81 30       	cpi	r24, 0x01	; 1
    5b4a:	b1 f1       	breq	.+108    	; 0x5bb8 <_Z22menuProcCustomSwitchesh+0x25c>
    5b4c:	81 30       	cpi	r24, 0x01	; 1
    5b4e:	20 f0       	brcs	.+8      	; 0x5b58 <_Z22menuProcCustomSwitchesh+0x1fc>
    5b50:	82 30       	cpi	r24, 0x02	; 2
    5b52:	09 f0       	breq	.+2      	; 0x5b56 <_Z22menuProcCustomSwitchesh+0x1fa>
    5b54:	6a c0       	rjmp	.+212    	; 0x5c2a <_Z22menuProcCustomSwitchesh+0x2ce>
    5b56:	42 c0       	rjmp	.+132    	; 0x5bdc <_Z22menuProcCustomSwitchesh+0x280>
        case 0:
          CHECK_INCDEC_MODELVAR( event, cs.func, 0,CS_MAXF);
    5b58:	e7 01       	movw	r28, r14
    5b5a:	cc 0f       	add	r28, r28
    5b5c:	dd 1f       	adc	r29, r29
    5b5e:	ce 0d       	add	r28, r14
    5b60:	df 1d       	adc	r29, r15
    5b62:	c7 54       	subi	r28, 0x47	; 71
    5b64:	db 4e       	sbci	r29, 0xEB	; 235
    5b66:	8d 2d       	mov	r24, r13
    5b68:	68 81       	ld	r22, Y
    5b6a:	40 e0       	ldi	r20, 0x00	; 0
    5b6c:	2d e0       	ldi	r18, 0x0D	; 13
    5b6e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    5b72:	88 83       	st	Y, r24
          if(cstate != CS_STATE(cs.func))
    5b74:	20 2f       	mov	r18, r16
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	85 30       	cpi	r24, 0x05	; 5
    5b7a:	28 f0       	brcs	.+10     	; 0x5b86 <_Z22menuProcCustomSwitchesh+0x22a>
    5b7c:	88 30       	cpi	r24, 0x08	; 8
    5b7e:	30 f4       	brcc	.+12     	; 0x5b8c <_Z22menuProcCustomSwitchesh+0x230>
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	90 e0       	ldi	r25, 0x00	; 0
    5b84:	05 c0       	rjmp	.+10     	; 0x5b90 <_Z22menuProcCustomSwitchesh+0x234>
    5b86:	80 e0       	ldi	r24, 0x00	; 0
    5b88:	90 e0       	ldi	r25, 0x00	; 0
    5b8a:	02 c0       	rjmp	.+4      	; 0x5b90 <_Z22menuProcCustomSwitchesh+0x234>
    5b8c:	82 e0       	ldi	r24, 0x02	; 2
    5b8e:	90 e0       	ldi	r25, 0x00	; 0
    5b90:	28 17       	cp	r18, r24
    5b92:	39 07       	cpc	r19, r25
    5b94:	09 f4       	brne	.+2      	; 0x5b98 <_Z22menuProcCustomSwitchesh+0x23c>
    5b96:	49 c0       	rjmp	.+146    	; 0x5c2a <_Z22menuProcCustomSwitchesh+0x2ce>
          {
              cs.v1  = 0;
    5b98:	c7 01       	movw	r24, r14
    5b9a:	88 0f       	add	r24, r24
    5b9c:	99 1f       	adc	r25, r25
    5b9e:	8e 0d       	add	r24, r14
    5ba0:	9f 1d       	adc	r25, r15
    5ba2:	85 57       	subi	r24, 0x75	; 117
    5ba4:	9d 4e       	sbci	r25, 0xED	; 237
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	e4 5d       	subi	r30, 0xD4	; 212
    5baa:	fd 4f       	sbci	r31, 0xFD	; 253
    5bac:	10 82       	st	Z, r1
              cs.v2 = 0;
    5bae:	83 5d       	subi	r24, 0xD3	; 211
    5bb0:	9d 4f       	sbci	r25, 0xFD	; 253
    5bb2:	fc 01       	movw	r30, r24
    5bb4:	10 82       	st	Z, r1
    5bb6:	39 c0       	rjmp	.+114    	; 0x5c2a <_Z22menuProcCustomSwitchesh+0x2ce>
          }
          break;
        case 1:
          switch (cstate) {
    5bb8:	01 30       	cpi	r16, 0x01	; 1
    5bba:	41 f0       	breq	.+16     	; 0x5bcc <_Z22menuProcCustomSwitchesh+0x270>
    5bbc:	e7 01       	movw	r28, r14
    5bbe:	cc 0f       	add	r28, r28
    5bc0:	dd 1f       	adc	r29, r29
              break;
          case (CS_VBOOL):
              CHECK_INCDEC_MODELVAR( event, cs.v1, -MAX_SWITCH,MAX_SWITCH);
              break;
          case (CS_VCOMP):
              CHECK_INCDEC_MODELVAR( event, cs.v1, 0,NUM_XCHNRAW);
    5bc2:	ce 0d       	add	r28, r14
    5bc4:	df 1d       	adc	r29, r15
    5bc6:	c9 54       	subi	r28, 0x49	; 73
    5bc8:	db 4e       	sbci	r29, 0xEB	; 235
    5bca:	28 c0       	rjmp	.+80     	; 0x5c1c <_Z22menuProcCustomSwitchesh+0x2c0>
          switch (cstate) {
          case (CS_VOFS):
              CHECK_INCDEC_MODELVAR( event, cs.v1, 0,NUM_XCHNRAW);
              break;
          case (CS_VBOOL):
              CHECK_INCDEC_MODELVAR( event, cs.v1, -MAX_SWITCH,MAX_SWITCH);
    5bcc:	e7 01       	movw	r28, r14
    5bce:	cc 0f       	add	r28, r28
    5bd0:	dd 1f       	adc	r29, r29
    5bd2:	ce 0d       	add	r28, r14
    5bd4:	df 1d       	adc	r29, r15
    5bd6:	c9 54       	subi	r28, 0x49	; 73
    5bd8:	db 4e       	sbci	r29, 0xEB	; 235
    5bda:	17 c0       	rjmp	.+46     	; 0x5c0a <_Z22menuProcCustomSwitchesh+0x2ae>
          default:
              break;
          }
          break;
        case 2:
          switch (cstate) {
    5bdc:	01 30       	cpi	r16, 0x01	; 1
    5bde:	71 f0       	breq	.+28     	; 0x5bfc <_Z22menuProcCustomSwitchesh+0x2a0>
    5be0:	e7 01       	movw	r28, r14
    5be2:	cc 0f       	add	r28, r28
    5be4:	dd 1f       	adc	r29, r29
    5be6:	02 30       	cpi	r16, 0x02	; 2
    5be8:	a9 f0       	breq	.+42     	; 0x5c14 <_Z22menuProcCustomSwitchesh+0x2b8>
          case (CS_VOFS):
              CHECK_INCDEC_MODELVAR( event, cs.v2, -125,125);
    5bea:	ce 0d       	add	r28, r14
    5bec:	df 1d       	adc	r29, r15
    5bee:	c8 54       	subi	r28, 0x48	; 72
    5bf0:	db 4e       	sbci	r29, 0xEB	; 235
    5bf2:	8d 2d       	mov	r24, r13
    5bf4:	68 81       	ld	r22, Y
    5bf6:	43 e8       	ldi	r20, 0x83	; 131
    5bf8:	2d e7       	ldi	r18, 0x7D	; 125
    5bfa:	14 c0       	rjmp	.+40     	; 0x5c24 <_Z22menuProcCustomSwitchesh+0x2c8>
              break;
          case (CS_VBOOL):
              CHECK_INCDEC_MODELVAR( event, cs.v2, -MAX_SWITCH,MAX_SWITCH);
    5bfc:	e7 01       	movw	r28, r14
    5bfe:	cc 0f       	add	r28, r28
    5c00:	dd 1f       	adc	r29, r29
    5c02:	ce 0d       	add	r28, r14
    5c04:	df 1d       	adc	r29, r15
    5c06:	c8 54       	subi	r28, 0x48	; 72
    5c08:	db 4e       	sbci	r29, 0xEB	; 235
    5c0a:	8d 2d       	mov	r24, r13
    5c0c:	68 81       	ld	r22, Y
    5c0e:	4a ee       	ldi	r20, 0xEA	; 234
    5c10:	26 e1       	ldi	r18, 0x16	; 22
    5c12:	08 c0       	rjmp	.+16     	; 0x5c24 <_Z22menuProcCustomSwitchesh+0x2c8>
              break;
          case (CS_VCOMP):
              CHECK_INCDEC_MODELVAR( event, cs.v2, 0,NUM_XCHNRAW);
    5c14:	ce 0d       	add	r28, r14
    5c16:	df 1d       	adc	r29, r15
    5c18:	c8 54       	subi	r28, 0x48	; 72
    5c1a:	db 4e       	sbci	r29, 0xEB	; 235
    5c1c:	8d 2d       	mov	r24, r13
    5c1e:	68 81       	ld	r22, Y
    5c20:	40 e0       	ldi	r20, 0x00	; 0
    5c22:	26 e2       	ldi	r18, 0x26	; 38
    5c24:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    5c28:	88 83       	st	Y, r24

  uint8_t y = 0;
  uint8_t k = 0;
  int8_t  sub    = m_posVert - 1;

  for(uint8_t i=0; i<7; i++){
    5c2a:	c3 94       	inc	r12
    5c2c:	18 5f       	subi	r17, 0xF8	; 248
    5c2e:	fc 2d       	mov	r31, r12
    5c30:	f7 30       	cpi	r31, 0x07	; 7
    5c32:	09 f0       	breq	.+2      	; 0x5c36 <_Z22menuProcCustomSwitchesh+0x2da>
    5c34:	bd ce       	rjmp	.-646    	; 0x59b0 <_Z22menuProcCustomSwitchesh+0x54>
    5c36:	11 c0       	rjmp	.+34     	; 0x5c5a <_Z22menuProcCustomSwitchesh+0x2fe>

    uint8_t cstate = CS_STATE(cs.func);

    if(cstate == CS_VOFS)
    {
        putsChnRaw(    12*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5c38:	84 5d       	subi	r24, 0xD4	; 212
    5c3a:	9d 4f       	sbci	r25, 0xFD	; 253
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	40 81       	ld	r20, Z
    5c40:	80 91 4c 19 	lds	r24, 0x194C
    5c44:	81 30       	cpi	r24, 0x01	; 1
    5c46:	09 f4       	brne	.+2      	; 0x5c4a <_Z22menuProcCustomSwitchesh+0x2ee>
    5c48:	0f cf       	rjmp	.-482    	; 0x5a68 <_Z22menuProcCustomSwitchesh+0x10c>
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	0e cf       	rjmp	.-484    	; 0x5a6a <_Z22menuProcCustomSwitchesh+0x10e>
#endif
        lcd_outdezAtt( 20*FW, y, cs.v2  ,m_posHorz==2 ? attr : 0);
    }
    else if(cstate == CS_VBOOL)
    {
        putsSwitches(13*FW, y, cs.v1  ,m_posHorz==1 ? attr : 0);
    5c4e:	40 81       	ld	r20, Z
    5c50:	21 30       	cpi	r18, 0x01	; 1
    5c52:	09 f4       	brne	.+2      	; 0x5c56 <_Z22menuProcCustomSwitchesh+0x2fa>
    5c54:	36 cf       	rjmp	.-404    	; 0x5ac2 <_Z22menuProcCustomSwitchesh+0x166>
    5c56:	20 e0       	ldi	r18, 0x00	; 0
    5c58:	35 cf       	rjmp	.-406    	; 0x5ac4 <_Z22menuProcCustomSwitchesh+0x168>
          default:
              break;
          }
      }
  }
}
    5c5a:	df 91       	pop	r29
    5c5c:	cf 91       	pop	r28
    5c5e:	1f 91       	pop	r17
    5c60:	0f 91       	pop	r16
    5c62:	ff 90       	pop	r15
    5c64:	ef 90       	pop	r14
    5c66:	df 90       	pop	r13
    5c68:	cf 90       	pop	r12
    5c6a:	bf 90       	pop	r11
    5c6c:	af 90       	pop	r10
    5c6e:	08 95       	ret

00005c70 <_Z17menuProcCurvesAllh>:
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
    5c70:	8f 92       	push	r8
    5c72:	9f 92       	push	r9
    5c74:	af 92       	push	r10
    5c76:	bf 92       	push	r11
    5c78:	cf 92       	push	r12
    5c7a:	df 92       	push	r13
    5c7c:	ef 92       	push	r14
    5c7e:	ff 92       	push	r15
    5c80:	0f 93       	push	r16
    5c82:	1f 93       	push	r17
    5c84:	cf 93       	push	r28
    5c86:	df 93       	push	r29
    5c88:	c8 2f       	mov	r28, r24
  SIMPLE_MENU("CURVES", menuTabModel, e_CurvesAll, 1+MAX_CURVE5+MAX_CURVE9);
    5c8a:	80 e0       	ldi	r24, 0x00	; 0
    5c8c:	60 e0       	ldi	r22, 0x00	; 0
    5c8e:	4c e1       	ldi	r20, 0x1C	; 28
    5c90:	54 e0       	ldi	r21, 0x04	; 4
    5c92:	22 e0       	ldi	r18, 0x02	; 2
    5c94:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    5c98:	8c 2f       	mov	r24, r28
    5c9a:	66 e0       	ldi	r22, 0x06	; 6
    5c9c:	47 ea       	ldi	r20, 0xA7	; 167
    5c9e:	56 e0       	ldi	r21, 0x06	; 6
    5ca0:	2c e0       	ldi	r18, 0x0C	; 12
    5ca2:	00 e1       	ldi	r16, 0x10	; 16
    5ca4:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    5ca8:	88 23       	and	r24, r24
    5caa:	09 f4       	brne	.+2      	; 0x5cae <_Z17menuProcCurvesAllh+0x3e>
    5cac:	81 c0       	rjmp	.+258    	; 0x5db0 <_Z17menuProcCurvesAllh+0x140>

  int8_t  sub    = m_posVert - 1;
    5cae:	80 90 4b 19 	lds	r8, 0x194B
    5cb2:	8a 94       	dec	r8

  switch (event) {
    5cb4:	c0 36       	cpi	r28, 0x60	; 96
    5cb6:	11 f0       	breq	.+4      	; 0x5cbc <_Z17menuProcCurvesAllh+0x4c>
    5cb8:	c4 36       	cpi	r28, 0x64	; 100
    5cba:	41 f4       	brne	.+16     	; 0x5ccc <_Z17menuProcCurvesAllh+0x5c>
    case EVT_KEY_FIRST(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0) {
    5cbc:	87 fc       	sbrc	r8, 7
    5cbe:	06 c0       	rjmp	.+12     	; 0x5ccc <_Z17menuProcCurvesAllh+0x5c>
        s_curveChan = sub;
    5cc0:	80 92 56 19 	sts	0x1956, r8
        pushMenu(menuProcCurveOne);
    5cc4:	83 e2       	ldi	r24, 0x23	; 35
    5cc6:	9d e3       	ldi	r25, 0x3D	; 61
    5cc8:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
    }
  }
}

void menuProcCurvesAll(uint8_t event)
{
    5ccc:	cc 24       	eor	r12, r12
    5cce:	aa 24       	eor	r10, r10
    5cd0:	dd 24       	eor	r13, r13
    5cd2:	d3 94       	inc	r13
    5cd4:	18 e0       	ldi	r17, 0x08	; 8
  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
    uint8_t attr = sub == k ? INVERS : 0;
    5cd6:	99 24       	eor	r9, r9
    5cd8:	87 fc       	sbrc	r8, 7
    5cda:	90 94       	com	r9

  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
    5cdc:	20 91 15 19 	lds	r18, 0x1915
    5ce0:	2c 0d       	add	r18, r12
    uint8_t attr = sub == k ? INVERS : 0;
    5ce2:	e2 2e       	mov	r14, r18
    5ce4:	ff 24       	eor	r15, r15
    5ce6:	8e 14       	cp	r8, r14
    5ce8:	9f 04       	cpc	r9, r15
    5cea:	11 f4       	brne	.+4      	; 0x5cf0 <_Z17menuProcCurvesAllh+0x80>
    5cec:	02 e0       	ldi	r16, 0x02	; 2
    5cee:	01 c0       	rjmp	.+2      	; 0x5cf2 <_Z17menuProcCurvesAllh+0x82>
    5cf0:	00 e0       	ldi	r16, 0x00	; 0
    bool    cv9 = k >= MAX_CURVE5;
    5cf2:	bb 24       	eor	r11, r11
    5cf4:	b3 94       	inc	r11
    5cf6:	28 30       	cpi	r18, 0x08	; 8
    5cf8:	28 f4       	brcc	.+10     	; 0x5d04 <_Z17menuProcCurvesAllh+0x94>
    5cfa:	bb 24       	eor	r11, r11

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    5cfc:	8d 2d       	mov	r24, r13
    5cfe:	88 30       	cpi	r24, 0x08	; 8
    5d00:	28 f0       	brcs	.+10     	; 0x5d0c <_Z17menuProcCurvesAllh+0x9c>
    5d02:	4f c0       	rjmp	.+158    	; 0x5da2 <_Z17menuProcCurvesAllh+0x132>
  for (uint8_t i = 0; i < 7; i++) {
    uint8_t k = i + s_pgOfs;
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
    5d04:	ed 2d       	mov	r30, r13
    5d06:	e7 30       	cpi	r30, 0x07	; 7
    5d08:	08 f0       	brcs	.+2      	; 0x5d0c <_Z17menuProcCurvesAllh+0x9c>
    5d0a:	4b c0       	rjmp	.+150    	; 0x5da2 <_Z17menuProcCurvesAllh+0x132>
    if(yd>7) break;
    if(!m) m = attr;
    5d0c:	aa 20       	and	r10, r10
    5d0e:	09 f4       	brne	.+2      	; 0x5d12 <_Z17menuProcCurvesAllh+0xa2>
    5d10:	a0 2e       	mov	r10, r16
    putsStrIdx(0, y, PSTR("CV"), k+1, attr);
    5d12:	2f 5f       	subi	r18, 0xFF	; 255
    5d14:	80 e0       	ldi	r24, 0x00	; 0
    5d16:	61 2f       	mov	r22, r17
    5d18:	49 e1       	ldi	r20, 0x19	; 25
    5d1a:	54 e0       	ldi	r21, 0x04	; 4
    5d1c:	0e 94 1c 6b 	call	0xd638	; 0xd638 <_Z10putsStrIdxhhPKchh>
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    5d20:	bb 20       	and	r11, r11
    5d22:	69 f0       	breq	.+26     	; 0x5d3e <_Z17menuProcCurvesAllh+0xce>
    5d24:	c7 01       	movw	r24, r14
    5d26:	08 97       	sbiw	r24, 0x08	; 8
    5d28:	ec 01       	movw	r28, r24
    5d2a:	23 e0       	ldi	r18, 0x03	; 3
    5d2c:	cc 0f       	add	r28, r28
    5d2e:	dd 1f       	adc	r29, r29
    5d30:	2a 95       	dec	r18
    5d32:	e1 f7       	brne	.-8      	; 0x5d2c <_Z17menuProcCurvesAllh+0xbc>
    5d34:	c8 0f       	add	r28, r24
    5d36:	d9 1f       	adc	r29, r25
    5d38:	c1 59       	subi	r28, 0x91	; 145
    5d3a:	db 4e       	sbci	r29, 0xEB	; 235
    5d3c:	09 c0       	rjmp	.+18     	; 0x5d50 <_Z17menuProcCurvesAllh+0xe0>
    5d3e:	e7 01       	movw	r28, r14
    5d40:	cc 0f       	add	r28, r28
    5d42:	dd 1f       	adc	r29, r29
    5d44:	cc 0f       	add	r28, r28
    5d46:	dd 1f       	adc	r29, r29
    5d48:	ce 0d       	add	r28, r14
    5d4a:	df 1d       	adc	r29, r15
    5d4c:	c9 5b       	subi	r28, 0xB9	; 185
    5d4e:	db 4e       	sbci	r29, 0xEB	; 235
    5d50:	7e 01       	movw	r14, r28
    uint8_t attr = sub == k ? INVERS : 0;
    bool    cv9 = k >= MAX_CURVE5;

    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
    5d52:	0c e2       	ldi	r16, 0x2C	; 44
    putsStrIdx(0, y, PSTR("CV"), k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    for (uint8_t j = 0; j < (5); j++) {
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    5d54:	f7 01       	movw	r30, r14
    5d56:	41 91       	ld	r20, Z+
    5d58:	7f 01       	movw	r14, r30
    5d5a:	55 27       	eor	r21, r21
    5d5c:	47 fd       	sbrc	r20, 7
    5d5e:	50 95       	com	r21
    5d60:	80 2f       	mov	r24, r16
    5d62:	61 2f       	mov	r22, r17
    5d64:	20 e0       	ldi	r18, 0x00	; 0
    5d66:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    5d6a:	0b 5e       	subi	r16, 0xEB	; 235
    if(cv9 && (yd>6)) break;
    if(yd>7) break;
    if(!m) m = attr;
    putsStrIdx(0, y, PSTR("CV"), k+1, attr);
    int8_t *crv = cv9 ? g_model.curves9[k-MAX_CURVE5] : g_model.curves5[k];
    for (uint8_t j = 0; j < (5); j++) {
    5d6c:	05 39       	cpi	r16, 0x95	; 149
    5d6e:	91 f7       	brne	.-28     	; 0x5d54 <_Z17menuProcCurvesAllh+0xe4>
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
    5d70:	18 5f       	subi	r17, 0xF8	; 248
    5d72:	d3 94       	inc	r13
    if(cv9){
    5d74:	bb 20       	and	r11, r11
    5d76:	81 f0       	breq	.+32     	; 0x5d98 <_Z17menuProcCurvesAllh+0x128>
      }
    }
  }
}

void menuProcCurvesAll(uint8_t event)
    5d78:	25 96       	adiw	r28, 0x05	; 5
    5d7a:	0c e2       	ldi	r16, 0x2C	; 44
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
    if(cv9){
      for (uint8_t j = 0; j < 4; j++) {
        lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j+5], 0);
    5d7c:	49 91       	ld	r20, Y+
    5d7e:	55 27       	eor	r21, r21
    5d80:	47 fd       	sbrc	r20, 7
    5d82:	50 95       	com	r21
    5d84:	80 2f       	mov	r24, r16
    5d86:	61 2f       	mov	r22, r17
    5d88:	20 e0       	ldi	r18, 0x00	; 0
    5d8a:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    5d8e:	0b 5e       	subi	r16, 0xEB	; 235
    for (uint8_t j = 0; j < (5); j++) {
      lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j], 0);
    }
    y += FH;yd++;
    if(cv9){
      for (uint8_t j = 0; j < 4; j++) {
    5d90:	00 38       	cpi	r16, 0x80	; 128
    5d92:	a1 f7       	brne	.-24     	; 0x5d7c <_Z17menuProcCurvesAllh+0x10c>
        lcd_outdezAtt( j*(3*FW+3) + 7*FW + 2, y, crv[j+5], 0);
      }
      y += FH;yd++;
    5d94:	18 5f       	subi	r17, 0xF8	; 248
    5d96:	d3 94       	inc	r13
  }

  uint8_t y    = 1*FH;
  uint8_t yd   = 1;
  uint8_t m    = 0;
  for (uint8_t i = 0; i < 7; i++) {
    5d98:	c3 94       	inc	r12
    5d9a:	fc 2d       	mov	r31, r12
    5d9c:	f7 30       	cpi	r31, 0x07	; 7
    5d9e:	09 f0       	breq	.+2      	; 0x5da2 <_Z17menuProcCurvesAllh+0x132>
    5da0:	9d cf       	rjmp	.-198    	; 0x5cdc <_Z17menuProcCurvesAllh+0x6c>
      }
      y += FH;yd++;
    }
  }

  if(!m) s_pgOfs++;
    5da2:	aa 20       	and	r10, r10
    5da4:	29 f4       	brne	.+10     	; 0x5db0 <_Z17menuProcCurvesAllh+0x140>
    5da6:	80 91 15 19 	lds	r24, 0x1915
    5daa:	8f 5f       	subi	r24, 0xFF	; 255
    5dac:	80 93 15 19 	sts	0x1915, r24
}
    5db0:	df 91       	pop	r29
    5db2:	cf 91       	pop	r28
    5db4:	1f 91       	pop	r17
    5db6:	0f 91       	pop	r16
    5db8:	ff 90       	pop	r15
    5dba:	ef 90       	pop	r14
    5dbc:	df 90       	pop	r13
    5dbe:	cf 90       	pop	r12
    5dc0:	bf 90       	pop	r11
    5dc2:	af 90       	pop	r10
    5dc4:	9f 90       	pop	r9
    5dc6:	8f 90       	pop	r8
    5dc8:	08 95       	ret

00005dca <_Z14menuProcLimitsh>:
{
  return menuProcExpoMix(0, event);
}

void menuProcLimits(uint8_t event)
{
    5dca:	4f 92       	push	r4
    5dcc:	5f 92       	push	r5
    5dce:	6f 92       	push	r6
    5dd0:	7f 92       	push	r7
    5dd2:	8f 92       	push	r8
    5dd4:	9f 92       	push	r9
    5dd6:	af 92       	push	r10
    5dd8:	bf 92       	push	r11
    5dda:	cf 92       	push	r12
    5ddc:	df 92       	push	r13
    5dde:	ef 92       	push	r14
    5de0:	ff 92       	push	r15
    5de2:	0f 93       	push	r16
    5de4:	1f 93       	push	r17
    5de6:	cf 93       	push	r28
    5de8:	df 93       	push	r29
    5dea:	f8 2e       	mov	r15, r24
  MENU("LIMITS", menuTabModel, e_Limits, NUM_CHNOUT+2, {0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3/*, 0*/});
    5dec:	80 e0       	ldi	r24, 0x00	; 0
    5dee:	60 e0       	ldi	r22, 0x00	; 0
    5df0:	4b e3       	ldi	r20, 0x3B	; 59
    5df2:	54 e0       	ldi	r21, 0x04	; 4
    5df4:	22 e0       	ldi	r18, 0x02	; 2
    5df6:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    5dfa:	8f 2d       	mov	r24, r15
    5dfc:	65 e0       	ldi	r22, 0x05	; 5
    5dfe:	47 ea       	ldi	r20, 0xA7	; 167
    5e00:	56 e0       	ldi	r21, 0x06	; 6
    5e02:	2c e0       	ldi	r18, 0x0C	; 12
    5e04:	01 ed       	ldi	r16, 0xD1	; 209
    5e06:	16 e0       	ldi	r17, 0x06	; 6
    5e08:	e0 e1       	ldi	r30, 0x10	; 16
    5e0a:	ee 2e       	mov	r14, r30
    5e0c:	71 e1       	ldi	r23, 0x11	; 17
    5e0e:	c7 2e       	mov	r12, r23
    5e10:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    5e14:	88 23       	and	r24, r24
    5e16:	09 f4       	brne	.+2      	; 0x5e1a <_Z14menuProcLimitsh+0x50>
    5e18:	33 c1       	rjmp	.+614    	; 0x6080 <_Z14menuProcLimitsh+0x2b6>

  static bool swVal[NUM_CHNOUT];

  int8_t sub = m_posVert - 1;
    5e1a:	90 90 4b 19 	lds	r9, 0x194B
    5e1e:	9a 94       	dec	r9
    5e20:	18 e0       	ldi	r17, 0x08	; 8

  for (uint8_t i=0; i<7; i++) {
    5e22:	aa 24       	eor	r10, r10
    }

    LimitData *ld = limitaddress(k) ;
    int16_t v = (ld->revert) ? -ld->offset : ld->offset;
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    5e24:	88 24       	eor	r8, r8
    5e26:	83 94       	inc	r8
    putsChn(0,y,k+1,0);
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    for (uint8_t j=0; j<4; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5e28:	49 2c       	mov	r4, r9
    5e2a:	55 24       	eor	r5, r5
    5e2c:	47 fc       	sbrc	r4, 7
    5e2e:	50 94       	com	r5

  int8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    uint8_t y = (i+1)*FH;
    uint8_t k = i+s_pgOfs;
    5e30:	00 91 15 19 	lds	r16, 0x1915
    5e34:	0a 0d       	add	r16, r10

    if (k==NUM_CHNOUT) {
    5e36:	00 31       	cpi	r16, 0x10	; 16
    5e38:	19 f5       	brne	.+70     	; 0x5e80 <_Z14menuProcLimitsh+0xb6>
      //last line available - add the "copy trim menu" line
      uint8_t attr = (sub==NUM_CHNOUT) ? INVERS : 0;
    5e3a:	89 2d       	mov	r24, r9
    5e3c:	80 31       	cpi	r24, 0x10	; 16
    5e3e:	11 f4       	brne	.+4      	; 0x5e44 <_Z14menuProcLimitsh+0x7a>
    5e40:	c2 e0       	ldi	r28, 0x02	; 2
    5e42:	01 c0       	rjmp	.+2      	; 0x5e46 <_Z14menuProcLimitsh+0x7c>
    5e44:	c0 e0       	ldi	r28, 0x00	; 0
      lcd_putsAtt(3*FW, y, PSTR("COPY TRIM [MENU]"), s_noHi ? 0 : attr);
    5e46:	80 91 17 19 	lds	r24, 0x1917
    5e4a:	88 23       	and	r24, r24
    5e4c:	11 f0       	breq	.+4      	; 0x5e52 <_Z14menuProcLimitsh+0x88>
    5e4e:	20 e0       	ldi	r18, 0x00	; 0
    5e50:	01 c0       	rjmp	.+2      	; 0x5e54 <_Z14menuProcLimitsh+0x8a>
    5e52:	2c 2f       	mov	r18, r28
    5e54:	82 e1       	ldi	r24, 0x12	; 18
    5e56:	61 2f       	mov	r22, r17
    5e58:	4a e2       	ldi	r20, 0x2A	; 42
    5e5a:	54 e0       	ldi	r21, 0x04	; 4
    5e5c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
      if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
    5e60:	cc 23       	and	r28, r28
    5e62:	09 f4       	brne	.+2      	; 0x5e66 <_Z14menuProcLimitsh+0x9c>
    5e64:	0d c1       	rjmp	.+538    	; 0x6080 <_Z14menuProcLimitsh+0x2b6>
    5e66:	9f 2d       	mov	r25, r15
    5e68:	90 38       	cpi	r25, 0x80	; 128
    5e6a:	09 f0       	breq	.+2      	; 0x5e6e <_Z14menuProcLimitsh+0xa4>
    5e6c:	09 c1       	rjmp	.+530    	; 0x6080 <_Z14menuProcLimitsh+0x2b6>
        s_noHi = NO_HI_LEN;
    5e6e:	89 e1       	ldi	r24, 0x19	; 25
    5e70:	80 93 17 19 	sts	0x1917, r24
        killEvents(event);
    5e74:	80 e8       	ldi	r24, 0x80	; 128
    5e76:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
        moveTrimsToOffsets(); // if highlighted and menu pressed - copy trims
    5e7a:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_Z18moveTrimsToOffsetsv>
    5e7e:	00 c1       	rjmp	.+512    	; 0x6080 <_Z14menuProcLimitsh+0x2b6>
      }
      return;
    }

    LimitData *ld = limitaddress(k) ;
    5e80:	80 2f       	mov	r24, r16
    5e82:	0e 94 36 07 	call	0xe6c	; 0xe6c <_Z12limitaddressh>
    5e86:	ec 01       	movw	r28, r24
    int16_t v = (ld->revert) ? -ld->offset : ld->offset;
    5e88:	8a 81       	ldd	r24, Y+2	; 0x02
    5e8a:	6b 81       	ldd	r22, Y+3	; 0x03
    5e8c:	7c 81       	ldd	r23, Y+4	; 0x04
    5e8e:	88 23       	and	r24, r24
    5e90:	19 f0       	breq	.+6      	; 0x5e98 <_Z14menuProcLimitsh+0xce>
    5e92:	70 95       	com	r23
    5e94:	61 95       	neg	r22
    5e96:	7f 4f       	sbci	r23, 0xFF	; 255
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    5e98:	c0 2e       	mov	r12, r16
    5e9a:	dd 24       	eor	r13, r13
    5e9c:	f6 01       	movw	r30, r12
    5e9e:	ee 0f       	add	r30, r30
    5ea0:	ff 1f       	adc	r31, r31
    5ea2:	e7 5e       	subi	r30, 0xE7	; 231
    5ea4:	f6 4e       	sbci	r31, 0xE6	; 230
    5ea6:	20 81       	ld	r18, Z
    5ea8:	31 81       	ldd	r19, Z+1	; 0x01
    5eaa:	26 1b       	sub	r18, r22
    5eac:	37 0b       	sbc	r19, r23
    5eae:	23 33       	cpi	r18, 0x33	; 51
    5eb0:	31 05       	cpc	r19, r1
    5eb2:	24 f0       	brlt	.+8      	; 0x5ebc <_Z14menuProcLimitsh+0xf2>
    5eb4:	f6 01       	movw	r30, r12
    5eb6:	e9 5a       	subi	r30, 0xA9	; 169
    5eb8:	f6 4e       	sbci	r31, 0xE6	; 230
    5eba:	08 c0       	rjmp	.+16     	; 0x5ecc <_Z14menuProcLimitsh+0x102>
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    5ebc:	ef ef       	ldi	r30, 0xFF	; 255
    5ebe:	2e 3c       	cpi	r18, 0xCE	; 206
    5ec0:	3e 07       	cpc	r19, r30
    5ec2:	2c f4       	brge	.+10     	; 0x5ece <_Z14menuProcLimitsh+0x104>
    5ec4:	f6 01       	movw	r30, r12
    5ec6:	e9 5a       	subi	r30, 0xA9	; 169
    5ec8:	f6 4e       	sbci	r31, 0xE6	; 230
    5eca:	88 25       	eor	r24, r8
    5ecc:	80 83       	st	Z, r24
    putsChn(0,y,k+1,0);
    5ece:	40 2f       	mov	r20, r16
    5ed0:	4f 5f       	subi	r20, 0xFF	; 255
    5ed2:	80 e0       	ldi	r24, 0x00	; 0
    5ed4:	61 2f       	mov	r22, r17
    5ed6:	20 e0       	ldi	r18, 0x00	; 0
    5ed8:	0e 94 76 6b 	call	0xd6ec	; 0xd6ec <_Z7putsChnhhhh>
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    5edc:	f6 01       	movw	r30, r12
    5ede:	e9 5a       	subi	r30, 0xA9	; 169
    5ee0:	f6 4e       	sbci	r31, 0xE6	; 230
    5ee2:	80 81       	ld	r24, Z
    5ee4:	88 23       	and	r24, r24
    5ee6:	11 f0       	breq	.+4      	; 0x5eec <_Z14menuProcLimitsh+0x122>
    5ee8:	4f e7       	ldi	r20, 0x7F	; 127
    5eea:	01 c0       	rjmp	.+2      	; 0x5eee <_Z14menuProcLimitsh+0x124>
    5eec:	4e e7       	ldi	r20, 0x7E	; 126
    5eee:	8b e4       	ldi	r24, 0x4B	; 75
    5ef0:	61 2f       	mov	r22, r17
    5ef2:	20 e0       	ldi	r18, 0x00	; 0
    5ef4:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    for (uint8_t j=0; j<4; j++) {
    5ef8:	ee 24       	eor	r14, r14
          lcd_outdezAtt(  8*FW, y,  ld->offset, attr|PREC1);
          if (active) {
            ld->offset = checkIncDec(event, ld->offset, -1000, 1000, EE_MODEL);
          }
          else if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
            int16_t zero = g_chans512[k];
    5efa:	36 01       	movw	r6, r12
    5efc:	66 0c       	add	r6, r6
    5efe:	77 1c       	adc	r7, r7
    5f00:	89 e1       	ldi	r24, 0x19	; 25
    5f02:	99 e1       	ldi	r25, 0x19	; 25
    5f04:	68 0e       	add	r6, r24
    5f06:	79 1e       	adc	r7, r25
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    putsChn(0,y,k+1,0);
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    for (uint8_t j=0; j<4; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5f08:	4c 14       	cp	r4, r12
    5f0a:	5d 04       	cpc	r5, r13
    5f0c:	81 f4       	brne	.+32     	; 0x5f2e <_Z14menuProcLimitsh+0x164>
    5f0e:	80 91 4c 19 	lds	r24, 0x194C
    5f12:	8e 15       	cp	r24, r14
    5f14:	61 f4       	brne	.+24     	; 0x5f2e <_Z14menuProcLimitsh+0x164>
    5f16:	80 91 16 19 	lds	r24, 0x1916
    5f1a:	88 23       	and	r24, r24
    5f1c:	59 f4       	brne	.+22     	; 0x5f34 <_Z14menuProcLimitsh+0x16a>
      uint8_t active = (attr && (s_editMode || p1valdiff)) ;
    5f1e:	80 91 39 19 	lds	r24, 0x1939
    5f22:	90 91 3a 19 	lds	r25, 0x193A
    5f26:	00 97       	sbiw	r24, 0x00	; 0
    5f28:	39 f4       	brne	.+14     	; 0x5f38 <_Z14menuProcLimitsh+0x16e>
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    putsChn(0,y,k+1,0);
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    for (uint8_t j=0; j<4; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5f2a:	02 e0       	ldi	r16, 0x02	; 2
    5f2c:	01 c0       	rjmp	.+2      	; 0x5f30 <_Z14menuProcLimitsh+0x166>
    5f2e:	00 e0       	ldi	r16, 0x00	; 0
      uint8_t active = (attr && (s_editMode || p1valdiff)) ;
    5f30:	bb 24       	eor	r11, r11
    5f32:	05 c0       	rjmp	.+10     	; 0x5f3e <_Z14menuProcLimitsh+0x174>
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    putsChn(0,y,k+1,0);
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    for (uint8_t j=0; j<4; j++) {
      uint8_t attr = ((sub==k && m_posHorz==j) ? (s_editMode ? BLINK : INVERS) : 0);
    5f34:	01 e0       	ldi	r16, 0x01	; 1
    5f36:	01 c0       	rjmp	.+2      	; 0x5f3a <_Z14menuProcLimitsh+0x170>
    5f38:	02 e0       	ldi	r16, 0x02	; 2
      uint8_t active = (attr && (s_editMode || p1valdiff)) ;
    5f3a:	bb 24       	eor	r11, r11
    5f3c:	b3 94       	inc	r11
      switch(j)
    5f3e:	9e 2d       	mov	r25, r14
    5f40:	92 30       	cpi	r25, 0x02	; 2
    5f42:	09 f4       	brne	.+2      	; 0x5f46 <_Z14menuProcLimitsh+0x17c>
    5f44:	56 c0       	rjmp	.+172    	; 0x5ff2 <_Z14menuProcLimitsh+0x228>
    5f46:	93 30       	cpi	r25, 0x03	; 3
    5f48:	09 f4       	brne	.+2      	; 0x5f4c <_Z14menuProcLimitsh+0x182>
    5f4a:	74 c0       	rjmp	.+232    	; 0x6034 <_Z14menuProcLimitsh+0x26a>
    5f4c:	91 30       	cpi	r25, 0x01	; 1
    5f4e:	79 f1       	breq	.+94     	; 0x5fae <_Z14menuProcLimitsh+0x1e4>
      {
        case 0:
          lcd_outdezAtt(  8*FW, y,  ld->offset, attr|PREC1);
    5f50:	4b 81       	ldd	r20, Y+3	; 0x03
    5f52:	5c 81       	ldd	r21, Y+4	; 0x04
    5f54:	20 2f       	mov	r18, r16
    5f56:	20 65       	ori	r18, 0x50	; 80
    5f58:	80 e3       	ldi	r24, 0x30	; 48
    5f5a:	61 2f       	mov	r22, r17
    5f5c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
          if (active) {
    5f60:	bb 20       	and	r11, r11
    5f62:	69 f0       	breq	.+26     	; 0x5f7e <_Z14menuProcLimitsh+0x1b4>
            ld->offset = checkIncDec(event, ld->offset, -1000, 1000, EE_MODEL);
    5f64:	6b 81       	ldd	r22, Y+3	; 0x03
    5f66:	7c 81       	ldd	r23, Y+4	; 0x04
    5f68:	8f 2d       	mov	r24, r15
    5f6a:	48 e1       	ldi	r20, 0x18	; 24
    5f6c:	5c ef       	ldi	r21, 0xFC	; 252
    5f6e:	28 ee       	ldi	r18, 0xE8	; 232
    5f70:	33 e0       	ldi	r19, 0x03	; 3
    5f72:	02 e0       	ldi	r16, 0x02	; 2
    5f74:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    5f78:	9c 83       	std	Y+4, r25	; 0x04
    5f7a:	8b 83       	std	Y+3, r24	; 0x03
    5f7c:	76 c0       	rjmp	.+236    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
          }
          else if (attr && event==EVT_KEY_LONG(KEY_MENU)) {
    5f7e:	00 23       	and	r16, r16
    5f80:	09 f4       	brne	.+2      	; 0x5f84 <_Z14menuProcLimitsh+0x1ba>
    5f82:	73 c0       	rjmp	.+230    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
    5f84:	ef 2d       	mov	r30, r15
    5f86:	e0 38       	cpi	r30, 0x80	; 128
    5f88:	09 f0       	breq	.+2      	; 0x5f8c <_Z14menuProcLimitsh+0x1c2>
    5f8a:	6f c0       	rjmp	.+222    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
            int16_t zero = g_chans512[k];
    5f8c:	f3 01       	movw	r30, r6
    5f8e:	80 81       	ld	r24, Z
    5f90:	91 81       	ldd	r25, Z+1	; 0x01
            ld->offset = (ld->revert) ? -zero : zero;
    5f92:	2a 81       	ldd	r18, Y+2	; 0x02
    5f94:	22 23       	and	r18, r18
    5f96:	19 f0       	breq	.+6      	; 0x5f9e <_Z14menuProcLimitsh+0x1d4>
    5f98:	90 95       	com	r25
    5f9a:	81 95       	neg	r24
    5f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f9e:	9c 83       	std	Y+4, r25	; 0x04
    5fa0:	8b 83       	std	Y+3, r24	; 0x03
            s_editMode = false;
    5fa2:	10 92 16 19 	sts	0x1916, r1
            STORE_MODELVARS;
    5fa6:	82 e0       	ldi	r24, 0x02	; 2
    5fa8:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
    5fac:	5e c0       	rjmp	.+188    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
          }
          break;
        case 1:
          lcd_outdezAtt(  12*FW, y, (int8_t)(ld->min-100),   attr);
    5fae:	48 81       	ld	r20, Y
    5fb0:	44 56       	subi	r20, 0x64	; 100
    5fb2:	55 27       	eor	r21, r21
    5fb4:	47 fd       	sbrc	r20, 7
    5fb6:	50 95       	com	r21
    5fb8:	88 e4       	ldi	r24, 0x48	; 72
    5fba:	61 2f       	mov	r22, r17
    5fbc:	20 2f       	mov	r18, r16
    5fbe:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
          if (active) {
    5fc2:	bb 20       	and	r11, r11
    5fc4:	09 f4       	brne	.+2      	; 0x5fc8 <_Z14menuProcLimitsh+0x1fe>
    5fc6:	51 c0       	rjmp	.+162    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
            ld->min -= 100;
    5fc8:	68 81       	ld	r22, Y
    5fca:	64 56       	subi	r22, 0x64	; 100
    5fcc:	68 83       	st	Y, r22
            if(g_model.extendedLimits)
    5fce:	80 91 99 12 	lds	r24, 0x1299
    5fd2:	85 ff       	sbrs	r24, 5
    5fd4:	04 c0       	rjmp	.+8      	; 0x5fde <_Z14menuProcLimitsh+0x214>
              CHECK_INCDEC_MODELVAR( event, ld->min, -125,125);
    5fd6:	8f 2d       	mov	r24, r15
    5fd8:	43 e8       	ldi	r20, 0x83	; 131
    5fda:	2d e7       	ldi	r18, 0x7D	; 125
    5fdc:	03 c0       	rjmp	.+6      	; 0x5fe4 <_Z14menuProcLimitsh+0x21a>
            else
              CHECK_INCDEC_MODELVAR( event, ld->min, -100,100);
    5fde:	8f 2d       	mov	r24, r15
    5fe0:	4c e9       	ldi	r20, 0x9C	; 156
    5fe2:	24 e6       	ldi	r18, 0x64	; 100
    5fe4:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    5fe8:	88 83       	st	Y, r24
            ld->min += 100;
    5fea:	88 81       	ld	r24, Y
    5fec:	8c 59       	subi	r24, 0x9C	; 156
    5fee:	88 83       	st	Y, r24
    5ff0:	3c c0       	rjmp	.+120    	; 0x606a <_Z14menuProcLimitsh+0x2a0>
          }
          break;
        case 2:
          lcd_outdezAtt( 17*FW, y, (int8_t)(ld->max+100),    attr);
    5ff2:	49 81       	ldd	r20, Y+1	; 0x01
    5ff4:	4c 59       	subi	r20, 0x9C	; 156
    5ff6:	55 27       	eor	r21, r21
    5ff8:	47 fd       	sbrc	r20, 7
    5ffa:	50 95       	com	r21
    5ffc:	86 e6       	ldi	r24, 0x66	; 102
    5ffe:	61 2f       	mov	r22, r17
    6000:	20 2f       	mov	r18, r16
    6002:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
          if (active) {
    6006:	bb 20       	and	r11, r11
    6008:	81 f1       	breq	.+96     	; 0x606a <_Z14menuProcLimitsh+0x2a0>
            ld->max += 100;
    600a:	69 81       	ldd	r22, Y+1	; 0x01
    600c:	6c 59       	subi	r22, 0x9C	; 156
    600e:	69 83       	std	Y+1, r22	; 0x01
            if(g_model.extendedLimits)
    6010:	80 91 99 12 	lds	r24, 0x1299
    6014:	85 ff       	sbrs	r24, 5
    6016:	04 c0       	rjmp	.+8      	; 0x6020 <_Z14menuProcLimitsh+0x256>
              CHECK_INCDEC_MODELVAR( event, ld->max, -125,125);
    6018:	8f 2d       	mov	r24, r15
    601a:	43 e8       	ldi	r20, 0x83	; 131
    601c:	2d e7       	ldi	r18, 0x7D	; 125
    601e:	03 c0       	rjmp	.+6      	; 0x6026 <_Z14menuProcLimitsh+0x25c>
            else
              CHECK_INCDEC_MODELVAR( event, ld->max, -100,100);
    6020:	8f 2d       	mov	r24, r15
    6022:	4c e9       	ldi	r20, 0x9C	; 156
    6024:	24 e6       	ldi	r18, 0x64	; 100
    6026:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    602a:	89 83       	std	Y+1, r24	; 0x01
            ld->max -= 100;
    602c:	89 81       	ldd	r24, Y+1	; 0x01
    602e:	84 56       	subi	r24, 0x64	; 100
    6030:	89 83       	std	Y+1, r24	; 0x01
    6032:	1b c0       	rjmp	.+54     	; 0x606a <_Z14menuProcLimitsh+0x2a0>
          }
          break;
        case 3:
          lcd_putsnAtt(   18*FW, y, PSTR("---INV")+ld->revert*3,3,attr);
    6034:	8a 81       	ldd	r24, Y+2	; 0x02
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	ac 01       	movw	r20, r24
    603a:	44 0f       	add	r20, r20
    603c:	55 1f       	adc	r21, r21
    603e:	48 0f       	add	r20, r24
    6040:	59 1f       	adc	r21, r25
    6042:	4d 5d       	subi	r20, 0xDD	; 221
    6044:	5b 4f       	sbci	r21, 0xFB	; 251
    6046:	8c e6       	ldi	r24, 0x6C	; 108
    6048:	61 2f       	mov	r22, r17
    604a:	23 e0       	ldi	r18, 0x03	; 3
    604c:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
          if (active) {
    6050:	bb 20       	and	r11, r11
    6052:	59 f0       	breq	.+22     	; 0x606a <_Z14menuProcLimitsh+0x2a0>
            CHECK_INCDEC_MODELVAR(event, ld->revert, 0, 1);
    6054:	8f 2d       	mov	r24, r15
    6056:	6a 81       	ldd	r22, Y+2	; 0x02
    6058:	40 e0       	ldi	r20, 0x00	; 0
    605a:	21 e0       	ldi	r18, 0x01	; 1
    605c:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    6060:	91 e0       	ldi	r25, 0x01	; 1
    6062:	88 23       	and	r24, r24
    6064:	09 f4       	brne	.+2      	; 0x6068 <_Z14menuProcLimitsh+0x29e>
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	9a 83       	std	Y+2, r25	; 0x02
    int16_t v = (ld->revert) ? -ld->offset : ld->offset;
    if((g_chans512[k] - v) >  50) swVal[k] = (true==ld->revert);// Switch to raw inputs?  - remove trim!
    if((g_chans512[k] - v) < -50) swVal[k] = (false==ld->revert);
    putsChn(0,y,k+1,0);
    lcd_putcAtt(12*FW+FW/2, y, (swVal[k] ? 127 : 126),0); //'<' : '>'
    for (uint8_t j=0; j<4; j++) {
    606a:	e3 94       	inc	r14
    606c:	fe 2d       	mov	r31, r14
    606e:	f4 30       	cpi	r31, 0x04	; 4
    6070:	09 f0       	breq	.+2      	; 0x6074 <_Z14menuProcLimitsh+0x2aa>
    6072:	4a cf       	rjmp	.-364    	; 0x5f08 <_Z14menuProcLimitsh+0x13e>

  static bool swVal[NUM_CHNOUT];

  int8_t sub = m_posVert - 1;

  for (uint8_t i=0; i<7; i++) {
    6074:	a3 94       	inc	r10
    6076:	18 5f       	subi	r17, 0xF8	; 248
    6078:	8a 2d       	mov	r24, r10
    607a:	87 30       	cpi	r24, 0x07	; 7
    607c:	09 f0       	breq	.+2      	; 0x6080 <_Z14menuProcLimitsh+0x2b6>
    607e:	d8 ce       	rjmp	.-592    	; 0x5e30 <_Z14menuProcLimitsh+0x66>
          }
          break;
      }
    }
  }
}
    6080:	df 91       	pop	r29
    6082:	cf 91       	pop	r28
    6084:	1f 91       	pop	r17
    6086:	0f 91       	pop	r16
    6088:	ff 90       	pop	r15
    608a:	ef 90       	pop	r14
    608c:	df 90       	pop	r13
    608e:	cf 90       	pop	r12
    6090:	bf 90       	pop	r11
    6092:	af 90       	pop	r10
    6094:	9f 90       	pop	r9
    6096:	8f 90       	pop	r8
    6098:	7f 90       	pop	r7
    609a:	6f 90       	pop	r6
    609c:	5f 90       	pop	r5
    609e:	4f 90       	pop	r4
    60a0:	08 95       	ret

000060a2 <_Z14menuProcMixOneh>:
  lcd_vline(x512, y512-3,3*2+1);
  lcd_hline(x512-3, y512,3*2+1);
}

void menuProcMixOne(uint8_t event)
{
    60a2:	bf 92       	push	r11
    60a4:	cf 92       	push	r12
    60a6:	df 92       	push	r13
    60a8:	ef 92       	push	r14
    60aa:	ff 92       	push	r15
    60ac:	0f 93       	push	r16
    60ae:	1f 93       	push	r17
    60b0:	cf 93       	push	r28
    60b2:	df 93       	push	r29
    60b4:	d8 2e       	mov	r13, r24
  TITLEP(s_currCh ? PSTR("INSERT MIX ") : PSTR("EDIT MIX "));
    60b6:	80 91 6b 19 	lds	r24, 0x196B
    60ba:	88 23       	and	r24, r24
    60bc:	19 f0       	breq	.+6      	; 0x60c4 <_Z14menuProcMixOneh+0x22>
    60be:	44 ef       	ldi	r20, 0xF4	; 244
    60c0:	54 e0       	ldi	r21, 0x04	; 4
    60c2:	02 c0       	rjmp	.+4      	; 0x60c8 <_Z14menuProcMixOneh+0x26>
    60c4:	4a ee       	ldi	r20, 0xEA	; 234
    60c6:	54 e0       	ldi	r21, 0x04	; 4
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	60 e0       	ldi	r22, 0x00	; 0
    60cc:	22 e0       	ldi	r18, 0x02	; 2
    60ce:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  MixData *md2 = mixaddress(s_currIdx) ;
    60d2:	80 91 69 19 	lds	r24, 0x1969
    60d6:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    60da:	ec 01       	movw	r28, r24
  putsChn(lcd_lastPos+1*FW,0,md2->destCh,0);
    60dc:	80 91 02 1f 	lds	r24, 0x1F02
    60e0:	48 81       	ld	r20, Y
    60e2:	4f 71       	andi	r20, 0x1F	; 31
    60e4:	8a 5f       	subi	r24, 0xFA	; 250
    60e6:	60 e0       	ldi	r22, 0x00	; 0
    60e8:	20 e0       	ldi	r18, 0x00	; 0
    60ea:	0e 94 76 6b 	call	0xd6ec	; 0xd6ec <_Z7putsChnhhhh>
  SIMPLE_SUBMENU_NOTITLE(13);
    60ee:	8d 2d       	mov	r24, r13
    60f0:	6c e0       	ldi	r22, 0x0C	; 12
    60f2:	0e 94 67 24 	call	0x48ce	; 0x48ce <_Z20check_submenu_simplehh>
    60f6:	88 23       	and	r24, r24
    60f8:	09 f4       	brne	.+2      	; 0x60fc <_Z14menuProcMixOneh+0x5a>
    60fa:	e6 c1       	rjmp	.+972    	; 0x64c8 <_Z14menuProcMixOneh+0x426>

  int8_t  sub    = m_posVert;
    60fc:	e0 90 4b 19 	lds	r14, 0x194B
    6100:	18 e0       	ldi	r17, 0x08	; 8

  for(uint8_t k=0; k<7; k++)
    6102:	cc 24       	eor	r12, r12
  {
    uint8_t y = (k+1) * FH;
    uint8_t i = k + s_pgOfs;
    uint8_t attr = sub==i ? INVERS : 0;
    6104:	ff 24       	eor	r15, r15
    6106:	e7 fc       	sbrc	r14, 7
    6108:	f0 94       	com	r15
  int8_t  sub    = m_posVert;

  for(uint8_t k=0; k<7; k++)
  {
    uint8_t y = (k+1) * FH;
    uint8_t i = k + s_pgOfs;
    610a:	20 91 15 19 	lds	r18, 0x1915
    610e:	2c 0d       	add	r18, r12
    uint8_t attr = sub==i ? INVERS : 0;
    6110:	82 2f       	mov	r24, r18
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	e8 16       	cp	r14, r24
    6116:	f9 06       	cpc	r15, r25
    6118:	19 f4       	brne	.+6      	; 0x6120 <_Z14menuProcMixOneh+0x7e>
    611a:	b2 e0       	ldi	r27, 0x02	; 2
    611c:	bb 2e       	mov	r11, r27
    611e:	01 c0       	rjmp	.+2      	; 0x6122 <_Z14menuProcMixOneh+0x80>
    6120:	bb 24       	eor	r11, r11
    switch(i) {
    6122:	26 30       	cpi	r18, 0x06	; 6
    6124:	09 f4       	brne	.+2      	; 0x6128 <_Z14menuProcMixOneh+0x86>
    6126:	d8 c0       	rjmp	.+432    	; 0x62d8 <_Z14menuProcMixOneh+0x236>
    6128:	27 30       	cpi	r18, 0x07	; 7
    612a:	90 f4       	brcc	.+36     	; 0x6150 <_Z14menuProcMixOneh+0xae>
    612c:	22 30       	cpi	r18, 0x02	; 2
    612e:	09 f4       	brne	.+2      	; 0x6132 <_Z14menuProcMixOneh+0x90>
    6130:	57 c0       	rjmp	.+174    	; 0x61e0 <_Z14menuProcMixOneh+0x13e>
    6132:	23 30       	cpi	r18, 0x03	; 3
    6134:	30 f4       	brcc	.+12     	; 0x6142 <_Z14menuProcMixOneh+0xa0>
    6136:	22 23       	and	r18, r18
    6138:	09 f1       	breq	.+66     	; 0x617c <_Z14menuProcMixOneh+0xda>
    613a:	21 30       	cpi	r18, 0x01	; 1
    613c:	09 f0       	breq	.+2      	; 0x6140 <_Z14menuProcMixOneh+0x9e>
    613e:	be c1       	rjmp	.+892    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    6140:	34 c0       	rjmp	.+104    	; 0x61aa <_Z14menuProcMixOneh+0x108>
    6142:	24 30       	cpi	r18, 0x04	; 4
    6144:	09 f4       	brne	.+2      	; 0x6148 <_Z14menuProcMixOneh+0xa6>
    6146:	8b c0       	rjmp	.+278    	; 0x625e <_Z14menuProcMixOneh+0x1bc>
    6148:	25 30       	cpi	r18, 0x05	; 5
    614a:	08 f0       	brcs	.+2      	; 0x614e <_Z14menuProcMixOneh+0xac>
    614c:	ae c0       	rjmp	.+348    	; 0x62aa <_Z14menuProcMixOneh+0x208>
    614e:	63 c0       	rjmp	.+198    	; 0x6216 <_Z14menuProcMixOneh+0x174>
    6150:	29 30       	cpi	r18, 0x09	; 9
    6152:	09 f4       	brne	.+2      	; 0x6156 <_Z14menuProcMixOneh+0xb4>
    6154:	3c c1       	rjmp	.+632    	; 0x63ce <_Z14menuProcMixOneh+0x32c>
    6156:	2a 30       	cpi	r18, 0x0A	; 10
    6158:	38 f4       	brcc	.+14     	; 0x6168 <_Z14menuProcMixOneh+0xc6>
    615a:	27 30       	cpi	r18, 0x07	; 7
    615c:	09 f4       	brne	.+2      	; 0x6160 <_Z14menuProcMixOneh+0xbe>
    615e:	de c0       	rjmp	.+444    	; 0x631c <_Z14menuProcMixOneh+0x27a>
    6160:	28 30       	cpi	r18, 0x08	; 8
    6162:	09 f0       	breq	.+2      	; 0x6166 <_Z14menuProcMixOneh+0xc4>
    6164:	ab c1       	rjmp	.+854    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    6166:	0a c1       	rjmp	.+532    	; 0x637c <_Z14menuProcMixOneh+0x2da>
    6168:	2b 30       	cpi	r18, 0x0B	; 11
    616a:	09 f4       	brne	.+2      	; 0x616e <_Z14menuProcMixOneh+0xcc>
    616c:	6d c1       	rjmp	.+730    	; 0x6448 <_Z14menuProcMixOneh+0x3a6>
    616e:	2b 30       	cpi	r18, 0x0B	; 11
    6170:	08 f4       	brcc	.+2      	; 0x6174 <_Z14menuProcMixOneh+0xd2>
    6172:	4c c1       	rjmp	.+664    	; 0x640c <_Z14menuProcMixOneh+0x36a>
    6174:	2c 30       	cpi	r18, 0x0C	; 12
    6176:	09 f0       	breq	.+2      	; 0x617a <_Z14menuProcMixOneh+0xd8>
    6178:	a1 c1       	rjmp	.+834    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    617a:	84 c1       	rjmp	.+776    	; 0x6484 <_Z14menuProcMixOneh+0x3e2>
      case 0:
        lcd_puts_P(  2*FW,y,PSTR("Source"));
    617c:	8c e0       	ldi	r24, 0x0C	; 12
    617e:	61 2f       	mov	r22, r17
    6180:	43 ee       	ldi	r20, 0xE3	; 227
    6182:	54 e0       	ldi	r21, 0x04	; 4
    6184:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        putsChnRaw(   FW*10,y,md2->srcRaw,attr);
    6188:	8c e3       	ldi	r24, 0x3C	; 60
    618a:	61 2f       	mov	r22, r17
    618c:	49 81       	ldd	r20, Y+1	; 0x01
    618e:	2b 2d       	mov	r18, r11
    6190:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->srcRaw, 1,NUM_XCHNRAW);
    6194:	bb 20       	and	r11, r11
    6196:	09 f4       	brne	.+2      	; 0x619a <_Z14menuProcMixOneh+0xf8>
    6198:	91 c1       	rjmp	.+802    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    619a:	8d 2d       	mov	r24, r13
    619c:	69 81       	ldd	r22, Y+1	; 0x01
    619e:	41 e0       	ldi	r20, 0x01	; 1
    61a0:	26 e2       	ldi	r18, 0x26	; 38
    61a2:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    61a6:	89 83       	std	Y+1, r24	; 0x01
    61a8:	89 c1       	rjmp	.+786    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 1:
        lcd_puts_P(  2*FW,y,PSTR("Weight"));
    61aa:	8c e0       	ldi	r24, 0x0C	; 12
    61ac:	61 2f       	mov	r22, r17
    61ae:	4c ed       	ldi	r20, 0xDC	; 220
    61b0:	54 e0       	ldi	r21, 0x04	; 4
    61b2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*10,y,md2->weight,attr|LEFT);
    61b6:	4a 81       	ldd	r20, Y+2	; 0x02
    61b8:	55 27       	eor	r21, r21
    61ba:	47 fd       	sbrc	r20, 7
    61bc:	50 95       	com	r21
    61be:	2b 2d       	mov	r18, r11
    61c0:	20 68       	ori	r18, 0x80	; 128
    61c2:	8c e3       	ldi	r24, 0x3C	; 60
    61c4:	61 2f       	mov	r22, r17
    61c6:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->weight, -125,125);
    61ca:	bb 20       	and	r11, r11
    61cc:	09 f4       	brne	.+2      	; 0x61d0 <_Z14menuProcMixOneh+0x12e>
    61ce:	76 c1       	rjmp	.+748    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    61d0:	8d 2d       	mov	r24, r13
    61d2:	6a 81       	ldd	r22, Y+2	; 0x02
    61d4:	43 e8       	ldi	r20, 0x83	; 131
    61d6:	2d e7       	ldi	r18, 0x7D	; 125
    61d8:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    61dc:	8a 83       	std	Y+2, r24	; 0x02
    61de:	6e c1       	rjmp	.+732    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 2:
        lcd_puts_P(  2*FW,y,PSTR("Offset"));
    61e0:	8c e0       	ldi	r24, 0x0C	; 12
    61e2:	61 2f       	mov	r22, r17
    61e4:	45 ed       	ldi	r20, 0xD5	; 213
    61e6:	54 e0       	ldi	r21, 0x04	; 4
    61e8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*10,y,md2->sOffset,attr|LEFT);
    61ec:	48 85       	ldd	r20, Y+8	; 0x08
    61ee:	55 27       	eor	r21, r21
    61f0:	47 fd       	sbrc	r20, 7
    61f2:	50 95       	com	r21
    61f4:	2b 2d       	mov	r18, r11
    61f6:	20 68       	ori	r18, 0x80	; 128
    61f8:	8c e3       	ldi	r24, 0x3C	; 60
    61fa:	61 2f       	mov	r22, r17
    61fc:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->sOffset, -125,125);
    6200:	bb 20       	and	r11, r11
    6202:	09 f4       	brne	.+2      	; 0x6206 <_Z14menuProcMixOneh+0x164>
    6204:	5b c1       	rjmp	.+694    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    6206:	8d 2d       	mov	r24, r13
    6208:	68 85       	ldd	r22, Y+8	; 0x08
    620a:	43 e8       	ldi	r20, 0x83	; 131
    620c:	2d e7       	ldi	r18, 0x7D	; 125
    620e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    6212:	88 87       	std	Y+8, r24	; 0x08
    6214:	53 c1       	rjmp	.+678    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 3:
        lcd_puts_P(  2*FW,y,PSTR("Trim"));
    6216:	8c e0       	ldi	r24, 0x0C	; 12
    6218:	61 2f       	mov	r22, r17
    621a:	40 ed       	ldi	r20, 0xD0	; 208
    621c:	54 e0       	ldi	r21, 0x04	; 4
    621e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_putsnAtt(FW*10,y, PSTR("ON OFF")+3*md2->carryTrim,3,attr);  //default is 0=ON
    6222:	8f 81       	ldd	r24, Y+7	; 0x07
    6224:	81 70       	andi	r24, 0x01	; 1
    6226:	90 e0       	ldi	r25, 0x00	; 0
    6228:	ac 01       	movw	r20, r24
    622a:	44 0f       	add	r20, r20
    622c:	55 1f       	adc	r21, r21
    622e:	48 0f       	add	r20, r24
    6230:	59 1f       	adc	r21, r25
    6232:	47 53       	subi	r20, 0x37	; 55
    6234:	5b 4f       	sbci	r21, 0xFB	; 251
    6236:	8c e3       	ldi	r24, 0x3C	; 60
    6238:	61 2f       	mov	r22, r17
    623a:	23 e0       	ldi	r18, 0x03	; 3
    623c:	0b 2d       	mov	r16, r11
    623e:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->carryTrim, 0,1);
    6242:	bb 20       	and	r11, r11
    6244:	09 f4       	brne	.+2      	; 0x6248 <_Z14menuProcMixOneh+0x1a6>
    6246:	3a c1       	rjmp	.+628    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    6248:	6f 81       	ldd	r22, Y+7	; 0x07
    624a:	61 70       	andi	r22, 0x01	; 1
    624c:	8d 2d       	mov	r24, r13
    624e:	40 e0       	ldi	r20, 0x00	; 0
    6250:	21 e0       	ldi	r18, 0x01	; 1
    6252:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    6256:	81 70       	andi	r24, 0x01	; 1
    6258:	9f 81       	ldd	r25, Y+7	; 0x07
    625a:	9e 7f       	andi	r25, 0xFE	; 254
    625c:	b5 c0       	rjmp	.+362    	; 0x63c8 <_Z14menuProcMixOneh+0x326>
        break;
      case 4:
        lcd_putsAtt(  2*FW,y,PSTR("Curves"),0);
    625e:	8c e0       	ldi	r24, 0x0C	; 12
    6260:	61 2f       	mov	r22, r17
    6262:	42 ec       	ldi	r20, 0xC2	; 194
    6264:	54 e0       	ldi	r21, 0x04	; 4
    6266:	20 e0       	ldi	r18, 0x00	; 0
    6268:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
        putsCurve(FW*10, y, md2->curve, attr);
    626c:	8c e3       	ldi	r24, 0x3C	; 60
    626e:	61 2f       	mov	r22, r17
    6270:	4c 81       	ldd	r20, Y+4	; 0x04
    6272:	2b 2d       	mov	r18, r11
    6274:	0e 94 13 6c 	call	0xd826	; 0xd826 <_Z9putsCurvehhhh>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->curve, 0,MAX_CURVE5+MAX_CURVE9+7-1);
    6278:	bb 20       	and	r11, r11
    627a:	09 f4       	brne	.+2      	; 0x627e <_Z14menuProcMixOneh+0x1dc>
    627c:	1f c1       	rjmp	.+574    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    627e:	8d 2d       	mov	r24, r13
    6280:	6c 81       	ldd	r22, Y+4	; 0x04
    6282:	40 e0       	ldi	r20, 0x00	; 0
    6284:	26 e1       	ldi	r18, 0x16	; 22
    6286:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    628a:	8c 83       	std	Y+4, r24	; 0x04
        if(attr && md2->curve>=CURVE_BASE && event==EVT_KEY_FIRST(KEY_MENU)){
    628c:	87 30       	cpi	r24, 0x07	; 7
    628e:	08 f4       	brcc	.+2      	; 0x6292 <_Z14menuProcMixOneh+0x1f0>
    6290:	15 c1       	rjmp	.+554    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    6292:	9d 2d       	mov	r25, r13
    6294:	90 36       	cpi	r25, 0x60	; 96
    6296:	09 f0       	breq	.+2      	; 0x629a <_Z14menuProcMixOneh+0x1f8>
    6298:	11 c1       	rjmp	.+546    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
          s_curveChan = md2->curve-CURVE_BASE;
    629a:	87 50       	subi	r24, 0x07	; 7
    629c:	80 93 56 19 	sts	0x1956, r24
          pushMenu(menuProcCurveOne);
    62a0:	83 e2       	ldi	r24, 0x23	; 35
    62a2:	9d e3       	ldi	r25, 0x3D	; 61
    62a4:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
    62a8:	09 c1       	rjmp	.+530    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        }
        break;
      case 5:
        lcd_puts_P(  2*FW,y,PSTR("Switch"));
    62aa:	8c e0       	ldi	r24, 0x0C	; 12
    62ac:	61 2f       	mov	r22, r17
    62ae:	4b eb       	ldi	r20, 0xBB	; 187
    62b0:	54 e0       	ldi	r21, 0x04	; 4
    62b2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        putsSwitches(10*FW,  y,md2->swtch,attr);
    62b6:	8c e3       	ldi	r24, 0x3C	; 60
    62b8:	61 2f       	mov	r22, r17
    62ba:	4b 81       	ldd	r20, Y+3	; 0x03
    62bc:	2b 2d       	mov	r18, r11
    62be:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->swtch, -MAX_SWITCH, MAX_SWITCH);
    62c2:	bb 20       	and	r11, r11
    62c4:	09 f4       	brne	.+2      	; 0x62c8 <_Z14menuProcMixOneh+0x226>
    62c6:	fa c0       	rjmp	.+500    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    62c8:	8d 2d       	mov	r24, r13
    62ca:	6b 81       	ldd	r22, Y+3	; 0x03
    62cc:	4a ee       	ldi	r20, 0xEA	; 234
    62ce:	26 e1       	ldi	r18, 0x16	; 22
    62d0:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    62d4:	8b 83       	std	Y+3, r24	; 0x03
    62d6:	f2 c0       	rjmp	.+484    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 6:
        lcd_puts_P(  2*FW,y,PSTR("F.Phase"));
    62d8:	8c e0       	ldi	r24, 0x0C	; 12
    62da:	61 2f       	mov	r22, r17
    62dc:	43 eb       	ldi	r20, 0xB3	; 179
    62de:	54 e0       	ldi	r21, 0x04	; 4
    62e0:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        putsFlightPhase(10*FW, y, md2->phase, attr);
    62e4:	4f 81       	ldd	r20, Y+7	; 0x07
    62e6:	45 95       	asr	r20
    62e8:	45 95       	asr	r20
    62ea:	45 95       	asr	r20
    62ec:	45 95       	asr	r20
    62ee:	8c e3       	ldi	r24, 0x3C	; 60
    62f0:	61 2f       	mov	r22, r17
    62f2:	2b 2d       	mov	r18, r11
    62f4:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->phase, -MAX_PHASES, MAX_PHASES);
    62f8:	bb 20       	and	r11, r11
    62fa:	09 f4       	brne	.+2      	; 0x62fe <_Z14menuProcMixOneh+0x25c>
    62fc:	df c0       	rjmp	.+446    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    62fe:	6f 81       	ldd	r22, Y+7	; 0x07
    6300:	65 95       	asr	r22
    6302:	65 95       	asr	r22
    6304:	65 95       	asr	r22
    6306:	65 95       	asr	r22
    6308:	8d 2d       	mov	r24, r13
    630a:	4b ef       	ldi	r20, 0xFB	; 251
    630c:	25 e0       	ldi	r18, 0x05	; 5
    630e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    6312:	82 95       	swap	r24
    6314:	80 7f       	andi	r24, 0xF0	; 240
    6316:	9f 81       	ldd	r25, Y+7	; 0x07
    6318:	9f 70       	andi	r25, 0x0F	; 15
    631a:	56 c0       	rjmp	.+172    	; 0x63c8 <_Z14menuProcMixOneh+0x326>
        break;
      case 7:
        lcd_puts_P(  2*FW,y,PSTR("Warning"));
    631c:	8c e0       	ldi	r24, 0x0C	; 12
    631e:	61 2f       	mov	r22, r17
    6320:	4b ea       	ldi	r20, 0xAB	; 171
    6322:	54 e0       	ldi	r21, 0x04	; 4
    6324:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        if(md2->mixWarn)
    6328:	48 81       	ld	r20, Y
    632a:	84 2f       	mov	r24, r20
    632c:	80 7e       	andi	r24, 0xE0	; 224
    632e:	59 f0       	breq	.+22     	; 0x6346 <_Z14menuProcMixOneh+0x2a4>
          lcd_outdezAtt(FW*10,y,md2->mixWarn,attr|LEFT);
    6330:	42 95       	swap	r20
    6332:	46 95       	lsr	r20
    6334:	47 70       	andi	r20, 0x07	; 7
    6336:	2b 2d       	mov	r18, r11
    6338:	20 68       	ori	r18, 0x80	; 128
    633a:	8c e3       	ldi	r24, 0x3C	; 60
    633c:	61 2f       	mov	r22, r17
    633e:	50 e0       	ldi	r21, 0x00	; 0
    6340:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    6344:	07 c0       	rjmp	.+14     	; 0x6354 <_Z14menuProcMixOneh+0x2b2>
        else
          lcd_putsAtt(  FW*10,y,PSTR("OFF"),attr);
    6346:	8c e3       	ldi	r24, 0x3C	; 60
    6348:	61 2f       	mov	r22, r17
    634a:	47 ea       	ldi	r20, 0xA7	; 167
    634c:	54 e0       	ldi	r21, 0x04	; 4
    634e:	2b 2d       	mov	r18, r11
    6350:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mixWarn, 0,3);
    6354:	bb 20       	and	r11, r11
    6356:	09 f4       	brne	.+2      	; 0x635a <_Z14menuProcMixOneh+0x2b8>
    6358:	b1 c0       	rjmp	.+354    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    635a:	68 81       	ld	r22, Y
    635c:	62 95       	swap	r22
    635e:	66 95       	lsr	r22
    6360:	67 70       	andi	r22, 0x07	; 7
    6362:	8d 2d       	mov	r24, r13
    6364:	40 e0       	ldi	r20, 0x00	; 0
    6366:	23 e0       	ldi	r18, 0x03	; 3
    6368:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    636c:	82 95       	swap	r24
    636e:	88 0f       	add	r24, r24
    6370:	80 7e       	andi	r24, 0xE0	; 224
    6372:	98 81       	ld	r25, Y
    6374:	9f 71       	andi	r25, 0x1F	; 31
    6376:	98 2b       	or	r25, r24
    6378:	98 83       	st	Y, r25
    637a:	a0 c0       	rjmp	.+320    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 8:
        lcd_puts_P(  2*FW,y,PSTR("Multpx"));
    637c:	8c e0       	ldi	r24, 0x0C	; 12
    637e:	61 2f       	mov	r22, r17
    6380:	40 ea       	ldi	r20, 0xA0	; 160
    6382:	54 e0       	ldi	r21, 0x04	; 4
    6384:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_putsnAtt(10*FW, y,PSTR("Add     MultiplyReplace ")+8*md2->mltpx,8,attr);
    6388:	4f 81       	ldd	r20, Y+7	; 0x07
    638a:	46 95       	lsr	r20
    638c:	47 70       	andi	r20, 0x07	; 7
    638e:	50 e0       	ldi	r21, 0x00	; 0
    6390:	f3 e0       	ldi	r31, 0x03	; 3
    6392:	44 0f       	add	r20, r20
    6394:	55 1f       	adc	r21, r21
    6396:	fa 95       	dec	r31
    6398:	e1 f7       	brne	.-8      	; 0x6392 <_Z14menuProcMixOneh+0x2f0>
    639a:	49 57       	subi	r20, 0x79	; 121
    639c:	5b 4f       	sbci	r21, 0xFB	; 251
    639e:	8c e3       	ldi	r24, 0x3C	; 60
    63a0:	61 2f       	mov	r22, r17
    63a2:	28 e0       	ldi	r18, 0x08	; 8
    63a4:	0b 2d       	mov	r16, r11
    63a6:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
        if(attr) CHECK_INCDEC_MODELVAR( event, md2->mltpx, 0, 2);
    63aa:	bb 20       	and	r11, r11
    63ac:	09 f4       	brne	.+2      	; 0x63b0 <_Z14menuProcMixOneh+0x30e>
    63ae:	86 c0       	rjmp	.+268    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    63b0:	6f 81       	ldd	r22, Y+7	; 0x07
    63b2:	66 95       	lsr	r22
    63b4:	67 70       	andi	r22, 0x07	; 7
    63b6:	8d 2d       	mov	r24, r13
    63b8:	40 e0       	ldi	r20, 0x00	; 0
    63ba:	22 e0       	ldi	r18, 0x02	; 2
    63bc:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    63c0:	87 70       	andi	r24, 0x07	; 7
    63c2:	88 0f       	add	r24, r24
    63c4:	9f 81       	ldd	r25, Y+7	; 0x07
    63c6:	91 7f       	andi	r25, 0xF1	; 241
    63c8:	98 2b       	or	r25, r24
    63ca:	9f 83       	std	Y+7, r25	; 0x07
    63cc:	77 c0       	rjmp	.+238    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 9:
        lcd_puts_P(  2*FW,y,PSTR("Delay Down"));
    63ce:	8c e0       	ldi	r24, 0x0C	; 12
    63d0:	61 2f       	mov	r22, r17
    63d2:	4c e7       	ldi	r20, 0x7C	; 124
    63d4:	54 e0       	ldi	r21, 0x04	; 4
    63d6:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*16,y,md2->delayDown,attr);
    63da:	4d 81       	ldd	r20, Y+5	; 0x05
    63dc:	42 95       	swap	r20
    63de:	4f 70       	andi	r20, 0x0F	; 15
    63e0:	80 e6       	ldi	r24, 0x60	; 96
    63e2:	61 2f       	mov	r22, r17
    63e4:	50 e0       	ldi	r21, 0x00	; 0
    63e6:	2b 2d       	mov	r18, r11
    63e8:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayDown, 0,15);
    63ec:	bb 20       	and	r11, r11
    63ee:	09 f4       	brne	.+2      	; 0x63f2 <_Z14menuProcMixOneh+0x350>
    63f0:	65 c0       	rjmp	.+202    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    63f2:	6d 81       	ldd	r22, Y+5	; 0x05
    63f4:	62 95       	swap	r22
    63f6:	6f 70       	andi	r22, 0x0F	; 15
    63f8:	8d 2d       	mov	r24, r13
    63fa:	40 e0       	ldi	r20, 0x00	; 0
    63fc:	2f e0       	ldi	r18, 0x0F	; 15
    63fe:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    6402:	82 95       	swap	r24
    6404:	80 7f       	andi	r24, 0xF0	; 240
    6406:	9d 81       	ldd	r25, Y+5	; 0x05
    6408:	9f 70       	andi	r25, 0x0F	; 15
    640a:	1b c0       	rjmp	.+54     	; 0x6442 <_Z14menuProcMixOneh+0x3a0>
        break;
      case 10:
        lcd_puts_P(  2*FW,y,PSTR("Delay Up"));
    640c:	8c e0       	ldi	r24, 0x0C	; 12
    640e:	61 2f       	mov	r22, r17
    6410:	43 e7       	ldi	r20, 0x73	; 115
    6412:	54 e0       	ldi	r21, 0x04	; 4
    6414:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*16,y,md2->delayUp,attr);
    6418:	4d 81       	ldd	r20, Y+5	; 0x05
    641a:	4f 70       	andi	r20, 0x0F	; 15
    641c:	80 e6       	ldi	r24, 0x60	; 96
    641e:	61 2f       	mov	r22, r17
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	2b 2d       	mov	r18, r11
    6424:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->delayUp, 0,15);
    6428:	bb 20       	and	r11, r11
    642a:	09 f4       	brne	.+2      	; 0x642e <_Z14menuProcMixOneh+0x38c>
    642c:	47 c0       	rjmp	.+142    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    642e:	6d 81       	ldd	r22, Y+5	; 0x05
    6430:	6f 70       	andi	r22, 0x0F	; 15
    6432:	8d 2d       	mov	r24, r13
    6434:	40 e0       	ldi	r20, 0x00	; 0
    6436:	2f e0       	ldi	r18, 0x0F	; 15
    6438:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    643c:	8f 70       	andi	r24, 0x0F	; 15
    643e:	9d 81       	ldd	r25, Y+5	; 0x05
    6440:	90 7f       	andi	r25, 0xF0	; 240
    6442:	98 2b       	or	r25, r24
    6444:	9d 83       	std	Y+5, r25	; 0x05
    6446:	3a c0       	rjmp	.+116    	; 0x64bc <_Z14menuProcMixOneh+0x41a>
        break;
      case 11:
        lcd_puts_P(  2*FW,y,PSTR("Slow  Down"));
    6448:	8c e0       	ldi	r24, 0x0C	; 12
    644a:	61 2f       	mov	r22, r17
    644c:	48 e6       	ldi	r20, 0x68	; 104
    644e:	54 e0       	ldi	r21, 0x04	; 4
    6450:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*16,y,md2->speedDown,attr);
    6454:	4e 81       	ldd	r20, Y+6	; 0x06
    6456:	42 95       	swap	r20
    6458:	4f 70       	andi	r20, 0x0F	; 15
    645a:	80 e6       	ldi	r24, 0x60	; 96
    645c:	61 2f       	mov	r22, r17
    645e:	50 e0       	ldi	r21, 0x00	; 0
    6460:	2b 2d       	mov	r18, r11
    6462:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedDown, 0,15);
    6466:	bb 20       	and	r11, r11
    6468:	49 f1       	breq	.+82     	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    646a:	6e 81       	ldd	r22, Y+6	; 0x06
    646c:	62 95       	swap	r22
    646e:	6f 70       	andi	r22, 0x0F	; 15
    6470:	8d 2d       	mov	r24, r13
    6472:	40 e0       	ldi	r20, 0x00	; 0
    6474:	2f e0       	ldi	r18, 0x0F	; 15
    6476:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    647a:	82 95       	swap	r24
    647c:	80 7f       	andi	r24, 0xF0	; 240
    647e:	9e 81       	ldd	r25, Y+6	; 0x06
    6480:	9f 70       	andi	r25, 0x0F	; 15
    6482:	1a c0       	rjmp	.+52     	; 0x64b8 <_Z14menuProcMixOneh+0x416>
        break;
      case 12:
        lcd_puts_P(  2*FW,y,PSTR("Slow  Up"));
    6484:	8c e0       	ldi	r24, 0x0C	; 12
    6486:	61 2f       	mov	r22, r17
    6488:	4f e5       	ldi	r20, 0x5F	; 95
    648a:	54 e0       	ldi	r21, 0x04	; 4
    648c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(FW*16,y,md2->speedUp,attr);
    6490:	4e 81       	ldd	r20, Y+6	; 0x06
    6492:	4f 70       	andi	r20, 0x0F	; 15
    6494:	80 e6       	ldi	r24, 0x60	; 96
    6496:	61 2f       	mov	r22, r17
    6498:	50 e0       	ldi	r21, 0x00	; 0
    649a:	2b 2d       	mov	r18, r11
    649c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedUp, 0,15);
    64a0:	bb 20       	and	r11, r11
    64a2:	61 f0       	breq	.+24     	; 0x64bc <_Z14menuProcMixOneh+0x41a>
    64a4:	6e 81       	ldd	r22, Y+6	; 0x06
    64a6:	6f 70       	andi	r22, 0x0F	; 15
    64a8:	8d 2d       	mov	r24, r13
    64aa:	40 e0       	ldi	r20, 0x00	; 0
    64ac:	2f e0       	ldi	r18, 0x0F	; 15
    64ae:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    64b2:	8f 70       	andi	r24, 0x0F	; 15
    64b4:	9e 81       	ldd	r25, Y+6	; 0x06
    64b6:	90 7f       	andi	r25, 0xF0	; 240
    64b8:	98 2b       	or	r25, r24
    64ba:	9e 83       	std	Y+6, r25	; 0x06
  putsChn(lcd_lastPos+1*FW,0,md2->destCh,0);
  SIMPLE_SUBMENU_NOTITLE(13);

  int8_t  sub    = m_posVert;

  for(uint8_t k=0; k<7; k++)
    64bc:	c3 94       	inc	r12
    64be:	18 5f       	subi	r17, 0xF8	; 248
    64c0:	8c 2d       	mov	r24, r12
    64c2:	87 30       	cpi	r24, 0x07	; 7
    64c4:	09 f0       	breq	.+2      	; 0x64c8 <_Z14menuProcMixOneh+0x426>
    64c6:	21 ce       	rjmp	.-958    	; 0x610a <_Z14menuProcMixOneh+0x68>
        lcd_outdezAtt(FW*16,y,md2->speedUp,attr);
        if(attr)  CHECK_INCDEC_MODELVAR( event, md2->speedUp, 0,15);
        break;
    }
  }
}
    64c8:	df 91       	pop	r29
    64ca:	cf 91       	pop	r28
    64cc:	1f 91       	pop	r17
    64ce:	0f 91       	pop	r16
    64d0:	ff 90       	pop	r15
    64d2:	ef 90       	pop	r14
    64d4:	df 90       	pop	r13
    64d6:	cf 90       	pop	r12
    64d8:	bf 90       	pop	r11
    64da:	08 95       	ret

000064dc <_Z6expoFni>:
static uint8_t s_curveChan;

typedef int16_t (*FnFuncP) (int16_t x);

int16_t expoFn(int16_t x)
{
    64dc:	cf 92       	push	r12
    64de:	df 92       	push	r13
    64e0:	ef 92       	push	r14
    64e2:	ff 92       	push	r15
    64e4:	0f 93       	push	r16
    64e6:	1f 93       	push	r17
    64e8:	df 93       	push	r29
    64ea:	cf 93       	push	r28
    64ec:	cd b7       	in	r28, 0x3d	; 61
    64ee:	de b7       	in	r29, 0x3e	; 62
    64f0:	28 97       	sbiw	r28, 0x08	; 8
    64f2:	0f b6       	in	r0, 0x3f	; 63
    64f4:	f8 94       	cli
    64f6:	de bf       	out	0x3e, r29	; 62
    64f8:	0f be       	out	0x3f, r0	; 63
    64fa:	cd bf       	out	0x3d, r28	; 61
    64fc:	6c 01       	movw	r12, r24
  ExpoData *ed = expoaddress(s_currIdx);
    64fe:	80 91 69 19 	lds	r24, 0x1969
    6502:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    6506:	7c 01       	movw	r14, r24
  int16_t anas[NUM_STICKS] = {0};
    6508:	8e 01       	movw	r16, r28
    650a:	0f 5f       	subi	r16, 0xFF	; 255
    650c:	1f 4f       	sbci	r17, 0xFF	; 255
    650e:	88 e0       	ldi	r24, 0x08	; 8
    6510:	d8 01       	movw	r26, r16
    6512:	1d 92       	st	X+, r1
    6514:	8a 95       	dec	r24
    6516:	e9 f7       	brne	.-6      	; 0x6512 <_Z6expoFni+0x36>
  anas[ed->chn] = x;
    6518:	d7 01       	movw	r26, r14
    651a:	ec 91       	ld	r30, X
    651c:	e6 95       	lsr	r30
    651e:	e6 95       	lsr	r30
    6520:	e3 70       	andi	r30, 0x03	; 3
    6522:	f0 e0       	ldi	r31, 0x00	; 0
    6524:	ee 0f       	add	r30, r30
    6526:	ff 1f       	adc	r31, r31
    6528:	e0 0f       	add	r30, r16
    652a:	f1 1f       	adc	r31, r17
    652c:	d1 82       	std	Z+1, r13	; 0x01
    652e:	c0 82       	st	Z, r12
  applyExpos(anas);
    6530:	c8 01       	movw	r24, r16
    6532:	6f ef       	ldi	r22, 0xFF	; 255
    6534:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z10applyExposPih>
  return anas[ed->chn];
    6538:	d7 01       	movw	r26, r14
    653a:	ec 91       	ld	r30, X
    653c:	e6 95       	lsr	r30
    653e:	e6 95       	lsr	r30
    6540:	e3 70       	andi	r30, 0x03	; 3
    6542:	f0 e0       	ldi	r31, 0x00	; 0
    6544:	ee 0f       	add	r30, r30
    6546:	ff 1f       	adc	r31, r31
    6548:	e0 0f       	add	r30, r16
    654a:	f1 1f       	adc	r31, r17
}
    654c:	80 81       	ld	r24, Z
    654e:	91 81       	ldd	r25, Z+1	; 0x01
    6550:	28 96       	adiw	r28, 0x08	; 8
    6552:	0f b6       	in	r0, 0x3f	; 63
    6554:	f8 94       	cli
    6556:	de bf       	out	0x3e, r29	; 62
    6558:	0f be       	out	0x3f, r0	; 63
    655a:	cd bf       	out	0x3d, r28	; 61
    655c:	cf 91       	pop	r28
    655e:	df 91       	pop	r29
    6560:	1f 91       	pop	r17
    6562:	0f 91       	pop	r16
    6564:	ff 90       	pop	r15
    6566:	ef 90       	pop	r14
    6568:	df 90       	pop	r13
    656a:	cf 90       	pop	r12
    656c:	08 95       	ret

0000656e <_Z7curveFni>:

int16_t curveFn(int16_t x)
{
  return intpol(x, s_curveChan);
    656e:	60 91 56 19 	lds	r22, 0x1956
    6572:	0e 94 42 07 	call	0xe84	; 0xe84 <_Z6intpolih>
}
    6576:	08 95       	ret

00006578 <_Z17menuProcPhasesAllh>:
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
    6578:	6f 92       	push	r6
    657a:	7f 92       	push	r7
    657c:	9f 92       	push	r9
    657e:	af 92       	push	r10
    6580:	bf 92       	push	r11
    6582:	cf 92       	push	r12
    6584:	df 92       	push	r13
    6586:	ef 92       	push	r14
    6588:	ff 92       	push	r15
    658a:	0f 93       	push	r16
    658c:	1f 93       	push	r17
    658e:	df 93       	push	r29
    6590:	cf 93       	push	r28
    6592:	0f 92       	push	r0
    6594:	cd b7       	in	r28, 0x3d	; 61
    6596:	de b7       	in	r29, 0x3e	; 62
    6598:	18 2f       	mov	r17, r24
  SIMPLE_MENU("FLIGHT PHASES", menuTabModel, e_PhasesAll, 1+MAX_PHASES+1);
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	60 e0       	ldi	r22, 0x00	; 0
    659e:	4a e8       	ldi	r20, 0x8A	; 138
    65a0:	55 e0       	ldi	r21, 0x05	; 5
    65a2:	22 e0       	ldi	r18, 0x02	; 2
    65a4:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    65a8:	81 2f       	mov	r24, r17
    65aa:	62 e0       	ldi	r22, 0x02	; 2
    65ac:	47 ea       	ldi	r20, 0xA7	; 167
    65ae:	56 e0       	ldi	r21, 0x06	; 6
    65b0:	2c e0       	ldi	r18, 0x0C	; 12
    65b2:	06 e0       	ldi	r16, 0x06	; 6
    65b4:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    65b8:	88 23       	and	r24, r24
    65ba:	09 f4       	brne	.+2      	; 0x65be <_Z17menuProcPhasesAllh+0x46>
    65bc:	ac c0       	rjmp	.+344    	; 0x6716 <_Z17menuProcPhasesAllh+0x19e>

  int8_t sub = m_posVert - 1;
    65be:	d0 90 4b 19 	lds	r13, 0x194B
    65c2:	da 94       	dec	r13

  switch (event) {
    65c4:	10 36       	cpi	r17, 0x60	; 96
    65c6:	19 f0       	breq	.+6      	; 0x65ce <_Z17menuProcPhasesAllh+0x56>
    65c8:	14 36       	cpi	r17, 0x64	; 100
    65ca:	89 f4       	brne	.+34     	; 0x65ee <_Z17menuProcPhasesAllh+0x76>
    65cc:	07 c0       	rjmp	.+14     	; 0x65dc <_Z17menuProcPhasesAllh+0x64>
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub == MAX_PHASES) {
    65ce:	2d 2d       	mov	r18, r13
    65d0:	25 30       	cpi	r18, 0x05	; 5
    65d2:	21 f4       	brne	.+8      	; 0x65dc <_Z17menuProcPhasesAllh+0x64>
        trimsCheckTimer = 200; // 2 seconds
    65d4:	88 ec       	ldi	r24, 0xC8	; 200
    65d6:	80 93 93 15 	sts	0x1593, r24
    65da:	09 c0       	rjmp	.+18     	; 0x65ee <_Z17menuProcPhasesAllh+0x76>
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
    65dc:	8d 2d       	mov	r24, r13
    65de:	85 30       	cpi	r24, 0x05	; 5
    65e0:	30 f4       	brcc	.+12     	; 0x65ee <_Z17menuProcPhasesAllh+0x76>
        s_currIdx = sub;
    65e2:	d0 92 69 19 	sts	0x1969, r13
        pushMenu(menuProcPhaseOne);
    65e6:	8d eb       	ldi	r24, 0xBD	; 189
    65e8:	97 e3       	ldi	r25, 0x37	; 55
    65ea:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
    }
  }
}

void menuProcPhasesAll(uint8_t event)
{
    65ee:	18 e0       	ldi	r17, 0x08	; 8
    65f0:	ee 24       	eor	r14, r14
    65f2:	ff 24       	eor	r15, r15
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    uint8_t y=(i+1)*FH;
    att = i==sub ? INVERS : 0;
    65f4:	ad 2c       	mov	r10, r13
    65f6:	bb 24       	eor	r11, r11
    65f8:	a7 fc       	sbrc	r10, 7
    65fa:	b0 94       	com	r11
      }
      // no break
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (sub >= 0 && sub < MAX_PHASES) {
        s_currIdx = sub;
        pushMenu(menuProcPhaseOne);
    65fc:	ce 2c       	mov	r12, r14
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    uint8_t y=(i+1)*FH;
    att = i==sub ? INVERS : 0;
    65fe:	ea 14       	cp	r14, r10
    6600:	fb 04       	cpc	r15, r11
    6602:	11 f4       	brne	.+4      	; 0x6608 <_Z17menuProcPhasesAllh+0x90>
    6604:	22 e0       	ldi	r18, 0x02	; 2
    6606:	01 c0       	rjmp	.+2      	; 0x660a <_Z17menuProcPhasesAllh+0x92>
    6608:	20 e0       	ldi	r18, 0x00	; 0
    PhaseData *p = phaseaddress(i);
    660a:	8c 2d       	mov	r24, r12
    660c:	29 83       	std	Y+1, r18	; 0x01
    660e:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z12phaseaddressh>
    6612:	3c 01       	movw	r6, r24
        break;
    }
  }
}

void menuProcPhasesAll(uint8_t event)
    6614:	4c 2d       	mov	r20, r12
    6616:	4f 5f       	subi	r20, 0xFF	; 255
  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    uint8_t y=(i+1)*FH;
    att = i==sub ? INVERS : 0;
    PhaseData *p = phaseaddress(i);
    putsFlightPhase(0, y, i+1, att);
    6618:	80 e0       	ldi	r24, 0x00	; 0
    661a:	61 2f       	mov	r22, r17
    661c:	29 81       	ldd	r18, Y+1	; 0x01
    661e:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>
    lcd_putsnAtt(4*FW, y, p->name, 6, ZCHAR);
    6622:	a3 01       	movw	r20, r6
    6624:	4a 5f       	subi	r20, 0xFA	; 250
    6626:	5f 4f       	sbci	r21, 0xFF	; 255
    6628:	88 e1       	ldi	r24, 0x18	; 24
    662a:	61 2f       	mov	r22, r17
    662c:	26 e0       	ldi	r18, 0x06	; 6
    662e:	00 e2       	ldi	r16, 0x20	; 32
    6630:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if (i == 0) {
    6634:	cc 20       	and	r12, r12
    6636:	39 f4       	brne	.+14     	; 0x6646 <_Z17menuProcPhasesAllh+0xce>
      lcd_puts_P(11*FW+FW/2, y, PSTR("(default)"));
    6638:	85 e4       	ldi	r24, 0x45	; 69
    663a:	61 2f       	mov	r22, r17
    663c:	40 e8       	ldi	r20, 0x80	; 128
    663e:	55 e0       	ldi	r21, 0x05	; 5
    6640:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    6644:	29 c0       	rjmp	.+82     	; 0x6698 <_Z17menuProcPhasesAllh+0x120>
    }
    else {
      putsSwitches(11*FW+FW/2, y, p->swtch, 0);
    6646:	85 e4       	ldi	r24, 0x45	; 69
    6648:	61 2f       	mov	r22, r17
    664a:	f3 01       	movw	r30, r6
    664c:	45 81       	ldd	r20, Z+5	; 0x05
    664e:	20 e0       	ldi	r18, 0x00	; 0
    6650:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    6654:	2d e5       	ldi	r18, 0x5D	; 93
    6656:	92 2e       	mov	r9, r18
      for (uint8_t t=0; t<NUM_STICKS; t++) {
    6658:	00 e0       	ldi	r16, 0x00	; 0
        // TODO duplicated code
        int16_t v = getTrimValue(i, t);
    665a:	8c 2d       	mov	r24, r12
    665c:	60 2f       	mov	r22, r16
    665e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
        if (v > TRIM_EXTENDED_MAX) {
    6662:	f1 e0       	ldi	r31, 0x01	; 1
    6664:	85 3f       	cpi	r24, 0xF5	; 245
    6666:	9f 07       	cpc	r25, r31
    6668:	5c f0       	brlt	.+22     	; 0x6680 <_Z17menuProcPhasesAllh+0x108>
          uint8_t c = v - TRIM_EXTENDED_MAX - 1;
    666a:	48 2f       	mov	r20, r24
    666c:	45 5f       	subi	r20, 0xF5	; 245
          if (c >= i) c++;
    666e:	4c 15       	cp	r20, r12
    6670:	08 f0       	brcs	.+2      	; 0x6674 <_Z17menuProcPhasesAllh+0xfc>
    6672:	4f 5f       	subi	r20, 0xFF	; 255
          lcd_putc((16+t)*FW-FW/2, y, '0'+c);
    6674:	40 5d       	subi	r20, 0xD0	; 208
    6676:	89 2d       	mov	r24, r9
    6678:	61 2f       	mov	r22, r17
    667a:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    667e:	07 c0       	rjmp	.+14     	; 0x668e <_Z17menuProcPhasesAllh+0x116>
        }
        else {
          putsChnLetter((16+t)*FW-FW/2, y, t+1, 0);
    6680:	40 2f       	mov	r20, r16
    6682:	4f 5f       	subi	r20, 0xFF	; 255
    6684:	89 2d       	mov	r24, r9
    6686:	61 2f       	mov	r22, r17
    6688:	20 e0       	ldi	r18, 0x00	; 0
    668a:	0e 94 7e 6b 	call	0xd6fc	; 0xd6fc <_Z13putsChnLetterhhhh>
    if (i == 0) {
      lcd_puts_P(11*FW+FW/2, y, PSTR("(default)"));
    }
    else {
      putsSwitches(11*FW+FW/2, y, p->swtch, 0);
      for (uint8_t t=0; t<NUM_STICKS; t++) {
    668e:	0f 5f       	subi	r16, 0xFF	; 255
    6690:	26 e0       	ldi	r18, 0x06	; 6
    6692:	92 0e       	add	r9, r18
    6694:	04 30       	cpi	r16, 0x04	; 4
    6696:	09 f7       	brne	.-62     	; 0x665a <_Z17menuProcPhasesAllh+0xe2>
        else {
          putsChnLetter((16+t)*FW-FW/2, y, t+1, 0);
        }
      }
    }
    if (p->fadeIn) lcd_putc(20*FW+2, y, 'I');
    6698:	f3 01       	movw	r30, r6
    669a:	84 85       	ldd	r24, Z+12	; 0x0c
    669c:	8f 70       	andi	r24, 0x0F	; 15
    669e:	29 f0       	breq	.+10     	; 0x66aa <_Z17menuProcPhasesAllh+0x132>
    66a0:	8a e7       	ldi	r24, 0x7A	; 122
    66a2:	61 2f       	mov	r22, r17
    66a4:	49 e4       	ldi	r20, 0x49	; 73
    66a6:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    if (p->fadeOut) lcd_putc(20*FW+2, y, 'O');
    66aa:	f3 01       	movw	r30, r6
    66ac:	84 85       	ldd	r24, Z+12	; 0x0c
    66ae:	80 7f       	andi	r24, 0xF0	; 240
    66b0:	29 f0       	breq	.+10     	; 0x66bc <_Z17menuProcPhasesAllh+0x144>
    66b2:	8a e7       	ldi	r24, 0x7A	; 122
    66b4:	61 2f       	mov	r22, r17
    66b6:	4f e4       	ldi	r20, 0x4F	; 79
    66b8:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    if (p->fadeIn && p->fadeOut) lcd_putc(20*FW+2, y, '*');
    66bc:	f3 01       	movw	r30, r6
    66be:	84 85       	ldd	r24, Z+12	; 0x0c
    66c0:	98 2f       	mov	r25, r24
    66c2:	9f 70       	andi	r25, 0x0F	; 15
    66c4:	39 f0       	breq	.+14     	; 0x66d4 <_Z17menuProcPhasesAllh+0x15c>
    66c6:	80 7f       	andi	r24, 0xF0	; 240
    66c8:	29 f0       	breq	.+10     	; 0x66d4 <_Z17menuProcPhasesAllh+0x15c>
    66ca:	8a e7       	ldi	r24, 0x7A	; 122
    66cc:	61 2f       	mov	r22, r17
    66ce:	4a e2       	ldi	r20, 0x2A	; 42
    66d0:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    66d4:	08 94       	sec
    66d6:	e1 1c       	adc	r14, r1
    66d8:	f1 1c       	adc	r15, r1
    66da:	18 5f       	subi	r17, 0xF8	; 248
      }
      break;
  }

  uint8_t att;
  for (uint8_t i=0; i<MAX_PHASES; i++) {
    66dc:	10 33       	cpi	r17, 0x30	; 48
    66de:	09 f0       	breq	.+2      	; 0x66e2 <_Z17menuProcPhasesAllh+0x16a>
    66e0:	8d cf       	rjmp	.-230    	; 0x65fc <_Z17menuProcPhasesAllh+0x84>
    if (p->fadeIn) lcd_putc(20*FW+2, y, 'I');
    if (p->fadeOut) lcd_putc(20*FW+2, y, 'O');
    if (p->fadeIn && p->fadeOut) lcd_putc(20*FW+2, y, '*');
  }

  att = (sub==MAX_PHASES && !trimsCheckTimer) ? INVERS : 0;
    66e2:	fd 2d       	mov	r31, r13
    66e4:	f5 30       	cpi	r31, 0x05	; 5
    66e6:	21 f4       	brne	.+8      	; 0x66f0 <_Z17menuProcPhasesAllh+0x178>
    66e8:	80 91 93 15 	lds	r24, 0x1593
    66ec:	88 23       	and	r24, r24
    66ee:	11 f0       	breq	.+4      	; 0x66f4 <_Z17menuProcPhasesAllh+0x17c>
    66f0:	10 e0       	ldi	r17, 0x00	; 0
    66f2:	01 c0       	rjmp	.+2      	; 0x66f6 <_Z17menuProcPhasesAllh+0x17e>
    66f4:	12 e0       	ldi	r17, 0x02	; 2
  lcd_putsAtt(0, 7*FH, PSTR("Check     Trims"), att);
    66f6:	80 e0       	ldi	r24, 0x00	; 0
    66f8:	68 e3       	ldi	r22, 0x38	; 56
    66fa:	40 e7       	ldi	r20, 0x70	; 112
    66fc:	55 e0       	ldi	r21, 0x05	; 5
    66fe:	21 2f       	mov	r18, r17
    6700:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  putsFlightPhase(6*FW, 7*FH, getFlightPhase()+1, att);
    6704:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    6708:	48 2f       	mov	r20, r24
    670a:	4f 5f       	subi	r20, 0xFF	; 255
    670c:	84 e2       	ldi	r24, 0x24	; 36
    670e:	68 e3       	ldi	r22, 0x38	; 56
    6710:	21 2f       	mov	r18, r17
    6712:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>
}
    6716:	0f 90       	pop	r0
    6718:	cf 91       	pop	r28
    671a:	df 91       	pop	r29
    671c:	1f 91       	pop	r17
    671e:	0f 91       	pop	r16
    6720:	ff 90       	pop	r15
    6722:	ef 90       	pop	r14
    6724:	df 90       	pop	r13
    6726:	cf 90       	pop	r12
    6728:	bf 90       	pop	r11
    672a:	af 90       	pop	r10
    672c:	9f 90       	pop	r9
    672e:	7f 90       	pop	r7
    6730:	6f 90       	pop	r6
    6732:	08 95       	ret

00006734 <_Z7eeFlushv>:

/// Markiert einen EEPROM-Bereich als dirty. der Bereich wird dann in
/// eeCheck ins EEPROM zurueckgeschrieben.
void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size);
void eeDirty(uint8_t msk);
inline void eeFlush() { theFile.flush(); }
    6734:	8c ea       	ldi	r24, 0xAC	; 172
    6736:	99 e1       	ldi	r25, 0x19	; 25
    6738:	0e 94 fd 65 	call	0xcbfa	; 0xcbfa <_ZN7RlcFile5flushEv>
    673c:	08 95       	ret

0000673e <_Z10displayBoxv>:
uint8_t           s_warning_info_len;
// uint8_t s_warning_info_att not needed now
uint8_t           s_confirmation = 0;

void displayBox()
{
    673e:	ef 92       	push	r14
    6740:	0f 93       	push	r16
  lcd_filled_rect(10, 16, 108, 40, WHITE);
    6742:	8a e0       	ldi	r24, 0x0A	; 10
    6744:	60 e1       	ldi	r22, 0x10	; 16
    6746:	4c e6       	ldi	r20, 0x6C	; 108
    6748:	28 e2       	ldi	r18, 0x28	; 40
    674a:	04 e0       	ldi	r16, 0x04	; 4
    674c:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
  lcd_rect(10, 16, 108, 40);
    6750:	8a e0       	ldi	r24, 0x0A	; 10
    6752:	60 e1       	ldi	r22, 0x10	; 16
    6754:	4c e6       	ldi	r20, 0x6C	; 108
    6756:	28 e2       	ldi	r18, 0x28	; 40
    6758:	0f ef       	ldi	r16, 0xFF	; 255
    675a:	ee 24       	eor	r14, r14
    675c:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
  lcd_puts_P(16, 3*FH, s_warning);
    6760:	40 91 50 19 	lds	r20, 0x1950
    6764:	50 91 51 19 	lds	r21, 0x1951
    6768:	80 e1       	ldi	r24, 0x10	; 16
    676a:	68 e1       	ldi	r22, 0x18	; 24
    676c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  // could be a place for a s_warning_info
}
    6770:	0f 91       	pop	r16
    6772:	ef 90       	pop	r14
    6774:	08 95       	ret

00006776 <_Z12displayPopupPKc>:

void displayPopup(const pm_char * pstr)
{
  s_warning = pstr;
    6776:	90 93 51 19 	sts	0x1951, r25
    677a:	80 93 50 19 	sts	0x1950, r24
  displayBox();
    677e:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z10displayBoxv>
  s_warning = 0;
    6782:	10 92 51 19 	sts	0x1951, r1
    6786:	10 92 50 19 	sts	0x1950, r1
  refreshDisplay();
    678a:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <_Z14refreshDisplayv>
}
    678e:	08 95       	ret

00006790 <_Z14displayWarningh>:

void displayWarning(uint8_t event)
{
    6790:	cf 93       	push	r28
    6792:	c8 2f       	mov	r28, r24
  if (s_warning) {
    6794:	20 91 50 19 	lds	r18, 0x1950
    6798:	30 91 51 19 	lds	r19, 0x1951
    679c:	21 15       	cp	r18, r1
    679e:	31 05       	cpc	r19, r1
    67a0:	89 f0       	breq	.+34     	; 0x67c4 <_Z14displayWarningh+0x34>
    displayBox();
    67a2:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z10displayBoxv>
    lcd_puts_P(16, 5*FH, PSTR("[EXIT]"));
    67a6:	80 e1       	ldi	r24, 0x10	; 16
    67a8:	68 e2       	ldi	r22, 0x28	; 40
    67aa:	4d e0       	ldi	r20, 0x0D	; 13
    67ac:	57 e0       	ldi	r21, 0x07	; 7
    67ae:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    switch(event) {
    67b2:	c1 36       	cpi	r28, 0x61	; 97
    67b4:	39 f4       	brne	.+14     	; 0x67c4 <_Z14displayWarningh+0x34>
      case EVT_KEY_FIRST(KEY_EXIT):
        killEvents(event);
    67b6:	81 e6       	ldi	r24, 0x61	; 97
    67b8:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
        s_warning = 0;
    67bc:	10 92 51 19 	sts	0x1951, r1
    67c0:	10 92 50 19 	sts	0x1950, r1
        break;
    }
  }
}
    67c4:	cf 91       	pop	r28
    67c6:	08 95       	ret

000067c8 <_Z19displayConfirmationh>:

void displayConfirmation(uint8_t event)
{
    67c8:	0f 93       	push	r16
    67ca:	cf 93       	push	r28
    67cc:	c8 2f       	mov	r28, r24
  s_confirmation = false;
    67ce:	10 92 55 19 	sts	0x1955, r1
  displayBox();
    67d2:	0e 94 9f 33 	call	0x673e	; 0x673e <_Z10displayBoxv>
  if (s_warning_info)
    67d6:	40 91 52 19 	lds	r20, 0x1952
    67da:	50 91 53 19 	lds	r21, 0x1953
    67de:	41 15       	cp	r20, r1
    67e0:	51 05       	cpc	r21, r1
    67e2:	39 f0       	breq	.+14     	; 0x67f2 <_Z19displayConfirmationh+0x2a>
    lcd_putsnAtt(16, 4*FH, s_warning_info, s_warning_info_len, ZCHAR);
    67e4:	80 e1       	ldi	r24, 0x10	; 16
    67e6:	60 e2       	ldi	r22, 0x20	; 32
    67e8:	20 91 54 19 	lds	r18, 0x1954
    67ec:	00 e2       	ldi	r16, 0x20	; 32
    67ee:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
  lcd_puts_P(16, 5*FH, PSTR("[MENU]    [EXIT]"));
    67f2:	80 e1       	ldi	r24, 0x10	; 16
    67f4:	68 e2       	ldi	r22, 0x28	; 40
    67f6:	4c ef       	ldi	r20, 0xFC	; 252
    67f8:	56 e0       	ldi	r21, 0x06	; 6
    67fa:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>

  switch(event) {
    67fe:	c0 36       	cpi	r28, 0x60	; 96
    6800:	19 f0       	breq	.+6      	; 0x6808 <_Z19displayConfirmationh+0x40>
    6802:	c1 36       	cpi	r28, 0x61	; 97
    6804:	59 f4       	brne	.+22     	; 0x681c <_Z19displayConfirmationh+0x54>
    6806:	03 c0       	rjmp	.+6      	; 0x680e <_Z19displayConfirmationh+0x46>
    case EVT_KEY_FIRST(KEY_MENU):
      s_confirmation = true;
    6808:	81 e0       	ldi	r24, 0x01	; 1
    680a:	80 93 55 19 	sts	0x1955, r24
      // no break
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
    680e:	8c 2f       	mov	r24, r28
    6810:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      s_warning = 0;
    6814:	10 92 51 19 	sts	0x1951, r1
    6818:	10 92 50 19 	sts	0x1950, r1
      break;
  }
}
    681c:	cf 91       	pop	r28
    681e:	0f 91       	pop	r16
    6820:	08 95       	ret

00006822 <_Z19menuProcModelSelecth>:
static uint8_t s_copyMode = 0;
static int8_t s_copySrcRow;
static int8_t s_copyTgtOfs;

void menuProcModelSelect(uint8_t event)
{
    6822:	4f 92       	push	r4
    6824:	5f 92       	push	r5
    6826:	7f 92       	push	r7
    6828:	8f 92       	push	r8
    682a:	9f 92       	push	r9
    682c:	af 92       	push	r10
    682e:	bf 92       	push	r11
    6830:	cf 92       	push	r12
    6832:	df 92       	push	r13
    6834:	ef 92       	push	r14
    6836:	ff 92       	push	r15
    6838:	0f 93       	push	r16
    683a:	1f 93       	push	r17
    683c:	df 93       	push	r29
    683e:	cf 93       	push	r28
    6840:	cd b7       	in	r28, 0x3d	; 61
    6842:	de b7       	in	r29, 0x3e	; 62
    6844:	2a 97       	sbiw	r28, 0x0a	; 10
    6846:	0f b6       	in	r0, 0x3f	; 63
    6848:	f8 94       	cli
    684a:	de bf       	out	0x3e, r29	; 62
    684c:	0f be       	out	0x3f, r0	; 63
    684e:	cd bf       	out	0x3d, r28	; 61
    6850:	78 2e       	mov	r7, r24
  char name[sizeof(g_model.name)];

  TITLE("MODELSEL");
    6852:	80 e0       	ldi	r24, 0x00	; 0
    6854:	60 e0       	ldi	r22, 0x00	; 0
    6856:	43 ef       	ldi	r20, 0xF3	; 243
    6858:	56 e0       	ldi	r21, 0x06	; 6
    685a:	22 e0       	ldi	r18, 0x02	; 2
    685c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>

  // flush eeprom write
  eeFlush();
    6860:	0e 94 9a 33 	call	0x6734	; 0x6734 <_Z7eeFlushv>

  if (s_confirmation) {
    6864:	80 91 55 19 	lds	r24, 0x1955
    6868:	88 23       	and	r24, r24
    686a:	49 f0       	breq	.+18     	; 0x687e <_Z19menuProcModelSelecth+0x5c>
    EFile::rm(FILE_MODEL(m_posVert)); // delete file
    686c:	80 91 4b 19 	lds	r24, 0x194B
    6870:	8f 5f       	subi	r24, 0xFF	; 255
    6872:	0e 94 69 62 	call	0xc4d2	; 0xc4d2 <_ZN5EFile2rmEh>
    s_confirmation = 0;
    6876:	10 92 55 19 	sts	0x1955, r1
    s_copyMode = 0;
    687a:	10 92 67 19 	sts	0x1967, r1
  }

  uint8_t _event = (s_warning ? 0 : event);
    687e:	80 91 50 19 	lds	r24, 0x1950
    6882:	90 91 51 19 	lds	r25, 0x1951
    6886:	00 97       	sbiw	r24, 0x00	; 0
    6888:	11 f0       	breq	.+4      	; 0x688e <_Z19menuProcModelSelecth+0x6c>
    688a:	00 e0       	ldi	r16, 0x00	; 0
    688c:	01 c0       	rjmp	.+2      	; 0x6890 <_Z19menuProcModelSelecth+0x6e>
    688e:	07 2d       	mov	r16, r7
  uint8_t _event_ = _event;

  if (s_copyMode || !EFile::exists(FILE_MODEL(g_eeGeneral.currModel))) {
    6890:	80 91 67 19 	lds	r24, 0x1967
    6894:	88 23       	and	r24, r24
    6896:	39 f4       	brne	.+14     	; 0x68a6 <_Z19menuProcModelSelecth+0x84>
    6898:	80 91 6b 12 	lds	r24, 0x126B
    689c:	8f 5f       	subi	r24, 0xFF	; 255
    689e:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
    68a2:	88 23       	and	r24, r24
    68a4:	39 f4       	brne	.+14     	; 0x68b4 <_Z19menuProcModelSelecth+0x92>
    if ((_event & 0x1f) == KEY_EXIT)
    68a6:	80 2f       	mov	r24, r16
    68a8:	8f 71       	andi	r24, 0x1F	; 31
    68aa:	81 30       	cpi	r24, 0x01	; 1
    68ac:	19 f4       	brne	.+6      	; 0x68b4 <_Z19menuProcModelSelecth+0x92>
      _event_ -= KEY_EXIT;
    68ae:	80 2f       	mov	r24, r16
    68b0:	81 50       	subi	r24, 0x01	; 1
    68b2:	01 c0       	rjmp	.+2      	; 0x68b6 <_Z19menuProcModelSelecth+0x94>

  uint8_t _event = (s_warning ? 0 : event);
  uint8_t _event_ = _event;

  if (s_copyMode || !EFile::exists(FILE_MODEL(g_eeGeneral.currModel))) {
    if ((_event & 0x1f) == KEY_EXIT)
    68b4:	80 2f       	mov	r24, r16
      _event_ -= KEY_EXIT;
  }

  int8_t oldSub = m_posVert;
    68b6:	e0 90 4b 19 	lds	r14, 0x194B
  if (!check_submenu_simple(_event_, MAX_MODELS-1)) return;
    68ba:	6f e0       	ldi	r22, 0x0F	; 15
    68bc:	0e 94 67 24 	call	0x48ce	; 0x48ce <_Z20check_submenu_simplehh>
    68c0:	88 23       	and	r24, r24
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <_Z19menuProcModelSelecth+0xa4>
    68c4:	97 c2       	rjmp	.+1326   	; 0x6df4 <_Z19menuProcModelSelecth+0x5d2>
  int8_t sub = m_posVert;
    68c6:	10 91 4b 19 	lds	r17, 0x194B

  lcd_puts_P(     9*FW, 0, PSTR("free"));
    68ca:	86 e3       	ldi	r24, 0x36	; 54
    68cc:	60 e0       	ldi	r22, 0x00	; 0
    68ce:	4e ee       	ldi	r20, 0xEE	; 238
    68d0:	56 e0       	ldi	r21, 0x06	; 6
    68d2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdezAtt(  17*FW, 0, EeFsGetFree(),0);
    68d6:	0e 94 4d 61 	call	0xc29a	; 0xc29a <_Z11EeFsGetFreev>
    68da:	ac 01       	movw	r20, r24
    68dc:	86 e6       	ldi	r24, 0x66	; 102
    68de:	60 e0       	ldi	r22, 0x00	; 0
    68e0:	20 e0       	ldi	r18, 0x00	; 0
    68e2:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>

  DisplayScreenIndex(e_ModelSelect, DIM(menuTabModel), INVERS);
    68e6:	80 e0       	ldi	r24, 0x00	; 0
    68e8:	6c e0       	ldi	r22, 0x0C	; 12
    68ea:	42 e0       	ldi	r20, 0x02	; 2
    68ec:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <_Z18DisplayScreenIndexhhh>

  switch(_event)
    68f0:	06 36       	cpi	r16, 0x66	; 102
    68f2:	78 f4       	brcc	.+30     	; 0x6912 <_Z19menuProcModelSelecth+0xf0>
    68f4:	04 36       	cpi	r16, 0x64	; 100
    68f6:	08 f0       	brcs	.+2      	; 0x68fa <_Z19menuProcModelSelecth+0xd8>
    68f8:	21 c1       	rjmp	.+578    	; 0x6b3c <_Z19menuProcModelSelecth+0x31a>
    68fa:	01 32       	cpi	r16, 0x21	; 33
    68fc:	f1 f1       	breq	.+124    	; 0x697a <_Z19menuProcModelSelecth+0x158>
    68fe:	02 32       	cpi	r16, 0x22	; 34
    6900:	20 f4       	brcc	.+8      	; 0x690a <_Z19menuProcModelSelecth+0xe8>
    6902:	00 32       	cpi	r16, 0x20	; 32
    6904:	09 f0       	breq	.+2      	; 0x6908 <_Z19menuProcModelSelecth+0xe6>
    6906:	6b c1       	rjmp	.+726    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
    6908:	61 c0       	rjmp	.+194    	; 0x69cc <_Z19menuProcModelSelecth+0x1aa>
    690a:	02 36       	cpi	r16, 0x62	; 98
    690c:	08 f4       	brcc	.+2      	; 0x6910 <_Z19menuProcModelSelecth+0xee>
    690e:	67 c1       	rjmp	.+718    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
    6910:	32 c1       	rjmp	.+612    	; 0x6b76 <_Z19menuProcModelSelecth+0x354>
    6912:	01 38       	cpi	r16, 0x81	; 129
    6914:	91 f0       	breq	.+36     	; 0x693a <_Z19menuProcModelSelecth+0x118>
    6916:	0f 3b       	cpi	r16, 0xBF	; 191
    6918:	21 f0       	breq	.+8      	; 0x6922 <_Z19menuProcModelSelecth+0x100>
    691a:	00 38       	cpi	r16, 0x80	; 128
    691c:	09 f0       	breq	.+2      	; 0x6920 <_Z19menuProcModelSelecth+0xfe>
    691e:	5f c1       	rjmp	.+702    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
    6920:	55 c0       	rjmp	.+170    	; 0x69cc <_Z19menuProcModelSelecth+0x1aa>
  {
      case EVT_ENTRY:
        m_posVert = sub = g_eeGeneral.currModel;
    6922:	10 91 6b 12 	lds	r17, 0x126B
    6926:	10 93 4b 19 	sts	0x194B, r17
        s_copyMode = 0; // TODO only this one?
    692a:	10 92 67 19 	sts	0x1967, r1
        s_copyTgtOfs = 0;
    692e:	10 92 68 19 	sts	0x1968, r1
        s_copySrcRow = -1;
    6932:	8f ef       	ldi	r24, 0xFF	; 255
    6934:	80 93 6a 19 	sts	0x196A, r24
        break;
    6938:	52 c1       	rjmp	.+676    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
      case EVT_KEY_LONG(KEY_EXIT):
        if (s_copyMode && s_copyTgtOfs == 0 && g_eeGeneral.currModel != sub && EFile::exists(FILE_MODEL(sub))) {
    693a:	80 91 67 19 	lds	r24, 0x1967
    693e:	88 23       	and	r24, r24
    6940:	e1 f0       	breq	.+56     	; 0x697a <_Z19menuProcModelSelecth+0x158>
    6942:	80 91 68 19 	lds	r24, 0x1968
    6946:	88 23       	and	r24, r24
    6948:	c1 f4       	brne	.+48     	; 0x697a <_Z19menuProcModelSelecth+0x158>
    694a:	20 91 6b 12 	lds	r18, 0x126B
    694e:	30 e0       	ldi	r19, 0x00	; 0
    6950:	81 2f       	mov	r24, r17
    6952:	99 27       	eor	r25, r25
    6954:	87 fd       	sbrc	r24, 7
    6956:	90 95       	com	r25
    6958:	28 17       	cp	r18, r24
    695a:	39 07       	cpc	r19, r25
    695c:	71 f0       	breq	.+28     	; 0x697a <_Z19menuProcModelSelecth+0x158>
    695e:	81 2f       	mov	r24, r17
    6960:	8f 5f       	subi	r24, 0xFF	; 255
    6962:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
    6966:	88 23       	and	r24, r24
    6968:	41 f0       	breq	.+16     	; 0x697a <_Z19menuProcModelSelecth+0x158>
          s_warning = PSTR("DELETE MODEL");
    696a:	81 ee       	ldi	r24, 0xE1	; 225
    696c:	96 e0       	ldi	r25, 0x06	; 6
    696e:	90 93 51 19 	sts	0x1951, r25
    6972:	80 93 50 19 	sts	0x1950, r24
          killEvents(_event);
    6976:	81 e8       	ldi	r24, 0x81	; 129
    6978:	26 c0       	rjmp	.+76     	; 0x69c6 <_Z19menuProcModelSelecth+0x1a4>
          break;
        }
        // no break
      case EVT_KEY_BREAK(KEY_EXIT):
        if (s_copyMode) {
    697a:	80 91 67 19 	lds	r24, 0x1967
    697e:	88 23       	and	r24, r24
    6980:	09 f4       	brne	.+2      	; 0x6984 <_Z19menuProcModelSelecth+0x162>
    6982:	2d c1       	rjmp	.+602    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
          sub = m_posVert = (s_copyMode == MOVE_MODE || s_copySrcRow<0) ? (16+sub+s_copyTgtOfs) % 16 : s_copySrcRow; // TODO reset s_copySrcRow?
    6984:	82 30       	cpi	r24, 0x02	; 2
    6986:	21 f0       	breq	.+8      	; 0x6990 <_Z19menuProcModelSelecth+0x16e>
    6988:	80 91 6a 19 	lds	r24, 0x196A
    698c:	87 ff       	sbrs	r24, 7
    698e:	10 c0       	rjmp	.+32     	; 0x69b0 <_Z19menuProcModelSelecth+0x18e>
    6990:	80 91 68 19 	lds	r24, 0x1968
    6994:	99 27       	eor	r25, r25
    6996:	87 fd       	sbrc	r24, 7
    6998:	90 95       	com	r25
    699a:	40 96       	adiw	r24, 0x10	; 16
    699c:	21 2f       	mov	r18, r17
    699e:	33 27       	eor	r19, r19
    69a0:	27 fd       	sbrc	r18, 7
    69a2:	30 95       	com	r19
    69a4:	82 0f       	add	r24, r18
    69a6:	93 1f       	adc	r25, r19
    69a8:	60 e1       	ldi	r22, 0x10	; 16
    69aa:	70 e0       	ldi	r23, 0x00	; 0
    69ac:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    69b0:	18 2f       	mov	r17, r24
    69b2:	80 93 4b 19 	sts	0x194B, r24
          s_copyMode = 0; // TODO only this one?
    69b6:	10 92 67 19 	sts	0x1967, r1
          s_copySrcRow = -1;
    69ba:	8f ef       	ldi	r24, 0xFF	; 255
    69bc:	80 93 6a 19 	sts	0x196A, r24
          s_copyTgtOfs = 0;
    69c0:	10 92 68 19 	sts	0x1968, r1
          killEvents(_event);
    69c4:	80 2f       	mov	r24, r16
    69c6:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
    69ca:	09 c1       	rjmp	.+530    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
        }
        break;
      case EVT_KEY_LONG(KEY_MENU):
      case EVT_KEY_BREAK(KEY_MENU):
        if (s_copyMode && (s_copyTgtOfs || s_copySrcRow>=0)) {
    69cc:	80 91 67 19 	lds	r24, 0x1967
    69d0:	88 23       	and	r24, r24
    69d2:	09 f4       	brne	.+2      	; 0x69d6 <_Z19menuProcModelSelecth+0x1b4>
    69d4:	81 c0       	rjmp	.+258    	; 0x6ad8 <_Z19menuProcModelSelecth+0x2b6>
    69d6:	90 91 68 19 	lds	r25, 0x1968
    69da:	99 23       	and	r25, r25
    69dc:	21 f4       	brne	.+8      	; 0x69e6 <_Z19menuProcModelSelecth+0x1c4>
    69de:	90 91 6a 19 	lds	r25, 0x196A
    69e2:	97 fd       	sbrc	r25, 7
    69e4:	79 c0       	rjmp	.+242    	; 0x6ad8 <_Z19menuProcModelSelecth+0x2b6>
          displayPopup(s_copyMode==COPY_MODE ? PSTR("Copying model...") : PSTR("Moving model..."));
    69e6:	81 30       	cpi	r24, 0x01	; 1
    69e8:	19 f4       	brne	.+6      	; 0x69f0 <_Z19menuProcModelSelecth+0x1ce>
    69ea:	80 ed       	ldi	r24, 0xD0	; 208
    69ec:	96 e0       	ldi	r25, 0x06	; 6
    69ee:	02 c0       	rjmp	.+4      	; 0x69f4 <_Z19menuProcModelSelecth+0x1d2>
    69f0:	80 ec       	ldi	r24, 0xC0	; 192
    69f2:	96 e0       	ldi	r25, 0x06	; 6
    69f4:	0e 94 bb 33 	call	0x6776	; 0x6776 <_Z12displayPopupPKc>
          eeCheck(true); // force writing of current model data before this is changed
    69f8:	81 e0       	ldi	r24, 0x01	; 1
    69fa:	0e 94 45 60 	call	0xc08a	; 0xc08a <_Z7eeCheckb>

          uint8_t cur = (16 + sub + s_copyTgtOfs) % 16;
    69fe:	c1 2e       	mov	r12, r17
    6a00:	dd 24       	eor	r13, r13
    6a02:	c7 fc       	sbrc	r12, 7
    6a04:	d0 94       	com	r13
    6a06:	80 91 68 19 	lds	r24, 0x1968
    6a0a:	99 27       	eor	r25, r25
    6a0c:	87 fd       	sbrc	r24, 7
    6a0e:	90 95       	com	r25
    6a10:	40 96       	adiw	r24, 0x10	; 16
    6a12:	8c 0d       	add	r24, r12
    6a14:	9d 1d       	adc	r25, r13
    6a16:	60 e1       	ldi	r22, 0x10	; 16
    6a18:	70 e0       	ldi	r23, 0x00	; 0
    6a1a:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    6a1e:	b8 2e       	mov	r11, r24

          if (s_copyMode == COPY_MODE) {
    6a20:	80 91 67 19 	lds	r24, 0x1967
    6a24:	81 30       	cpi	r24, 0x01	; 1
    6a26:	61 f4       	brne	.+24     	; 0x6a40 <_Z19menuProcModelSelecth+0x21e>
            if (!theFile.copy(FILE_MODEL(cur), FILE_MODEL(s_copySrcRow)))
    6a28:	6b 2d       	mov	r22, r11
    6a2a:	6f 5f       	subi	r22, 0xFF	; 255
    6a2c:	40 91 6a 19 	lds	r20, 0x196A
    6a30:	4f 5f       	subi	r20, 0xFF	; 255
    6a32:	8c ea       	ldi	r24, 0xAC	; 172
    6a34:	99 e1       	ldi	r25, 0x19	; 25
    6a36:	0e 94 83 65 	call	0xcb06	; 0xcb06 <_ZN7RlcFile4copyEhh>
    6a3a:	88 23       	and	r24, r24
    6a3c:	09 f4       	brne	.+2      	; 0x6a40 <_Z19menuProcModelSelecth+0x21e>
              cur = sub;
    6a3e:	b1 2e       	mov	r11, r17
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
    6a40:	80 91 6b 12 	lds	r24, 0x126B
    6a44:	80 93 6a 19 	sts	0x196A, r24
          while (sub != cur) {
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+15 : cur+1) % 16;
    6a48:	40 e1       	ldi	r20, 0x10	; 16
    6a4a:	e4 2e       	mov	r14, r20
    6a4c:	f1 2c       	mov	r15, r1
            if (!theFile.copy(FILE_MODEL(cur), FILE_MODEL(s_copySrcRow)))
              cur = sub;
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
          while (sub != cur) {
    6a4e:	26 c0       	rjmp	.+76     	; 0x6a9c <_Z19menuProcModelSelecth+0x27a>
            uint8_t src = cur;
            cur = (s_copyTgtOfs > 0 ? cur+15 : cur+1) % 16;
    6a50:	80 91 68 19 	lds	r24, 0x1968
    6a54:	18 16       	cp	r1, r24
    6a56:	1c f4       	brge	.+6      	; 0x6a5e <_Z19menuProcModelSelecth+0x23c>
    6a58:	c8 01       	movw	r24, r16
    6a5a:	0f 96       	adiw	r24, 0x0f	; 15
    6a5c:	02 c0       	rjmp	.+4      	; 0x6a62 <_Z19menuProcModelSelecth+0x240>
    6a5e:	c8 01       	movw	r24, r16
    6a60:	01 96       	adiw	r24, 0x01	; 1
    6a62:	b7 01       	movw	r22, r14
    6a64:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    6a68:	a8 2e       	mov	r10, r24
            EFile::swap(FILE_MODEL(src), FILE_MODEL(cur));
    6a6a:	68 2f       	mov	r22, r24
    6a6c:	6f 5f       	subi	r22, 0xFF	; 255
    6a6e:	8b 2d       	mov	r24, r11
    6a70:	8f 5f       	subi	r24, 0xFF	; 255
    6a72:	0e 94 1d 62 	call	0xc43a	; 0xc43a <_ZN5EFile4swapEhh>
            if (src == s_copySrcRow)
    6a76:	20 91 6a 19 	lds	r18, 0x196A
    6a7a:	33 27       	eor	r19, r19
    6a7c:	27 fd       	sbrc	r18, 7
    6a7e:	30 95       	com	r19
    6a80:	02 17       	cp	r16, r18
    6a82:	13 07       	cpc	r17, r19
    6a84:	19 f4       	brne	.+6      	; 0x6a8c <_Z19menuProcModelSelecth+0x26a>
              s_copySrcRow = cur;
    6a86:	a0 92 6a 19 	sts	0x196A, r10
    6a8a:	07 c0       	rjmp	.+14     	; 0x6a9a <_Z19menuProcModelSelecth+0x278>
            else if (cur == s_copySrcRow)
    6a8c:	4a 2d       	mov	r20, r10
    6a8e:	50 e0       	ldi	r21, 0x00	; 0
    6a90:	42 17       	cp	r20, r18
    6a92:	53 07       	cpc	r21, r19
    6a94:	11 f4       	brne	.+4      	; 0x6a9a <_Z19menuProcModelSelecth+0x278>
              s_copySrcRow = src;
    6a96:	b0 92 6a 19 	sts	0x196A, r11

          uint8_t cur = (16 + sub + s_copyTgtOfs) % 16;

          if (s_copyMode == COPY_MODE) {
            if (!theFile.copy(FILE_MODEL(cur), FILE_MODEL(s_copySrcRow)))
              cur = sub;
    6a9a:	ba 2c       	mov	r11, r10
          }

          s_copySrcRow = g_eeGeneral.currModel; // to update the currModel value
          while (sub != cur) {
    6a9c:	0b 2d       	mov	r16, r11
    6a9e:	10 e0       	ldi	r17, 0x00	; 0
    6aa0:	c0 16       	cp	r12, r16
    6aa2:	d1 06       	cpc	r13, r17
    6aa4:	a9 f6       	brne	.-86     	; 0x6a50 <_Z19menuProcModelSelecth+0x22e>
              s_copySrcRow = cur;
            else if (cur == s_copySrcRow)
              s_copySrcRow = src;
          }

          if (s_copySrcRow != g_eeGeneral.currModel) {
    6aa6:	40 91 6a 19 	lds	r20, 0x196A
    6aaa:	24 2f       	mov	r18, r20
    6aac:	33 27       	eor	r19, r19
    6aae:	27 fd       	sbrc	r18, 7
    6ab0:	30 95       	com	r19
    6ab2:	80 91 6b 12 	lds	r24, 0x126B
    6ab6:	90 e0       	ldi	r25, 0x00	; 0
    6ab8:	28 17       	cp	r18, r24
    6aba:	39 07       	cpc	r19, r25
    6abc:	29 f0       	breq	.+10     	; 0x6ac8 <_Z19menuProcModelSelecth+0x2a6>
            g_eeGeneral.currModel = s_copySrcRow;
    6abe:	40 93 6b 12 	sts	0x126B, r20
            STORE_GENERALVARS;
    6ac2:	81 e0       	ldi	r24, 0x01	; 1
    6ac4:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
          }

          s_copyMode = 0; // TODO only this one?
    6ac8:	10 92 67 19 	sts	0x1967, r1
          s_copySrcRow = -1;
    6acc:	8f ef       	ldi	r24, 0xFF	; 255
    6ace:	80 93 6a 19 	sts	0x196A, r24
          s_copyTgtOfs = 0;
    6ad2:	10 92 68 19 	sts	0x1968, r1
          return;
    6ad6:	8e c1       	rjmp	.+796    	; 0x6df4 <_Z19menuProcModelSelecth+0x5d2>
        }
        else if (_event == EVT_KEY_LONG(KEY_MENU)) {
    6ad8:	00 38       	cpi	r16, 0x80	; 128
    6ada:	f9 f4       	brne	.+62     	; 0x6b1a <_Z19menuProcModelSelecth+0x2f8>
          displayPopup(PSTR("Loading model..."));
    6adc:	8f ea       	ldi	r24, 0xAF	; 175
    6ade:	96 e0       	ldi	r25, 0x06	; 6
    6ae0:	0e 94 bb 33 	call	0x6776	; 0x6776 <_Z12displayPopupPKc>
          eeCheck(true); // force writing of current model data before this is changed
    6ae4:	81 e0       	ldi	r24, 0x01	; 1
    6ae6:	0e 94 45 60 	call	0xc08a	; 0xc08a <_Z7eeCheckb>
          if (g_eeGeneral.currModel != sub) {
    6aea:	20 91 6b 12 	lds	r18, 0x126B
    6aee:	30 e0       	ldi	r19, 0x00	; 0
    6af0:	81 2f       	mov	r24, r17
    6af2:	99 27       	eor	r25, r25
    6af4:	87 fd       	sbrc	r24, 7
    6af6:	90 95       	com	r25
    6af8:	28 17       	cp	r18, r24
    6afa:	39 07       	cpc	r19, r25
    6afc:	41 f0       	breq	.+16     	; 0x6b0e <_Z19menuProcModelSelecth+0x2ec>
            g_eeGeneral.currModel = sub;
    6afe:	10 93 6b 12 	sts	0x126B, r17
            STORE_GENERALVARS;
    6b02:	81 e0       	ldi	r24, 0x01	; 1
    6b04:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
            eeLoadModel(sub);
    6b08:	81 2f       	mov	r24, r17
    6b0a:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_Z11eeLoadModelh>
          }
          s_copyMode = 0;
    6b0e:	10 92 67 19 	sts	0x1967, r1
          killEvents(event);
    6b12:	87 2d       	mov	r24, r7
    6b14:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
          return;
    6b18:	6d c1       	rjmp	.+730    	; 0x6df4 <_Z19menuProcModelSelecth+0x5d2>
        }
        else if (EFile::exists(FILE_MODEL(sub))) {
    6b1a:	81 2f       	mov	r24, r17
    6b1c:	8f 5f       	subi	r24, 0xFF	; 255
    6b1e:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
    6b22:	88 23       	and	r24, r24
    6b24:	09 f4       	brne	.+2      	; 0x6b28 <_Z19menuProcModelSelecth+0x306>
    6b26:	5b c0       	rjmp	.+182    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
          s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
    6b28:	80 91 67 19 	lds	r24, 0x1967
    6b2c:	81 30       	cpi	r24, 0x01	; 1
    6b2e:	11 f4       	brne	.+4      	; 0x6b34 <_Z19menuProcModelSelecth+0x312>
    6b30:	82 e0       	ldi	r24, 0x02	; 2
    6b32:	01 c0       	rjmp	.+2      	; 0x6b36 <_Z19menuProcModelSelecth+0x314>
    6b34:	81 e0       	ldi	r24, 0x01	; 1
    6b36:	80 93 67 19 	sts	0x1967, r24
    6b3a:	51 c0       	rjmp	.+162    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
        }
        break;
      case EVT_KEY_FIRST(KEY_LEFT):
      case EVT_KEY_FIRST(KEY_RIGHT):
        if (sub == g_eeGeneral.currModel) {
    6b3c:	21 2f       	mov	r18, r17
    6b3e:	33 27       	eor	r19, r19
    6b40:	27 fd       	sbrc	r18, 7
    6b42:	30 95       	com	r19
    6b44:	80 91 6b 12 	lds	r24, 0x126B
    6b48:	90 e0       	ldi	r25, 0x00	; 0
    6b4a:	28 17       	cp	r18, r24
    6b4c:	39 07       	cpc	r19, r25
    6b4e:	61 f4       	brne	.+24     	; 0x6b68 <_Z19menuProcModelSelecth+0x346>
          chainMenu(_event == EVT_KEY_FIRST(KEY_RIGHT) ? menuProcModel : menuTabModel[DIM(menuTabModel)-1]);
    6b50:	04 36       	cpi	r16, 0x64	; 100
    6b52:	29 f0       	breq	.+10     	; 0x6b5e <_Z19menuProcModelSelecth+0x33c>
    6b54:	80 91 bd 06 	lds	r24, 0x06BD
    6b58:	90 91 be 06 	lds	r25, 0x06BE
    6b5c:	02 c0       	rjmp	.+4      	; 0x6b62 <_Z19menuProcModelSelecth+0x340>
    6b5e:	8b e2       	ldi	r24, 0x2B	; 43
    6b60:	99 e3       	ldi	r25, 0x39	; 57
    6b62:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
          return;
    6b66:	46 c1       	rjmp	.+652    	; 0x6df4 <_Z19menuProcModelSelecth+0x5d2>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    6b68:	80 91 75 15 	lds	r24, 0x1575
    6b6c:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    6b70:	84 e6       	ldi	r24, 0x64	; 100
    6b72:	87 bd       	out	0x27, r24	; 39
    6b74:	34 c0       	rjmp	.+104    	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
        }
        beepWarn();
        break;
      case EVT_KEY_FIRST(KEY_UP):
      case EVT_KEY_FIRST(KEY_DOWN):
        if (s_copyMode) {
    6b76:	90 91 67 19 	lds	r25, 0x1967
    6b7a:	99 23       	and	r25, r25
    6b7c:	81 f1       	breq	.+96     	; 0x6bde <_Z19menuProcModelSelecth+0x3bc>
    6b7e:	80 91 68 19 	lds	r24, 0x1968
          int8_t next_ofs = (_event == EVT_KEY_FIRST(KEY_UP) ? s_copyTgtOfs+1 : s_copyTgtOfs-1);
    6b82:	03 36       	cpi	r16, 0x63	; 99
    6b84:	11 f4       	brne	.+4      	; 0x6b8a <_Z19menuProcModelSelecth+0x368>
    6b86:	8f 5f       	subi	r24, 0xFF	; 255
    6b88:	01 c0       	rjmp	.+2      	; 0x6b8c <_Z19menuProcModelSelecth+0x36a>
    6b8a:	81 50       	subi	r24, 0x01	; 1
          if (next_ofs == 16 || next_ofs == -16)
    6b8c:	80 31       	cpi	r24, 0x10	; 16
    6b8e:	11 f0       	breq	.+4      	; 0x6b94 <_Z19menuProcModelSelecth+0x372>
    6b90:	80 3f       	cpi	r24, 0xF0	; 240
    6b92:	09 f4       	brne	.+2      	; 0x6b96 <_Z19menuProcModelSelecth+0x374>
            next_ofs = 0;
    6b94:	80 e0       	ldi	r24, 0x00	; 0

          if (s_copySrcRow < 0 && s_copyMode==COPY_MODE) {
    6b96:	20 91 6a 19 	lds	r18, 0x196A
    6b9a:	27 ff       	sbrs	r18, 7
    6b9c:	1e c0       	rjmp	.+60     	; 0x6bda <_Z19menuProcModelSelecth+0x3b8>
    6b9e:	91 30       	cpi	r25, 0x01	; 1
    6ba0:	e1 f4       	brne	.+56     	; 0x6bda <_Z19menuProcModelSelecth+0x3b8>
            s_copySrcRow = oldSub;
    6ba2:	e0 92 6a 19 	sts	0x196A, r14
            // find a hole (in the first empty slot above / below)
            m_posVert = eeFindEmptyModel(s_copySrcRow, _event==EVT_KEY_FIRST(KEY_DOWN));
    6ba6:	61 e0       	ldi	r22, 0x01	; 1
    6ba8:	02 36       	cpi	r16, 0x62	; 98
    6baa:	09 f0       	breq	.+2      	; 0x6bae <_Z19menuProcModelSelecth+0x38c>
    6bac:	60 e0       	ldi	r22, 0x00	; 0
    6bae:	8e 2d       	mov	r24, r14
    6bb0:	0e 94 10 60 	call	0xc020	; 0xc020 <_Z16eeFindEmptyModelhb>
    6bb4:	80 93 4b 19 	sts	0x194B, r24
            if (m_posVert == (uint8_t)-1) {
    6bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    6bba:	61 f4       	brne	.+24     	; 0x6bd4 <_Z19menuProcModelSelecth+0x3b2>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    6bbc:	90 91 75 15 	lds	r25, 0x1575
    6bc0:	90 93 71 15 	sts	0x1571, r25
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    6bc4:	94 e6       	ldi	r25, 0x64	; 100
    6bc6:	97 bd       	out	0x27, r25	; 39
              // no free room for duplicating the model
              beepWarn();
              m_posVert = oldSub;
    6bc8:	e0 92 4b 19 	sts	0x194B, r14
              s_copyMode = 0; // TODO only this one?
    6bcc:	10 92 67 19 	sts	0x1967, r1
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
    6bd0:	80 93 6a 19 	sts	0x196A, r24
            }
            next_ofs = 0;
            sub = m_posVert;
    6bd4:	10 91 4b 19 	lds	r17, 0x194B
              m_posVert = oldSub;
              s_copyMode = 0; // TODO only this one?
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
            }
            next_ofs = 0;
    6bd8:	80 e0       	ldi	r24, 0x00	; 0
            sub = m_posVert;
          }
          s_copyTgtOfs = next_ofs;
    6bda:	80 93 68 19 	sts	0x1968, r24
        }
        break;
  }

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
    6bde:	c1 2e       	mov	r12, r17
    6be0:	dd 24       	eor	r13, r13
    6be2:	c7 fc       	sbrc	r12, 7
    6be4:	d0 94       	com	r13
    6be6:	80 91 15 19 	lds	r24, 0x1915
    6bea:	96 01       	movw	r18, r12
    6bec:	28 1b       	sub	r18, r24
    6bee:	31 09       	sbc	r19, r1
    6bf0:	c9 01       	movw	r24, r18
    6bf2:	18 16       	cp	r1, r24
    6bf4:	19 06       	cpc	r1, r25
    6bf6:	8c f0       	brlt	.+34     	; 0x6c1a <_Z19menuProcModelSelecth+0x3f8>
    6bf8:	c6 01       	movw	r24, r12
    6bfa:	01 97       	sbiw	r24, 0x01	; 1
    6bfc:	97 ff       	sbrs	r25, 7
    6bfe:	02 c0       	rjmp	.+4      	; 0x6c04 <_Z19menuProcModelSelecth+0x3e2>
    6c00:	80 e0       	ldi	r24, 0x00	; 0
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	80 93 15 19 	sts	0x1915, r24
              m_posVert = oldSub;
              s_copyMode = 0; // TODO only this one?
              s_copyTgtOfs = 0;
              s_copySrcRow = -1;
            }
            next_ofs = 0;
    6c08:	38 e0       	ldi	r19, 0x08	; 8
    6c0a:	b3 2e       	mov	r11, r19
    6c0c:	88 24       	eor	r8, r8
    6c0e:	99 24       	eor	r9, r9
    }

    k %= 16;

    if (EFile::exists(FILE_MODEL(k))) {
      uint16_t size = eeLoadModelName(k, name);
    6c10:	2e 01       	movw	r4, r28
    6c12:	08 94       	sec
    6c14:	41 1c       	adc	r4, r1
    6c16:	51 1c       	adc	r5, r1
    6c18:	0b c0       	rjmp	.+22     	; 0x6c30 <_Z19menuProcModelSelecth+0x40e>
        }
        break;
  }

  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);
    6c1a:	26 30       	cpi	r18, 0x06	; 6
    6c1c:	31 05       	cpc	r19, r1
    6c1e:	a4 f3       	brlt	.-24     	; 0x6c08 <_Z19menuProcModelSelecth+0x3e6>
    6c20:	c6 01       	movw	r24, r12
    6c22:	04 97       	sbiw	r24, 0x04	; 4
    6c24:	8a 30       	cpi	r24, 0x0A	; 10
    6c26:	91 05       	cpc	r25, r1
    6c28:	6c f3       	brlt	.-38     	; 0x6c04 <_Z19menuProcModelSelecth+0x3e2>
    6c2a:	89 e0       	ldi	r24, 0x09	; 9
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	ea cf       	rjmp	.-44     	; 0x6c04 <_Z19menuProcModelSelecth+0x3e2>

  // printf("copy_mode=%d s_copySrcRow=%d s_copyTgtOfs=%d sub=%d\n", s_copyMode, s_copySrcRow, s_copyTgtOfs, sub); fflush(stdout);

  for (uint8_t i=0; i<7; i++) {
    uint8_t y=(i+1)*FH;
    uint8_t k=i+s_pgOfs;
    6c30:	a0 90 15 19 	lds	r10, 0x1915
    6c34:	a8 0c       	add	r10, r8
    lcd_outdezNAtt(3*FW+2, y, k+1, LEADING0+((!s_copyMode && sub==k) ? INVERS : 0), 2);
    6c36:	ea 2c       	mov	r14, r10
    6c38:	ff 24       	eor	r15, r15
    6c3a:	a7 01       	movw	r20, r14
    6c3c:	4f 5f       	subi	r20, 0xFF	; 255
    6c3e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c40:	80 91 67 19 	lds	r24, 0x1967
    6c44:	88 23       	and	r24, r24
    6c46:	19 f4       	brne	.+6      	; 0x6c4e <_Z19menuProcModelSelecth+0x42c>
    6c48:	ce 14       	cp	r12, r14
    6c4a:	df 04       	cpc	r13, r15
    6c4c:	11 f0       	breq	.+4      	; 0x6c52 <_Z19menuProcModelSelecth+0x430>
    6c4e:	20 e1       	ldi	r18, 0x10	; 16
    6c50:	01 c0       	rjmp	.+2      	; 0x6c54 <_Z19menuProcModelSelecth+0x432>
    6c52:	22 e1       	ldi	r18, 0x12	; 18
    6c54:	84 e1       	ldi	r24, 0x14	; 20
    6c56:	6b 2d       	mov	r22, r11
    6c58:	02 e0       	ldi	r16, 0x02	; 2
    6c5a:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>

    if (s_copyMode == MOVE_MODE || (s_copyMode == COPY_MODE && s_copySrcRow >= 0)) {
    6c5e:	80 91 67 19 	lds	r24, 0x1967
    6c62:	82 30       	cpi	r24, 0x02	; 2
    6c64:	39 f0       	breq	.+14     	; 0x6c74 <_Z19menuProcModelSelecth+0x452>
    6c66:	81 30       	cpi	r24, 0x01	; 1
    6c68:	09 f0       	breq	.+2      	; 0x6c6c <_Z19menuProcModelSelecth+0x44a>
    6c6a:	53 c0       	rjmp	.+166    	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
    6c6c:	90 91 6a 19 	lds	r25, 0x196A
    6c70:	97 fd       	sbrc	r25, 7
    6c72:	4f c0       	rjmp	.+158    	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
      if (k == sub) {
    6c74:	ec 14       	cp	r14, r12
    6c76:	fd 04       	cpc	r15, r13
    6c78:	71 f4       	brne	.+28     	; 0x6c96 <_Z19menuProcModelSelecth+0x474>
        if (s_copyMode == COPY_MODE) {
    6c7a:	81 30       	cpi	r24, 0x01	; 1
    6c7c:	41 f4       	brne	.+16     	; 0x6c8e <_Z19menuProcModelSelecth+0x46c>
          k = s_copySrcRow;
    6c7e:	a0 90 6a 19 	lds	r10, 0x196A
          lcd_putc(20*FW+2, y, '+');
    6c82:	8a e7       	ldi	r24, 0x7A	; 122
    6c84:	6b 2d       	mov	r22, r11
    6c86:	4b e2       	ldi	r20, 0x2B	; 43
    6c88:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    6c8c:	42 c0       	rjmp	.+132    	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
        }
        else {
          k = sub + s_copyTgtOfs;
    6c8e:	a0 90 68 19 	lds	r10, 0x1968
    6c92:	a1 0e       	add	r10, r17
    6c94:	3e c0       	rjmp	.+124    	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
        }
      }
      else if (s_copyTgtOfs < 0 && ((k < sub && k >= sub+s_copyTgtOfs) || (k-16 < sub && k-16 >= sub+s_copyTgtOfs)))
    6c96:	80 91 68 19 	lds	r24, 0x1968
    6c9a:	87 ff       	sbrs	r24, 7
    6c9c:	1c c0       	rjmp	.+56     	; 0x6cd6 <_Z19menuProcModelSelecth+0x4b4>
    6c9e:	ec 14       	cp	r14, r12
    6ca0:	fd 04       	cpc	r15, r13
    6ca2:	4c f4       	brge	.+18     	; 0x6cb6 <_Z19menuProcModelSelecth+0x494>
    6ca4:	28 2f       	mov	r18, r24
    6ca6:	33 27       	eor	r19, r19
    6ca8:	27 fd       	sbrc	r18, 7
    6caa:	30 95       	com	r19
    6cac:	2c 0d       	add	r18, r12
    6cae:	3d 1d       	adc	r19, r13
    6cb0:	e2 16       	cp	r14, r18
    6cb2:	f3 06       	cpc	r15, r19
    6cb4:	74 f4       	brge	.+28     	; 0x6cd2 <_Z19menuProcModelSelecth+0x4b0>
    6cb6:	97 01       	movw	r18, r14
    6cb8:	2f 50       	subi	r18, 0x0F	; 15
    6cba:	30 40       	sbci	r19, 0x00	; 0
    6cbc:	c2 16       	cp	r12, r18
    6cbe:	d3 06       	cpc	r13, r19
    6cc0:	44 f1       	brlt	.+80     	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
    6cc2:	99 27       	eor	r25, r25
    6cc4:	87 fd       	sbrc	r24, 7
    6cc6:	90 95       	com	r25
    6cc8:	8c 0d       	add	r24, r12
    6cca:	9d 1d       	adc	r25, r13
    6ccc:	82 17       	cp	r24, r18
    6cce:	93 07       	cpc	r25, r19
    6cd0:	04 f5       	brge	.+64     	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
        k += 1;
    6cd2:	a3 94       	inc	r10
    6cd4:	1e c0       	rjmp	.+60     	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
      else if (s_copyTgtOfs > 0 && ((k > sub && k <= sub+s_copyTgtOfs) || (k+16 > sub && k+16 <= sub+s_copyTgtOfs)))
    6cd6:	88 23       	and	r24, r24
    6cd8:	e1 f0       	breq	.+56     	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
    6cda:	ce 14       	cp	r12, r14
    6cdc:	df 04       	cpc	r13, r15
    6cde:	4c f4       	brge	.+18     	; 0x6cf2 <_Z19menuProcModelSelecth+0x4d0>
    6ce0:	28 2f       	mov	r18, r24
    6ce2:	33 27       	eor	r19, r19
    6ce4:	27 fd       	sbrc	r18, 7
    6ce6:	30 95       	com	r19
    6ce8:	2c 0d       	add	r18, r12
    6cea:	3d 1d       	adc	r19, r13
    6cec:	2e 15       	cp	r18, r14
    6cee:	3f 05       	cpc	r19, r15
    6cf0:	74 f4       	brge	.+28     	; 0x6d0e <_Z19menuProcModelSelecth+0x4ec>
    6cf2:	97 01       	movw	r18, r14
    6cf4:	21 5f       	subi	r18, 0xF1	; 241
    6cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf8:	2c 15       	cp	r18, r12
    6cfa:	3d 05       	cpc	r19, r13
    6cfc:	54 f0       	brlt	.+20     	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
    6cfe:	99 27       	eor	r25, r25
    6d00:	87 fd       	sbrc	r24, 7
    6d02:	90 95       	com	r25
    6d04:	8c 0d       	add	r24, r12
    6d06:	9d 1d       	adc	r25, r13
    6d08:	28 17       	cp	r18, r24
    6d0a:	39 07       	cpc	r19, r25
    6d0c:	14 f4       	brge	.+4      	; 0x6d12 <_Z19menuProcModelSelecth+0x4f0>
        k += 15;
    6d0e:	3f e0       	ldi	r19, 0x0F	; 15
    6d10:	a3 0e       	add	r10, r19
    }

    k %= 16;
    6d12:	8f e0       	ldi	r24, 0x0F	; 15
    6d14:	a8 22       	and	r10, r24

    if (EFile::exists(FILE_MODEL(k))) {
    6d16:	8a 2d       	mov	r24, r10
    6d18:	8f 5f       	subi	r24, 0xFF	; 255
    6d1a:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
    6d1e:	88 23       	and	r24, r24
    6d20:	39 f1       	breq	.+78     	; 0x6d70 <_Z19menuProcModelSelecth+0x54e>
      uint16_t size = eeLoadModelName(k, name);
    6d22:	8a 2d       	mov	r24, r10
    6d24:	b2 01       	movw	r22, r4
    6d26:	0e 94 dc 5f 	call	0xbfb8	; 0xbfb8 <_Z15eeLoadModelNamehPc>
    6d2a:	7c 01       	movw	r14, r24
      putsModelName(4*FW, y, name, k, 0);
    6d2c:	88 e1       	ldi	r24, 0x18	; 24
    6d2e:	6b 2d       	mov	r22, r11
    6d30:	a2 01       	movw	r20, r4
    6d32:	2a 2d       	mov	r18, r10
    6d34:	00 e0       	ldi	r16, 0x00	; 0
    6d36:	0e 94 95 6b 	call	0xd72a	; 0xd72a <_Z13putsModelNamehhPchh>
      lcd_outdezAtt(20*FW, y, size, 0);
    6d3a:	88 e7       	ldi	r24, 0x78	; 120
    6d3c:	6b 2d       	mov	r22, r11
    6d3e:	a7 01       	movw	r20, r14
    6d40:	20 e0       	ldi	r18, 0x00	; 0
    6d42:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
      if (k==g_eeGeneral.currModel && (s_copySrcRow<0 || i+s_pgOfs!=sub)) lcd_putc(1, y, '*');
    6d46:	80 91 6b 12 	lds	r24, 0x126B
    6d4a:	a8 16       	cp	r10, r24
    6d4c:	89 f4       	brne	.+34     	; 0x6d70 <_Z19menuProcModelSelecth+0x54e>
    6d4e:	80 91 6a 19 	lds	r24, 0x196A
    6d52:	87 fd       	sbrc	r24, 7
    6d54:	08 c0       	rjmp	.+16     	; 0x6d66 <_Z19menuProcModelSelecth+0x544>
    6d56:	80 91 15 19 	lds	r24, 0x1915
    6d5a:	94 01       	movw	r18, r8
    6d5c:	28 0f       	add	r18, r24
    6d5e:	31 1d       	adc	r19, r1
    6d60:	2c 15       	cp	r18, r12
    6d62:	3d 05       	cpc	r19, r13
    6d64:	29 f0       	breq	.+10     	; 0x6d70 <_Z19menuProcModelSelecth+0x54e>
    6d66:	81 e0       	ldi	r24, 0x01	; 1
    6d68:	6b 2d       	mov	r22, r11
    6d6a:	4a e2       	ldi	r20, 0x2A	; 42
    6d6c:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    }

    if (s_copyMode && sub==i+s_pgOfs) {
    6d70:	80 91 67 19 	lds	r24, 0x1967
    6d74:	88 23       	and	r24, r24
    6d76:	f1 f0       	breq	.+60     	; 0x6db4 <_Z19menuProcModelSelecth+0x592>
    6d78:	80 91 15 19 	lds	r24, 0x1915
    6d7c:	94 01       	movw	r18, r8
    6d7e:	28 0f       	add	r18, r24
    6d80:	31 1d       	adc	r19, r1
    6d82:	c2 16       	cp	r12, r18
    6d84:	d3 06       	cpc	r13, r19
    6d86:	b1 f4       	brne	.+44     	; 0x6db4 <_Z19menuProcModelSelecth+0x592>
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
    6d88:	89 e0       	ldi	r24, 0x09	; 9
    6d8a:	6b 2d       	mov	r22, r11
    6d8c:	46 e7       	ldi	r20, 0x76	; 118
    6d8e:	27 e0       	ldi	r18, 0x07	; 7
    6d90:	00 e0       	ldi	r16, 0x00	; 0
    6d92:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
    6d96:	6b 2d       	mov	r22, r11
    6d98:	61 50       	subi	r22, 0x01	; 1
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? 0xff : 0x55);
    6d9a:	80 91 67 19 	lds	r24, 0x1967
    6d9e:	81 30       	cpi	r24, 0x01	; 1
    6da0:	11 f4       	brne	.+4      	; 0x6da6 <_Z19menuProcModelSelecth+0x584>
    6da2:	0f ef       	ldi	r16, 0xFF	; 255
    6da4:	01 c0       	rjmp	.+2      	; 0x6da8 <_Z19menuProcModelSelecth+0x586>
    6da6:	05 e5       	ldi	r16, 0x55	; 85
    6da8:	88 e0       	ldi	r24, 0x08	; 8
    6daa:	48 e7       	ldi	r20, 0x78	; 120
    6dac:	29 e0       	ldi	r18, 0x09	; 9
    6dae:	ee 24       	eor	r14, r14
    6db0:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
    6db4:	08 94       	sec
    6db6:	81 1c       	adc	r8, r1
    6db8:	91 1c       	adc	r9, r1
    6dba:	38 e0       	ldi	r19, 0x08	; 8
    6dbc:	b3 0e       	add	r11, r19
  if (sub-s_pgOfs < 1) s_pgOfs = max(0, sub-1);
  else if (sub-s_pgOfs > 5)  s_pgOfs = min(MAX_MODELS-7, sub-4);

  // printf("copy_mode=%d s_copySrcRow=%d s_copyTgtOfs=%d sub=%d\n", s_copyMode, s_copySrcRow, s_copyTgtOfs, sub); fflush(stdout);

  for (uint8_t i=0; i<7; i++) {
    6dbe:	8b 2d       	mov	r24, r11
    6dc0:	80 34       	cpi	r24, 0x40	; 64
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <_Z19menuProcModelSelecth+0x5a4>
    6dc4:	35 cf       	rjmp	.-406    	; 0x6c30 <_Z19menuProcModelSelecth+0x40e>
      lcd_filled_rect(9, y, DISPLAY_W-1-9, 7);
      lcd_rect(8, y-1, DISPLAY_W-1-7, 9, s_copyMode == COPY_MODE ? 0xff : 0x55);
    }
  }

  if (s_warning) {
    6dc6:	80 91 50 19 	lds	r24, 0x1950
    6dca:	90 91 51 19 	lds	r25, 0x1951
    6dce:	00 97       	sbiw	r24, 0x00	; 0
    6dd0:	89 f0       	breq	.+34     	; 0x6df4 <_Z19menuProcModelSelecth+0x5d2>
    eeLoadModelName(sub, name);
    6dd2:	81 2f       	mov	r24, r17
    6dd4:	8e 01       	movw	r16, r28
    6dd6:	0f 5f       	subi	r16, 0xFF	; 255
    6dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dda:	b8 01       	movw	r22, r16
    6ddc:	0e 94 dc 5f 	call	0xbfb8	; 0xbfb8 <_Z15eeLoadModelNamehPc>
    s_warning_info = name;
    6de0:	10 93 53 19 	sts	0x1953, r17
    6de4:	00 93 52 19 	sts	0x1952, r16
    s_warning_info_len = sizeof(g_model.name);
    6de8:	8a e0       	ldi	r24, 0x0A	; 10
    6dea:	80 93 54 19 	sts	0x1954, r24
    displayConfirmation(event);
    6dee:	87 2d       	mov	r24, r7
    6df0:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <_Z19displayConfirmationh>
  }
}
    6df4:	2a 96       	adiw	r28, 0x0a	; 10
    6df6:	0f b6       	in	r0, 0x3f	; 63
    6df8:	f8 94       	cli
    6dfa:	de bf       	out	0x3e, r29	; 62
    6dfc:	0f be       	out	0x3f, r0	; 63
    6dfe:	cd bf       	out	0x3d, r28	; 61
    6e00:	cf 91       	pop	r28
    6e02:	df 91       	pop	r29
    6e04:	1f 91       	pop	r17
    6e06:	0f 91       	pop	r16
    6e08:	ff 90       	pop	r15
    6e0a:	ef 90       	pop	r14
    6e0c:	df 90       	pop	r13
    6e0e:	cf 90       	pop	r12
    6e10:	bf 90       	pop	r11
    6e12:	af 90       	pop	r10
    6e14:	9f 90       	pop	r9
    6e16:	8f 90       	pop	r8
    6e18:	7f 90       	pop	r7
    6e1a:	5f 90       	pop	r5
    6e1c:	4f 90       	pop	r4
    6e1e:	08 95       	ret

00006e20 <_Z8EditNamehhPchhbRh>:

void EditName(uint8_t x, uint8_t y, char *name, uint8_t size, uint8_t event, bool active, uint8_t & cur)
{
    6e20:	af 92       	push	r10
    6e22:	bf 92       	push	r11
    6e24:	cf 92       	push	r12
    6e26:	df 92       	push	r13
    6e28:	ef 92       	push	r14
    6e2a:	ff 92       	push	r15
    6e2c:	0f 93       	push	r16
    6e2e:	1f 93       	push	r17
    6e30:	cf 93       	push	r28
    6e32:	df 93       	push	r29
    6e34:	f8 2e       	mov	r15, r24
    6e36:	16 2f       	mov	r17, r22
    6e38:	5a 01       	movw	r10, r20
    6e3a:	c0 2f       	mov	r28, r16
  if (active) {
    6e3c:	ee 20       	and	r14, r14
    6e3e:	09 f4       	brne	.+2      	; 0x6e42 <_Z8EditNamehhPchhbRh+0x22>
    6e40:	8f c0       	rjmp	.+286    	; 0x6f60 <_Z8EditNamehhPchhbRh+0x140>
    if (s_editMode) {
    6e42:	80 91 16 19 	lds	r24, 0x1916
    6e46:	88 23       	and	r24, r24
    6e48:	d9 f0       	breq	.+54     	; 0x6e80 <_Z8EditNamehhPchhbRh+0x60>
      switch(event) {
    6e4a:	04 32       	cpi	r16, 0x24	; 36
    6e4c:	59 f0       	breq	.+22     	; 0x6e64 <_Z8EditNamehhPchhbRh+0x44>
    6e4e:	05 32       	cpi	r16, 0x25	; 37
    6e50:	09 f0       	breq	.+2      	; 0x6e54 <_Z8EditNamehhPchhbRh+0x34>
    6e52:	81 c0       	rjmp	.+258    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
        case EVT_KEY_BREAK(KEY_LEFT):
          if (cur>0) cur--;
    6e54:	f6 01       	movw	r30, r12
    6e56:	80 81       	ld	r24, Z
    6e58:	88 23       	and	r24, r24
    6e5a:	09 f4       	brne	.+2      	; 0x6e5e <_Z8EditNamehhPchhbRh+0x3e>
    6e5c:	7c c0       	rjmp	.+248    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
    6e5e:	81 50       	subi	r24, 0x01	; 1
    6e60:	80 83       	st	Z, r24
    6e62:	79 c0       	rjmp	.+242    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
          break;
        case EVT_KEY_BREAK(KEY_RIGHT):
          if (cur<size-1) cur++;
    6e64:	f6 01       	movw	r30, r12
    6e66:	30 81       	ld	r19, Z
    6e68:	43 2f       	mov	r20, r19
    6e6a:	50 e0       	ldi	r21, 0x00	; 0
    6e6c:	82 2f       	mov	r24, r18
    6e6e:	90 e0       	ldi	r25, 0x00	; 0
    6e70:	01 97       	sbiw	r24, 0x01	; 1
    6e72:	48 17       	cp	r20, r24
    6e74:	59 07       	cpc	r21, r25
    6e76:	0c f0       	brlt	.+2      	; 0x6e7a <_Z8EditNamehhPchhbRh+0x5a>
    6e78:	6e c0       	rjmp	.+220    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
    6e7a:	3f 5f       	subi	r19, 0xFF	; 255
    6e7c:	30 83       	st	Z, r19
    6e7e:	6b c0       	rjmp	.+214    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
          break;
      }
    }
    else {
      cur = m_posHorz = 0;
    6e80:	10 92 4c 19 	sts	0x194C, r1
    6e84:	f6 01       	movw	r30, r12
    6e86:	10 82       	st	Z, r1
    6e88:	66 c0       	rjmp	.+204    	; 0x6f56 <_Z8EditNamehhPchhbRh+0x136>
    }
  }

  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? (s_editMode ? 0 : INVERS) : 0));
    6e8a:	02 e2       	ldi	r16, 0x22	; 34
    6e8c:	8f 2d       	mov	r24, r15
    6e8e:	61 2f       	mov	r22, r17
    6e90:	a5 01       	movw	r20, r10
    6e92:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
  if (active && s_editMode) {
    6e96:	ee 20       	and	r14, r14
    6e98:	09 f4       	brne	.+2      	; 0x6e9c <_Z8EditNamehhPchhbRh+0x7c>
    6e9a:	64 c0       	rjmp	.+200    	; 0x6f64 <_Z8EditNamehhPchhbRh+0x144>
    6e9c:	80 91 16 19 	lds	r24, 0x1916
    6ea0:	88 23       	and	r24, r24
    6ea2:	09 f4       	brne	.+2      	; 0x6ea6 <_Z8EditNamehhPchhbRh+0x86>
    6ea4:	5f c0       	rjmp	.+190    	; 0x6f64 <_Z8EditNamehhPchhbRh+0x144>
    char c = name[cur];
    6ea6:	f6 01       	movw	r30, r12
    6ea8:	80 81       	ld	r24, Z
    6eaa:	f5 01       	movw	r30, r10
    6eac:	e8 0f       	add	r30, r24
    6eae:	f1 1d       	adc	r31, r1
    6eb0:	d0 81       	ld	r29, Z
    char v = c;
    if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP)
    6eb2:	80 91 39 19 	lds	r24, 0x1939
    6eb6:	90 91 3a 19 	lds	r25, 0x193A
    6eba:	00 97       	sbiw	r24, 0x00	; 0
    6ebc:	41 f4       	brne	.+16     	; 0x6ece <_Z8EditNamehhPchhbRh+0xae>
    6ebe:	c2 36       	cpi	r28, 0x62	; 98
    6ec0:	31 f0       	breq	.+12     	; 0x6ece <_Z8EditNamehhPchhbRh+0xae>
    6ec2:	c3 36       	cpi	r28, 0x63	; 99
    6ec4:	21 f0       	breq	.+8      	; 0x6ece <_Z8EditNamehhPchhbRh+0xae>
    6ec6:	c2 34       	cpi	r28, 0x42	; 66
    6ec8:	11 f0       	breq	.+4      	; 0x6ece <_Z8EditNamehhPchhbRh+0xae>
    6eca:	c3 34       	cpi	r28, 0x43	; 67
    6ecc:	d9 f4       	brne	.+54     	; 0x6f04 <_Z8EditNamehhPchhbRh+0xe4>
#ifndef FORCEINLINE
#define FORCEINLINE inline __attribute__ ((always_inline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
    6ece:	6d 2f       	mov	r22, r29
    6ed0:	77 27       	eor	r23, r23
    6ed2:	67 fd       	sbrc	r22, 7
    6ed4:	70 95       	com	r23
    6ed6:	77 ff       	sbrs	r23, 7
    6ed8:	03 c0       	rjmp	.+6      	; 0x6ee0 <_Z8EditNamehhPchhbRh+0xc0>
    6eda:	70 95       	com	r23
    6edc:	61 95       	neg	r22
    6ede:	7f 4f       	sbci	r23, 0xFF	; 255
        || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP)) {
       v = checkIncDec(event, abs(v), 0, ZCHAR_MAX, 0);
    6ee0:	77 27       	eor	r23, r23
    6ee2:	67 fd       	sbrc	r22, 7
    6ee4:	70 95       	com	r23
    6ee6:	8c 2f       	mov	r24, r28
    6ee8:	40 e0       	ldi	r20, 0x00	; 0
    6eea:	50 e0       	ldi	r21, 0x00	; 0
    6eec:	28 e2       	ldi	r18, 0x28	; 40
    6eee:	30 e0       	ldi	r19, 0x00	; 0
    6ef0:	00 e0       	ldi	r16, 0x00	; 0
    6ef2:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    6ef6:	08 2f       	mov	r16, r24
       if (c < 0) v = -v;
    6ef8:	d7 fd       	sbrc	r29, 7
    6efa:	01 95       	neg	r16
       STORE_MODELVARS;
    6efc:	82 e0       	ldi	r24, 0x02	; 2
    6efe:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
    6f02:	01 c0       	rjmp	.+2      	; 0x6f06 <_Z8EditNamehhPchhbRh+0xe6>
    }
  }

  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? (s_editMode ? 0 : INVERS) : 0));
  if (active && s_editMode) {
    char c = name[cur];
    6f04:	0d 2f       	mov	r16, r29
       v = checkIncDec(event, abs(v), 0, ZCHAR_MAX, 0);
       if (c < 0) v = -v;
       STORE_MODELVARS;
    }

    if (v>=-26 && v<=26 && (event==EVT_KEY_LONG(KEY_RIGHT) || event==EVT_KEY_LONG(KEY_LEFT))) {
    6f06:	80 2f       	mov	r24, r16
    6f08:	86 5e       	subi	r24, 0xE6	; 230
    6f0a:	85 33       	cpi	r24, 0x35	; 53
    6f0c:	68 f4       	brcc	.+26     	; 0x6f28 <_Z8EditNamehhPchhbRh+0x108>
    6f0e:	8c 2f       	mov	r24, r28
    6f10:	84 58       	subi	r24, 0x84	; 132
    6f12:	82 30       	cpi	r24, 0x02	; 2
    6f14:	48 f4       	brcc	.+18     	; 0x6f28 <_Z8EditNamehhPchhbRh+0x108>
        v = -v; // toggle case
    6f16:	01 95       	neg	r16
        STORE_MODELVARS;
    6f18:	82 e0       	ldi	r24, 0x02	; 2
    6f1a:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
        if (event==EVT_KEY_LONG(KEY_LEFT))
    6f1e:	c5 38       	cpi	r28, 0x85	; 133
    6f20:	19 f4       	brne	.+6      	; 0x6f28 <_Z8EditNamehhPchhbRh+0x108>
          killEvents(KEY_LEFT);
    6f22:	85 e0       	ldi	r24, 0x05	; 5
    6f24:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
    }
    name[cur] = v;
    6f28:	f6 01       	movw	r30, r12
    6f2a:	80 81       	ld	r24, Z
    6f2c:	f5 01       	movw	r30, r10
    6f2e:	e8 0f       	add	r30, r24
    6f30:	f1 1d       	adc	r31, r1
    6f32:	00 83       	st	Z, r16
    lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
    6f34:	f6 01       	movw	r30, r12
    6f36:	80 81       	ld	r24, Z
    6f38:	c8 2f       	mov	r28, r24
    6f3a:	cc 0f       	add	r28, r28
    6f3c:	c8 0f       	add	r28, r24
    6f3e:	cc 0f       	add	r28, r28
    6f40:	cf 0d       	add	r28, r15
    6f42:	80 2f       	mov	r24, r16
    6f44:	0e 94 ef 06 	call	0xdde	; 0xdde <_Z8idx2chara>
    6f48:	48 2f       	mov	r20, r24
    6f4a:	8c 2f       	mov	r24, r28
    6f4c:	61 2f       	mov	r22, r17
    6f4e:	22 e0       	ldi	r18, 0x02	; 2
    6f50:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    6f54:	07 c0       	rjmp	.+14     	; 0x6f64 <_Z8EditNamehhPchhbRh+0x144>
    else {
      cur = m_posHorz = 0;
    }
  }

  lcd_putsnAtt(x, y, name, size, ZCHAR | (active ? (s_editMode ? 0 : INVERS) : 0));
    6f56:	80 91 16 19 	lds	r24, 0x1916
    6f5a:	88 23       	and	r24, r24
    6f5c:	09 f4       	brne	.+2      	; 0x6f60 <_Z8EditNamehhPchhbRh+0x140>
    6f5e:	95 cf       	rjmp	.-214    	; 0x6e8a <_Z8EditNamehhPchhbRh+0x6a>
    6f60:	00 e2       	ldi	r16, 0x20	; 32
    6f62:	94 cf       	rjmp	.-216    	; 0x6e8c <_Z8EditNamehhPchhbRh+0x6c>
          killEvents(KEY_LEFT);
    }
    name[cur] = v;
    lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
  }
}
    6f64:	df 91       	pop	r29
    6f66:	cf 91       	pop	r28
    6f68:	1f 91       	pop	r17
    6f6a:	0f 91       	pop	r16
    6f6c:	ff 90       	pop	r15
    6f6e:	ef 90       	pop	r14
    6f70:	df 90       	pop	r13
    6f72:	cf 90       	pop	r12
    6f74:	bf 90       	pop	r11
    6f76:	af 90       	pop	r10
    6f78:	08 95       	ret

00006f7a <_Z16menuProcPhaseOneh>:
}

static uint8_t s_currIdx;

void menuProcPhaseOne(uint8_t event)
{
    6f7a:	2f 92       	push	r2
    6f7c:	3f 92       	push	r3
    6f7e:	4f 92       	push	r4
    6f80:	5f 92       	push	r5
    6f82:	7f 92       	push	r7
    6f84:	8f 92       	push	r8
    6f86:	9f 92       	push	r9
    6f88:	af 92       	push	r10
    6f8a:	bf 92       	push	r11
    6f8c:	cf 92       	push	r12
    6f8e:	df 92       	push	r13
    6f90:	ef 92       	push	r14
    6f92:	ff 92       	push	r15
    6f94:	0f 93       	push	r16
    6f96:	1f 93       	push	r17
    6f98:	cf 93       	push	r28
    6f9a:	df 93       	push	r29
    6f9c:	98 2e       	mov	r9, r24
  PhaseData *phase = phaseaddress(s_currIdx);
    6f9e:	80 91 69 19 	lds	r24, 0x1969
    6fa2:	0e 94 11 07 	call	0xe22	; 0xe22 <_Z12phaseaddressh>
    6fa6:	5c 01       	movw	r10, r24
  putsFlightPhase(13*FW, 0, s_currIdx+1, 0);
    6fa8:	40 91 69 19 	lds	r20, 0x1969
    6fac:	4f 5f       	subi	r20, 0xFF	; 255
    6fae:	8e e4       	ldi	r24, 0x4E	; 78
    6fb0:	60 e0       	ldi	r22, 0x00	; 0
    6fb2:	20 e0       	ldi	r18, 0x00	; 0
    6fb4:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>

  SUBMENU("FLIGHT PHASE", (s_currIdx==0 ? 3 : 5), {6, 0, 3/*, 0, 0*/});
    6fb8:	80 e0       	ldi	r24, 0x00	; 0
    6fba:	60 e0       	ldi	r22, 0x00	; 0
    6fbc:	4b eb       	ldi	r20, 0xBB	; 187
    6fbe:	55 e0       	ldi	r21, 0x05	; 5
    6fc0:	22 e0       	ldi	r18, 0x02	; 2
    6fc2:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    6fc6:	80 91 69 19 	lds	r24, 0x1969
    6fca:	88 23       	and	r24, r24
    6fcc:	11 f4       	brne	.+4      	; 0x6fd2 <_Z16menuProcPhaseOneh+0x58>
    6fce:	92 e0       	ldi	r25, 0x02	; 2
    6fd0:	01 c0       	rjmp	.+2      	; 0x6fd4 <_Z16menuProcPhaseOneh+0x5a>
    6fd2:	94 e0       	ldi	r25, 0x04	; 4
    6fd4:	89 2d       	mov	r24, r9
    6fd6:	60 e0       	ldi	r22, 0x00	; 0
    6fd8:	40 e0       	ldi	r20, 0x00	; 0
    6fda:	50 e0       	ldi	r21, 0x00	; 0
    6fdc:	20 e0       	ldi	r18, 0x00	; 0
    6fde:	03 ee       	ldi	r16, 0xE3	; 227
    6fe0:	16 e0       	ldi	r17, 0x06	; 6
    6fe2:	f2 e0       	ldi	r31, 0x02	; 2
    6fe4:	ef 2e       	mov	r14, r31
    6fe6:	c9 2e       	mov	r12, r25
    6fe8:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    6fec:	88 23       	and	r24, r24
    6fee:	09 f4       	brne	.+2      	; 0x6ff2 <_Z16menuProcPhaseOneh+0x78>
    6ff0:	20 c1       	rjmp	.+576    	; 0x7232 <_Z16menuProcPhaseOneh+0x2b8>

  int8_t sub = m_posVert;
    6ff2:	40 90 4b 19 	lds	r4, 0x194B

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    6ff6:	c0 e1       	ldi	r28, 0x10	; 16
    6ff8:	88 24       	eor	r8, r8
    6ffa:	10 e0       	ldi	r17, 0x00	; 0
    if (s_currIdx == 0 && i==1) i = 3;
    uint8_t attr = sub==k ? INVERS : 0;
    6ffc:	55 24       	eor	r5, r5
    6ffe:	47 fc       	sbrc	r4, 7
    7000:	50 94       	com	r5
    switch(i) {
      case 0:
        lcd_puts_P(0, y, PSTR("Name"));
        EditName(10*FW, y, phase->name, sizeof(phase->name), event, attr, m_posHorz);
    7002:	e6 e0       	ldi	r30, 0x06	; 6
    7004:	2e 2e       	mov	r2, r30
    7006:	31 2c       	mov	r3, r1
    7008:	2a 0c       	add	r2, r10
    700a:	3b 1c       	adc	r3, r11
  SUBMENU("FLIGHT PHASE", (s_currIdx==0 ? 3 : 5), {6, 0, 3/*, 0, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    if (s_currIdx == 0 && i==1) i = 3;
    700c:	80 91 69 19 	lds	r24, 0x1969
    7010:	88 23       	and	r24, r24
    7012:	19 f4       	brne	.+6      	; 0x701a <_Z16menuProcPhaseOneh+0xa0>
    7014:	11 30       	cpi	r17, 0x01	; 1
    7016:	09 f4       	brne	.+2      	; 0x701a <_Z16menuProcPhaseOneh+0xa0>
    7018:	13 e0       	ldi	r17, 0x03	; 3
    uint8_t attr = sub==k ? INVERS : 0;
    701a:	88 2d       	mov	r24, r8
    701c:	90 e0       	ldi	r25, 0x00	; 0
    701e:	48 16       	cp	r4, r24
    7020:	59 06       	cpc	r5, r25
    7022:	11 f4       	brne	.+4      	; 0x7028 <_Z16menuProcPhaseOneh+0xae>
    7024:	d2 e0       	ldi	r29, 0x02	; 2
    7026:	01 c0       	rjmp	.+2      	; 0x702a <_Z16menuProcPhaseOneh+0xb0>
    7028:	d0 e0       	ldi	r29, 0x00	; 0
    switch(i) {
    702a:	12 30       	cpi	r17, 0x02	; 2
    702c:	09 f4       	brne	.+2      	; 0x7030 <_Z16menuProcPhaseOneh+0xb6>
    702e:	40 c0       	rjmp	.+128    	; 0x70b0 <_Z16menuProcPhaseOneh+0x136>
    7030:	13 30       	cpi	r17, 0x03	; 3
    7032:	30 f4       	brcc	.+12     	; 0x7040 <_Z16menuProcPhaseOneh+0xc6>
    7034:	11 23       	and	r17, r17
    7036:	59 f0       	breq	.+22     	; 0x704e <_Z16menuProcPhaseOneh+0xd4>
    7038:	11 30       	cpi	r17, 0x01	; 1
    703a:	09 f0       	breq	.+2      	; 0x703e <_Z16menuProcPhaseOneh+0xc4>
    703c:	f4 c0       	rjmp	.+488    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
    703e:	1e c0       	rjmp	.+60     	; 0x707c <_Z16menuProcPhaseOneh+0x102>
    7040:	13 30       	cpi	r17, 0x03	; 3
    7042:	09 f4       	brne	.+2      	; 0x7046 <_Z16menuProcPhaseOneh+0xcc>
    7044:	ae c0       	rjmp	.+348    	; 0x71a2 <_Z16menuProcPhaseOneh+0x228>
    7046:	14 30       	cpi	r17, 0x04	; 4
    7048:	09 f0       	breq	.+2      	; 0x704c <_Z16menuProcPhaseOneh+0xd2>
    704a:	ed c0       	rjmp	.+474    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
    704c:	c9 c0       	rjmp	.+402    	; 0x71e0 <_Z16menuProcPhaseOneh+0x266>
      case 0:
        lcd_puts_P(0, y, PSTR("Name"));
    704e:	80 e0       	ldi	r24, 0x00	; 0
    7050:	6c 2f       	mov	r22, r28
    7052:	46 eb       	ldi	r20, 0xB6	; 182
    7054:	55 e0       	ldi	r21, 0x05	; 5
    7056:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        EditName(10*FW, y, phase->name, sizeof(phase->name), event, attr, m_posHorz);
    705a:	91 e0       	ldi	r25, 0x01	; 1
    705c:	dd 23       	and	r29, r29
    705e:	09 f4       	brne	.+2      	; 0x7062 <_Z16menuProcPhaseOneh+0xe8>
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	8c e3       	ldi	r24, 0x3C	; 60
    7064:	6c 2f       	mov	r22, r28
    7066:	a1 01       	movw	r20, r2
    7068:	26 e0       	ldi	r18, 0x06	; 6
    706a:	09 2d       	mov	r16, r9
    706c:	e9 2e       	mov	r14, r25
    706e:	7c e4       	ldi	r23, 0x4C	; 76
    7070:	c7 2e       	mov	r12, r23
    7072:	79 e1       	ldi	r23, 0x19	; 25
    7074:	d7 2e       	mov	r13, r23
    7076:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_Z8EditNamehhPchhbRh>
        break;
    707a:	d5 c0       	rjmp	.+426    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
      case 1:
        lcd_puts_P(0, y, PSTR("Switch"));
    707c:	80 e0       	ldi	r24, 0x00	; 0
    707e:	6c 2f       	mov	r22, r28
    7080:	4f ea       	ldi	r20, 0xAF	; 175
    7082:	55 e0       	ldi	r21, 0x05	; 5
    7084:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        putsSwitches(10*FW,  y, phase->swtch, attr);
    7088:	8c e3       	ldi	r24, 0x3C	; 60
    708a:	6c 2f       	mov	r22, r28
    708c:	f5 01       	movw	r30, r10
    708e:	45 81       	ldd	r20, Z+5	; 0x05
    7090:	2d 2f       	mov	r18, r29
    7092:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
    7096:	dd 23       	and	r29, r29
    7098:	09 f4       	brne	.+2      	; 0x709c <_Z16menuProcPhaseOneh+0x122>
    709a:	c5 c0       	rjmp	.+394    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
    709c:	89 2d       	mov	r24, r9
    709e:	f5 01       	movw	r30, r10
    70a0:	65 81       	ldd	r22, Z+5	; 0x05
    70a2:	41 ef       	ldi	r20, 0xF1	; 241
    70a4:	2f e0       	ldi	r18, 0x0F	; 15
    70a6:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    70aa:	f5 01       	movw	r30, r10
    70ac:	85 83       	std	Z+5, r24	; 0x05
    70ae:	bb c0       	rjmp	.+374    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
        break;
      case 2:
        lcd_puts_P(0, y, PSTR("Trims"));
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	6c 2f       	mov	r22, r28
    70b4:	49 ea       	ldi	r20, 0xA9	; 169
    70b6:	55 e0       	ldi	r21, 0x05	; 5
    70b8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    70bc:	6c e3       	ldi	r22, 0x3C	; 60
    70be:	e6 2e       	mov	r14, r22
        for (uint8_t t=0; t<NUM_STICKS; t++) {
    70c0:	ff 24       	eor	r15, r15
          int16_t v = getTrimValue(s_currIdx, t);
    70c2:	80 91 69 19 	lds	r24, 0x1969
    70c6:	6f 2d       	mov	r22, r15
    70c8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>
    70cc:	6c 01       	movw	r12, r24
          if (v > TRIM_EXTENDED_MAX) {
    70ce:	f1 e0       	ldi	r31, 0x01	; 1
    70d0:	85 3f       	cpi	r24, 0xF5	; 245
    70d2:	9f 07       	cpc	r25, r31
    70d4:	e4 f0       	brlt	.+56     	; 0x710e <_Z16menuProcPhaseOneh+0x194>
            uint8_t p = v - TRIM_EXTENDED_MAX - 1;
    70d6:	48 2f       	mov	r20, r24
    70d8:	45 5f       	subi	r20, 0xF5	; 245
            if (p >= s_currIdx) p++;
    70da:	80 91 69 19 	lds	r24, 0x1969
    70de:	48 17       	cp	r20, r24
    70e0:	08 f0       	brcs	.+2      	; 0x70e4 <_Z16menuProcPhaseOneh+0x16a>
    70e2:	4f 5f       	subi	r20, 0xFF	; 255
            lcd_putcAtt((10+t)*FW, y, '0'+p, (attr && m_posHorz==t) ? (s_editMode ? BLINK : INVERS) : 0);
    70e4:	40 5d       	subi	r20, 0xD0	; 208
    70e6:	dd 23       	and	r29, r29
    70e8:	51 f0       	breq	.+20     	; 0x70fe <_Z16menuProcPhaseOneh+0x184>
    70ea:	80 91 4c 19 	lds	r24, 0x194C
    70ee:	8f 15       	cp	r24, r15
    70f0:	31 f4       	brne	.+12     	; 0x70fe <_Z16menuProcPhaseOneh+0x184>
    70f2:	80 91 16 19 	lds	r24, 0x1916
    70f6:	88 23       	and	r24, r24
    70f8:	21 f0       	breq	.+8      	; 0x7102 <_Z16menuProcPhaseOneh+0x188>
    70fa:	21 e0       	ldi	r18, 0x01	; 1
    70fc:	03 c0       	rjmp	.+6      	; 0x7104 <_Z16menuProcPhaseOneh+0x18a>
    70fe:	20 e0       	ldi	r18, 0x00	; 0
    7100:	01 c0       	rjmp	.+2      	; 0x7104 <_Z16menuProcPhaseOneh+0x18a>
    7102:	22 e0       	ldi	r18, 0x02	; 2
    7104:	8e 2d       	mov	r24, r14
    7106:	6c 2f       	mov	r22, r28
    7108:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    710c:	19 c0       	rjmp	.+50     	; 0x7140 <_Z16menuProcPhaseOneh+0x1c6>
    710e:	4f 2d       	mov	r20, r15
    7110:	4f 5f       	subi	r20, 0xFF	; 255
          }
          else {
            v = TRIM_EXTENDED_MAX;
            putsChnLetter((10+t)*FW, y, t+1, (attr && m_posHorz==t) ? (s_editMode ? BLINK : INVERS) : 0);
    7112:	dd 23       	and	r29, r29
    7114:	51 f0       	breq	.+20     	; 0x712a <_Z16menuProcPhaseOneh+0x1b0>
    7116:	80 91 4c 19 	lds	r24, 0x194C
    711a:	8f 15       	cp	r24, r15
    711c:	31 f4       	brne	.+12     	; 0x712a <_Z16menuProcPhaseOneh+0x1b0>
    711e:	80 91 16 19 	lds	r24, 0x1916
    7122:	88 23       	and	r24, r24
    7124:	21 f0       	breq	.+8      	; 0x712e <_Z16menuProcPhaseOneh+0x1b4>
    7126:	21 e0       	ldi	r18, 0x01	; 1
    7128:	03 c0       	rjmp	.+6      	; 0x7130 <_Z16menuProcPhaseOneh+0x1b6>
    712a:	20 e0       	ldi	r18, 0x00	; 0
    712c:	01 c0       	rjmp	.+2      	; 0x7130 <_Z16menuProcPhaseOneh+0x1b6>
    712e:	22 e0       	ldi	r18, 0x02	; 2
    7130:	8e 2d       	mov	r24, r14
    7132:	6c 2f       	mov	r22, r28
    7134:	0e 94 7e 6b 	call	0xd6fc	; 0xd6fc <_Z13putsChnLetterhhhh>
            uint8_t p = v - TRIM_EXTENDED_MAX - 1;
            if (p >= s_currIdx) p++;
            lcd_putcAtt((10+t)*FW, y, '0'+p, (attr && m_posHorz==t) ? (s_editMode ? BLINK : INVERS) : 0);
          }
          else {
            v = TRIM_EXTENDED_MAX;
    7138:	54 ef       	ldi	r21, 0xF4	; 244
    713a:	c5 2e       	mov	r12, r21
    713c:	51 e0       	ldi	r21, 0x01	; 1
    713e:	d5 2e       	mov	r13, r21
            putsChnLetter((10+t)*FW, y, t+1, (attr && m_posHorz==t) ? (s_editMode ? BLINK : INVERS) : 0);
          }
          if (attr && m_posHorz==t && (s_editMode || p1valdiff)) {
    7140:	dd 23       	and	r29, r29
    7142:	39 f1       	breq	.+78     	; 0x7192 <_Z16menuProcPhaseOneh+0x218>
    7144:	70 90 4c 19 	lds	r7, 0x194C
    7148:	7f 14       	cp	r7, r15
    714a:	19 f5       	brne	.+70     	; 0x7192 <_Z16menuProcPhaseOneh+0x218>
    714c:	80 91 16 19 	lds	r24, 0x1916
    7150:	88 23       	and	r24, r24
    7152:	31 f4       	brne	.+12     	; 0x7160 <_Z16menuProcPhaseOneh+0x1e6>
    7154:	80 91 39 19 	lds	r24, 0x1939
    7158:	90 91 3a 19 	lds	r25, 0x193A
    715c:	00 97       	sbiw	r24, 0x00	; 0
    715e:	c9 f0       	breq	.+50     	; 0x7192 <_Z16menuProcPhaseOneh+0x218>
            v = checkIncDec(event, v, TRIM_EXTENDED_MAX, TRIM_EXTENDED_MAX+MAX_PHASES-1, EE_MODEL);
    7160:	89 2d       	mov	r24, r9
    7162:	b6 01       	movw	r22, r12
    7164:	44 ef       	ldi	r20, 0xF4	; 244
    7166:	51 e0       	ldi	r21, 0x01	; 1
    7168:	28 ef       	ldi	r18, 0xF8	; 248
    716a:	31 e0       	ldi	r19, 0x01	; 1
    716c:	02 e0       	ldi	r16, 0x02	; 2
    716e:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    7172:	ac 01       	movw	r20, r24
            if (checkIncDec_Ret) {
    7174:	80 91 3b 19 	lds	r24, 0x193B
    7178:	88 23       	and	r24, r24
    717a:	59 f0       	breq	.+22     	; 0x7192 <_Z16menuProcPhaseOneh+0x218>
              if (v == TRIM_EXTENDED_MAX) v = 0;
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	44 3f       	cpi	r20, 0xF4	; 244
    7180:	58 07       	cpc	r21, r24
    7182:	11 f4       	brne	.+4      	; 0x7188 <_Z16menuProcPhaseOneh+0x20e>
    7184:	40 e0       	ldi	r20, 0x00	; 0
    7186:	50 e0       	ldi	r21, 0x00	; 0
              setTrimValue(s_currIdx, t, v);
    7188:	80 91 69 19 	lds	r24, 0x1969
    718c:	67 2d       	mov	r22, r7
    718e:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z12setTrimValuehhi>
        putsSwitches(10*FW,  y, phase->swtch, attr);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
        break;
      case 2:
        lcd_puts_P(0, y, PSTR("Trims"));
        for (uint8_t t=0; t<NUM_STICKS; t++) {
    7192:	f3 94       	inc	r15
    7194:	e6 e0       	ldi	r30, 0x06	; 6
    7196:	ee 0e       	add	r14, r30
    7198:	ff 2d       	mov	r31, r15
    719a:	f4 30       	cpi	r31, 0x04	; 4
    719c:	09 f0       	breq	.+2      	; 0x71a0 <_Z16menuProcPhaseOneh+0x226>
    719e:	91 cf       	rjmp	.-222    	; 0x70c2 <_Z16menuProcPhaseOneh+0x148>
    71a0:	42 c0       	rjmp	.+132    	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
            }
          }
        }
        break;
      case 3:
        lcd_puts_P(0, y, PSTR("Fade In"));
    71a2:	80 e0       	ldi	r24, 0x00	; 0
    71a4:	6c 2f       	mov	r22, r28
    71a6:	41 ea       	ldi	r20, 0xA1	; 161
    71a8:	55 e0       	ldi	r21, 0x05	; 5
    71aa:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(10*FW, y, phase->fadeIn, attr|LEFT);
    71ae:	f5 01       	movw	r30, r10
    71b0:	44 85       	ldd	r20, Z+12	; 0x0c
    71b2:	4f 70       	andi	r20, 0x0F	; 15
    71b4:	2d 2f       	mov	r18, r29
    71b6:	20 68       	ori	r18, 0x80	; 128
    71b8:	8c e3       	ldi	r24, 0x3C	; 60
    71ba:	6c 2f       	mov	r22, r28
    71bc:	50 e0       	ldi	r21, 0x00	; 0
    71be:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeIn, 0, 15);
    71c2:	dd 23       	and	r29, r29
    71c4:	81 f1       	breq	.+96     	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
    71c6:	f5 01       	movw	r30, r10
    71c8:	64 85       	ldd	r22, Z+12	; 0x0c
    71ca:	6f 70       	andi	r22, 0x0F	; 15
    71cc:	89 2d       	mov	r24, r9
    71ce:	40 e0       	ldi	r20, 0x00	; 0
    71d0:	2f e0       	ldi	r18, 0x0F	; 15
    71d2:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    71d6:	8f 70       	andi	r24, 0x0F	; 15
    71d8:	f5 01       	movw	r30, r10
    71da:	94 85       	ldd	r25, Z+12	; 0x0c
    71dc:	90 7f       	andi	r25, 0xF0	; 240
    71de:	21 c0       	rjmp	.+66     	; 0x7222 <_Z16menuProcPhaseOneh+0x2a8>
        break;
      case 4:
        lcd_puts_P(0, y, PSTR("Fade Out"));
    71e0:	80 e0       	ldi	r24, 0x00	; 0
    71e2:	6c 2f       	mov	r22, r28
    71e4:	48 e9       	ldi	r20, 0x98	; 152
    71e6:	55 e0       	ldi	r21, 0x05	; 5
    71e8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(10*FW, y, phase->fadeOut, attr|LEFT);
    71ec:	f5 01       	movw	r30, r10
    71ee:	44 85       	ldd	r20, Z+12	; 0x0c
    71f0:	42 95       	swap	r20
    71f2:	4f 70       	andi	r20, 0x0F	; 15
    71f4:	2d 2f       	mov	r18, r29
    71f6:	20 68       	ori	r18, 0x80	; 128
    71f8:	8c e3       	ldi	r24, 0x3C	; 60
    71fa:	6c 2f       	mov	r22, r28
    71fc:	50 e0       	ldi	r21, 0x00	; 0
    71fe:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeOut, 0, 15);
    7202:	dd 23       	and	r29, r29
    7204:	81 f0       	breq	.+32     	; 0x7226 <_Z16menuProcPhaseOneh+0x2ac>
    7206:	f5 01       	movw	r30, r10
    7208:	64 85       	ldd	r22, Z+12	; 0x0c
    720a:	62 95       	swap	r22
    720c:	6f 70       	andi	r22, 0x0F	; 15
    720e:	89 2d       	mov	r24, r9
    7210:	40 e0       	ldi	r20, 0x00	; 0
    7212:	2f e0       	ldi	r18, 0x0F	; 15
    7214:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7218:	82 95       	swap	r24
    721a:	80 7f       	andi	r24, 0xF0	; 240
    721c:	f5 01       	movw	r30, r10
    721e:	94 85       	ldd	r25, Z+12	; 0x0c
    7220:	9f 70       	andi	r25, 0x0F	; 15
    7222:	98 2b       	or	r25, r24
    7224:	94 87       	std	Z+12, r25	; 0x0c

  SUBMENU("FLIGHT PHASE", (s_currIdx==0 ? 3 : 5), {6, 0, 3/*, 0, 0*/});

  int8_t sub = m_posVert;

  for (uint8_t i=0, k=0, y=2*FH; i<5; i++, k++, y+=FH) {
    7226:	1f 5f       	subi	r17, 0xFF	; 255
    7228:	15 30       	cpi	r17, 0x05	; 5
    722a:	18 f4       	brcc	.+6      	; 0x7232 <_Z16menuProcPhaseOneh+0x2b8>
    722c:	83 94       	inc	r8
    722e:	c8 5f       	subi	r28, 0xF8	; 248
    7230:	ed ce       	rjmp	.-550    	; 0x700c <_Z16menuProcPhaseOneh+0x92>
        lcd_outdezAtt(10*FW, y, phase->fadeOut, attr|LEFT);
        if(attr) CHECK_INCDEC_MODELVAR(event, phase->fadeOut, 0, 15);
        break;
    }
  }
}
    7232:	df 91       	pop	r29
    7234:	cf 91       	pop	r28
    7236:	1f 91       	pop	r17
    7238:	0f 91       	pop	r16
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
    723e:	df 90       	pop	r13
    7240:	cf 90       	pop	r12
    7242:	bf 90       	pop	r11
    7244:	af 90       	pop	r10
    7246:	9f 90       	pop	r9
    7248:	8f 90       	pop	r8
    724a:	7f 90       	pop	r7
    724c:	5f 90       	pop	r5
    724e:	4f 90       	pop	r4
    7250:	3f 90       	pop	r3
    7252:	2f 90       	pop	r2
    7254:	08 95       	ret

00007256 <_Z13menuProcModelh>:
    lcd_putcAtt(x+cur*FW, y, idx2char(v), INVERS);
  }
}

void menuProcModel(uint8_t event)
{
    7256:	af 92       	push	r10
    7258:	bf 92       	push	r11
    725a:	cf 92       	push	r12
    725c:	df 92       	push	r13
    725e:	ef 92       	push	r14
    7260:	ff 92       	push	r15
    7262:	0f 93       	push	r16
    7264:	1f 93       	push	r17
    7266:	df 93       	push	r29
    7268:	cf 93       	push	r28
    726a:	0f 92       	push	r0
    726c:	cd b7       	in	r28, 0x3d	; 61
    726e:	de b7       	in	r29, 0x3e	; 62
    7270:	a8 2e       	mov	r10, r24
  MENU("SETUP", menuTabModel, e_Model, 13, {0,sizeof(g_model.name)-1,1,0,0,0,0,0,0,0,6,2/*,0*/});
    7272:	80 e0       	ldi	r24, 0x00	; 0
    7274:	60 e0       	ldi	r22, 0x00	; 0
    7276:	49 ea       	ldi	r20, 0xA9	; 169
    7278:	56 e0       	ldi	r21, 0x06	; 6
    727a:	22 e0       	ldi	r18, 0x02	; 2
    727c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    7280:	8a 2d       	mov	r24, r10
    7282:	61 e0       	ldi	r22, 0x01	; 1
    7284:	47 ea       	ldi	r20, 0xA7	; 167
    7286:	56 e0       	ldi	r21, 0x06	; 6
    7288:	2c e0       	ldi	r18, 0x0C	; 12
    728a:	06 ee       	ldi	r16, 0xE6	; 230
    728c:	16 e0       	ldi	r17, 0x06	; 6
    728e:	9b e0       	ldi	r25, 0x0B	; 11
    7290:	e9 2e       	mov	r14, r25
    7292:	bc e0       	ldi	r27, 0x0C	; 12
    7294:	cb 2e       	mov	r12, r27
    7296:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    729a:	88 23       	and	r24, r24
    729c:	09 f4       	brne	.+2      	; 0x72a0 <_Z13menuProcModelh+0x4a>
    729e:	7d c3       	rjmp	.+1786   	; 0x799a <_Z13menuProcModelh+0x744>

  uint8_t  sub    = m_posVert;
    72a0:	b0 90 4b 19 	lds	r11, 0x194B
  uint8_t y = 1*FH;

  lcd_outdezNAtt(7*FW,0,g_eeGeneral.currModel+1,INVERS+LEADING0,2);
    72a4:	40 91 6b 12 	lds	r20, 0x126B
    72a8:	50 e0       	ldi	r21, 0x00	; 0
    72aa:	4f 5f       	subi	r20, 0xFF	; 255
    72ac:	5f 4f       	sbci	r21, 0xFF	; 255
    72ae:	8a e2       	ldi	r24, 0x2A	; 42
    72b0:	60 e0       	ldi	r22, 0x00	; 0
    72b2:	22 e1       	ldi	r18, 0x12	; 18
    72b4:	02 e0       	ldi	r16, 0x02	; 2
    72b6:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>

  uint8_t subN = 1;
  if(s_pgOfs<subN) {
    72ba:	80 91 15 19 	lds	r24, 0x1915
    72be:	88 23       	and	r24, r24
    72c0:	c9 f4       	brne	.+50     	; 0x72f4 <_Z13menuProcModelh+0x9e>
    lcd_puts_P(0*FW, y, PSTR("Name"));
    72c2:	68 e0       	ldi	r22, 0x08	; 8
    72c4:	44 ea       	ldi	r20, 0xA4	; 164
    72c6:	56 e0       	ldi	r21, 0x06	; 6
    72c8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    EditName(10*FW, y, g_model.name, sizeof(g_model.name), event, sub==subN, m_posHorz);
    72cc:	91 e0       	ldi	r25, 0x01	; 1
    72ce:	4b 2d       	mov	r20, r11
    72d0:	41 30       	cpi	r20, 0x01	; 1
    72d2:	09 f0       	breq	.+2      	; 0x72d6 <_Z13menuProcModelh+0x80>
    72d4:	90 e0       	ldi	r25, 0x00	; 0
    72d6:	8c e3       	ldi	r24, 0x3C	; 60
    72d8:	68 e0       	ldi	r22, 0x08	; 8
    72da:	4b e8       	ldi	r20, 0x8B	; 139
    72dc:	52 e1       	ldi	r21, 0x12	; 18
    72de:	2a e0       	ldi	r18, 0x0A	; 10
    72e0:	0a 2d       	mov	r16, r10
    72e2:	e9 2e       	mov	r14, r25
    72e4:	ac e4       	ldi	r26, 0x4C	; 76
    72e6:	ca 2e       	mov	r12, r26
    72e8:	a9 e1       	ldi	r26, 0x19	; 25
    72ea:	da 2e       	mov	r13, r26
    72ec:	0e 94 10 37 	call	0x6e20	; 0x6e20 <_Z8EditNamehhPchhbRh>
    if((y+=FH)>7*FH) return;
    72f0:	10 e1       	ldi	r17, 0x10	; 16
    72f2:	01 c0       	rjmp	.+2      	; 0x72f6 <_Z13menuProcModelh+0xa0>
void menuProcModel(uint8_t event)
{
  MENU("SETUP", menuTabModel, e_Model, 13, {0,sizeof(g_model.name)-1,1,0,0,0,0,0,0,0,6,2/*,0*/});

  uint8_t  sub    = m_posVert;
  uint8_t y = 1*FH;
    72f4:	18 e0       	ldi	r17, 0x08	; 8
    lcd_puts_P(0*FW, y, PSTR("Name"));
    EditName(10*FW, y, g_model.name, sizeof(g_model.name), event, sub==subN, m_posHorz);
    if((y+=FH)>7*FH) return;
  }subN++;

  if(s_pgOfs<subN) {
    72f6:	80 91 15 19 	lds	r24, 0x1915
    72fa:	82 30       	cpi	r24, 0x02	; 2
    72fc:	08 f0       	brcs	.+2      	; 0x7300 <_Z13menuProcModelh+0xaa>
    72fe:	88 c0       	rjmp	.+272    	; 0x7410 <_Z13menuProcModelh+0x1ba>
    lcd_puts_P(0*FW, y, PSTR("Timer"));
    7300:	80 e0       	ldi	r24, 0x00	; 0
    7302:	61 2f       	mov	r22, r17
    7304:	4e e9       	ldi	r20, 0x9E	; 158
    7306:	56 e0       	ldi	r21, 0x06	; 6
    7308:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    putsTime(10*FW+1, y, g_model.tmrVal,
        (sub==subN && m_posHorz==0 ? (s_editMode ? BLINK : INVERS):0),
        (sub==subN && m_posHorz==1 ? (s_editMode ? BLINK : INVERS):0) );
    730c:	40 91 96 12 	lds	r20, 0x1296
    7310:	50 91 97 12 	lds	r21, 0x1297
    7314:	8b 2d       	mov	r24, r11
    7316:	82 30       	cpi	r24, 0x02	; 2
    7318:	a1 f4       	brne	.+40     	; 0x7342 <_Z13menuProcModelh+0xec>
    731a:	80 91 4c 19 	lds	r24, 0x194C
    731e:	88 23       	and	r24, r24
    7320:	39 f4       	brne	.+14     	; 0x7330 <_Z13menuProcModelh+0xda>
    7322:	80 91 16 19 	lds	r24, 0x1916
    7326:	88 23       	and	r24, r24
    7328:	09 f4       	brne	.+2      	; 0x732c <_Z13menuProcModelh+0xd6>
    732a:	34 c3       	rjmp	.+1640   	; 0x7994 <_Z13menuProcModelh+0x73e>
    732c:	21 e0       	ldi	r18, 0x01	; 1
    732e:	33 c3       	rjmp	.+1638   	; 0x7996 <_Z13menuProcModelh+0x740>
    7330:	81 30       	cpi	r24, 0x01	; 1
    7332:	39 f4       	brne	.+14     	; 0x7342 <_Z13menuProcModelh+0xec>
    7334:	80 91 16 19 	lds	r24, 0x1916
    7338:	88 23       	and	r24, r24
    733a:	29 f0       	breq	.+10     	; 0x7346 <_Z13menuProcModelh+0xf0>
    733c:	20 e0       	ldi	r18, 0x00	; 0
    733e:	01 e0       	ldi	r16, 0x01	; 1
    7340:	04 c0       	rjmp	.+8      	; 0x734a <_Z13menuProcModelh+0xf4>
    7342:	20 e0       	ldi	r18, 0x00	; 0
    7344:	28 c3       	rjmp	.+1616   	; 0x7996 <_Z13menuProcModelh+0x740>
    7346:	20 e0       	ldi	r18, 0x00	; 0
    7348:	02 e0       	ldi	r16, 0x02	; 2
    734a:	8d e3       	ldi	r24, 0x3D	; 61
    734c:	61 2f       	mov	r22, r17
    734e:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>

    if(sub==subN && (s_editMode || p1valdiff))
    7352:	eb 2d       	mov	r30, r11
    7354:	e2 30       	cpi	r30, 0x02	; 2
    7356:	09 f0       	breq	.+2      	; 0x735a <_Z13menuProcModelh+0x104>
    7358:	5a c0       	rjmp	.+180    	; 0x740e <_Z13menuProcModelh+0x1b8>
    735a:	80 91 16 19 	lds	r24, 0x1916
    735e:	88 23       	and	r24, r24
    7360:	39 f4       	brne	.+14     	; 0x7370 <_Z13menuProcModelh+0x11a>
    7362:	80 91 39 19 	lds	r24, 0x1939
    7366:	90 91 3a 19 	lds	r25, 0x193A
    736a:	00 97       	sbiw	r24, 0x00	; 0
    736c:	09 f4       	brne	.+2      	; 0x7370 <_Z13menuProcModelh+0x11a>
    736e:	4f c0       	rjmp	.+158    	; 0x740e <_Z13menuProcModelh+0x1b8>
      switch (m_posHorz) {
    7370:	80 91 4c 19 	lds	r24, 0x194C
    7374:	88 23       	and	r24, r24
    7376:	21 f0       	breq	.+8      	; 0x7380 <_Z13menuProcModelh+0x12a>
    7378:	81 30       	cpi	r24, 0x01	; 1
    737a:	09 f0       	breq	.+2      	; 0x737e <_Z13menuProcModelh+0x128>
    737c:	48 c0       	rjmp	.+144    	; 0x740e <_Z13menuProcModelh+0x1b8>
    737e:	22 c0       	rjmp	.+68     	; 0x73c4 <_Z13menuProcModelh+0x16e>
       case 0:
          {
          int8_t min=g_model.tmrVal/60;
    7380:	80 91 96 12 	lds	r24, 0x1296
    7384:	90 91 97 12 	lds	r25, 0x1297
    7388:	fc e3       	ldi	r31, 0x3C	; 60
    738a:	ef 2e       	mov	r14, r31
    738c:	f1 2c       	mov	r15, r1
    738e:	b7 01       	movw	r22, r14
    7390:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
          CHECK_INCDEC_MODELVAR( event,min ,0,59);
    7394:	8a 2d       	mov	r24, r10
    7396:	40 e0       	ldi	r20, 0x00	; 0
    7398:	2b e3       	ldi	r18, 0x3B	; 59
    739a:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
          g_model.tmrVal = g_model.tmrVal%60 + min*60;
    739e:	2c e3       	ldi	r18, 0x3C	; 60
    73a0:	48 2f       	mov	r20, r24
    73a2:	42 03       	mulsu	r20, r18
    73a4:	90 01       	movw	r18, r0
    73a6:	11 24       	eor	r1, r1
    73a8:	80 91 96 12 	lds	r24, 0x1296
    73ac:	90 91 97 12 	lds	r25, 0x1297
    73b0:	b7 01       	movw	r22, r14
    73b2:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    73b6:	28 0f       	add	r18, r24
    73b8:	39 1f       	adc	r19, r25
    73ba:	30 93 97 12 	sts	0x1297, r19
    73be:	20 93 96 12 	sts	0x1296, r18
         break;
    73c2:	25 c0       	rjmp	.+74     	; 0x740e <_Z13menuProcModelh+0x1b8>
          }
        case 1:
          {
          int8_t sec=g_model.tmrVal%60;
    73c4:	80 91 96 12 	lds	r24, 0x1296
    73c8:	90 91 97 12 	lds	r25, 0x1297
    73cc:	6c e3       	ldi	r22, 0x3C	; 60
    73ce:	70 e0       	ldi	r23, 0x00	; 0
    73d0:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
          sec -= checkIncDecModel( event,sec+2 ,1,62)-2;
    73d4:	08 2f       	mov	r16, r24
    73d6:	0e 5f       	subi	r16, 0xFE	; 254
    73d8:	8a 2d       	mov	r24, r10
    73da:	60 2f       	mov	r22, r16
    73dc:	41 e0       	ldi	r20, 0x01	; 1
    73de:	2e e3       	ldi	r18, 0x3E	; 62
    73e0:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    73e4:	08 1b       	sub	r16, r24
          g_model.tmrVal -= sec ;
    73e6:	60 2f       	mov	r22, r16
    73e8:	77 27       	eor	r23, r23
    73ea:	67 fd       	sbrc	r22, 7
    73ec:	70 95       	com	r23
    73ee:	20 91 96 12 	lds	r18, 0x1296
    73f2:	30 91 97 12 	lds	r19, 0x1297
    73f6:	26 1b       	sub	r18, r22
    73f8:	37 0b       	sbc	r19, r23
    73fa:	30 93 97 12 	sts	0x1297, r19
    73fe:	20 93 96 12 	sts	0x1296, r18
          if((int16_t)g_model.tmrVal < 0) g_model.tmrVal=0;
    7402:	37 ff       	sbrs	r19, 7
    7404:	04 c0       	rjmp	.+8      	; 0x740e <_Z13menuProcModelh+0x1b8>
    7406:	10 92 97 12 	sts	0x1297, r1
    740a:	10 92 96 12 	sts	0x1296, r1
          break;
          }
      }
    if((y+=FH)>7*FH) return;
    740e:	18 5f       	subi	r17, 0xF8	; 248
  }subN++;

  if(s_pgOfs<subN) { //timer trigger source -> off, abs, stk, stk%, sw/!sw, !m_sw/!m_sw, chx(value > or < than tmrChVal), ch%
    7410:	80 91 15 19 	lds	r24, 0x1915
    7414:	83 30       	cpi	r24, 0x03	; 3
    7416:	20 f5       	brcc	.+72     	; 0x7460 <_Z13menuProcModelh+0x20a>
    lcd_puts_P(    0,    y, PSTR("Trigger"));
    7418:	80 e0       	ldi	r24, 0x00	; 0
    741a:	61 2f       	mov	r22, r17
    741c:	46 e9       	ldi	r20, 0x96	; 150
    741e:	56 e0       	ldi	r21, 0x06	; 6
    7420:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    uint8_t attr = (sub==subN ?  INVERS : 0);
    7424:	8b 2d       	mov	r24, r11
    7426:	83 30       	cpi	r24, 0x03	; 3
    7428:	11 f4       	brne	.+4      	; 0x742e <_Z13menuProcModelh+0x1d8>
    742a:	42 e0       	ldi	r20, 0x02	; 2
    742c:	01 c0       	rjmp	.+2      	; 0x7430 <_Z13menuProcModelh+0x1da>
    742e:	40 e0       	ldi	r20, 0x00	; 0
    putsTmrMode(10*FW,y,attr);
    7430:	8c e3       	ldi	r24, 0x3C	; 60
    7432:	61 2f       	mov	r22, r17
    7434:	0e 94 29 6c 	call	0xd852	; 0xd852 <_Z11putsTmrModehhh>

    if(sub==subN)
    7438:	eb 2d       	mov	r30, r11
    743a:	e3 30       	cpi	r30, 0x03	; 3
    743c:	81 f4       	brne	.+32     	; 0x745e <_Z13menuProcModelh+0x208>
      CHECK_INCDEC_MODELVAR( event,g_model.tmrMode ,-(13+2*MAX_SWITCH),(13+2*MAX_SWITCH));
    743e:	60 91 95 12 	lds	r22, 0x1295
    7442:	66 0f       	add	r22, r22
    7444:	65 95       	asr	r22
    7446:	8a 2d       	mov	r24, r10
    7448:	47 ec       	ldi	r20, 0xC7	; 199
    744a:	29 e3       	ldi	r18, 0x39	; 57
    744c:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7450:	8f 77       	andi	r24, 0x7F	; 127
    7452:	90 91 95 12 	lds	r25, 0x1295
    7456:	90 78       	andi	r25, 0x80	; 128
    7458:	98 2b       	or	r25, r24
    745a:	90 93 95 12 	sts	0x1295, r25
    if((y+=FH)>7*FH) return;
    745e:	18 5f       	subi	r17, 0xF8	; 248
  }subN++;

  if(s_pgOfs<subN) {
    7460:	80 91 15 19 	lds	r24, 0x1915
    7464:	84 30       	cpi	r24, 0x04	; 4
    7466:	f0 f5       	brcc	.+124    	; 0x74e4 <_Z13menuProcModelh+0x28e>
    lcd_puts_P(    0,    y, PSTR("Timer "));
    7468:	80 e0       	ldi	r24, 0x00	; 0
    746a:	61 2f       	mov	r22, r17
    746c:	4f e8       	ldi	r20, 0x8F	; 143
    746e:	56 e0       	ldi	r21, 0x06	; 6
    7470:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(  10*FW, y, PSTR("Count DownCount Up  ")+10*g_model.tmrDir,10,(sub==subN ? INVERS:0));
    7474:	20 91 95 12 	lds	r18, 0x1295
    7478:	82 2f       	mov	r24, r18
    747a:	88 1f       	adc	r24, r24
    747c:	88 27       	eor	r24, r24
    747e:	88 1f       	adc	r24, r24
    7480:	90 e0       	ldi	r25, 0x00	; 0
    7482:	ac 01       	movw	r20, r24
    7484:	44 0f       	add	r20, r20
    7486:	55 1f       	adc	r21, r21
    7488:	73 e0       	ldi	r23, 0x03	; 3
    748a:	88 0f       	add	r24, r24
    748c:	99 1f       	adc	r25, r25
    748e:	7a 95       	dec	r23
    7490:	e1 f7       	brne	.-8      	; 0x748a <_Z13menuProcModelh+0x234>
    7492:	48 0f       	add	r20, r24
    7494:	59 1f       	adc	r21, r25
    7496:	46 58       	subi	r20, 0x86	; 134
    7498:	59 4f       	sbci	r21, 0xF9	; 249
    749a:	fb 2d       	mov	r31, r11
    749c:	f4 30       	cpi	r31, 0x04	; 4
    749e:	11 f4       	brne	.+4      	; 0x74a4 <_Z13menuProcModelh+0x24e>
    74a0:	02 e0       	ldi	r16, 0x02	; 2
    74a2:	01 c0       	rjmp	.+2      	; 0x74a6 <_Z13menuProcModelh+0x250>
    74a4:	00 e0       	ldi	r16, 0x00	; 0
    74a6:	8c e3       	ldi	r24, 0x3C	; 60
    74a8:	61 2f       	mov	r22, r17
    74aa:	2a e0       	ldi	r18, 0x0A	; 10
    74ac:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.tmrDir,0,1);
    74b0:	4b 2d       	mov	r20, r11
    74b2:	44 30       	cpi	r20, 0x04	; 4
    74b4:	99 f4       	brne	.+38     	; 0x74dc <_Z13menuProcModelh+0x286>
    74b6:	60 91 95 12 	lds	r22, 0x1295
    74ba:	66 1f       	adc	r22, r22
    74bc:	66 27       	eor	r22, r22
    74be:	66 1f       	adc	r22, r22
    74c0:	8a 2d       	mov	r24, r10
    74c2:	40 e0       	ldi	r20, 0x00	; 0
    74c4:	21 e0       	ldi	r18, 0x01	; 1
    74c6:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    74ca:	87 95       	ror	r24
    74cc:	88 27       	eor	r24, r24
    74ce:	87 95       	ror	r24
    74d0:	90 91 95 12 	lds	r25, 0x1295
    74d4:	9f 77       	andi	r25, 0x7F	; 127
    74d6:	98 2b       	or	r25, r24
    74d8:	90 93 95 12 	sts	0x1295, r25
    if((y+=FH)>7*FH) return;
    74dc:	18 5f       	subi	r17, 0xF8	; 248
    74de:	19 33       	cpi	r17, 0x39	; 57
    74e0:	08 f0       	brcs	.+2      	; 0x74e4 <_Z13menuProcModelh+0x28e>
    74e2:	5b c2       	rjmp	.+1206   	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    74e4:	80 91 15 19 	lds	r24, 0x1915
    74e8:	85 30       	cpi	r24, 0x05	; 5
    74ea:	88 f5       	brcc	.+98     	; 0x754e <_Z13menuProcModelh+0x2f8>
    lcd_puts_P(    0,    y, PSTR("T-Trim"));
    74ec:	80 e0       	ldi	r24, 0x00	; 0
    74ee:	61 2f       	mov	r22, r17
    74f0:	43 e7       	ldi	r20, 0x73	; 115
    74f2:	56 e0       	ldi	r21, 0x06	; 6
    74f4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( 10*FW, y, g_model.thrTrim, sub==subN ) ;
    74f8:	40 91 98 12 	lds	r20, 0x1298
    74fc:	46 95       	lsr	r20
    74fe:	46 95       	lsr	r20
    7500:	46 95       	lsr	r20
    7502:	41 70       	andi	r20, 0x01	; 1
    7504:	21 e0       	ldi	r18, 0x01	; 1
    7506:	8b 2d       	mov	r24, r11
    7508:	85 30       	cpi	r24, 0x05	; 5
    750a:	09 f0       	breq	.+2      	; 0x750e <_Z13menuProcModelh+0x2b8>
    750c:	20 e0       	ldi	r18, 0x00	; 0
    750e:	8c e3       	ldi	r24, 0x3C	; 60
    7510:	61 2f       	mov	r22, r17
    7512:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.thrTrim,0,1);
    7516:	eb 2d       	mov	r30, r11
    7518:	e5 30       	cpi	r30, 0x05	; 5
    751a:	a9 f4       	brne	.+42     	; 0x7546 <_Z13menuProcModelh+0x2f0>
    751c:	60 91 98 12 	lds	r22, 0x1298
    7520:	66 95       	lsr	r22
    7522:	66 95       	lsr	r22
    7524:	66 95       	lsr	r22
    7526:	61 70       	andi	r22, 0x01	; 1
    7528:	8a 2d       	mov	r24, r10
    752a:	40 e0       	ldi	r20, 0x00	; 0
    752c:	21 e0       	ldi	r18, 0x01	; 1
    752e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7532:	81 70       	andi	r24, 0x01	; 1
    7534:	88 0f       	add	r24, r24
    7536:	88 0f       	add	r24, r24
    7538:	88 0f       	add	r24, r24
    753a:	90 91 98 12 	lds	r25, 0x1298
    753e:	97 7f       	andi	r25, 0xF7	; 247
    7540:	98 2b       	or	r25, r24
    7542:	90 93 98 12 	sts	0x1298, r25
    if((y+=FH)>7*FH) return;
    7546:	18 5f       	subi	r17, 0xF8	; 248
    7548:	19 33       	cpi	r17, 0x39	; 57
    754a:	08 f0       	brcs	.+2      	; 0x754e <_Z13menuProcModelh+0x2f8>
    754c:	26 c2       	rjmp	.+1100   	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    754e:	80 91 15 19 	lds	r24, 0x1915
    7552:	86 30       	cpi	r24, 0x06	; 6
    7554:	88 f5       	brcc	.+98     	; 0x75b8 <_Z13menuProcModelh+0x362>
    lcd_puts_P(    0,    y, PSTR("T-Expo"));
    7556:	80 e0       	ldi	r24, 0x00	; 0
    7558:	61 2f       	mov	r22, r17
    755a:	4c e6       	ldi	r20, 0x6C	; 108
    755c:	56 e0       	ldi	r21, 0x06	; 6
    755e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( 10*FW, y, g_model.thrExpo, sub==subN ) ;
    7562:	40 91 99 12 	lds	r20, 0x1299
    7566:	46 95       	lsr	r20
    7568:	46 95       	lsr	r20
    756a:	46 95       	lsr	r20
    756c:	41 70       	andi	r20, 0x01	; 1
    756e:	21 e0       	ldi	r18, 0x01	; 1
    7570:	fb 2d       	mov	r31, r11
    7572:	f6 30       	cpi	r31, 0x06	; 6
    7574:	09 f0       	breq	.+2      	; 0x7578 <_Z13menuProcModelh+0x322>
    7576:	20 e0       	ldi	r18, 0x00	; 0
    7578:	8c e3       	ldi	r24, 0x3C	; 60
    757a:	61 2f       	mov	r22, r17
    757c:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.thrExpo,0,1);
    7580:	4b 2d       	mov	r20, r11
    7582:	46 30       	cpi	r20, 0x06	; 6
    7584:	a9 f4       	brne	.+42     	; 0x75b0 <_Z13menuProcModelh+0x35a>
    7586:	60 91 99 12 	lds	r22, 0x1299
    758a:	66 95       	lsr	r22
    758c:	66 95       	lsr	r22
    758e:	66 95       	lsr	r22
    7590:	61 70       	andi	r22, 0x01	; 1
    7592:	8a 2d       	mov	r24, r10
    7594:	40 e0       	ldi	r20, 0x00	; 0
    7596:	21 e0       	ldi	r18, 0x01	; 1
    7598:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    759c:	81 70       	andi	r24, 0x01	; 1
    759e:	88 0f       	add	r24, r24
    75a0:	88 0f       	add	r24, r24
    75a2:	88 0f       	add	r24, r24
    75a4:	90 91 99 12 	lds	r25, 0x1299
    75a8:	97 7f       	andi	r25, 0xF7	; 247
    75aa:	98 2b       	or	r25, r24
    75ac:	90 93 99 12 	sts	0x1299, r25
    if((y+=FH)>7*FH) return;
    75b0:	18 5f       	subi	r17, 0xF8	; 248
    75b2:	19 33       	cpi	r17, 0x39	; 57
    75b4:	08 f0       	brcs	.+2      	; 0x75b8 <_Z13menuProcModelh+0x362>
    75b6:	f1 c1       	rjmp	.+994    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    75b8:	80 91 15 19 	lds	r24, 0x1915
    75bc:	87 30       	cpi	r24, 0x07	; 7
    75be:	a0 f5       	brcc	.+104    	; 0x7628 <_Z13menuProcModelh+0x3d2>
    lcd_puts_P(    0,    y, PSTR("Trim Inc"));
    75c0:	80 e0       	ldi	r24, 0x00	; 0
    75c2:	61 2f       	mov	r22, r17
    75c4:	43 e6       	ldi	r20, 0x63	; 99
    75c6:	56 e0       	ldi	r21, 0x06	; 6
    75c8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(  10*FW, y, PSTR("Exp   ExFineFine  MediumCoarse")+6*g_model.trimInc,6,(sub==subN ? INVERS:0));
    75cc:	80 91 99 12 	lds	r24, 0x1299
    75d0:	87 70       	andi	r24, 0x07	; 7
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	ac 01       	movw	r20, r24
    75d6:	44 0f       	add	r20, r20
    75d8:	55 1f       	adc	r21, r21
    75da:	48 0f       	add	r20, r24
    75dc:	59 1f       	adc	r21, r25
    75de:	44 0f       	add	r20, r20
    75e0:	55 1f       	adc	r21, r21
    75e2:	4c 5b       	subi	r20, 0xBC	; 188
    75e4:	59 4f       	sbci	r21, 0xF9	; 249
    75e6:	8b 2d       	mov	r24, r11
    75e8:	87 30       	cpi	r24, 0x07	; 7
    75ea:	11 f4       	brne	.+4      	; 0x75f0 <_Z13menuProcModelh+0x39a>
    75ec:	02 e0       	ldi	r16, 0x02	; 2
    75ee:	01 c0       	rjmp	.+2      	; 0x75f2 <_Z13menuProcModelh+0x39c>
    75f0:	00 e0       	ldi	r16, 0x00	; 0
    75f2:	8c e3       	ldi	r24, 0x3C	; 60
    75f4:	61 2f       	mov	r22, r17
    75f6:	26 e0       	ldi	r18, 0x06	; 6
    75f8:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.trimInc,0,4);
    75fc:	eb 2d       	mov	r30, r11
    75fe:	e7 30       	cpi	r30, 0x07	; 7
    7600:	79 f4       	brne	.+30     	; 0x7620 <_Z13menuProcModelh+0x3ca>
    7602:	60 91 99 12 	lds	r22, 0x1299
    7606:	67 70       	andi	r22, 0x07	; 7
    7608:	8a 2d       	mov	r24, r10
    760a:	40 e0       	ldi	r20, 0x00	; 0
    760c:	24 e0       	ldi	r18, 0x04	; 4
    760e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7612:	87 70       	andi	r24, 0x07	; 7
    7614:	90 91 99 12 	lds	r25, 0x1299
    7618:	98 7f       	andi	r25, 0xF8	; 248
    761a:	98 2b       	or	r25, r24
    761c:	90 93 99 12 	sts	0x1299, r25
    if((y+=FH)>7*FH) return;
    7620:	18 5f       	subi	r17, 0xF8	; 248
    7622:	19 33       	cpi	r17, 0x39	; 57
    7624:	08 f0       	brcs	.+2      	; 0x7628 <_Z13menuProcModelh+0x3d2>
    7626:	b9 c1       	rjmp	.+882    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    7628:	80 91 15 19 	lds	r24, 0x1915
    762c:	88 30       	cpi	r24, 0x08	; 8
    762e:	78 f5       	brcc	.+94     	; 0x768e <_Z13menuProcModelh+0x438>
    lcd_puts_P(    0,    y, PSTR("E. Limits"));
    7630:	80 e0       	ldi	r24, 0x00	; 0
    7632:	61 2f       	mov	r22, r17
    7634:	4a e3       	ldi	r20, 0x3A	; 58
    7636:	56 e0       	ldi	r21, 0x06	; 6
    7638:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( 10*FW, y, g_model.extendedLimits, sub==subN ) ;
    763c:	40 91 99 12 	lds	r20, 0x1299
    7640:	42 95       	swap	r20
    7642:	46 95       	lsr	r20
    7644:	41 70       	andi	r20, 0x01	; 1
    7646:	21 e0       	ldi	r18, 0x01	; 1
    7648:	fb 2d       	mov	r31, r11
    764a:	f8 30       	cpi	r31, 0x08	; 8
    764c:	09 f0       	breq	.+2      	; 0x7650 <_Z13menuProcModelh+0x3fa>
    764e:	20 e0       	ldi	r18, 0x00	; 0
    7650:	8c e3       	ldi	r24, 0x3C	; 60
    7652:	61 2f       	mov	r22, r17
    7654:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.extendedLimits,0,1);
    7658:	4b 2d       	mov	r20, r11
    765a:	48 30       	cpi	r20, 0x08	; 8
    765c:	a1 f4       	brne	.+40     	; 0x7686 <_Z13menuProcModelh+0x430>
    765e:	60 91 99 12 	lds	r22, 0x1299
    7662:	62 95       	swap	r22
    7664:	66 95       	lsr	r22
    7666:	61 70       	andi	r22, 0x01	; 1
    7668:	8a 2d       	mov	r24, r10
    766a:	40 e0       	ldi	r20, 0x00	; 0
    766c:	21 e0       	ldi	r18, 0x01	; 1
    766e:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7672:	81 70       	andi	r24, 0x01	; 1
    7674:	82 95       	swap	r24
    7676:	88 0f       	add	r24, r24
    7678:	80 7e       	andi	r24, 0xE0	; 224
    767a:	90 91 99 12 	lds	r25, 0x1299
    767e:	9f 7d       	andi	r25, 0xDF	; 223
    7680:	98 2b       	or	r25, r24
    7682:	90 93 99 12 	sts	0x1299, r25
    if((y+=FH)>7*FH) return;
    7686:	18 5f       	subi	r17, 0xF8	; 248
    7688:	19 33       	cpi	r17, 0x39	; 57
    768a:	08 f0       	brcs	.+2      	; 0x768e <_Z13menuProcModelh+0x438>
    768c:	86 c1       	rjmp	.+780    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    768e:	80 91 15 19 	lds	r24, 0x1915
    7692:	89 30       	cpi	r24, 0x09	; 9
    7694:	90 f5       	brcc	.+100    	; 0x76fa <_Z13menuProcModelh+0x4a4>
    lcd_puts_P(    0,    y, PSTR("E. Trims"));
    7696:	80 e0       	ldi	r24, 0x00	; 0
    7698:	61 2f       	mov	r22, r17
    769a:	41 e3       	ldi	r20, 0x31	; 49
    769c:	56 e0       	ldi	r21, 0x06	; 6
    769e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( 10*FW, y, g_model.extendedTrims, sub==subN ) ;
    76a2:	40 91 99 12 	lds	r20, 0x1299
    76a6:	42 95       	swap	r20
    76a8:	46 95       	lsr	r20
    76aa:	46 95       	lsr	r20
    76ac:	41 70       	andi	r20, 0x01	; 1
    76ae:	21 e0       	ldi	r18, 0x01	; 1
    76b0:	8b 2d       	mov	r24, r11
    76b2:	89 30       	cpi	r24, 0x09	; 9
    76b4:	09 f0       	breq	.+2      	; 0x76b8 <_Z13menuProcModelh+0x462>
    76b6:	20 e0       	ldi	r18, 0x00	; 0
    76b8:	8c e3       	ldi	r24, 0x3C	; 60
    76ba:	61 2f       	mov	r22, r17
    76bc:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.extendedTrims,0,1);
    76c0:	eb 2d       	mov	r30, r11
    76c2:	e9 30       	cpi	r30, 0x09	; 9
    76c4:	b1 f4       	brne	.+44     	; 0x76f2 <_Z13menuProcModelh+0x49c>
    76c6:	60 91 99 12 	lds	r22, 0x1299
    76ca:	62 95       	swap	r22
    76cc:	66 95       	lsr	r22
    76ce:	66 95       	lsr	r22
    76d0:	61 70       	andi	r22, 0x01	; 1
    76d2:	8a 2d       	mov	r24, r10
    76d4:	40 e0       	ldi	r20, 0x00	; 0
    76d6:	21 e0       	ldi	r18, 0x01	; 1
    76d8:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    76dc:	81 70       	andi	r24, 0x01	; 1
    76de:	82 95       	swap	r24
    76e0:	88 0f       	add	r24, r24
    76e2:	88 0f       	add	r24, r24
    76e4:	80 7c       	andi	r24, 0xC0	; 192
    76e6:	90 91 99 12 	lds	r25, 0x1299
    76ea:	9f 7b       	andi	r25, 0xBF	; 191
    76ec:	98 2b       	or	r25, r24
    76ee:	90 93 99 12 	sts	0x1299, r25
    if((y+=FH)>7*FH) return;
    76f2:	18 5f       	subi	r17, 0xF8	; 248
    76f4:	19 33       	cpi	r17, 0x39	; 57
    76f6:	08 f0       	brcs	.+2      	; 0x76fa <_Z13menuProcModelh+0x4a4>
    76f8:	50 c1       	rjmp	.+672    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;
  
  if(s_pgOfs<subN) {
    76fa:	80 91 15 19 	lds	r24, 0x1915
    76fe:	8a 30       	cpi	r24, 0x0A	; 10
    7700:	08 f0       	brcs	.+2      	; 0x7704 <_Z13menuProcModelh+0x4ae>
    7702:	56 c0       	rjmp	.+172    	; 0x77b0 <_Z13menuProcModelh+0x55a>
    lcd_puts_P(    0,    y, PSTR("Beep Ctr"));
    7704:	80 e0       	ldi	r24, 0x00	; 0
    7706:	61 2f       	mov	r22, r17
    7708:	48 e2       	ldi	r20, 0x28	; 40
    770a:	56 e0       	ldi	r21, 0x06	; 6
    770c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    7710:	9c e3       	ldi	r25, 0x3C	; 60
    7712:	ee 24       	eor	r14, r14
    7714:	ff 24       	eor	r15, r15
    for(uint8_t i=0;i<7;i++) lcd_putsnAtt((10+i)*FW, y, PSTR("RETA123")+i,1, ((m_posHorz==i) && (sub==subN)) ? BLINK : ((g_model.beepANACenter & (1<<i)) ? INVERS : 0 ) );
    7716:	a7 01       	movw	r20, r14
    7718:	40 5e       	subi	r20, 0xE0	; 224
    771a:	59 4f       	sbci	r21, 0xF9	; 249
    771c:	80 91 4c 19 	lds	r24, 0x194C
    7720:	8e 15       	cp	r24, r14
    7722:	19 f4       	brne	.+6      	; 0x772a <_Z13menuProcModelh+0x4d4>
    7724:	fb 2d       	mov	r31, r11
    7726:	fa 30       	cpi	r31, 0x0A	; 10
    7728:	69 f0       	breq	.+26     	; 0x7744 <_Z13menuProcModelh+0x4ee>
    772a:	20 91 9b 12 	lds	r18, 0x129B
    772e:	30 e0       	ldi	r19, 0x00	; 0
    7730:	0e 2c       	mov	r0, r14
    7732:	02 c0       	rjmp	.+4      	; 0x7738 <_Z13menuProcModelh+0x4e2>
    7734:	35 95       	asr	r19
    7736:	27 95       	ror	r18
    7738:	0a 94       	dec	r0
    773a:	e2 f7       	brpl	.-8      	; 0x7734 <_Z13menuProcModelh+0x4de>
    773c:	20 ff       	sbrs	r18, 0
    773e:	04 c0       	rjmp	.+8      	; 0x7748 <_Z13menuProcModelh+0x4f2>
    7740:	02 e0       	ldi	r16, 0x02	; 2
    7742:	03 c0       	rjmp	.+6      	; 0x774a <_Z13menuProcModelh+0x4f4>
    7744:	01 e0       	ldi	r16, 0x01	; 1
    7746:	01 c0       	rjmp	.+2      	; 0x774a <_Z13menuProcModelh+0x4f4>
    7748:	00 e0       	ldi	r16, 0x00	; 0
    774a:	89 2f       	mov	r24, r25
    774c:	61 2f       	mov	r22, r17
    774e:	21 e0       	ldi	r18, 0x01	; 1
    7750:	99 83       	std	Y+1, r25	; 0x01
    7752:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    7756:	08 94       	sec
    7758:	e1 1c       	adc	r14, r1
    775a:	f1 1c       	adc	r15, r1
    775c:	99 81       	ldd	r25, Y+1	; 0x01
    775e:	9a 5f       	subi	r25, 0xFA	; 250
    7760:	96 36       	cpi	r25, 0x66	; 102
    7762:	c9 f6       	brne	.-78     	; 0x7716 <_Z13menuProcModelh+0x4c0>
    if(sub==subN){
    7764:	4b 2d       	mov	r20, r11
    7766:	4a 30       	cpi	r20, 0x0A	; 10
    7768:	f9 f4       	brne	.+62     	; 0x77a8 <_Z13menuProcModelh+0x552>
      if((event==EVT_KEY_FIRST(KEY_MENU)) || p1valdiff) {
    776a:	8a 2d       	mov	r24, r10
    776c:	80 36       	cpi	r24, 0x60	; 96
    776e:	31 f0       	breq	.+12     	; 0x777c <_Z13menuProcModelh+0x526>
    7770:	80 91 39 19 	lds	r24, 0x1939
    7774:	90 91 3a 19 	lds	r25, 0x193A
    7778:	00 97       	sbiw	r24, 0x00	; 0
    777a:	b1 f0       	breq	.+44     	; 0x77a8 <_Z13menuProcModelh+0x552>
        killEvents(event);
    777c:	8a 2d       	mov	r24, r10
    777e:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
        s_editMode = false;
    7782:	10 92 16 19 	sts	0x1916, r1
        g_model.beepANACenter ^= (1<<m_posHorz);
    7786:	81 e0       	ldi	r24, 0x01	; 1
    7788:	90 e0       	ldi	r25, 0x00	; 0
    778a:	00 90 4c 19 	lds	r0, 0x194C
    778e:	02 c0       	rjmp	.+4      	; 0x7794 <_Z13menuProcModelh+0x53e>
    7790:	88 0f       	add	r24, r24
    7792:	99 1f       	adc	r25, r25
    7794:	0a 94       	dec	r0
    7796:	e2 f7       	brpl	.-8      	; 0x7790 <_Z13menuProcModelh+0x53a>
    7798:	20 91 9b 12 	lds	r18, 0x129B
    779c:	28 27       	eor	r18, r24
    779e:	20 93 9b 12 	sts	0x129B, r18
        STORE_MODELVARS;
    77a2:	82 e0       	ldi	r24, 0x02	; 2
    77a4:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
      }
    }
    if((y+=FH)>7*FH) return;
    77a8:	18 5f       	subi	r17, 0xF8	; 248
    77aa:	19 33       	cpi	r17, 0x39	; 57
    77ac:	08 f0       	brcs	.+2      	; 0x77b0 <_Z13menuProcModelh+0x55a>
    77ae:	f5 c0       	rjmp	.+490    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    77b0:	80 91 15 19 	lds	r24, 0x1915
    77b4:	8b 30       	cpi	r24, 0x0B	; 11
    77b6:	08 f0       	brcs	.+2      	; 0x77ba <_Z13menuProcModelh+0x564>
    77b8:	b6 c0       	rjmp	.+364    	; 0x7926 <_Z13menuProcModelh+0x6d0>
    lcd_puts_P(    0,    y, PSTR("Proto"));
    77ba:	80 e0       	ldi	r24, 0x00	; 0
    77bc:	61 2f       	mov	r22, r17
    77be:	4a e1       	ldi	r20, 0x1A	; 26
    77c0:	56 e0       	ldi	r21, 0x06	; 6
    77c2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(  6*FW, y, PSTR(PROT_STR)+PROT_STR_LEN*g_model.protocol,PROT_STR_LEN,
                  (sub==subN && m_posHorz==0 ? (s_editMode ? BLINK : INVERS):0));
    77c6:	80 91 98 12 	lds	r24, 0x1298
    77ca:	87 70       	andi	r24, 0x07	; 7
    77cc:	90 e0       	ldi	r25, 0x00	; 0
    77ce:	ac 01       	movw	r20, r24
    77d0:	44 0f       	add	r20, r20
    77d2:	55 1f       	adc	r21, r21
    77d4:	48 0f       	add	r20, r24
    77d6:	59 1f       	adc	r21, r25
    77d8:	44 0f       	add	r20, r20
    77da:	55 1f       	adc	r21, r21
    77dc:	45 50       	subi	r20, 0x05	; 5
    77de:	5a 4f       	sbci	r21, 0xFA	; 250
    77e0:	eb 2d       	mov	r30, r11
    77e2:	eb 30       	cpi	r30, 0x0B	; 11
    77e4:	51 f4       	brne	.+20     	; 0x77fa <_Z13menuProcModelh+0x5a4>
    77e6:	80 91 4c 19 	lds	r24, 0x194C
    77ea:	88 23       	and	r24, r24
    77ec:	31 f4       	brne	.+12     	; 0x77fa <_Z13menuProcModelh+0x5a4>
    77ee:	80 91 16 19 	lds	r24, 0x1916
    77f2:	88 23       	and	r24, r24
    77f4:	21 f0       	breq	.+8      	; 0x77fe <_Z13menuProcModelh+0x5a8>
    77f6:	01 e0       	ldi	r16, 0x01	; 1
    77f8:	03 c0       	rjmp	.+6      	; 0x7800 <_Z13menuProcModelh+0x5aa>
    77fa:	00 e0       	ldi	r16, 0x00	; 0
    77fc:	01 c0       	rjmp	.+2      	; 0x7800 <_Z13menuProcModelh+0x5aa>
    77fe:	02 e0       	ldi	r16, 0x02	; 2
    7800:	84 e2       	ldi	r24, 0x24	; 36
    7802:	61 2f       	mov	r22, r17
    7804:	26 e0       	ldi	r18, 0x06	; 6
    7806:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(!g_model.protocol) {
    780a:	40 91 98 12 	lds	r20, 0x1298
    780e:	84 2f       	mov	r24, r20
    7810:	87 70       	andi	r24, 0x07	; 7
    7812:	09 f0       	breq	.+2      	; 0x7816 <_Z13menuProcModelh+0x5c0>
    7814:	45 c0       	rjmp	.+138    	; 0x78a0 <_Z13menuProcModelh+0x64a>
      lcd_putsnAtt(  10*FW, y, PSTR("4CH 6CH 8CH 10CH12CH14CH16CH")+4*(g_model.ppmNCH+2),4,(sub==subN && m_posHorz==1  ? (s_editMode ? BLINK : INVERS):0));
    7816:	45 95       	asr	r20
    7818:	45 95       	asr	r20
    781a:	45 95       	asr	r20
    781c:	45 95       	asr	r20
    781e:	55 27       	eor	r21, r21
    7820:	47 fd       	sbrc	r20, 7
    7822:	50 95       	com	r21
    7824:	44 0f       	add	r20, r20
    7826:	55 1f       	adc	r21, r21
    7828:	44 0f       	add	r20, r20
    782a:	55 1f       	adc	r21, r21
    782c:	4a 51       	subi	r20, 0x1A	; 26
    782e:	5a 4f       	sbci	r21, 0xFA	; 250
    7830:	fb 2d       	mov	r31, r11
    7832:	fb 30       	cpi	r31, 0x0B	; 11
    7834:	51 f4       	brne	.+20     	; 0x784a <_Z13menuProcModelh+0x5f4>
    7836:	80 91 4c 19 	lds	r24, 0x194C
    783a:	81 30       	cpi	r24, 0x01	; 1
    783c:	31 f4       	brne	.+12     	; 0x784a <_Z13menuProcModelh+0x5f4>
    783e:	80 91 16 19 	lds	r24, 0x1916
    7842:	88 23       	and	r24, r24
    7844:	21 f0       	breq	.+8      	; 0x784e <_Z13menuProcModelh+0x5f8>
    7846:	01 e0       	ldi	r16, 0x01	; 1
    7848:	03 c0       	rjmp	.+6      	; 0x7850 <_Z13menuProcModelh+0x5fa>
    784a:	00 e0       	ldi	r16, 0x00	; 0
    784c:	01 c0       	rjmp	.+2      	; 0x7850 <_Z13menuProcModelh+0x5fa>
    784e:	02 e0       	ldi	r16, 0x02	; 2
    7850:	8c e3       	ldi	r24, 0x3C	; 60
    7852:	61 2f       	mov	r22, r17
    7854:	24 e0       	ldi	r18, 0x04	; 4
    7856:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      lcd_putsAtt(    17*FW,    y, PSTR("uSec"),0);
    785a:	86 e6       	ldi	r24, 0x66	; 102
    785c:	61 2f       	mov	r22, r17
    785e:	49 ed       	ldi	r20, 0xD9	; 217
    7860:	55 e0       	ldi	r21, 0x05	; 5
    7862:	20 e0       	ldi	r18, 0x00	; 0
    7864:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
      lcd_outdezAtt(  17*FW, y,  (g_model.ppmDelay*50)+300, (sub==subN && m_posHorz==2 ? (s_editMode ? BLINK : INVERS):0));
    7868:	40 91 9a 12 	lds	r20, 0x129A
    786c:	82 e3       	ldi	r24, 0x32	; 50
    786e:	48 02       	muls	r20, r24
    7870:	a0 01       	movw	r20, r0
    7872:	11 24       	eor	r1, r1
    7874:	44 5d       	subi	r20, 0xD4	; 212
    7876:	5e 4f       	sbci	r21, 0xFE	; 254
    7878:	8b 2d       	mov	r24, r11
    787a:	8b 30       	cpi	r24, 0x0B	; 11
    787c:	51 f4       	brne	.+20     	; 0x7892 <_Z13menuProcModelh+0x63c>
    787e:	80 91 4c 19 	lds	r24, 0x194C
    7882:	82 30       	cpi	r24, 0x02	; 2
    7884:	31 f4       	brne	.+12     	; 0x7892 <_Z13menuProcModelh+0x63c>
    7886:	80 91 16 19 	lds	r24, 0x1916
    788a:	88 23       	and	r24, r24
    788c:	21 f0       	breq	.+8      	; 0x7896 <_Z13menuProcModelh+0x640>
    788e:	21 e0       	ldi	r18, 0x01	; 1
    7890:	03 c0       	rjmp	.+6      	; 0x7898 <_Z13menuProcModelh+0x642>
    7892:	20 e0       	ldi	r18, 0x00	; 0
    7894:	01 c0       	rjmp	.+2      	; 0x7898 <_Z13menuProcModelh+0x642>
    7896:	22 e0       	ldi	r18, 0x02	; 2
    7898:	86 e6       	ldi	r24, 0x66	; 102
    789a:	61 2f       	mov	r22, r17
    789c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    }
    if(sub==subN && (s_editMode || p1valdiff))
    78a0:	eb 2d       	mov	r30, r11
    78a2:	eb 30       	cpi	r30, 0x0B	; 11
    78a4:	e9 f5       	brne	.+122    	; 0x7920 <_Z13menuProcModelh+0x6ca>
    78a6:	80 91 16 19 	lds	r24, 0x1916
    78aa:	88 23       	and	r24, r24
    78ac:	31 f4       	brne	.+12     	; 0x78ba <_Z13menuProcModelh+0x664>
    78ae:	80 91 39 19 	lds	r24, 0x1939
    78b2:	90 91 3a 19 	lds	r25, 0x193A
    78b6:	00 97       	sbiw	r24, 0x00	; 0
    78b8:	99 f1       	breq	.+102    	; 0x7920 <_Z13menuProcModelh+0x6ca>
      switch (m_posHorz){
    78ba:	80 91 4c 19 	lds	r24, 0x194C
    78be:	81 30       	cpi	r24, 0x01	; 1
    78c0:	91 f0       	breq	.+36     	; 0x78e6 <_Z13menuProcModelh+0x690>
    78c2:	81 30       	cpi	r24, 0x01	; 1
    78c4:	18 f0       	brcs	.+6      	; 0x78cc <_Z13menuProcModelh+0x676>
    78c6:	82 30       	cpi	r24, 0x02	; 2
    78c8:	59 f5       	brne	.+86     	; 0x7920 <_Z13menuProcModelh+0x6ca>
    78ca:	21 c0       	rjmp	.+66     	; 0x790e <_Z13menuProcModelh+0x6b8>
        case 0:
            CHECK_INCDEC_MODELVAR(event,g_model.protocol,0,PROT_MAX);
    78cc:	60 91 98 12 	lds	r22, 0x1298
    78d0:	67 70       	andi	r22, 0x07	; 7
    78d2:	8a 2d       	mov	r24, r10
    78d4:	40 e0       	ldi	r20, 0x00	; 0
    78d6:	24 e0       	ldi	r18, 0x04	; 4
    78d8:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    78dc:	87 70       	andi	r24, 0x07	; 7
    78de:	90 91 98 12 	lds	r25, 0x1298
    78e2:	98 7f       	andi	r25, 0xF8	; 248
    78e4:	10 c0       	rjmp	.+32     	; 0x7906 <_Z13menuProcModelh+0x6b0>
            break;
        case 1:
            CHECK_INCDEC_MODELVAR(event,g_model.ppmNCH,-2,4);
    78e6:	60 91 98 12 	lds	r22, 0x1298
    78ea:	65 95       	asr	r22
    78ec:	65 95       	asr	r22
    78ee:	65 95       	asr	r22
    78f0:	65 95       	asr	r22
    78f2:	8a 2d       	mov	r24, r10
    78f4:	4e ef       	ldi	r20, 0xFE	; 254
    78f6:	24 e0       	ldi	r18, 0x04	; 4
    78f8:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    78fc:	82 95       	swap	r24
    78fe:	80 7f       	andi	r24, 0xF0	; 240
    7900:	90 91 98 12 	lds	r25, 0x1298
    7904:	9f 70       	andi	r25, 0x0F	; 15
    7906:	98 2b       	or	r25, r24
    7908:	90 93 98 12 	sts	0x1298, r25
            break;
    790c:	09 c0       	rjmp	.+18     	; 0x7920 <_Z13menuProcModelh+0x6ca>
        case 2:
            CHECK_INCDEC_MODELVAR(event,g_model.ppmDelay,-4,10);
    790e:	8a 2d       	mov	r24, r10
    7910:	60 91 9a 12 	lds	r22, 0x129A
    7914:	4c ef       	ldi	r20, 0xFC	; 252
    7916:	2a e0       	ldi	r18, 0x0A	; 10
    7918:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    791c:	80 93 9a 12 	sts	0x129A, r24
            break;
      }
    if((y+=FH)>7*FH) return;
    7920:	18 5f       	subi	r17, 0xF8	; 248
    7922:	19 33       	cpi	r17, 0x39	; 57
    7924:	d0 f5       	brcc	.+116    	; 0x799a <_Z13menuProcModelh+0x744>
  }subN++;

  if(s_pgOfs<subN) {
    7926:	80 91 15 19 	lds	r24, 0x1915
    792a:	8c 30       	cpi	r24, 0x0C	; 12
    792c:	b0 f5       	brcc	.+108    	; 0x799a <_Z13menuProcModelh+0x744>
    lcd_puts_P(    0,    y, PSTR("Shift Sel"));
    792e:	80 e0       	ldi	r24, 0x00	; 0
    7930:	61 2f       	mov	r22, r17
    7932:	4f ec       	ldi	r20, 0xCF	; 207
    7934:	55 e0       	ldi	r21, 0x05	; 5
    7936:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(  10*FW, y, PSTR("POSNEG")+3*g_model.pulsePol,3,(sub==subN ? INVERS:0));
    793a:	80 91 99 12 	lds	r24, 0x1299
    793e:	82 95       	swap	r24
    7940:	81 70       	andi	r24, 0x01	; 1
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	ac 01       	movw	r20, r24
    7946:	44 0f       	add	r20, r20
    7948:	55 1f       	adc	r21, r21
    794a:	48 0f       	add	r20, r24
    794c:	59 1f       	adc	r21, r25
    794e:	48 53       	subi	r20, 0x38	; 56
    7950:	5a 4f       	sbci	r21, 0xFA	; 250
    7952:	fb 2d       	mov	r31, r11
    7954:	fc 30       	cpi	r31, 0x0C	; 12
    7956:	11 f4       	brne	.+4      	; 0x795c <_Z13menuProcModelh+0x706>
    7958:	02 e0       	ldi	r16, 0x02	; 2
    795a:	01 c0       	rjmp	.+2      	; 0x795e <_Z13menuProcModelh+0x708>
    795c:	00 e0       	ldi	r16, 0x00	; 0
    795e:	8c e3       	ldi	r24, 0x3C	; 60
    7960:	61 2f       	mov	r22, r17
    7962:	23 e0       	ldi	r18, 0x03	; 3
    7964:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.pulsePol,0,1);
    7968:	4b 2d       	mov	r20, r11
    796a:	4c 30       	cpi	r20, 0x0C	; 12
    796c:	b1 f4       	brne	.+44     	; 0x799a <_Z13menuProcModelh+0x744>
    796e:	60 91 99 12 	lds	r22, 0x1299
    7972:	62 95       	swap	r22
    7974:	61 70       	andi	r22, 0x01	; 1
    7976:	8a 2d       	mov	r24, r10
    7978:	40 e0       	ldi	r20, 0x00	; 0
    797a:	21 e0       	ldi	r18, 0x01	; 1
    797c:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7980:	81 70       	andi	r24, 0x01	; 1
    7982:	82 95       	swap	r24
    7984:	80 7f       	andi	r24, 0xF0	; 240
    7986:	90 91 99 12 	lds	r25, 0x1299
    798a:	9f 7e       	andi	r25, 0xEF	; 239
    798c:	98 2b       	or	r25, r24
    798e:	90 93 99 12 	sts	0x1299, r25
    7992:	03 c0       	rjmp	.+6      	; 0x799a <_Z13menuProcModelh+0x744>

  if(s_pgOfs<subN) {
    lcd_puts_P(0*FW, y, PSTR("Timer"));
    putsTime(10*FW+1, y, g_model.tmrVal,
        (sub==subN && m_posHorz==0 ? (s_editMode ? BLINK : INVERS):0),
        (sub==subN && m_posHorz==1 ? (s_editMode ? BLINK : INVERS):0) );
    7994:	22 e0       	ldi	r18, 0x02	; 2
    7996:	00 e0       	ldi	r16, 0x00	; 0
    7998:	d8 cc       	rjmp	.-1616   	; 0x734a <_Z13menuProcModelh+0xf4>
    lcd_puts_P(    0,    y, PSTR("Shift Sel"));
    lcd_putsnAtt(  10*FW, y, PSTR("POSNEG")+3*g_model.pulsePol,3,(sub==subN ? INVERS:0));
    if(sub==subN) CHECK_INCDEC_MODELVAR(event,g_model.pulsePol,0,1);
    if((y+=FH)>7*FH) return;
  }
}
    799a:	0f 90       	pop	r0
    799c:	cf 91       	pop	r28
    799e:	df 91       	pop	r29
    79a0:	1f 91       	pop	r17
    79a2:	0f 91       	pop	r16
    79a4:	ff 90       	pop	r15
    79a6:	ef 90       	pop	r14
    79a8:	df 90       	pop	r13
    79aa:	cf 90       	pop	r12
    79ac:	bf 90       	pop	r11
    79ae:	af 90       	pop	r10
    79b0:	08 95       	ret

000079b2 <_Z9DrawCurvePFiiE>:
{
  return intpol(x, s_curveChan);
}

void DrawCurve(FnFuncP fn)
{
    79b2:	bf 92       	push	r11
    79b4:	cf 92       	push	r12
    79b6:	df 92       	push	r13
    79b8:	ef 92       	push	r14
    79ba:	ff 92       	push	r15
    79bc:	0f 93       	push	r16
    79be:	1f 93       	push	r17
    79c0:	cf 93       	push	r28
    79c2:	df 93       	push	r29
    79c4:	6c 01       	movw	r12, r24
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
    79c6:	8e e5       	ldi	r24, 0x5E	; 94
    79c8:	60 e0       	ldi	r22, 0x00	; 0
    79ca:	40 e4       	ldi	r20, 0x40	; 64
    79cc:	2e ee       	ldi	r18, 0xEE	; 238
    79ce:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);
    79d2:	8e e3       	ldi	r24, 0x3E	; 62
    79d4:	60 e2       	ldi	r22, 0x20	; 32
    79d6:	40 e4       	ldi	r20, 0x40	; 64
    79d8:	2e ee       	ldi	r18, 0xEE	; 238
    79da:	00 e0       	ldi	r16, 0x00	; 0
    79dc:	0e 94 68 68 	call	0xd0d0	; 0xd0d0 <_Z13lcd_hlineStipahahh>
    79e0:	5f e3       	ldi	r21, 0x3F	; 63
    79e2:	b5 2e       	mov	r11, r21
    79e4:	c0 e2       	ldi	r28, 0x20	; 32
    79e6:	dc ef       	ldi	r29, 0xFC	; 252

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
    79e8:	42 e0       	ldi	r20, 0x02	; 2
    79ea:	e4 2e       	mov	r14, r20
    79ec:	f1 2c       	mov	r15, r1
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    79ee:	0f e3       	ldi	r16, 0x3F	; 63
    79f0:	10 e0       	ldi	r17, 0x00	; 0
{
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
    79f2:	ce 01       	movw	r24, r28
    79f4:	f6 01       	movw	r30, r12
    79f6:	19 95       	eicall
    79f8:	80 50       	subi	r24, 0x00	; 0
    79fa:	9c 4f       	sbci	r25, 0xFC	; 252
    79fc:	b7 01       	movw	r22, r14
    79fe:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    7a02:	cb 01       	movw	r24, r22
    7a04:	36 e0       	ldi	r19, 0x06	; 6
    7a06:	88 0f       	add	r24, r24
    7a08:	99 1f       	adc	r25, r25
    7a0a:	3a 95       	dec	r19
    7a0c:	e1 f7       	brne	.-8      	; 0x7a06 <_Z9DrawCurvePFiiE+0x54>
    7a0e:	86 1b       	sub	r24, r22
    7a10:	97 0b       	sbc	r25, r23
    7a12:	89 2f       	mov	r24, r25
    7a14:	99 27       	eor	r25, r25
    7a16:	86 95       	lsr	r24
    7a18:	86 95       	lsr	r24
    7a1a:	b8 01       	movw	r22, r16
    7a1c:	68 1b       	sub	r22, r24
    7a1e:	79 0b       	sbc	r23, r25
    lcd_plot(X0+xv, yv, BLACK);
    7a20:	8b 2d       	mov	r24, r11
    7a22:	42 e0       	ldi	r20, 0x02	; 2
    7a24:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
    7a28:	a0 96       	adiw	r28, 0x20	; 32
    7a2a:	b3 94       	inc	r11
void DrawCurve(FnFuncP fn)
{
  lcd_vlineStip(X0, 0, DISPLAY_H, 0xee);
  lcd_hlineStip(X0-WCHART, Y0, WCHART*2, 0xee);

  for (int8_t xv=-WCHART+1; xv<WCHART; xv++) {
    7a2c:	8b 2d       	mov	r24, r11
    7a2e:	8e 37       	cpi	r24, 0x7E	; 126
    7a30:	01 f7       	brne	.-64     	; 0x79f2 <_Z9DrawCurvePFiiE+0x40>
    uint16_t yv = (RESX + fn(xv * (RESX/WCHART))) / 2;
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  }
}
    7a32:	df 91       	pop	r29
    7a34:	cf 91       	pop	r28
    7a36:	1f 91       	pop	r17
    7a38:	0f 91       	pop	r16
    7a3a:	ff 90       	pop	r15
    7a3c:	ef 90       	pop	r14
    7a3e:	df 90       	pop	r13
    7a40:	cf 90       	pop	r12
    7a42:	bf 90       	pop	r11
    7a44:	08 95       	ret

00007a46 <_Z16menuProcCurveOneh>:

void menuProcCurveOne(uint8_t event)
{
    7a46:	6f 92       	push	r6
    7a48:	7f 92       	push	r7
    7a4a:	8f 92       	push	r8
    7a4c:	9f 92       	push	r9
    7a4e:	af 92       	push	r10
    7a50:	bf 92       	push	r11
    7a52:	cf 92       	push	r12
    7a54:	df 92       	push	r13
    7a56:	ef 92       	push	r14
    7a58:	ff 92       	push	r15
    7a5a:	0f 93       	push	r16
    7a5c:	1f 93       	push	r17
    7a5e:	df 93       	push	r29
    7a60:	cf 93       	push	r28
    7a62:	0f 92       	push	r0
    7a64:	cd b7       	in	r28, 0x3d	; 61
    7a66:	de b7       	in	r29, 0x3e	; 62
    7a68:	18 2f       	mov	r17, r24
  uint8_t points;
  int8_t *crv;
  static int8_t dfltCrv;

  TITLE("CURVE");
    7a6a:	80 e0       	ldi	r24, 0x00	; 0
    7a6c:	60 e0       	ldi	r22, 0x00	; 0
    7a6e:	4a e6       	ldi	r20, 0x6A	; 106
    7a70:	55 e0       	ldi	r21, 0x05	; 5
    7a72:	22 e0       	ldi	r18, 0x02	; 2
    7a74:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
    7a78:	40 91 56 19 	lds	r20, 0x1956
    7a7c:	50 e0       	ldi	r21, 0x00	; 0
    7a7e:	4f 5f       	subi	r20, 0xFF	; 255
    7a80:	5f 4f       	sbci	r21, 0xFF	; 255
    7a82:	8f e1       	ldi	r24, 0x1F	; 31
    7a84:	60 e0       	ldi	r22, 0x00	; 0
    7a86:	22 e8       	ldi	r18, 0x82	; 130
    7a88:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  theFile.DisplayProgressBar(20*FW+1);
    7a8c:	8c ea       	ldi	r24, 0xAC	; 172
    7a8e:	99 e1       	ldi	r25, 0x19	; 25
    7a90:	69 e7       	ldi	r22, 0x79	; 121
    7a92:	0e 94 24 66 	call	0xcc48	; 0xcc48 <_ZN7RlcFile18DisplayProgressBarEh>

  if (s_curveChan >= MAX_CURVE5) {
    7a96:	20 91 56 19 	lds	r18, 0x1956
    7a9a:	82 2f       	mov	r24, r18
    7a9c:	90 e0       	ldi	r25, 0x00	; 0
    7a9e:	28 30       	cpi	r18, 0x08	; 8
    7aa0:	80 f0       	brcs	.+32     	; 0x7ac2 <_Z16menuProcCurveOneh+0x7c>
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
    7aa2:	08 97       	sbiw	r24, 0x08	; 8
    7aa4:	4c 01       	movw	r8, r24
    7aa6:	a3 e0       	ldi	r26, 0x03	; 3
    7aa8:	88 0c       	add	r8, r8
    7aaa:	99 1c       	adc	r9, r9
    7aac:	aa 95       	dec	r26
    7aae:	e1 f7       	brne	.-8      	; 0x7aa8 <_Z16menuProcCurveOneh+0x62>
    7ab0:	88 0e       	add	r8, r24
    7ab2:	99 1e       	adc	r9, r25
    7ab4:	8f e6       	ldi	r24, 0x6F	; 111
    7ab6:	94 e1       	ldi	r25, 0x14	; 20
    7ab8:	88 0e       	add	r8, r24
    7aba:	99 1e       	adc	r9, r25
  TITLE("CURVE");
  lcd_outdezAtt(5*FW+1, 0, s_curveChan+1, INVERS|LEFT);
  theFile.DisplayProgressBar(20*FW+1);

  if (s_curveChan >= MAX_CURVE5) {
    points = 9;
    7abc:	f9 e0       	ldi	r31, 0x09	; 9
    7abe:	ff 2e       	mov	r15, r31
    7ac0:	0d c0       	rjmp	.+26     	; 0x7adc <_Z16menuProcCurveOneh+0x96>
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  }
  else {
    points = 5;
    crv = g_model.curves5[s_curveChan];
    7ac2:	4c 01       	movw	r8, r24
    7ac4:	88 0c       	add	r8, r8
    7ac6:	99 1c       	adc	r9, r9
    7ac8:	88 0c       	add	r8, r8
    7aca:	99 1c       	adc	r9, r9
    7acc:	88 0e       	add	r8, r24
    7ace:	99 1e       	adc	r9, r25
    7ad0:	a7 e4       	ldi	r26, 0x47	; 71
    7ad2:	b4 e1       	ldi	r27, 0x14	; 20
    7ad4:	8a 0e       	add	r8, r26
    7ad6:	9b 1e       	adc	r9, r27
  if (s_curveChan >= MAX_CURVE5) {
    points = 9;
    crv = g_model.curves9[s_curveChan-MAX_CURVE5];
  }
  else {
    points = 5;
    7ad8:	75 e0       	ldi	r23, 0x05	; 5
    7ada:	f7 2e       	mov	r15, r23
    crv = g_model.curves5[s_curveChan];
  }

  switch(event) {
    7adc:	11 36       	cpi	r17, 0x61	; 97
    7ade:	09 f4       	brne	.+2      	; 0x7ae2 <_Z16menuProcCurveOneh+0x9c>
    7ae0:	59 c0       	rjmp	.+178    	; 0x7b94 <_Z16menuProcCurveOneh+0x14e>
    7ae2:	12 36       	cpi	r17, 0x62	; 98
    7ae4:	48 f4       	brcc	.+18     	; 0x7af8 <_Z16menuProcCurveOneh+0xb2>
    7ae6:	15 34       	cpi	r17, 0x45	; 69
    7ae8:	09 f4       	brne	.+2      	; 0x7aec <_Z16menuProcCurveOneh+0xa6>
    7aea:	67 c0       	rjmp	.+206    	; 0x7bba <_Z16menuProcCurveOneh+0x174>
    7aec:	10 36       	cpi	r17, 0x60	; 96
    7aee:	81 f0       	breq	.+32     	; 0x7b10 <_Z16menuProcCurveOneh+0xca>
    7af0:	14 34       	cpi	r17, 0x44	; 68
    7af2:	09 f0       	breq	.+2      	; 0x7af6 <_Z16menuProcCurveOneh+0xb0>
    7af4:	5a c0       	rjmp	.+180    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    7af6:	69 c0       	rjmp	.+210    	; 0x7bca <_Z16menuProcCurveOneh+0x184>
    7af8:	15 36       	cpi	r17, 0x65	; 101
    7afa:	09 f4       	brne	.+2      	; 0x7afe <_Z16menuProcCurveOneh+0xb8>
    7afc:	5e c0       	rjmp	.+188    	; 0x7bba <_Z16menuProcCurveOneh+0x174>
    7afe:	1f 3b       	cpi	r17, 0xBF	; 191
    7b00:	21 f0       	breq	.+8      	; 0x7b0a <_Z16menuProcCurveOneh+0xc4>
    7b02:	14 36       	cpi	r17, 0x64	; 100
    7b04:	09 f0       	breq	.+2      	; 0x7b08 <_Z16menuProcCurveOneh+0xc2>
    7b06:	51 c0       	rjmp	.+162    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    7b08:	60 c0       	rjmp	.+192    	; 0x7bca <_Z16menuProcCurveOneh+0x184>
    case EVT_ENTRY:
      dfltCrv = 0;
    7b0a:	10 92 6e 19 	sts	0x196E, r1
      break;
    7b0e:	4d c0       	rjmp	.+154    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    case EVT_KEY_FIRST(KEY_MENU):
      if (!s_editMode) {
    7b10:	80 91 16 19 	lds	r24, 0x1916
    7b14:	88 23       	and	r24, r24
    7b16:	09 f0       	breq	.+2      	; 0x7b1a <_Z16menuProcCurveOneh+0xd4>
    7b18:	48 c0       	rjmp	.+144    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
        switch (m_posHorz) {
    7b1a:	80 91 4c 19 	lds	r24, 0x194C
    7b1e:	88 23       	and	r24, r24
    7b20:	21 f0       	breq	.+8      	; 0x7b2a <_Z16menuProcCurveOneh+0xe4>
    7b22:	81 30       	cpi	r24, 0x01	; 1
    7b24:	09 f0       	breq	.+2      	; 0x7b28 <_Z16menuProcCurveOneh+0xe2>
    7b26:	41 c0       	rjmp	.+130    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    7b28:	04 c0       	rjmp	.+8      	; 0x7b32 <_Z16menuProcCurveOneh+0xec>
          case 0:
            s_editMode = true;
    7b2a:	81 e0       	ldi	r24, 0x01	; 1
    7b2c:	80 93 16 19 	sts	0x1916, r24
            break;
    7b30:	3c c0       	rjmp	.+120    	; 0x7baa <_Z16menuProcCurveOneh+0x164>
          case 1:
            if (++dfltCrv > 4)
    7b32:	80 91 6e 19 	lds	r24, 0x196E
    7b36:	8f 5f       	subi	r24, 0xFF	; 255
    7b38:	80 93 6e 19 	sts	0x196E, r24
    7b3c:	85 30       	cpi	r24, 0x05	; 5
    7b3e:	1c f0       	brlt	.+6      	; 0x7b46 <_Z16menuProcCurveOneh+0x100>
              dfltCrv = -4;
    7b40:	8c ef       	ldi	r24, 0xFC	; 252
    7b42:	80 93 6e 19 	sts	0x196E, r24
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
    7b46:	90 91 6e 19 	lds	r25, 0x196E
    7b4a:	82 e3       	ldi	r24, 0x32	; 50
    7b4c:	98 02       	muls	r25, r24
    7b4e:	50 01       	movw	r10, r0
    7b50:	11 24       	eor	r1, r1
    7b52:	8f 2d       	mov	r24, r15
    7b54:	86 95       	lsr	r24
    7b56:	90 e0       	ldi	r25, 0x00	; 0
    yv = (DISPLAY_H-1) - yv * (DISPLAY_H-1) / RESX;
    lcd_plot(X0+xv, yv, BLACK);
  }
}

void menuProcCurveOne(uint8_t event)
    7b58:	90 95       	com	r25
    7b5a:	81 95       	neg	r24
    7b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    7b5e:	8a 9d       	mul	r24, r10
    7b60:	90 01       	movw	r18, r0
    7b62:	8b 9d       	mul	r24, r11
    7b64:	30 0d       	add	r19, r0
    7b66:	9a 9d       	mul	r25, r10
    7b68:	30 0d       	add	r19, r0
    7b6a:	11 24       	eor	r1, r1
    7b6c:	48 2d       	mov	r20, r8
    7b6e:	c8 2c       	mov	r12, r8
    7b70:	d9 2c       	mov	r13, r9
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
              crv[i] = (i-(points/2)) * dfltCrv * 50 / (points-1);
    7b72:	ef 2d       	mov	r30, r15
    7b74:	f0 e0       	ldi	r31, 0x00	; 0
    7b76:	31 97       	sbiw	r30, 0x01	; 1
    7b78:	c9 01       	movw	r24, r18
    7b7a:	bf 01       	movw	r22, r30
    7b7c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    7b80:	d6 01       	movw	r26, r12
    7b82:	6d 93       	st	X+, r22
    7b84:	6d 01       	movw	r12, r26
    7b86:	2a 0d       	add	r18, r10
    7b88:	3b 1d       	adc	r19, r11
            s_editMode = true;
            break;
          case 1:
            if (++dfltCrv > 4)
              dfltCrv = -4;
            for (uint8_t i=0; i<points; i++)
    7b8a:	8a 2f       	mov	r24, r26
    7b8c:	84 1b       	sub	r24, r20
    7b8e:	8f 15       	cp	r24, r15
    7b90:	98 f3       	brcs	.-26     	; 0x7b78 <_Z16menuProcCurveOneh+0x132>
    7b92:	0b c0       	rjmp	.+22     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
            break;
        }
      }
      break;
    case EVT_KEY_FIRST(KEY_EXIT):
      killEvents(event);
    7b94:	81 e6       	ldi	r24, 0x61	; 97
    7b96:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      if (s_editMode) {
    7b9a:	80 91 16 19 	lds	r24, 0x1916
    7b9e:	88 23       	and	r24, r24
    7ba0:	49 f0       	breq	.+18     	; 0x7bb4 <_Z16menuProcCurveOneh+0x16e>
        m_posHorz = 0;
    7ba2:	10 92 4c 19 	sts	0x194C, r1
        s_editMode = false;
    7ba6:	10 92 16 19 	sts	0x1916, r1
    7baa:	34 01       	movw	r6, r8
    case EVT_KEY_FIRST(KEY_LEFT):
      if (m_posHorz>0) m_posHorz--;
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (m_posHorz<(s_editMode ? points-1 : 1)) m_posHorz++;
    7bac:	64 01       	movw	r12, r8
    7bae:	90 ee       	ldi	r25, 0xE0	; 224
    7bb0:	00 e0       	ldi	r16, 0x00	; 0
    7bb2:	20 c0       	rjmp	.+64     	; 0x7bf4 <_Z16menuProcCurveOneh+0x1ae>
      if (s_editMode) {
        m_posHorz = 0;
        s_editMode = false;
      }
      else {
        popMenu();
    7bb4:	0e 94 84 22 	call	0x4508	; 0x4508 <_Z7popMenuv>
    7bb8:	f8 cf       	rjmp	.-16     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
      }
      break;
    case EVT_KEY_REPT(KEY_LEFT):
    case EVT_KEY_FIRST(KEY_LEFT):
      if (m_posHorz>0) m_posHorz--;
    7bba:	80 91 4c 19 	lds	r24, 0x194C
    7bbe:	88 23       	and	r24, r24
    7bc0:	a1 f3       	breq	.-24     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    7bc2:	81 50       	subi	r24, 0x01	; 1
    7bc4:	80 93 4c 19 	sts	0x194C, r24
    7bc8:	f0 cf       	rjmp	.-32     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
      break;
    case EVT_KEY_REPT(KEY_RIGHT):
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (m_posHorz<(s_editMode ? points-1 : 1)) m_posHorz++;
    7bca:	40 91 4c 19 	lds	r20, 0x194C
    7bce:	24 2f       	mov	r18, r20
    7bd0:	30 e0       	ldi	r19, 0x00	; 0
    7bd2:	80 91 16 19 	lds	r24, 0x1916
    7bd6:	88 23       	and	r24, r24
    7bd8:	21 f0       	breq	.+8      	; 0x7be2 <_Z16menuProcCurveOneh+0x19c>
    7bda:	8f 2d       	mov	r24, r15
    7bdc:	90 e0       	ldi	r25, 0x00	; 0
    7bde:	01 97       	sbiw	r24, 0x01	; 1
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <_Z16menuProcCurveOneh+0x1a0>
    7be2:	81 e0       	ldi	r24, 0x01	; 1
    7be4:	90 e0       	ldi	r25, 0x00	; 0
    7be6:	28 17       	cp	r18, r24
    7be8:	39 07       	cpc	r19, r25
    7bea:	fc f6       	brge	.-66     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
    7bec:	4f 5f       	subi	r20, 0xFF	; 255
    7bee:	40 93 4c 19 	sts	0x194C, r20
    7bf2:	db cf       	rjmp	.-74     	; 0x7baa <_Z16menuProcCurveOneh+0x164>
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
    uint8_t x, y;
    if (i>4) {
    7bf4:	05 30       	cpi	r16, 0x05	; 5
    7bf6:	20 f4       	brcc	.+8      	; 0x7c00 <_Z16menuProcCurveOneh+0x1ba>
    7bf8:	69 2f       	mov	r22, r25
    7bfa:	68 5d       	subi	r22, 0xD8	; 216
      x = 8*FW; y = (i-4) * FH;
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    7bfc:	88 e1       	ldi	r24, 0x18	; 24
    7bfe:	02 c0       	rjmp	.+4      	; 0x7c04 <_Z16menuProcCurveOneh+0x1be>
  }

  for (uint8_t i = 0; i < points; i++) {
    uint8_t x, y;
    if (i>4) {
      x = 8*FW; y = (i-4) * FH;
    7c00:	69 2f       	mov	r22, r25
    7c02:	80 e3       	ldi	r24, 0x30	; 48
    }
    else {
      x = 4*FW; y = (i+1) * FH;
    }
    uint8_t attr = (s_editMode && m_posHorz == i) ? INVERS : 0;
    7c04:	20 91 16 19 	lds	r18, 0x1916
    7c08:	22 23       	and	r18, r18
    7c0a:	21 f0       	breq	.+8      	; 0x7c14 <_Z16menuProcCurveOneh+0x1ce>
    7c0c:	20 91 4c 19 	lds	r18, 0x194C
    7c10:	20 17       	cp	r18, r16
    7c12:	11 f0       	breq	.+4      	; 0x7c18 <_Z16menuProcCurveOneh+0x1d2>
    7c14:	20 e0       	ldi	r18, 0x00	; 0
    7c16:	01 c0       	rjmp	.+2      	; 0x7c1a <_Z16menuProcCurveOneh+0x1d4>
    7c18:	22 e0       	ldi	r18, 0x02	; 2
    lcd_outdezAtt(x, y, crv[i], attr);
    7c1a:	f6 01       	movw	r30, r12
    7c1c:	41 91       	ld	r20, Z+
    7c1e:	6f 01       	movw	r12, r30
    7c20:	55 27       	eor	r21, r21
    7c22:	47 fd       	sbrc	r20, 7
    7c24:	50 95       	com	r21
    7c26:	99 83       	std	Y+1, r25	; 0x01
    7c28:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    case EVT_KEY_FIRST(KEY_RIGHT):
      if (m_posHorz<(s_editMode ? points-1 : 1)) m_posHorz++;
      break;
  }

  for (uint8_t i = 0; i < points; i++) {
    7c2c:	0f 5f       	subi	r16, 0xFF	; 255
    7c2e:	99 81       	ldd	r25, Y+1	; 0x01
    7c30:	98 5f       	subi	r25, 0xF8	; 248
    7c32:	0f 15       	cp	r16, r15
    7c34:	f8 f2       	brcs	.-66     	; 0x7bf4 <_Z16menuProcCurveOneh+0x1ae>
    }
    uint8_t attr = (s_editMode && m_posHorz == i) ? INVERS : 0;
    lcd_outdezAtt(x, y, crv[i], attr);
  }

  lcd_puts_P(0*FW, 7*FH, PSTR("MODE"));
    7c36:	80 e0       	ldi	r24, 0x00	; 0
    7c38:	68 e3       	ldi	r22, 0x38	; 56
    7c3a:	45 e6       	ldi	r20, 0x65	; 101
    7c3c:	55 e0       	ldi	r21, 0x05	; 5
    7c3e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_putsnAtt(5*FW-2, 7*FH, PSTR("EDIT ""PRSET")+5*(!s_editMode)*m_posHorz, 5, s_editMode ? 0 : INVERS);
    7c42:	60 91 16 19 	lds	r22, 0x1916
    7c46:	66 23       	and	r22, r22
    7c48:	19 f4       	brne	.+6      	; 0x7c50 <_Z16menuProcCurveOneh+0x20a>
    7c4a:	85 e0       	ldi	r24, 0x05	; 5
    7c4c:	90 e0       	ldi	r25, 0x00	; 0
    7c4e:	02 c0       	rjmp	.+4      	; 0x7c54 <_Z16menuProcCurveOneh+0x20e>
    7c50:	80 e0       	ldi	r24, 0x00	; 0
    7c52:	90 e0       	ldi	r25, 0x00	; 0
    7c54:	20 91 4c 19 	lds	r18, 0x194C
    7c58:	30 e0       	ldi	r19, 0x00	; 0
    7c5a:	82 9f       	mul	r24, r18
    7c5c:	a0 01       	movw	r20, r0
    7c5e:	83 9f       	mul	r24, r19
    7c60:	50 0d       	add	r21, r0
    7c62:	92 9f       	mul	r25, r18
    7c64:	50 0d       	add	r21, r0
    7c66:	11 24       	eor	r1, r1
    7c68:	46 5a       	subi	r20, 0xA6	; 166
    7c6a:	5a 4f       	sbci	r21, 0xFA	; 250
    7c6c:	66 23       	and	r22, r22
    7c6e:	11 f0       	breq	.+4      	; 0x7c74 <_Z16menuProcCurveOneh+0x22e>
    7c70:	00 e0       	ldi	r16, 0x00	; 0
    7c72:	01 c0       	rjmp	.+2      	; 0x7c76 <_Z16menuProcCurveOneh+0x230>
    7c74:	02 e0       	ldi	r16, 0x02	; 2
    7c76:	8c e1       	ldi	r24, 0x1C	; 28
    7c78:	68 e3       	ldi	r22, 0x38	; 56
    7c7a:	25 e0       	ldi	r18, 0x05	; 5
    7c7c:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>

  if (s_editMode) {
    7c80:	80 91 16 19 	lds	r24, 0x1916
    7c84:	88 23       	and	r24, r24
    7c86:	09 f4       	brne	.+2      	; 0x7c8a <_Z16menuProcCurveOneh+0x244>
    7c88:	54 c0       	rjmp	.+168    	; 0x7d32 <_Z16menuProcCurveOneh+0x2ec>
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
    7c8a:	9f 2c       	mov	r9, r15
    7c8c:	96 94       	lsr	r9
    7c8e:	88 24       	eor	r8, r8
    7c90:	cc 24       	eor	r12, r12
    7c92:	dd 24       	eor	r13, r13
    7c94:	ee 24       	eor	r14, r14
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
    7c96:	68 e3       	ldi	r22, 0x38	; 56
    7c98:	a6 2e       	mov	r10, r22
    7c9a:	6f ef       	ldi	r22, 0xFF	; 255
    7c9c:	b6 2e       	mov	r11, r22
  lcd_puts_P(0*FW, 7*FH, PSTR("MODE"));
  lcd_putsnAtt(5*FW-2, 7*FH, PSTR("EDIT ""PRSET")+5*(!s_editMode)*m_posHorz, 5, s_editMode ? 0 : INVERS);

  if (s_editMode) {
    for (uint8_t i=0; i<points; i++) {
      uint8_t xx = X0-1-WCHART+i*WCHART/(points/2);
    7c9e:	c6 01       	movw	r24, r12
    7ca0:	69 2d       	mov	r22, r9
    7ca2:	78 2d       	mov	r23, r8
    7ca4:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    7ca8:	46 2f       	mov	r20, r22
    7caa:	e6 2f       	mov	r30, r22
    7cac:	e3 5c       	subi	r30, 0xC3	; 195
      uint8_t yy = (DISPLAY_H-1) - (100 + crv[i]) * (DISPLAY_H-1) / 200;
    7cae:	d3 01       	movw	r26, r6
    7cb0:	2c 91       	ld	r18, X
    7cb2:	bf e3       	ldi	r27, 0x3F	; 63
    7cb4:	2b 02       	muls	r18, r27
    7cb6:	90 01       	movw	r18, r0
    7cb8:	11 24       	eor	r1, r1
    7cba:	24 56       	subi	r18, 0x64	; 100
    7cbc:	37 4e       	sbci	r19, 0xE7	; 231
    7cbe:	c9 01       	movw	r24, r18
    7cc0:	b5 01       	movw	r22, r10
    7cc2:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>

      if (m_posHorz==i) {
    7cc6:	80 91 4c 19 	lds	r24, 0x194C
    7cca:	8e 15       	cp	r24, r14
    7ccc:	01 f5       	brne	.+64     	; 0x7d0e <_Z16menuProcCurveOneh+0x2c8>
        lcd_filled_rect(xx-1, yy-2, 5, 5); // do selection square
    7cce:	63 5c       	subi	r22, 0xC3	; 195
    7cd0:	84 2f       	mov	r24, r20
    7cd2:	84 5c       	subi	r24, 0xC4	; 196
    7cd4:	45 e0       	ldi	r20, 0x05	; 5
    7cd6:	25 e0       	ldi	r18, 0x05	; 5
    7cd8:	00 e0       	ldi	r16, 0x00	; 0
    7cda:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
        if (p1valdiff || event==EVT_KEY_FIRST(KEY_DOWN) || event==EVT_KEY_FIRST(KEY_UP) || event==EVT_KEY_REPT(KEY_DOWN) || event==EVT_KEY_REPT(KEY_UP))
    7cde:	80 91 39 19 	lds	r24, 0x1939
    7ce2:	90 91 3a 19 	lds	r25, 0x193A
    7ce6:	00 97       	sbiw	r24, 0x00	; 0
    7ce8:	41 f4       	brne	.+16     	; 0x7cfa <_Z16menuProcCurveOneh+0x2b4>
    7cea:	12 36       	cpi	r17, 0x62	; 98
    7cec:	31 f0       	breq	.+12     	; 0x7cfa <_Z16menuProcCurveOneh+0x2b4>
    7cee:	13 36       	cpi	r17, 0x63	; 99
    7cf0:	21 f0       	breq	.+8      	; 0x7cfa <_Z16menuProcCurveOneh+0x2b4>
    7cf2:	12 34       	cpi	r17, 0x42	; 66
    7cf4:	11 f0       	breq	.+4      	; 0x7cfa <_Z16menuProcCurveOneh+0x2b4>
    7cf6:	13 34       	cpi	r17, 0x43	; 67
    7cf8:	89 f4       	brne	.+34     	; 0x7d1c <_Z16menuProcCurveOneh+0x2d6>
          CHECK_INCDEC_MODELVAR( event, crv[i], -100,100);  // edit on up/down
    7cfa:	81 2f       	mov	r24, r17
    7cfc:	f3 01       	movw	r30, r6
    7cfe:	60 81       	ld	r22, Z
    7d00:	4c e9       	ldi	r20, 0x9C	; 156
    7d02:	24 e6       	ldi	r18, 0x64	; 100
    7d04:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    7d08:	d3 01       	movw	r26, r6
    7d0a:	8c 93       	st	X, r24
    7d0c:	07 c0       	rjmp	.+14     	; 0x7d1c <_Z16menuProcCurveOneh+0x2d6>
      }
      else {
        lcd_filled_rect(xx, yy-1, 3, 3); // do markup square
    7d0e:	62 5c       	subi	r22, 0xC2	; 194
    7d10:	8e 2f       	mov	r24, r30
    7d12:	43 e0       	ldi	r20, 0x03	; 3
    7d14:	23 e0       	ldi	r18, 0x03	; 3
    7d16:	00 e0       	ldi	r16, 0x00	; 0
    7d18:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>

  lcd_puts_P(0*FW, 7*FH, PSTR("MODE"));
  lcd_putsnAtt(5*FW-2, 7*FH, PSTR("EDIT ""PRSET")+5*(!s_editMode)*m_posHorz, 5, s_editMode ? 0 : INVERS);

  if (s_editMode) {
    for (uint8_t i=0; i<points; i++) {
    7d1c:	e3 94       	inc	r14
    7d1e:	e0 e2       	ldi	r30, 0x20	; 32
    7d20:	f0 e0       	ldi	r31, 0x00	; 0
    7d22:	ce 0e       	add	r12, r30
    7d24:	df 1e       	adc	r13, r31
    7d26:	08 94       	sec
    7d28:	61 1c       	adc	r6, r1
    7d2a:	71 1c       	adc	r7, r1
    7d2c:	ef 14       	cp	r14, r15
    7d2e:	08 f4       	brcc	.+2      	; 0x7d32 <_Z16menuProcCurveOneh+0x2ec>
    7d30:	b6 cf       	rjmp	.-148    	; 0x7c9e <_Z16menuProcCurveOneh+0x258>
        lcd_filled_rect(xx, yy-1, 3, 3); // do markup square
      }
    }
  }

  DrawCurve(curveFn);
    7d32:	87 eb       	ldi	r24, 0xB7	; 183
    7d34:	92 e3       	ldi	r25, 0x32	; 50
    7d36:	0e 94 d9 3c 	call	0x79b2	; 0x79b2 <_Z9DrawCurvePFiiE>
}
    7d3a:	0f 90       	pop	r0
    7d3c:	cf 91       	pop	r28
    7d3e:	df 91       	pop	r29
    7d40:	1f 91       	pop	r17
    7d42:	0f 91       	pop	r16
    7d44:	ff 90       	pop	r15
    7d46:	ef 90       	pop	r14
    7d48:	df 90       	pop	r13
    7d4a:	cf 90       	pop	r12
    7d4c:	bf 90       	pop	r11
    7d4e:	af 90       	pop	r10
    7d50:	9f 90       	pop	r9
    7d52:	8f 90       	pop	r8
    7d54:	7f 90       	pop	r7
    7d56:	6f 90       	pop	r6
    7d58:	08 95       	ret

00007d5a <_Z15getExpoMixCounth>:

uint8_t getExpoMixCount(uint8_t expo)
{
    7d5a:	1f 93       	push	r17
    7d5c:	cf 93       	push	r28
    7d5e:	df 93       	push	r29
    7d60:	18 2f       	mov	r17, r24
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
    7d62:	88 23       	and	r24, r24
    7d64:	11 f0       	breq	.+4      	; 0x7d6a <_Z15getExpoMixCounth+0x10>
    7d66:	cd e0       	ldi	r28, 0x0D	; 13
    7d68:	01 c0       	rjmp	.+2      	; 0x7d6c <_Z15getExpoMixCounth+0x12>
    7d6a:	cf e1       	ldi	r28, 0x1F	; 31
    7d6c:	d0 e0       	ldi	r29, 0x00	; 0
    ch = (expo ? expoaddress(i)->mode : mixaddress(i)->destCh);
    7d6e:	11 23       	and	r17, r17
    7d70:	39 f0       	breq	.+14     	; 0x7d80 <_Z15getExpoMixCounth+0x26>
    7d72:	8c 2f       	mov	r24, r28
    7d74:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7d78:	fc 01       	movw	r30, r24
    7d7a:	80 81       	ld	r24, Z
    7d7c:	83 70       	andi	r24, 0x03	; 3
    7d7e:	06 c0       	rjmp	.+12     	; 0x7d8c <_Z15getExpoMixCounth+0x32>
    7d80:	8c 2f       	mov	r24, r28
    7d82:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7d86:	fc 01       	movw	r30, r24
    7d88:	80 81       	ld	r24, Z
    7d8a:	8f 71       	andi	r24, 0x1F	; 31
    if (ch != 0) {
    7d8c:	81 11       	cpse	r24, r1
      count++;
    7d8e:	df 5f       	subi	r29, 0xFF	; 255
uint8_t getExpoMixCount(uint8_t expo)
{
  uint8_t count = 0;
  uint8_t ch ;

  for(int8_t i=(expo ? MAX_EXPOS-1 : MAX_MIXERS-1); i>=0; i--) {
    7d90:	c1 50       	subi	r28, 0x01	; 1
    7d92:	c7 ff       	sbrs	r28, 7
    7d94:	ec cf       	rjmp	.-40     	; 0x7d6e <_Z15getExpoMixCounth+0x14>
    if (ch != 0) {
      count++;
    }
  }
  return count;
}
    7d96:	8d 2f       	mov	r24, r29
    7d98:	df 91       	pop	r29
    7d9a:	cf 91       	pop	r28
    7d9c:	1f 91       	pop	r17
    7d9e:	08 95       	ret

00007da0 <_Z22reachExpoMixCountLimith>:

bool reachExpoMixCountLimit(uint8_t expo)
{
    7da0:	cf 93       	push	r28
    7da2:	c8 2f       	mov	r28, r24
  // check mixers count limit
  if (getExpoMixCount(expo) >= (expo ? MAX_EXPOS : MAX_MIXERS)) {
    7da4:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <_Z15getExpoMixCounth>
    7da8:	48 2f       	mov	r20, r24
    7daa:	50 e0       	ldi	r21, 0x00	; 0
    7dac:	cc 23       	and	r28, r28
    7dae:	19 f0       	breq	.+6      	; 0x7db6 <_Z22reachExpoMixCountLimith+0x16>
    7db0:	2e e0       	ldi	r18, 0x0E	; 14
    7db2:	30 e0       	ldi	r19, 0x00	; 0
    7db4:	02 c0       	rjmp	.+4      	; 0x7dba <_Z22reachExpoMixCountLimith+0x1a>
    7db6:	20 e2       	ldi	r18, 0x20	; 32
    7db8:	30 e0       	ldi	r19, 0x00	; 0
    7dba:	42 17       	cp	r20, r18
    7dbc:	53 07       	cpc	r21, r19
    7dbe:	6c f0       	brlt	.+26     	; 0x7dda <_Z22reachExpoMixCountLimith+0x3a>
    s_warning = (expo ? PSTR("No free expo!") : PSTR("No free mixer!"));
    7dc0:	cc 23       	and	r28, r28
    7dc2:	19 f0       	breq	.+6      	; 0x7dca <_Z22reachExpoMixCountLimith+0x2a>
    7dc4:	8c e4       	ldi	r24, 0x4C	; 76
    7dc6:	95 e0       	ldi	r25, 0x05	; 5
    7dc8:	02 c0       	rjmp	.+4      	; 0x7dce <_Z22reachExpoMixCountLimith+0x2e>
    7dca:	8d e3       	ldi	r24, 0x3D	; 61
    7dcc:	95 e0       	ldi	r25, 0x05	; 5
    7dce:	90 93 51 19 	sts	0x1951, r25
    7dd2:	80 93 50 19 	sts	0x1950, r24
    return true;
    7dd6:	81 e0       	ldi	r24, 0x01	; 1
    7dd8:	01 c0       	rjmp	.+2      	; 0x7ddc <_Z22reachExpoMixCountLimith+0x3c>
  }
  return false;
    7dda:	80 e0       	ldi	r24, 0x00	; 0
}
    7ddc:	cf 91       	pop	r28
    7dde:	08 95       	ret

00007de0 <_Z13deleteExpoMixhh>:

void deleteExpoMix(uint8_t expo, uint8_t idx)
{
    7de0:	ff 92       	push	r15
    7de2:	0f 93       	push	r16
    7de4:	1f 93       	push	r17
    7de6:	cf 93       	push	r28
    7de8:	df 93       	push	r29
    7dea:	f6 2e       	mov	r15, r22
    7dec:	f3 94       	inc	r15
    7dee:	c6 2f       	mov	r28, r22
    7df0:	d0 e0       	ldi	r29, 0x00	; 0
  if (expo) {
    7df2:	88 23       	and	r24, r24
    7df4:	e9 f0       	breq	.+58     	; 0x7e30 <_Z13deleteExpoMixhh+0x50>
    memmove(expoaddress(idx), expoaddress(idx+1), (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    7df6:	86 2f       	mov	r24, r22
    7df8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7dfc:	8c 01       	movw	r16, r24
    7dfe:	8f 2d       	mov	r24, r15
    7e00:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7e04:	bc 01       	movw	r22, r24
    7e06:	ae 01       	movw	r20, r28
    7e08:	40 95       	com	r20
    7e0a:	50 95       	com	r21
    7e0c:	42 5f       	subi	r20, 0xF2	; 242
    7e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    7e10:	44 0f       	add	r20, r20
    7e12:	55 1f       	adc	r21, r21
    7e14:	44 0f       	add	r20, r20
    7e16:	55 1f       	adc	r21, r21
    7e18:	c8 01       	movw	r24, r16
    7e1a:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    memset(expoaddress(MAX_EXPOS-1), 0, sizeof(ExpoData));
    7e1e:	8d e0       	ldi	r24, 0x0D	; 13
    7e20:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7e24:	fc 01       	movw	r30, r24
    7e26:	10 82       	st	Z, r1
    7e28:	11 82       	std	Z+1, r1	; 0x01
    7e2a:	12 82       	std	Z+2, r1	; 0x02
    7e2c:	13 82       	std	Z+3, r1	; 0x03
    7e2e:	1f c0       	rjmp	.+62     	; 0x7e6e <_Z13deleteExpoMixhh+0x8e>
  }
  else {
    memmove(mixaddress(idx), mixaddress(idx+1), (MAX_MIXERS-(idx+1))*sizeof(MixData));
    7e30:	86 2f       	mov	r24, r22
    7e32:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7e36:	8c 01       	movw	r16, r24
    7e38:	8f 2d       	mov	r24, r15
    7e3a:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7e3e:	bc 01       	movw	r22, r24
    7e40:	c0 95       	com	r28
    7e42:	d0 95       	com	r29
    7e44:	a0 96       	adiw	r28, 0x20	; 32
    7e46:	ae 01       	movw	r20, r28
    7e48:	b3 e0       	ldi	r27, 0x03	; 3
    7e4a:	44 0f       	add	r20, r20
    7e4c:	55 1f       	adc	r21, r21
    7e4e:	ba 95       	dec	r27
    7e50:	e1 f7       	brne	.-8      	; 0x7e4a <_Z13deleteExpoMixhh+0x6a>
    7e52:	4c 0f       	add	r20, r28
    7e54:	5d 1f       	adc	r21, r29
    7e56:	c8 01       	movw	r24, r16
    7e58:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    memset(mixaddress(MAX_MIXERS-1), 0, sizeof(MixData));
    7e5c:	8f e1       	ldi	r24, 0x1F	; 31
    7e5e:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7e62:	fc 01       	movw	r30, r24
    7e64:	89 e0       	ldi	r24, 0x09	; 9
    7e66:	df 01       	movw	r26, r30
    7e68:	1d 92       	st	X+, r1
    7e6a:	8a 95       	dec	r24
    7e6c:	e9 f7       	brne	.-6      	; 0x7e68 <_Z13deleteExpoMixhh+0x88>
  }
  STORE_MODELVARS;
    7e6e:	82 e0       	ldi	r24, 0x02	; 2
    7e70:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
}
    7e74:	df 91       	pop	r29
    7e76:	cf 91       	pop	r28
    7e78:	1f 91       	pop	r17
    7e7a:	0f 91       	pop	r16
    7e7c:	ff 90       	pop	r15
    7e7e:	08 95       	ret

00007e80 <_Z13insertExpoMixhh>:

static int8_t s_currCh;
void insertExpoMix(uint8_t expo, uint8_t idx)
{
    7e80:	0f 93       	push	r16
    7e82:	1f 93       	push	r17
    7e84:	cf 93       	push	r28
    7e86:	df 93       	push	r29
    7e88:	06 2f       	mov	r16, r22
    7e8a:	10 e0       	ldi	r17, 0x00	; 0
  if (expo) {
    7e8c:	88 23       	and	r24, r24
    7e8e:	21 f1       	breq	.+72     	; 0x7ed8 <_Z13insertExpoMixhh+0x58>
    ExpoData *expo = expoaddress(idx);
    7e90:	86 2f       	mov	r24, r22
    7e92:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7e96:	ec 01       	movw	r28, r24
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    7e98:	a8 01       	movw	r20, r16
    7e9a:	40 95       	com	r20
    7e9c:	50 95       	com	r21
    7e9e:	42 5f       	subi	r20, 0xF2	; 242
    7ea0:	5f 4f       	sbci	r21, 0xFF	; 255
    7ea2:	44 0f       	add	r20, r20
    7ea4:	55 1f       	adc	r21, r21
    7ea6:	44 0f       	add	r20, r20
    7ea8:	55 1f       	adc	r21, r21
    7eaa:	ce 01       	movw	r24, r28
    7eac:	04 96       	adiw	r24, 0x04	; 4
    7eae:	be 01       	movw	r22, r28
    7eb0:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    memset(expo,0,sizeof(ExpoData));
    7eb4:	18 82       	st	Y, r1
    7eb6:	19 82       	std	Y+1, r1	; 0x01
    7eb8:	1a 82       	std	Y+2, r1	; 0x02
    7eba:	1b 82       	std	Y+3, r1	; 0x03
    expo->mode = 3; // pos&neg
    7ebc:	93 e0       	ldi	r25, 0x03	; 3
    7ebe:	98 83       	st	Y, r25
    expo->chn = s_currCh - 1;
    7ec0:	80 91 6b 19 	lds	r24, 0x196B
    7ec4:	81 50       	subi	r24, 0x01	; 1
    7ec6:	83 70       	andi	r24, 0x03	; 3
    7ec8:	88 0f       	add	r24, r24
    7eca:	88 0f       	add	r24, r24
    7ecc:	89 2b       	or	r24, r25
    7ece:	88 83       	st	Y, r24
    expo->weight = 100;
    7ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    7ed2:	81 70       	andi	r24, 0x01	; 1
    7ed4:	88 6c       	ori	r24, 0xC8	; 200
    7ed6:	26 c0       	rjmp	.+76     	; 0x7f24 <_Z13insertExpoMixhh+0xa4>
  }
  else {
    MixData *mix = mixaddress(idx);
    7ed8:	86 2f       	mov	r24, r22
    7eda:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7ede:	ec 01       	movw	r28, r24
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
    7ee0:	00 95       	com	r16
    7ee2:	10 95       	com	r17
    7ee4:	00 5e       	subi	r16, 0xE0	; 224
    7ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    7ee8:	a8 01       	movw	r20, r16
    7eea:	83 e0       	ldi	r24, 0x03	; 3
    7eec:	44 0f       	add	r20, r20
    7eee:	55 1f       	adc	r21, r21
    7ef0:	8a 95       	dec	r24
    7ef2:	e1 f7       	brne	.-8      	; 0x7eec <_Z13insertExpoMixhh+0x6c>
    7ef4:	40 0f       	add	r20, r16
    7ef6:	51 1f       	adc	r21, r17
    7ef8:	ce 01       	movw	r24, r28
    7efa:	09 96       	adiw	r24, 0x09	; 9
    7efc:	be 01       	movw	r22, r28
    7efe:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    memset(mix,0,sizeof(MixData));
    7f02:	ec 2f       	mov	r30, r28
    7f04:	fd 2f       	mov	r31, r29
    7f06:	89 e0       	ldi	r24, 0x09	; 9
    7f08:	df 01       	movw	r26, r30
    7f0a:	1d 92       	st	X+, r1
    7f0c:	8a 95       	dec	r24
    7f0e:	e9 f7       	brne	.-6      	; 0x7f0a <_Z13insertExpoMixhh+0x8a>
    mix->destCh = s_currCh;
    7f10:	90 91 6b 19 	lds	r25, 0x196B
    7f14:	29 2f       	mov	r18, r25
    7f16:	2f 71       	andi	r18, 0x1F	; 31
    7f18:	88 81       	ld	r24, Y
    7f1a:	80 7e       	andi	r24, 0xE0	; 224
    7f1c:	82 2b       	or	r24, r18
    7f1e:	88 83       	st	Y, r24
    mix->srcRaw = s_currCh;
    7f20:	99 83       	std	Y+1, r25	; 0x01
    mix->weight = 100;
    7f22:	84 e6       	ldi	r24, 0x64	; 100
    7f24:	8a 83       	std	Y+2, r24	; 0x02
  }
  STORE_MODELVARS;
    7f26:	82 e0       	ldi	r24, 0x02	; 2
    7f28:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
}
    7f2c:	df 91       	pop	r29
    7f2e:	cf 91       	pop	r28
    7f30:	1f 91       	pop	r17
    7f32:	0f 91       	pop	r16
    7f34:	08 95       	ret

00007f36 <_Z11copyExpoMixhh>:

void copyExpoMix(uint8_t expo, uint8_t idx)
{
    7f36:	cf 93       	push	r28
    7f38:	df 93       	push	r29
    7f3a:	c6 2f       	mov	r28, r22
    7f3c:	d0 e0       	ldi	r29, 0x00	; 0
  if (expo) {
    7f3e:	88 23       	and	r24, r24
    7f40:	79 f0       	breq	.+30     	; 0x7f60 <_Z11copyExpoMixhh+0x2a>
    ExpoData *expo = expoaddress(idx);
    7f42:	86 2f       	mov	r24, r22
    7f44:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7f48:	bc 01       	movw	r22, r24
    memmove(expo+1, expo, (MAX_EXPOS-(idx+1))*sizeof(ExpoData));
    7f4a:	ae 01       	movw	r20, r28
    7f4c:	40 95       	com	r20
    7f4e:	50 95       	com	r21
    7f50:	42 5f       	subi	r20, 0xF2	; 242
    7f52:	5f 4f       	sbci	r21, 0xFF	; 255
    7f54:	44 0f       	add	r20, r20
    7f56:	55 1f       	adc	r21, r21
    7f58:	44 0f       	add	r20, r20
    7f5a:	55 1f       	adc	r21, r21
    7f5c:	04 96       	adiw	r24, 0x04	; 4
    7f5e:	10 c0       	rjmp	.+32     	; 0x7f80 <_Z11copyExpoMixhh+0x4a>
  }
  else {
    MixData *mix = mixaddress(idx);
    7f60:	86 2f       	mov	r24, r22
    7f62:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    7f66:	bc 01       	movw	r22, r24
    memmove(mix+1, mix, (MAX_MIXERS-(idx+1))*sizeof(MixData));
    7f68:	c0 95       	com	r28
    7f6a:	d0 95       	com	r29
    7f6c:	a0 96       	adiw	r28, 0x20	; 32
    7f6e:	ae 01       	movw	r20, r28
    7f70:	23 e0       	ldi	r18, 0x03	; 3
    7f72:	44 0f       	add	r20, r20
    7f74:	55 1f       	adc	r21, r21
    7f76:	2a 95       	dec	r18
    7f78:	e1 f7       	brne	.-8      	; 0x7f72 <_Z11copyExpoMixhh+0x3c>
    7f7a:	4c 0f       	add	r20, r28
    7f7c:	5d 1f       	adc	r21, r29
    7f7e:	09 96       	adiw	r24, 0x09	; 9
    7f80:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
  }
  STORE_MODELVARS;
    7f84:	82 e0       	ldi	r24, 0x02	; 2
    7f86:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
}
    7f8a:	df 91       	pop	r29
    7f8c:	cf 91       	pop	r28
    7f8e:	08 95       	ret

00007f90 <_Z7memswapPvS_h>:

void memswap(void *a, void *b, uint8_t size)
{
  uint8_t *x = (uint8_t*)a;
    7f90:	a8 2f       	mov	r26, r24
    7f92:	b9 2f       	mov	r27, r25
  uint8_t *y = (uint8_t*)b;
    7f94:	e6 2f       	mov	r30, r22
    7f96:	f7 2f       	mov	r31, r23
  uint8_t temp ;

  while (size--) {
    7f98:	05 c0       	rjmp	.+10     	; 0x7fa4 <_Z7memswapPvS_h+0x14>
    temp = *x;
    7f9a:	8c 91       	ld	r24, X
    *x++ = *y;
    7f9c:	90 81       	ld	r25, Z
    7f9e:	9d 93       	st	X+, r25
    *y++ = temp;
    7fa0:	81 93       	st	Z+, r24
    7fa2:	41 50       	subi	r20, 0x01	; 1
{
  uint8_t *x = (uint8_t*)a;
  uint8_t *y = (uint8_t*)b;
  uint8_t temp ;

  while (size--) {
    7fa4:	44 23       	and	r20, r20
    7fa6:	c9 f7       	brne	.-14     	; 0x7f9a <_Z7memswapPvS_h+0xa>
    temp = *x;
    *x++ = *y;
    *y++ = temp;
  }
}
    7fa8:	08 95       	ret

00007faa <_Z8swapExpoRhh>:

bool swapExpo(uint8_t &idx, uint8_t up)
{
    7faa:	ef 92       	push	r14
    7fac:	ff 92       	push	r15
    7fae:	0f 93       	push	r16
    7fb0:	1f 93       	push	r17
    7fb2:	cf 93       	push	r28
    7fb4:	df 93       	push	r29
    7fb6:	ec 01       	movw	r28, r24
    7fb8:	e6 2e       	mov	r14, r22
  ExpoData *x = expoaddress(idx);
    7fba:	88 81       	ld	r24, Y
    7fbc:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    7fc0:	8c 01       	movw	r16, r24
    7fc2:	f8 80       	ld	r15, Y
  int8_t tgt_idx = (up ? idx-1 : idx+1);
    7fc4:	ee 20       	and	r14, r14
    7fc6:	11 f0       	breq	.+4      	; 0x7fcc <_Z8swapExpoRhh+0x22>
    7fc8:	fa 94       	dec	r15
    7fca:	01 c0       	rjmp	.+2      	; 0x7fce <_Z8swapExpoRhh+0x24>
    7fcc:	f3 94       	inc	r15

  if (tgt_idx < 0) {
    7fce:	f7 fe       	sbrs	r15, 7
    7fd0:	10 c0       	rjmp	.+32     	; 0x7ff2 <_Z8swapExpoRhh+0x48>
    if (x->chn == 0)
    7fd2:	d8 01       	movw	r26, r16
    7fd4:	9c 91       	ld	r25, X
    7fd6:	89 2f       	mov	r24, r25
    7fd8:	8c 70       	andi	r24, 0x0C	; 12
    7fda:	09 f4       	brne	.+2      	; 0x7fde <_Z8swapExpoRhh+0x34>
    7fdc:	4c c0       	rjmp	.+152    	; 0x8076 <_Z8swapExpoRhh+0xcc>
      return false;
    x->chn--;
    7fde:	89 2f       	mov	r24, r25
    7fe0:	86 95       	lsr	r24
    7fe2:	86 95       	lsr	r24
    7fe4:	8d 5f       	subi	r24, 0xFD	; 253
    7fe6:	83 70       	andi	r24, 0x03	; 3
    7fe8:	88 0f       	add	r24, r24
    7fea:	88 0f       	add	r24, r24
    7fec:	93 7f       	andi	r25, 0xF3	; 243
    7fee:	98 2b       	or	r25, r24
    7ff0:	38 c0       	rjmp	.+112    	; 0x8062 <_Z8swapExpoRhh+0xb8>
    return true;
  }

  if (tgt_idx == MAX_EXPOS) {
    7ff2:	bf 2d       	mov	r27, r15
    7ff4:	be 30       	cpi	r27, 0x0E	; 14
    7ff6:	59 f4       	brne	.+22     	; 0x800e <_Z8swapExpoRhh+0x64>
    if (x->chn == NUM_STICKS-1)
    7ff8:	f8 01       	movw	r30, r16
    7ffa:	90 81       	ld	r25, Z
    7ffc:	89 2f       	mov	r24, r25
    7ffe:	8c 70       	andi	r24, 0x0C	; 12
    8000:	8c 30       	cpi	r24, 0x0C	; 12
    8002:	c9 f1       	breq	.+114    	; 0x8076 <_Z8swapExpoRhh+0xcc>
      return false;
    x->chn++;
    8004:	89 2f       	mov	r24, r25
    8006:	86 95       	lsr	r24
    8008:	86 95       	lsr	r24
    800a:	8f 5f       	subi	r24, 0xFF	; 255
    800c:	16 c0       	rjmp	.+44     	; 0x803a <_Z8swapExpoRhh+0x90>
    return true;
  }

  ExpoData *y = expoaddress(tgt_idx);
    800e:	8f 2d       	mov	r24, r15
    8010:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    8014:	fc 01       	movw	r30, r24
  if(x->chn != y->chn || !y->mode) {
    8016:	90 81       	ld	r25, Z
    8018:	d8 01       	movw	r26, r16
    801a:	8c 91       	ld	r24, X
    801c:	89 27       	eor	r24, r25
    801e:	8c 70       	andi	r24, 0x0C	; 12
    8020:	11 f4       	brne	.+4      	; 0x8026 <_Z8swapExpoRhh+0x7c>
    8022:	93 70       	andi	r25, 0x03	; 3
    8024:	01 f5       	brne	.+64     	; 0x8066 <_Z8swapExpoRhh+0xbc>
    8026:	f8 01       	movw	r30, r16
    8028:	90 81       	ld	r25, Z
    if (up) {
    802a:	ee 20       	and	r14, r14
    802c:	69 f0       	breq	.+26     	; 0x8048 <_Z8swapExpoRhh+0x9e>
      if (x->chn>0) x->chn--;
    802e:	89 2f       	mov	r24, r25
    8030:	86 95       	lsr	r24
    8032:	86 95       	lsr	r24
    8034:	83 70       	andi	r24, 0x03	; 3
    8036:	f9 f0       	breq	.+62     	; 0x8076 <_Z8swapExpoRhh+0xcc>
    8038:	8d 5f       	subi	r24, 0xFD	; 253
    803a:	83 70       	andi	r24, 0x03	; 3
    803c:	88 0f       	add	r24, r24
    803e:	88 0f       	add	r24, r24
    8040:	93 7f       	andi	r25, 0xF3	; 243
    8042:	98 2b       	or	r25, r24
    8044:	90 83       	st	Z, r25
    8046:	15 c0       	rjmp	.+42     	; 0x8072 <_Z8swapExpoRhh+0xc8>
      else return false;
    }
    else {
      if (x->chn<NUM_STICKS-1) x->chn++;
    8048:	89 2f       	mov	r24, r25
    804a:	86 95       	lsr	r24
    804c:	86 95       	lsr	r24
    804e:	83 70       	andi	r24, 0x03	; 3
    8050:	83 30       	cpi	r24, 0x03	; 3
    8052:	89 f0       	breq	.+34     	; 0x8076 <_Z8swapExpoRhh+0xcc>
    8054:	8f 5f       	subi	r24, 0xFF	; 255
    8056:	83 70       	andi	r24, 0x03	; 3
    8058:	88 0f       	add	r24, r24
    805a:	88 0f       	add	r24, r24
    805c:	93 7f       	andi	r25, 0xF3	; 243
    805e:	98 2b       	or	r25, r24
    8060:	d8 01       	movw	r26, r16
    8062:	9c 93       	st	X, r25
    8064:	06 c0       	rjmp	.+12     	; 0x8072 <_Z8swapExpoRhh+0xc8>
      else return false;
    }
    return true;
  }

  memswap(x, y, sizeof(ExpoData));
    8066:	c8 01       	movw	r24, r16
    8068:	bf 01       	movw	r22, r30
    806a:	44 e0       	ldi	r20, 0x04	; 4
    806c:	0e 94 c8 3f 	call	0x7f90	; 0x7f90 <_Z7memswapPvS_h>
  idx = tgt_idx;
    8070:	f8 82       	st	Y, r15
  return true;
    8072:	81 e0       	ldi	r24, 0x01	; 1
    8074:	01 c0       	rjmp	.+2      	; 0x8078 <_Z8swapExpoRhh+0xce>
      if (x->chn>0) x->chn--;
      else return false;
    }
    else {
      if (x->chn<NUM_STICKS-1) x->chn++;
      else return false;
    8076:	80 e0       	ldi	r24, 0x00	; 0
  }

  memswap(x, y, sizeof(ExpoData));
  idx = tgt_idx;
  return true;
}
    8078:	df 91       	pop	r29
    807a:	cf 91       	pop	r28
    807c:	1f 91       	pop	r17
    807e:	0f 91       	pop	r16
    8080:	ff 90       	pop	r15
    8082:	ef 90       	pop	r14
    8084:	08 95       	ret

00008086 <_Z7swapMixRhh>:

bool swapMix(uint8_t &idx, uint8_t up)
{
    8086:	ef 92       	push	r14
    8088:	ff 92       	push	r15
    808a:	0f 93       	push	r16
    808c:	1f 93       	push	r17
    808e:	cf 93       	push	r28
    8090:	df 93       	push	r29
    8092:	ec 01       	movw	r28, r24
    8094:	e6 2e       	mov	r14, r22
  MixData *x = mixaddress(idx);
    8096:	88 81       	ld	r24, Y
    8098:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    809c:	8c 01       	movw	r16, r24
    809e:	f8 80       	ld	r15, Y
  int8_t tgt_idx = (up ? idx-1 : idx+1);
    80a0:	ee 20       	and	r14, r14
    80a2:	11 f0       	breq	.+4      	; 0x80a8 <_Z7swapMixRhh+0x22>
    80a4:	fa 94       	dec	r15
    80a6:	01 c0       	rjmp	.+2      	; 0x80aa <_Z7swapMixRhh+0x24>
    80a8:	f3 94       	inc	r15

  if (tgt_idx < 0) {
    80aa:	f7 fe       	sbrs	r15, 7
    80ac:	0d c0       	rjmp	.+26     	; 0x80c8 <_Z7swapMixRhh+0x42>
    if (x->destCh == 1)
    80ae:	d8 01       	movw	r26, r16
    80b0:	8c 91       	ld	r24, X
    80b2:	98 2f       	mov	r25, r24
    80b4:	9f 71       	andi	r25, 0x1F	; 31
    80b6:	91 30       	cpi	r25, 0x01	; 1
    80b8:	09 f4       	brne	.+2      	; 0x80bc <_Z7swapMixRhh+0x36>
    80ba:	42 c0       	rjmp	.+132    	; 0x8140 <_Z7swapMixRhh+0xba>
      return false;
    x->destCh--;
    80bc:	91 50       	subi	r25, 0x01	; 1
    80be:	9f 71       	andi	r25, 0x1F	; 31
    80c0:	80 7e       	andi	r24, 0xE0	; 224
    80c2:	89 2b       	or	r24, r25
    80c4:	8c 93       	st	X, r24
    80c6:	3a c0       	rjmp	.+116    	; 0x813c <_Z7swapMixRhh+0xb6>
    return true;
  }

  if (tgt_idx == MAX_MIXERS) {
    80c8:	bf 2d       	mov	r27, r15
    80ca:	b0 32       	cpi	r27, 0x20	; 32
    80cc:	61 f4       	brne	.+24     	; 0x80e6 <_Z7swapMixRhh+0x60>
    if (x->destCh == NUM_CHNOUT)
    80ce:	f8 01       	movw	r30, r16
    80d0:	80 81       	ld	r24, Z
    80d2:	98 2f       	mov	r25, r24
    80d4:	9f 71       	andi	r25, 0x1F	; 31
    80d6:	90 31       	cpi	r25, 0x10	; 16
    80d8:	99 f1       	breq	.+102    	; 0x8140 <_Z7swapMixRhh+0xba>
      return false;
    x->destCh++;
    80da:	9f 5f       	subi	r25, 0xFF	; 255
    80dc:	9f 71       	andi	r25, 0x1F	; 31
    80de:	80 7e       	andi	r24, 0xE0	; 224
    80e0:	89 2b       	or	r24, r25
    80e2:	80 83       	st	Z, r24
    80e4:	2b c0       	rjmp	.+86     	; 0x813c <_Z7swapMixRhh+0xb6>
    return true;
  }

  MixData *y = mixaddress(tgt_idx);
    80e6:	8f 2d       	mov	r24, r15
    80e8:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    80ec:	fc 01       	movw	r30, r24
  if(x->destCh != y->destCh) {
    80ee:	80 81       	ld	r24, Z
    80f0:	d8 01       	movw	r26, r16
    80f2:	2c 91       	ld	r18, X
    80f4:	82 27       	eor	r24, r18
    80f6:	8f 71       	andi	r24, 0x1F	; 31
    80f8:	d9 f0       	breq	.+54     	; 0x8130 <_Z7swapMixRhh+0xaa>
    80fa:	32 2f       	mov	r19, r18
    80fc:	3f 71       	andi	r19, 0x1F	; 31
    if (up) {
    80fe:	ee 20       	and	r14, r14
    8100:	59 f0       	breq	.+22     	; 0x8118 <_Z7swapMixRhh+0x92>
      if (x->destCh>1) x->destCh--;
    8102:	83 2f       	mov	r24, r19
    8104:	90 e0       	ldi	r25, 0x00	; 0
    8106:	82 30       	cpi	r24, 0x02	; 2
    8108:	91 05       	cpc	r25, r1
    810a:	d4 f0       	brlt	.+52     	; 0x8140 <_Z7swapMixRhh+0xba>
    810c:	31 5e       	subi	r19, 0xE1	; 225
    810e:	3f 71       	andi	r19, 0x1F	; 31
    8110:	20 7e       	andi	r18, 0xE0	; 224
    8112:	23 2b       	or	r18, r19
    8114:	2c 93       	st	X, r18
    8116:	12 c0       	rjmp	.+36     	; 0x813c <_Z7swapMixRhh+0xb6>
      else return false;
    }
    else {
      if (x->destCh<NUM_CHNOUT) x->destCh++;
    8118:	83 2f       	mov	r24, r19
    811a:	90 e0       	ldi	r25, 0x00	; 0
    811c:	80 31       	cpi	r24, 0x10	; 16
    811e:	91 05       	cpc	r25, r1
    8120:	7c f4       	brge	.+30     	; 0x8140 <_Z7swapMixRhh+0xba>
    8122:	3f 5f       	subi	r19, 0xFF	; 255
    8124:	3f 71       	andi	r19, 0x1F	; 31
    8126:	20 7e       	andi	r18, 0xE0	; 224
    8128:	23 2b       	or	r18, r19
    812a:	f8 01       	movw	r30, r16
    812c:	20 83       	st	Z, r18
    812e:	06 c0       	rjmp	.+12     	; 0x813c <_Z7swapMixRhh+0xb6>
      else return false;
    }
    return true;
  }

  memswap(x, y, sizeof(MixData));
    8130:	c8 01       	movw	r24, r16
    8132:	bf 01       	movw	r22, r30
    8134:	49 e0       	ldi	r20, 0x09	; 9
    8136:	0e 94 c8 3f 	call	0x7f90	; 0x7f90 <_Z7memswapPvS_h>
  idx = tgt_idx;
    813a:	f8 82       	st	Y, r15
  return true;
    813c:	81 e0       	ldi	r24, 0x01	; 1
    813e:	01 c0       	rjmp	.+2      	; 0x8142 <_Z7swapMixRhh+0xbc>
      if (x->destCh>1) x->destCh--;
      else return false;
    }
    else {
      if (x->destCh<NUM_CHNOUT) x->destCh++;
      else return false;
    8140:	80 e0       	ldi	r24, 0x00	; 0
  }

  memswap(x, y, sizeof(MixData));
  idx = tgt_idx;
  return true;
}
    8142:	df 91       	pop	r29
    8144:	cf 91       	pop	r28
    8146:	1f 91       	pop	r17
    8148:	0f 91       	pop	r16
    814a:	ff 90       	pop	r15
    814c:	ef 90       	pop	r14
    814e:	08 95       	ret

00008150 <_Z11swapExpoMixhRhh>:

bool swapExpoMix(uint8_t expo, uint8_t &idx, uint8_t up)
{
    8150:	cf 93       	push	r28
    8152:	9b 01       	movw	r18, r22
    8154:	64 2f       	mov	r22, r20
  bool result = (expo ? swapExpo(idx, up) : swapMix(idx, up));
    8156:	88 23       	and	r24, r24
    8158:	21 f0       	breq	.+8      	; 0x8162 <_Z11swapExpoMixhRhh+0x12>
    815a:	c9 01       	movw	r24, r18
    815c:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <_Z8swapExpoRhh>
    8160:	03 c0       	rjmp	.+6      	; 0x8168 <_Z11swapExpoMixhRhh+0x18>
    8162:	c9 01       	movw	r24, r18
    8164:	0e 94 43 40 	call	0x8086	; 0x8086 <_Z7swapMixRhh>
    8168:	c8 2f       	mov	r28, r24
  if (result)
    816a:	88 23       	and	r24, r24
    816c:	19 f0       	breq	.+6      	; 0x8174 <_Z11swapExpoMixhRhh+0x24>
    STORE_MODELVARS;
    816e:	82 e0       	ldi	r24, 0x02	; 2
    8170:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
  return result;
}
    8174:	8c 2f       	mov	r24, r28
    8176:	cf 91       	pop	r28
    8178:	08 95       	ret

0000817a <_Z12editExpoValshhbhh>:

inline void editExpoVals(uint8_t event, uint8_t which, bool edit, uint8_t y, uint8_t idt)
{
    817a:	cf 92       	push	r12
    817c:	df 92       	push	r13
    817e:	ef 92       	push	r14
    8180:	ff 92       	push	r15
    8182:	0f 93       	push	r16
    8184:	1f 93       	push	r17
    8186:	df 93       	push	r29
    8188:	cf 93       	push	r28
    818a:	0f 92       	push	r0
    818c:	0f 92       	push	r0
    818e:	cd b7       	in	r28, 0x3d	; 61
    8190:	de b7       	in	r29, 0x3e	; 62
    8192:	18 2f       	mov	r17, r24
    8194:	36 2f       	mov	r19, r22
    8196:	f4 2e       	mov	r15, r20
    8198:	62 2f       	mov	r22, r18
    819a:	80 2f       	mov	r24, r16
  uint8_t invBlk = edit ? INVERS : 0;
    819c:	44 23       	and	r20, r20
    819e:	11 f0       	breq	.+4      	; 0x81a4 <_Z12editExpoValshhbhh+0x2a>
    81a0:	02 e0       	ldi	r16, 0x02	; 2
    81a2:	01 c0       	rjmp	.+2      	; 0x81a6 <_Z12editExpoValshhbhh+0x2c>
    81a4:	00 e0       	ldi	r16, 0x00	; 0
  // if(edit && stopBlink) invBlk = INVERS;

  ExpoData *ed = expoaddress(idt);
    81a6:	3a 83       	std	Y+2, r19	; 0x02
    81a8:	69 83       	std	Y+1, r22	; 0x01
    81aa:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    81ae:	6c 01       	movw	r12, r24

  switch(which)
    81b0:	3a 81       	ldd	r19, Y+2	; 0x02
    81b2:	69 81       	ldd	r22, Y+1	; 0x01
    81b4:	32 30       	cpi	r19, 0x02	; 2
    81b6:	09 f4       	brne	.+2      	; 0x81ba <_Z12editExpoValshhbhh+0x40>
    81b8:	42 c0       	rjmp	.+132    	; 0x823e <_Z12editExpoValshhbhh+0xc4>
    81ba:	33 30       	cpi	r19, 0x03	; 3
    81bc:	30 f4       	brcc	.+12     	; 0x81ca <_Z12editExpoValshhbhh+0x50>
    81be:	33 23       	and	r19, r19
    81c0:	71 f0       	breq	.+28     	; 0x81de <_Z12editExpoValshhbhh+0x64>
    81c2:	31 30       	cpi	r19, 0x01	; 1
    81c4:	09 f0       	breq	.+2      	; 0x81c8 <_Z12editExpoValshhbhh+0x4e>
    81c6:	f6 c0       	rjmp	.+492    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    81c8:	24 c0       	rjmp	.+72     	; 0x8212 <_Z12editExpoValshhbhh+0x98>
    81ca:	34 30       	cpi	r19, 0x04	; 4
    81cc:	09 f4       	brne	.+2      	; 0x81d0 <_Z12editExpoValshhbhh+0x56>
    81ce:	8f c0       	rjmp	.+286    	; 0x82ee <_Z12editExpoValshhbhh+0x174>
    81d0:	34 30       	cpi	r19, 0x04	; 4
    81d2:	08 f4       	brcc	.+2      	; 0x81d6 <_Z12editExpoValshhbhh+0x5c>
    81d4:	69 c0       	rjmp	.+210    	; 0x82a8 <_Z12editExpoValshhbhh+0x12e>
    81d6:	35 30       	cpi	r19, 0x05	; 5
    81d8:	09 f0       	breq	.+2      	; 0x81dc <_Z12editExpoValshhbhh+0x62>
    81da:	ec c0       	rjmp	.+472    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    81dc:	b2 c0       	rjmp	.+356    	; 0x8342 <_Z12editExpoValshhbhh+0x1c8>
  {
    case 0:
      lcd_outdezAtt(9*FW+5, y, ed->weight, invBlk);
    81de:	fc 01       	movw	r30, r24
    81e0:	42 81       	ldd	r20, Z+2	; 0x02
    81e2:	46 95       	lsr	r20
    81e4:	8b e3       	ldi	r24, 0x3B	; 59
    81e6:	50 e0       	ldi	r21, 0x00	; 0
    81e8:	20 2f       	mov	r18, r16
    81ea:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
      if(edit) CHECK_INCDEC_MODELVAR(event, ed->weight, 0, 100);
    81ee:	ff 20       	and	r15, r15
    81f0:	09 f4       	brne	.+2      	; 0x81f4 <_Z12editExpoValshhbhh+0x7a>
    81f2:	e0 c0       	rjmp	.+448    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    81f4:	f6 01       	movw	r30, r12
    81f6:	62 81       	ldd	r22, Z+2	; 0x02
    81f8:	66 95       	lsr	r22
    81fa:	81 2f       	mov	r24, r17
    81fc:	40 e0       	ldi	r20, 0x00	; 0
    81fe:	24 e6       	ldi	r18, 0x64	; 100
    8200:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8204:	88 0f       	add	r24, r24
    8206:	f6 01       	movw	r30, r12
    8208:	92 81       	ldd	r25, Z+2	; 0x02
    820a:	91 70       	andi	r25, 0x01	; 1
    820c:	98 2b       	or	r25, r24
    820e:	92 83       	std	Z+2, r25	; 0x02
    8210:	d1 c0       	rjmp	.+418    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
      break;
    case 1:
      lcd_outdezAtt(9*FW+5, y, ed->expo, invBlk);
    8212:	fc 01       	movw	r30, r24
    8214:	43 81       	ldd	r20, Z+3	; 0x03
    8216:	55 27       	eor	r21, r21
    8218:	47 fd       	sbrc	r20, 7
    821a:	50 95       	com	r21
    821c:	8b e3       	ldi	r24, 0x3B	; 59
    821e:	20 2f       	mov	r18, r16
    8220:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
      if(edit) CHECK_INCDEC_MODELVAR(event, ed->expo, -100, 100);
    8224:	ff 20       	and	r15, r15
    8226:	09 f4       	brne	.+2      	; 0x822a <_Z12editExpoValshhbhh+0xb0>
    8228:	c5 c0       	rjmp	.+394    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    822a:	81 2f       	mov	r24, r17
    822c:	f6 01       	movw	r30, r12
    822e:	63 81       	ldd	r22, Z+3	; 0x03
    8230:	4c e9       	ldi	r20, 0x9C	; 156
    8232:	24 e6       	ldi	r18, 0x64	; 100
    8234:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8238:	f6 01       	movw	r30, r12
    823a:	83 83       	std	Z+3, r24	; 0x03
    823c:	bb c0       	rjmp	.+374    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
      break;
    case 2:
      {
        int8_t phase = ed->negPhase ? -ed->phase : +ed->phase;
    823e:	fc 01       	movw	r30, r24
    8240:	82 81       	ldd	r24, Z+2	; 0x02
    8242:	e1 80       	ldd	r14, Z+1	; 0x01
    8244:	80 ff       	sbrs	r24, 0
    8246:	06 c0       	rjmp	.+12     	; 0x8254 <_Z12editExpoValshhbhh+0xda>
    8248:	e2 94       	swap	r14
    824a:	e6 94       	lsr	r14
    824c:	f7 e0       	ldi	r31, 0x07	; 7
    824e:	ef 22       	and	r14, r31
    8250:	e1 94       	neg	r14
    8252:	04 c0       	rjmp	.+8      	; 0x825c <_Z12editExpoValshhbhh+0xe2>
    8254:	e2 94       	swap	r14
    8256:	e6 94       	lsr	r14
    8258:	e7 e0       	ldi	r30, 0x07	; 7
    825a:	ee 22       	and	r14, r30
        putsFlightPhase(6*FW+5, y, phase, invBlk);
    825c:	89 e2       	ldi	r24, 0x29	; 41
    825e:	4e 2d       	mov	r20, r14
    8260:	20 2f       	mov	r18, r16
    8262:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>
        if(edit) { phase = checkIncDecModel(event, phase, -MAX_PHASES, MAX_PHASES); ed->negPhase = (phase < 0); ed->phase = abs(phase); }
    8266:	ff 20       	and	r15, r15
    8268:	09 f4       	brne	.+2      	; 0x826c <_Z12editExpoValshhbhh+0xf2>
    826a:	a4 c0       	rjmp	.+328    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    826c:	81 2f       	mov	r24, r17
    826e:	6e 2d       	mov	r22, r14
    8270:	4b ef       	ldi	r20, 0xFB	; 251
    8272:	25 e0       	ldi	r18, 0x05	; 5
    8274:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8278:	28 2f       	mov	r18, r24
    827a:	22 1f       	adc	r18, r18
    827c:	22 27       	eor	r18, r18
    827e:	22 1f       	adc	r18, r18
    8280:	f6 01       	movw	r30, r12
    8282:	92 81       	ldd	r25, Z+2	; 0x02
    8284:	9e 7f       	andi	r25, 0xFE	; 254
    8286:	92 2b       	or	r25, r18
    8288:	92 83       	std	Z+2, r25	; 0x02
    828a:	99 27       	eor	r25, r25
    828c:	87 fd       	sbrc	r24, 7
    828e:	90 95       	com	r25
    8290:	97 ff       	sbrs	r25, 7
    8292:	03 c0       	rjmp	.+6      	; 0x829a <_Z12editExpoValshhbhh+0x120>
    8294:	90 95       	com	r25
    8296:	81 95       	neg	r24
    8298:	9f 4f       	sbci	r25, 0xFF	; 255
    829a:	82 95       	swap	r24
    829c:	88 0f       	add	r24, r24
    829e:	80 7e       	andi	r24, 0xE0	; 224
    82a0:	f6 01       	movw	r30, r12
    82a2:	91 81       	ldd	r25, Z+1	; 0x01
    82a4:	9f 71       	andi	r25, 0x1F	; 31
    82a6:	20 c0       	rjmp	.+64     	; 0x82e8 <_Z12editExpoValshhbhh+0x16e>
      }
      break;
    case 3:
      putsSwitches(6*FW+5, y, ed->swtch, invBlk);
    82a8:	fc 01       	movw	r30, r24
    82aa:	41 81       	ldd	r20, Z+1	; 0x01
    82ac:	44 0f       	add	r20, r20
    82ae:	44 0f       	add	r20, r20
    82b0:	44 0f       	add	r20, r20
    82b2:	45 95       	asr	r20
    82b4:	45 95       	asr	r20
    82b6:	45 95       	asr	r20
    82b8:	89 e2       	ldi	r24, 0x29	; 41
    82ba:	20 2f       	mov	r18, r16
    82bc:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
      if(edit) CHECK_INCDEC_MODELVAR(event, ed->swtch, -MAX_DRSWITCH, MAX_DRSWITCH);
    82c0:	ff 20       	and	r15, r15
    82c2:	09 f4       	brne	.+2      	; 0x82c6 <_Z12editExpoValshhbhh+0x14c>
    82c4:	77 c0       	rjmp	.+238    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    82c6:	f6 01       	movw	r30, r12
    82c8:	61 81       	ldd	r22, Z+1	; 0x01
    82ca:	66 0f       	add	r22, r22
    82cc:	66 0f       	add	r22, r22
    82ce:	66 0f       	add	r22, r22
    82d0:	65 95       	asr	r22
    82d2:	65 95       	asr	r22
    82d4:	65 95       	asr	r22
    82d6:	81 2f       	mov	r24, r17
    82d8:	41 ef       	ldi	r20, 0xF1	; 241
    82da:	2f e0       	ldi	r18, 0x0F	; 15
    82dc:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    82e0:	8f 71       	andi	r24, 0x1F	; 31
    82e2:	f6 01       	movw	r30, r12
    82e4:	91 81       	ldd	r25, Z+1	; 0x01
    82e6:	90 7e       	andi	r25, 0xE0	; 224
    82e8:	98 2b       	or	r25, r24
    82ea:	91 83       	std	Z+1, r25	; 0x01
    82ec:	63 c0       	rjmp	.+198    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
      break;
    case 4:
      lcd_putsnAtt(6*FW+5, y, PSTR("---x>0x<0")+9-3*ed->mode, 3, invBlk);
    82ee:	fc 01       	movw	r30, r24
    82f0:	80 81       	ld	r24, Z
    82f2:	83 70       	andi	r24, 0x03	; 3
    82f4:	90 e0       	ldi	r25, 0x00	; 0
    82f6:	ac 01       	movw	r20, r24
    82f8:	44 0f       	add	r20, r20
    82fa:	55 1f       	adc	r21, r21
    82fc:	48 0f       	add	r20, r24
    82fe:	59 1f       	adc	r21, r25
    8300:	50 95       	com	r21
    8302:	41 95       	neg	r20
    8304:	5f 4f       	sbci	r21, 0xFF	; 255
    8306:	44 5c       	subi	r20, 0xC4	; 196
    8308:	5a 4f       	sbci	r21, 0xFA	; 250
    830a:	89 e2       	ldi	r24, 0x29	; 41
    830c:	23 e0       	ldi	r18, 0x03	; 3
    830e:	3a 83       	std	Y+2, r19	; 0x02
    8310:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      if(edit) ed->mode = 4 - checkIncDecModel(event, 4-ed->mode, 1, 3);
    8314:	3a 81       	ldd	r19, Y+2	; 0x02
    8316:	ff 20       	and	r15, r15
    8318:	09 f4       	brne	.+2      	; 0x831c <_Z12editExpoValshhbhh+0x1a2>
    831a:	4c c0       	rjmp	.+152    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    831c:	f6 01       	movw	r30, r12
    831e:	80 81       	ld	r24, Z
    8320:	83 70       	andi	r24, 0x03	; 3
    8322:	63 2f       	mov	r22, r19
    8324:	68 1b       	sub	r22, r24
    8326:	81 2f       	mov	r24, r17
    8328:	41 e0       	ldi	r20, 0x01	; 1
    832a:	23 e0       	ldi	r18, 0x03	; 3
    832c:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8330:	3a 81       	ldd	r19, Y+2	; 0x02
    8332:	38 1b       	sub	r19, r24
    8334:	33 70       	andi	r19, 0x03	; 3
    8336:	f6 01       	movw	r30, r12
    8338:	80 81       	ld	r24, Z
    833a:	8c 7f       	andi	r24, 0xFC	; 252
    833c:	83 2b       	or	r24, r19
    833e:	80 83       	st	Z, r24
    8340:	39 c0       	rjmp	.+114    	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
      break;
    case 5:
      putsCurve(6*FW+5, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0), invBlk);
    8342:	fc 01       	movw	r30, r24
    8344:	20 81       	ld	r18, Z
    8346:	22 95       	swap	r18
    8348:	2f 70       	andi	r18, 0x0F	; 15
    834a:	82 2f       	mov	r24, r18
    834c:	90 e0       	ldi	r25, 0x00	; 0
    834e:	8b 30       	cpi	r24, 0x0B	; 11
    8350:	91 05       	cpc	r25, r1
    8352:	14 f0       	brlt	.+4      	; 0x8358 <_Z12editExpoValshhbhh+0x1de>
    8354:	44 e0       	ldi	r20, 0x04	; 4
    8356:	01 c0       	rjmp	.+2      	; 0x835a <_Z12editExpoValshhbhh+0x1e0>
    8358:	40 e0       	ldi	r20, 0x00	; 0
    835a:	42 0f       	add	r20, r18
    835c:	89 e2       	ldi	r24, 0x29	; 41
    835e:	20 2f       	mov	r18, r16
    8360:	0e 94 13 6c 	call	0xd826	; 0xd826 <_Z9putsCurvehhhh>
      if(invBlk) CHECK_INCDEC_MODELVAR(event, ed->curve, 0, 15);
    8364:	00 23       	and	r16, r16
    8366:	31 f1       	breq	.+76     	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    8368:	f6 01       	movw	r30, r12
    836a:	60 81       	ld	r22, Z
    836c:	62 95       	swap	r22
    836e:	6f 70       	andi	r22, 0x0F	; 15
    8370:	81 2f       	mov	r24, r17
    8372:	40 e0       	ldi	r20, 0x00	; 0
    8374:	2f e0       	ldi	r18, 0x0F	; 15
    8376:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    837a:	8f 70       	andi	r24, 0x0F	; 15
    837c:	28 2f       	mov	r18, r24
    837e:	22 95       	swap	r18
    8380:	20 7f       	andi	r18, 0xF0	; 240
    8382:	f6 01       	movw	r30, r12
    8384:	90 81       	ld	r25, Z
    8386:	9f 70       	andi	r25, 0x0F	; 15
    8388:	92 2b       	or	r25, r18
    838a:	90 83       	st	Z, r25
      if(invBlk && ed->curve>=CURVE_BASE && event==EVT_KEY_FIRST(KEY_MENU)) {
    838c:	28 2f       	mov	r18, r24
    838e:	30 e0       	ldi	r19, 0x00	; 0
    8390:	27 30       	cpi	r18, 0x07	; 7
    8392:	31 05       	cpc	r19, r1
    8394:	7c f0       	brlt	.+30     	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
    8396:	10 36       	cpi	r17, 0x60	; 96
    8398:	69 f4       	brne	.+26     	; 0x83b4 <_Z12editExpoValshhbhh+0x23a>
        s_curveChan = ed->curve - (ed->curve >= CURVE_BASE+4 ? CURVE_BASE-4 : CURVE_BASE);
    839a:	2b 30       	cpi	r18, 0x0B	; 11
    839c:	31 05       	cpc	r19, r1
    839e:	14 f0       	brlt	.+4      	; 0x83a4 <_Z12editExpoValshhbhh+0x22a>
    83a0:	93 e0       	ldi	r25, 0x03	; 3
    83a2:	01 c0       	rjmp	.+2      	; 0x83a6 <_Z12editExpoValshhbhh+0x22c>
    83a4:	97 e0       	ldi	r25, 0x07	; 7
    83a6:	89 1b       	sub	r24, r25
    83a8:	80 93 56 19 	sts	0x1956, r24
        pushMenu(menuProcCurveOne);
    83ac:	83 e2       	ldi	r24, 0x23	; 35
    83ae:	9d e3       	ldi	r25, 0x3D	; 61
    83b0:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
      }
      break;
  }
}
    83b4:	0f 90       	pop	r0
    83b6:	0f 90       	pop	r0
    83b8:	cf 91       	pop	r28
    83ba:	df 91       	pop	r29
    83bc:	1f 91       	pop	r17
    83be:	0f 91       	pop	r16
    83c0:	ff 90       	pop	r15
    83c2:	ef 90       	pop	r14
    83c4:	df 90       	pop	r13
    83c6:	cf 90       	pop	r12
    83c8:	08 95       	ret

000083ca <_Z15menuProcExpoOneh>:

void menuProcExpoOne(uint8_t event)
{
    83ca:	8f 92       	push	r8
    83cc:	9f 92       	push	r9
    83ce:	af 92       	push	r10
    83d0:	bf 92       	push	r11
    83d2:	cf 92       	push	r12
    83d4:	df 92       	push	r13
    83d6:	ef 92       	push	r14
    83d8:	ff 92       	push	r15
    83da:	0f 93       	push	r16
    83dc:	1f 93       	push	r17
    83de:	df 93       	push	r29
    83e0:	cf 93       	push	r28
    83e2:	cd b7       	in	r28, 0x3d	; 61
    83e4:	de b7       	in	r29, 0x3e	; 62
    83e6:	29 97       	sbiw	r28, 0x09	; 9
    83e8:	0f b6       	in	r0, 0x3f	; 63
    83ea:	f8 94       	cli
    83ec:	de bf       	out	0x3e, r29	; 62
    83ee:	0f be       	out	0x3f, r0	; 63
    83f0:	cd bf       	out	0x3d, r28	; 61
    83f2:	18 2f       	mov	r17, r24
  ExpoData *ed = expoaddress(s_currIdx);
    83f4:	80 91 69 19 	lds	r24, 0x1969
    83f8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    83fc:	5c 01       	movw	r10, r24
  putsChnRaw(7*FW+FW/2,0,ed->chn+1,0);
    83fe:	dc 01       	movw	r26, r24
    8400:	4c 91       	ld	r20, X
    8402:	46 95       	lsr	r20
    8404:	46 95       	lsr	r20
    8406:	43 70       	andi	r20, 0x03	; 3
    8408:	4f 5f       	subi	r20, 0xFF	; 255
    840a:	8d e2       	ldi	r24, 0x2D	; 45
    840c:	60 e0       	ldi	r22, 0x00	; 0
    840e:	20 e0       	ldi	r18, 0x00	; 0
    8410:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>

  SIMPLE_SUBMENU("DR/EXPO", 6);
    8414:	80 e0       	ldi	r24, 0x00	; 0
    8416:	60 e0       	ldi	r22, 0x00	; 0
    8418:	4b e2       	ldi	r20, 0x2B	; 43
    841a:	55 e0       	ldi	r21, 0x05	; 5
    841c:	22 e0       	ldi	r18, 0x02	; 2
    841e:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    8422:	81 2f       	mov	r24, r17
    8424:	65 e0       	ldi	r22, 0x05	; 5
    8426:	0e 94 67 24 	call	0x48ce	; 0x48ce <_Z20check_submenu_simplehh>
    842a:	88 23       	and	r24, r24
    842c:	09 f4       	brne	.+2      	; 0x8430 <_Z15menuProcExpoOneh+0x66>
    842e:	ae c0       	rjmp	.+348    	; 0x858c <_Z15menuProcExpoOneh+0x1c2>

  int8_t  sub = m_posVert;
    8430:	80 90 4b 19 	lds	r8, 0x194B
    8434:	cc 24       	eor	r12, r12
    8436:	dd 24       	eor	r13, r13
    8438:	ee 24       	eor	r14, r14
    843a:	ff 24       	eor	r15, r15

  uint8_t  y = FH;
    843c:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i=0; i<7; i++) {
    lcd_putsnAtt(0, y, PSTR("Weight""Expo  ""Phase ""Swtch ""When  ""Curve ""      ")+6*i, 6, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
    843e:	99 24       	eor	r9, r9
    8440:	87 fc       	sbrc	r8, 7
    8442:	90 94       	com	r9
  int8_t  sub = m_posVert;

  uint8_t  y = FH;

  for (uint8_t i=0; i<7; i++) {
    lcd_putsnAtt(0, y, PSTR("Weight""Expo  ""Phase ""Swtch ""When  ""Curve ""      ")+6*i, 6, 0);
    8444:	a6 01       	movw	r20, r12
    8446:	40 50       	subi	r20, 0x00	; 0
    8448:	5b 4f       	sbci	r21, 0xFB	; 251
    844a:	80 e0       	ldi	r24, 0x00	; 0
    844c:	69 2f       	mov	r22, r25
    844e:	26 e0       	ldi	r18, 0x06	; 6
    8450:	00 e0       	ldi	r16, 0x00	; 0
    8452:	99 87       	std	Y+9, r25	; 0x09
    8454:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    editExpoVals(event, i, sub==i, y, s_currIdx);
    8458:	41 e0       	ldi	r20, 0x01	; 1
    845a:	99 85       	ldd	r25, Y+9	; 0x09
    845c:	8e 14       	cp	r8, r14
    845e:	9f 04       	cpc	r9, r15
    8460:	09 f0       	breq	.+2      	; 0x8464 <_Z15menuProcExpoOneh+0x9a>
    8462:	40 e0       	ldi	r20, 0x00	; 0
    8464:	81 2f       	mov	r24, r17
    8466:	6e 2d       	mov	r22, r14
    8468:	29 2f       	mov	r18, r25
    846a:	00 91 69 19 	lds	r16, 0x1969
    846e:	99 87       	std	Y+9, r25	; 0x09
    8470:	0e 94 bd 40 	call	0x817a	; 0x817a <_Z12editExpoValshhbhh>
    y+=FH;
    8474:	99 85       	ldd	r25, Y+9	; 0x09
    8476:	98 5f       	subi	r25, 0xF8	; 248
    8478:	08 94       	sec
    847a:	e1 1c       	adc	r14, r1
    847c:	f1 1c       	adc	r15, r1
    847e:	e6 e0       	ldi	r30, 0x06	; 6
    8480:	f0 e0       	ldi	r31, 0x00	; 0
    8482:	ce 0e       	add	r12, r30
    8484:	df 1e       	adc	r13, r31

  int8_t  sub = m_posVert;

  uint8_t  y = FH;

  for (uint8_t i=0; i<7; i++) {
    8486:	90 34       	cpi	r25, 0x40	; 64
    8488:	e9 f6       	brne	.-70     	; 0x8444 <_Z15menuProcExpoOneh+0x7a>
    lcd_putsnAtt(0, y, PSTR("Weight""Expo  ""Phase ""Swtch ""When  ""Curve ""      ")+6*i, 6, 0);
    editExpoVals(event, i, sub==i, y, s_currIdx);
    y+=FH;
  }

  DrawCurve(expoFn);
    848a:	8e e6       	ldi	r24, 0x6E	; 110
    848c:	92 e3       	ldi	r25, 0x32	; 50
    848e:	0e 94 d9 3c 	call	0x79b2	; 0x79b2 <_Z9DrawCurvePFiiE>

  int16_t x512  = calibratedStick[ed->chn];
    8492:	d5 01       	movw	r26, r10
    8494:	8c 91       	ld	r24, X
    8496:	86 95       	lsr	r24
    8498:	86 95       	lsr	r24
    849a:	83 70       	andi	r24, 0x03	; 3
    849c:	90 e0       	ldi	r25, 0x00	; 0
    849e:	88 0f       	add	r24, r24
    84a0:	99 1f       	adc	r25, r25
    84a2:	fc 01       	movw	r30, r24
    84a4:	e9 51       	subi	r30, 0x19	; 25
    84a6:	f7 4e       	sbci	r31, 0xE7	; 231
    84a8:	c0 80       	ld	r12, Z
    84aa:	d1 80       	ldd	r13, Z+1	; 0x01
  int16_t anas[NUM_STICKS] = {0};
    84ac:	7e 01       	movw	r14, r28
    84ae:	08 94       	sec
    84b0:	e1 1c       	adc	r14, r1
    84b2:	f1 1c       	adc	r15, r1
    84b4:	28 e0       	ldi	r18, 0x08	; 8
    84b6:	f7 01       	movw	r30, r14
    84b8:	11 92       	st	Z+, r1
    84ba:	2a 95       	dec	r18
    84bc:	e9 f7       	brne	.-6      	; 0x84b8 <_Z15menuProcExpoOneh+0xee>
  anas[ed->chn] = x512;
    84be:	8e 0d       	add	r24, r14
    84c0:	9f 1d       	adc	r25, r15
    84c2:	dc 01       	movw	r26, r24
    84c4:	cd 92       	st	X+, r12
    84c6:	dc 92       	st	X, r13
  applyExpos(anas);
    84c8:	c7 01       	movw	r24, r14
    84ca:	6f ef       	ldi	r22, 0xFF	; 255
    84cc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_Z10applyExposPih>
  int16_t y512  = anas[ed->chn];
    84d0:	d5 01       	movw	r26, r10
    84d2:	ec 91       	ld	r30, X
    84d4:	e6 95       	lsr	r30
    84d6:	e6 95       	lsr	r30
    84d8:	e3 70       	andi	r30, 0x03	; 3
    84da:	f0 e0       	ldi	r31, 0x00	; 0
    84dc:	ee 0f       	add	r30, r30
    84de:	ff 1f       	adc	r31, r31
    84e0:	ee 0d       	add	r30, r14
    84e2:	ff 1d       	adc	r31, r15
    84e4:	a0 80       	ld	r10, Z
    84e6:	b1 80       	ldd	r11, Z+1	; 0x01

  lcd_outdezAtt(20*FW, 6*FH, x512*25/256, 0);
    84e8:	09 e1       	ldi	r16, 0x19	; 25
    84ea:	10 e0       	ldi	r17, 0x00	; 0
    84ec:	c0 9e       	mul	r12, r16
    84ee:	c0 01       	movw	r24, r0
    84f0:	c1 9e       	mul	r12, r17
    84f2:	90 0d       	add	r25, r0
    84f4:	d0 9e       	mul	r13, r16
    84f6:	90 0d       	add	r25, r0
    84f8:	11 24       	eor	r1, r1
    84fa:	e1 2c       	mov	r14, r1
    84fc:	21 e0       	ldi	r18, 0x01	; 1
    84fe:	f2 2e       	mov	r15, r18
    8500:	b7 01       	movw	r22, r14
    8502:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    8506:	ab 01       	movw	r20, r22
    8508:	88 e7       	ldi	r24, 0x78	; 120
    850a:	60 e3       	ldi	r22, 0x30	; 48
    850c:	20 e0       	ldi	r18, 0x00	; 0
    850e:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  lcd_outdezAtt(14*FW, 1*FH, y512*25/256, 0);
    8512:	a0 9e       	mul	r10, r16
    8514:	c0 01       	movw	r24, r0
    8516:	a1 9e       	mul	r10, r17
    8518:	90 0d       	add	r25, r0
    851a:	b0 9e       	mul	r11, r16
    851c:	90 0d       	add	r25, r0
    851e:	11 24       	eor	r1, r1
    8520:	b7 01       	movw	r22, r14
    8522:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    8526:	ab 01       	movw	r20, r22
    8528:	84 e5       	ldi	r24, 0x54	; 84
    852a:	68 e0       	ldi	r22, 0x08	; 8
    852c:	20 e0       	ldi	r18, 0x00	; 0
    852e:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>

  x512 = X0+x512/(RESXu/WCHART);
    8532:	96 01       	movw	r18, r12
    8534:	15 e0       	ldi	r17, 0x05	; 5
    8536:	36 95       	lsr	r19
    8538:	27 95       	ror	r18
    853a:	1a 95       	dec	r17
    853c:	e1 f7       	brne	.-8      	; 0x8536 <_Z15menuProcExpoOneh+0x16c>
    853e:	22 5a       	subi	r18, 0xA2	; 162
    8540:	3f 4f       	sbci	r19, 0xFF	; 255
  y512 = (DISPLAY_H-1) - (uint16_t)((y512+RESX)/2) * (DISPLAY_H-1) / RESX;
    8542:	c5 01       	movw	r24, r10
    8544:	80 50       	subi	r24, 0x00	; 0
    8546:	9c 4f       	sbci	r25, 0xFC	; 252
    8548:	62 e0       	ldi	r22, 0x02	; 2
    854a:	70 e0       	ldi	r23, 0x00	; 0
    854c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    8550:	cb 01       	movw	r24, r22
    8552:	b6 e0       	ldi	r27, 0x06	; 6
    8554:	88 0f       	add	r24, r24
    8556:	99 1f       	adc	r25, r25
    8558:	ba 95       	dec	r27
    855a:	e1 f7       	brne	.-8      	; 0x8554 <_Z15menuProcExpoOneh+0x18a>
    855c:	86 1b       	sub	r24, r22
    855e:	97 0b       	sbc	r25, r23
    8560:	89 2f       	mov	r24, r25
    8562:	99 27       	eor	r25, r25
    8564:	86 95       	lsr	r24
    8566:	86 95       	lsr	r24
    8568:	0f e3       	ldi	r16, 0x3F	; 63
    856a:	10 e0       	ldi	r17, 0x00	; 0
    856c:	08 1b       	sub	r16, r24
    856e:	19 0b       	sbc	r17, r25

  lcd_vline(x512, y512-3,3*2+1);
    8570:	e2 2e       	mov	r14, r18
    8572:	60 2f       	mov	r22, r16
    8574:	63 50       	subi	r22, 0x03	; 3
    8576:	82 2f       	mov	r24, r18
    8578:	47 e0       	ldi	r20, 0x07	; 7
    857a:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
  lcd_hline(x512-3, y512,3*2+1);
    857e:	8e 2d       	mov	r24, r14
    8580:	83 50       	subi	r24, 0x03	; 3
    8582:	60 2f       	mov	r22, r16
    8584:	47 e0       	ldi	r20, 0x07	; 7
    8586:	20 e0       	ldi	r18, 0x00	; 0
    8588:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
}
    858c:	29 96       	adiw	r28, 0x09	; 9
    858e:	0f b6       	in	r0, 0x3f	; 63
    8590:	f8 94       	cli
    8592:	de bf       	out	0x3e, r29	; 62
    8594:	0f be       	out	0x3f, r0	; 63
    8596:	cd bf       	out	0x3d, r28	; 61
    8598:	cf 91       	pop	r28
    859a:	df 91       	pop	r29
    859c:	1f 91       	pop	r17
    859e:	0f 91       	pop	r16
    85a0:	ff 90       	pop	r15
    85a2:	ef 90       	pop	r14
    85a4:	df 90       	pop	r13
    85a6:	cf 90       	pop	r12
    85a8:	bf 90       	pop	r11
    85aa:	af 90       	pop	r10
    85ac:	9f 90       	pop	r9
    85ae:	8f 90       	pop	r8
    85b0:	08 95       	ret

000085b2 <_Z16displayMixerLinehhhhhh>:
static uint8_t s_maxLines = 8;
static uint8_t s_copySrcIdx;
static uint8_t s_copySrcCh;

inline void displayMixerLine(uint8_t row, uint8_t mix, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
    85b2:	8f 92       	push	r8
    85b4:	9f 92       	push	r9
    85b6:	bf 92       	push	r11
    85b8:	cf 92       	push	r12
    85ba:	df 92       	push	r13
    85bc:	ef 92       	push	r14
    85be:	ff 92       	push	r15
    85c0:	0f 93       	push	r16
    85c2:	1f 93       	push	r17
    85c4:	df 93       	push	r29
    85c6:	cf 93       	push	r28
    85c8:	0f 92       	push	r0
    85ca:	cd b7       	in	r28, 0x3d	; 61
    85cc:	de b7       	in	r29, 0x3e	; 62
    85ce:	f8 2e       	mov	r15, r24
    85d0:	c6 2e       	mov	r12, r22
    85d2:	b4 2e       	mov	r11, r20
    85d4:	d0 2e       	mov	r13, r16
  uint8_t y = (row-s_pgOfs)*FH;
    85d6:	80 91 15 19 	lds	r24, 0x1915
    85da:	1f 2d       	mov	r17, r15
    85dc:	18 1b       	sub	r17, r24
    85de:	11 0f       	add	r17, r17
    85e0:	11 0f       	add	r17, r17
    85e2:	11 0f       	add	r17, r17
  MixData *md = mixaddress(mix);
    85e4:	86 2f       	mov	r24, r22
    85e6:	29 83       	std	Y+1, r18	; 0x01
    85e8:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    85ec:	4c 01       	movw	r8, r24
  if (idx > 0)
    85ee:	29 81       	ldd	r18, Y+1	; 0x01
    85f0:	22 23       	and	r18, r18
    85f2:	79 f0       	breq	.+30     	; 0x8612 <_Z16displayMixerLinehhhhhh+0x60>
    lcd_putsnAtt(FW, y, PSTR("+=*=:=")+md->mltpx*2, 2, 0);
    85f4:	fc 01       	movw	r30, r24
    85f6:	47 81       	ldd	r20, Z+7	; 0x07
    85f8:	46 95       	lsr	r20
    85fa:	47 70       	andi	r20, 0x07	; 7
    85fc:	50 e0       	ldi	r21, 0x00	; 0
    85fe:	44 0f       	add	r20, r20
    8600:	55 1f       	adc	r21, r21
    8602:	48 5a       	subi	r20, 0xA8	; 168
    8604:	5b 4f       	sbci	r21, 0xFB	; 251
    8606:	86 e0       	ldi	r24, 0x06	; 6
    8608:	61 2f       	mov	r22, r17
    860a:	22 e0       	ldi	r18, 0x02	; 2
    860c:	00 e0       	ldi	r16, 0x00	; 0
    860e:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>

  putsChnRaw(4*FW+2, y, md->srcRaw, 0);
    8612:	8a e1       	ldi	r24, 0x1A	; 26
    8614:	61 2f       	mov	r22, r17
    8616:	f4 01       	movw	r30, r8
    8618:	41 81       	ldd	r20, Z+1	; 0x01
    861a:	20 e0       	ldi	r18, 0x00	; 0
    861c:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
    8620:	80 91 67 19 	lds	r24, 0x1967
    8624:	88 23       	and	r24, r24
    8626:	11 f4       	brne	.+4      	; 0x862c <_Z16displayMixerLinehhhhhh+0x7a>
    8628:	df 14       	cp	r13, r15
    862a:	11 f0       	breq	.+4      	; 0x8630 <_Z16displayMixerLinehhhhhh+0x7e>
    862c:	00 e0       	ldi	r16, 0x00	; 0
    862e:	01 c0       	rjmp	.+2      	; 0x8632 <_Z16displayMixerLinehhhhhh+0x80>
    8630:	02 e0       	ldi	r16, 0x02	; 2
  lcd_outdezAtt(11*FW+7, y, md->weight, attr);
    8632:	f4 01       	movw	r30, r8
    8634:	42 81       	ldd	r20, Z+2	; 0x02
    8636:	55 27       	eor	r21, r21
    8638:	47 fd       	sbrc	r20, 7
    863a:	50 95       	com	r21
    863c:	89 e4       	ldi	r24, 0x49	; 73
    863e:	61 2f       	mov	r22, r17
    8640:	20 2f       	mov	r18, r16
    8642:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  if (attr != 0)
    8646:	00 23       	and	r16, r16
    8648:	49 f0       	breq	.+18     	; 0x865c <_Z16displayMixerLinehhhhhh+0xaa>
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);
    864a:	8e 2d       	mov	r24, r14
    864c:	f4 01       	movw	r30, r8
    864e:	62 81       	ldd	r22, Z+2	; 0x02
    8650:	43 e8       	ldi	r20, 0x83	; 131
    8652:	2d e7       	ldi	r18, 0x7D	; 125
    8654:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8658:	f4 01       	movw	r30, r8
    865a:	82 83       	std	Z+2, r24	; 0x02

  if (md->curve) putsCurve(12*FW+7, y, md->curve);
    865c:	f4 01       	movw	r30, r8
    865e:	44 81       	ldd	r20, Z+4	; 0x04
    8660:	44 23       	and	r20, r20
    8662:	29 f0       	breq	.+10     	; 0x866e <_Z16displayMixerLinehhhhhh+0xbc>
    8664:	8f e4       	ldi	r24, 0x4F	; 79
    8666:	61 2f       	mov	r22, r17
    8668:	20 e0       	ldi	r18, 0x00	; 0
    866a:	0e 94 13 6c 	call	0xd826	; 0xd826 <_Z9putsCurvehhhh>
  if (md->swtch) putsSwitches(16*FW+6, y, md->swtch);
    866e:	f4 01       	movw	r30, r8
    8670:	43 81       	ldd	r20, Z+3	; 0x03
    8672:	44 23       	and	r20, r20
    8674:	29 f0       	breq	.+10     	; 0x8680 <_Z16displayMixerLinehhhhhh+0xce>
    8676:	86 e6       	ldi	r24, 0x66	; 102
    8678:	61 2f       	mov	r22, r17
    867a:	20 e0       	ldi	r18, 0x00	; 0
    867c:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>

  char cs = ' ';
  if (md->speedDown || md->speedUp)
    8680:	f4 01       	movw	r30, r8
    8682:	86 81       	ldd	r24, Z+6	; 0x06
    8684:	88 23       	and	r24, r24
    8686:	11 f4       	brne	.+4      	; 0x868c <_Z16displayMixerLinehhhhhh+0xda>
    CHECK_INCDEC_MODELVAR(event, md->weight, -125, 125);

  if (md->curve) putsCurve(12*FW+7, y, md->curve);
  if (md->swtch) putsSwitches(16*FW+6, y, md->swtch);

  char cs = ' ';
    8688:	40 e2       	ldi	r20, 0x20	; 32
    868a:	01 c0       	rjmp	.+2      	; 0x868e <_Z16displayMixerLinehhhhhh+0xdc>
  if (md->speedDown || md->speedUp)
    cs = 'S';
    868c:	43 e5       	ldi	r20, 0x53	; 83
  if ((md->delayUp || md->delayDown))
    868e:	f4 01       	movw	r30, r8
    8690:	85 81       	ldd	r24, Z+5	; 0x05
    8692:	88 23       	and	r24, r24
    8694:	29 f0       	breq	.+10     	; 0x86a0 <_Z16displayMixerLinehhhhhh+0xee>
    cs = (cs =='S' ? '*' : 'D');
    8696:	43 35       	cpi	r20, 0x53	; 83
    8698:	11 f4       	brne	.+4      	; 0x869e <_Z16displayMixerLinehhhhhh+0xec>
    869a:	4a e2       	ldi	r20, 0x2A	; 42
    869c:	01 c0       	rjmp	.+2      	; 0x86a0 <_Z16displayMixerLinehhhhhh+0xee>
    869e:	44 e4       	ldi	r20, 0x44	; 68
  lcd_putcAtt(20*FW+3, y, cs, 0);
    86a0:	8b e7       	ldi	r24, 0x7B	; 123
    86a2:	61 2f       	mov	r22, r17
    86a4:	20 e0       	ldi	r18, 0x00	; 0
    86a6:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>

  if (s_copyMode) {
    86aa:	40 91 67 19 	lds	r20, 0x1967
    86ae:	44 23       	and	r20, r20
    86b0:	91 f1       	breq	.+100    	; 0x8716 <_Z16displayMixerLinehhhhhh+0x164>
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && mix == (s_copySrcIdx + (s_copyTgtOfs<0))) {
    86b2:	41 30       	cpi	r20, 0x01	; 1
    86b4:	21 f0       	breq	.+8      	; 0x86be <_Z16displayMixerLinehhhhhh+0x10c>
    86b6:	80 91 68 19 	lds	r24, 0x1968
    86ba:	88 23       	and	r24, r24
    86bc:	19 f5       	brne	.+70     	; 0x8704 <_Z16displayMixerLinehhhhhh+0x152>
    86be:	80 91 6d 19 	lds	r24, 0x196D
    86c2:	8b 15       	cp	r24, r11
    86c4:	f9 f4       	brne	.+62     	; 0x8704 <_Z16displayMixerLinehhhhhh+0x152>
    86c6:	2c 2d       	mov	r18, r12
    86c8:	30 e0       	ldi	r19, 0x00	; 0
    86ca:	80 91 68 19 	lds	r24, 0x1968
    86ce:	99 27       	eor	r25, r25
    86d0:	87 fd       	sbrc	r24, 7
    86d2:	90 95       	com	r25
    86d4:	88 27       	eor	r24, r24
    86d6:	99 0f       	add	r25, r25
    86d8:	88 1f       	adc	r24, r24
    86da:	99 27       	eor	r25, r25
    86dc:	50 91 6c 19 	lds	r21, 0x196C
    86e0:	85 0f       	add	r24, r21
    86e2:	91 1d       	adc	r25, r1
    86e4:	28 17       	cp	r18, r24
    86e6:	39 07       	cpc	r19, r25
    86e8:	69 f4       	brne	.+26     	; 0x8704 <_Z16displayMixerLinehhhhhh+0x152>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(22, y-1, DISPLAY_W-1-21, 9, s_copyMode == COPY_MODE ? 0xff : 0x55);
    86ea:	61 2f       	mov	r22, r17
    86ec:	61 50       	subi	r22, 0x01	; 1
    86ee:	41 30       	cpi	r20, 0x01	; 1
    86f0:	11 f4       	brne	.+4      	; 0x86f6 <_Z16displayMixerLinehhhhhh+0x144>
    86f2:	0f ef       	ldi	r16, 0xFF	; 255
    86f4:	01 c0       	rjmp	.+2      	; 0x86f8 <_Z16displayMixerLinehhhhhh+0x146>
    86f6:	05 e5       	ldi	r16, 0x55	; 85
    86f8:	86 e1       	ldi	r24, 0x16	; 22
    86fa:	4a e6       	ldi	r20, 0x6A	; 106
    86fc:	29 e0       	ldi	r18, 0x09	; 9
    86fe:	ee 24       	eor	r14, r14
    8700:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
    }

    if (row == cur) {
    8704:	fd 14       	cp	r15, r13
    8706:	39 f4       	brne	.+14     	; 0x8716 <_Z16displayMixerLinehhhhhh+0x164>
      /* invert the raw when it's the current one */
      lcd_filled_rect(23, y, DISPLAY_W-1-23, 7);
    8708:	87 e1       	ldi	r24, 0x17	; 23
    870a:	61 2f       	mov	r22, r17
    870c:	48 e6       	ldi	r20, 0x68	; 104
    870e:	27 e0       	ldi	r18, 0x07	; 7
    8710:	00 e0       	ldi	r16, 0x00	; 0
    8712:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
    }
  }
}
    8716:	0f 90       	pop	r0
    8718:	cf 91       	pop	r28
    871a:	df 91       	pop	r29
    871c:	1f 91       	pop	r17
    871e:	0f 91       	pop	r16
    8720:	ff 90       	pop	r15
    8722:	ef 90       	pop	r14
    8724:	df 90       	pop	r13
    8726:	cf 90       	pop	r12
    8728:	bf 90       	pop	r11
    872a:	9f 90       	pop	r9
    872c:	8f 90       	pop	r8
    872e:	08 95       	ret

00008730 <_Z15displayExpoLinehhhhhh>:

inline void displayExpoLine(uint8_t row, uint8_t expo, uint8_t ch, uint8_t idx, uint8_t cur, uint8_t event)
{
    8730:	bf 92       	push	r11
    8732:	cf 92       	push	r12
    8734:	df 92       	push	r13
    8736:	ef 92       	push	r14
    8738:	ff 92       	push	r15
    873a:	0f 93       	push	r16
    873c:	1f 93       	push	r17
    873e:	cf 93       	push	r28
    8740:	df 93       	push	r29
    8742:	f8 2e       	mov	r15, r24
    8744:	c6 2e       	mov	r12, r22
    8746:	b4 2e       	mov	r11, r20
    8748:	d0 2e       	mov	r13, r16
  uint8_t y = (row-s_pgOfs)*FH;
    874a:	80 91 15 19 	lds	r24, 0x1915
    874e:	1f 2d       	mov	r17, r15
    8750:	18 1b       	sub	r17, r24
    8752:	11 0f       	add	r17, r17
    8754:	11 0f       	add	r17, r17
    8756:	11 0f       	add	r17, r17
  ExpoData *ed = expoaddress(expo);
    8758:	86 2f       	mov	r24, r22
    875a:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    875e:	ec 01       	movw	r28, r24

  uint8_t attr = ((s_copyMode || cur != row) ? 0 : INVERS);
    8760:	80 91 67 19 	lds	r24, 0x1967
    8764:	88 23       	and	r24, r24
    8766:	11 f4       	brne	.+4      	; 0x876c <_Z15displayExpoLinehhhhhh+0x3c>
    8768:	0f 15       	cp	r16, r15
    876a:	11 f0       	breq	.+4      	; 0x8770 <_Z15displayExpoLinehhhhhh+0x40>
    876c:	00 e0       	ldi	r16, 0x00	; 0
    876e:	01 c0       	rjmp	.+2      	; 0x8772 <_Z15displayExpoLinehhhhhh+0x42>
    8770:	02 e0       	ldi	r16, 0x02	; 2
  lcd_outdezAtt(6*FW-2, y, ed->weight, attr);
    8772:	4a 81       	ldd	r20, Y+2	; 0x02
    8774:	46 95       	lsr	r20
    8776:	82 e2       	ldi	r24, 0x22	; 34
    8778:	61 2f       	mov	r22, r17
    877a:	50 e0       	ldi	r21, 0x00	; 0
    877c:	20 2f       	mov	r18, r16
    877e:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  if (attr != 0)
    8782:	00 23       	and	r16, r16
    8784:	61 f0       	breq	.+24     	; 0x879e <_Z15displayExpoLinehhhhhh+0x6e>
    CHECK_INCDEC_MODELVAR(event, ed->weight, 0, 100);
    8786:	6a 81       	ldd	r22, Y+2	; 0x02
    8788:	66 95       	lsr	r22
    878a:	8e 2d       	mov	r24, r14
    878c:	40 e0       	ldi	r20, 0x00	; 0
    878e:	24 e6       	ldi	r18, 0x64	; 100
    8790:	0e 94 66 22 	call	0x44cc	; 0x44cc <_Z16checkIncDecModelhaaa>
    8794:	88 0f       	add	r24, r24
    8796:	9a 81       	ldd	r25, Y+2	; 0x02
    8798:	91 70       	andi	r25, 0x01	; 1
    879a:	98 2b       	or	r25, r24
    879c:	9a 83       	std	Y+2, r25	; 0x02
  lcd_outdezAtt(9*FW+1, y, ed->expo, 0);
    879e:	4b 81       	ldd	r20, Y+3	; 0x03
    87a0:	55 27       	eor	r21, r21
    87a2:	47 fd       	sbrc	r20, 7
    87a4:	50 95       	com	r21
    87a6:	87 e3       	ldi	r24, 0x37	; 55
    87a8:	61 2f       	mov	r22, r17
    87aa:	20 e0       	ldi	r18, 0x00	; 0
    87ac:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  putsFlightPhase(10*FW, y, ed->negPhase ? -ed->phase : +ed->phase);
    87b0:	8a 81       	ldd	r24, Y+2	; 0x02
    87b2:	49 81       	ldd	r20, Y+1	; 0x01
    87b4:	80 ff       	sbrs	r24, 0
    87b6:	05 c0       	rjmp	.+10     	; 0x87c2 <_Z15displayExpoLinehhhhhh+0x92>
    87b8:	42 95       	swap	r20
    87ba:	46 95       	lsr	r20
    87bc:	47 70       	andi	r20, 0x07	; 7
    87be:	41 95       	neg	r20
    87c0:	03 c0       	rjmp	.+6      	; 0x87c8 <_Z15displayExpoLinehhhhhh+0x98>
    87c2:	42 95       	swap	r20
    87c4:	46 95       	lsr	r20
    87c6:	47 70       	andi	r20, 0x07	; 7
    87c8:	8c e3       	ldi	r24, 0x3C	; 60
    87ca:	61 2f       	mov	r22, r17
    87cc:	20 e0       	ldi	r18, 0x00	; 0
    87ce:	0e 94 ef 6b 	call	0xd7de	; 0xd7de <_Z15putsFlightPhasehhah>
  putsSwitches(13*FW+4, y, ed->swtch, 0); // normal switches
    87d2:	49 81       	ldd	r20, Y+1	; 0x01
    87d4:	44 0f       	add	r20, r20
    87d6:	44 0f       	add	r20, r20
    87d8:	44 0f       	add	r20, r20
    87da:	45 95       	asr	r20
    87dc:	45 95       	asr	r20
    87de:	45 95       	asr	r20
    87e0:	82 e5       	ldi	r24, 0x52	; 82
    87e2:	61 2f       	mov	r22, r17
    87e4:	20 e0       	ldi	r18, 0x00	; 0
    87e6:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
  if (ed->mode!=3) lcd_putc(17*FW, y, ed->mode == 2 ? 126 : 127);//'|' : (stkVal[i] ? '<' : '>'),0);*/
    87ea:	88 81       	ld	r24, Y
    87ec:	83 70       	andi	r24, 0x03	; 3
    87ee:	83 30       	cpi	r24, 0x03	; 3
    87f0:	49 f0       	breq	.+18     	; 0x8804 <_Z15displayExpoLinehhhhhh+0xd4>
    87f2:	82 30       	cpi	r24, 0x02	; 2
    87f4:	11 f4       	brne	.+4      	; 0x87fa <_Z15displayExpoLinehhhhhh+0xca>
    87f6:	4e e7       	ldi	r20, 0x7E	; 126
    87f8:	01 c0       	rjmp	.+2      	; 0x87fc <_Z15displayExpoLinehhhhhh+0xcc>
    87fa:	4f e7       	ldi	r20, 0x7F	; 127
    87fc:	86 e6       	ldi	r24, 0x66	; 102
    87fe:	61 2f       	mov	r22, r17
    8800:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
  if (ed->curve) putsCurve(18*FW+2, y, ed->curve+(ed->curve >= CURVE_BASE+4 ? 4 : 0));
    8804:	48 81       	ld	r20, Y
    8806:	84 2f       	mov	r24, r20
    8808:	80 7f       	andi	r24, 0xF0	; 240
    880a:	81 f0       	breq	.+32     	; 0x882c <_Z15displayExpoLinehhhhhh+0xfc>
    880c:	42 95       	swap	r20
    880e:	4f 70       	andi	r20, 0x0F	; 15
    8810:	84 2f       	mov	r24, r20
    8812:	90 e0       	ldi	r25, 0x00	; 0
    8814:	8b 30       	cpi	r24, 0x0B	; 11
    8816:	91 05       	cpc	r25, r1
    8818:	14 f0       	brlt	.+4      	; 0x881e <_Z15displayExpoLinehhhhhh+0xee>
    881a:	84 e0       	ldi	r24, 0x04	; 4
    881c:	01 c0       	rjmp	.+2      	; 0x8820 <_Z15displayExpoLinehhhhhh+0xf0>
    881e:	80 e0       	ldi	r24, 0x00	; 0
    8820:	48 0f       	add	r20, r24
    8822:	8e e6       	ldi	r24, 0x6E	; 110
    8824:	61 2f       	mov	r22, r17
    8826:	20 e0       	ldi	r18, 0x00	; 0
    8828:	0e 94 13 6c 	call	0xd826	; 0xd826 <_Z9putsCurvehhhh>

  if (s_copyMode) {
    882c:	40 91 67 19 	lds	r20, 0x1967
    8830:	44 23       	and	r20, r20
    8832:	91 f1       	breq	.+100    	; 0x8898 <_Z15displayExpoLinehhhhhh+0x168>
    if ((s_copyMode==COPY_MODE || s_copyTgtOfs == 0) && s_copySrcCh == ch && expo == (s_copySrcIdx + (s_copyTgtOfs<0))) {
    8834:	41 30       	cpi	r20, 0x01	; 1
    8836:	21 f0       	breq	.+8      	; 0x8840 <_Z15displayExpoLinehhhhhh+0x110>
    8838:	80 91 68 19 	lds	r24, 0x1968
    883c:	88 23       	and	r24, r24
    883e:	19 f5       	brne	.+70     	; 0x8886 <_Z15displayExpoLinehhhhhh+0x156>
    8840:	80 91 6d 19 	lds	r24, 0x196D
    8844:	8b 15       	cp	r24, r11
    8846:	f9 f4       	brne	.+62     	; 0x8886 <_Z15displayExpoLinehhhhhh+0x156>
    8848:	2c 2d       	mov	r18, r12
    884a:	30 e0       	ldi	r19, 0x00	; 0
    884c:	80 91 68 19 	lds	r24, 0x1968
    8850:	99 27       	eor	r25, r25
    8852:	87 fd       	sbrc	r24, 7
    8854:	90 95       	com	r25
    8856:	88 27       	eor	r24, r24
    8858:	99 0f       	add	r25, r25
    885a:	88 1f       	adc	r24, r24
    885c:	99 27       	eor	r25, r25
    885e:	50 91 6c 19 	lds	r21, 0x196C
    8862:	85 0f       	add	r24, r21
    8864:	91 1d       	adc	r25, r1
    8866:	28 17       	cp	r18, r24
    8868:	39 07       	cpc	r19, r25
    886a:	69 f4       	brne	.+26     	; 0x8886 <_Z15displayExpoLinehhhhhh+0x156>
      /* draw a border around the raw on selection mode (copy/move) */
      lcd_rect(18, y-1, DISPLAY_W-18, 9, s_copyMode == COPY_MODE ? 0xff : 0x55);
    886c:	61 2f       	mov	r22, r17
    886e:	61 50       	subi	r22, 0x01	; 1
    8870:	41 30       	cpi	r20, 0x01	; 1
    8872:	11 f4       	brne	.+4      	; 0x8878 <_Z15displayExpoLinehhhhhh+0x148>
    8874:	0f ef       	ldi	r16, 0xFF	; 255
    8876:	01 c0       	rjmp	.+2      	; 0x887a <_Z15displayExpoLinehhhhhh+0x14a>
    8878:	05 e5       	ldi	r16, 0x55	; 85
    887a:	82 e1       	ldi	r24, 0x12	; 18
    887c:	4e e6       	ldi	r20, 0x6E	; 110
    887e:	29 e0       	ldi	r18, 0x09	; 9
    8880:	ee 24       	eor	r14, r14
    8882:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
    }
    if (row == cur) {
    8886:	fd 14       	cp	r15, r13
    8888:	39 f4       	brne	.+14     	; 0x8898 <_Z15displayExpoLinehhhhhh+0x168>
      /* invert the raw when it's the current one */
      lcd_filled_rect(19, y, DISPLAY_W-20, 7);
    888a:	83 e1       	ldi	r24, 0x13	; 19
    888c:	61 2f       	mov	r22, r17
    888e:	4c e6       	ldi	r20, 0x6C	; 108
    8890:	27 e0       	ldi	r18, 0x07	; 7
    8892:	00 e0       	ldi	r16, 0x00	; 0
    8894:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
    }
  }
}
    8898:	df 91       	pop	r29
    889a:	cf 91       	pop	r28
    889c:	1f 91       	pop	r17
    889e:	0f 91       	pop	r16
    88a0:	ff 90       	pop	r15
    88a2:	ef 90       	pop	r14
    88a4:	df 90       	pop	r13
    88a6:	cf 90       	pop	r12
    88a8:	bf 90       	pop	r11
    88aa:	08 95       	ret

000088ac <_Z15menuProcExpoMixhh>:

void menuProcExpoMix(uint8_t expo, uint8_t _event_)
{
    88ac:	4f 92       	push	r4
    88ae:	5f 92       	push	r5
    88b0:	6f 92       	push	r6
    88b2:	7f 92       	push	r7
    88b4:	8f 92       	push	r8
    88b6:	9f 92       	push	r9
    88b8:	af 92       	push	r10
    88ba:	bf 92       	push	r11
    88bc:	cf 92       	push	r12
    88be:	df 92       	push	r13
    88c0:	ef 92       	push	r14
    88c2:	ff 92       	push	r15
    88c4:	0f 93       	push	r16
    88c6:	1f 93       	push	r17
    88c8:	cf 93       	push	r28
    88ca:	df 93       	push	r29
    88cc:	18 2f       	mov	r17, r24
    88ce:	46 2e       	mov	r4, r22
  uint8_t _event = (s_warning ? 0 : _event_);
    88d0:	80 91 50 19 	lds	r24, 0x1950
    88d4:	90 91 51 19 	lds	r25, 0x1951
    88d8:	00 97       	sbiw	r24, 0x00	; 0
    88da:	11 f0       	breq	.+4      	; 0x88e0 <_Z15menuProcExpoMixhh+0x34>
    88dc:	ff 24       	eor	r15, r15
    88de:	01 c0       	rjmp	.+2      	; 0x88e2 <_Z15menuProcExpoMixhh+0x36>
    88e0:	f6 2e       	mov	r15, r22
  uint8_t event = _event;
  uint8_t key = (event & 0x1f);
    88e2:	cf 2d       	mov	r28, r15
    88e4:	cf 71       	andi	r28, 0x1F	; 31

  if (s_copyMode) {
    88e6:	80 91 67 19 	lds	r24, 0x1967
    88ea:	88 23       	and	r24, r24
    88ec:	29 f0       	breq	.+10     	; 0x88f8 <_Z15menuProcExpoMixhh+0x4c>
    if (key == KEY_EXIT)
    88ee:	c1 30       	cpi	r28, 0x01	; 1
    88f0:	19 f4       	brne	.+6      	; 0x88f8 <_Z15menuProcExpoMixhh+0x4c>
      event -= KEY_EXIT;
    88f2:	df 2c       	mov	r13, r15
    88f4:	da 94       	dec	r13
    88f6:	01 c0       	rjmp	.+2      	; 0x88fa <_Z15menuProcExpoMixhh+0x4e>
  uint8_t _event = (s_warning ? 0 : _event_);
  uint8_t event = _event;
  uint8_t key = (event & 0x1f);

  if (s_copyMode) {
    if (key == KEY_EXIT)
    88f8:	df 2c       	mov	r13, r15
      event -= KEY_EXIT;
  }

  TITLEP(expo ? PSTR("DR/EXPO") : PSTR("MIXER"));
    88fa:	11 23       	and	r17, r17
    88fc:	19 f0       	breq	.+6      	; 0x8904 <_Z15menuProcExpoMixhh+0x58>
    88fe:	40 e5       	ldi	r20, 0x50	; 80
    8900:	54 e0       	ldi	r21, 0x04	; 4
    8902:	02 c0       	rjmp	.+4      	; 0x8908 <_Z15menuProcExpoMixhh+0x5c>
    8904:	4a e4       	ldi	r20, 0x4A	; 74
    8906:	54 e0       	ldi	r21, 0x04	; 4
    8908:	80 e0       	ldi	r24, 0x00	; 0
    890a:	60 e0       	ldi	r22, 0x00	; 0
    890c:	22 e0       	ldi	r18, 0x02	; 2
    890e:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  lcd_outdezAtt(lcd_lastPos+2*FW+FW/2, 0, getExpoMixCount(expo));
    8912:	00 91 02 1f 	lds	r16, 0x1F02
    8916:	01 5f       	subi	r16, 0xF1	; 241
    8918:	81 2f       	mov	r24, r17
    891a:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <_Z15getExpoMixCounth>
    891e:	48 2f       	mov	r20, r24
    8920:	80 2f       	mov	r24, r16
    8922:	60 e0       	ldi	r22, 0x00	; 0
    8924:	50 e0       	ldi	r21, 0x00	; 0
    8926:	20 e0       	ldi	r18, 0x00	; 0
    8928:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  lcd_puts_P(lcd_lastPos, 0, expo ? PSTR("/14") : PSTR("/32"));
    892c:	80 91 02 1f 	lds	r24, 0x1F02
    8930:	11 23       	and	r17, r17
    8932:	19 f0       	breq	.+6      	; 0x893a <_Z15menuProcExpoMixhh+0x8e>
    8934:	46 e4       	ldi	r20, 0x46	; 70
    8936:	54 e0       	ldi	r21, 0x04	; 4
    8938:	02 c0       	rjmp	.+4      	; 0x893e <_Z15menuProcExpoMixhh+0x92>
    893a:	42 e4       	ldi	r20, 0x42	; 66
    893c:	54 e0       	ldi	r21, 0x04	; 4
    893e:	60 e0       	ldi	r22, 0x00	; 0
    8940:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  SIMPLE_MENU_NOTITLE(menuTabModel, expo ? e_ExposAll : e_MixAll, s_maxLines);
    8944:	11 23       	and	r17, r17
    8946:	11 f0       	breq	.+4      	; 0x894c <_Z15menuProcExpoMixhh+0xa0>
    8948:	63 e0       	ldi	r22, 0x03	; 3
    894a:	01 c0       	rjmp	.+2      	; 0x894e <_Z15menuProcExpoMixhh+0xa2>
    894c:	64 e0       	ldi	r22, 0x04	; 4
    894e:	00 91 e2 06 	lds	r16, 0x06E2
    8952:	01 50       	subi	r16, 0x01	; 1
    8954:	8d 2d       	mov	r24, r13
    8956:	47 ea       	ldi	r20, 0xA7	; 167
    8958:	56 e0       	ldi	r21, 0x06	; 6
    895a:	2c e0       	ldi	r18, 0x0C	; 12
    895c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    8960:	88 23       	and	r24, r24
    8962:	09 f4       	brne	.+2      	; 0x8966 <_Z15menuProcExpoMixhh+0xba>
    8964:	b7 c2       	rjmp	.+1390   	; 0x8ed4 <_Z15menuProcExpoMixhh+0x628>

  uint8_t sub = m_posVert;
    8966:	d0 90 4b 19 	lds	r13, 0x194B

  switch(_event)
    896a:	8f 2d       	mov	r24, r15
    896c:	84 36       	cpi	r24, 0x64	; 100
    896e:	88 f4       	brcc	.+34     	; 0x8992 <_Z15menuProcExpoMixhh+0xe6>
    8970:	82 36       	cpi	r24, 0x62	; 98
    8972:	08 f0       	brcs	.+2      	; 0x8976 <_Z15menuProcExpoMixhh+0xca>
    8974:	fd c0       	rjmp	.+506    	; 0x8b70 <_Z15menuProcExpoMixhh+0x2c4>
    8976:	81 32       	cpi	r24, 0x21	; 33
    8978:	79 f1       	breq	.+94     	; 0x89d8 <_Z15menuProcExpoMixhh+0x12c>
    897a:	82 32       	cpi	r24, 0x22	; 34
    897c:	20 f4       	brcc	.+8      	; 0x8986 <_Z15menuProcExpoMixhh+0xda>
    897e:	80 32       	cpi	r24, 0x20	; 32
    8980:	09 f0       	breq	.+2      	; 0x8984 <_Z15menuProcExpoMixhh+0xd8>
    8982:	43 c1       	rjmp	.+646    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    8984:	58 c0       	rjmp	.+176    	; 0x8a36 <_Z15menuProcExpoMixhh+0x18a>
    8986:	8f 2d       	mov	r24, r15
    8988:	82 54       	subi	r24, 0x42	; 66
    898a:	82 30       	cpi	r24, 0x02	; 2
    898c:	08 f0       	brcs	.+2      	; 0x8990 <_Z15menuProcExpoMixhh+0xe4>
    898e:	3d c1       	rjmp	.+634    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    8990:	ef c0       	rjmp	.+478    	; 0x8b70 <_Z15menuProcExpoMixhh+0x2c4>
    8992:	9f 2d       	mov	r25, r15
    8994:	96 38       	cpi	r25, 0x86	; 134
    8996:	50 f4       	brcc	.+20     	; 0x89ac <_Z15menuProcExpoMixhh+0x100>
    8998:	94 38       	cpi	r25, 0x84	; 132
    899a:	08 f0       	brcs	.+2      	; 0x899e <_Z15menuProcExpoMixhh+0xf2>
    899c:	a7 c0       	rjmp	.+334    	; 0x8aec <_Z15menuProcExpoMixhh+0x240>
    899e:	90 38       	cpi	r25, 0x80	; 128
    89a0:	09 f4       	brne	.+2      	; 0x89a4 <_Z15menuProcExpoMixhh+0xf8>
    89a2:	77 c0       	rjmp	.+238    	; 0x8a92 <_Z15menuProcExpoMixhh+0x1e6>
    89a4:	91 38       	cpi	r25, 0x81	; 129
    89a6:	09 f0       	breq	.+2      	; 0x89aa <_Z15menuProcExpoMixhh+0xfe>
    89a8:	30 c1       	rjmp	.+608    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    89aa:	06 c0       	rjmp	.+12     	; 0x89b8 <_Z15menuProcExpoMixhh+0x10c>
    89ac:	8f 2d       	mov	r24, r15
    89ae:	8e 5b       	subi	r24, 0xBE	; 190
    89b0:	82 30       	cpi	r24, 0x02	; 2
    89b2:	08 f0       	brcs	.+2      	; 0x89b6 <_Z15menuProcExpoMixhh+0x10a>
    89b4:	2a c1       	rjmp	.+596    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    89b6:	3a c0       	rjmp	.+116    	; 0x8a2c <_Z15menuProcExpoMixhh+0x180>
    case EVT_ENTRY_UP:
      s_copyMode = 0;
      s_copyTgtOfs = 0;
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      if (s_copyMode && s_copyTgtOfs == 0) {
    89b8:	80 91 67 19 	lds	r24, 0x1967
    89bc:	88 23       	and	r24, r24
    89be:	49 f0       	breq	.+18     	; 0x89d2 <_Z15menuProcExpoMixhh+0x126>
    89c0:	80 91 68 19 	lds	r24, 0x1968
    89c4:	88 23       	and	r24, r24
    89c6:	29 f4       	brne	.+10     	; 0x89d2 <_Z15menuProcExpoMixhh+0x126>
        deleteExpoMix(expo, s_currIdx);
    89c8:	81 2f       	mov	r24, r17
    89ca:	60 91 69 19 	lds	r22, 0x1969
    89ce:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <_Z13deleteExpoMixhh>
      }
      killEvents(_event);
    89d2:	81 e8       	ldi	r24, 0x81	; 129
    89d4:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      // no break
    case EVT_KEY_BREAK(KEY_EXIT):
      if (s_copyTgtOfs) {
    89d8:	80 91 68 19 	lds	r24, 0x1968
    89dc:	88 23       	and	r24, r24
    89de:	31 f1       	breq	.+76     	; 0x8a2c <_Z15menuProcExpoMixhh+0x180>
        // cancel the current copy / move operation
        if (s_copyMode == COPY_MODE) {
    89e0:	80 91 67 19 	lds	r24, 0x1967
    89e4:	81 30       	cpi	r24, 0x01	; 1
    89e6:	31 f4       	brne	.+12     	; 0x89f4 <_Z15menuProcExpoMixhh+0x148>
          deleteExpoMix(expo, s_currIdx);
    89e8:	81 2f       	mov	r24, r17
    89ea:	60 91 69 19 	lds	r22, 0x1969
    89ee:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <_Z13deleteExpoMixhh>
    89f2:	18 c0       	rjmp	.+48     	; 0x8a24 <_Z15menuProcExpoMixhh+0x178>
        }
        else {
          do {
            swapExpoMix(expo, s_currIdx, s_copyTgtOfs > 0);
    89f4:	41 e0       	ldi	r20, 0x01	; 1
    89f6:	80 91 68 19 	lds	r24, 0x1968
    89fa:	18 16       	cp	r1, r24
    89fc:	0c f0       	brlt	.+2      	; 0x8a00 <_Z15menuProcExpoMixhh+0x154>
    89fe:	40 e0       	ldi	r20, 0x00	; 0
    8a00:	81 2f       	mov	r24, r17
    8a02:	69 e6       	ldi	r22, 0x69	; 105
    8a04:	79 e1       	ldi	r23, 0x19	; 25
    8a06:	0e 94 a8 40 	call	0x8150	; 0x8150 <_Z11swapExpoMixhRhh>
            if (s_copyTgtOfs < 0)
    8a0a:	80 91 68 19 	lds	r24, 0x1968
    8a0e:	87 ff       	sbrs	r24, 7
    8a10:	02 c0       	rjmp	.+4      	; 0x8a16 <_Z15menuProcExpoMixhh+0x16a>
              s_copyTgtOfs++;
    8a12:	8f 5f       	subi	r24, 0xFF	; 255
    8a14:	01 c0       	rjmp	.+2      	; 0x8a18 <_Z15menuProcExpoMixhh+0x16c>
            else
              s_copyTgtOfs--;
    8a16:	81 50       	subi	r24, 0x01	; 1
    8a18:	80 93 68 19 	sts	0x1968, r24
        // cancel the current copy / move operation
        if (s_copyMode == COPY_MODE) {
          deleteExpoMix(expo, s_currIdx);
        }
        else {
          do {
    8a1c:	80 91 68 19 	lds	r24, 0x1968
    8a20:	88 23       	and	r24, r24
    8a22:	41 f7       	brne	.-48     	; 0x89f4 <_Z15menuProcExpoMixhh+0x148>
              s_copyTgtOfs++;
            else
              s_copyTgtOfs--;
          } while (s_copyTgtOfs != 0);
        }
        sub = m_posVert = s_copySrcRow;
    8a24:	d0 90 6a 19 	lds	r13, 0x196A
    8a28:	d0 92 4b 19 	sts	0x194B, r13
      }
      s_copyMode = 0;
    8a2c:	10 92 67 19 	sts	0x1967, r1
      s_copyTgtOfs = 0;
    8a30:	10 92 68 19 	sts	0x1968, r1
      break;
    8a34:	ea c0       	rjmp	.+468    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    case EVT_KEY_BREAK(KEY_MENU):
      if (!s_currCh || (s_copyMode && !s_copyTgtOfs)) {
    8a36:	80 91 6b 19 	lds	r24, 0x196B
    8a3a:	88 23       	and	r24, r24
    8a3c:	41 f0       	breq	.+16     	; 0x8a4e <_Z15menuProcExpoMixhh+0x1a2>
    8a3e:	80 91 67 19 	lds	r24, 0x1967
    8a42:	88 23       	and	r24, r24
    8a44:	31 f1       	breq	.+76     	; 0x8a92 <_Z15menuProcExpoMixhh+0x1e6>
    8a46:	80 91 68 19 	lds	r24, 0x1968
    8a4a:	88 23       	and	r24, r24
    8a4c:	11 f5       	brne	.+68     	; 0x8a92 <_Z15menuProcExpoMixhh+0x1e6>
        s_copyMode = (s_copyMode == COPY_MODE ? MOVE_MODE : COPY_MODE);
    8a4e:	80 91 67 19 	lds	r24, 0x1967
    8a52:	81 30       	cpi	r24, 0x01	; 1
    8a54:	11 f4       	brne	.+4      	; 0x8a5a <_Z15menuProcExpoMixhh+0x1ae>
    8a56:	82 e0       	ldi	r24, 0x02	; 2
    8a58:	01 c0       	rjmp	.+2      	; 0x8a5c <_Z15menuProcExpoMixhh+0x1b0>
    8a5a:	81 e0       	ldi	r24, 0x01	; 1
    8a5c:	80 93 67 19 	sts	0x1967, r24
        s_copySrcIdx = s_currIdx;
    8a60:	80 91 69 19 	lds	r24, 0x1969
    8a64:	80 93 6c 19 	sts	0x196C, r24
        s_copySrcCh = expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh;
    8a68:	11 23       	and	r17, r17
    8a6a:	49 f0       	breq	.+18     	; 0x8a7e <_Z15menuProcExpoMixhh+0x1d2>
    8a6c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    8a70:	fc 01       	movw	r30, r24
    8a72:	80 81       	ld	r24, Z
    8a74:	86 95       	lsr	r24
    8a76:	86 95       	lsr	r24
    8a78:	83 70       	andi	r24, 0x03	; 3
    8a7a:	8f 5f       	subi	r24, 0xFF	; 255
    8a7c:	05 c0       	rjmp	.+10     	; 0x8a88 <_Z15menuProcExpoMixhh+0x1dc>
    8a7e:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    8a82:	fc 01       	movw	r30, r24
    8a84:	80 81       	ld	r24, Z
    8a86:	8f 71       	andi	r24, 0x1F	; 31
    8a88:	80 93 6d 19 	sts	0x196D, r24
        s_copySrcRow = sub;
    8a8c:	d0 92 6a 19 	sts	0x196A, r13
        break;
    8a90:	bc c0       	rjmp	.+376    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
      }
      // no break
    case EVT_KEY_LONG(KEY_MENU):
      if (s_copyTgtOfs) {
    8a92:	80 91 68 19 	lds	r24, 0x1968
    8a96:	88 23       	and	r24, r24
    8a98:	41 f0       	breq	.+16     	; 0x8aaa <_Z15menuProcExpoMixhh+0x1fe>
        s_copyMode = 0;
    8a9a:	10 92 67 19 	sts	0x1967, r1
        s_copyTgtOfs = 0;
    8a9e:	10 92 68 19 	sts	0x1968, r1
        }
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
        s_copyMode = 0;
        return;
      }
      killEvents(_event);
    8aa2:	8f 2d       	mov	r24, r15
    8aa4:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      break;
    8aa8:	b0 c0       	rjmp	.+352    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
      if (s_copyTgtOfs) {
        s_copyMode = 0;
        s_copyTgtOfs = 0;
      }
      else {
        if (s_copyMode) s_currCh = 0;
    8aaa:	80 91 67 19 	lds	r24, 0x1967
    8aae:	88 23       	and	r24, r24
    8ab0:	11 f0       	breq	.+4      	; 0x8ab6 <_Z15menuProcExpoMixhh+0x20a>
    8ab2:	10 92 6b 19 	sts	0x196B, r1
        if (s_currCh) {
    8ab6:	80 91 6b 19 	lds	r24, 0x196B
    8aba:	88 23       	and	r24, r24
    8abc:	59 f0       	breq	.+22     	; 0x8ad4 <_Z15menuProcExpoMixhh+0x228>
          if (reachExpoMixCountLimit(expo)) break;
    8abe:	81 2f       	mov	r24, r17
    8ac0:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <_Z22reachExpoMixCountLimith>
    8ac4:	88 23       	and	r24, r24
    8ac6:	09 f0       	breq	.+2      	; 0x8aca <_Z15menuProcExpoMixhh+0x21e>
    8ac8:	a0 c0       	rjmp	.+320    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
          insertExpoMix(expo, s_currIdx);
    8aca:	81 2f       	mov	r24, r17
    8acc:	60 91 69 19 	lds	r22, 0x1969
    8ad0:	0e 94 40 3f 	call	0x7e80	; 0x7e80 <_Z13insertExpoMixhh>
        }
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
    8ad4:	11 23       	and	r17, r17
    8ad6:	19 f0       	breq	.+6      	; 0x8ade <_Z15menuProcExpoMixhh+0x232>
    8ad8:	85 ee       	ldi	r24, 0xE5	; 229
    8ada:	91 e4       	ldi	r25, 0x41	; 65
    8adc:	02 c0       	rjmp	.+4      	; 0x8ae2 <_Z15menuProcExpoMixhh+0x236>
    8ade:	81 e5       	ldi	r24, 0x51	; 81
    8ae0:	90 e3       	ldi	r25, 0x30	; 48
    8ae2:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
        s_copyMode = 0;
    8ae6:	10 92 67 19 	sts	0x1967, r1
        return;
    8aea:	f4 c1       	rjmp	.+1000   	; 0x8ed4 <_Z15menuProcExpoMixhh+0x628>
      }
      killEvents(_event);
      break;
    case EVT_KEY_LONG(KEY_LEFT):
    case EVT_KEY_LONG(KEY_RIGHT):
      if (s_copyMode && !s_copyTgtOfs) {
    8aec:	80 91 67 19 	lds	r24, 0x1967
    8af0:	88 23       	and	r24, r24
    8af2:	09 f4       	brne	.+2      	; 0x8af6 <_Z15menuProcExpoMixhh+0x24a>
    8af4:	8a c0       	rjmp	.+276    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    8af6:	80 91 68 19 	lds	r24, 0x1968
    8afa:	88 23       	and	r24, r24
    8afc:	09 f0       	breq	.+2      	; 0x8b00 <_Z15menuProcExpoMixhh+0x254>
    8afe:	85 c0       	rjmp	.+266    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
        if (reachExpoMixCountLimit(expo)) break;
    8b00:	81 2f       	mov	r24, r17
    8b02:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <_Z22reachExpoMixCountLimith>
    8b06:	88 23       	and	r24, r24
    8b08:	09 f0       	breq	.+2      	; 0x8b0c <_Z15menuProcExpoMixhh+0x260>
    8b0a:	7f c0       	rjmp	.+254    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh);
    8b0c:	11 23       	and	r17, r17
    8b0e:	59 f0       	breq	.+22     	; 0x8b26 <_Z15menuProcExpoMixhh+0x27a>
    8b10:	80 91 69 19 	lds	r24, 0x1969
    8b14:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    8b18:	fc 01       	movw	r30, r24
    8b1a:	80 81       	ld	r24, Z
    8b1c:	86 95       	lsr	r24
    8b1e:	86 95       	lsr	r24
    8b20:	83 70       	andi	r24, 0x03	; 3
    8b22:	8f 5f       	subi	r24, 0xFF	; 255
    8b24:	07 c0       	rjmp	.+14     	; 0x8b34 <_Z15menuProcExpoMixhh+0x288>
    8b26:	80 91 69 19 	lds	r24, 0x1969
    8b2a:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    8b2e:	fc 01       	movw	r30, r24
    8b30:	80 81       	ld	r24, Z
    8b32:	8f 71       	andi	r24, 0x1F	; 31
    8b34:	80 93 6b 19 	sts	0x196B, r24
        if (_event == EVT_KEY_LONG(KEY_RIGHT)) s_currIdx++;
    8b38:	ff 2d       	mov	r31, r15
    8b3a:	f4 38       	cpi	r31, 0x84	; 132
    8b3c:	29 f4       	brne	.+10     	; 0x8b48 <_Z15menuProcExpoMixhh+0x29c>
    8b3e:	80 91 69 19 	lds	r24, 0x1969
    8b42:	8f 5f       	subi	r24, 0xFF	; 255
    8b44:	80 93 69 19 	sts	0x1969, r24
        insertExpoMix(expo, s_currIdx);
    8b48:	81 2f       	mov	r24, r17
    8b4a:	60 91 69 19 	lds	r22, 0x1969
    8b4e:	0e 94 40 3f 	call	0x7e80	; 0x7e80 <_Z13insertExpoMixhh>
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
    8b52:	11 23       	and	r17, r17
    8b54:	19 f0       	breq	.+6      	; 0x8b5c <_Z15menuProcExpoMixhh+0x2b0>
    8b56:	85 ee       	ldi	r24, 0xE5	; 229
    8b58:	91 e4       	ldi	r25, 0x41	; 65
    8b5a:	02 c0       	rjmp	.+4      	; 0x8b60 <_Z15menuProcExpoMixhh+0x2b4>
    8b5c:	81 e5       	ldi	r24, 0x51	; 81
    8b5e:	90 e3       	ldi	r25, 0x30	; 48
    8b60:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
        s_copyMode = 0;
    8b64:	10 92 67 19 	sts	0x1967, r1
        killEvents(_event);
    8b68:	8f 2d       	mov	r24, r15
    8b6a:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
        return;
    8b6e:	b2 c1       	rjmp	.+868    	; 0x8ed4 <_Z15menuProcExpoMixhh+0x628>
      break;
    case EVT_KEY_REPT(KEY_UP):
    case EVT_KEY_FIRST(KEY_UP):
    case EVT_KEY_REPT(KEY_DOWN):
    case EVT_KEY_FIRST(KEY_DOWN):
      if (s_copyMode) {
    8b70:	80 91 67 19 	lds	r24, 0x1967
    8b74:	88 23       	and	r24, r24
    8b76:	09 f4       	brne	.+2      	; 0x8b7a <_Z15menuProcExpoMixhh+0x2ce>
    8b78:	48 c0       	rjmp	.+144    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
    8b7a:	c0 90 68 19 	lds	r12, 0x1968
        uint8_t next_ofs = (key == KEY_UP ? s_copyTgtOfs - 1 : s_copyTgtOfs + 1);
    8b7e:	c3 30       	cpi	r28, 0x03	; 3
    8b80:	11 f4       	brne	.+4      	; 0x8b86 <_Z15menuProcExpoMixhh+0x2da>
    8b82:	ca 94       	dec	r12
    8b84:	01 c0       	rjmp	.+2      	; 0x8b88 <_Z15menuProcExpoMixhh+0x2dc>
    8b86:	c3 94       	inc	r12

        if (s_copyTgtOfs==0 && s_copyMode==COPY_MODE) {
    8b88:	90 91 68 19 	lds	r25, 0x1968
    8b8c:	99 23       	and	r25, r25
    8b8e:	f9 f4       	brne	.+62     	; 0x8bce <_Z15menuProcExpoMixhh+0x322>
    8b90:	81 30       	cpi	r24, 0x01	; 1
    8b92:	e9 f4       	brne	.+58     	; 0x8bce <_Z15menuProcExpoMixhh+0x322>
          // insert a mix on the same channel (just above / just below)
          if (reachExpoMixCountLimit(expo)) break;
    8b94:	81 2f       	mov	r24, r17
    8b96:	0e 94 d0 3e 	call	0x7da0	; 0x7da0 <_Z22reachExpoMixCountLimith>
    8b9a:	88 23       	and	r24, r24
    8b9c:	b1 f5       	brne	.+108    	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
          copyExpoMix(expo, s_currIdx);
    8b9e:	81 2f       	mov	r24, r17
    8ba0:	60 91 69 19 	lds	r22, 0x1969
    8ba4:	0e 94 9b 3f 	call	0x7f36	; 0x7f36 <_Z11copyExpoMixhh>
          if (key==KEY_DOWN) s_currIdx++;
    8ba8:	c2 30       	cpi	r28, 0x02	; 2
    8baa:	21 f4       	brne	.+8      	; 0x8bb4 <_Z15menuProcExpoMixhh+0x308>
    8bac:	80 91 69 19 	lds	r24, 0x1969
    8bb0:	8f 5f       	subi	r24, 0xFF	; 255
    8bb2:	1b c0       	rjmp	.+54     	; 0x8bea <_Z15menuProcExpoMixhh+0x33e>
          else if (sub-s_pgOfs >= 6) s_pgOfs++;
    8bb4:	20 91 15 19 	lds	r18, 0x1915
    8bb8:	8d 2d       	mov	r24, r13
    8bba:	90 e0       	ldi	r25, 0x00	; 0
    8bbc:	82 1b       	sub	r24, r18
    8bbe:	91 09       	sbc	r25, r1
    8bc0:	86 30       	cpi	r24, 0x06	; 6
    8bc2:	91 05       	cpc	r25, r1
    8bc4:	04 f1       	brlt	.+64     	; 0x8c06 <_Z15menuProcExpoMixhh+0x35a>
    8bc6:	2f 5f       	subi	r18, 0xFF	; 255
    8bc8:	20 93 15 19 	sts	0x1915, r18
    8bcc:	1c c0       	rjmp	.+56     	; 0x8c06 <_Z15menuProcExpoMixhh+0x35a>
        }
        else if (next_ofs==0 && s_copyMode==COPY_MODE) {
    8bce:	cc 20       	and	r12, r12
    8bd0:	79 f4       	brne	.+30     	; 0x8bf0 <_Z15menuProcExpoMixhh+0x344>
    8bd2:	81 30       	cpi	r24, 0x01	; 1
    8bd4:	69 f4       	brne	.+26     	; 0x8bf0 <_Z15menuProcExpoMixhh+0x344>
          // delete the mix
          deleteExpoMix(expo, s_currIdx);
    8bd6:	81 2f       	mov	r24, r17
    8bd8:	60 91 69 19 	lds	r22, 0x1969
    8bdc:	0e 94 f0 3e 	call	0x7de0	; 0x7de0 <_Z13deleteExpoMixhh>
          if (key==KEY_UP) s_currIdx--;
    8be0:	c3 30       	cpi	r28, 0x03	; 3
    8be2:	89 f4       	brne	.+34     	; 0x8c06 <_Z15menuProcExpoMixhh+0x35a>
    8be4:	80 91 69 19 	lds	r24, 0x1969
    8be8:	81 50       	subi	r24, 0x01	; 1
    8bea:	80 93 69 19 	sts	0x1969, r24
    8bee:	0b c0       	rjmp	.+22     	; 0x8c06 <_Z15menuProcExpoMixhh+0x35a>
        }
        else {
          // only swap the mix with its neighbor
          if (!swapExpoMix(expo, s_currIdx, key==KEY_UP)) break;
    8bf0:	41 e0       	ldi	r20, 0x01	; 1
    8bf2:	c3 30       	cpi	r28, 0x03	; 3
    8bf4:	09 f0       	breq	.+2      	; 0x8bf8 <_Z15menuProcExpoMixhh+0x34c>
    8bf6:	40 e0       	ldi	r20, 0x00	; 0
    8bf8:	81 2f       	mov	r24, r17
    8bfa:	69 e6       	ldi	r22, 0x69	; 105
    8bfc:	79 e1       	ldi	r23, 0x19	; 25
    8bfe:	0e 94 a8 40 	call	0x8150	; 0x8150 <_Z11swapExpoMixhRhh>
    8c02:	88 23       	and	r24, r24
    8c04:	11 f0       	breq	.+4      	; 0x8c0a <_Z15menuProcExpoMixhh+0x35e>
        }

        s_copyTgtOfs = next_ofs;
    8c06:	c0 92 68 19 	sts	0x1968, r12
      }
      break;
  }

  s_currCh = 0;
    8c0a:	10 92 6b 19 	sts	0x196B, r1
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    8c0e:	aa 24       	eor	r10, r10
    8c10:	a3 94       	inc	r10
      break;
  }

  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;
    8c12:	bb 24       	eor	r11, r11
      }
      break;
  }

  s_currCh = 0;
  uint8_t cur = 1;
    8c14:	cc 24       	eor	r12, r12
    8c16:	c3 94       	inc	r12
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    8c18:	34 c1       	rjmp	.+616    	; 0x8e82 <_Z15menuProcExpoMixhh+0x5d6>
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->destCh == ch)) {
    8c1a:	11 23       	and	r17, r17
    8c1c:	a1 f0       	breq	.+40     	; 0x8c46 <_Z15menuProcExpoMixhh+0x39a>
    8c1e:	8b 2d       	mov	r24, r11
    8c20:	8e 30       	cpi	r24, 0x0E	; 14
    8c22:	00 f5       	brcc	.+64     	; 0x8c64 <_Z15menuProcExpoMixhh+0x3b8>
    8c24:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_Z11expoaddressh>
    8c28:	ec 01       	movw	r28, r24
    8c2a:	28 81       	ld	r18, Y
    8c2c:	82 2f       	mov	r24, r18
    8c2e:	86 95       	lsr	r24
    8c30:	86 95       	lsr	r24
    8c32:	83 70       	andi	r24, 0x03	; 3
    8c34:	90 e0       	ldi	r25, 0x00	; 0
    8c36:	01 96       	adiw	r24, 0x01	; 1
    8c38:	86 15       	cp	r24, r6
    8c3a:	97 05       	cpc	r25, r7
    8c3c:	99 f4       	brne	.+38     	; 0x8c64 <_Z15menuProcExpoMixhh+0x3b8>
    8c3e:	23 70       	andi	r18, 0x03	; 3
    8c40:	09 f0       	breq	.+2      	; 0x8c44 <_Z15menuProcExpoMixhh+0x398>
    8c42:	3d c1       	rjmp	.+634    	; 0x8ebe <_Z15menuProcExpoMixhh+0x612>
    8c44:	0f c0       	rjmp	.+30     	; 0x8c64 <_Z15menuProcExpoMixhh+0x3b8>
    8c46:	9b 2d       	mov	r25, r11
    8c48:	90 32       	cpi	r25, 0x20	; 32
    8c4a:	60 f4       	brcc	.+24     	; 0x8c64 <_Z15menuProcExpoMixhh+0x3b8>
    8c4c:	8b 2d       	mov	r24, r11
    8c4e:	0e 94 29 07 	call	0xe52	; 0xe52 <_Z10mixaddressh>
    8c52:	4c 01       	movw	r8, r24
    8c54:	fc 01       	movw	r30, r24
    8c56:	80 81       	ld	r24, Z
    8c58:	8f 71       	andi	r24, 0x1F	; 31
    8c5a:	90 e0       	ldi	r25, 0x00	; 0
    8c5c:	86 15       	cp	r24, r6
    8c5e:	97 05       	cpc	r25, r7
    8c60:	09 f4       	brne	.+2      	; 0x8c64 <_Z15menuProcExpoMixhh+0x3b8>
    8c62:	30 c1       	rjmp	.+608    	; 0x8ec4 <_Z15menuProcExpoMixhh+0x618>
        cur++;
      }
    }
    else {
      uint8_t attr = 0;
      if (sub == cur) {
    8c64:	dc 14       	cp	r13, r12
    8c66:	09 f0       	breq	.+2      	; 0x8c6a <_Z15menuProcExpoMixhh+0x3be>
    8c68:	d5 c0       	rjmp	.+426    	; 0x8e14 <_Z15menuProcExpoMixhh+0x568>
    8c6a:	cc c0       	rjmp	.+408    	; 0x8e04 <_Z15menuProcExpoMixhh+0x558>
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->destCh == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
    8c6c:	6c 2d       	mov	r22, r12
    8c6e:	70 e0       	ldi	r23, 0x00	; 0
    8c70:	68 1b       	sub	r22, r24
    8c72:	71 09       	sbc	r23, r1
    8c74:	68 30       	cpi	r22, 0x08	; 8
    8c76:	71 05       	cpc	r23, r1
    8c78:	84 f4       	brge	.+32     	; 0x8c9a <_Z15menuProcExpoMixhh+0x3ee>
    8c7a:	66 0f       	add	r22, r22
    8c7c:	66 0f       	add	r22, r22
    8c7e:	66 0f       	add	r22, r22
        if (expo)
    8c80:	11 23       	and	r17, r17
    8c82:	31 f0       	breq	.+12     	; 0x8c90 <_Z15menuProcExpoMixhh+0x3e4>
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
    8c84:	80 e0       	ldi	r24, 0x00	; 0
    8c86:	4a 2d       	mov	r20, r10
    8c88:	20 e0       	ldi	r18, 0x00	; 0
    8c8a:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
    8c8e:	05 c0       	rjmp	.+10     	; 0x8c9a <_Z15menuProcExpoMixhh+0x3ee>
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
    8c90:	80 e0       	ldi	r24, 0x00	; 0
    8c92:	4a 2d       	mov	r20, r10
    8c94:	20 e0       	ldi	r18, 0x00	; 0
    8c96:	0e 94 76 6b 	call	0xd6ec	; 0xd6ec <_Z7putsChnhhhh>
      if (s_copyMode && !s_copyTgtOfs) {
        if (reachExpoMixCountLimit(expo)) break;
        s_currCh = (expo ? expoaddress(s_currIdx)->chn+1 : mixaddress(s_currIdx)->destCh);
        if (_event == EVT_KEY_LONG(KEY_RIGHT)) s_currIdx++;
        insertExpoMix(expo, s_currIdx);
        pushMenu(expo ? menuProcExpoOne : menuProcMixOne);
    8c9a:	55 24       	eor	r5, r5
    8c9c:	01 c0       	rjmp	.+2      	; 0x8ca0 <_Z15menuProcExpoMixhh+0x3f4>
          if (expo)
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
    8c9e:	53 94       	inc	r5
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
        if (s_copyMode) {
    8ca0:	80 91 67 19 	lds	r24, 0x1967
    8ca4:	88 23       	and	r24, r24
    8ca6:	d9 f1       	breq	.+118    	; 0x8d1e <_Z15menuProcExpoMixhh+0x472>
          if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && s_copyTgtOfs != 0 && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
    8ca8:	82 30       	cpi	r24, 0x02	; 2
    8caa:	79 f5       	brne	.+94     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
    8cac:	80 91 15 19 	lds	r24, 0x1915
    8cb0:	8c 15       	cp	r24, r12
    8cb2:	58 f5       	brcc	.+86     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
    8cb4:	6c 2d       	mov	r22, r12
    8cb6:	70 e0       	ldi	r23, 0x00	; 0
    8cb8:	68 1b       	sub	r22, r24
    8cba:	71 09       	sbc	r23, r1
    8cbc:	68 30       	cpi	r22, 0x08	; 8
    8cbe:	71 05       	cpc	r23, r1
    8cc0:	24 f5       	brge	.+72     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
    8cc2:	80 91 6d 19 	lds	r24, 0x196D
    8cc6:	8a 15       	cp	r24, r10
    8cc8:	01 f5       	brne	.+64     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
    8cca:	80 91 68 19 	lds	r24, 0x1968
    8cce:	88 23       	and	r24, r24
    8cd0:	e1 f0       	breq	.+56     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
    8cd2:	2b 2d       	mov	r18, r11
    8cd4:	30 e0       	ldi	r19, 0x00	; 0
    8cd6:	99 27       	eor	r25, r25
    8cd8:	87 fd       	sbrc	r24, 7
    8cda:	90 95       	com	r25
    8cdc:	88 27       	eor	r24, r24
    8cde:	99 0f       	add	r25, r25
    8ce0:	88 1f       	adc	r24, r24
    8ce2:	99 27       	eor	r25, r25
    8ce4:	40 91 6c 19 	lds	r20, 0x196C
    8ce8:	84 0f       	add	r24, r20
    8cea:	91 1d       	adc	r25, r1
    8cec:	28 17       	cp	r18, r24
    8cee:	39 07       	cpc	r19, r25
    8cf0:	61 f4       	brne	.+24     	; 0x8d0a <_Z15menuProcExpoMixhh+0x45e>
            uint8_t y = (cur-s_pgOfs)*FH;
    8cf2:	66 0f       	add	r22, r22
    8cf4:	66 0f       	add	r22, r22
    8cf6:	66 0f       	add	r22, r22
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, 0x55);
    8cf8:	61 50       	subi	r22, 0x01	; 1
    8cfa:	86 e1       	ldi	r24, 0x16	; 22
    8cfc:	4a e6       	ldi	r20, 0x6A	; 106
    8cfe:	29 e0       	ldi	r18, 0x09	; 9
    8d00:	05 e5       	ldi	r16, 0x55	; 85
    8d02:	ee 24       	eor	r14, r14
    8d04:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
            cur++;
    8d08:	c3 94       	inc	r12
          }
          if (s_currIdx == i) {
    8d0a:	80 91 69 19 	lds	r24, 0x1969
    8d0e:	8b 15       	cp	r24, r11
    8d10:	59 f4       	brne	.+22     	; 0x8d28 <_Z15menuProcExpoMixhh+0x47c>
            sub = m_posVert = cur;
    8d12:	c0 92 4b 19 	sts	0x194B, r12
            s_currCh = ch;
    8d16:	a0 92 6b 19 	sts	0x196B, r10
            uint8_t y = (cur-s_pgOfs)*FH;
            lcd_rect(22, y-1, DISPLAY_W-1-21, 9, 0x55);
            cur++;
          }
          if (s_currIdx == i) {
            sub = m_posVert = cur;
    8d1a:	dc 2c       	mov	r13, r12
    8d1c:	05 c0       	rjmp	.+10     	; 0x8d28 <_Z15menuProcExpoMixhh+0x47c>
            s_currCh = ch;
          }
        }
        else if (sub == cur) {
    8d1e:	dc 14       	cp	r13, r12
    8d20:	19 f4       	brne	.+6      	; 0x8d28 <_Z15menuProcExpoMixhh+0x47c>
          s_currIdx = i;
    8d22:	b0 92 69 19 	sts	0x1969, r11
    8d26:	cd 2c       	mov	r12, r13
        }
        if (s_pgOfs < cur && cur-s_pgOfs < 8) {
    8d28:	20 91 15 19 	lds	r18, 0x1915
    8d2c:	2c 15       	cp	r18, r12
    8d2e:	d0 f4       	brcc	.+52     	; 0x8d64 <_Z15menuProcExpoMixhh+0x4b8>
    8d30:	8c 2d       	mov	r24, r12
    8d32:	90 e0       	ldi	r25, 0x00	; 0
    8d34:	82 1b       	sub	r24, r18
    8d36:	91 09       	sbc	r25, r1
    8d38:	88 30       	cpi	r24, 0x08	; 8
    8d3a:	91 05       	cpc	r25, r1
    8d3c:	9c f4       	brge	.+38     	; 0x8d64 <_Z15menuProcExpoMixhh+0x4b8>
          if (expo)
    8d3e:	11 23       	and	r17, r17
    8d40:	49 f0       	breq	.+18     	; 0x8d54 <_Z15menuProcExpoMixhh+0x4a8>
            displayExpoLine(cur, i, ch, mixCnt, sub, _event);
    8d42:	8c 2d       	mov	r24, r12
    8d44:	6b 2d       	mov	r22, r11
    8d46:	4a 2d       	mov	r20, r10
    8d48:	25 2d       	mov	r18, r5
    8d4a:	0d 2d       	mov	r16, r13
    8d4c:	ef 2c       	mov	r14, r15
    8d4e:	0e 94 98 43 	call	0x8730	; 0x8730 <_Z15displayExpoLinehhhhhh>
    8d52:	08 c0       	rjmp	.+16     	; 0x8d64 <_Z15menuProcExpoMixhh+0x4b8>
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
    8d54:	8c 2d       	mov	r24, r12
    8d56:	6b 2d       	mov	r22, r11
    8d58:	4a 2d       	mov	r20, r10
    8d5a:	25 2d       	mov	r18, r5
    8d5c:	0d 2d       	mov	r16, r13
    8d5e:	ef 2c       	mov	r14, r15
    8d60:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <_Z16displayMixerLinehhhhhh>
        }
        cur++; mixCnt++; i++; md++; ed++;
    8d64:	c3 94       	inc	r12
    8d66:	b3 94       	inc	r11
    8d68:	89 e0       	ldi	r24, 0x09	; 9
    8d6a:	90 e0       	ldi	r25, 0x00	; 0
    8d6c:	88 0e       	add	r8, r24
    8d6e:	99 1e       	adc	r9, r25
    8d70:	24 96       	adiw	r28, 0x04	; 4
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, 0);
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, 0); // show CHx
      }
      uint8_t mixCnt = 0;
      do {
    8d72:	11 23       	and	r17, r17
    8d74:	89 f0       	breq	.+34     	; 0x8d98 <_Z15menuProcExpoMixhh+0x4ec>
    8d76:	9b 2d       	mov	r25, r11
    8d78:	9e 30       	cpi	r25, 0x0E	; 14
    8d7a:	c8 f4       	brcc	.+50     	; 0x8dae <_Z15menuProcExpoMixhh+0x502>
    8d7c:	28 81       	ld	r18, Y
    8d7e:	82 2f       	mov	r24, r18
    8d80:	86 95       	lsr	r24
    8d82:	86 95       	lsr	r24
    8d84:	83 70       	andi	r24, 0x03	; 3
    8d86:	90 e0       	ldi	r25, 0x00	; 0
    8d88:	01 96       	adiw	r24, 0x01	; 1
    8d8a:	86 15       	cp	r24, r6
    8d8c:	97 05       	cpc	r25, r7
    8d8e:	79 f4       	brne	.+30     	; 0x8dae <_Z15menuProcExpoMixhh+0x502>
    8d90:	23 70       	andi	r18, 0x03	; 3
    8d92:	09 f0       	breq	.+2      	; 0x8d96 <_Z15menuProcExpoMixhh+0x4ea>
    8d94:	84 cf       	rjmp	.-248    	; 0x8c9e <_Z15menuProcExpoMixhh+0x3f2>
    8d96:	0b c0       	rjmp	.+22     	; 0x8dae <_Z15menuProcExpoMixhh+0x502>
    8d98:	eb 2d       	mov	r30, r11
    8d9a:	e0 32       	cpi	r30, 0x20	; 32
    8d9c:	40 f4       	brcc	.+16     	; 0x8dae <_Z15menuProcExpoMixhh+0x502>
    8d9e:	f4 01       	movw	r30, r8
    8da0:	80 81       	ld	r24, Z
    8da2:	8f 71       	andi	r24, 0x1F	; 31
    8da4:	90 e0       	ldi	r25, 0x00	; 0
    8da6:	86 15       	cp	r24, r6
    8da8:	97 05       	cpc	r25, r7
    8daa:	09 f4       	brne	.+2      	; 0x8dae <_Z15menuProcExpoMixhh+0x502>
    8dac:	78 cf       	rjmp	.-272    	; 0x8c9e <_Z15menuProcExpoMixhh+0x3f2>
          else
            displayMixerLine(cur, i, ch, mixCnt, sub, _event);
        }
        cur++; mixCnt++; i++; md++; ed++;
      } while (expo ? (i<MAX_EXPOS && ed->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && md->destCh == ch));
      if (s_copyMode == MOVE_MODE && s_pgOfs < cur && cur-s_pgOfs < 8 && s_copySrcCh == ch && i == (s_copySrcIdx + (s_copyTgtOfs<0))) {
    8dae:	80 91 67 19 	lds	r24, 0x1967
    8db2:	82 30       	cpi	r24, 0x02	; 2
    8db4:	09 f0       	breq	.+2      	; 0x8db8 <_Z15menuProcExpoMixhh+0x50c>
    8db6:	64 c0       	rjmp	.+200    	; 0x8e80 <_Z15menuProcExpoMixhh+0x5d4>
    8db8:	80 91 15 19 	lds	r24, 0x1915
    8dbc:	8c 15       	cp	r24, r12
    8dbe:	08 f0       	brcs	.+2      	; 0x8dc2 <_Z15menuProcExpoMixhh+0x516>
    8dc0:	5f c0       	rjmp	.+190    	; 0x8e80 <_Z15menuProcExpoMixhh+0x5d4>
    8dc2:	6c 2d       	mov	r22, r12
    8dc4:	70 e0       	ldi	r23, 0x00	; 0
    8dc6:	68 1b       	sub	r22, r24
    8dc8:	71 09       	sbc	r23, r1
    8dca:	68 30       	cpi	r22, 0x08	; 8
    8dcc:	71 05       	cpc	r23, r1
    8dce:	0c f0       	brlt	.+2      	; 0x8dd2 <_Z15menuProcExpoMixhh+0x526>
    8dd0:	57 c0       	rjmp	.+174    	; 0x8e80 <_Z15menuProcExpoMixhh+0x5d4>
    8dd2:	80 91 6d 19 	lds	r24, 0x196D
    8dd6:	8a 15       	cp	r24, r10
    8dd8:	09 f0       	breq	.+2      	; 0x8ddc <_Z15menuProcExpoMixhh+0x530>
    8dda:	52 c0       	rjmp	.+164    	; 0x8e80 <_Z15menuProcExpoMixhh+0x5d4>
    8ddc:	2b 2d       	mov	r18, r11
    8dde:	30 e0       	ldi	r19, 0x00	; 0
    8de0:	80 91 68 19 	lds	r24, 0x1968
    8de4:	99 27       	eor	r25, r25
    8de6:	87 fd       	sbrc	r24, 7
    8de8:	90 95       	com	r25
    8dea:	88 27       	eor	r24, r24
    8dec:	99 0f       	add	r25, r25
    8dee:	88 1f       	adc	r24, r24
    8df0:	99 27       	eor	r25, r25
    8df2:	40 91 6c 19 	lds	r20, 0x196C
    8df6:	84 0f       	add	r24, r20
    8df8:	91 1d       	adc	r25, r1
    8dfa:	28 17       	cp	r18, r24
    8dfc:	39 07       	cpc	r19, r25
    8dfe:	09 f0       	breq	.+2      	; 0x8e02 <_Z15menuProcExpoMixhh+0x556>
    8e00:	3f c0       	rjmp	.+126    	; 0x8e80 <_Z15menuProcExpoMixhh+0x5d4>
    8e02:	32 c0       	rjmp	.+100    	; 0x8e68 <_Z15menuProcExpoMixhh+0x5bc>
      }
    }
    else {
      uint8_t attr = 0;
      if (sub == cur) {
        s_currIdx = i;
    8e04:	b0 92 69 19 	sts	0x1969, r11
        s_currCh = ch;
    8e08:	a0 92 6b 19 	sts	0x196B, r10
        if (!s_copyMode) {
    8e0c:	80 91 67 19 	lds	r24, 0x1967
    8e10:	88 23       	and	r24, r24
    8e12:	11 f0       	breq	.+4      	; 0x8e18 <_Z15menuProcExpoMixhh+0x56c>
        lcd_rect(22, y-1, DISPLAY_W-1-21, 9, 0x55);
        cur++;
      }
    }
    else {
      uint8_t attr = 0;
    8e14:	20 e0       	ldi	r18, 0x00	; 0
    8e16:	01 c0       	rjmp	.+2      	; 0x8e1a <_Z15menuProcExpoMixhh+0x56e>
      if (sub == cur) {
        s_currIdx = i;
        s_currCh = ch;
        if (!s_copyMode) {
          attr = INVERS;
    8e18:	22 e0       	ldi	r18, 0x02	; 2
        }
      }
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
    8e1a:	80 91 15 19 	lds	r24, 0x1915
    8e1e:	8c 15       	cp	r24, r12
    8e20:	70 f5       	brcc	.+92     	; 0x8e7e <_Z15menuProcExpoMixhh+0x5d2>
    8e22:	cc 2d       	mov	r28, r12
    8e24:	d0 e0       	ldi	r29, 0x00	; 0
    8e26:	be 01       	movw	r22, r28
    8e28:	68 1b       	sub	r22, r24
    8e2a:	71 09       	sbc	r23, r1
    8e2c:	68 30       	cpi	r22, 0x08	; 8
    8e2e:	71 05       	cpc	r23, r1
    8e30:	34 f5       	brge	.+76     	; 0x8e7e <_Z15menuProcExpoMixhh+0x5d2>
    8e32:	66 0f       	add	r22, r22
    8e34:	66 0f       	add	r22, r22
    8e36:	66 0f       	add	r22, r22
        if (expo)
    8e38:	11 23       	and	r17, r17
    8e3a:	29 f0       	breq	.+10     	; 0x8e46 <_Z15menuProcExpoMixhh+0x59a>
          putsChnRaw(0, (cur-s_pgOfs)*FH, ch, attr);
    8e3c:	80 e0       	ldi	r24, 0x00	; 0
    8e3e:	4a 2d       	mov	r20, r10
    8e40:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
    8e44:	04 c0       	rjmp	.+8      	; 0x8e4e <_Z15menuProcExpoMixhh+0x5a2>
        else
          putsChn(0, (cur-s_pgOfs)*FH, ch, attr); // show CHx
    8e46:	80 e0       	ldi	r24, 0x00	; 0
    8e48:	4a 2d       	mov	r20, r10
    8e4a:	0e 94 76 6b 	call	0xd6ec	; 0xd6ec <_Z7putsChnhhhh>
        if (s_copyMode == MOVE_MODE && s_copySrcCh == ch) {
    8e4e:	80 91 67 19 	lds	r24, 0x1967
    8e52:	82 30       	cpi	r24, 0x02	; 2
    8e54:	a1 f4       	brne	.+40     	; 0x8e7e <_Z15menuProcExpoMixhh+0x5d2>
    8e56:	80 91 6d 19 	lds	r24, 0x196D
    8e5a:	8a 15       	cp	r24, r10
    8e5c:	81 f4       	brne	.+32     	; 0x8e7e <_Z15menuProcExpoMixhh+0x5d2>
          uint8_t y = (cur-s_pgOfs)*FH;
    8e5e:	80 91 15 19 	lds	r24, 0x1915
    8e62:	c8 1b       	sub	r28, r24
    8e64:	d1 09       	sbc	r29, r1
    8e66:	6c 2f       	mov	r22, r28
    8e68:	66 0f       	add	r22, r22
    8e6a:	66 0f       	add	r22, r22
    8e6c:	66 0f       	add	r22, r22
          lcd_rect(22, y-1, DISPLAY_W-1-21, 9, 0x55);
    8e6e:	61 50       	subi	r22, 0x01	; 1
    8e70:	86 e1       	ldi	r24, 0x16	; 22
    8e72:	4a e6       	ldi	r20, 0x6A	; 106
    8e74:	29 e0       	ldi	r18, 0x09	; 9
    8e76:	05 e5       	ldi	r16, 0x55	; 85
    8e78:	ee 24       	eor	r14, r14
    8e7a:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
        }
      }
      cur++;
    8e7e:	c3 94       	inc	r12

  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    8e80:	a3 94       	inc	r10
    8e82:	6a 2c       	mov	r6, r10
    8e84:	77 24       	eor	r7, r7
    8e86:	11 23       	and	r17, r17
    8e88:	19 f0       	breq	.+6      	; 0x8e90 <_Z15menuProcExpoMixhh+0x5e4>
    8e8a:	84 e0       	ldi	r24, 0x04	; 4
    8e8c:	90 e0       	ldi	r25, 0x00	; 0
    8e8e:	02 c0       	rjmp	.+4      	; 0x8e94 <_Z15menuProcExpoMixhh+0x5e8>
    8e90:	80 e1       	ldi	r24, 0x10	; 16
    8e92:	90 e0       	ldi	r25, 0x00	; 0
    8e94:	86 15       	cp	r24, r6
    8e96:	97 05       	cpc	r25, r7
    8e98:	0c f0       	brlt	.+2      	; 0x8e9c <_Z15menuProcExpoMixhh+0x5f0>
    8e9a:	bf ce       	rjmp	.-642    	; 0x8c1a <_Z15menuProcExpoMixhh+0x36e>
        }
      }
      cur++;
    }
  }
  s_maxLines = cur;
    8e9c:	c0 92 e2 06 	sts	0x06E2, r12
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
    8ea0:	2d 2d       	mov	r18, r13
    8ea2:	30 e0       	ldi	r19, 0x00	; 0
    8ea4:	8c 2d       	mov	r24, r12
    8ea6:	90 e0       	ldi	r25, 0x00	; 0
    8ea8:	01 97       	sbiw	r24, 0x01	; 1
    8eaa:	28 17       	cp	r18, r24
    8eac:	39 07       	cpc	r19, r25
    8eae:	1c f0       	brlt	.+6      	; 0x8eb6 <_Z15menuProcExpoMixhh+0x60a>
    8eb0:	ca 94       	dec	r12
    8eb2:	c0 92 4b 19 	sts	0x194B, r12
  displayWarning(_event_);
    8eb6:	84 2d       	mov	r24, r4
    8eb8:	0e 94 c8 33 	call	0x6790	; 0x6790 <_Z14displayWarningh>
    8ebc:	0b c0       	rjmp	.+22     	; 0x8ed4 <_Z15menuProcExpoMixhh+0x628>
  s_currCh = 0;
  uint8_t cur = 1;
  uint8_t i = 0;

  for (uint8_t ch=1; ch<=(expo ? NUM_STICKS : NUM_CHNOUT); ch++) {
    MixData *md=NULL; ExpoData *ed=NULL;
    8ebe:	88 24       	eor	r8, r8
    8ec0:	99 24       	eor	r9, r9
    8ec2:	02 c0       	rjmp	.+4      	; 0x8ec8 <_Z15menuProcExpoMixhh+0x61c>
    8ec4:	c0 e0       	ldi	r28, 0x00	; 0
    8ec6:	d0 e0       	ldi	r29, 0x00	; 0
    if (expo ? (i<MAX_EXPOS && (ed=expoaddress(i))->chn+1 == ch && ed->mode) : (i<MAX_MIXERS && (md=mixaddress(i))->destCh == ch)) {
      if (s_pgOfs < cur && cur-s_pgOfs < 8) {
    8ec8:	80 91 15 19 	lds	r24, 0x1915
    8ecc:	8c 15       	cp	r24, r12
    8ece:	08 f4       	brcc	.+2      	; 0x8ed2 <_Z15menuProcExpoMixhh+0x626>
    8ed0:	cd ce       	rjmp	.-614    	; 0x8c6c <_Z15menuProcExpoMixhh+0x3c0>
    8ed2:	e3 ce       	rjmp	.-570    	; 0x8c9a <_Z15menuProcExpoMixhh+0x3ee>
    }
  }
  s_maxLines = cur;
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
}
    8ed4:	df 91       	pop	r29
    8ed6:	cf 91       	pop	r28
    8ed8:	1f 91       	pop	r17
    8eda:	0f 91       	pop	r16
    8edc:	ff 90       	pop	r15
    8ede:	ef 90       	pop	r14
    8ee0:	df 90       	pop	r13
    8ee2:	cf 90       	pop	r12
    8ee4:	bf 90       	pop	r11
    8ee6:	af 90       	pop	r10
    8ee8:	9f 90       	pop	r9
    8eea:	8f 90       	pop	r8
    8eec:	7f 90       	pop	r7
    8eee:	6f 90       	pop	r6
    8ef0:	5f 90       	pop	r5
    8ef2:	4f 90       	pop	r4
    8ef4:	08 95       	ret

00008ef6 <_Z14menuProcMixAllh>:
{
  return menuProcExpoMix(1, event);
}

void menuProcMixAll(uint8_t event)
{
    8ef6:	68 2f       	mov	r22, r24
  return menuProcExpoMix(0, event);
    8ef8:	80 e0       	ldi	r24, 0x00	; 0
    8efa:	0e 94 56 44 	call	0x88ac	; 0x88ac <_Z15menuProcExpoMixhh>
}
    8efe:	08 95       	ret

00008f00 <_Z16menuProcExposAllh>:
  if (sub >= s_maxLines-1) m_posVert = s_maxLines-1;
  displayWarning(_event_);
}

void menuProcExposAll(uint8_t event)
{
    8f00:	68 2f       	mov	r22, r24
  return menuProcExpoMix(1, event);
    8f02:	81 e0       	ldi	r24, 0x01	; 1
    8f04:	0e 94 56 44 	call	0x88ac	; 0x88ac <_Z15menuProcExpoMixhh>
}
    8f08:	08 95       	ret

00008f0a <_Z17menuProcDiagCalibh>:
}

const pm_char menuWhenDone[] = " [MENU] WHEN DONE " ;

void menuProcDiagCalib(uint8_t event)
{
    8f0a:	4f 92       	push	r4
    8f0c:	5f 92       	push	r5
    8f0e:	6f 92       	push	r6
    8f10:	7f 92       	push	r7
    8f12:	8f 92       	push	r8
    8f14:	9f 92       	push	r9
    8f16:	af 92       	push	r10
    8f18:	bf 92       	push	r11
    8f1a:	cf 92       	push	r12
    8f1c:	df 92       	push	r13
    8f1e:	ef 92       	push	r14
    8f20:	ff 92       	push	r15
    8f22:	0f 93       	push	r16
    8f24:	1f 93       	push	r17
    8f26:	df 93       	push	r29
    8f28:	cf 93       	push	r28
    8f2a:	0f 92       	push	r0
    8f2c:	cd b7       	in	r28, 0x3d	; 61
    8f2e:	de b7       	in	r29, 0x3e	; 62
    8f30:	b8 2e       	mov	r11, r24
  SIMPLE_MENU("CALIBRATION", menuTabDiag, e_Calib, 1);
    8f32:	80 e0       	ldi	r24, 0x00	; 0
    8f34:	60 e0       	ldi	r22, 0x00	; 0
    8f36:	4d e4       	ldi	r20, 0x4D	; 77
    8f38:	57 e0       	ldi	r21, 0x07	; 7
    8f3a:	22 e0       	ldi	r18, 0x02	; 2
    8f3c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    8f40:	8b 2d       	mov	r24, r11
    8f42:	66 e0       	ldi	r22, 0x06	; 6
    8f44:	4c e3       	ldi	r20, 0x3C	; 60
    8f46:	57 e0       	ldi	r21, 0x07	; 7
    8f48:	27 e0       	ldi	r18, 0x07	; 7
    8f4a:	00 e0       	ldi	r16, 0x00	; 0
    8f4c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    8f50:	88 23       	and	r24, r24
    8f52:	09 f4       	brne	.+2      	; 0x8f56 <_Z17menuProcDiagCalibh+0x4c>
    8f54:	f9 c0       	rjmp	.+498    	; 0x9148 <_Z17menuProcDiagCalibh+0x23e>
    8f56:	6e e7       	ldi	r22, 0x7E	; 126
    8f58:	e6 2e       	mov	r14, r22
    8f5a:	69 e1       	ldi	r22, 0x19	; 25
    8f5c:	f6 2e       	mov	r15, r22
    8f5e:	50 e7       	ldi	r21, 0x70	; 112
    8f60:	c5 2e       	mov	r12, r21
    8f62:	59 e1       	ldi	r21, 0x19	; 25
    8f64:	d5 2e       	mov	r13, r21
    8f66:	86 01       	movw	r16, r12
    8f68:	47 01       	movw	r8, r14
    8f6a:	60 e0       	ldi	r22, 0x00	; 0
  static int16_t loVals[7];
  static int16_t hiVals[7];
  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    int16_t vt = anaIn(i);
    8f6c:	86 2f       	mov	r24, r22
    8f6e:	69 83       	std	Y+1, r22	; 0x01
    8f70:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    loVals[i] = min(vt, loVals[i]);
    8f74:	d4 01       	movw	r26, r8
    8f76:	4d 91       	ld	r20, X+
    8f78:	5c 91       	ld	r21, X
    8f7a:	11 97       	sbiw	r26, 0x01	; 1
    8f7c:	28 2f       	mov	r18, r24
    8f7e:	39 2f       	mov	r19, r25
    8f80:	69 81       	ldd	r22, Y+1	; 0x01
    8f82:	42 17       	cp	r20, r18
    8f84:	53 07       	cpc	r21, r19
    8f86:	0c f4       	brge	.+2      	; 0x8f8a <_Z17menuProcDiagCalibh+0x80>
    8f88:	9a 01       	movw	r18, r20
    8f8a:	f4 01       	movw	r30, r8
    8f8c:	21 93       	st	Z+, r18
    8f8e:	31 93       	st	Z+, r19
    8f90:	4f 01       	movw	r8, r30
    hiVals[i] = max(vt, hiVals[i]);
    8f92:	d8 01       	movw	r26, r16
    8f94:	4d 91       	ld	r20, X+
    8f96:	5c 91       	ld	r21, X
    8f98:	11 97       	sbiw	r26, 0x01	; 1
    8f9a:	28 2f       	mov	r18, r24
    8f9c:	39 2f       	mov	r19, r25
    8f9e:	24 17       	cp	r18, r20
    8fa0:	35 07       	cpc	r19, r21
    8fa2:	0c f4       	brge	.+2      	; 0x8fa6 <_Z17menuProcDiagCalibh+0x9c>
    8fa4:	9a 01       	movw	r18, r20
    8fa6:	f8 01       	movw	r30, r16
    8fa8:	21 93       	st	Z+, r18
    8faa:	31 93       	st	Z+, r19
    8fac:	8f 01       	movw	r16, r30
  static int16_t midVals[7];
  static int16_t loVals[7];
  static int16_t hiVals[7];
  static uint8_t idxState;

  for (uint8_t i=0; i<7; i++) { //get low and high vals for sticks and trims
    8fae:	6f 5f       	subi	r22, 0xFF	; 255
    8fb0:	67 30       	cpi	r22, 0x07	; 7
    8fb2:	e1 f6       	brne	.-72     	; 0x8f6c <_Z17menuProcDiagCalibh+0x62>
    loVals[i] = min(vt, loVals[i]);
    hiVals[i] = max(vt, hiVals[i]);
    //if(i>=4) midVals[i] = (loVals[i] + hiVals[i])/2;
  }

  s_noScroll = idxState; // make sure we don't scroll while calibrating
    8fb4:	80 91 6f 19 	lds	r24, 0x196F
    8fb8:	80 93 18 19 	sts	0x1918, r24

  switch(event)
    8fbc:	fb 2d       	mov	r31, r11
    8fbe:	f0 32       	cpi	r31, 0x20	; 32
    8fc0:	19 f0       	breq	.+6      	; 0x8fc8 <_Z17menuProcDiagCalibh+0xbe>
    8fc2:	ff 3b       	cpi	r31, 0xBF	; 191
    8fc4:	59 f4       	brne	.+22     	; 0x8fdc <_Z17menuProcDiagCalibh+0xd2>
    8fc6:	08 c0       	rjmp	.+16     	; 0x8fd8 <_Z17menuProcDiagCalibh+0xce>
    case EVT_ENTRY:
      idxState = 0;
      break;

    case EVT_KEY_BREAK(KEY_MENU):
      idxState++;
    8fc8:	8f 5f       	subi	r24, 0xFF	; 255
    8fca:	80 93 6f 19 	sts	0x196F, r24
      if (idxState==3) {
    8fce:	83 30       	cpi	r24, 0x03	; 3
    8fd0:	29 f4       	brne	.+10     	; 0x8fdc <_Z17menuProcDiagCalibh+0xd2>
        STORE_GENERALVARS;
    8fd2:	81 e0       	ldi	r24, 0x01	; 1
    8fd4:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
        idxState = 0;
    8fd8:	10 92 6f 19 	sts	0x196F, r1
      }
      break;
  }


  switch (idxState) {
    8fdc:	80 91 6f 19 	lds	r24, 0x196F
    8fe0:	81 30       	cpi	r24, 0x01	; 1
    8fe2:	79 f0       	breq	.+30     	; 0x9002 <_Z17menuProcDiagCalibh+0xf8>
    8fe4:	81 30       	cpi	r24, 0x01	; 1
    8fe6:	20 f0       	brcs	.+8      	; 0x8ff0 <_Z17menuProcDiagCalibh+0xe6>
    8fe8:	82 30       	cpi	r24, 0x02	; 2
    8fea:	09 f0       	breq	.+2      	; 0x8fee <_Z17menuProcDiagCalibh+0xe4>
    8fec:	ab c0       	rjmp	.+342    	; 0x9144 <_Z17menuProcDiagCalibh+0x23a>
    8fee:	3f c0       	rjmp	.+126    	; 0x906e <_Z17menuProcDiagCalibh+0x164>
    case 0:
      // START CALIBRATION
      // [MENU]
      lcd_putsnAtt(2*FW, 3*FH, PSTR(" [MENU] TO START  "), 18, 0);
    8ff0:	8c e0       	ldi	r24, 0x0C	; 12
    8ff2:	68 e1       	ldi	r22, 0x18	; 24
    8ff4:	4a e3       	ldi	r20, 0x3A	; 58
    8ff6:	57 e0       	ldi	r21, 0x07	; 7
    8ff8:	22 e1       	ldi	r18, 0x12	; 18
    8ffa:	00 e0       	ldi	r16, 0x00	; 0
    8ffc:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      break;
    9000:	a1 c0       	rjmp	.+322    	; 0x9144 <_Z17menuProcDiagCalibh+0x23a>

    case 1:
      // SET MIDPOINT
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR("   SET MIDPOINT   "), 18, s_noScroll ? INVERS : 0);
    9002:	80 91 18 19 	lds	r24, 0x1918
    9006:	88 23       	and	r24, r24
    9008:	11 f0       	breq	.+4      	; 0x900e <_Z17menuProcDiagCalibh+0x104>
    900a:	02 e0       	ldi	r16, 0x02	; 2
    900c:	01 c0       	rjmp	.+2      	; 0x9010 <_Z17menuProcDiagCalibh+0x106>
    900e:	00 e0       	ldi	r16, 0x00	; 0
    9010:	8c e0       	ldi	r24, 0x0C	; 12
    9012:	60 e1       	ldi	r22, 0x10	; 16
    9014:	47 e2       	ldi	r20, 0x27	; 39
    9016:	57 e0       	ldi	r21, 0x07	; 7
    9018:	22 e1       	ldi	r18, 0x12	; 18
    901a:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);
    901e:	8c e0       	ldi	r24, 0x0C	; 12
    9020:	68 e1       	ldi	r22, 0x18	; 24
    9022:	4a e4       	ldi	r20, 0x4A	; 74
    9024:	57 e0       	ldi	r21, 0x07	; 7
    9026:	22 e1       	ldi	r18, 0x12	; 18
    9028:	00 e0       	ldi	r16, 0x00	; 0
    902a:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    902e:	4c e8       	ldi	r20, 0x8C	; 140
    9030:	84 2e       	mov	r8, r20
    9032:	49 e1       	ldi	r20, 0x19	; 25
    9034:	94 2e       	mov	r9, r20

      for (uint8_t i=0; i<7; i++) {
    9036:	20 e0       	ldi	r18, 0x00	; 0
        loVals[i] = 15000;
    9038:	08 e9       	ldi	r16, 0x98	; 152
    903a:	1a e3       	ldi	r17, 0x3A	; 58
        hiVals[i] = -15000;
    903c:	38 e6       	ldi	r19, 0x68	; 104
    903e:	a3 2e       	mov	r10, r19
    9040:	35 ec       	ldi	r19, 0xC5	; 197
    9042:	b3 2e       	mov	r11, r19
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR("   SET MIDPOINT   "), 18, s_noScroll ? INVERS : 0);
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);

      for (uint8_t i=0; i<7; i++) {
        loVals[i] = 15000;
    9044:	d7 01       	movw	r26, r14
    9046:	0d 93       	st	X+, r16
    9048:	1d 93       	st	X+, r17
    904a:	7d 01       	movw	r14, r26
        hiVals[i] = -15000;
    904c:	f6 01       	movw	r30, r12
    904e:	a1 92       	st	Z+, r10
    9050:	b1 92       	st	Z+, r11
    9052:	6f 01       	movw	r12, r30
        midVals[i] = anaIn(i);
    9054:	82 2f       	mov	r24, r18
    9056:	29 83       	std	Y+1, r18	; 0x01
    9058:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    905c:	d4 01       	movw	r26, r8
    905e:	8d 93       	st	X+, r24
    9060:	9d 93       	st	X+, r25
    9062:	4d 01       	movw	r8, r26
      // SET MIDPOINT
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR("   SET MIDPOINT   "), 18, s_noScroll ? INVERS : 0);
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);

      for (uint8_t i=0; i<7; i++) {
    9064:	29 81       	ldd	r18, Y+1	; 0x01
    9066:	2f 5f       	subi	r18, 0xFF	; 255
    9068:	27 30       	cpi	r18, 0x07	; 7
    906a:	61 f7       	brne	.-40     	; 0x9044 <_Z17menuProcDiagCalibh+0x13a>
    906c:	6b c0       	rjmp	.+214    	; 0x9144 <_Z17menuProcDiagCalibh+0x23a>
      break;

    case 2:
      // MOVE STICKS/POTS
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR(" MOVE STICKS/POTS "), 18, s_noScroll ? INVERS : 0);
    906e:	80 91 18 19 	lds	r24, 0x1918
    9072:	88 23       	and	r24, r24
    9074:	11 f0       	breq	.+4      	; 0x907a <_Z17menuProcDiagCalibh+0x170>
    9076:	02 e0       	ldi	r16, 0x02	; 2
    9078:	01 c0       	rjmp	.+2      	; 0x907c <_Z17menuProcDiagCalibh+0x172>
    907a:	00 e0       	ldi	r16, 0x00	; 0
    907c:	8c e0       	ldi	r24, 0x0C	; 12
    907e:	60 e1       	ldi	r22, 0x10	; 16
    9080:	44 e1       	ldi	r20, 0x14	; 20
    9082:	57 e0       	ldi	r21, 0x07	; 7
    9084:	22 e1       	ldi	r18, 0x12	; 18
    9086:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);
    908a:	8c e0       	ldi	r24, 0x0C	; 12
    908c:	68 e1       	ldi	r22, 0x18	; 24
    908e:	4a e4       	ldi	r20, 0x4A	; 74
    9090:	57 e0       	ldi	r21, 0x07	; 7
    9092:	22 e1       	ldi	r18, 0x12	; 18
    9094:	00 e0       	ldi	r16, 0x00	; 0
    9096:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    909a:	2c e8       	ldi	r18, 0x8C	; 140
    909c:	a2 2e       	mov	r10, r18
    909e:	29 e1       	ldi	r18, 0x19	; 25
    90a0:	b2 2e       	mov	r11, r18
    90a2:	9f e3       	ldi	r25, 0x3F	; 63
    90a4:	49 2e       	mov	r4, r25
    90a6:	92 e1       	ldi	r25, 0x12	; 18
    90a8:	59 2e       	mov	r5, r25

}

const pm_char menuWhenDone[] = " [MENU] WHEN DONE " ;

void menuProcDiagCalib(uint8_t event)
    90aa:	f2 01       	movw	r30, r4

      for (uint8_t i=0; i<7; i++) {
        if (abs(loVals[i]-hiVals[i])>50) {
          g_eeGeneral.calibMid[i] = midVals[i];
          int16_t v = midVals[i] - loVals[i];
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
    90ac:	80 e4       	ldi	r24, 0x40	; 64
    90ae:	88 2e       	mov	r8, r24
    90b0:	91 2c       	mov	r9, r1
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR(" MOVE STICKS/POTS "), 18, s_noScroll ? INVERS : 0);
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);

      for (uint8_t i=0; i<7; i++) {
        if (abs(loVals[i]-hiVals[i])>50) {
    90b2:	d7 01       	movw	r26, r14
    90b4:	8d 91       	ld	r24, X+
    90b6:	9d 91       	ld	r25, X+
    90b8:	7d 01       	movw	r14, r26
    90ba:	d6 01       	movw	r26, r12
    90bc:	6d 90       	ld	r6, X+
    90be:	7d 90       	ld	r7, X+
    90c0:	6d 01       	movw	r12, r26
    90c2:	9c 01       	movw	r18, r24
    90c4:	26 19       	sub	r18, r6
    90c6:	37 09       	sbc	r19, r7
    90c8:	37 ff       	sbrs	r19, 7
    90ca:	03 c0       	rjmp	.+6      	; 0x90d2 <_Z17menuProcDiagCalibh+0x1c8>
    90cc:	30 95       	com	r19
    90ce:	21 95       	neg	r18
    90d0:	3f 4f       	sbci	r19, 0xFF	; 255
    90d2:	23 33       	cpi	r18, 0x33	; 51
    90d4:	31 05       	cpc	r19, r1
    90d6:	dc f0       	brlt	.+54     	; 0x910e <_Z17menuProcDiagCalibh+0x204>
          g_eeGeneral.calibMid[i] = midVals[i];
    90d8:	d5 01       	movw	r26, r10
    90da:	2d 91       	ld	r18, X+
    90dc:	3c 91       	ld	r19, X
    90de:	31 83       	std	Z+1, r19	; 0x01
    90e0:	20 83       	st	Z, r18
          int16_t v = midVals[i] - loVals[i];
    90e2:	89 01       	movw	r16, r18
    90e4:	08 1b       	sub	r16, r24
    90e6:	19 0b       	sbc	r17, r25
          g_eeGeneral.calibSpanNeg[i] = v - v/64;
    90e8:	c8 01       	movw	r24, r16
    90ea:	b4 01       	movw	r22, r8
    90ec:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    90f0:	06 1b       	sub	r16, r22
    90f2:	17 0b       	sbc	r17, r23
    90f4:	17 87       	std	Z+15, r17	; 0x0f
    90f6:	06 87       	std	Z+14, r16	; 0x0e
          v = hiVals[i] - midVals[i];
    90f8:	c3 01       	movw	r24, r6
    90fa:	82 1b       	sub	r24, r18
    90fc:	93 0b       	sbc	r25, r19
    90fe:	9c 01       	movw	r18, r24
          g_eeGeneral.calibSpanPos[i] = v - v/64;
    9100:	b4 01       	movw	r22, r8
    9102:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    9106:	26 1b       	sub	r18, r22
    9108:	37 0b       	sbc	r19, r23
    910a:	35 8f       	std	Z+29, r19	; 0x1d
    910c:	24 8f       	std	Z+28, r18	; 0x1c
    910e:	a2 e0       	ldi	r26, 0x02	; 2
    9110:	b0 e0       	ldi	r27, 0x00	; 0
    9112:	aa 0e       	add	r10, r26
    9114:	bb 1e       	adc	r11, r27
    9116:	32 96       	adiw	r30, 0x02	; 2
      // MOVE STICKS/POTS
      // [MENU]
      lcd_putsnAtt(2*FW, 2*FH, PSTR(" MOVE STICKS/POTS "), 18, s_noScroll ? INVERS : 0);
      lcd_putsnAtt(2*FW, 3*FH, menuWhenDone, 18, 0);

      for (uint8_t i=0; i<7; i++) {
    9118:	bc e8       	ldi	r27, 0x8C	; 140
    911a:	eb 16       	cp	r14, r27
    911c:	b9 e1       	ldi	r27, 0x19	; 25
    911e:	fb 06       	cpc	r15, r27
    9120:	41 f6       	brne	.-112    	; 0x90b2 <_Z17menuProcDiagCalibh+0x1a8>

}

const pm_char menuWhenDone[] = " [MENU] WHEN DONE " ;

void menuProcDiagCalib(uint8_t event)
    9122:	80 e0       	ldi	r24, 0x00	; 0
    9124:	90 e0       	ldi	r25, 0x00	; 0
        }
      }

      int16_t sum = 0;
      for (uint8_t i=0; i<12; i++)
        sum += g_eeGeneral.calibMid[i];
    9126:	f2 01       	movw	r30, r4
    9128:	21 91       	ld	r18, Z+
    912a:	31 91       	ld	r19, Z+
    912c:	2f 01       	movw	r4, r30
    912e:	82 0f       	add	r24, r18
    9130:	93 1f       	adc	r25, r19
          g_eeGeneral.calibSpanPos[i] = v - v/64;
        }
      }

      int16_t sum = 0;
      for (uint8_t i=0; i<12; i++)
    9132:	f7 e5       	ldi	r31, 0x57	; 87
    9134:	4f 16       	cp	r4, r31
    9136:	f2 e1       	ldi	r31, 0x12	; 18
    9138:	5f 06       	cpc	r5, r31
    913a:	a9 f7       	brne	.-22     	; 0x9126 <_Z17menuProcDiagCalibh+0x21c>
        sum += g_eeGeneral.calibMid[i];
      g_eeGeneral.chkSum = sum;
    913c:	90 93 6a 12 	sts	0x126A, r25
    9140:	80 93 69 12 	sts	0x1269, r24
      break;
  }

  doMainScreenGrphics();
    9144:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <_Z19doMainScreenGrphicsv>
}
    9148:	0f 90       	pop	r0
    914a:	cf 91       	pop	r28
    914c:	df 91       	pop	r29
    914e:	1f 91       	pop	r17
    9150:	0f 91       	pop	r16
    9152:	ff 90       	pop	r15
    9154:	ef 90       	pop	r14
    9156:	df 90       	pop	r13
    9158:	cf 90       	pop	r12
    915a:	bf 90       	pop	r11
    915c:	af 90       	pop	r10
    915e:	9f 90       	pop	r9
    9160:	8f 90       	pop	r8
    9162:	7f 90       	pop	r7
    9164:	6f 90       	pop	r6
    9166:	5f 90       	pop	r5
    9168:	4f 90       	pop	r4
    916a:	08 95       	ret

0000916c <_Z15menuProcDiagAnah>:
    lcd_putcAtt(20*FW,  y, tp+'0',tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
{
    916c:	2f 92       	push	r2
    916e:	3f 92       	push	r3
    9170:	4f 92       	push	r4
    9172:	5f 92       	push	r5
    9174:	6f 92       	push	r6
    9176:	7f 92       	push	r7
    9178:	8f 92       	push	r8
    917a:	9f 92       	push	r9
    917c:	af 92       	push	r10
    917e:	bf 92       	push	r11
    9180:	cf 92       	push	r12
    9182:	df 92       	push	r13
    9184:	ef 92       	push	r14
    9186:	ff 92       	push	r15
    9188:	0f 93       	push	r16
    918a:	1f 93       	push	r17
    918c:	cf 93       	push	r28
    918e:	df 93       	push	r29
    9190:	68 2e       	mov	r6, r24
  SIMPLE_MENU("ANA", menuTabDiag, e_Ana, 2);
    9192:	80 e0       	ldi	r24, 0x00	; 0
    9194:	60 e0       	ldi	r22, 0x00	; 0
    9196:	4a e6       	ldi	r20, 0x6A	; 106
    9198:	57 e0       	ldi	r21, 0x07	; 7
    919a:	22 e0       	ldi	r18, 0x02	; 2
    919c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    91a0:	86 2d       	mov	r24, r6
    91a2:	65 e0       	ldi	r22, 0x05	; 5
    91a4:	4c e3       	ldi	r20, 0x3C	; 60
    91a6:	57 e0       	ldi	r21, 0x07	; 7
    91a8:	27 e0       	ldi	r18, 0x07	; 7
    91aa:	01 e0       	ldi	r16, 0x01	; 1
    91ac:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    91b0:	88 23       	and	r24, r24
    91b2:	09 f4       	brne	.+2      	; 0x91b6 <_Z15menuProcDiagAnah+0x4a>
    91b4:	94 c0       	rjmp	.+296    	; 0x92de <_Z15menuProcDiagAnah+0x172>

  int8_t  sub    = m_posVert ;
    91b6:	70 90 4b 19 	lds	r7, 0x194B
    91ba:	c0 e0       	ldi	r28, 0x00	; 0
    91bc:	88 24       	eor	r8, r8
    91be:	99 24       	eor	r9, r9

  for(uint8_t i=0; i<8; i++)
    91c0:	d0 e0       	ldi	r29, 0x00	; 0
    lcd_putsn_P( 4*FW, y,PSTR("A1A2A3A4A5A6A7A8")+2*i,2);
    lcd_outhex4( 8*FW, y,anaIn(i));
    if(i<7)  lcd_outdez8(17*FW, y, (int32_t)calibratedStick[i]*100/1024);
    else {
#if defined (PCBV4)
      uint32_t batCalV = ((uint32_t)abRunningAvg*1390 + (10*(int32_t)abRunningAvg*g_eeGeneral.vBatCalib)/8) / BandGap;
    91c2:	78 e0       	ldi	r23, 0x08	; 8
    91c4:	27 2e       	mov	r2, r23
    91c6:	31 2c       	mov	r3, r1
    91c8:	41 2c       	mov	r4, r1
    91ca:	51 2c       	mov	r5, r1
  int8_t  sub    = m_posVert ;

  for(uint8_t i=0; i<8; i++)
  {
    uint8_t y=i*FH;
    lcd_putsn_P( 4*FW, y,PSTR("A1A2A3A4A5A6A7A8")+2*i,2);
    91cc:	a4 01       	movw	r20, r8
    91ce:	47 5a       	subi	r20, 0xA7	; 167
    91d0:	58 4f       	sbci	r21, 0xF8	; 248
    91d2:	88 e1       	ldi	r24, 0x18	; 24
    91d4:	6c 2f       	mov	r22, r28
    91d6:	22 e0       	ldi	r18, 0x02	; 2
    91d8:	0e 94 bf 67 	call	0xcf7e	; 0xcf7e <_Z11lcd_putsn_PhhPKch>
    lcd_outhex4( 8*FW, y,anaIn(i));
    91dc:	8d 2f       	mov	r24, r29
    91de:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <_Z5anaInh>
    91e2:	ac 01       	movw	r20, r24
    91e4:	80 e3       	ldi	r24, 0x30	; 48
    91e6:	6c 2f       	mov	r22, r28
    91e8:	0e 94 0b 68 	call	0xd016	; 0xd016 <_Z11lcd_outhex4hhj>
    if(i<7)  lcd_outdez8(17*FW, y, (int32_t)calibratedStick[i]*100/1024);
    91ec:	d7 30       	cpi	r29, 0x07	; 7
    91ee:	d9 f0       	breq	.+54     	; 0x9226 <_Z15menuProcDiagAnah+0xba>
    lcd_putcAtt(18*FW,  y, tm+'0',tm ? INVERS : 0);
    lcd_putcAtt(20*FW,  y, tp+'0',tp ? INVERS : 0);
  }
}

void menuProcDiagAna(uint8_t event)
    91f0:	f4 01       	movw	r30, r8
    91f2:	e9 51       	subi	r30, 0x19	; 25
    91f4:	f7 4e       	sbci	r31, 0xE7	; 231
  for(uint8_t i=0; i<8; i++)
  {
    uint8_t y=i*FH;
    lcd_putsn_P( 4*FW, y,PSTR("A1A2A3A4A5A6A7A8")+2*i,2);
    lcd_outhex4( 8*FW, y,anaIn(i));
    if(i<7)  lcd_outdez8(17*FW, y, (int32_t)calibratedStick[i]*100/1024);
    91f6:	60 81       	ld	r22, Z
    91f8:	71 81       	ldd	r23, Z+1	; 0x01
    91fa:	88 27       	eor	r24, r24
    91fc:	77 fd       	sbrc	r23, 7
    91fe:	80 95       	com	r24
    9200:	98 2f       	mov	r25, r24
    9202:	24 e6       	ldi	r18, 0x64	; 100
    9204:	30 e0       	ldi	r19, 0x00	; 0
    9206:	40 e0       	ldi	r20, 0x00	; 0
    9208:	50 e0       	ldi	r21, 0x00	; 0
    920a:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    920e:	20 e0       	ldi	r18, 0x00	; 0
    9210:	34 e0       	ldi	r19, 0x04	; 4
    9212:	40 e0       	ldi	r20, 0x00	; 0
    9214:	50 e0       	ldi	r21, 0x00	; 0
    9216:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    921a:	86 e6       	ldi	r24, 0x66	; 102
    921c:	6c 2f       	mov	r22, r28
    921e:	42 2f       	mov	r20, r18
    9220:	0e 94 42 6a 	call	0xd484	; 0xd484 <_Z11lcd_outdez8hha>
    9224:	3f c0       	rjmp	.+126    	; 0x92a4 <_Z15menuProcDiagAnah+0x138>
    else {
#if defined (PCBV4)
      uint32_t batCalV = ((uint32_t)abRunningAvg*1390 + (10*(int32_t)abRunningAvg*g_eeGeneral.vBatCalib)/8) / BandGap;
    9226:	a0 90 77 15 	lds	r10, 0x1577
    922a:	b0 90 78 15 	lds	r11, 0x1578
    922e:	cc 24       	eor	r12, r12
    9230:	dd 24       	eor	r13, r13
    9232:	20 91 6e 12 	lds	r18, 0x126E
    9236:	33 27       	eor	r19, r19
    9238:	27 fd       	sbrc	r18, 7
    923a:	30 95       	com	r19
    923c:	43 2f       	mov	r20, r19
    923e:	53 2f       	mov	r21, r19
    9240:	c6 01       	movw	r24, r12
    9242:	b5 01       	movw	r22, r10
    9244:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    9248:	2a e0       	ldi	r18, 0x0A	; 10
    924a:	30 e0       	ldi	r19, 0x00	; 0
    924c:	40 e0       	ldi	r20, 0x00	; 0
    924e:	50 e0       	ldi	r21, 0x00	; 0
    9250:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    9254:	a2 01       	movw	r20, r4
    9256:	91 01       	movw	r18, r2
    9258:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    925c:	79 01       	movw	r14, r18
    925e:	8a 01       	movw	r16, r20
    9260:	c6 01       	movw	r24, r12
    9262:	b5 01       	movw	r22, r10
    9264:	2e e6       	ldi	r18, 0x6E	; 110
    9266:	35 e0       	ldi	r19, 0x05	; 5
    9268:	40 e0       	ldi	r20, 0x00	; 0
    926a:	50 e0       	ldi	r21, 0x00	; 0
    926c:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    9270:	e6 0e       	add	r14, r22
    9272:	f7 1e       	adc	r15, r23
    9274:	08 1f       	adc	r16, r24
    9276:	19 1f       	adc	r17, r25
    9278:	20 91 72 06 	lds	r18, 0x0672
    927c:	30 91 73 06 	lds	r19, 0x0673
    9280:	40 e0       	ldi	r20, 0x00	; 0
    9282:	50 e0       	ldi	r21, 0x00	; 0
    9284:	c8 01       	movw	r24, r16
    9286:	b7 01       	movw	r22, r14
    9288:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
      lcd_outdezNAtt(17*FW, y, batCalV, PREC2|(sub==1 ? INVERS : 0));
    928c:	a9 01       	movw	r20, r18
    928e:	87 2d       	mov	r24, r7
    9290:	81 30       	cpi	r24, 0x01	; 1
    9292:	11 f0       	breq	.+4      	; 0x9298 <_Z15menuProcDiagAnah+0x12c>
    9294:	20 e6       	ldi	r18, 0x60	; 96
    9296:	01 c0       	rjmp	.+2      	; 0x929a <_Z15menuProcDiagAnah+0x12e>
    9298:	22 e6       	ldi	r18, 0x62	; 98
    929a:	86 e6       	ldi	r24, 0x66	; 102
    929c:	6c 2f       	mov	r22, r28
    929e:	00 e0       	ldi	r16, 0x00	; 0
    92a0:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
{
  SIMPLE_MENU("ANA", menuTabDiag, e_Ana, 2);

  int8_t  sub    = m_posVert ;

  for(uint8_t i=0; i<8; i++)
    92a4:	df 5f       	subi	r29, 0xFF	; 255
    92a6:	82 e0       	ldi	r24, 0x02	; 2
    92a8:	90 e0       	ldi	r25, 0x00	; 0
    92aa:	88 0e       	add	r8, r24
    92ac:	99 1e       	adc	r9, r25
    92ae:	c8 5f       	subi	r28, 0xF8	; 248
    92b0:	d8 30       	cpi	r29, 0x08	; 8
    92b2:	09 f0       	breq	.+2      	; 0x92b6 <_Z15menuProcDiagAnah+0x14a>
    92b4:	8b cf       	rjmp	.-234    	; 0x91cc <_Z15menuProcDiagAnah+0x60>
#ifdef DEBUG
  // Display raw BandGap result (debug)
  lcd_putsn_P( 19*FW, 5*FH,PSTR("BG"),2) ;
  lcd_outdezAtt(21*FW, 6*FH, BandGap, 0);
#endif
  lcd_outdezAtt(21*FW, 7*FH, g_vbat100mV, PREC1); // The /10 and rounded value on V4 boards.
    92b6:	40 91 79 15 	lds	r20, 0x1579
    92ba:	8e e7       	ldi	r24, 0x7E	; 126
    92bc:	68 e3       	ldi	r22, 0x38	; 56
    92be:	50 e0       	ldi	r21, 0x00	; 0
    92c0:	20 e5       	ldi	r18, 0x50	; 80
    92c2:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>

  if(sub==1) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatCalib, -127, 127);
    92c6:	97 2d       	mov	r25, r7
    92c8:	91 30       	cpi	r25, 0x01	; 1
    92ca:	49 f4       	brne	.+18     	; 0x92de <_Z15menuProcDiagAnah+0x172>
    92cc:	86 2d       	mov	r24, r6
    92ce:	60 91 6e 12 	lds	r22, 0x126E
    92d2:	41 e8       	ldi	r20, 0x81	; 129
    92d4:	2f e7       	ldi	r18, 0x7F	; 127
    92d6:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    92da:	80 93 6e 12 	sts	0x126E, r24

}
    92de:	df 91       	pop	r29
    92e0:	cf 91       	pop	r28
    92e2:	1f 91       	pop	r17
    92e4:	0f 91       	pop	r16
    92e6:	ff 90       	pop	r15
    92e8:	ef 90       	pop	r14
    92ea:	df 90       	pop	r13
    92ec:	cf 90       	pop	r12
    92ee:	bf 90       	pop	r11
    92f0:	af 90       	pop	r10
    92f2:	9f 90       	pop	r9
    92f4:	8f 90       	pop	r8
    92f6:	7f 90       	pop	r7
    92f8:	6f 90       	pop	r6
    92fa:	5f 90       	pop	r5
    92fc:	4f 90       	pop	r4
    92fe:	3f 90       	pop	r3
    9300:	2f 90       	pop	r2
    9302:	08 95       	ret

00009304 <_Z16menuProcDiagKeysh>:
  lcd_puts_P(0, 7*FH,PSTR("EEPROM v"));
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
}

void menuProcDiagKeys(uint8_t event)
{
    9304:	ef 92       	push	r14
    9306:	ff 92       	push	r15
    9308:	0f 93       	push	r16
    930a:	1f 93       	push	r17
    930c:	cf 93       	push	r28
    930e:	df 93       	push	r29
    9310:	c8 2f       	mov	r28, r24
  SIMPLE_MENU("DIAG", menuTabDiag, e_Keys, 1);
    9312:	80 e0       	ldi	r24, 0x00	; 0
    9314:	60 e0       	ldi	r22, 0x00	; 0
    9316:	45 e9       	ldi	r20, 0x95	; 149
    9318:	57 e0       	ldi	r21, 0x07	; 7
    931a:	22 e0       	ldi	r18, 0x02	; 2
    931c:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    9320:	8c 2f       	mov	r24, r28
    9322:	64 e0       	ldi	r22, 0x04	; 4
    9324:	4c e3       	ldi	r20, 0x3C	; 60
    9326:	57 e0       	ldi	r21, 0x07	; 7
    9328:	27 e0       	ldi	r18, 0x07	; 7
    932a:	00 e0       	ldi	r16, 0x00	; 0
    932c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    9330:	88 23       	and	r24, r24
    9332:	09 f4       	brne	.+2      	; 0x9336 <_Z16menuProcDiagKeysh+0x32>
    9334:	79 c0       	rjmp	.+242    	; 0x9428 <_Z16menuProcDiagKeysh+0x124>
    9336:	ce e0       	ldi	r28, 0x0E	; 14
    9338:	d0 e0       	ldi	r29, 0x00	; 0
    933a:	10 e0       	ldi	r17, 0x00	; 0

  for(uint8_t i=0; i<9; i++)
  {
    uint8_t y=i*FH; //+FH;
    if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
    933c:	14 30       	cpi	r17, 0x04	; 4
    933e:	20 f0       	brcs	.+8      	; 0x9348 <_Z16menuProcDiagKeysh+0x44>
    9340:	e8 ef       	ldi	r30, 0xF8	; 248
    9342:	fe 2e       	mov	r15, r30
    9344:	f0 0e       	add	r15, r16
    9346:	01 c0       	rjmp	.+2      	; 0x934a <_Z16menuProcDiagKeysh+0x46>
{
  SIMPLE_MENU("DIAG", menuTabDiag, e_Keys, 1);

  for(uint8_t i=0; i<9; i++)
  {
    uint8_t y=i*FH; //+FH;
    9348:	f0 2e       	mov	r15, r16
    if(i>(SW_ID0-SW_BASE_DIAG)) y-=FH; //overwrite ID0
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    934a:	ce 01       	movw	r24, r28
    934c:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    9350:	e8 2e       	mov	r14, r24
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
    9352:	1f 5f       	subi	r17, 0xFF	; 255
    9354:	80 e3       	ldi	r24, 0x30	; 48
    9356:	6f 2d       	mov	r22, r15
    9358:	41 2f       	mov	r20, r17
    935a:	20 e0       	ldi	r18, 0x00	; 0
    935c:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
    9360:	4e 2d       	mov	r20, r14
    9362:	40 5d       	subi	r20, 0xD0	; 208
    9364:	ee 20       	and	r14, r14
    9366:	11 f0       	breq	.+4      	; 0x936c <_Z16menuProcDiagKeysh+0x68>
    9368:	22 e0       	ldi	r18, 0x02	; 2
    936a:	01 c0       	rjmp	.+2      	; 0x936e <_Z16menuProcDiagKeysh+0x6a>
    936c:	20 e0       	ldi	r18, 0x00	; 0
    936e:	84 e4       	ldi	r24, 0x44	; 68
    9370:	6f 2d       	mov	r22, r15
    9372:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    9376:	08 5f       	subi	r16, 0xF8	; 248
    9378:	21 96       	adiw	r28, 0x01	; 1

void menuProcDiagKeys(uint8_t event)
{
  SIMPLE_MENU("DIAG", menuTabDiag, e_Keys, 1);

  for(uint8_t i=0; i<9; i++)
    937a:	19 30       	cpi	r17, 0x09	; 9
    937c:	f9 f6       	brne	.-66     	; 0x933c <_Z16menuProcDiagKeysh+0x38>
    937e:	08 e3       	ldi	r16, 0x38	; 56
    9380:	c0 e0       	ldi	r28, 0x00	; 0
    9382:	d0 e0       	ldi	r29, 0x00	; 0
    9384:	10 e0       	ldi	r17, 0x00	; 0
  }

  for(uint8_t i=0; i<6; i++)
  {
    uint8_t y=(5-i)*FH+2*FH;
    bool t=keyState((EnumKeys)(KEY_MENU+i));
    9386:	81 2f       	mov	r24, r17
    9388:	90 e0       	ldi	r25, 0x00	; 0
    938a:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    938e:	f8 2e       	mov	r15, r24
    lcd_putsn_P(0, y, PSTR(" Menu Exit Down   UpRight Left")+5*i, 5);
    9390:	ae 01       	movw	r20, r28
    9392:	4a 58       	subi	r20, 0x8A	; 138
    9394:	58 4f       	sbci	r21, 0xF8	; 248
    9396:	80 e0       	ldi	r24, 0x00	; 0
    9398:	60 2f       	mov	r22, r16
    939a:	25 e0       	ldi	r18, 0x05	; 5
    939c:	0e 94 bf 67 	call	0xcf7e	; 0xcf7e <_Z11lcd_putsn_PhhPKch>
    lcd_putcAtt(5*FW+2, y, t+'0', t);
    93a0:	4f 2d       	mov	r20, r15
    93a2:	40 5d       	subi	r20, 0xD0	; 208
    93a4:	80 e2       	ldi	r24, 0x20	; 32
    93a6:	60 2f       	mov	r22, r16
    93a8:	2f 2d       	mov	r18, r15
    93aa:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    bool t=keyState((EnumKeys)(SW_BASE_DIAG+i));
    putsSwitches(8*FW, y, i+1, 0); //ohne off,on
    lcd_putcAtt(11*FW+2, y, t+'0', t ? INVERS : 0);
  }

  for(uint8_t i=0; i<6; i++)
    93ae:	1f 5f       	subi	r17, 0xFF	; 255
    93b0:	25 96       	adiw	r28, 0x05	; 5
    93b2:	08 50       	subi	r16, 0x08	; 8
    93b4:	16 30       	cpi	r17, 0x06	; 6
    93b6:	39 f7       	brne	.-50     	; 0x9386 <_Z16menuProcDiagKeysh+0x82>
    bool t=keyState((EnumKeys)(KEY_MENU+i));
    lcd_putsn_P(0, y, PSTR(" Menu Exit Down   UpRight Left")+5*i, 5);
    lcd_putcAtt(5*FW+2, y, t+'0', t);
  }

  lcd_putsn_P(14*FW, 3*FH, PSTR("Trim- +"), 7);
    93b8:	84 e5       	ldi	r24, 0x54	; 84
    93ba:	68 e1       	ldi	r22, 0x18	; 24
    93bc:	4e e6       	ldi	r20, 0x6E	; 110
    93be:	57 e0       	ldi	r21, 0x07	; 7
    93c0:	27 e0       	ldi	r18, 0x07	; 7
    93c2:	0e 94 bf 67 	call	0xcf7e	; 0xcf7e <_Z11lcd_putsn_PhhPKch>
    93c6:	c6 e0       	ldi	r28, 0x06	; 6
    93c8:	d0 e0       	ldi	r29, 0x00	; 0
    93ca:	10 e2       	ldi	r17, 0x20	; 32
  for(uint8_t i=0; i<4; i++)
    93cc:	ff 24       	eor	r15, r15
  {
    uint8_t y=i*FH+FH*4;
    lcd_img(14*FW, y, sticks,i,0);
    93ce:	84 e5       	ldi	r24, 0x54	; 84
    93d0:	61 2f       	mov	r22, r17
    93d2:	42 ef       	ldi	r20, 0xF2	; 242
    93d4:	56 e0       	ldi	r21, 0x06	; 6
    93d6:	2f 2d       	mov	r18, r15
    93d8:	00 e0       	ldi	r16, 0x00	; 0
    93da:	0e 94 63 66 	call	0xccc6	; 0xccc6 <_Z7lcd_imghhPKhhh>
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    93de:	ce 01       	movw	r24, r28
    93e0:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    93e4:	e8 2e       	mov	r14, r24
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    93e6:	ce 01       	movw	r24, r28
    93e8:	01 96       	adiw	r24, 0x01	; 1
    93ea:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <_Z8keyState8EnumKeys>
    93ee:	08 2f       	mov	r16, r24
    lcd_putcAtt(18*FW,  y, tm+'0',tm ? INVERS : 0);
    93f0:	4e 2d       	mov	r20, r14
    93f2:	40 5d       	subi	r20, 0xD0	; 208
    93f4:	ee 20       	and	r14, r14
    93f6:	11 f0       	breq	.+4      	; 0x93fc <_Z16menuProcDiagKeysh+0xf8>
    93f8:	22 e0       	ldi	r18, 0x02	; 2
    93fa:	01 c0       	rjmp	.+2      	; 0x93fe <_Z16menuProcDiagKeysh+0xfa>
    93fc:	20 e0       	ldi	r18, 0x00	; 0
    93fe:	8c e6       	ldi	r24, 0x6C	; 108
    9400:	61 2f       	mov	r22, r17
    9402:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    lcd_putcAtt(20*FW,  y, tp+'0',tp ? INVERS : 0);
    9406:	40 2f       	mov	r20, r16
    9408:	40 5d       	subi	r20, 0xD0	; 208
    940a:	00 23       	and	r16, r16
    940c:	11 f0       	breq	.+4      	; 0x9412 <_Z16menuProcDiagKeysh+0x10e>
    940e:	22 e0       	ldi	r18, 0x02	; 2
    9410:	01 c0       	rjmp	.+2      	; 0x9414 <_Z16menuProcDiagKeysh+0x110>
    9412:	20 e0       	ldi	r18, 0x00	; 0
    9414:	88 e7       	ldi	r24, 0x78	; 120
    9416:	61 2f       	mov	r22, r17
    9418:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    lcd_putsn_P(0, y, PSTR(" Menu Exit Down   UpRight Left")+5*i, 5);
    lcd_putcAtt(5*FW+2, y, t+'0', t);
  }

  lcd_putsn_P(14*FW, 3*FH, PSTR("Trim- +"), 7);
  for(uint8_t i=0; i<4; i++)
    941c:	f3 94       	inc	r15
    941e:	18 5f       	subi	r17, 0xF8	; 248
    9420:	22 96       	adiw	r28, 0x02	; 2
    9422:	8f 2d       	mov	r24, r15
    9424:	84 30       	cpi	r24, 0x04	; 4
    9426:	99 f6       	brne	.-90     	; 0x93ce <_Z16menuProcDiagKeysh+0xca>
    bool tm=keyState((EnumKeys)(TRM_BASE+2*i));
    bool tp=keyState((EnumKeys)(TRM_BASE+2*i+1));
    lcd_putcAtt(18*FW,  y, tm+'0',tm ? INVERS : 0);
    lcd_putcAtt(20*FW,  y, tp+'0',tp ? INVERS : 0);
  }
}
    9428:	df 91       	pop	r29
    942a:	cf 91       	pop	r28
    942c:	1f 91       	pop	r17
    942e:	0f 91       	pop	r16
    9430:	ff 90       	pop	r15
    9432:	ef 90       	pop	r14
    9434:	08 95       	ret

00009436 <_Z16menuProcDiagVersh>:
    }
  }
}

void menuProcDiagVers(uint8_t event)
{
    9436:	0f 93       	push	r16
    9438:	cf 93       	push	r28
    943a:	c8 2f       	mov	r28, r24
  SIMPLE_MENU("VERSION", menuTabDiag, e_Vers, 1);
    943c:	80 e0       	ldi	r24, 0x00	; 0
    943e:	60 e0       	ldi	r22, 0x00	; 0
    9440:	43 ea       	ldi	r20, 0xA3	; 163
    9442:	57 e0       	ldi	r21, 0x07	; 7
    9444:	22 e0       	ldi	r18, 0x02	; 2
    9446:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    944a:	8c 2f       	mov	r24, r28
    944c:	63 e0       	ldi	r22, 0x03	; 3
    944e:	4c e3       	ldi	r20, 0x3C	; 60
    9450:	57 e0       	ldi	r21, 0x07	; 7
    9452:	27 e0       	ldi	r18, 0x07	; 7
    9454:	00 e0       	ldi	r16, 0x00	; 0
    9456:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    945a:	88 23       	and	r24, r24
    945c:	61 f1       	breq	.+88     	; 0x94b6 <_Z16menuProcDiagVersh+0x80>

  lcd_puts_P(0, 2*FH,stamp4 );
    945e:	80 e0       	ldi	r24, 0x00	; 0
    9460:	60 e1       	ldi	r22, 0x10	; 16
    9462:	42 ef       	ldi	r20, 0xF2	; 242
    9464:	51 e0       	ldi	r21, 0x01	; 1
    9466:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0, 3*FH,stamp1 );
    946a:	80 e0       	ldi	r24, 0x00	; 0
    946c:	68 e1       	ldi	r22, 0x18	; 24
    946e:	40 ec       	ldi	r20, 0xC0	; 192
    9470:	51 e0       	ldi	r21, 0x01	; 1
    9472:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0, 4*FH,stamp5 );
    9476:	80 e0       	ldi	r24, 0x00	; 0
    9478:	60 e2       	ldi	r22, 0x20	; 32
    947a:	44 e0       	ldi	r20, 0x04	; 4
    947c:	52 e0       	ldi	r21, 0x02	; 2
    947e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0, 5*FH,stamp2 );
    9482:	80 e0       	ldi	r24, 0x00	; 0
    9484:	68 e2       	ldi	r22, 0x28	; 40
    9486:	42 ed       	ldi	r20, 0xD2	; 210
    9488:	51 e0       	ldi	r21, 0x01	; 1
    948a:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0, 6*FH,stamp3 );
    948e:	80 e0       	ldi	r24, 0x00	; 0
    9490:	60 e3       	ldi	r22, 0x30	; 48
    9492:	43 ee       	ldi	r20, 0xE3	; 227
    9494:	51 e0       	ldi	r21, 0x01	; 1
    9496:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_puts_P(0, 7*FH,PSTR("EEPROM v"));
    949a:	80 e0       	ldi	r24, 0x00	; 0
    949c:	68 e3       	ldi	r22, 0x38	; 56
    949e:	4a e9       	ldi	r20, 0x9A	; 154
    94a0:	57 e0       	ldi	r21, 0x07	; 7
    94a2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdezAtt(8*FW, 7*FH, g_eeGeneral.myVers, LEFT);
    94a6:	40 91 3e 12 	lds	r20, 0x123E
    94aa:	80 e3       	ldi	r24, 0x30	; 48
    94ac:	68 e3       	ldi	r22, 0x38	; 56
    94ae:	50 e0       	ldi	r21, 0x00	; 0
    94b0:	20 e8       	ldi	r18, 0x80	; 128
    94b2:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
}
    94b6:	cf 91       	pop	r28
    94b8:	0f 91       	pop	r16
    94ba:	08 95       	ret

000094bc <_Z15menuProcTrainerh>:
  }
}
#endif

void menuProcTrainer(uint8_t event)
{
    94bc:	6f 92       	push	r6
    94be:	7f 92       	push	r7
    94c0:	8f 92       	push	r8
    94c2:	9f 92       	push	r9
    94c4:	af 92       	push	r10
    94c6:	bf 92       	push	r11
    94c8:	cf 92       	push	r12
    94ca:	df 92       	push	r13
    94cc:	ef 92       	push	r14
    94ce:	ff 92       	push	r15
    94d0:	0f 93       	push	r16
    94d2:	1f 93       	push	r17
    94d4:	df 93       	push	r29
    94d6:	cf 93       	push	r28
    94d8:	0f 92       	push	r0
    94da:	cd b7       	in	r28, 0x3d	; 61
    94dc:	de b7       	in	r29, 0x3e	; 62
    94de:	d8 2e       	mov	r13, r24
  MENU("TRAINER", menuTabDiag, e_Trainer, 7, {0, 2, 2, 2, 2, 0/*, 0*/});
    94e0:	80 e0       	ldi	r24, 0x00	; 0
    94e2:	60 e0       	ldi	r22, 0x00	; 0
    94e4:	44 ee       	ldi	r20, 0xE4	; 228
    94e6:	57 e0       	ldi	r21, 0x07	; 7
    94e8:	22 e0       	ldi	r18, 0x02	; 2
    94ea:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    94ee:	8d 2d       	mov	r24, r13
    94f0:	62 e0       	ldi	r22, 0x02	; 2
    94f2:	4c e3       	ldi	r20, 0x3C	; 60
    94f4:	57 e0       	ldi	r21, 0x07	; 7
    94f6:	27 e0       	ldi	r18, 0x07	; 7
    94f8:	0d e5       	ldi	r16, 0x5D	; 93
    94fa:	17 e0       	ldi	r17, 0x07	; 7
    94fc:	75 e0       	ldi	r23, 0x05	; 5
    94fe:	e7 2e       	mov	r14, r23
    9500:	36 e0       	ldi	r19, 0x06	; 6
    9502:	c3 2e       	mov	r12, r19
    9504:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    9508:	88 23       	and	r24, r24
    950a:	09 f4       	brne	.+2      	; 0x950e <_Z15menuProcTrainerh+0x52>
    950c:	41 c1       	rjmp	.+642    	; 0x9790 <_Z15menuProcTrainerh+0x2d4>

  int8_t  sub    = m_posVert;
    950e:	c0 90 4b 19 	lds	r12, 0x194B
  uint8_t subSub = m_posHorz;
    9512:	a0 90 4c 19 	lds	r10, 0x194C
  uint8_t y;
  bool    edit;
  uint8_t blink ;

  if (SLAVE_MODE) { // i am the slave
    9516:	91 9b       	sbis	0x12, 1	; 18
    9518:	07 c0       	rjmp	.+14     	; 0x9528 <_Z15menuProcTrainerh+0x6c>
    lcd_puts_P(7*FW, 3*FH, PSTR("Slave"));
    951a:	8a e2       	ldi	r24, 0x2A	; 42
    951c:	68 e1       	ldi	r22, 0x18	; 24
    951e:	4e ed       	ldi	r20, 0xDE	; 222
    9520:	57 e0       	ldi	r21, 0x07	; 7
    9522:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    return;
    9526:	34 c1       	rjmp	.+616    	; 0x9790 <_Z15menuProcTrainerh+0x2d4>
  }

  lcd_puts_P(3*FW, 1*FH, PSTR("mode   % src"));
    9528:	82 e1       	ldi	r24, 0x12	; 18
    952a:	68 e0       	ldi	r22, 0x08	; 8
    952c:	41 ed       	ldi	r20, 0xD1	; 209
    952e:	57 e0       	ldi	r21, 0x07	; 7
    9530:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>

  sub--;
    9534:	ca 94       	dec	r12
  y = 2*FH;
  blink = s_editMode ? BLINK : INVERS ;
    9536:	80 91 16 19 	lds	r24, 0x1916
    953a:	88 23       	and	r24, r24
    953c:	19 f0       	breq	.+6      	; 0x9544 <_Z15menuProcTrainerh+0x88>
    953e:	bb 24       	eor	r11, r11
    9540:	b3 94       	inc	r11
    9542:	02 c0       	rjmp	.+4      	; 0x9548 <_Z15menuProcTrainerh+0x8c>
    9544:	22 e0       	ldi	r18, 0x02	; 2
    9546:	b2 2e       	mov	r11, r18
    9548:	ee 24       	eor	r14, r14
    954a:	ff 24       	eor	r15, r15
  }

  lcd_puts_P(3*FW, 1*FH, PSTR("mode   % src"));

  sub--;
  y = 2*FH;
    954c:	10 e1       	ldi	r17, 0x10	; 16

    volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];

    putsChnRaw(0, y, chan, 0);

    edit = (sub==i && subSub==0);
    954e:	8c 2c       	mov	r8, r12
    9550:	99 24       	eor	r9, r9
    9552:	87 fc       	sbrc	r8, 7
    9554:	90 94       	com	r9
  sub--;
  y = 2*FH;
  blink = s_editMode ? BLINK : INVERS ;

  for (uint8_t i=0; i<4; i++) {
    uint8_t chan = pgm_read_byte(chout_ar+g_eeGeneral.templateSetup*4+i); // G: Issue 30.
    9556:	e0 91 87 12 	lds	r30, 0x1287
    955a:	f0 e0       	ldi	r31, 0x00	; 0
    955c:	ee 0f       	add	r30, r30
    955e:	ff 1f       	adc	r31, r31
    9560:	ee 0f       	add	r30, r30
    9562:	ff 1f       	adc	r31, r31
    9564:	ee 0d       	add	r30, r14
    9566:	ff 1d       	adc	r31, r15
    9568:	ee 5f       	subi	r30, 0xFE	; 254
    956a:	f9 4f       	sbci	r31, 0xF9	; 249
    956c:	44 91       	lpm	r20, Z+

    volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];
    956e:	64 2e       	mov	r6, r20
    9570:	77 24       	eor	r7, r7
    9572:	66 0c       	add	r6, r6
    9574:	77 1c       	adc	r7, r7
    9576:	86 e7       	ldi	r24, 0x76	; 118
    9578:	92 e1       	ldi	r25, 0x12	; 18
    957a:	68 0e       	add	r6, r24
    957c:	79 1e       	adc	r7, r25

    putsChnRaw(0, y, chan, 0);
    957e:	80 e0       	ldi	r24, 0x00	; 0
    9580:	61 2f       	mov	r22, r17
    9582:	20 e0       	ldi	r18, 0x00	; 0
    9584:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>

    edit = (sub==i && subSub==0);
    9588:	8e 14       	cp	r8, r14
    958a:	9f 04       	cpc	r9, r15
    958c:	11 f4       	brne	.+4      	; 0x9592 <_Z15menuProcTrainerh+0xd6>
    }
  }
}
#endif

void menuProcTrainer(uint8_t event)
    958e:	91 e0       	ldi	r25, 0x01	; 1
    9590:	a1 10       	cpse	r10, r1

    volatile TrainerMix *td = &g_eeGeneral.trainer.mix[chan-1];

    putsChnRaw(0, y, chan, 0);

    edit = (sub==i && subSub==0);
    9592:	90 e0       	ldi	r25, 0x00	; 0
    lcd_putsnAtt(4*FW, y, PSTR("off += :=")+3*td->mode, 3, edit ? blink : 0);
    9594:	f3 01       	movw	r30, r6
    9596:	20 81       	ld	r18, Z
    9598:	22 95       	swap	r18
    959a:	26 95       	lsr	r18
    959c:	26 95       	lsr	r18
    959e:	23 70       	andi	r18, 0x03	; 3
    95a0:	30 e0       	ldi	r19, 0x00	; 0
    95a2:	a9 01       	movw	r20, r18
    95a4:	44 0f       	add	r20, r20
    95a6:	55 1f       	adc	r21, r21
    95a8:	42 0f       	add	r20, r18
    95aa:	53 1f       	adc	r21, r19
    95ac:	49 53       	subi	r20, 0x39	; 57
    95ae:	58 4f       	sbci	r21, 0xF8	; 248
    95b0:	99 23       	and	r25, r25
    95b2:	11 f4       	brne	.+4      	; 0x95b8 <_Z15menuProcTrainerh+0xfc>
    95b4:	00 e0       	ldi	r16, 0x00	; 0
    95b6:	01 c0       	rjmp	.+2      	; 0x95ba <_Z15menuProcTrainerh+0xfe>
    95b8:	0b 2d       	mov	r16, r11
    95ba:	88 e1       	ldi	r24, 0x18	; 24
    95bc:	61 2f       	mov	r22, r17
    95be:	23 e0       	ldi	r18, 0x03	; 3
    95c0:	99 83       	std	Y+1, r25	; 0x01
    95c2:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if (edit && s_editMode)
    95c6:	99 81       	ldd	r25, Y+1	; 0x01
    95c8:	99 23       	and	r25, r25
    95ca:	c1 f0       	breq	.+48     	; 0x95fc <_Z15menuProcTrainerh+0x140>
    95cc:	80 91 16 19 	lds	r24, 0x1916
    95d0:	88 23       	and	r24, r24
    95d2:	a1 f0       	breq	.+40     	; 0x95fc <_Z15menuProcTrainerh+0x140>
      CHECK_INCDEC_GENVAR(event, td->mode, 0, 2);
    95d4:	f3 01       	movw	r30, r6
    95d6:	60 81       	ld	r22, Z
    95d8:	62 95       	swap	r22
    95da:	66 95       	lsr	r22
    95dc:	66 95       	lsr	r22
    95de:	63 70       	andi	r22, 0x03	; 3
    95e0:	8d 2d       	mov	r24, r13
    95e2:	40 e0       	ldi	r20, 0x00	; 0
    95e4:	22 e0       	ldi	r18, 0x02	; 2
    95e6:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    95ea:	82 95       	swap	r24
    95ec:	88 0f       	add	r24, r24
    95ee:	88 0f       	add	r24, r24
    95f0:	80 7c       	andi	r24, 0xC0	; 192
    95f2:	f3 01       	movw	r30, r6
    95f4:	90 81       	ld	r25, Z
    95f6:	9f 73       	andi	r25, 0x3F	; 63
    95f8:	98 2b       	or	r25, r24
    95fa:	90 83       	st	Z, r25

    edit = (sub==i && subSub==1);
    95fc:	8e 14       	cp	r8, r14
    95fe:	9f 04       	cpc	r9, r15
    9600:	21 f4       	brne	.+8      	; 0x960a <_Z15menuProcTrainerh+0x14e>
    }
  }
}
#endif

void menuProcTrainer(uint8_t event)
    9602:	01 e0       	ldi	r16, 0x01	; 1
    9604:	fa 2d       	mov	r31, r10
    9606:	f1 30       	cpi	r31, 0x01	; 1
    9608:	09 f0       	breq	.+2      	; 0x960c <_Z15menuProcTrainerh+0x150>
    edit = (sub==i && subSub==0);
    lcd_putsnAtt(4*FW, y, PSTR("off += :=")+3*td->mode, 3, edit ? blink : 0);
    if (edit && s_editMode)
      CHECK_INCDEC_GENVAR(event, td->mode, 0, 2);

    edit = (sub==i && subSub==1);
    960a:	00 e0       	ldi	r16, 0x00	; 0
    lcd_outdezAtt(11*FW, y, td->studWeight, edit ? blink : 0);
    960c:	f3 01       	movw	r30, r6
    960e:	41 81       	ldd	r20, Z+1	; 0x01
    9610:	55 27       	eor	r21, r21
    9612:	47 fd       	sbrc	r20, 7
    9614:	50 95       	com	r21
    9616:	00 23       	and	r16, r16
    9618:	11 f4       	brne	.+4      	; 0x961e <_Z15menuProcTrainerh+0x162>
    961a:	20 e0       	ldi	r18, 0x00	; 0
    961c:	01 c0       	rjmp	.+2      	; 0x9620 <_Z15menuProcTrainerh+0x164>
    961e:	2b 2d       	mov	r18, r11
    9620:	82 e4       	ldi	r24, 0x42	; 66
    9622:	61 2f       	mov	r22, r17
    9624:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    if (edit && s_editMode)
    9628:	00 23       	and	r16, r16
    962a:	69 f0       	breq	.+26     	; 0x9646 <_Z15menuProcTrainerh+0x18a>
    962c:	80 91 16 19 	lds	r24, 0x1916
    9630:	88 23       	and	r24, r24
    9632:	49 f0       	breq	.+18     	; 0x9646 <_Z15menuProcTrainerh+0x18a>
      CHECK_INCDEC_GENVAR(event, td->studWeight, -100, 100);
    9634:	f3 01       	movw	r30, r6
    9636:	61 81       	ldd	r22, Z+1	; 0x01
    9638:	8d 2d       	mov	r24, r13
    963a:	4c e9       	ldi	r20, 0x9C	; 156
    963c:	24 e6       	ldi	r18, 0x64	; 100
    963e:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9642:	f3 01       	movw	r30, r6
    9644:	81 83       	std	Z+1, r24	; 0x01

    edit = (sub==i && subSub==2);
    9646:	8e 14       	cp	r8, r14
    9648:	9f 04       	cpc	r9, r15
    964a:	21 f4       	brne	.+8      	; 0x9654 <_Z15menuProcTrainerh+0x198>
    }
  }
}
#endif

void menuProcTrainer(uint8_t event)
    964c:	91 e0       	ldi	r25, 0x01	; 1
    964e:	fa 2d       	mov	r31, r10
    9650:	f2 30       	cpi	r31, 0x02	; 2
    9652:	09 f0       	breq	.+2      	; 0x9656 <_Z15menuProcTrainerh+0x19a>
    edit = (sub==i && subSub==1);
    lcd_outdezAtt(11*FW, y, td->studWeight, edit ? blink : 0);
    if (edit && s_editMode)
      CHECK_INCDEC_GENVAR(event, td->studWeight, -100, 100);

    edit = (sub==i && subSub==2);
    9654:	90 e0       	ldi	r25, 0x00	; 0
    lcd_putsnAtt(12*FW, y, PSTR("ch1ch2ch3ch4")+3*td->srcChn, 3, edit ? blink : 0);
    9656:	f3 01       	movw	r30, r6
    9658:	20 81       	ld	r18, Z
    965a:	2f 73       	andi	r18, 0x3F	; 63
    965c:	30 e0       	ldi	r19, 0x00	; 0
    965e:	a9 01       	movw	r20, r18
    9660:	44 0f       	add	r20, r20
    9662:	55 1f       	adc	r21, r21
    9664:	42 0f       	add	r20, r18
    9666:	53 1f       	adc	r21, r19
    9668:	46 54       	subi	r20, 0x46	; 70
    966a:	58 4f       	sbci	r21, 0xF8	; 248
    966c:	99 23       	and	r25, r25
    966e:	11 f4       	brne	.+4      	; 0x9674 <_Z15menuProcTrainerh+0x1b8>
    9670:	00 e0       	ldi	r16, 0x00	; 0
    9672:	01 c0       	rjmp	.+2      	; 0x9676 <_Z15menuProcTrainerh+0x1ba>
    9674:	0b 2d       	mov	r16, r11
    9676:	88 e4       	ldi	r24, 0x48	; 72
    9678:	61 2f       	mov	r22, r17
    967a:	23 e0       	ldi	r18, 0x03	; 3
    967c:	99 83       	std	Y+1, r25	; 0x01
    967e:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if (edit && s_editMode)
    9682:	99 81       	ldd	r25, Y+1	; 0x01
    9684:	99 23       	and	r25, r25
    9686:	91 f0       	breq	.+36     	; 0x96ac <_Z15menuProcTrainerh+0x1f0>
    9688:	80 91 16 19 	lds	r24, 0x1916
    968c:	88 23       	and	r24, r24
    968e:	71 f0       	breq	.+28     	; 0x96ac <_Z15menuProcTrainerh+0x1f0>
      CHECK_INCDEC_GENVAR(event, td->srcChn, 0, 3);
    9690:	f3 01       	movw	r30, r6
    9692:	60 81       	ld	r22, Z
    9694:	6f 73       	andi	r22, 0x3F	; 63
    9696:	8d 2d       	mov	r24, r13
    9698:	40 e0       	ldi	r20, 0x00	; 0
    969a:	23 e0       	ldi	r18, 0x03	; 3
    969c:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    96a0:	8f 73       	andi	r24, 0x3F	; 63
    96a2:	f3 01       	movw	r30, r6
    96a4:	90 81       	ld	r25, Z
    96a6:	90 7c       	andi	r25, 0xC0	; 192
    96a8:	98 2b       	or	r25, r24
    96aa:	90 83       	st	Z, r25

    edit = (sub==i && subSub==3);

    y += FH;
    96ac:	18 5f       	subi	r17, 0xF8	; 248
    96ae:	08 94       	sec
    96b0:	e1 1c       	adc	r14, r1
    96b2:	f1 1c       	adc	r15, r1

  sub--;
  y = 2*FH;
  blink = s_editMode ? BLINK : INVERS ;

  for (uint8_t i=0; i<4; i++) {
    96b4:	10 33       	cpi	r17, 0x30	; 48
    96b6:	09 f0       	breq	.+2      	; 0x96ba <_Z15menuProcTrainerh+0x1fe>
    96b8:	4e cf       	rjmp	.-356    	; 0x9556 <_Z15menuProcTrainerh+0x9a>
    edit = (sub==i && subSub==3);

    y += FH;
  }

  lcd_puts_P(0*FW, y, PSTR("Multiplier"));
    96ba:	80 e0       	ldi	r24, 0x00	; 0
    96bc:	60 e3       	ldi	r22, 0x30	; 48
    96be:	4f ea       	ldi	r20, 0xAF	; 175
    96c0:	57 e0       	ldi	r21, 0x07	; 7
    96c2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdezAtt(13*FW, y, g_eeGeneral.PPM_Multiplier+10, (sub==4 ? INVERS : 0)|PREC1);
    96c6:	40 91 88 12 	lds	r20, 0x1288
    96ca:	55 27       	eor	r21, r21
    96cc:	47 fd       	sbrc	r20, 7
    96ce:	50 95       	com	r21
    96d0:	46 5f       	subi	r20, 0xF6	; 246
    96d2:	5f 4f       	sbci	r21, 0xFF	; 255
    96d4:	fc 2d       	mov	r31, r12
    96d6:	f4 30       	cpi	r31, 0x04	; 4
    96d8:	11 f4       	brne	.+4      	; 0x96de <_Z15menuProcTrainerh+0x222>
    96da:	22 e5       	ldi	r18, 0x52	; 82
    96dc:	01 c0       	rjmp	.+2      	; 0x96e0 <_Z15menuProcTrainerh+0x224>
    96de:	20 e5       	ldi	r18, 0x50	; 80
    96e0:	8e e4       	ldi	r24, 0x4E	; 78
    96e2:	60 e3       	ldi	r22, 0x30	; 48
    96e4:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  if(sub==4) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);
    96e8:	8c 2d       	mov	r24, r12
    96ea:	84 30       	cpi	r24, 0x04	; 4
    96ec:	49 f4       	brne	.+18     	; 0x9700 <_Z15menuProcTrainerh+0x244>
    96ee:	8d 2d       	mov	r24, r13
    96f0:	60 91 88 12 	lds	r22, 0x1288
    96f4:	46 ef       	ldi	r20, 0xF6	; 246
    96f6:	28 e2       	ldi	r18, 0x28	; 40
    96f8:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    96fc:	80 93 88 12 	sts	0x1288, r24
  y += FH;

  edit = (sub==5);
    9700:	ee 24       	eor	r14, r14
    9702:	e3 94       	inc	r14
    9704:	9c 2d       	mov	r25, r12
    9706:	95 30       	cpi	r25, 0x05	; 5
    9708:	19 f0       	breq	.+6      	; 0x9710 <_Z15menuProcTrainerh+0x254>
    970a:	ee 24       	eor	r14, r14
  lcd_putsAtt(0*FW, y, PSTR("Cal"), edit ? INVERS : 0);
    970c:	20 e0       	ldi	r18, 0x00	; 0
    970e:	01 c0       	rjmp	.+2      	; 0x9712 <_Z15menuProcTrainerh+0x256>
    9710:	22 e0       	ldi	r18, 0x02	; 2
    9712:	80 e0       	ldi	r24, 0x00	; 0
    9714:	68 e3       	ldi	r22, 0x38	; 56
    9716:	4b ea       	ldi	r20, 0xAB	; 171
    9718:	57 e0       	ldi	r21, 0x07	; 7
    971a:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    971e:	ae e7       	ldi	r26, 0x7E	; 126
    9720:	8a 2e       	mov	r8, r26
    9722:	a8 e1       	ldi	r26, 0x18	; 24
    9724:	9a 2e       	mov	r9, r26
    9726:	00 e7       	ldi	r16, 0x70	; 112
    9728:	12 e1       	ldi	r17, 0x12	; 18
    972a:	30 e3       	ldi	r19, 0x30	; 48
  for (uint8_t i=0; i<4; i++) {
    uint8_t x = (i*8+16)*FW/2;
#if defined (DECIMALS_DISPLAYED)
    lcd_outdezAtt(x , y, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])*2, PREC1);
#else
    lcd_outdezAtt(x , y, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])/5, 0);
    972c:	f5 e0       	ldi	r31, 0x05	; 5
    972e:	af 2e       	mov	r10, r31
    9730:	b1 2c       	mov	r11, r1
    9732:	f4 01       	movw	r30, r8
    9734:	81 91       	ld	r24, Z+
    9736:	91 91       	ld	r25, Z+
    9738:	4f 01       	movw	r8, r30
    973a:	f8 01       	movw	r30, r16
    973c:	41 91       	ld	r20, Z+
    973e:	51 91       	ld	r21, Z+
    9740:	8f 01       	movw	r16, r30
    9742:	84 1b       	sub	r24, r20
    9744:	95 0b       	sbc	r25, r21
    9746:	b5 01       	movw	r22, r10
    9748:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    974c:	ab 01       	movw	r20, r22
    974e:	83 2f       	mov	r24, r19
    9750:	68 e3       	ldi	r22, 0x38	; 56
    9752:	20 e0       	ldi	r18, 0x00	; 0
    9754:	39 83       	std	Y+1, r19	; 0x01
    9756:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    975a:	39 81       	ldd	r19, Y+1	; 0x01
    975c:	38 5e       	subi	r19, 0xE8	; 232
  if(sub==4) CHECK_INCDEC_GENVAR(event, g_eeGeneral.PPM_Multiplier, -10, 40);
  y += FH;

  edit = (sub==5);
  lcd_putsAtt(0*FW, y, PSTR("Cal"), edit ? INVERS : 0);
  for (uint8_t i=0; i<4; i++) {
    975e:	30 39       	cpi	r19, 0x90	; 144
    9760:	41 f7       	brne	.-48     	; 0x9732 <_Z15menuProcTrainerh+0x276>
#else
    lcd_outdezAtt(x , y, (g_ppmIns[i]-g_eeGeneral.trainer.calib[i])/5, 0);
#endif
  }

  if (edit) {
    9762:	ee 20       	and	r14, r14
    9764:	a9 f0       	breq	.+42     	; 0x9790 <_Z15menuProcTrainerh+0x2d4>
    if (event==EVT_KEY_FIRST(KEY_MENU)){
    9766:	fd 2d       	mov	r31, r13
    9768:	f0 36       	cpi	r31, 0x60	; 96
    976a:	91 f4       	brne	.+36     	; 0x9790 <_Z15menuProcTrainerh+0x2d4>
      memcpy(g_eeGeneral.trainer.calib, g_ppmIns, sizeof(g_eeGeneral.trainer.calib));
    976c:	a0 e7       	ldi	r26, 0x70	; 112
    976e:	b2 e1       	ldi	r27, 0x12	; 18
    9770:	ee e7       	ldi	r30, 0x7E	; 126
    9772:	f8 e1       	ldi	r31, 0x18	; 24
    9774:	88 e0       	ldi	r24, 0x08	; 8
    9776:	01 90       	ld	r0, Z+
    9778:	0d 92       	st	X+, r0
    977a:	81 50       	subi	r24, 0x01	; 1
    977c:	e1 f7       	brne	.-8      	; 0x9776 <_Z15menuProcTrainerh+0x2ba>
      eeDirty(EE_GENERAL);
    977e:	81 e0       	ldi	r24, 0x01	; 1
    9780:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    9784:	80 91 72 15 	lds	r24, 0x1572
    9788:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    978c:	84 e6       	ldi	r24, 0x64	; 100
    978e:	87 bd       	out	0x27, r24	; 39
      beepKey();
    }
  }
}
    9790:	0f 90       	pop	r0
    9792:	cf 91       	pop	r28
    9794:	df 91       	pop	r29
    9796:	1f 91       	pop	r17
    9798:	0f 91       	pop	r16
    979a:	ff 90       	pop	r15
    979c:	ef 90       	pop	r14
    979e:	df 90       	pop	r13
    97a0:	cf 90       	pop	r12
    97a2:	bf 90       	pop	r11
    97a4:	af 90       	pop	r10
    97a6:	9f 90       	pop	r9
    97a8:	8f 90       	pop	r8
    97aa:	7f 90       	pop	r7
    97ac:	6f 90       	pop	r6
    97ae:	08 95       	ret

000097b0 <_Z12menuProcTimeh>:


#if defined(PCBV3)
// SD card interface contains Real-Time-Clock chip
void menuProcTime(uint8_t event)
{
    97b0:	5f 92       	push	r5
    97b2:	6f 92       	push	r6
    97b4:	7f 92       	push	r7
    97b6:	8f 92       	push	r8
    97b8:	9f 92       	push	r9
    97ba:	af 92       	push	r10
    97bc:	bf 92       	push	r11
    97be:	cf 92       	push	r12
    97c0:	df 92       	push	r13
    97c2:	ef 92       	push	r14
    97c4:	ff 92       	push	r15
    97c6:	0f 93       	push	r16
    97c8:	1f 93       	push	r17
    97ca:	df 93       	push	r29
    97cc:	cf 93       	push	r28
    97ce:	cd b7       	in	r28, 0x3d	; 61
    97d0:	de b7       	in	r29, 0x3e	; 62
    97d2:	28 97       	sbiw	r28, 0x08	; 8
    97d4:	0f b6       	in	r0, 0x3f	; 63
    97d6:	f8 94       	cli
    97d8:	de bf       	out	0x3e, r29	; 62
    97da:	0f be       	out	0x3f, r0	; 63
    97dc:	cd bf       	out	0x3d, r28	; 61
    97de:	d8 2e       	mov	r13, r24
  MENU("DATE AND TIME", menuTabDiag, e_FrskyTime, 3, {0, 2/*, 2*/});
    97e0:	80 e0       	ldi	r24, 0x00	; 0
    97e2:	60 e0       	ldi	r22, 0x00	; 0
    97e4:	47 ef       	ldi	r20, 0xF7	; 247
    97e6:	57 e0       	ldi	r21, 0x07	; 7
    97e8:	22 e0       	ldi	r18, 0x02	; 2
    97ea:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    97ee:	8d 2d       	mov	r24, r13
    97f0:	61 e0       	ldi	r22, 0x01	; 1
    97f2:	4c e3       	ldi	r20, 0x3C	; 60
    97f4:	57 e0       	ldi	r21, 0x07	; 7
    97f6:	27 e0       	ldi	r18, 0x07	; 7
    97f8:	03 e6       	ldi	r16, 0x63	; 99
    97fa:	17 e0       	ldi	r17, 0x07	; 7
    97fc:	ee 24       	eor	r14, r14
    97fe:	e3 94       	inc	r14
    9800:	f2 e0       	ldi	r31, 0x02	; 2
    9802:	cf 2e       	mov	r12, r31
    9804:	0e 94 bd 22 	call	0x457a	; 0x457a <_Z5checkhhPPFvhEhPhhh>
    9808:	88 23       	and	r24, r24
    980a:	09 f4       	brne	.+2      	; 0x980e <_Z12menuProcTimeh+0x5e>
    980c:	9b c1       	rjmp	.+822    	; 0x9b44 <_Z12menuProcTimeh+0x394>

  int8_t  sub    = m_posVert - 1; // vertical position (1 = page counter, top/right)
    980e:	60 90 4b 19 	lds	r6, 0x194B
    9812:	6a 94       	dec	r6
  uint8_t subSub = m_posHorz;     // horizontal position
    9814:	50 90 4c 19 	lds	r5, 0x194C
  static struct tm t;
  struct tm *at = &t;

  switch(event)
    9818:	8d 2d       	mov	r24, r13
    981a:	80 36       	cpi	r24, 0x60	; 96
    981c:	29 f0       	breq	.+10     	; 0x9828 <_Z12menuProcTimeh+0x78>
    981e:	80 38       	cpi	r24, 0x80	; 128
    9820:	c1 f5       	brne	.+112    	; 0x9892 <_Z12menuProcTimeh+0xe2>
  {
    case EVT_KEY_LONG(KEY_MENU):
      // get data time from RTC chip (may not implement)
      killEvents(event);
    9822:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      break;
    9826:	35 c0       	rjmp	.+106    	; 0x9892 <_Z12menuProcTimeh+0xe2>
    case EVT_KEY_FIRST(KEY_MENU):
      if (sub >= 0 && !s_editMode) // set the date and time into RTC chip
    9828:	67 fc       	sbrc	r6, 7
    982a:	33 c0       	rjmp	.+102    	; 0x9892 <_Z12menuProcTimeh+0xe2>
    982c:	80 91 16 19 	lds	r24, 0x1916
    9830:	88 23       	and	r24, r24
    9832:	79 f5       	brne	.+94     	; 0x9892 <_Z12menuProcTimeh+0xe2>
      {
        g_ms100 = 0; // start of next second begins now
    9834:	10 92 35 1f 	sts	0x1F35, r1
        g_unixTime = mktime(&t); // update local timestamp and get wday calculated
    9838:	8a e9       	ldi	r24, 0x9A	; 154
    983a:	99 e1       	ldi	r25, 0x19	; 25
    983c:	0e 94 cc 75 	call	0xeb98	; 0xeb98 <_Z6mktimeP2tm>
    9840:	60 93 3a 12 	sts	0x123A, r22
    9844:	70 93 3b 12 	sts	0x123B, r23
    9848:	80 93 3c 12 	sts	0x123C, r24
    984c:	90 93 3d 12 	sts	0x123D, r25

        RTC rtc;
        rtc.year = t.tm_year + 1900;
    9850:	80 91 9f 19 	lds	r24, 0x199F
    9854:	99 27       	eor	r25, r25
    9856:	87 fd       	sbrc	r24, 7
    9858:	90 95       	com	r25
    985a:	84 59       	subi	r24, 0x94	; 148
    985c:	98 4f       	sbci	r25, 0xF8	; 248
    985e:	9a 83       	std	Y+2, r25	; 0x02
    9860:	89 83       	std	Y+1, r24	; 0x01
        rtc.month = t.tm_mon + 1;
    9862:	80 91 9e 19 	lds	r24, 0x199E
    9866:	8f 5f       	subi	r24, 0xFF	; 255
    9868:	8b 83       	std	Y+3, r24	; 0x03
        rtc.mday = t.tm_mday;
    986a:	80 91 9d 19 	lds	r24, 0x199D
    986e:	8c 83       	std	Y+4, r24	; 0x04
        rtc.hour = t.tm_hour;
    9870:	80 91 9c 19 	lds	r24, 0x199C
    9874:	8e 83       	std	Y+6, r24	; 0x06
        rtc.min = t.tm_min;
    9876:	80 91 9b 19 	lds	r24, 0x199B
    987a:	8f 83       	std	Y+7, r24	; 0x07
        rtc.sec = t.tm_sec;
    987c:	80 91 9a 19 	lds	r24, 0x199A
    9880:	88 87       	std	Y+8, r24	; 0x08
        rtc.wday = t.tm_wday + 1;
    9882:	80 91 a0 19 	lds	r24, 0x19A0
    9886:	8f 5f       	subi	r24, 0xFF	; 255
    9888:	8d 83       	std	Y+5, r24	; 0x05

        rtc_settime(&rtc);
    988a:	ce 01       	movw	r24, r28
    988c:	01 96       	adiw	r24, 0x01	; 1
    988e:	0e 94 9c 77 	call	0xef38	; 0xef38 <_Z11rtc_settimePK3RTC>

      }
      break;
  }

  if (!s_editMode) filltm(&g_unixTime, &t);
    9892:	80 91 16 19 	lds	r24, 0x1916
    9896:	88 23       	and	r24, r24
    9898:	31 f4       	brne	.+12     	; 0x98a6 <_Z12menuProcTimeh+0xf6>
    989a:	8a e3       	ldi	r24, 0x3A	; 58
    989c:	92 e1       	ldi	r25, 0x12	; 18
    989e:	6a e9       	ldi	r22, 0x9A	; 154
    98a0:	79 e1       	ldi	r23, 0x19	; 25
    98a2:	0e 94 d3 75 	call	0xeba6	; 0xeba6 <_Z6filltmPlP2tm>

  lcd_putc(FW*10+2, FH*2, '-'); lcd_putc(FW*13, FH*2, '-');
    98a6:	8e e3       	ldi	r24, 0x3E	; 62
    98a8:	60 e1       	ldi	r22, 0x10	; 16
    98aa:	4d e2       	ldi	r20, 0x2D	; 45
    98ac:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    98b0:	8e e4       	ldi	r24, 0x4E	; 78
    98b2:	60 e1       	ldi	r22, 0x10	; 16
    98b4:	4d e2       	ldi	r20, 0x2D	; 45
    98b6:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
  lcd_putc(FW*10+1, FH*4, ':'); lcd_putc(FW*13-1, FH*4, ':');
    98ba:	8d e3       	ldi	r24, 0x3D	; 61
    98bc:	60 e2       	ldi	r22, 0x20	; 32
    98be:	4a e3       	ldi	r20, 0x3A	; 58
    98c0:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    98c4:	8d e4       	ldi	r24, 0x4D	; 77
    98c6:	60 e2       	ldi	r22, 0x20	; 32
    98c8:	4a e3       	ldi	r20, 0x3A	; 58
    98ca:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    98ce:	10 e1       	ldi	r17, 0x10	; 16
    98d0:	88 24       	eor	r8, r8
    98d2:	99 24       	eor	r9, r9
    98d4:	aa 24       	eor	r10, r10
    98d6:	bb 24       	eor	r11, r11

    lcd_putsnAtt(0, y, PSTR("DATE:""TIME:")+i*5, 5, 0);

    for(uint8_t j=0; j<3;j++) // 3 settings each for date and time (YMD and HMS)
    {
      uint8_t attr = (sub==i && subSub==j) ? (s_editMode ? BLINK : INVERS) : 0;
    98d8:	77 24       	eor	r7, r7
    98da:	67 fc       	sbrc	r6, 7
    98dc:	70 94       	com	r7
  }

  if (!s_editMode) filltm(&g_unixTime, &t);

  lcd_putc(FW*10+2, FH*2, '-'); lcd_putc(FW*13, FH*2, '-');
  lcd_putc(FW*10+1, FH*4, ':'); lcd_putc(FW*13-1, FH*4, ':');
    98de:	ca 2c       	mov	r12, r10

  for(uint8_t i=0; i<2; i++) // 2 rows, date then time
  {
    uint8_t y=(i*2+2)*FH;

    lcd_putsnAtt(0, y, PSTR("DATE:""TIME:")+i*5, 5, 0);
    98e0:	a4 01       	movw	r20, r8
    98e2:	44 51       	subi	r20, 0x14	; 20
    98e4:	58 4f       	sbci	r21, 0xF8	; 248
    98e6:	80 e0       	ldi	r24, 0x00	; 0
    98e8:	61 2f       	mov	r22, r17
    98ea:	25 e0       	ldi	r18, 0x05	; 5
    98ec:	00 e0       	ldi	r16, 0x00	; 0
    98ee:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>

    for(uint8_t j=0; j<3;j++) // 3 settings each for date and time (YMD and HMS)
    98f2:	ff 24       	eor	r15, r15
    {
      uint8_t attr = (sub==i && subSub==j) ? (s_editMode ? BLINK : INVERS) : 0;
    98f4:	6a 14       	cp	r6, r10
    98f6:	7b 04       	cpc	r7, r11
    98f8:	49 f4       	brne	.+18     	; 0x990c <_Z12menuProcTimeh+0x15c>
    98fa:	5f 14       	cp	r5, r15
    98fc:	39 f4       	brne	.+14     	; 0x990c <_Z12menuProcTimeh+0x15c>
    98fe:	80 91 16 19 	lds	r24, 0x1916
    9902:	88 23       	and	r24, r24
    9904:	29 f0       	breq	.+10     	; 0x9910 <_Z12menuProcTimeh+0x160>
    9906:	ee 24       	eor	r14, r14
    9908:	e3 94       	inc	r14
    990a:	04 c0       	rjmp	.+8      	; 0x9914 <_Z12menuProcTimeh+0x164>
    990c:	ee 24       	eor	r14, r14
    990e:	02 c0       	rjmp	.+4      	; 0x9914 <_Z12menuProcTimeh+0x164>
    9910:	e2 e0       	ldi	r30, 0x02	; 2
    9912:	ee 2e       	mov	r14, r30
      switch(i)
    9914:	9c 2d       	mov	r25, r12
    9916:	91 30       	cpi	r25, 0x01	; 1
    9918:	09 f4       	brne	.+2      	; 0x991c <_Z12menuProcTimeh+0x16c>
    991a:	86 c0       	rjmp	.+268    	; 0x9a28 <_Z12menuProcTimeh+0x278>
      {
        case 0: // DATE
          switch(j)
    991c:	8f 2d       	mov	r24, r15
    991e:	81 30       	cpi	r24, 0x01	; 1
    9920:	69 f1       	breq	.+90     	; 0x997c <_Z12menuProcTimeh+0x1cc>
    9922:	82 30       	cpi	r24, 0x02	; 2
    9924:	09 f4       	brne	.+2      	; 0x9928 <_Z12menuProcTimeh+0x178>
    9926:	56 c0       	rjmp	.+172    	; 0x99d4 <_Z12menuProcTimeh+0x224>
          {
            case 0:
              lcd_outdezAtt(FW*10+2, y, at->tm_year+1900, attr);
    9928:	40 91 9f 19 	lds	r20, 0x199F
    992c:	55 27       	eor	r21, r21
    992e:	47 fd       	sbrc	r20, 7
    9930:	50 95       	com	r21
    9932:	44 59       	subi	r20, 0x94	; 148
    9934:	58 4f       	sbci	r21, 0xF8	; 248
    9936:	8e e3       	ldi	r24, 0x3E	; 62
    9938:	61 2f       	mov	r22, r17
    993a:	2e 2d       	mov	r18, r14
    993c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
              if(attr && (s_editMode || p1valdiff)) at->tm_year = checkIncDec( event, at->tm_year, 110, 200, 0);
    9940:	ee 20       	and	r14, r14
    9942:	09 f4       	brne	.+2      	; 0x9946 <_Z12menuProcTimeh+0x196>
    9944:	ef c0       	rjmp	.+478    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9946:	80 91 16 19 	lds	r24, 0x1916
    994a:	88 23       	and	r24, r24
    994c:	39 f4       	brne	.+14     	; 0x995c <_Z12menuProcTimeh+0x1ac>
    994e:	80 91 39 19 	lds	r24, 0x1939
    9952:	90 91 3a 19 	lds	r25, 0x193A
    9956:	00 97       	sbiw	r24, 0x00	; 0
    9958:	09 f4       	brne	.+2      	; 0x995c <_Z12menuProcTimeh+0x1ac>
    995a:	e4 c0       	rjmp	.+456    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    995c:	60 91 9f 19 	lds	r22, 0x199F
    9960:	77 27       	eor	r23, r23
    9962:	67 fd       	sbrc	r22, 7
    9964:	70 95       	com	r23
    9966:	8d 2d       	mov	r24, r13
    9968:	4e e6       	ldi	r20, 0x6E	; 110
    996a:	50 e0       	ldi	r21, 0x00	; 0
    996c:	28 ec       	ldi	r18, 0xC8	; 200
    996e:	30 e0       	ldi	r19, 0x00	; 0
    9970:	00 e0       	ldi	r16, 0x00	; 0
    9972:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9976:	80 93 9f 19 	sts	0x199F, r24
    997a:	d4 c0       	rjmp	.+424    	; 0x9b24 <_Z12menuProcTimeh+0x374>
              break;
            case 1:
              lcd_outdezNAtt(FW*13, y, at->tm_mon+1, attr|LEADING0, 2);
    997c:	40 91 9e 19 	lds	r20, 0x199E
    9980:	55 27       	eor	r21, r21
    9982:	47 fd       	sbrc	r20, 7
    9984:	50 95       	com	r21
    9986:	4f 5f       	subi	r20, 0xFF	; 255
    9988:	5f 4f       	sbci	r21, 0xFF	; 255
    998a:	2e 2d       	mov	r18, r14
    998c:	20 61       	ori	r18, 0x10	; 16
    998e:	8e e4       	ldi	r24, 0x4E	; 78
    9990:	61 2f       	mov	r22, r17
    9992:	02 e0       	ldi	r16, 0x02	; 2
    9994:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
              if(attr && (s_editMode || p1valdiff)) at->tm_mon = checkIncDec( event, at->tm_mon, 0, 11, 0);
    9998:	ee 20       	and	r14, r14
    999a:	09 f4       	brne	.+2      	; 0x999e <_Z12menuProcTimeh+0x1ee>
    999c:	c3 c0       	rjmp	.+390    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    999e:	80 91 16 19 	lds	r24, 0x1916
    99a2:	88 23       	and	r24, r24
    99a4:	39 f4       	brne	.+14     	; 0x99b4 <_Z12menuProcTimeh+0x204>
    99a6:	80 91 39 19 	lds	r24, 0x1939
    99aa:	90 91 3a 19 	lds	r25, 0x193A
    99ae:	00 97       	sbiw	r24, 0x00	; 0
    99b0:	09 f4       	brne	.+2      	; 0x99b4 <_Z12menuProcTimeh+0x204>
    99b2:	b8 c0       	rjmp	.+368    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    99b4:	60 91 9e 19 	lds	r22, 0x199E
    99b8:	77 27       	eor	r23, r23
    99ba:	67 fd       	sbrc	r22, 7
    99bc:	70 95       	com	r23
    99be:	8d 2d       	mov	r24, r13
    99c0:	40 e0       	ldi	r20, 0x00	; 0
    99c2:	50 e0       	ldi	r21, 0x00	; 0
    99c4:	2b e0       	ldi	r18, 0x0B	; 11
    99c6:	30 e0       	ldi	r19, 0x00	; 0
    99c8:	00 e0       	ldi	r16, 0x00	; 0
    99ca:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    99ce:	80 93 9e 19 	sts	0x199E, r24
    99d2:	a8 c0       	rjmp	.+336    	; 0x9b24 <_Z12menuProcTimeh+0x374>
              break;
            case 2:
              lcd_outdezNAtt(FW*16-2, y, at->tm_mday, attr|LEADING0, 2);
    99d4:	40 91 9d 19 	lds	r20, 0x199D
    99d8:	55 27       	eor	r21, r21
    99da:	47 fd       	sbrc	r20, 7
    99dc:	50 95       	com	r21
    99de:	2e 2d       	mov	r18, r14
    99e0:	20 61       	ori	r18, 0x10	; 16
    99e2:	8e e5       	ldi	r24, 0x5E	; 94
    99e4:	61 2f       	mov	r22, r17
    99e6:	02 e0       	ldi	r16, 0x02	; 2
    99e8:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
              if(attr && (s_editMode || p1valdiff)) at->tm_mday = checkIncDec( event, at->tm_mday, 1, 31, 0);
    99ec:	ee 20       	and	r14, r14
    99ee:	09 f4       	brne	.+2      	; 0x99f2 <_Z12menuProcTimeh+0x242>
    99f0:	99 c0       	rjmp	.+306    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    99f2:	80 91 16 19 	lds	r24, 0x1916
    99f6:	88 23       	and	r24, r24
    99f8:	39 f4       	brne	.+14     	; 0x9a08 <_Z12menuProcTimeh+0x258>
    99fa:	80 91 39 19 	lds	r24, 0x1939
    99fe:	90 91 3a 19 	lds	r25, 0x193A
    9a02:	00 97       	sbiw	r24, 0x00	; 0
    9a04:	09 f4       	brne	.+2      	; 0x9a08 <_Z12menuProcTimeh+0x258>
    9a06:	8e c0       	rjmp	.+284    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9a08:	60 91 9d 19 	lds	r22, 0x199D
    9a0c:	77 27       	eor	r23, r23
    9a0e:	67 fd       	sbrc	r22, 7
    9a10:	70 95       	com	r23
    9a12:	8d 2d       	mov	r24, r13
    9a14:	41 e0       	ldi	r20, 0x01	; 1
    9a16:	50 e0       	ldi	r21, 0x00	; 0
    9a18:	2f e1       	ldi	r18, 0x1F	; 31
    9a1a:	30 e0       	ldi	r19, 0x00	; 0
    9a1c:	00 e0       	ldi	r16, 0x00	; 0
    9a1e:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9a22:	80 93 9d 19 	sts	0x199D, r24
    9a26:	7e c0       	rjmp	.+252    	; 0x9b24 <_Z12menuProcTimeh+0x374>
              break;
          }
          break;

        case 1:
          switch (j)
    9a28:	9f 2d       	mov	r25, r15
    9a2a:	91 30       	cpi	r25, 0x01	; 1
    9a2c:	69 f1       	breq	.+90     	; 0x9a88 <_Z12menuProcTimeh+0x2d8>
    9a2e:	2e 2d       	mov	r18, r14
    9a30:	20 61       	ori	r18, 0x10	; 16
    9a32:	92 30       	cpi	r25, 0x02	; 2
    9a34:	09 f4       	brne	.+2      	; 0x9a38 <_Z12menuProcTimeh+0x288>
    9a36:	51 c0       	rjmp	.+162    	; 0x9ada <_Z12menuProcTimeh+0x32a>
          {
            case 0:
              lcd_outdezNAtt(FW*10+1, y, at->tm_hour, attr|LEADING0, 2);
    9a38:	40 91 9c 19 	lds	r20, 0x199C
    9a3c:	55 27       	eor	r21, r21
    9a3e:	47 fd       	sbrc	r20, 7
    9a40:	50 95       	com	r21
    9a42:	8d e3       	ldi	r24, 0x3D	; 61
    9a44:	61 2f       	mov	r22, r17
    9a46:	02 e0       	ldi	r16, 0x02	; 2
    9a48:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
              if(attr && (s_editMode || p1valdiff)) at->tm_hour = checkIncDec( event, at->tm_hour, 0, 23, 0);
    9a4c:	ee 20       	and	r14, r14
    9a4e:	09 f4       	brne	.+2      	; 0x9a52 <_Z12menuProcTimeh+0x2a2>
    9a50:	69 c0       	rjmp	.+210    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9a52:	80 91 16 19 	lds	r24, 0x1916
    9a56:	88 23       	and	r24, r24
    9a58:	39 f4       	brne	.+14     	; 0x9a68 <_Z12menuProcTimeh+0x2b8>
    9a5a:	80 91 39 19 	lds	r24, 0x1939
    9a5e:	90 91 3a 19 	lds	r25, 0x193A
    9a62:	00 97       	sbiw	r24, 0x00	; 0
    9a64:	09 f4       	brne	.+2      	; 0x9a68 <_Z12menuProcTimeh+0x2b8>
    9a66:	5e c0       	rjmp	.+188    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9a68:	60 91 9c 19 	lds	r22, 0x199C
    9a6c:	77 27       	eor	r23, r23
    9a6e:	67 fd       	sbrc	r22, 7
    9a70:	70 95       	com	r23
    9a72:	8d 2d       	mov	r24, r13
    9a74:	40 e0       	ldi	r20, 0x00	; 0
    9a76:	50 e0       	ldi	r21, 0x00	; 0
    9a78:	27 e1       	ldi	r18, 0x17	; 23
    9a7a:	30 e0       	ldi	r19, 0x00	; 0
    9a7c:	00 e0       	ldi	r16, 0x00	; 0
    9a7e:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9a82:	80 93 9c 19 	sts	0x199C, r24
    9a86:	4e c0       	rjmp	.+156    	; 0x9b24 <_Z12menuProcTimeh+0x374>
              break;
            case 1:
              lcd_outdezNAtt(FW*13-1, y, at->tm_min, attr|LEADING0, 2);
    9a88:	40 91 9b 19 	lds	r20, 0x199B
    9a8c:	55 27       	eor	r21, r21
    9a8e:	47 fd       	sbrc	r20, 7
    9a90:	50 95       	com	r21
    9a92:	2e 2d       	mov	r18, r14
    9a94:	20 61       	ori	r18, 0x10	; 16
    9a96:	8d e4       	ldi	r24, 0x4D	; 77
    9a98:	61 2f       	mov	r22, r17
    9a9a:	02 e0       	ldi	r16, 0x02	; 2
    9a9c:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
              if(attr && (s_editMode || p1valdiff)) at->tm_min = checkIncDec( event, at->tm_min, 0, 59, 0);
    9aa0:	ee 20       	and	r14, r14
    9aa2:	09 f4       	brne	.+2      	; 0x9aa6 <_Z12menuProcTimeh+0x2f6>
    9aa4:	3f c0       	rjmp	.+126    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9aa6:	80 91 16 19 	lds	r24, 0x1916
    9aaa:	88 23       	and	r24, r24
    9aac:	31 f4       	brne	.+12     	; 0x9aba <_Z12menuProcTimeh+0x30a>
    9aae:	80 91 39 19 	lds	r24, 0x1939
    9ab2:	90 91 3a 19 	lds	r25, 0x193A
    9ab6:	00 97       	sbiw	r24, 0x00	; 0
    9ab8:	a9 f1       	breq	.+106    	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9aba:	60 91 9b 19 	lds	r22, 0x199B
    9abe:	77 27       	eor	r23, r23
    9ac0:	67 fd       	sbrc	r22, 7
    9ac2:	70 95       	com	r23
    9ac4:	8d 2d       	mov	r24, r13
    9ac6:	40 e0       	ldi	r20, 0x00	; 0
    9ac8:	50 e0       	ldi	r21, 0x00	; 0
    9aca:	2b e3       	ldi	r18, 0x3B	; 59
    9acc:	30 e0       	ldi	r19, 0x00	; 0
    9ace:	00 e0       	ldi	r16, 0x00	; 0
    9ad0:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9ad4:	80 93 9b 19 	sts	0x199B, r24
    9ad8:	25 c0       	rjmp	.+74     	; 0x9b24 <_Z12menuProcTimeh+0x374>
              break;
            case 2:
              lcd_outdezNAtt(FW*16-2, y, at->tm_sec, attr|LEADING0, 2);
    9ada:	40 91 9a 19 	lds	r20, 0x199A
    9ade:	55 27       	eor	r21, r21
    9ae0:	47 fd       	sbrc	r20, 7
    9ae2:	50 95       	com	r21
    9ae4:	8e e5       	ldi	r24, 0x5E	; 94
    9ae6:	61 2f       	mov	r22, r17
    9ae8:	02 e0       	ldi	r16, 0x02	; 2
    9aea:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
              if(attr && (s_editMode || p1valdiff)) at->tm_sec = checkIncDec( event, at->tm_sec, 0, 59, 0);
    9aee:	ee 20       	and	r14, r14
    9af0:	c9 f0       	breq	.+50     	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9af2:	80 91 16 19 	lds	r24, 0x1916
    9af6:	88 23       	and	r24, r24
    9af8:	31 f4       	brne	.+12     	; 0x9b06 <_Z12menuProcTimeh+0x356>
    9afa:	80 91 39 19 	lds	r24, 0x1939
    9afe:	90 91 3a 19 	lds	r25, 0x193A
    9b02:	00 97       	sbiw	r24, 0x00	; 0
    9b04:	79 f0       	breq	.+30     	; 0x9b24 <_Z12menuProcTimeh+0x374>
    9b06:	60 91 9a 19 	lds	r22, 0x199A
    9b0a:	77 27       	eor	r23, r23
    9b0c:	67 fd       	sbrc	r22, 7
    9b0e:	70 95       	com	r23
    9b10:	8d 2d       	mov	r24, r13
    9b12:	40 e0       	ldi	r20, 0x00	; 0
    9b14:	50 e0       	ldi	r21, 0x00	; 0
    9b16:	2b e3       	ldi	r18, 0x3B	; 59
    9b18:	30 e0       	ldi	r19, 0x00	; 0
    9b1a:	00 e0       	ldi	r16, 0x00	; 0
    9b1c:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9b20:	80 93 9a 19 	sts	0x199A, r24
  {
    uint8_t y=(i*2+2)*FH;

    lcd_putsnAtt(0, y, PSTR("DATE:""TIME:")+i*5, 5, 0);

    for(uint8_t j=0; j<3;j++) // 3 settings each for date and time (YMD and HMS)
    9b24:	f3 94       	inc	r15
    9b26:	8f 2d       	mov	r24, r15
    9b28:	83 30       	cpi	r24, 0x03	; 3
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <_Z12menuProcTimeh+0x37e>
    9b2c:	e3 ce       	rjmp	.-570    	; 0x98f4 <_Z12menuProcTimeh+0x144>
    9b2e:	08 94       	sec
    9b30:	a1 1c       	adc	r10, r1
    9b32:	b1 1c       	adc	r11, r1
    9b34:	85 e0       	ldi	r24, 0x05	; 5
    9b36:	90 e0       	ldi	r25, 0x00	; 0
    9b38:	88 0e       	add	r8, r24
    9b3a:	99 1e       	adc	r9, r25
    9b3c:	10 5f       	subi	r17, 0xF0	; 240
  if (!s_editMode) filltm(&g_unixTime, &t);

  lcd_putc(FW*10+2, FH*2, '-'); lcd_putc(FW*13, FH*2, '-');
  lcd_putc(FW*10+1, FH*4, ':'); lcd_putc(FW*13-1, FH*4, ':');

  for(uint8_t i=0; i<2; i++) // 2 rows, date then time
    9b3e:	10 33       	cpi	r17, 0x30	; 48
    9b40:	09 f0       	breq	.+2      	; 0x9b44 <_Z12menuProcTimeh+0x394>
    9b42:	cd ce       	rjmp	.-614    	; 0x98de <_Z12menuProcTimeh+0x12e>
          break;

      }
    }
  }
}
    9b44:	28 96       	adiw	r28, 0x08	; 8
    9b46:	0f b6       	in	r0, 0x3f	; 63
    9b48:	f8 94       	cli
    9b4a:	de bf       	out	0x3e, r29	; 62
    9b4c:	0f be       	out	0x3f, r0	; 63
    9b4e:	cd bf       	out	0x3d, r28	; 61
    9b50:	cf 91       	pop	r28
    9b52:	df 91       	pop	r29
    9b54:	1f 91       	pop	r17
    9b56:	0f 91       	pop	r16
    9b58:	ff 90       	pop	r15
    9b5a:	ef 90       	pop	r14
    9b5c:	df 90       	pop	r13
    9b5e:	cf 90       	pop	r12
    9b60:	bf 90       	pop	r11
    9b62:	af 90       	pop	r10
    9b64:	9f 90       	pop	r9
    9b66:	8f 90       	pop	r8
    9b68:	7f 90       	pop	r7
    9b6a:	6f 90       	pop	r6
    9b6c:	5f 90       	pop	r5
    9b6e:	08 95       	ret

00009b70 <_Z13menuProcSetuph>:
  menuProcDiagAna,
  menuProcDiagCalib
};

void menuProcSetup(uint8_t event)
{
    9b70:	ef 92       	push	r14
    9b72:	ff 92       	push	r15
    9b74:	0f 93       	push	r16
    9b76:	1f 93       	push	r17
    9b78:	df 93       	push	r29
    9b7a:	cf 93       	push	r28
    9b7c:	0f 92       	push	r0
    9b7e:	0f 92       	push	r0
    9b80:	cd b7       	in	r28, 0x3d	; 61
    9b82:	de b7       	in	r29, 0x3e	; 62
    9b84:	18 2f       	mov	r17, r24
#define COUNT_ITEMS 19
#define PARAM_OFS   17*FW

  SIMPLE_MENU("RADIO SETUP", menuTabDiag, e_Setup, COUNT_ITEMS+1);
    9b86:	80 e0       	ldi	r24, 0x00	; 0
    9b88:	60 e0       	ldi	r22, 0x00	; 0
    9b8a:	4d e3       	ldi	r20, 0x3D	; 61
    9b8c:	59 e0       	ldi	r21, 0x09	; 9
    9b8e:	22 e0       	ldi	r18, 0x02	; 2
    9b90:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    9b94:	81 2f       	mov	r24, r17
    9b96:	60 e0       	ldi	r22, 0x00	; 0
    9b98:	4c e3       	ldi	r20, 0x3C	; 60
    9b9a:	57 e0       	ldi	r21, 0x07	; 7
    9b9c:	27 e0       	ldi	r18, 0x07	; 7
    9b9e:	03 e1       	ldi	r16, 0x13	; 19
    9ba0:	0e 94 58 24 	call	0x48b0	; 0x48b0 <_Z12check_simplehhPPFvhEhh>
    9ba4:	88 23       	and	r24, r24
    9ba6:	09 f4       	brne	.+2      	; 0x9baa <_Z13menuProcSetuph+0x3a>
    9ba8:	f6 c3       	rjmp	.+2028   	; 0xa396 <_Z13menuProcSetuph+0x826>

  int8_t  sub    = m_posVert;
    9baa:	e0 90 4b 19 	lds	r14, 0x194B

  // last 2 lines (radio mode) are non break-able
  if(s_pgOfs==COUNT_ITEMS-7) s_pgOfs= sub<(COUNT_ITEMS-4) ? COUNT_ITEMS-8 : COUNT_ITEMS-6;
    9bae:	80 91 15 19 	lds	r24, 0x1915
    9bb2:	8c 30       	cpi	r24, 0x0C	; 12
    9bb4:	41 f4       	brne	.+16     	; 0x9bc6 <_Z13menuProcSetuph+0x56>
    9bb6:	8e 2d       	mov	r24, r14
    9bb8:	8f 30       	cpi	r24, 0x0F	; 15
    9bba:	14 f4       	brge	.+4      	; 0x9bc0 <_Z13menuProcSetuph+0x50>
    9bbc:	8b e0       	ldi	r24, 0x0B	; 11
    9bbe:	01 c0       	rjmp	.+2      	; 0x9bc2 <_Z13menuProcSetuph+0x52>
    9bc0:	8d e0       	ldi	r24, 0x0D	; 13
    9bc2:	80 93 15 19 	sts	0x1915, r24

  uint8_t y = 1*FH;

  uint8_t subN = 1;
  if(s_pgOfs<subN) {
    9bc6:	80 91 15 19 	lds	r24, 0x1915
    9bca:	88 23       	and	r24, r24
    9bcc:	c9 f5       	brne	.+114    	; 0x9c40 <_Z13menuProcSetuph+0xd0>
    lcd_puts_P(0, y,PSTR("Beeper"));
    9bce:	68 e0       	ldi	r22, 0x08	; 8
    9bd0:	46 e3       	ldi	r20, 0x36	; 54
    9bd2:	59 e0       	ldi	r21, 0x09	; 9
    9bd4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(PARAM_OFS - FW, y, PSTR("Quiet""NoKey""Norm ""Long ""xLong")+5*g_eeGeneral.beeperVal,5,(sub==subN ? INVERS:0));
    9bd8:	80 91 81 12 	lds	r24, 0x1281
    9bdc:	86 95       	lsr	r24
    9bde:	86 95       	lsr	r24
    9be0:	86 95       	lsr	r24
    9be2:	87 70       	andi	r24, 0x07	; 7
    9be4:	90 e0       	ldi	r25, 0x00	; 0
    9be6:	ac 01       	movw	r20, r24
    9be8:	44 0f       	add	r20, r20
    9bea:	55 1f       	adc	r21, r21
    9bec:	44 0f       	add	r20, r20
    9bee:	55 1f       	adc	r21, r21
    9bf0:	48 0f       	add	r20, r24
    9bf2:	59 1f       	adc	r21, r25
    9bf4:	44 5e       	subi	r20, 0xE4	; 228
    9bf6:	56 4f       	sbci	r21, 0xF6	; 246
    9bf8:	ee 2d       	mov	r30, r14
    9bfa:	e1 30       	cpi	r30, 0x01	; 1
    9bfc:	11 f4       	brne	.+4      	; 0x9c02 <_Z13menuProcSetuph+0x92>
    9bfe:	02 e0       	ldi	r16, 0x02	; 2
    9c00:	01 c0       	rjmp	.+2      	; 0x9c04 <_Z13menuProcSetuph+0x94>
    9c02:	00 e0       	ldi	r16, 0x00	; 0
    9c04:	80 e6       	ldi	r24, 0x60	; 96
    9c06:	68 e0       	ldi	r22, 0x08	; 8
    9c08:	25 e0       	ldi	r18, 0x05	; 5
    9c0a:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.beeperVal, 0, 4);
    9c0e:	fe 2d       	mov	r31, r14
    9c10:	f1 30       	cpi	r31, 0x01	; 1
    9c12:	c9 f4       	brne	.+50     	; 0x9c46 <_Z13menuProcSetuph+0xd6>
    9c14:	60 91 81 12 	lds	r22, 0x1281
    9c18:	66 95       	lsr	r22
    9c1a:	66 95       	lsr	r22
    9c1c:	66 95       	lsr	r22
    9c1e:	67 70       	andi	r22, 0x07	; 7
    9c20:	81 2f       	mov	r24, r17
    9c22:	40 e0       	ldi	r20, 0x00	; 0
    9c24:	24 e0       	ldi	r18, 0x04	; 4
    9c26:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9c2a:	87 70       	andi	r24, 0x07	; 7
    9c2c:	88 0f       	add	r24, r24
    9c2e:	88 0f       	add	r24, r24
    9c30:	88 0f       	add	r24, r24
    9c32:	90 91 81 12 	lds	r25, 0x1281
    9c36:	97 7c       	andi	r25, 0xC7	; 199
    9c38:	98 2b       	or	r25, r24
    9c3a:	90 93 81 12 	sts	0x1281, r25
    9c3e:	03 c0       	rjmp	.+6      	; 0x9c46 <_Z13menuProcSetuph+0xd6>
  int8_t  sub    = m_posVert;

  // last 2 lines (radio mode) are non break-able
  if(s_pgOfs==COUNT_ITEMS-7) s_pgOfs= sub<(COUNT_ITEMS-4) ? COUNT_ITEMS-8 : COUNT_ITEMS-6;

  uint8_t y = 1*FH;
    9c40:	88 e0       	ldi	r24, 0x08	; 8
    9c42:	f8 2e       	mov	r15, r24
    9c44:	02 c0       	rjmp	.+4      	; 0x9c4a <_Z13menuProcSetuph+0xda>
  uint8_t subN = 1;
  if(s_pgOfs<subN) {
    lcd_puts_P(0, y,PSTR("Beeper"));
    lcd_putsnAtt(PARAM_OFS - FW, y, PSTR("Quiet""NoKey""Norm ""Long ""xLong")+5*g_eeGeneral.beeperVal,5,(sub==subN ? INVERS:0));
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.beeperVal, 0, 4);
    if((y+=FH)>7*FH) return;
    9c46:	00 e1       	ldi	r16, 0x10	; 16
    9c48:	f0 2e       	mov	r15, r16
  }subN++;

  if(s_pgOfs<subN) {
    9c4a:	80 91 15 19 	lds	r24, 0x1915
    9c4e:	82 30       	cpi	r24, 0x02	; 2
    9c50:	18 f5       	brcc	.+70     	; 0x9c98 <_Z13menuProcSetuph+0x128>
    lcd_puts_P(0, y,PSTR("Contrast"));
    9c52:	80 e0       	ldi	r24, 0x00	; 0
    9c54:	6f 2d       	mov	r22, r15
    9c56:	43 e1       	ldi	r20, 0x13	; 19
    9c58:	59 e0       	ldi	r21, 0x09	; 9
    9c5a:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_outdezAtt(PARAM_OFS,y,g_eeGeneral.contrast,(sub==subN ? INVERS : 0)|LEFT);
    9c5e:	40 91 6c 12 	lds	r20, 0x126C
    9c62:	8e 2d       	mov	r24, r14
    9c64:	82 30       	cpi	r24, 0x02	; 2
    9c66:	11 f4       	brne	.+4      	; 0x9c6c <_Z13menuProcSetuph+0xfc>
    9c68:	22 e8       	ldi	r18, 0x82	; 130
    9c6a:	01 c0       	rjmp	.+2      	; 0x9c6e <_Z13menuProcSetuph+0xfe>
    9c6c:	20 e8       	ldi	r18, 0x80	; 128
    9c6e:	86 e6       	ldi	r24, 0x66	; 102
    9c70:	6f 2d       	mov	r22, r15
    9c72:	50 e0       	ldi	r21, 0x00	; 0
    9c74:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    if(sub==subN) {
    9c78:	ee 2d       	mov	r30, r14
    9c7a:	e2 30       	cpi	r30, 0x02	; 2
    9c7c:	59 f4       	brne	.+22     	; 0x9c94 <_Z13menuProcSetuph+0x124>
      CHECK_INCDEC_GENVAR(event, g_eeGeneral.contrast, 10, 45);
    9c7e:	81 2f       	mov	r24, r17
    9c80:	60 91 6c 12 	lds	r22, 0x126C
    9c84:	4a e0       	ldi	r20, 0x0A	; 10
    9c86:	2d e2       	ldi	r18, 0x2D	; 45
    9c88:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9c8c:	80 93 6c 12 	sts	0x126C, r24
      lcdSetRefVolt(g_eeGeneral.contrast);
    9c90:	0e 94 d6 6c 	call	0xd9ac	; 0xd9ac <_Z13lcdSetRefVolth>
    }
    if((y+=FH)>7*FH) return;
    9c94:	f8 e0       	ldi	r31, 0x08	; 8
    9c96:	ff 0e       	add	r15, r31
  }subN++;

  if(s_pgOfs<subN) {
    9c98:	80 91 15 19 	lds	r24, 0x1915
    9c9c:	83 30       	cpi	r24, 0x03	; 3
    9c9e:	08 f5       	brcc	.+66     	; 0x9ce2 <_Z13menuProcSetuph+0x172>
    lcd_puts_P(0, y,PSTR("Battery warning"));
    9ca0:	80 e0       	ldi	r24, 0x00	; 0
    9ca2:	6f 2d       	mov	r22, r15
    9ca4:	43 e0       	ldi	r20, 0x03	; 3
    9ca6:	59 e0       	ldi	r21, 0x09	; 9
    9ca8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    putsVolts(PARAM_OFS, y, g_eeGeneral.vBatWarn, (sub==subN ? INVERS : 0)|LEFT);
    9cac:	40 91 6d 12 	lds	r20, 0x126D
    9cb0:	8e 2d       	mov	r24, r14
    9cb2:	83 30       	cpi	r24, 0x03	; 3
    9cb4:	11 f4       	brne	.+4      	; 0x9cba <_Z13menuProcSetuph+0x14a>
    9cb6:	22 e8       	ldi	r18, 0x82	; 130
    9cb8:	01 c0       	rjmp	.+2      	; 0x9cbc <_Z13menuProcSetuph+0x14c>
    9cba:	20 e8       	ldi	r18, 0x80	; 128
    9cbc:	86 e6       	ldi	r24, 0x66	; 102
    9cbe:	6f 2d       	mov	r22, r15
    9cc0:	50 e0       	ldi	r21, 0x00	; 0
    9cc2:	0e 94 02 6b 	call	0xd604	; 0xd604 <_Z9putsVoltshhjh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.vBatWarn, 40, 120); //4-12V
    9cc6:	ee 2d       	mov	r30, r14
    9cc8:	e3 30       	cpi	r30, 0x03	; 3
    9cca:	49 f4       	brne	.+18     	; 0x9cde <_Z13menuProcSetuph+0x16e>
    9ccc:	81 2f       	mov	r24, r17
    9cce:	60 91 6d 12 	lds	r22, 0x126D
    9cd2:	48 e2       	ldi	r20, 0x28	; 40
    9cd4:	28 e7       	ldi	r18, 0x78	; 120
    9cd6:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9cda:	80 93 6d 12 	sts	0x126D, r24
    if((y+=FH)>7*FH) return;
    9cde:	f8 e0       	ldi	r31, 0x08	; 8
    9ce0:	ff 0e       	add	r15, r31
  }subN++;

  if(s_pgOfs<subN) {
    9ce2:	80 91 15 19 	lds	r24, 0x1915
    9ce6:	84 30       	cpi	r24, 0x04	; 4
    9ce8:	78 f5       	brcc	.+94     	; 0x9d48 <_Z13menuProcSetuph+0x1d8>
    lcd_puts_P(0, y,PSTR("Inactivity alarm"));
    9cea:	80 e0       	ldi	r24, 0x00	; 0
    9cec:	6f 2d       	mov	r22, r15
    9cee:	42 ef       	ldi	r20, 0xF2	; 242
    9cf0:	58 e0       	ldi	r21, 0x08	; 8
    9cf2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_outdezAtt(PARAM_OFS, y, g_eeGeneral.inactivityTimer, (sub==subN ? INVERS : 0)|LEFT);
    9cf6:	40 91 83 12 	lds	r20, 0x1283
    9cfa:	8e 2d       	mov	r24, r14
    9cfc:	84 30       	cpi	r24, 0x04	; 4
    9cfe:	11 f4       	brne	.+4      	; 0x9d04 <_Z13menuProcSetuph+0x194>
    9d00:	22 e8       	ldi	r18, 0x82	; 130
    9d02:	01 c0       	rjmp	.+2      	; 0x9d06 <_Z13menuProcSetuph+0x196>
    9d04:	20 e8       	ldi	r18, 0x80	; 128
    9d06:	86 e6       	ldi	r24, 0x66	; 102
    9d08:	6f 2d       	mov	r22, r15
    9d0a:	50 e0       	ldi	r21, 0x00	; 0
    9d0c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    lcd_putc(lcd_lastPos, y, 'm');
    9d10:	80 91 02 1f 	lds	r24, 0x1F02
    9d14:	6f 2d       	mov	r22, r15
    9d16:	4d e6       	ldi	r20, 0x6D	; 109
    9d18:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    if(sub==subN) g_eeGeneral.inactivityTimer = checkIncDec(event, g_eeGeneral.inactivityTimer, 0, 250, EE_GENERAL); //0..250minutes
    9d1c:	ee 2d       	mov	r30, r14
    9d1e:	e4 30       	cpi	r30, 0x04	; 4
    9d20:	69 f4       	brne	.+26     	; 0x9d3c <_Z13menuProcSetuph+0x1cc>
    9d22:	60 91 83 12 	lds	r22, 0x1283
    9d26:	81 2f       	mov	r24, r17
    9d28:	70 e0       	ldi	r23, 0x00	; 0
    9d2a:	40 e0       	ldi	r20, 0x00	; 0
    9d2c:	50 e0       	ldi	r21, 0x00	; 0
    9d2e:	2a ef       	ldi	r18, 0xFA	; 250
    9d30:	30 e0       	ldi	r19, 0x00	; 0
    9d32:	01 e0       	ldi	r16, 0x01	; 1
    9d34:	0e 94 94 21 	call	0x4328	; 0x4328 <_Z11checkIncDechiiih>
    9d38:	80 93 83 12 	sts	0x1283, r24
    if((y+=FH)>7*FH) return;
    9d3c:	f8 e0       	ldi	r31, 0x08	; 8
    9d3e:	ff 0e       	add	r15, r31
    9d40:	8f 2d       	mov	r24, r15
    9d42:	89 33       	cpi	r24, 0x39	; 57
    9d44:	08 f0       	brcs	.+2      	; 0x9d48 <_Z13menuProcSetuph+0x1d8>
    9d46:	27 c3       	rjmp	.+1614   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9d48:	80 91 15 19 	lds	r24, 0x1915
    9d4c:	85 30       	cpi	r24, 0x05	; 5
    9d4e:	60 f5       	brcc	.+88     	; 0x9da8 <_Z13menuProcSetuph+0x238>
    lcd_puts_P(0, y,PSTR("Filter ADC"));
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	6f 2d       	mov	r22, r15
    9d54:	47 ee       	ldi	r20, 0xE7	; 231
    9d56:	58 e0       	ldi	r21, 0x08	; 8
    9d58:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    lcd_putsnAtt(PARAM_OFS, y, PSTR("SINGOSMPFILT")+4*g_eeGeneral.filterInput,4,(sub==subN ? INVERS:0));
    9d5c:	40 91 85 12 	lds	r20, 0x1285
    9d60:	50 e0       	ldi	r21, 0x00	; 0
    9d62:	44 0f       	add	r20, r20
    9d64:	55 1f       	adc	r21, r21
    9d66:	44 0f       	add	r20, r20
    9d68:	55 1f       	adc	r21, r21
    9d6a:	46 52       	subi	r20, 0x26	; 38
    9d6c:	57 4f       	sbci	r21, 0xF7	; 247
    9d6e:	ee 2d       	mov	r30, r14
    9d70:	e5 30       	cpi	r30, 0x05	; 5
    9d72:	11 f4       	brne	.+4      	; 0x9d78 <_Z13menuProcSetuph+0x208>
    9d74:	02 e0       	ldi	r16, 0x02	; 2
    9d76:	01 c0       	rjmp	.+2      	; 0x9d7a <_Z13menuProcSetuph+0x20a>
    9d78:	00 e0       	ldi	r16, 0x00	; 0
    9d7a:	86 e6       	ldi	r24, 0x66	; 102
    9d7c:	6f 2d       	mov	r22, r15
    9d7e:	24 e0       	ldi	r18, 0x04	; 4
    9d80:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.filterInput, 0, 2);
    9d84:	fe 2d       	mov	r31, r14
    9d86:	f5 30       	cpi	r31, 0x05	; 5
    9d88:	49 f4       	brne	.+18     	; 0x9d9c <_Z13menuProcSetuph+0x22c>
    9d8a:	81 2f       	mov	r24, r17
    9d8c:	60 91 85 12 	lds	r22, 0x1285
    9d90:	40 e0       	ldi	r20, 0x00	; 0
    9d92:	22 e0       	ldi	r18, 0x02	; 2
    9d94:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9d98:	80 93 85 12 	sts	0x1285, r24
    if((y+=FH)>7*FH) return;
    9d9c:	88 e0       	ldi	r24, 0x08	; 8
    9d9e:	f8 0e       	add	r15, r24
    9da0:	ef 2d       	mov	r30, r15
    9da2:	e9 33       	cpi	r30, 0x39	; 57
    9da4:	08 f0       	brcs	.+2      	; 0x9da8 <_Z13menuProcSetuph+0x238>
    9da6:	f7 c2       	rjmp	.+1518   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9da8:	80 91 15 19 	lds	r24, 0x1915
    9dac:	86 30       	cpi	r24, 0x06	; 6
    9dae:	50 f5       	brcc	.+84     	; 0x9e04 <_Z13menuProcSetuph+0x294>
    lcd_puts_P(0, y,PSTR("Throttle reverse"));
    9db0:	80 e0       	ldi	r24, 0x00	; 0
    9db2:	6f 2d       	mov	r22, r15
    9db4:	49 ec       	ldi	r20, 0xC9	; 201
    9db6:	58 e0       	ldi	r21, 0x08	; 8
    9db8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( PARAM_OFS, y, g_eeGeneral.throttleReversed, sub==subN ) ;
    9dbc:	40 91 84 12 	lds	r20, 0x1284
    9dc0:	41 70       	andi	r20, 0x01	; 1
    9dc2:	21 e0       	ldi	r18, 0x01	; 1
    9dc4:	fe 2d       	mov	r31, r14
    9dc6:	f6 30       	cpi	r31, 0x06	; 6
    9dc8:	09 f0       	breq	.+2      	; 0x9dcc <_Z13menuProcSetuph+0x25c>
    9dca:	20 e0       	ldi	r18, 0x00	; 0
    9dcc:	86 e6       	ldi	r24, 0x66	; 102
    9dce:	6f 2d       	mov	r22, r15
    9dd0:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.throttleReversed, 0, 1);
    9dd4:	8e 2d       	mov	r24, r14
    9dd6:	86 30       	cpi	r24, 0x06	; 6
    9dd8:	79 f4       	brne	.+30     	; 0x9df8 <_Z13menuProcSetuph+0x288>
    9dda:	60 91 84 12 	lds	r22, 0x1284
    9dde:	61 70       	andi	r22, 0x01	; 1
    9de0:	81 2f       	mov	r24, r17
    9de2:	40 e0       	ldi	r20, 0x00	; 0
    9de4:	21 e0       	ldi	r18, 0x01	; 1
    9de6:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9dea:	81 70       	andi	r24, 0x01	; 1
    9dec:	90 91 84 12 	lds	r25, 0x1284
    9df0:	9e 7f       	andi	r25, 0xFE	; 254
    9df2:	98 2b       	or	r25, r24
    9df4:	90 93 84 12 	sts	0x1284, r25
    if((y+=FH)>7*FH) return;
    9df8:	e8 e0       	ldi	r30, 0x08	; 8
    9dfa:	fe 0e       	add	r15, r30
    9dfc:	ff 2d       	mov	r31, r15
    9dfe:	f9 33       	cpi	r31, 0x39	; 57
    9e00:	08 f0       	brcs	.+2      	; 0x9e04 <_Z13menuProcSetuph+0x294>
    9e02:	c9 c2       	rjmp	.+1426   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9e04:	80 91 15 19 	lds	r24, 0x1915
    9e08:	87 30       	cpi	r24, 0x07	; 7
    9e0a:	68 f5       	brcc	.+90     	; 0x9e66 <_Z13menuProcSetuph+0x2f6>
    lcd_puts_P(0, y,PSTR("Minute beep"));
    9e0c:	80 e0       	ldi	r24, 0x00	; 0
    9e0e:	6f 2d       	mov	r22, r15
    9e10:	4d eb       	ldi	r20, 0xBD	; 189
    9e12:	58 e0       	ldi	r21, 0x08	; 8
    9e14:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( PARAM_OFS, y, g_eeGeneral.minuteBeep, sub==subN ) ;
    9e18:	40 91 84 12 	lds	r20, 0x1284
    9e1c:	46 95       	lsr	r20
    9e1e:	41 70       	andi	r20, 0x01	; 1
    9e20:	21 e0       	ldi	r18, 0x01	; 1
    9e22:	8e 2d       	mov	r24, r14
    9e24:	87 30       	cpi	r24, 0x07	; 7
    9e26:	09 f0       	breq	.+2      	; 0x9e2a <_Z13menuProcSetuph+0x2ba>
    9e28:	20 e0       	ldi	r18, 0x00	; 0
    9e2a:	86 e6       	ldi	r24, 0x66	; 102
    9e2c:	6f 2d       	mov	r22, r15
    9e2e:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.minuteBeep, 0, 1);
    9e32:	ee 2d       	mov	r30, r14
    9e34:	e7 30       	cpi	r30, 0x07	; 7
    9e36:	89 f4       	brne	.+34     	; 0x9e5a <_Z13menuProcSetuph+0x2ea>
    9e38:	60 91 84 12 	lds	r22, 0x1284
    9e3c:	66 95       	lsr	r22
    9e3e:	61 70       	andi	r22, 0x01	; 1
    9e40:	81 2f       	mov	r24, r17
    9e42:	40 e0       	ldi	r20, 0x00	; 0
    9e44:	21 e0       	ldi	r18, 0x01	; 1
    9e46:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9e4a:	81 70       	andi	r24, 0x01	; 1
    9e4c:	88 0f       	add	r24, r24
    9e4e:	90 91 84 12 	lds	r25, 0x1284
    9e52:	9d 7f       	andi	r25, 0xFD	; 253
    9e54:	98 2b       	or	r25, r24
    9e56:	90 93 84 12 	sts	0x1284, r25
    if((y+=FH)>7*FH) return;
    9e5a:	f8 e0       	ldi	r31, 0x08	; 8
    9e5c:	ff 0e       	add	r15, r31
    9e5e:	8f 2d       	mov	r24, r15
    9e60:	89 33       	cpi	r24, 0x39	; 57
    9e62:	08 f0       	brcs	.+2      	; 0x9e66 <_Z13menuProcSetuph+0x2f6>
    9e64:	98 c2       	rjmp	.+1328   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9e66:	80 91 15 19 	lds	r24, 0x1915
    9e6a:	88 30       	cpi	r24, 0x08	; 8
    9e6c:	80 f5       	brcc	.+96     	; 0x9ece <_Z13menuProcSetuph+0x35e>
    lcd_puts_P(0, y,PSTR("Beep countdown"));
    9e6e:	80 e0       	ldi	r24, 0x00	; 0
    9e70:	6f 2d       	mov	r22, r15
    9e72:	4e ea       	ldi	r20, 0xAE	; 174
    9e74:	58 e0       	ldi	r21, 0x08	; 8
    9e76:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    menu_lcd_onoff( PARAM_OFS, y, g_eeGeneral.preBeep, sub==subN ) ;
    9e7a:	40 91 84 12 	lds	r20, 0x1284
    9e7e:	46 95       	lsr	r20
    9e80:	46 95       	lsr	r20
    9e82:	41 70       	andi	r20, 0x01	; 1
    9e84:	21 e0       	ldi	r18, 0x01	; 1
    9e86:	ee 2d       	mov	r30, r14
    9e88:	e8 30       	cpi	r30, 0x08	; 8
    9e8a:	09 f0       	breq	.+2      	; 0x9e8e <_Z13menuProcSetuph+0x31e>
    9e8c:	20 e0       	ldi	r18, 0x00	; 0
    9e8e:	86 e6       	ldi	r24, 0x66	; 102
    9e90:	6f 2d       	mov	r22, r15
    9e92:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.preBeep, 0, 1);
    9e96:	fe 2d       	mov	r31, r14
    9e98:	f8 30       	cpi	r31, 0x08	; 8
    9e9a:	99 f4       	brne	.+38     	; 0x9ec2 <_Z13menuProcSetuph+0x352>
    9e9c:	60 91 84 12 	lds	r22, 0x1284
    9ea0:	66 95       	lsr	r22
    9ea2:	66 95       	lsr	r22
    9ea4:	61 70       	andi	r22, 0x01	; 1
    9ea6:	81 2f       	mov	r24, r17
    9ea8:	40 e0       	ldi	r20, 0x00	; 0
    9eaa:	21 e0       	ldi	r18, 0x01	; 1
    9eac:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9eb0:	81 70       	andi	r24, 0x01	; 1
    9eb2:	88 0f       	add	r24, r24
    9eb4:	88 0f       	add	r24, r24
    9eb6:	90 91 84 12 	lds	r25, 0x1284
    9eba:	9b 7f       	andi	r25, 0xFB	; 251
    9ebc:	98 2b       	or	r25, r24
    9ebe:	90 93 84 12 	sts	0x1284, r25
    if((y+=FH)>7*FH) return;
    9ec2:	88 e0       	ldi	r24, 0x08	; 8
    9ec4:	f8 0e       	add	r15, r24
    9ec6:	ef 2d       	mov	r30, r15
    9ec8:	e9 33       	cpi	r30, 0x39	; 57
    9eca:	08 f0       	brcs	.+2      	; 0x9ece <_Z13menuProcSetuph+0x35e>
    9ecc:	64 c2       	rjmp	.+1224   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9ece:	80 91 15 19 	lds	r24, 0x1915
    9ed2:	89 30       	cpi	r24, 0x09	; 9
    9ed4:	98 f5       	brcc	.+102    	; 0x9f3c <_Z13menuProcSetuph+0x3cc>
      lcd_puts_P(0, y,PSTR("Flash on beep"));
    9ed6:	80 e0       	ldi	r24, 0x00	; 0
    9ed8:	6f 2d       	mov	r22, r15
    9eda:	40 ea       	ldi	r20, 0xA0	; 160
    9edc:	58 e0       	ldi	r21, 0x08	; 8
    9ede:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, g_eeGeneral.flashBeep, sub==subN ) ;
    9ee2:	40 91 84 12 	lds	r20, 0x1284
    9ee6:	46 95       	lsr	r20
    9ee8:	46 95       	lsr	r20
    9eea:	46 95       	lsr	r20
    9eec:	41 70       	andi	r20, 0x01	; 1
    9eee:	21 e0       	ldi	r18, 0x01	; 1
    9ef0:	fe 2d       	mov	r31, r14
    9ef2:	f9 30       	cpi	r31, 0x09	; 9
    9ef4:	09 f0       	breq	.+2      	; 0x9ef8 <_Z13menuProcSetuph+0x388>
    9ef6:	20 e0       	ldi	r18, 0x00	; 0
    9ef8:	86 e6       	ldi	r24, 0x66	; 102
    9efa:	6f 2d       	mov	r22, r15
    9efc:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.flashBeep, 0, 1);
    9f00:	8e 2d       	mov	r24, r14
    9f02:	89 30       	cpi	r24, 0x09	; 9
    9f04:	a9 f4       	brne	.+42     	; 0x9f30 <_Z13menuProcSetuph+0x3c0>
    9f06:	60 91 84 12 	lds	r22, 0x1284
    9f0a:	66 95       	lsr	r22
    9f0c:	66 95       	lsr	r22
    9f0e:	66 95       	lsr	r22
    9f10:	61 70       	andi	r22, 0x01	; 1
    9f12:	81 2f       	mov	r24, r17
    9f14:	40 e0       	ldi	r20, 0x00	; 0
    9f16:	21 e0       	ldi	r18, 0x01	; 1
    9f18:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9f1c:	81 70       	andi	r24, 0x01	; 1
    9f1e:	88 0f       	add	r24, r24
    9f20:	88 0f       	add	r24, r24
    9f22:	88 0f       	add	r24, r24
    9f24:	90 91 84 12 	lds	r25, 0x1284
    9f28:	97 7f       	andi	r25, 0xF7	; 247
    9f2a:	98 2b       	or	r25, r24
    9f2c:	90 93 84 12 	sts	0x1284, r25
      if((y+=FH)>7*FH) return;
    9f30:	e8 e0       	ldi	r30, 0x08	; 8
    9f32:	fe 0e       	add	r15, r30
    9f34:	ff 2d       	mov	r31, r15
    9f36:	f9 33       	cpi	r31, 0x39	; 57
    9f38:	08 f0       	brcs	.+2      	; 0x9f3c <_Z13menuProcSetuph+0x3cc>
    9f3a:	2d c2       	rjmp	.+1114   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9f3c:	80 91 15 19 	lds	r24, 0x1915
    9f40:	8a 30       	cpi	r24, 0x0A	; 10
    9f42:	20 f5       	brcc	.+72     	; 0x9f8c <_Z13menuProcSetuph+0x41c>
    lcd_puts_P(0, y,PSTR("Light switch"));
    9f44:	80 e0       	ldi	r24, 0x00	; 0
    9f46:	6f 2d       	mov	r22, r15
    9f48:	43 e9       	ldi	r20, 0x93	; 147
    9f4a:	58 e0       	ldi	r21, 0x08	; 8
    9f4c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    putsSwitches(PARAM_OFS,y,g_eeGeneral.lightSw,sub==subN ? INVERS : 0);
    9f50:	40 91 6f 12 	lds	r20, 0x126F
    9f54:	8e 2d       	mov	r24, r14
    9f56:	8a 30       	cpi	r24, 0x0A	; 10
    9f58:	11 f4       	brne	.+4      	; 0x9f5e <_Z13menuProcSetuph+0x3ee>
    9f5a:	22 e0       	ldi	r18, 0x02	; 2
    9f5c:	01 c0       	rjmp	.+2      	; 0x9f60 <_Z13menuProcSetuph+0x3f0>
    9f5e:	20 e0       	ldi	r18, 0x00	; 0
    9f60:	86 e6       	ldi	r24, 0x66	; 102
    9f62:	6f 2d       	mov	r22, r15
    9f64:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.lightSw, -MAX_SWITCH, MAX_SWITCH);
    9f68:	ee 2d       	mov	r30, r14
    9f6a:	ea 30       	cpi	r30, 0x0A	; 10
    9f6c:	49 f4       	brne	.+18     	; 0x9f80 <_Z13menuProcSetuph+0x410>
    9f6e:	81 2f       	mov	r24, r17
    9f70:	60 91 6f 12 	lds	r22, 0x126F
    9f74:	4a ee       	ldi	r20, 0xEA	; 234
    9f76:	26 e1       	ldi	r18, 0x16	; 22
    9f78:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    9f7c:	80 93 6f 12 	sts	0x126F, r24
    if((y+=FH)>7*FH) return;
    9f80:	f8 e0       	ldi	r31, 0x08	; 8
    9f82:	ff 0e       	add	r15, r31
    9f84:	8f 2d       	mov	r24, r15
    9f86:	89 33       	cpi	r24, 0x39	; 57
    9f88:	08 f0       	brcs	.+2      	; 0x9f8c <_Z13menuProcSetuph+0x41c>
    9f8a:	05 c2       	rjmp	.+1034   	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    9f8c:	80 91 15 19 	lds	r24, 0x1915
    9f90:	8b 30       	cpi	r24, 0x0B	; 11
    9f92:	f0 f5       	brcc	.+124    	; 0xa010 <_Z13menuProcSetuph+0x4a0>
    lcd_puts_P(0, y,PSTR("Light off after"));
    9f94:	80 e0       	ldi	r24, 0x00	; 0
    9f96:	6f 2d       	mov	r22, r15
    9f98:	43 e8       	ldi	r20, 0x83	; 131
    9f9a:	58 e0       	ldi	r21, 0x08	; 8
    9f9c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    if(g_eeGeneral.lightAutoOff) {
    9fa0:	80 91 86 12 	lds	r24, 0x1286
    9fa4:	88 23       	and	r24, r24
    9fa6:	a9 f0       	breq	.+42     	; 0x9fd2 <_Z13menuProcSetuph+0x462>
      lcd_outdezAtt(PARAM_OFS, y, g_eeGeneral.lightAutoOff*5,LEFT|(sub==subN ? INVERS : 0));
    9fa8:	45 e0       	ldi	r20, 0x05	; 5
    9faa:	84 9f       	mul	r24, r20
    9fac:	a0 01       	movw	r20, r0
    9fae:	11 24       	eor	r1, r1
    9fb0:	ee 2d       	mov	r30, r14
    9fb2:	eb 30       	cpi	r30, 0x0B	; 11
    9fb4:	11 f4       	brne	.+4      	; 0x9fba <_Z13menuProcSetuph+0x44a>
    9fb6:	22 e8       	ldi	r18, 0x82	; 130
    9fb8:	01 c0       	rjmp	.+2      	; 0x9fbc <_Z13menuProcSetuph+0x44c>
    9fba:	20 e8       	ldi	r18, 0x80	; 128
    9fbc:	86 e6       	ldi	r24, 0x66	; 102
    9fbe:	6f 2d       	mov	r22, r15
    9fc0:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
      lcd_putc(lcd_lastPos, y, 's');
    9fc4:	80 91 02 1f 	lds	r24, 0x1F02
    9fc8:	6f 2d       	mov	r22, r15
    9fca:	43 e7       	ldi	r20, 0x73	; 115
    9fcc:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    9fd0:	0d c0       	rjmp	.+26     	; 0x9fec <_Z13menuProcSetuph+0x47c>
    }
    else
      lcd_putsnAtt(PARAM_OFS, y, PSTR("OFF"),3,(sub==subN ? INVERS:0));
    9fd2:	fe 2d       	mov	r31, r14
    9fd4:	fb 30       	cpi	r31, 0x0B	; 11
    9fd6:	11 f4       	brne	.+4      	; 0x9fdc <_Z13menuProcSetuph+0x46c>
    9fd8:	02 e0       	ldi	r16, 0x02	; 2
    9fda:	01 c0       	rjmp	.+2      	; 0x9fde <_Z13menuProcSetuph+0x46e>
    9fdc:	00 e0       	ldi	r16, 0x00	; 0
    9fde:	86 e6       	ldi	r24, 0x66	; 102
    9fe0:	6f 2d       	mov	r22, r15
    9fe2:	4f e7       	ldi	r20, 0x7F	; 127
    9fe4:	58 e0       	ldi	r21, 0x08	; 8
    9fe6:	23 e0       	ldi	r18, 0x03	; 3
    9fe8:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(sub==subN) CHECK_INCDEC_GENVAR(event, g_eeGeneral.lightAutoOff, 0, 600/5);
    9fec:	8e 2d       	mov	r24, r14
    9fee:	8b 30       	cpi	r24, 0x0B	; 11
    9ff0:	49 f4       	brne	.+18     	; 0xa004 <_Z13menuProcSetuph+0x494>
    9ff2:	81 2f       	mov	r24, r17
    9ff4:	60 91 86 12 	lds	r22, 0x1286
    9ff8:	40 e0       	ldi	r20, 0x00	; 0
    9ffa:	28 e7       	ldi	r18, 0x78	; 120
    9ffc:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    a000:	80 93 86 12 	sts	0x1286, r24
    if((y+=FH)>7*FH) return;
    a004:	e8 e0       	ldi	r30, 0x08	; 8
    a006:	fe 0e       	add	r15, r30
    a008:	ff 2d       	mov	r31, r15
    a00a:	f9 33       	cpi	r31, 0x39	; 57
    a00c:	08 f0       	brcs	.+2      	; 0xa010 <_Z13menuProcSetuph+0x4a0>
    a00e:	c3 c1       	rjmp	.+902    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a010:	80 91 15 19 	lds	r24, 0x1915
    a014:	8c 30       	cpi	r24, 0x0C	; 12
    a016:	78 f5       	brcc	.+94     	; 0xa076 <_Z13menuProcSetuph+0x506>
      uint8_t b = 1-g_eeGeneral.disableSplashScreen;
    a018:	00 91 84 12 	lds	r16, 0x1284
    a01c:	02 95       	swap	r16
    a01e:	0f 70       	andi	r16, 0x0F	; 15
    a020:	00 95       	com	r16
    a022:	01 70       	andi	r16, 0x01	; 1
      lcd_puts_P(0, y,PSTR("Splash screen"));
    a024:	80 e0       	ldi	r24, 0x00	; 0
    a026:	6f 2d       	mov	r22, r15
    a028:	41 e7       	ldi	r20, 0x71	; 113
    a02a:	58 e0       	ldi	r21, 0x08	; 8
    a02c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, b, sub==subN ) ;
    a030:	21 e0       	ldi	r18, 0x01	; 1
    a032:	8e 2d       	mov	r24, r14
    a034:	8c 30       	cpi	r24, 0x0C	; 12
    a036:	09 f0       	breq	.+2      	; 0xa03a <_Z13menuProcSetuph+0x4ca>
    a038:	20 e0       	ldi	r18, 0x00	; 0
    a03a:	86 e6       	ldi	r24, 0x66	; 102
    a03c:	6f 2d       	mov	r22, r15
    a03e:	40 2f       	mov	r20, r16
    a040:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN)
    a044:	ee 2d       	mov	r30, r14
    a046:	ec 30       	cpi	r30, 0x0C	; 12
    a048:	81 f4       	brne	.+32     	; 0xa06a <_Z13menuProcSetuph+0x4fa>
      {
          CHECK_INCDEC_GENVAR(event, b, 0, 1);
    a04a:	81 2f       	mov	r24, r17
    a04c:	60 2f       	mov	r22, r16
    a04e:	40 e0       	ldi	r20, 0x00	; 0
    a050:	21 e0       	ldi	r18, 0x01	; 1
    a052:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
          g_eeGeneral.disableSplashScreen = 1-b;
    a056:	80 95       	com	r24
    a058:	81 70       	andi	r24, 0x01	; 1
    a05a:	82 95       	swap	r24
    a05c:	80 7f       	andi	r24, 0xF0	; 240
    a05e:	90 91 84 12 	lds	r25, 0x1284
    a062:	9f 7e       	andi	r25, 0xEF	; 239
    a064:	98 2b       	or	r25, r24
    a066:	90 93 84 12 	sts	0x1284, r25
      }
      if((y+=FH)>7*FH) return;
    a06a:	f8 e0       	ldi	r31, 0x08	; 8
    a06c:	ff 0e       	add	r15, r31
    a06e:	8f 2d       	mov	r24, r15
    a070:	89 33       	cpi	r24, 0x39	; 57
    a072:	08 f0       	brcs	.+2      	; 0xa076 <_Z13menuProcSetuph+0x506>
    a074:	90 c1       	rjmp	.+800    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a076:	80 91 15 19 	lds	r24, 0x1915
    a07a:	8d 30       	cpi	r24, 0x0D	; 13
    a07c:	58 f5       	brcc	.+86     	; 0xa0d4 <_Z13menuProcSetuph+0x564>
      uint8_t b = 1-g_eeGeneral.disableThrottleWarning;
    a07e:	00 91 81 12 	lds	r16, 0x1281
    a082:	00 95       	com	r16
    a084:	01 70       	andi	r16, 0x01	; 1
      lcd_puts_P(0, y,PSTR("Throttle Warning"));
    a086:	80 e0       	ldi	r24, 0x00	; 0
    a088:	6f 2d       	mov	r22, r15
    a08a:	40 e6       	ldi	r20, 0x60	; 96
    a08c:	58 e0       	ldi	r21, 0x08	; 8
    a08e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, b, sub==subN ) ;
    a092:	21 e0       	ldi	r18, 0x01	; 1
    a094:	ee 2d       	mov	r30, r14
    a096:	ed 30       	cpi	r30, 0x0D	; 13
    a098:	09 f0       	breq	.+2      	; 0xa09c <_Z13menuProcSetuph+0x52c>
    a09a:	20 e0       	ldi	r18, 0x00	; 0
    a09c:	86 e6       	ldi	r24, 0x66	; 102
    a09e:	6f 2d       	mov	r22, r15
    a0a0:	40 2f       	mov	r20, r16
    a0a2:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN)
    a0a6:	fe 2d       	mov	r31, r14
    a0a8:	fd 30       	cpi	r31, 0x0D	; 13
    a0aa:	71 f4       	brne	.+28     	; 0xa0c8 <_Z13menuProcSetuph+0x558>
      {
          CHECK_INCDEC_GENVAR(event, b, 0, 1);
    a0ac:	81 2f       	mov	r24, r17
    a0ae:	60 2f       	mov	r22, r16
    a0b0:	40 e0       	ldi	r20, 0x00	; 0
    a0b2:	21 e0       	ldi	r18, 0x01	; 1
    a0b4:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
          g_eeGeneral.disableThrottleWarning = 1-b;
    a0b8:	80 95       	com	r24
    a0ba:	81 70       	andi	r24, 0x01	; 1
    a0bc:	90 91 81 12 	lds	r25, 0x1281
    a0c0:	9e 7f       	andi	r25, 0xFE	; 254
    a0c2:	98 2b       	or	r25, r24
    a0c4:	90 93 81 12 	sts	0x1281, r25
      }
      if((y+=FH)>7*FH) return;
    a0c8:	88 e0       	ldi	r24, 0x08	; 8
    a0ca:	f8 0e       	add	r15, r24
    a0cc:	ef 2d       	mov	r30, r15
    a0ce:	e9 33       	cpi	r30, 0x39	; 57
    a0d0:	08 f0       	brcs	.+2      	; 0xa0d4 <_Z13menuProcSetuph+0x564>
    a0d2:	61 c1       	rjmp	.+706    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a0d4:	80 91 15 19 	lds	r24, 0x1915
    a0d8:	8e 30       	cpi	r24, 0x0E	; 14
    a0da:	08 f0       	brcs	.+2      	; 0xa0de <_Z13menuProcSetuph+0x56e>
    a0dc:	42 c0       	rjmp	.+132    	; 0xa162 <_Z13menuProcSetuph+0x5f2>
      lcd_puts_P(0, y,PSTR("Switch Warning"));
    a0de:	80 e0       	ldi	r24, 0x00	; 0
    a0e0:	6f 2d       	mov	r22, r15
    a0e2:	41 e5       	ldi	r20, 0x51	; 81
    a0e4:	58 e0       	ldi	r21, 0x08	; 8
    a0e6:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      lcd_putsnAtt(PARAM_OFS, y, PSTR("Down""OFF ""Up  ")+4*(1+g_eeGeneral.switchWarning),4,(sub==subN ? INVERS:0));
    a0ea:	40 91 81 12 	lds	r20, 0x1281
    a0ee:	42 95       	swap	r20
    a0f0:	44 0f       	add	r20, r20
    a0f2:	40 7e       	andi	r20, 0xE0	; 224
    a0f4:	46 fb       	bst	r20, 6
    a0f6:	44 0f       	add	r20, r20
    a0f8:	44 0b       	sbc	r20, r20
    a0fa:	40 f9       	bld	r20, 0
    a0fc:	55 27       	eor	r21, r21
    a0fe:	47 fd       	sbrc	r20, 7
    a100:	50 95       	com	r21
    a102:	44 0f       	add	r20, r20
    a104:	55 1f       	adc	r21, r21
    a106:	44 0f       	add	r20, r20
    a108:	55 1f       	adc	r21, r21
    a10a:	48 5b       	subi	r20, 0xB8	; 184
    a10c:	57 4f       	sbci	r21, 0xF7	; 247
    a10e:	fe 2d       	mov	r31, r14
    a110:	fe 30       	cpi	r31, 0x0E	; 14
    a112:	11 f4       	brne	.+4      	; 0xa118 <_Z13menuProcSetuph+0x5a8>
    a114:	02 e0       	ldi	r16, 0x02	; 2
    a116:	01 c0       	rjmp	.+2      	; 0xa11a <_Z13menuProcSetuph+0x5aa>
    a118:	00 e0       	ldi	r16, 0x00	; 0
    a11a:	86 e6       	ldi	r24, 0x66	; 102
    a11c:	6f 2d       	mov	r22, r15
    a11e:	24 e0       	ldi	r18, 0x04	; 4
    a120:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
      if(sub==subN)
    a124:	8e 2d       	mov	r24, r14
    a126:	8e 30       	cpi	r24, 0x0E	; 14
    a128:	b1 f4       	brne	.+44     	; 0xa156 <_Z13menuProcSetuph+0x5e6>
        CHECK_INCDEC_GENVAR(event, g_eeGeneral.switchWarning, -1, 1);
    a12a:	60 91 81 12 	lds	r22, 0x1281
    a12e:	62 95       	swap	r22
    a130:	66 0f       	add	r22, r22
    a132:	60 7e       	andi	r22, 0xE0	; 224
    a134:	66 fb       	bst	r22, 6
    a136:	66 0f       	add	r22, r22
    a138:	66 0b       	sbc	r22, r22
    a13a:	60 f9       	bld	r22, 0
    a13c:	81 2f       	mov	r24, r17
    a13e:	4f ef       	ldi	r20, 0xFF	; 255
    a140:	21 e0       	ldi	r18, 0x01	; 1
    a142:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    a146:	83 70       	andi	r24, 0x03	; 3
    a148:	88 0f       	add	r24, r24
    a14a:	90 91 81 12 	lds	r25, 0x1281
    a14e:	99 7f       	andi	r25, 0xF9	; 249
    a150:	98 2b       	or	r25, r24
    a152:	90 93 81 12 	sts	0x1281, r25
      if((y+=FH)>7*FH) return;
    a156:	e8 e0       	ldi	r30, 0x08	; 8
    a158:	fe 0e       	add	r15, r30
    a15a:	ff 2d       	mov	r31, r15
    a15c:	f9 33       	cpi	r31, 0x39	; 57
    a15e:	08 f0       	brcs	.+2      	; 0xa162 <_Z13menuProcSetuph+0x5f2>
    a160:	1a c1       	rjmp	.+564    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a162:	80 91 15 19 	lds	r24, 0x1915
    a166:	8f 30       	cpi	r24, 0x0F	; 15
    a168:	98 f5       	brcc	.+102    	; 0xa1d0 <_Z13menuProcSetuph+0x660>
      uint8_t b = 1-g_eeGeneral.disableMemoryWarning;
    a16a:	00 91 81 12 	lds	r16, 0x1281
    a16e:	02 95       	swap	r16
    a170:	06 95       	lsr	r16
    a172:	06 95       	lsr	r16
    a174:	03 70       	andi	r16, 0x03	; 3
    a176:	00 95       	com	r16
    a178:	01 70       	andi	r16, 0x01	; 1
      lcd_puts_P(0, y,PSTR("Memory Warning"));
    a17a:	80 e0       	ldi	r24, 0x00	; 0
    a17c:	6f 2d       	mov	r22, r15
    a17e:	45 e3       	ldi	r20, 0x35	; 53
    a180:	58 e0       	ldi	r21, 0x08	; 8
    a182:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, b, sub==subN ) ;
    a186:	21 e0       	ldi	r18, 0x01	; 1
    a188:	8e 2d       	mov	r24, r14
    a18a:	8f 30       	cpi	r24, 0x0F	; 15
    a18c:	09 f0       	breq	.+2      	; 0xa190 <_Z13menuProcSetuph+0x620>
    a18e:	20 e0       	ldi	r18, 0x00	; 0
    a190:	86 e6       	ldi	r24, 0x66	; 102
    a192:	6f 2d       	mov	r22, r15
    a194:	40 2f       	mov	r20, r16
    a196:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN)
    a19a:	ee 2d       	mov	r30, r14
    a19c:	ef 30       	cpi	r30, 0x0F	; 15
    a19e:	91 f4       	brne	.+36     	; 0xa1c4 <_Z13menuProcSetuph+0x654>
      {
          CHECK_INCDEC_GENVAR(event, b, 0, 1);
    a1a0:	81 2f       	mov	r24, r17
    a1a2:	60 2f       	mov	r22, r16
    a1a4:	40 e0       	ldi	r20, 0x00	; 0
    a1a6:	21 e0       	ldi	r18, 0x01	; 1
    a1a8:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
          g_eeGeneral.disableMemoryWarning = 1-b;
    a1ac:	80 95       	com	r24
    a1ae:	81 70       	andi	r24, 0x01	; 1
    a1b0:	82 95       	swap	r24
    a1b2:	88 0f       	add	r24, r24
    a1b4:	88 0f       	add	r24, r24
    a1b6:	80 7c       	andi	r24, 0xC0	; 192
    a1b8:	90 91 81 12 	lds	r25, 0x1281
    a1bc:	9f 7b       	andi	r25, 0xBF	; 191
    a1be:	98 2b       	or	r25, r24
    a1c0:	90 93 81 12 	sts	0x1281, r25
      }
      if((y+=FH)>7*FH) return;
    a1c4:	f8 e0       	ldi	r31, 0x08	; 8
    a1c6:	ff 0e       	add	r15, r31
    a1c8:	8f 2d       	mov	r24, r15
    a1ca:	89 33       	cpi	r24, 0x39	; 57
    a1cc:	08 f0       	brcs	.+2      	; 0xa1d0 <_Z13menuProcSetuph+0x660>
    a1ce:	e3 c0       	rjmp	.+454    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a1d0:	80 91 15 19 	lds	r24, 0x1915
    a1d4:	80 31       	cpi	r24, 0x10	; 16
    a1d6:	80 f5       	brcc	.+96     	; 0xa238 <_Z13menuProcSetuph+0x6c8>
      uint8_t b = 1-g_eeGeneral.disableAlarmWarning;
    a1d8:	80 91 81 12 	lds	r24, 0x1281
    a1dc:	88 1f       	adc	r24, r24
    a1de:	88 27       	eor	r24, r24
    a1e0:	88 1f       	adc	r24, r24
    a1e2:	01 e0       	ldi	r16, 0x01	; 1
    a1e4:	08 1b       	sub	r16, r24
      lcd_puts_P(0, y,PSTR("Alarm Warning"));
    a1e6:	80 e0       	ldi	r24, 0x00	; 0
    a1e8:	6f 2d       	mov	r22, r15
    a1ea:	47 e2       	ldi	r20, 0x27	; 39
    a1ec:	58 e0       	ldi	r21, 0x08	; 8
    a1ee:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, b, sub==subN ) ;
    a1f2:	21 e0       	ldi	r18, 0x01	; 1
    a1f4:	ee 2d       	mov	r30, r14
    a1f6:	e0 31       	cpi	r30, 0x10	; 16
    a1f8:	09 f0       	breq	.+2      	; 0xa1fc <_Z13menuProcSetuph+0x68c>
    a1fa:	20 e0       	ldi	r18, 0x00	; 0
    a1fc:	86 e6       	ldi	r24, 0x66	; 102
    a1fe:	6f 2d       	mov	r22, r15
    a200:	40 2f       	mov	r20, r16
    a202:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN)
    a206:	fe 2d       	mov	r31, r14
    a208:	f0 31       	cpi	r31, 0x10	; 16
    a20a:	81 f4       	brne	.+32     	; 0xa22c <_Z13menuProcSetuph+0x6bc>
      {
          CHECK_INCDEC_GENVAR(event, b, 0, 1);
    a20c:	81 2f       	mov	r24, r17
    a20e:	60 2f       	mov	r22, r16
    a210:	40 e0       	ldi	r20, 0x00	; 0
    a212:	21 e0       	ldi	r18, 0x01	; 1
    a214:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
          g_eeGeneral.disableAlarmWarning = 1-b;
    a218:	80 95       	com	r24
    a21a:	87 95       	ror	r24
    a21c:	88 27       	eor	r24, r24
    a21e:	87 95       	ror	r24
    a220:	90 91 81 12 	lds	r25, 0x1281
    a224:	9f 77       	andi	r25, 0x7F	; 127
    a226:	98 2b       	or	r25, r24
    a228:	90 93 81 12 	sts	0x1281, r25
      }
      if((y+=FH)>7*FH) return;
    a22c:	88 e0       	ldi	r24, 0x08	; 8
    a22e:	f8 0e       	add	r15, r24
    a230:	ef 2d       	mov	r30, r15
    a232:	e9 33       	cpi	r30, 0x39	; 57
    a234:	08 f0       	brcs	.+2      	; 0xa238 <_Z13menuProcSetuph+0x6c8>
    a236:	af c0       	rjmp	.+350    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a238:	80 91 15 19 	lds	r24, 0x1915
    a23c:	81 31       	cpi	r24, 0x11	; 17
    a23e:	70 f5       	brcc	.+92     	; 0xa29c <_Z13menuProcSetuph+0x72c>
      uint8_t b = g_eeGeneral.enableTelemetryAlarm;
    a240:	00 91 84 12 	lds	r16, 0x1284
    a244:	02 95       	swap	r16
    a246:	06 95       	lsr	r16
    a248:	01 70       	andi	r16, 0x01	; 1
      lcd_puts_P(0, y,PSTR("NO DATA Alarm"));
    a24a:	80 e0       	ldi	r24, 0x00	; 0
    a24c:	6f 2d       	mov	r22, r15
    a24e:	49 e1       	ldi	r20, 0x19	; 25
    a250:	58 e0       	ldi	r21, 0x08	; 8
    a252:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      menu_lcd_onoff( PARAM_OFS, y, b, sub==subN ) ;
    a256:	21 e0       	ldi	r18, 0x01	; 1
    a258:	fe 2d       	mov	r31, r14
    a25a:	f1 31       	cpi	r31, 0x11	; 17
    a25c:	09 f0       	breq	.+2      	; 0xa260 <_Z13menuProcSetuph+0x6f0>
    a25e:	20 e0       	ldi	r18, 0x00	; 0
    a260:	86 e6       	ldi	r24, 0x66	; 102
    a262:	6f 2d       	mov	r22, r15
    a264:	40 2f       	mov	r20, r16
    a266:	0e 94 4a 21 	call	0x4294	; 0x4294 <_Z14menu_lcd_onoffhhhh>
      if(sub==subN)
    a26a:	8e 2d       	mov	r24, r14
    a26c:	81 31       	cpi	r24, 0x11	; 17
    a26e:	81 f4       	brne	.+32     	; 0xa290 <_Z13menuProcSetuph+0x720>
      {
          CHECK_INCDEC_GENVAR(event, b, 0, 1);
    a270:	81 2f       	mov	r24, r17
    a272:	60 2f       	mov	r22, r16
    a274:	40 e0       	ldi	r20, 0x00	; 0
    a276:	21 e0       	ldi	r18, 0x01	; 1
    a278:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
          g_eeGeneral.enableTelemetryAlarm = b;
    a27c:	81 70       	andi	r24, 0x01	; 1
    a27e:	82 95       	swap	r24
    a280:	88 0f       	add	r24, r24
    a282:	80 7e       	andi	r24, 0xE0	; 224
    a284:	90 91 84 12 	lds	r25, 0x1284
    a288:	9f 7d       	andi	r25, 0xDF	; 223
    a28a:	98 2b       	or	r25, r24
    a28c:	90 93 84 12 	sts	0x1284, r25
      }
      if((y+=FH)>7*FH) return;
    a290:	e8 e0       	ldi	r30, 0x08	; 8
    a292:	fe 0e       	add	r15, r30
    a294:	ff 2d       	mov	r31, r15
    a296:	f9 33       	cpi	r31, 0x39	; 57
    a298:	08 f0       	brcs	.+2      	; 0xa29c <_Z13menuProcSetuph+0x72c>
    a29a:	7d c0       	rjmp	.+250    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a29c:	80 91 15 19 	lds	r24, 0x1915
    a2a0:	82 31       	cpi	r24, 0x12	; 18
    a2a2:	68 f5       	brcc	.+90     	; 0xa2fe <_Z13menuProcSetuph+0x78e>
      uint8_t attr = sub==subN?INVERS:0;
    a2a4:	8e 2d       	mov	r24, r14
    a2a6:	82 31       	cpi	r24, 0x12	; 18
    a2a8:	11 f4       	brne	.+4      	; 0xa2ae <_Z13menuProcSetuph+0x73e>
    a2aa:	02 e0       	ldi	r16, 0x02	; 2
    a2ac:	01 c0       	rjmp	.+2      	; 0xa2b0 <_Z13menuProcSetuph+0x740>
    a2ae:	00 e0       	ldi	r16, 0x00	; 0
      lcd_puts_P(0, y,PSTR("Rx Channel Ord"));//   RAET->AETR
    a2b0:	80 e0       	ldi	r24, 0x00	; 0
    a2b2:	6f 2d       	mov	r22, r15
    a2b4:	4a e0       	ldi	r20, 0x0A	; 10
    a2b6:	58 e0       	ldi	r21, 0x08	; 8
    a2b8:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    a2bc:	36 e6       	ldi	r19, 0x66	; 102
      for (uint8_t i=1; i<=4; i++)
    a2be:	91 e0       	ldi	r25, 0x01	; 1
        putsChnLetter((16+i)*FW, y, i, attr);
    a2c0:	83 2f       	mov	r24, r19
    a2c2:	6f 2d       	mov	r22, r15
    a2c4:	49 2f       	mov	r20, r25
    a2c6:	20 2f       	mov	r18, r16
    a2c8:	39 83       	std	Y+1, r19	; 0x01
    a2ca:	9a 83       	std	Y+2, r25	; 0x02
    a2cc:	0e 94 7e 6b 	call	0xd6fc	; 0xd6fc <_Z13putsChnLetterhhhh>
  }subN++;

  if(s_pgOfs<subN) {
      uint8_t attr = sub==subN?INVERS:0;
      lcd_puts_P(0, y,PSTR("Rx Channel Ord"));//   RAET->AETR
      for (uint8_t i=1; i<=4; i++)
    a2d0:	9a 81       	ldd	r25, Y+2	; 0x02
    a2d2:	9f 5f       	subi	r25, 0xFF	; 255
    a2d4:	39 81       	ldd	r19, Y+1	; 0x01
    a2d6:	3a 5f       	subi	r19, 0xFA	; 250
    a2d8:	95 30       	cpi	r25, 0x05	; 5
    a2da:	91 f7       	brne	.-28     	; 0xa2c0 <_Z13menuProcSetuph+0x750>
        putsChnLetter((16+i)*FW, y, i, attr);
      if(attr) CHECK_INCDEC_GENVAR(event, g_eeGeneral.templateSetup, 0, 23);
    a2dc:	00 23       	and	r16, r16
    a2de:	49 f0       	breq	.+18     	; 0xa2f2 <_Z13menuProcSetuph+0x782>
    a2e0:	81 2f       	mov	r24, r17
    a2e2:	60 91 87 12 	lds	r22, 0x1287
    a2e6:	40 e0       	ldi	r20, 0x00	; 0
    a2e8:	27 e1       	ldi	r18, 0x17	; 23
    a2ea:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    a2ee:	80 93 87 12 	sts	0x1287, r24
      if((y+=FH)>7*FH) return;
    a2f2:	e8 e0       	ldi	r30, 0x08	; 8
    a2f4:	fe 0e       	add	r15, r30
    a2f6:	ff 2d       	mov	r31, r15
    a2f8:	f9 33       	cpi	r31, 0x39	; 57
    a2fa:	08 f0       	brcs	.+2      	; 0xa2fe <_Z13menuProcSetuph+0x78e>
    a2fc:	4c c0       	rjmp	.+152    	; 0xa396 <_Z13menuProcSetuph+0x826>
  }subN++;

  if(s_pgOfs<subN) {
    a2fe:	80 91 15 19 	lds	r24, 0x1915
    a302:	83 31       	cpi	r24, 0x13	; 19
    a304:	08 f0       	brcs	.+2      	; 0xa308 <_Z13menuProcSetuph+0x798>
    a306:	47 c0       	rjmp	.+142    	; 0xa396 <_Z13menuProcSetuph+0x826>
    lcd_puts_P( 1*FW, y, PSTR("Mode"));//sub==3?INVERS:0);
    a308:	86 e0       	ldi	r24, 0x06	; 6
    a30a:	6f 2d       	mov	r22, r15
    a30c:	45 e0       	ldi	r20, 0x05	; 5
    a30e:	58 e0       	ldi	r21, 0x08	; 8
    a310:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
    if(y<7*FH) {for(uint8_t i=0; i<4; i++) lcd_img((6+4*i)*FW, y, sticks,i,0); }
    a314:	8f 2d       	mov	r24, r15
    a316:	88 33       	cpi	r24, 0x38	; 56
    a318:	90 f4       	brcc	.+36     	; 0xa33e <_Z13menuProcSetuph+0x7ce>
    a31a:	34 e2       	ldi	r19, 0x24	; 36
    a31c:	90 e0       	ldi	r25, 0x00	; 0
    a31e:	83 2f       	mov	r24, r19
    a320:	6f 2d       	mov	r22, r15
    a322:	42 ef       	ldi	r20, 0xF2	; 242
    a324:	56 e0       	ldi	r21, 0x06	; 6
    a326:	29 2f       	mov	r18, r25
    a328:	00 e0       	ldi	r16, 0x00	; 0
    a32a:	39 83       	std	Y+1, r19	; 0x01
    a32c:	9a 83       	std	Y+2, r25	; 0x02
    a32e:	0e 94 63 66 	call	0xccc6	; 0xccc6 <_Z7lcd_imghhPKhhh>
    a332:	9a 81       	ldd	r25, Y+2	; 0x02
    a334:	9f 5f       	subi	r25, 0xFF	; 255
    a336:	39 81       	ldd	r19, Y+1	; 0x01
    a338:	38 5e       	subi	r19, 0xE8	; 232
    a33a:	94 30       	cpi	r25, 0x04	; 4
    a33c:	81 f7       	brne	.-32     	; 0xa31e <_Z13menuProcSetuph+0x7ae>
    if((y+=FH)>7*FH) return;
    a33e:	e8 e0       	ldi	r30, 0x08	; 8
    a340:	fe 0e       	add	r15, r30
    a342:	ff 2d       	mov	r31, r15
    a344:	f9 33       	cpi	r31, 0x39	; 57
    a346:	38 f5       	brcc	.+78     	; 0xa396 <_Z13menuProcSetuph+0x826>

    lcd_putcAtt( 3*FW, y, '1'+g_eeGeneral.stickMode,sub==subN?INVERS:0);
    a348:	40 91 82 12 	lds	r20, 0x1282
    a34c:	4f 5c       	subi	r20, 0xCF	; 207
    a34e:	8e 2d       	mov	r24, r14
    a350:	83 31       	cpi	r24, 0x13	; 19
    a352:	11 f4       	brne	.+4      	; 0xa358 <_Z13menuProcSetuph+0x7e8>
    a354:	22 e0       	ldi	r18, 0x02	; 2
    a356:	01 c0       	rjmp	.+2      	; 0xa35a <_Z13menuProcSetuph+0x7ea>
    a358:	20 e0       	ldi	r18, 0x00	; 0
    a35a:	82 e1       	ldi	r24, 0x12	; 18
    a35c:	6f 2d       	mov	r22, r15
    a35e:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    a362:	94 e2       	ldi	r25, 0x24	; 36
    for(uint8_t i=0; i<4; i++) putsChnRaw( (6+4*i)*FW, y,i+1,0);//sub==3?INVERS:0);
    a364:	00 e0       	ldi	r16, 0x00	; 0
    a366:	0f 5f       	subi	r16, 0xFF	; 255
    a368:	89 2f       	mov	r24, r25
    a36a:	6f 2d       	mov	r22, r15
    a36c:	40 2f       	mov	r20, r16
    a36e:	20 e0       	ldi	r18, 0x00	; 0
    a370:	9a 83       	std	Y+2, r25	; 0x02
    a372:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
    a376:	9a 81       	ldd	r25, Y+2	; 0x02
    a378:	98 5e       	subi	r25, 0xE8	; 232
    a37a:	04 30       	cpi	r16, 0x04	; 4
    a37c:	a1 f7       	brne	.-24     	; 0xa366 <_Z13menuProcSetuph+0x7f6>

    if(sub==subN) CHECK_INCDEC_GENVAR(event,g_eeGeneral.stickMode,0,3);
    a37e:	ee 2d       	mov	r30, r14
    a380:	e3 31       	cpi	r30, 0x13	; 19
    a382:	49 f4       	brne	.+18     	; 0xa396 <_Z13menuProcSetuph+0x826>
    a384:	81 2f       	mov	r24, r17
    a386:	60 91 82 12 	lds	r22, 0x1282
    a38a:	40 e0       	ldi	r20, 0x00	; 0
    a38c:	23 e0       	ldi	r18, 0x03	; 3
    a38e:	0e 94 75 22 	call	0x44ea	; 0x44ea <_Z14checkIncDecGenhaaa>
    a392:	80 93 82 12 	sts	0x1282, r24
    if((y+=FH)>7*FH) return;
  }
}
    a396:	0f 90       	pop	r0
    a398:	0f 90       	pop	r0
    a39a:	cf 91       	pop	r28
    a39c:	df 91       	pop	r29
    a39e:	1f 91       	pop	r17
    a3a0:	0f 91       	pop	r16
    a3a2:	ff 90       	pop	r15
    a3a4:	ef 90       	pop	r14
    a3a6:	08 95       	ret

0000a3a8 <_Z10lcd_squarehhhh>:
extern void lcd_vline(uint8_t x, int8_t y, int8_t h);
extern void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat);

extern void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat=0xff, uint8_t att=0);
extern void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t att=0);
inline void lcd_square(uint8_t x, uint8_t y, uint8_t w, uint8_t att=0) { lcd_rect(x, y, w, w, 0xff, att); }
    a3a8:	ef 92       	push	r14
    a3aa:	0f 93       	push	r16
    a3ac:	94 2f       	mov	r25, r20
    a3ae:	e2 2e       	mov	r14, r18
    a3b0:	29 2f       	mov	r18, r25
    a3b2:	0f ef       	ldi	r16, 0xFF	; 255
    a3b4:	0e 94 49 6a 	call	0xd492	; 0xd492 <_Z8lcd_recthhhhhh>
    a3b8:	0f 91       	pop	r16
    a3ba:	ef 90       	pop	r14
    a3bc:	08 95       	ret
extern void moveTrimsToOffsets(); // move state of 3 primary trims to offsets

extern uint16_t active_functions;
inline bool isFunctionActive(uint8_t func)
{
  return active_functions & (1 << (func-1));
    a3be:	90 e0       	ldi	r25, 0x00	; 0
    a3c0:	01 97       	sbiw	r24, 0x01	; 1
    a3c2:	21 e0       	ldi	r18, 0x01	; 1
    a3c4:	30 e0       	ldi	r19, 0x00	; 0
    a3c6:	02 c0       	rjmp	.+4      	; 0xa3cc <_Z10lcd_squarehhhh+0x24>
    a3c8:	22 0f       	add	r18, r18
    a3ca:	33 1f       	adc	r19, r19
    a3cc:	8a 95       	dec	r24
    a3ce:	e2 f7       	brpl	.-8      	; 0xa3c8 <_Z10lcd_squarehhhh+0x20>
    a3d0:	80 91 7c 18 	lds	r24, 0x187C
    a3d4:	90 91 7d 18 	lds	r25, 0x187D
    a3d8:	28 23       	and	r18, r24
    a3da:	39 23       	and	r19, r25
    a3dc:	81 e0       	ldi	r24, 0x01	; 1
    a3de:	21 15       	cp	r18, r1
    a3e0:	31 05       	cpc	r19, r1
    a3e2:	09 f4       	brne	.+2      	; 0xa3e6 <_Z10lcd_squarehhhh+0x3e>
    a3e4:	80 e0       	ldi	r24, 0x00	; 0
}
    a3e6:	08 95       	ret

0000a3e8 <_Z11lastPopMenuv>:
/// return to last menu in menustack
void popMenu();
///deliver address of last menu which was popped from
inline MenuFuncP lastPopMenu()
{
  return g_menuStack[g_menuStackPtr+1];
    a3e8:	e0 91 4a 19 	lds	r30, 0x194A
    a3ec:	f0 e0       	ldi	r31, 0x00	; 0
    a3ee:	ee 0f       	add	r30, r30
    a3f0:	ff 1f       	adc	r31, r31
    a3f2:	e2 5c       	subi	r30, 0xC2	; 194
    a3f4:	f6 4e       	sbci	r31, 0xE6	; 230
}
    a3f6:	80 81       	ld	r24, Z
    a3f8:	91 81       	ldd	r25, Z+1	; 0x01
    a3fa:	08 95       	ret

0000a3fc <_Z19doMainScreenGrphicsv>:
#define LBOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)
#define RBOX_CENTERX  (3*SCREEN_WIDTH/4 - 10)
#define RBOX_CENTERY  (SCREEN_HEIGHT-9-BOX_WIDTH/2)

void doMainScreenGrphics()
{
    a3fc:	af 92       	push	r10
    a3fe:	bf 92       	push	r11
    a400:	cf 92       	push	r12
    a402:	df 92       	push	r13
    a404:	ef 92       	push	r14
    a406:	ff 92       	push	r15
    a408:	0f 93       	push	r16
    a40a:	1f 93       	push	r17
    a40c:	cf 93       	push	r28
    a40e:	df 93       	push	r29
  lcd_square(LBOX_CENTERX-BOX_WIDTH/2, LBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);
    a410:	8f e1       	ldi	r24, 0x1F	; 31
    a412:	61 e2       	ldi	r22, 0x21	; 33
    a414:	47 e1       	ldi	r20, 0x17	; 23
    a416:	20 e0       	ldi	r18, 0x00	; 0
    a418:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <_Z10lcd_squarehhhh>
  lcd_square(RBOX_CENTERX-BOX_WIDTH/2, RBOX_CENTERY-BOX_WIDTH/2, BOX_WIDTH);
    a41c:	8b e4       	ldi	r24, 0x4B	; 75
    a41e:	61 e2       	ldi	r22, 0x21	; 33
    a420:	47 e1       	ldi	r20, 0x17	; 23
    a422:	20 e0       	ldi	r18, 0x00	; 0
    a424:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <_Z10lcd_squarehhhh>

  DO_CROSS(LBOX_CENTERX,LBOX_CENTERY,3)
    a428:	8a e2       	ldi	r24, 0x2A	; 42
    a42a:	6b e2       	ldi	r22, 0x2B	; 43
    a42c:	43 e0       	ldi	r20, 0x03	; 3
    a42e:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    a432:	89 e2       	ldi	r24, 0x29	; 41
    a434:	6c e2       	ldi	r22, 0x2C	; 44
    a436:	43 e0       	ldi	r20, 0x03	; 3
    a438:	20 e0       	ldi	r18, 0x00	; 0
    a43a:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
  DO_CROSS(RBOX_CENTERX,RBOX_CENTERY,3)
    a43e:	86 e5       	ldi	r24, 0x56	; 86
    a440:	6b e2       	ldi	r22, 0x2B	; 43
    a442:	43 e0       	ldi	r20, 0x03	; 3
    a444:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    a448:	85 e5       	ldi	r24, 0x55	; 85
    a44a:	6c e2       	ldi	r22, 0x2C	; 44
    a44c:	43 e0       	ldi	r20, 0x03	; 3
    a44e:	20 e0       	ldi	r18, 0x00	; 0
    a450:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>

  lcd_square(LBOX_CENTERX+(calibratedStick[0]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, LBOX_CENTERY-(calibratedStick[1]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH);
    a454:	80 91 e7 18 	lds	r24, 0x18E7
    a458:	90 91 e8 18 	lds	r25, 0x18E8
    a45c:	9c 01       	movw	r18, r24
    a45e:	22 0f       	add	r18, r18
    a460:	33 1f       	adc	r19, r19
    a462:	c9 01       	movw	r24, r18
    a464:	b3 e0       	ldi	r27, 0x03	; 3
    a466:	88 0f       	add	r24, r24
    a468:	99 1f       	adc	r25, r25
    a46a:	ba 95       	dec	r27
    a46c:	e1 f7       	brne	.-8      	; 0xa466 <_Z19doMainScreenGrphicsv+0x6a>
    a46e:	82 0f       	add	r24, r18
    a470:	93 1f       	adc	r25, r19
    a472:	c0 e0       	ldi	r28, 0x00	; 0
    a474:	d8 e0       	ldi	r29, 0x08	; 8
    a476:	be 01       	movw	r22, r28
    a478:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a47c:	46 2f       	mov	r20, r22
    a47e:	20 91 e9 18 	lds	r18, 0x18E9
    a482:	30 91 ea 18 	lds	r19, 0x18EA
    a486:	22 0f       	add	r18, r18
    a488:	33 1f       	adc	r19, r19
    a48a:	c9 01       	movw	r24, r18
    a48c:	f3 e0       	ldi	r31, 0x03	; 3
    a48e:	88 0f       	add	r24, r24
    a490:	99 1f       	adc	r25, r25
    a492:	fa 95       	dec	r31
    a494:	e1 f7       	brne	.-8      	; 0xa48e <_Z19doMainScreenGrphicsv+0x92>
    a496:	82 0f       	add	r24, r18
    a498:	93 1f       	adc	r25, r19
    a49a:	be 01       	movw	r22, r28
    a49c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a4a0:	9b 01       	movw	r18, r22
    a4a2:	30 95       	com	r19
    a4a4:	21 95       	neg	r18
    a4a6:	3f 4f       	sbci	r19, 0xFF	; 255
    a4a8:	62 2f       	mov	r22, r18
    a4aa:	66 5d       	subi	r22, 0xD6	; 214
    a4ac:	84 2f       	mov	r24, r20
    a4ae:	88 5d       	subi	r24, 0xD8	; 216
    a4b0:	45 e0       	ldi	r20, 0x05	; 5
    a4b2:	20 e0       	ldi	r18, 0x00	; 0
    a4b4:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <_Z10lcd_squarehhhh>
  lcd_square(RBOX_CENTERX+(calibratedStick[3]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, RBOX_CENTERY-(calibratedStick[2]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH);
    a4b8:	80 91 ed 18 	lds	r24, 0x18ED
    a4bc:	90 91 ee 18 	lds	r25, 0x18EE
    a4c0:	9c 01       	movw	r18, r24
    a4c2:	22 0f       	add	r18, r18
    a4c4:	33 1f       	adc	r19, r19
    a4c6:	c9 01       	movw	r24, r18
    a4c8:	73 e0       	ldi	r23, 0x03	; 3
    a4ca:	88 0f       	add	r24, r24
    a4cc:	99 1f       	adc	r25, r25
    a4ce:	7a 95       	dec	r23
    a4d0:	e1 f7       	brne	.-8      	; 0xa4ca <_Z19doMainScreenGrphicsv+0xce>
    a4d2:	82 0f       	add	r24, r18
    a4d4:	93 1f       	adc	r25, r19
    a4d6:	be 01       	movw	r22, r28
    a4d8:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a4dc:	46 2f       	mov	r20, r22
    a4de:	20 91 eb 18 	lds	r18, 0x18EB
    a4e2:	30 91 ec 18 	lds	r19, 0x18EC
    a4e6:	22 0f       	add	r18, r18
    a4e8:	33 1f       	adc	r19, r19
    a4ea:	c9 01       	movw	r24, r18
    a4ec:	53 e0       	ldi	r21, 0x03	; 3
    a4ee:	88 0f       	add	r24, r24
    a4f0:	99 1f       	adc	r25, r25
    a4f2:	5a 95       	dec	r21
    a4f4:	e1 f7       	brne	.-8      	; 0xa4ee <_Z19doMainScreenGrphicsv+0xf2>
    a4f6:	82 0f       	add	r24, r18
    a4f8:	93 1f       	adc	r25, r19
    a4fa:	be 01       	movw	r22, r28
    a4fc:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a500:	9b 01       	movw	r18, r22
    a502:	30 95       	com	r19
    a504:	21 95       	neg	r18
    a506:	3f 4f       	sbci	r19, 0xFF	; 255
    a508:	62 2f       	mov	r22, r18
    a50a:	66 5d       	subi	r22, 0xD6	; 214
    a50c:	84 2f       	mov	r24, r20
    a50e:	8c 5a       	subi	r24, 0xAC	; 172
    a510:	45 e0       	ldi	r20, 0x05	; 5
    a512:	20 e0       	ldi	r18, 0x00	; 0
    a514:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <_Z10lcd_squarehhhh>
    a518:	cf ee       	ldi	r28, 0xEF	; 239
    a51a:	d8 e1       	ldi	r29, 0x18	; 24
    a51c:	1a e3       	ldi	r17, 0x3A	; 58
  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
    a51e:	c1 2c       	mov	r12, r1
    a520:	98 e0       	ldi	r25, 0x08	; 8
    a522:	d9 2e       	mov	r13, r25
    a524:	e1 2c       	mov	r14, r1
    a526:	f1 2c       	mov	r15, r1
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    a528:	08 e3       	ldi	r16, 0x38	; 56
  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
    a52a:	69 91       	ld	r22, Y+
    a52c:	79 91       	ld	r23, Y+
    a52e:	88 27       	eor	r24, r24
    a530:	77 fd       	sbrc	r23, 7
    a532:	80 95       	com	r24
    a534:	98 2f       	mov	r25, r24
    a536:	26 e1       	ldi	r18, 0x16	; 22
    a538:	30 e0       	ldi	r19, 0x00	; 0
    a53a:	40 e0       	ldi	r20, 0x00	; 0
    a53c:	50 e0       	ldi	r21, 0x00	; 0
    a53e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    a542:	60 50       	subi	r22, 0x00	; 0
    a544:	78 4a       	sbci	r23, 0xA8	; 168
    a546:	8f 4f       	sbci	r24, 0xFF	; 255
    a548:	9f 4f       	sbci	r25, 0xFF	; 255
    a54a:	a7 01       	movw	r20, r14
    a54c:	96 01       	movw	r18, r12
    a54e:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    a552:	b2 2e       	mov	r11, r18
    a554:	b3 94       	inc	r11
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    a556:	a0 2e       	mov	r10, r16
    a558:	ab 18       	sub	r10, r11
    a55a:	81 2f       	mov	r24, r17
    a55c:	6a 2d       	mov	r22, r10
    a55e:	4b 2d       	mov	r20, r11
    a560:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    a564:	81 2f       	mov	r24, r17
    a566:	8f 5f       	subi	r24, 0xFF	; 255
    a568:	6a 2d       	mov	r22, r10
    a56a:	4b 2d       	mov	r20, r11
    a56c:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    a570:	81 2f       	mov	r24, r17
    a572:	8e 5f       	subi	r24, 0xFE	; 254
    a574:	6a 2d       	mov	r22, r10
    a576:	4b 2d       	mov	r20, r11
    a578:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    a57c:	1b 5f       	subi	r17, 0xFB	; 251
  lcd_square(RBOX_CENTERX+(calibratedStick[3]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, RBOX_CENTERY-(calibratedStick[2]*BOX_LIMIT/(2*RESX))-MARKER_WIDTH/2, MARKER_WIDTH);

  // Optimization by Mike Blandford
  {
    uint8_t x, y, len ;  // declare temporary variables
    for( x = -5, y = 4 ; y < 7 ; x += 5, y += 1 )
    a57e:	19 34       	cpi	r17, 0x49	; 73
    a580:	a1 f6       	brne	.-88     	; 0xa52a <_Z19doMainScreenGrphicsv+0x12e>
    {
      len = ((calibratedStick[y]+RESX)*BAR_HEIGHT/(RESX*2))+1l;  // calculate once per loop
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}
    a582:	df 91       	pop	r29
    a584:	cf 91       	pop	r28
    a586:	1f 91       	pop	r17
    a588:	0f 91       	pop	r16
    a58a:	ff 90       	pop	r15
    a58c:	ef 90       	pop	r14
    a58e:	df 90       	pop	r13
    a590:	cf 90       	pop	r12
    a592:	bf 90       	pop	r11
    a594:	af 90       	pop	r10
    a596:	08 95       	ret

0000a598 <_Z12menuMainViewh>:

void menuMainView(uint8_t event)
{
    a598:	2f 92       	push	r2
    a59a:	3f 92       	push	r3
    a59c:	4f 92       	push	r4
    a59e:	5f 92       	push	r5
    a5a0:	6f 92       	push	r6
    a5a2:	7f 92       	push	r7
    a5a4:	8f 92       	push	r8
    a5a6:	9f 92       	push	r9
    a5a8:	af 92       	push	r10
    a5aa:	bf 92       	push	r11
    a5ac:	cf 92       	push	r12
    a5ae:	df 92       	push	r13
    a5b0:	ef 92       	push	r14
    a5b2:	ff 92       	push	r15
    a5b4:	0f 93       	push	r16
    a5b6:	1f 93       	push	r17
    a5b8:	df 93       	push	r29
    a5ba:	cf 93       	push	r28
    a5bc:	00 d0       	rcall	.+0      	; 0xa5be <_Z12menuMainViewh+0x26>
    a5be:	cd b7       	in	r28, 0x3d	; 61
    a5c0:	de b7       	in	r29, 0x3e	; 62
  static bool instantTrimSwLock;
  static bool trim2OfsSwLock;
  
  uint8_t view = g_eeGeneral.view & 0x0f; // mask out ALTERNATE_VIEW views
    a5c2:	20 91 80 12 	lds	r18, 0x1280
    a5c6:	12 2f       	mov	r17, r18
    a5c8:	1f 70       	andi	r17, 0x0F	; 15

  switch(event)
    a5ca:	80 38       	cpi	r24, 0x80	; 128
    a5cc:	a1 f1       	breq	.+104    	; 0xa636 <_Z12menuMainViewh+0x9e>
    a5ce:	81 38       	cpi	r24, 0x81	; 129
    a5d0:	88 f4       	brcc	.+34     	; 0xa5f4 <_Z12menuMainViewh+0x5c>
    a5d2:	83 32       	cpi	r24, 0x23	; 35
    a5d4:	09 f4       	brne	.+2      	; 0xa5d8 <_Z12menuMainViewh+0x40>
    a5d6:	70 c0       	rjmp	.+224    	; 0xa6b8 <_Z12menuMainViewh+0x120>
    a5d8:	84 32       	cpi	r24, 0x24	; 36
    a5da:	30 f4       	brcc	.+12     	; 0xa5e8 <_Z12menuMainViewh+0x50>
    a5dc:	80 32       	cpi	r24, 0x20	; 32
    a5de:	01 f1       	breq	.+64     	; 0xa620 <_Z12menuMainViewh+0x88>
    a5e0:	82 32       	cpi	r24, 0x22	; 34
    a5e2:	09 f0       	breq	.+2      	; 0xa5e6 <_Z12menuMainViewh+0x4e>
    a5e4:	ac c0       	rjmp	.+344    	; 0xa73e <_Z12menuMainViewh+0x1a6>
    a5e6:	71 c0       	rjmp	.+226    	; 0xa6ca <_Z12menuMainViewh+0x132>
    a5e8:	86 32       	cpi	r24, 0x26	; 38
    a5ea:	58 f1       	brcs	.+86     	; 0xa642 <_Z12menuMainViewh+0xaa>
    a5ec:	81 36       	cpi	r24, 0x61	; 97
    a5ee:	09 f0       	breq	.+2      	; 0xa5f2 <_Z12menuMainViewh+0x5a>
    a5f0:	a6 c0       	rjmp	.+332    	; 0xa73e <_Z12menuMainViewh+0x1a6>
    a5f2:	7e c0       	rjmp	.+252    	; 0xa6f0 <_Z12menuMainViewh+0x158>
    a5f4:	83 38       	cpi	r24, 0x83	; 131
    a5f6:	09 f4       	brne	.+2      	; 0xa5fa <_Z12menuMainViewh+0x62>
    a5f8:	6f c0       	rjmp	.+222    	; 0xa6d8 <_Z12menuMainViewh+0x140>
    a5fa:	84 38       	cpi	r24, 0x84	; 132
    a5fc:	38 f4       	brcc	.+14     	; 0xa60c <_Z12menuMainViewh+0x74>
    a5fe:	81 38       	cpi	r24, 0x81	; 129
    a600:	09 f4       	brne	.+2      	; 0xa604 <_Z12menuMainViewh+0x6c>
    a602:	88 c0       	rjmp	.+272    	; 0xa714 <_Z12menuMainViewh+0x17c>
    a604:	82 38       	cpi	r24, 0x82	; 130
    a606:	09 f0       	breq	.+2      	; 0xa60a <_Z12menuMainViewh+0x72>
    a608:	9a c0       	rjmp	.+308    	; 0xa73e <_Z12menuMainViewh+0x1a6>
    a60a:	6c c0       	rjmp	.+216    	; 0xa6e4 <_Z12menuMainViewh+0x14c>
    a60c:	85 38       	cpi	r24, 0x85	; 133
    a60e:	09 f4       	brne	.+2      	; 0xa612 <_Z12menuMainViewh+0x7a>
    a610:	4d c0       	rjmp	.+154    	; 0xa6ac <_Z12menuMainViewh+0x114>
    a612:	85 38       	cpi	r24, 0x85	; 133
    a614:	08 f4       	brcc	.+2      	; 0xa618 <_Z12menuMainViewh+0x80>
    a616:	42 c0       	rjmp	.+132    	; 0xa69c <_Z12menuMainViewh+0x104>
    a618:	8f 3b       	cpi	r24, 0xBF	; 191
    a61a:	09 f0       	breq	.+2      	; 0xa61e <_Z12menuMainViewh+0x86>
    a61c:	90 c0       	rjmp	.+288    	; 0xa73e <_Z12menuMainViewh+0x1a6>
    a61e:	81 c0       	rjmp	.+258    	; 0xa722 <_Z12menuMainViewh+0x18a>
  {
    case EVT_KEY_BREAK(KEY_MENU):
      if (view == e_timer2) {
    a620:	13 30       	cpi	r17, 0x03	; 3
    a622:	09 f0       	breq	.+2      	; 0xa626 <_Z12menuMainViewh+0x8e>
    a624:	8c c0       	rjmp	.+280    	; 0xa73e <_Z12menuMainViewh+0x1a6>
        Timer2_running = !Timer2_running;
    a626:	81 e0       	ldi	r24, 0x01	; 1
    a628:	90 91 8f 15 	lds	r25, 0x158F
    a62c:	91 11       	cpse	r25, r1
    a62e:	80 e0       	ldi	r24, 0x00	; 0
    a630:	80 93 8f 15 	sts	0x158F, r24
    a634:	2c c0       	rjmp	.+88     	; 0xa68e <_Z12menuMainViewh+0xf6>
        beepKey();
      }
    break;
    case EVT_KEY_LONG(KEY_MENU):// go to last menu
      pushMenu(lastPopMenu());
    a636:	0e 94 f4 51 	call	0xa3e8	; 0xa3e8 <_Z11lastPopMenuv>
    a63a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
      killEvents(event);
    a63e:	80 e8       	ldi	r24, 0x80	; 128
    a640:	32 c0       	rjmp	.+100    	; 0xa6a6 <_Z12menuMainViewh+0x10e>
      break;
    case EVT_KEY_BREAK(KEY_RIGHT):
    case EVT_KEY_BREAK(KEY_LEFT):
      g_eeGeneral.view = (g_eeGeneral.view + (event == EVT_KEY_BREAK(KEY_RIGHT) ? 
            ALTERNATE_VIEW : tabViews[view]*ALTERNATE_VIEW-ALTERNATE_VIEW)) % (tabViews[view]*ALTERNATE_VIEW);
    a642:	30 e0       	ldi	r19, 0x00	; 0
    a644:	84 32       	cpi	r24, 0x24	; 36
    a646:	69 f0       	breq	.+26     	; 0xa662 <_Z12menuMainViewh+0xca>
    a648:	e1 2f       	mov	r30, r17
    a64a:	f0 e0       	ldi	r31, 0x00	; 0
    a64c:	eb 59       	subi	r30, 0x9B	; 155
    a64e:	f8 4f       	sbci	r31, 0xF8	; 248
    a650:	80 81       	ld	r24, Z
    a652:	90 e0       	ldi	r25, 0x00	; 0
    a654:	01 97       	sbiw	r24, 0x01	; 1
    a656:	a4 e0       	ldi	r26, 0x04	; 4
    a658:	88 0f       	add	r24, r24
    a65a:	99 1f       	adc	r25, r25
    a65c:	aa 95       	dec	r26
    a65e:	e1 f7       	brne	.-8      	; 0xa658 <_Z12menuMainViewh+0xc0>
    a660:	02 c0       	rjmp	.+4      	; 0xa666 <_Z12menuMainViewh+0xce>
    a662:	80 e1       	ldi	r24, 0x10	; 16
    a664:	90 e0       	ldi	r25, 0x00	; 0
    a666:	82 0f       	add	r24, r18
    a668:	93 1f       	adc	r25, r19
    a66a:	e1 2f       	mov	r30, r17
    a66c:	f0 e0       	ldi	r31, 0x00	; 0
    a66e:	eb 59       	subi	r30, 0x9B	; 155
    a670:	f8 4f       	sbci	r31, 0xF8	; 248
    a672:	60 81       	ld	r22, Z
    a674:	70 e0       	ldi	r23, 0x00	; 0
    a676:	f4 e0       	ldi	r31, 0x04	; 4
    a678:	66 0f       	add	r22, r22
    a67a:	77 1f       	adc	r23, r23
    a67c:	fa 95       	dec	r31
    a67e:	e1 f7       	brne	.-8      	; 0xa678 <_Z12menuMainViewh+0xe0>
    a680:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a684:	80 93 80 12 	sts	0x1280, r24
      eeDirty(EE_GENERAL);
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    a68e:	80 91 72 15 	lds	r24, 0x1572
    a692:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    a696:	84 e6       	ldi	r24, 0x64	; 100
    a698:	87 bd       	out	0x27, r24	; 39
    a69a:	51 c0       	rjmp	.+162    	; 0xa73e <_Z12menuMainViewh+0x1a6>
      beepKey();
      break;
    case EVT_KEY_LONG(KEY_RIGHT):
      pushMenu(menuProcModelSelect);
    a69c:	81 e1       	ldi	r24, 0x11	; 17
    a69e:	94 e3       	ldi	r25, 0x34	; 52
    a6a0:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
      killEvents(event);
    a6a4:	84 e8       	ldi	r24, 0x84	; 132
    a6a6:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      break;
    a6aa:	49 c0       	rjmp	.+146    	; 0xa73e <_Z12menuMainViewh+0x1a6>
    case EVT_KEY_LONG(KEY_LEFT):
      pushMenu(menuProcSetup);
    a6ac:	88 eb       	ldi	r24, 0xB8	; 184
    a6ae:	9d e4       	ldi	r25, 0x4D	; 77
    a6b0:	0e 94 71 24 	call	0x48e2	; 0x48e2 <_Z8pushMenuPFvhE>
      killEvents(event);
    a6b4:	85 e8       	ldi	r24, 0x85	; 133
    a6b6:	f7 cf       	rjmp	.-18     	; 0xa6a6 <_Z12menuMainViewh+0x10e>
      break;
    case EVT_KEY_BREAK(KEY_UP):
      g_eeGeneral.view = view+1;
    a6b8:	81 2f       	mov	r24, r17
    a6ba:	8f 5f       	subi	r24, 0xFF	; 255
    a6bc:	80 93 80 12 	sts	0x1280, r24
      if(g_eeGeneral.view>=MAX_VIEWS) g_eeGeneral.view=0;
    a6c0:	85 30       	cpi	r24, 0x05	; 5
    a6c2:	10 f3       	brcs	.-60     	; 0xa688 <_Z12menuMainViewh+0xf0>
    a6c4:	10 92 80 12 	sts	0x1280, r1
    a6c8:	df cf       	rjmp	.-66     	; 0xa688 <_Z12menuMainViewh+0xf0>
      eeDirty(EE_GENERAL);
      beepKey();
      break;
    case EVT_KEY_BREAK(KEY_DOWN):
      if(view>0)
    a6ca:	11 23       	and	r17, r17
    a6cc:	19 f0       	breq	.+6      	; 0xa6d4 <_Z12menuMainViewh+0x13c>
        g_eeGeneral.view = view - 1;
    a6ce:	81 2f       	mov	r24, r17
    a6d0:	81 50       	subi	r24, 0x01	; 1
    a6d2:	d8 cf       	rjmp	.-80     	; 0xa684 <_Z12menuMainViewh+0xec>
      else
        g_eeGeneral.view = MAX_VIEWS-1;
    a6d4:	84 e0       	ldi	r24, 0x04	; 4
    a6d6:	d6 cf       	rjmp	.-84     	; 0xa684 <_Z12menuMainViewh+0xec>
      eeDirty(EE_GENERAL);
      beepKey();
      break;
    case EVT_KEY_LONG(KEY_UP):
      chainMenu(menuProcStatistic);
    a6d8:	85 eb       	ldi	r24, 0xB5	; 181
    a6da:	9a e5       	ldi	r25, 0x5A	; 90
    a6dc:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
      killEvents(event);
    a6e0:	83 e8       	ldi	r24, 0x83	; 131
    a6e2:	e1 cf       	rjmp	.-62     	; 0xa6a6 <_Z12menuMainViewh+0x10e>
    case EVT_KEY_LONG(KEY_DOWN):
#if defined(JETI)
      JETI_EnableRXD(); // enable JETI-Telemetry reception
      chainMenu(menuProcJeti);
#else
      chainMenu(menuProcStatistic2);
    a6e4:	86 e1       	ldi	r24, 0x16	; 22
    a6e6:	9a e5       	ldi	r25, 0x5A	; 90
    a6e8:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
#endif
      killEvents(event);
    a6ec:	82 e8       	ldi	r24, 0x82	; 130
    a6ee:	db cf       	rjmp	.-74     	; 0xa6a6 <_Z12menuMainViewh+0x10e>
      break;
    case EVT_KEY_FIRST(KEY_EXIT):
      if(s_timerState==TMR_BEEPING) {
    a6f0:	80 91 8c 15 	lds	r24, 0x158C
    a6f4:	82 30       	cpi	r24, 0x02	; 2
    a6f6:	21 f4       	brne	.+8      	; 0xa700 <_Z12menuMainViewh+0x168>
        s_timerState = TMR_STOPPED;
    a6f8:	83 e0       	ldi	r24, 0x03	; 3
    a6fa:	80 93 8c 15 	sts	0x158C, r24
    a6fe:	c7 cf       	rjmp	.-114    	; 0xa68e <_Z12menuMainViewh+0xf6>
        beepKey();
      }
      else if (view == e_timer2) {
    a700:	13 30       	cpi	r17, 0x03	; 3
    a702:	19 f4       	brne	.+6      	; 0xa70a <_Z12menuMainViewh+0x172>
       resetTimer2();
    a704:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z11resetTimer2v>
    a708:	c2 cf       	rjmp	.-124    	; 0xa68e <_Z12menuMainViewh+0xf6>
       beepKey();
      }
#ifdef FRSKY
      else if (view == e_telemetry) {
    a70a:	14 30       	cpi	r17, 0x04	; 4
    a70c:	39 f0       	breq	.+14     	; 0xa71c <_Z12menuMainViewh+0x184>
        resetTelemetry();
        beepKey();
      }
#endif
      else {
        resetTimer1();
    a70e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_Z11resetTimer1v>
    a712:	15 c0       	rjmp	.+42     	; 0xa73e <_Z12menuMainViewh+0x1a6>
      }
      break;
    case EVT_KEY_LONG(KEY_EXIT):
      resetTimer1();
    a714:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_Z11resetTimer1v>
      resetTimer2();
    a718:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z11resetTimer2v>
#ifdef FRSKY
      resetTelemetry();
    a71c:	0e 94 76 a5 	call	0x14aec	; 0x14aec <_Z14resetTelemetryv>
    a720:	b6 cf       	rjmp	.-148    	; 0xa68e <_Z12menuMainViewh+0xf6>
#endif
      beepKey();
      break;
    case EVT_ENTRY:
      killEvents(KEY_EXIT);
    a722:	81 e0       	ldi	r24, 0x01	; 1
    a724:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      killEvents(KEY_UP);
    a728:	83 e0       	ldi	r24, 0x03	; 3
    a72a:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      killEvents(KEY_DOWN);
    a72e:	82 e0       	ldi	r24, 0x02	; 2
    a730:	0e 94 8c 6e 	call	0xdd18	; 0xdd18 <_Z10killEventsh>
      instantTrimSwLock = true;
    a734:	81 e0       	ldi	r24, 0x01	; 1
    a736:	80 93 ab 19 	sts	0x19AB, r24
      trim2OfsSwLock = true;
    a73a:	80 93 aa 19 	sts	0x19AA, r24
      break;
  }

  bool trimSw = isFunctionActive(FUNC_INSTANT_TRIM);
    a73e:	86 e0       	ldi	r24, 0x06	; 6
    a740:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z16isFunctionActiveh>
  if (!instantTrimSwLock && trimSw) instantTrim();
    a744:	90 91 ab 19 	lds	r25, 0x19AB
    a748:	99 23       	and	r25, r25
    a74a:	31 f4       	brne	.+12     	; 0xa758 <_Z12menuMainViewh+0x1c0>
    a74c:	88 23       	and	r24, r24
    a74e:	21 f0       	breq	.+8      	; 0xa758 <_Z12menuMainViewh+0x1c0>
    a750:	89 83       	std	Y+1, r24	; 0x01
    a752:	0e 94 cb 1e 	call	0x3d96	; 0x3d96 <_Z11instantTrimv>
    a756:	89 81       	ldd	r24, Y+1	; 0x01
  instantTrimSwLock = trimSw;
    a758:	80 93 ab 19 	sts	0x19AB, r24

  trimSw = isFunctionActive(FUNC_TRIMS_2_OFS);
    a75c:	87 e0       	ldi	r24, 0x07	; 7
    a75e:	0e 94 b2 06 	call	0xd64	; 0xd64 <_Z16isFunctionActiveh>
  if (!trim2OfsSwLock && trimSw) moveTrimsToOffsets();
    a762:	90 91 aa 19 	lds	r25, 0x19AA
    a766:	99 23       	and	r25, r25
    a768:	31 f4       	brne	.+12     	; 0xa776 <_Z12menuMainViewh+0x1de>
    a76a:	88 23       	and	r24, r24
    a76c:	21 f0       	breq	.+8      	; 0xa776 <_Z12menuMainViewh+0x1de>
    a76e:	89 83       	std	Y+1, r24	; 0x01
    a770:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <_Z18moveTrimsToOffsetsv>
    a774:	89 81       	ldd	r24, Y+1	; 0x01
  trim2OfsSwLock = trimSw;
    a776:	80 93 aa 19 	sts	0x19AA, r24
  
  ///////////////////////////////////////////////////////////////////////
  /// Upper Section of Display common to all but telemetry alt. views ///
#if defined (FRSKY)
  if (view == e_telemetry && ((g_eeGeneral.view & 0xf0) >= ALTERNATE_VIEW)) { // If view is a telemetry ALTERNATE_VIEW view
    a77a:	14 30       	cpi	r17, 0x04	; 4
    a77c:	09 f0       	breq	.+2      	; 0xa780 <_Z12menuMainViewh+0x1e8>
    a77e:	4c c0       	rjmp	.+152    	; 0xa818 <_Z12menuMainViewh+0x280>
    a780:	80 91 80 12 	lds	r24, 0x1280
    a784:	90 e0       	ldi	r25, 0x00	; 0
    a786:	80 7f       	andi	r24, 0xF0	; 240
    a788:	90 70       	andi	r25, 0x00	; 0
    a78a:	80 31       	cpi	r24, 0x10	; 16
    a78c:	91 05       	cpc	r25, r1
    a78e:	0c f4       	brge	.+2      	; 0xa792 <_Z12menuMainViewh+0x1fa>
    a790:	43 c0       	rjmp	.+134    	; 0xa818 <_Z12menuMainViewh+0x280>
    putsModelName(0, 0, g_model.name, g_eeGeneral.currModel, 0);
    a792:	80 e0       	ldi	r24, 0x00	; 0
    a794:	60 e0       	ldi	r22, 0x00	; 0
    a796:	4b e8       	ldi	r20, 0x8B	; 139
    a798:	52 e1       	ldi	r21, 0x12	; 18
    a79a:	20 91 6b 12 	lds	r18, 0x126B
    a79e:	00 e0       	ldi	r16, 0x00	; 0
    a7a0:	0e 94 95 6b 	call	0xd72a	; 0xd72a <_Z13putsModelNamehhPchh>
    uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0);
    a7a4:	41 e0       	ldi	r20, 0x01	; 1
    a7a6:	90 91 79 15 	lds	r25, 0x1579
    a7aa:	80 91 6d 12 	lds	r24, 0x126D
    a7ae:	98 17       	cp	r25, r24
    a7b0:	08 f0       	brcs	.+2      	; 0xa7b4 <_Z12menuMainViewh+0x21c>
    a7b2:	40 e0       	ldi	r20, 0x00	; 0
    putsVBat(14*FW,0,att);
    a7b4:	84 e5       	ldi	r24, 0x54	; 84
    a7b6:	60 e0       	ldi	r22, 0x00	; 0
    a7b8:	0e 94 15 6b 	call	0xd62a	; 0xd62a <_Z8putsVBathhh>
    if(s_timerState != TMR_OFF){
    a7bc:	80 91 8c 15 	lds	r24, 0x158C
    a7c0:	88 23       	and	r24, r24
    a7c2:	71 f0       	breq	.+28     	; 0xa7e0 <_Z12menuMainViewh+0x248>
      att = (s_timerState==TMR_BEEPING ? BLINK : 0);
    a7c4:	01 e0       	ldi	r16, 0x01	; 1
    a7c6:	82 30       	cpi	r24, 0x02	; 2
    a7c8:	09 f0       	breq	.+2      	; 0xa7cc <_Z12menuMainViewh+0x234>
    a7ca:	00 e0       	ldi	r16, 0x00	; 0
      putsTime(17*FW, 0, s_timerVal, att, att);
    a7cc:	40 91 8d 15 	lds	r20, 0x158D
    a7d0:	50 91 8e 15 	lds	r21, 0x158E
    a7d4:	86 e6       	ldi	r24, 0x66	; 102
    a7d6:	60 e0       	ldi	r22, 0x00	; 0
    a7d8:	20 2f       	mov	r18, r16
    a7da:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>
    a7de:	14 c0       	rjmp	.+40     	; 0xa808 <_Z12menuMainViewh+0x270>
    }
    // The timer is in the way ... but more important than a screen title
    else {
      lcd_putsnAtt(17*FW-4, 0, PSTR(" MAIN  GPSOTHER") + 5 * (g_eeGeneral.view - e_telemetry) / ALTERNATE_VIEW - 5, 5, 0);
    a7e0:	90 91 80 12 	lds	r25, 0x1280
    a7e4:	85 e0       	ldi	r24, 0x05	; 5
    a7e6:	98 9f       	mul	r25, r24
    a7e8:	c0 01       	movw	r24, r0
    a7ea:	11 24       	eor	r1, r1
    a7ec:	44 97       	sbiw	r24, 0x14	; 20
    a7ee:	60 e1       	ldi	r22, 0x10	; 16
    a7f0:	70 e0       	ldi	r23, 0x00	; 0
    a7f2:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a7f6:	ab 01       	movw	r20, r22
    a7f8:	43 55       	subi	r20, 0x53	; 83
    a7fa:	56 4f       	sbci	r21, 0xF6	; 246
    a7fc:	82 e6       	ldi	r24, 0x62	; 98
    a7fe:	60 e0       	ldi	r22, 0x00	; 0
    a800:	25 e0       	ldi	r18, 0x05	; 5
    a802:	00 e0       	ldi	r16, 0x00	; 0
    a804:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    }
    lcd_filled_rect(0, 0, DISPLAY_W, 8);
    a808:	80 e0       	ldi	r24, 0x00	; 0
    a80a:	60 e0       	ldi	r22, 0x00	; 0
    a80c:	40 e8       	ldi	r20, 0x80	; 128
    a80e:	28 e0       	ldi	r18, 0x08	; 8
    a810:	00 e0       	ldi	r16, 0x00	; 0
    a812:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
    a816:	dc c1       	rjmp	.+952    	; 0xabd0 <_Z12menuMainViewh+0x638>
  }
  else 
#endif
  { // not in a telemetry ALTERNATE_VIEW view
    uint8_t phase = getFlightPhase();
    a818:	0e 94 3f 0a 	call	0x147e	; 0x147e <_Z14getFlightPhasev>
    a81c:	78 2e       	mov	r7, r24
    lcd_putsnAtt(6*FW+2, 2*FH, g_model.phaseData[phase].name, sizeof(g_model.phaseData[phase].name), ZCHAR);
    a81e:	28 2f       	mov	r18, r24
    a820:	30 e0       	ldi	r19, 0x00	; 0
    a822:	8d e0       	ldi	r24, 0x0D	; 13
    a824:	90 e0       	ldi	r25, 0x00	; 0
    a826:	28 9f       	mul	r18, r24
    a828:	a0 01       	movw	r20, r0
    a82a:	29 9f       	mul	r18, r25
    a82c:	50 0d       	add	r21, r0
    a82e:	38 9f       	mul	r19, r24
    a830:	50 0d       	add	r21, r0
    a832:	11 24       	eor	r1, r1
    a834:	44 5e       	subi	r20, 0xE4	; 228
    a836:	5a 4e       	sbci	r21, 0xEA	; 234
    a838:	86 e2       	ldi	r24, 0x26	; 38
    a83a:	60 e1       	ldi	r22, 0x10	; 16
    a83c:	26 e0       	ldi	r18, 0x06	; 6
    a83e:	00 e2       	ldi	r16, 0x20	; 32
    a840:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>

    uint8_t att = (g_vbat100mV < g_eeGeneral.vBatWarn ? BLINK : 0) | DBLSIZE;
    a844:	90 91 79 15 	lds	r25, 0x1579
    a848:	80 91 6d 12 	lds	r24, 0x126D
    a84c:	98 17       	cp	r25, r24
    a84e:	10 f4       	brcc	.+4      	; 0xa854 <_Z12menuMainViewh+0x2bc>
    a850:	95 e0       	ldi	r25, 0x05	; 5
    a852:	01 c0       	rjmp	.+2      	; 0xa856 <_Z12menuMainViewh+0x2be>
    a854:	94 e0       	ldi	r25, 0x04	; 4
    putsModelName(2*FW-2, 0*FH, g_model.name, g_eeGeneral.currModel, DBLSIZE);
    a856:	8a e0       	ldi	r24, 0x0A	; 10
    a858:	60 e0       	ldi	r22, 0x00	; 0
    a85a:	4b e8       	ldi	r20, 0x8B	; 139
    a85c:	52 e1       	ldi	r21, 0x12	; 18
    a85e:	20 91 6b 12 	lds	r18, 0x126B
    a862:	04 e0       	ldi	r16, 0x04	; 4
    a864:	99 83       	std	Y+1, r25	; 0x01
    a866:	0e 94 95 6b 	call	0xd72a	; 0xd72a <_Z13putsModelNamehhPchh>
    putsVBat(6*FW-1, 2*FH, att|NO_UNIT);
    a86a:	99 81       	ldd	r25, Y+1	; 0x01
    a86c:	49 2f       	mov	r20, r25
    a86e:	48 60       	ori	r20, 0x08	; 8
    a870:	83 e2       	ldi	r24, 0x23	; 35
    a872:	60 e1       	ldi	r22, 0x10	; 16
    a874:	0e 94 15 6b 	call	0xd62a	; 0xd62a <_Z8putsVBathhh>
    lcd_putc(6*FW, 3*FH, 'V');
    a878:	84 e2       	ldi	r24, 0x24	; 36
    a87a:	68 e1       	ldi	r22, 0x18	; 24
    a87c:	46 e5       	ldi	r20, 0x56	; 86
    a87e:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

    if (s_timerState != TMR_OFF) {
    a882:	80 91 8c 15 	lds	r24, 0x158C
    a886:	88 23       	and	r24, r24
    a888:	d9 f0       	breq	.+54     	; 0xa8c0 <_Z12menuMainViewh+0x328>
      uint8_t att = DBLSIZE | (s_timerState==TMR_BEEPING ? BLINK : 0);
    a88a:	82 30       	cpi	r24, 0x02	; 2
    a88c:	11 f4       	brne	.+4      	; 0xa892 <_Z12menuMainViewh+0x2fa>
    a88e:	05 e0       	ldi	r16, 0x05	; 5
    a890:	01 c0       	rjmp	.+2      	; 0xa894 <_Z12menuMainViewh+0x2fc>
    a892:	04 e0       	ldi	r16, 0x04	; 4
      putsTime(12*FW+3, FH*2, s_timerVal, att, att);
    a894:	40 91 8d 15 	lds	r20, 0x158D
    a898:	50 91 8e 15 	lds	r21, 0x158E
    a89c:	8b e4       	ldi	r24, 0x4B	; 75
    a89e:	60 e1       	ldi	r22, 0x10	; 16
    a8a0:	20 2f       	mov	r18, r16
    a8a2:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>
      putsTmrMode(s_timerVal >= 0 ? 9*FW-FW/2+5 : 9*FW-FW/2-2, FH*3, 0);
    a8a6:	80 91 8d 15 	lds	r24, 0x158D
    a8aa:	90 91 8e 15 	lds	r25, 0x158E
    a8ae:	97 fd       	sbrc	r25, 7
    a8b0:	02 c0       	rjmp	.+4      	; 0xa8b6 <_Z12menuMainViewh+0x31e>
    a8b2:	88 e3       	ldi	r24, 0x38	; 56
    a8b4:	01 c0       	rjmp	.+2      	; 0xa8b8 <_Z12menuMainViewh+0x320>
    a8b6:	81 e3       	ldi	r24, 0x31	; 49
    a8b8:	68 e1       	ldi	r22, 0x18	; 24
    a8ba:	40 e0       	ldi	r20, 0x00	; 0
    a8bc:	0e 94 29 6c 	call	0xd852	; 0xd852 <_Z11putsTmrModehhh>
    a8c0:	ee e6       	ldi	r30, 0x6E	; 110
    a8c2:	ae 2e       	mov	r10, r30
    a8c4:	e7 e0       	ldi	r30, 0x07	; 7
    a8c6:	be 2e       	mov	r11, r30
    a8c8:	7a e6       	ldi	r23, 0x6A	; 106
    a8ca:	87 2e       	mov	r8, r23
    a8cc:	77 e0       	ldi	r23, 0x07	; 7
    a8ce:	97 2e       	mov	r9, r23
    a8d0:	22 24       	eor	r2, r2
    a8d2:	33 24       	eor	r3, r3
      if (val < -(TL+1)*4)
        val = -(TL+1);
      else if (val > (TL+1)*4)
        val = TL+1;
      else
        val /= 4;
    a8d4:	64 e0       	ldi	r22, 0x04	; 4
    a8d6:	46 2e       	mov	r4, r22
    a8d8:	51 2c       	mov	r5, r1
        lcd_vline(xm, ym-TL, TL*2);
        if(((g_eeGeneral.stickMode&1) != (i&1)) || !(g_model.thrTrim)){
          lcd_vline(xm-1, ym-1,  3);
          lcd_vline(xm+1, ym-1,  3);
        }
        ym -= val;
    a8da:	5f e1       	ldi	r21, 0x1F	; 31
    a8dc:	c5 2e       	mov	r12, r21
#define TL 27
      //                        LH LV RV RH
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[i];
    a8de:	d5 01       	movw	r26, r10
    a8e0:	0d 91       	ld	r16, X+
    a8e2:	5d 01       	movw	r10, r26

      uint8_t att = 0;
      int16_t val = getTrimValue(getTrimFlightPhase(i, phase), i);;
    a8e4:	82 2d       	mov	r24, r2
    a8e6:	67 2d       	mov	r22, r7
    a8e8:	0e 94 cc 0b 	call	0x1798	; 0x1798 <_Z18getTrimFlightPhasehh>
    a8ec:	62 2d       	mov	r22, r2
    a8ee:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_Z12getTrimValuehh>

      if (val < -125 || val > 125)
    a8f2:	9c 01       	movw	r18, r24
    a8f4:	23 58       	subi	r18, 0x83	; 131
    a8f6:	3f 4f       	sbci	r19, 0xFF	; 255
      static uint8_t x[4]    = {128*1/4+2, 4, 128-4, 128*3/4-2};
      static uint8_t vert[4] = {0,1,1,0};
      uint8_t xm, ym;
      xm = x[i];

      uint8_t att = 0;
    a8f8:	dd 24       	eor	r13, r13
    a8fa:	d3 94       	inc	r13
    a8fc:	2b 3f       	cpi	r18, 0xFB	; 251
    a8fe:	31 05       	cpc	r19, r1
    a900:	08 f4       	brcc	.+2      	; 0xa904 <_Z12menuMainViewh+0x36c>
    a902:	dd 24       	eor	r13, r13
      int16_t val = getTrimValue(getTrimFlightPhase(i, phase), i);;

      if (val < -125 || val > 125)
        att = BLINK;

      if (val < -(TL+1)*4)
    a904:	bf ef       	ldi	r27, 0xFF	; 255
    a906:	80 39       	cpi	r24, 0x90	; 144
    a908:	9b 07       	cpc	r25, r27
    a90a:	44 f0       	brlt	.+16     	; 0xa91c <_Z12menuMainViewh+0x384>
        val = -(TL+1);
      else if (val > (TL+1)*4)
    a90c:	81 37       	cpi	r24, 0x71	; 113
    a90e:	91 05       	cpc	r25, r1
    a910:	54 f4       	brge	.+20     	; 0xa926 <_Z12menuMainViewh+0x38e>
        val = TL+1;
      else
        val /= 4;
    a912:	b2 01       	movw	r22, r4
    a914:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    a918:	7b 01       	movw	r14, r22
    a91a:	08 c0       	rjmp	.+16     	; 0xa92c <_Z12menuMainViewh+0x394>

      if (val < -125 || val > 125)
        att = BLINK;

      if (val < -(TL+1)*4)
        val = -(TL+1);
    a91c:	44 ee       	ldi	r20, 0xE4	; 228
    a91e:	e4 2e       	mov	r14, r20
    a920:	4f ef       	ldi	r20, 0xFF	; 255
    a922:	f4 2e       	mov	r15, r20
    a924:	03 c0       	rjmp	.+6      	; 0xa92c <_Z12menuMainViewh+0x394>
      else if (val > (TL+1)*4)
        val = TL+1;
    a926:	3c e1       	ldi	r19, 0x1C	; 28
    a928:	e3 2e       	mov	r14, r19
    a92a:	f1 2c       	mov	r15, r1
      else
        val /= 4;

      if (vert[i]) {
    a92c:	f4 01       	movw	r30, r8
    a92e:	81 91       	ld	r24, Z+
    a930:	4f 01       	movw	r8, r30
    a932:	88 23       	and	r24, r24
    a934:	f9 f0       	breq	.+62     	; 0xa974 <_Z12menuMainViewh+0x3dc>
        ym = 31;
        lcd_vline(xm, ym-TL, TL*2);
    a936:	80 2f       	mov	r24, r16
    a938:	64 e0       	ldi	r22, 0x04	; 4
    a93a:	46 e3       	ldi	r20, 0x36	; 54
    a93c:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
        if(((g_eeGeneral.stickMode&1) != (i&1)) || !(g_model.thrTrim)){
    a940:	80 91 82 12 	lds	r24, 0x1282
    a944:	90 e0       	ldi	r25, 0x00	; 0
    a946:	82 25       	eor	r24, r2
    a948:	93 25       	eor	r25, r3
    a94a:	80 fd       	sbrc	r24, 0
    a94c:	04 c0       	rjmp	.+8      	; 0xa956 <_Z12menuMainViewh+0x3be>
    a94e:	80 91 98 12 	lds	r24, 0x1298
    a952:	83 fd       	sbrc	r24, 3
    a954:	0c c0       	rjmp	.+24     	; 0xa96e <_Z12menuMainViewh+0x3d6>
          lcd_vline(xm-1, ym-1,  3);
    a956:	80 2f       	mov	r24, r16
    a958:	81 50       	subi	r24, 0x01	; 1
    a95a:	6e e1       	ldi	r22, 0x1E	; 30
    a95c:	43 e0       	ldi	r20, 0x03	; 3
    a95e:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
          lcd_vline(xm+1, ym-1,  3);
    a962:	80 2f       	mov	r24, r16
    a964:	8f 5f       	subi	r24, 0xFF	; 255
    a966:	6e e1       	ldi	r22, 0x1E	; 30
    a968:	43 e0       	ldi	r20, 0x03	; 3
    a96a:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
        }
        ym -= val;
    a96e:	6c 2d       	mov	r22, r12
    a970:	6e 19       	sub	r22, r14
    a972:	17 c0       	rjmp	.+46     	; 0xa9a2 <_Z12menuMainViewh+0x40a>
      }
      else {
        ym = 60;
        lcd_hline(xm-TL, ym, TL*2);
    a974:	80 2f       	mov	r24, r16
    a976:	8b 51       	subi	r24, 0x1B	; 27
    a978:	6c e3       	ldi	r22, 0x3C	; 60
    a97a:	46 e3       	ldi	r20, 0x36	; 54
    a97c:	20 e0       	ldi	r18, 0x00	; 0
    a97e:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
        lcd_hline(xm-1, ym-1,  3);
    a982:	60 2e       	mov	r6, r16
    a984:	6a 94       	dec	r6
    a986:	86 2d       	mov	r24, r6
    a988:	6b e3       	ldi	r22, 0x3B	; 59
    a98a:	43 e0       	ldi	r20, 0x03	; 3
    a98c:	20 e0       	ldi	r18, 0x00	; 0
    a98e:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
        lcd_hline(xm-1, ym+1,  3);
    a992:	86 2d       	mov	r24, r6
    a994:	6d e3       	ldi	r22, 0x3D	; 61
    a996:	43 e0       	ldi	r20, 0x03	; 3
    a998:	20 e0       	ldi	r18, 0x00	; 0
    a99a:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
        xm += val;
    a99e:	0e 0d       	add	r16, r14
          lcd_vline(xm+1, ym-1,  3);
        }
        ym -= val;
      }
      else {
        ym = 60;
    a9a0:	6c e3       	ldi	r22, 0x3C	; 60
        lcd_hline(xm-TL, ym, TL*2);
        lcd_hline(xm-1, ym-1,  3);
        lcd_hline(xm-1, ym+1,  3);
        xm += val;
      }
      lcd_square(xm-3, ym-3, 7, att);
    a9a2:	63 50       	subi	r22, 0x03	; 3
    a9a4:	80 2f       	mov	r24, r16
    a9a6:	83 50       	subi	r24, 0x03	; 3
    a9a8:	47 e0       	ldi	r20, 0x07	; 7
    a9aa:	2d 2d       	mov	r18, r13
    a9ac:	0e 94 d4 51 	call	0xa3a8	; 0xa3a8 <_Z10lcd_squarehhhh>
    a9b0:	08 94       	sec
    a9b2:	21 1c       	adc	r2, r1
    a9b4:	31 1c       	adc	r3, r1
      putsTime(12*FW+3, FH*2, s_timerVal, att, att);
      putsTmrMode(s_timerVal >= 0 ? 9*FW-FW/2+5 : 9*FW-FW/2-2, FH*3, 0);
    }

    // trim sliders
    for(uint8_t i=0; i<4; i++)
    a9b6:	f4 e0       	ldi	r31, 0x04	; 4
    a9b8:	2f 16       	cp	r2, r31
    a9ba:	31 04       	cpc	r3, r1
    a9bc:	09 f0       	breq	.+2      	; 0xa9c0 <_Z12menuMainViewh+0x428>
    a9be:	8f cf       	rjmp	.-226    	; 0xa8de <_Z12menuMainViewh+0x346>
  /// Upper Section of Display common to all but telemetry alt. views ///
  ///////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////
  /// Lower section of display                                        ///
  if(view < e_inputs) { // values and bars
    a9c0:	12 30       	cpi	r17, 0x02	; 2
    a9c2:	08 f0       	brcs	.+2      	; 0xa9c6 <_Z12menuMainViewh+0x42e>
    a9c4:	93 c0       	rjmp	.+294    	; 0xaaec <_Z12menuMainViewh+0x554>
    a9c6:	29 e1       	ldi	r18, 0x19	; 25
    a9c8:	a2 2e       	mov	r10, r18
    a9ca:	29 e1       	ldi	r18, 0x19	; 25
    a9cc:	b2 2e       	mov	r11, r18
    a9ce:	ee 24       	eor	r14, r14
          break;
        case e_outputBars:
#define WBAR2 (50/2)
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
          y0       = 38+(i%4)*5;
          int8_t l = (abs(val) * WBAR2 + 512) / 1024;
    a9d0:	99 e1       	ldi	r25, 0x19	; 25
    a9d2:	c9 2e       	mov	r12, r25
    a9d4:	d1 2c       	mov	r13, r1
      int16_t val = g_chans512[i];
      //val += g_model.limitData[i].revert ? g_model.limitData[i].offset : -g_model.limitData[i].offset;
      switch(view)
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
    a9d6:	8b e1       	ldi	r24, 0x1B	; 27
    a9d8:	f8 2e       	mov	r15, r24
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
#else
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val)/10, 0); // G: Don't like the decimal part*
    a9da:	00 e2       	ldi	r16, 0x20	; 32
    a9dc:	40 2e       	mov	r4, r16
    a9de:	51 2c       	mov	r5, r1
    a9e0:	b0 e8       	ldi	r27, 0x80	; 128
    a9e2:	2b 2e       	mov	r2, r27
    a9e4:	31 2c       	mov	r3, r1
  /// Lower section of display                                        ///
  if(view < e_inputs) { // values and bars
    for(uint8_t i=0; i<8; i++)
    {
      uint8_t x0, y0;
      int16_t val = g_chans512[i];
    a9e6:	d5 01       	movw	r26, r10
    a9e8:	ed 91       	ld	r30, X+
    a9ea:	fd 91       	ld	r31, X+
    a9ec:	5d 01       	movw	r10, r26
    a9ee:	fb 83       	std	Y+3, r31	; 0x03
    a9f0:	ea 83       	std	Y+2, r30	; 0x02
      //val += g_model.limitData[i].revert ? g_model.limitData[i].offset : -g_model.limitData[i].offset;
      switch(view)
    a9f2:	11 30       	cpi	r17, 0x01	; 1
    a9f4:	39 f1       	breq	.+78     	; 0xaa44 <_Z12menuMainViewh+0x4ac>
      {
        case e_outputValues:
          x0 = (i%4*9+3)*FW/2;
    a9f6:	8e 2d       	mov	r24, r14
    a9f8:	83 70       	andi	r24, 0x03	; 3
    a9fa:	8f 9d       	mul	r24, r15
    a9fc:	80 2c       	mov	r8, r0
    a9fe:	11 24       	eor	r1, r1
          y0 = i/4*FH+40;
    aa00:	0e 2d       	mov	r16, r14
    aa02:	06 95       	lsr	r16
    aa04:	06 95       	lsr	r16
    aa06:	00 0f       	add	r16, r16
    aa08:	00 0f       	add	r16, r16
    aa0a:	00 0f       	add	r16, r16
    aa0c:	08 5d       	subi	r16, 0xD8	; 216
          // *1000/1024 = x - x/32 + x/128
#define GPERC(x)  (x - x/32 + x/128)
#if defined (DECIMALS_DISPLAYED)
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val), PREC1);
#else
          lcd_outdezAtt( x0+4*FW , y0, GPERC(val)/10, 0); // G: Don't like the decimal part*
    aa0e:	cf 01       	movw	r24, r30
    aa10:	b2 01       	movw	r22, r4
    aa12:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    aa16:	9b 01       	movw	r18, r22
    aa18:	cf 01       	movw	r24, r30
    aa1a:	b1 01       	movw	r22, r2
    aa1c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    aa20:	ab 01       	movw	r20, r22
    aa22:	42 1b       	sub	r20, r18
    aa24:	53 0b       	sbc	r21, r19
    aa26:	4e 0f       	add	r20, r30
    aa28:	5f 1f       	adc	r21, r31
    aa2a:	ca 01       	movw	r24, r20
    aa2c:	6a e0       	ldi	r22, 0x0A	; 10
    aa2e:	70 e0       	ldi	r23, 0x00	; 0
    aa30:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    aa34:	ab 01       	movw	r20, r22
    aa36:	88 2d       	mov	r24, r8
    aa38:	8f 5d       	subi	r24, 0xDF	; 223
    aa3a:	60 2f       	mov	r22, r16
    aa3c:	20 e0       	ldi	r18, 0x00	; 0
    aa3e:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
#endif
          break;
    aa42:	4e c0       	rjmp	.+156    	; 0xaae0 <_Z12menuMainViewh+0x548>
        case e_outputBars:
#define WBAR2 (50/2)
          x0       = i<4 ? 128/4+2 : 128*3/4-2;
    aa44:	fe 2d       	mov	r31, r14
    aa46:	f4 30       	cpi	r31, 0x04	; 4
    aa48:	18 f4       	brcc	.+6      	; 0xaa50 <_Z12menuMainViewh+0x4b8>
    aa4a:	a2 e2       	ldi	r26, 0x22	; 34
    aa4c:	7a 2e       	mov	r7, r26
    aa4e:	02 c0       	rjmp	.+4      	; 0xaa54 <_Z12menuMainViewh+0x4bc>
    aa50:	fe e5       	ldi	r31, 0x5E	; 94
    aa52:	7f 2e       	mov	r7, r31
          y0       = 38+(i%4)*5;
    aa54:	8e 2d       	mov	r24, r14
    aa56:	83 70       	andi	r24, 0x03	; 3
    aa58:	88 2e       	mov	r8, r24
    aa5a:	88 0c       	add	r8, r8
    aa5c:	88 0c       	add	r8, r8
    aa5e:	88 0e       	add	r8, r24
    aa60:	26 e2       	ldi	r18, 0x26	; 38
    aa62:	82 0e       	add	r8, r18
#ifndef FORCEINLINE
#define FORCEINLINE inline __attribute__ ((always_inline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
    aa64:	8a 81       	ldd	r24, Y+2	; 0x02
    aa66:	9b 81       	ldd	r25, Y+3	; 0x03
    aa68:	97 ff       	sbrs	r25, 7
    aa6a:	03 c0       	rjmp	.+6      	; 0xaa72 <_Z12menuMainViewh+0x4da>
    aa6c:	90 95       	com	r25
    aa6e:	81 95       	neg	r24
    aa70:	9f 4f       	sbci	r25, 0xFF	; 255
          int8_t l = (abs(val) * WBAR2 + 512) / 1024;
    aa72:	8c 9d       	mul	r24, r12
    aa74:	a0 01       	movw	r20, r0
    aa76:	8d 9d       	mul	r24, r13
    aa78:	50 0d       	add	r21, r0
    aa7a:	9c 9d       	mul	r25, r12
    aa7c:	50 0d       	add	r21, r0
    aa7e:	11 24       	eor	r1, r1
    aa80:	40 50       	subi	r20, 0x00	; 0
    aa82:	5e 4f       	sbci	r21, 0xFE	; 254
    aa84:	45 2f       	mov	r20, r21
    aa86:	55 0f       	add	r21, r21
    aa88:	55 0b       	sbc	r21, r21
    aa8a:	45 95       	asr	r20
    aa8c:	45 95       	asr	r20
    aa8e:	64 2e       	mov	r6, r20
    aa90:	4a 31       	cpi	r20, 0x1A	; 26
    aa92:	14 f0       	brlt	.+4      	; 0xaa98 <_Z12menuMainViewh+0x500>
    aa94:	79 e1       	ldi	r23, 0x19	; 25
    aa96:	67 2e       	mov	r6, r23
          if(l>WBAR2)  l =  WBAR2;  // prevent bars from going over the end - comment for debugging

          lcd_hlineStip(x0-WBAR2,y0,WBAR2*2+1,0x55);
    aa98:	87 2d       	mov	r24, r7
    aa9a:	89 51       	subi	r24, 0x19	; 25
    aa9c:	68 2d       	mov	r22, r8
    aa9e:	43 e3       	ldi	r20, 0x33	; 51
    aaa0:	25 e5       	ldi	r18, 0x55	; 85
    aaa2:	00 e0       	ldi	r16, 0x00	; 0
    aaa4:	0e 94 68 68 	call	0xd0d0	; 0xd0d0 <_Z13lcd_hlineStipahahh>
          lcd_vline(x0,y0-2,5);
    aaa8:	68 2d       	mov	r22, r8
    aaaa:	62 50       	subi	r22, 0x02	; 2
    aaac:	87 2d       	mov	r24, r7
    aaae:	45 e0       	ldi	r20, 0x05	; 5
    aab0:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
          if(val>0){
    aab4:	8a 81       	ldd	r24, Y+2	; 0x02
    aab6:	9b 81       	ldd	r25, Y+3	; 0x03
    aab8:	18 16       	cp	r1, r24
    aaba:	19 06       	cpc	r1, r25
    aabc:	14 f4       	brge	.+4      	; 0xaac2 <_Z12menuMainViewh+0x52a>
            x0+=1;
    aabe:	73 94       	inc	r7
    aac0:	01 c0       	rjmp	.+2      	; 0xaac4 <_Z12menuMainViewh+0x52c>
          }else{
            x0-=l;
    aac2:	76 18       	sub	r7, r6
          }
          lcd_hline(x0,y0+1,l);
    aac4:	68 2d       	mov	r22, r8
    aac6:	6f 5f       	subi	r22, 0xFF	; 255
    aac8:	87 2d       	mov	r24, r7
    aaca:	46 2d       	mov	r20, r6
    aacc:	20 e0       	ldi	r18, 0x00	; 0
    aace:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
          lcd_hline(x0,y0-1,l);
    aad2:	68 2d       	mov	r22, r8
    aad4:	61 50       	subi	r22, 0x01	; 1
    aad6:	87 2d       	mov	r24, r7
    aad8:	46 2d       	mov	r20, r6
    aada:	20 e0       	ldi	r18, 0x00	; 0
    aadc:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
  ///////////////////////////////////////////////////////////////////////

  ///////////////////////////////////////////////////////////////////////
  /// Lower section of display                                        ///
  if(view < e_inputs) { // values and bars
    for(uint8_t i=0; i<8; i++)
    aae0:	e3 94       	inc	r14
    aae2:	9e 2d       	mov	r25, r14
    aae4:	98 30       	cpi	r25, 0x08	; 8
    aae6:	09 f0       	breq	.+2      	; 0xaaea <_Z12menuMainViewh+0x552>
    aae8:	7e cf       	rjmp	.-260    	; 0xa9e6 <_Z12menuMainViewh+0x44e>
    aaea:	85 c4       	rjmp	.+2314   	; 0xb3f6 <_Z12menuMainViewh+0xe5e>
          lcd_hline(x0,y0-1,l);
          break;
      }
    }
  }
  else if (view == e_inputs) {
    aaec:	12 30       	cpi	r17, 0x02	; 2
    aaee:	09 f0       	breq	.+2      	; 0xaaf2 <_Z12menuMainViewh+0x55a>
    aaf0:	6c c0       	rjmp	.+216    	; 0xabca <_Z12menuMainViewh+0x632>
    doMainScreenGrphics();
    aaf2:	0e 94 fe 51 	call	0xa3fc	; 0xa3fc <_Z19doMainScreenGrphicsv>
    int8_t a = (g_eeGeneral.view == e_inputs) ? 1 : 4+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    aaf6:	90 91 80 12 	lds	r25, 0x1280
    aafa:	92 30       	cpi	r25, 0x02	; 2
    aafc:	69 f0       	breq	.+26     	; 0xab18 <_Z12menuMainViewh+0x580>
    aafe:	92 95       	swap	r25
    ab00:	9f 70       	andi	r25, 0x0F	; 15
    ab02:	89 2f       	mov	r24, r25
    ab04:	88 0f       	add	r24, r24
    ab06:	89 0f       	add	r24, r25
    ab08:	88 0f       	add	r24, r24
    ab0a:	64 e0       	ldi	r22, 0x04	; 4
    ab0c:	c6 2e       	mov	r12, r22
    ab0e:	c8 0e       	add	r12, r24
    int8_t b = (g_eeGeneral.view == e_inputs) ? 7 : 7+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    ab10:	57 e0       	ldi	r21, 0x07	; 7
    ab12:	d5 2e       	mov	r13, r21
    ab14:	d8 0e       	add	r13, r24
    ab16:	04 c0       	rjmp	.+8      	; 0xab20 <_Z12menuMainViewh+0x588>
      }
    }
  }
  else if (view == e_inputs) {
    doMainScreenGrphics();
    int8_t a = (g_eeGeneral.view == e_inputs) ? 1 : 4+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    ab18:	cc 24       	eor	r12, r12
    ab1a:	c3 94       	inc	r12
    int8_t b = (g_eeGeneral.view == e_inputs) ? 7 : 7+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    ab1c:	47 e0       	ldi	r20, 0x07	; 7
    ab1e:	d4 2e       	mov	r13, r20
    for(int8_t i=a; i<(a+3); i++) putsSwitches(2*FW-2,  (i-a)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    ab20:	30 e2       	ldi	r19, 0x20	; 32
    ab22:	a3 2e       	mov	r10, r19
    ab24:	88 24       	eor	r8, r8
    ab26:	99 24       	eor	r9, r9
    ab28:	0c 2d       	mov	r16, r12
    ab2a:	11 27       	eor	r17, r17
    ab2c:	07 fd       	sbrc	r16, 7
    ab2e:	10 95       	com	r17
    ab30:	22 e0       	ldi	r18, 0x02	; 2
    ab32:	e2 2e       	mov	r14, r18
    ab34:	f1 2c       	mov	r15, r1
    ab36:	e0 0e       	add	r14, r16
    ab38:	f1 1e       	adc	r15, r17
    ab3a:	14 c0       	rjmp	.+40     	; 0xab64 <_Z12menuMainViewh+0x5cc>
    ab3c:	84 2f       	mov	r24, r20
    ab3e:	60 e0       	ldi	r22, 0x00	; 0
    ab40:	49 83       	std	Y+1, r20	; 0x01
    ab42:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    ab46:	49 81       	ldd	r20, Y+1	; 0x01
    ab48:	88 23       	and	r24, r24
    ab4a:	11 f0       	breq	.+4      	; 0xab50 <_Z12menuMainViewh+0x5b8>
    ab4c:	22 e0       	ldi	r18, 0x02	; 2
    ab4e:	01 c0       	rjmp	.+2      	; 0xab52 <_Z12menuMainViewh+0x5ba>
    ab50:	20 e0       	ldi	r18, 0x00	; 0
    ab52:	8a e0       	ldi	r24, 0x0A	; 10
    ab54:	6a 2d       	mov	r22, r10
    ab56:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    ab5a:	08 94       	sec
    ab5c:	81 1c       	adc	r8, r1
    ab5e:	91 1c       	adc	r9, r1
    ab60:	a8 e0       	ldi	r26, 0x08	; 8
    ab62:	aa 0e       	add	r10, r26
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    ab64:	48 2d       	mov	r20, r8
    ab66:	4c 0d       	add	r20, r12
    ab68:	94 01       	movw	r18, r8
    ab6a:	20 0f       	add	r18, r16
    ab6c:	31 1f       	adc	r19, r17
  }
  else if (view == e_inputs) {
    doMainScreenGrphics();
    int8_t a = (g_eeGeneral.view == e_inputs) ? 1 : 4+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    int8_t b = (g_eeGeneral.view == e_inputs) ? 7 : 7+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    for(int8_t i=a; i<(a+3); i++) putsSwitches(2*FW-2,  (i-a)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    ab6e:	e2 16       	cp	r14, r18
    ab70:	f3 06       	cpc	r15, r19
    ab72:	24 f7       	brge	.-56     	; 0xab3c <_Z12menuMainViewh+0x5a4>
    ab74:	90 e2       	ldi	r25, 0x20	; 32
    ab76:	c9 2e       	mov	r12, r25
    ab78:	aa 24       	eor	r10, r10
    ab7a:	bb 24       	eor	r11, r11
    for(int8_t i=b; i<(b+3); i++) putsSwitches(17*FW-1, (i-b)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    ab7c:	0d 2d       	mov	r16, r13
    ab7e:	11 27       	eor	r17, r17
    ab80:	07 fd       	sbrc	r16, 7
    ab82:	10 95       	com	r17
    ab84:	82 e0       	ldi	r24, 0x02	; 2
    ab86:	e8 2e       	mov	r14, r24
    ab88:	f1 2c       	mov	r15, r1
    ab8a:	e0 0e       	add	r14, r16
    ab8c:	f1 1e       	adc	r15, r17
    ab8e:	14 c0       	rjmp	.+40     	; 0xabb8 <_Z12menuMainViewh+0x620>
    ab90:	84 2f       	mov	r24, r20
    ab92:	60 e0       	ldi	r22, 0x00	; 0
    ab94:	49 83       	std	Y+1, r20	; 0x01
    ab96:	0e 94 33 0a 	call	0x1466	; 0x1466 <_Z9getSwitchab>
    ab9a:	49 81       	ldd	r20, Y+1	; 0x01
    ab9c:	88 23       	and	r24, r24
    ab9e:	11 f0       	breq	.+4      	; 0xaba4 <_Z12menuMainViewh+0x60c>
    aba0:	22 e0       	ldi	r18, 0x02	; 2
    aba2:	01 c0       	rjmp	.+2      	; 0xaba6 <_Z12menuMainViewh+0x60e>
    aba4:	20 e0       	ldi	r18, 0x00	; 0
    aba6:	85 e6       	ldi	r24, 0x65	; 101
    aba8:	6c 2d       	mov	r22, r12
    abaa:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    abae:	08 94       	sec
    abb0:	a1 1c       	adc	r10, r1
    abb2:	b1 1c       	adc	r11, r1
    abb4:	b8 e0       	ldi	r27, 0x08	; 8
    abb6:	cb 0e       	add	r12, r27
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    abb8:	4a 2d       	mov	r20, r10
    abba:	4d 0d       	add	r20, r13
    abbc:	95 01       	movw	r18, r10
    abbe:	20 0f       	add	r18, r16
    abc0:	31 1f       	adc	r19, r17
  else if (view == e_inputs) {
    doMainScreenGrphics();
    int8_t a = (g_eeGeneral.view == e_inputs) ? 1 : 4+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    int8_t b = (g_eeGeneral.view == e_inputs) ? 7 : 7+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    for(int8_t i=a; i<(a+3); i++) putsSwitches(2*FW-2,  (i-a)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    for(int8_t i=b; i<(b+3); i++) putsSwitches(17*FW-1, (i-b)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    abc2:	e2 16       	cp	r14, r18
    abc4:	f3 06       	cpc	r15, r19
    abc6:	24 f7       	brge	.-56     	; 0xab90 <_Z12menuMainViewh+0x5f8>
    abc8:	16 c4       	rjmp	.+2092   	; 0xb3f6 <_Z12menuMainViewh+0xe5e>
  }

#if defined(FRSKY)
  else if (view == e_telemetry) {
    abca:	14 30       	cpi	r17, 0x04	; 4
    abcc:	09 f0       	breq	.+2      	; 0xabd0 <_Z12menuMainViewh+0x638>
    abce:	09 c4       	rjmp	.+2066   	; 0xb3e2 <_Z12menuMainViewh+0xe4a>
    static uint8_t displayCount = 0;
    static uint8_t staticTelemetry[2];
    static uint8_t staticRSSI[2];
    static bool alarmRaised[2];

    if (frskyStreaming) {
    abd0:	80 91 64 1f 	lds	r24, 0x1F64
    abd4:	88 23       	and	r24, r24
    abd6:	09 f4       	brne	.+2      	; 0xabda <_Z12menuMainViewh+0x642>
    abd8:	d2 c3       	rjmp	.+1956   	; 0xb37e <_Z12menuMainViewh+0xde6>
      uint8_t y0, x0, val, blink;
      if (!displayCount) {
    abda:	80 91 a9 19 	lds	r24, 0x19A9
    abde:	88 23       	and	r24, r24
    abe0:	d1 f4       	brne	.+52     	; 0xac16 <_Z12menuMainViewh+0x67e>
        for (int i=0; i<2; i++) {
          staticTelemetry[i] = frskyTelemetry[i].value;
    abe2:	80 91 65 1f 	lds	r24, 0x1F65
    abe6:	80 93 a7 19 	sts	0x19A7, r24
          staticRSSI[i] = frskyRSSI[i].value;
    abea:	80 91 6b 1f 	lds	r24, 0x1F6B
    abee:	80 93 a5 19 	sts	0x19A5, r24
          alarmRaised[i] = FRSKY_alarmRaised(i);
    abf2:	80 e0       	ldi	r24, 0x00	; 0
    abf4:	0e 94 06 a4 	call	0x1480c	; 0x1480c <_Z17FRSKY_alarmRaisedh>
    abf8:	80 93 a3 19 	sts	0x19A3, r24

    if (frskyStreaming) {
      uint8_t y0, x0, val, blink;
      if (!displayCount) {
        for (int i=0; i<2; i++) {
          staticTelemetry[i] = frskyTelemetry[i].value;
    abfc:	80 91 68 1f 	lds	r24, 0x1F68
    ac00:	80 93 a8 19 	sts	0x19A8, r24
          staticRSSI[i] = frskyRSSI[i].value;
    ac04:	80 91 6e 1f 	lds	r24, 0x1F6E
    ac08:	80 93 a6 19 	sts	0x19A6, r24
          alarmRaised[i] = FRSKY_alarmRaised(i);
    ac0c:	81 e0       	ldi	r24, 0x01	; 1
    ac0e:	0e 94 06 a4 	call	0x1480c	; 0x1480c <_Z17FRSKY_alarmRaisedh>
    ac12:	80 93 a4 19 	sts	0x19A4, r24
        }
      }
      displayCount = (displayCount+1) % 50;
    ac16:	80 91 a9 19 	lds	r24, 0x19A9
    ac1a:	90 e0       	ldi	r25, 0x00	; 0
    ac1c:	01 96       	adiw	r24, 0x01	; 1
    ac1e:	62 e3       	ldi	r22, 0x32	; 50
    ac20:	70 e0       	ldi	r23, 0x00	; 0
    ac22:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    ac26:	80 93 a9 19 	sts	0x19A9, r24
      if (g_eeGeneral.view == e_telemetry+ALTERNATE_VIEW) { // if on first alternate telemetry view
    ac2a:	80 91 80 12 	lds	r24, 0x1280
    ac2e:	84 31       	cpi	r24, 0x14	; 20
    ac30:	09 f0       	breq	.+2      	; 0xac34 <_Z12menuMainViewh+0x69c>
    ac32:	df c0       	rjmp	.+446    	; 0xadf2 <_Z12menuMainViewh+0x85a>
          if (c) lcd_putc(ii*FW, 1*FH, c);
        }
        //////////////////////////////////////////
#endif

        if (g_model.frsky.channels[0].ratio || g_model.frsky.channels[1].ratio) {
    ac34:	80 91 57 15 	lds	r24, 0x1557
    ac38:	20 91 58 15 	lds	r18, 0x1558
    ac3c:	92 2f       	mov	r25, r18
    ac3e:	9f 70       	andi	r25, 0x0F	; 15
    ac40:	00 97       	sbiw	r24, 0x00	; 0
    ac42:	49 f4       	brne	.+18     	; 0xac56 <_Z12menuMainViewh+0x6be>
    ac44:	80 91 5e 15 	lds	r24, 0x155E
    ac48:	20 91 5f 15 	lds	r18, 0x155F
    ac4c:	92 2f       	mov	r25, r18
    ac4e:	9f 70       	andi	r25, 0x0F	; 15
    ac50:	00 97       	sbiw	r24, 0x00	; 0
    ac52:	09 f4       	brne	.+2      	; 0xac56 <_Z12menuMainViewh+0x6be>
    ac54:	95 c0       	rjmp	.+298    	; 0xad80 <_Z12menuMainViewh+0x7e8>
    ac56:	b6 e6       	ldi	r27, 0x66	; 102
    ac58:	ab 2e       	mov	r10, r27
    ac5a:	bf e1       	ldi	r27, 0x1F	; 31
    ac5c:	bb 2e       	mov	r11, r27
  else if (view == e_inputs) {
    doMainScreenGrphics();
    int8_t a = (g_eeGeneral.view == e_inputs) ? 1 : 4+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    int8_t b = (g_eeGeneral.view == e_inputs) ? 7 : 7+(g_eeGeneral.view/ALTERNATE_VIEW)*6;
    for(int8_t i=a; i<(a+3); i++) putsSwitches(2*FW-2,  (i-a)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    for(int8_t i=b; i<(b+3); i++) putsSwitches(17*FW-1, (i-b)*FH+4*FH, i, getSwitch(i, 0) ? INVERS : 0);
    ac5e:	66 24       	eor	r6, r6
    ac60:	77 24       	eor	r7, r7
    ac62:	dd 24       	eor	r13, r13
#endif

        if (g_model.frsky.channels[0].ratio || g_model.frsky.channels[1].ratio) {
          x0 = 0;
          for (int i=0; i<2; i++) {
            if (g_model.frsky.channels[i].ratio) {
    ac64:	f3 01       	movw	r30, r6
    ac66:	a3 e0       	ldi	r26, 0x03	; 3
    ac68:	ee 0f       	add	r30, r30
    ac6a:	ff 1f       	adc	r31, r31
    ac6c:	aa 95       	dec	r26
    ac6e:	e1 f7       	brne	.-8      	; 0xac68 <_Z12menuMainViewh+0x6d0>
    ac70:	e6 19       	sub	r30, r6
    ac72:	f7 09       	sbc	r31, r7
    ac74:	e9 5a       	subi	r30, 0xA9	; 169
    ac76:	fa 4e       	sbci	r31, 0xEA	; 234
    ac78:	80 81       	ld	r24, Z
    ac7a:	21 81       	ldd	r18, Z+1	; 0x01
    ac7c:	92 2f       	mov	r25, r18
    ac7e:	9f 70       	andi	r25, 0x0F	; 15
    ac80:	00 97       	sbiw	r24, 0x00	; 0
    ac82:	09 f4       	brne	.+2      	; 0xac86 <_Z12menuMainViewh+0x6ee>
    ac84:	71 c0       	rjmp	.+226    	; 0xad68 <_Z12menuMainViewh+0x7d0>
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    ac86:	f3 01       	movw	r30, r6
    ac88:	ed 55       	subi	r30, 0x5D	; 93
    ac8a:	f6 4e       	sbci	r31, 0xE6	; 230

        if (g_model.frsky.channels[0].ratio || g_model.frsky.channels[1].ratio) {
          x0 = 0;
          for (int i=0; i<2; i++) {
            if (g_model.frsky.channels[i].ratio) {
              blink = (alarmRaised[i] ? INVERS : 0);
    ac8c:	80 81       	ld	r24, Z
    ac8e:	88 23       	and	r24, r24
    ac90:	11 f0       	breq	.+4      	; 0xac96 <_Z12menuMainViewh+0x6fe>
    ac92:	32 e0       	ldi	r19, 0x02	; 2
    ac94:	01 c0       	rjmp	.+2      	; 0xac98 <_Z12menuMainViewh+0x700>
    ac96:	30 e0       	ldi	r19, 0x00	; 0
              lcd_puts_P(x0, 3*FH, PSTR("A ="));
    ac98:	8d 2d       	mov	r24, r13
    ac9a:	68 e1       	ldi	r22, 0x18	; 24
    ac9c:	4e ea       	ldi	r20, 0xAE	; 174
    ac9e:	59 e0       	ldi	r21, 0x09	; 9
    aca0:	39 83       	std	Y+1, r19	; 0x01
    aca2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    aca6:	46 2d       	mov	r20, r6
    aca8:	4f 5c       	subi	r20, 0xCF	; 207
          x0 = 0;
          for (int i=0; i<2; i++) {
            if (g_model.frsky.channels[i].ratio) {
              blink = (alarmRaised[i] ? INVERS : 0);
              lcd_puts_P(x0, 3*FH, PSTR("A ="));
              lcd_putc(x0+FW, 3*FH, '1'+i);
    acaa:	8d 2d       	mov	r24, r13
    acac:	8a 5f       	subi	r24, 0xFA	; 250
    acae:	68 e1       	ldi	r22, 0x18	; 24
    acb0:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
              x0 += 3*FW;
    acb4:	e2 e1       	ldi	r30, 0x12	; 18
    acb6:	ce 2e       	mov	r12, r30
    acb8:	cd 0c       	add	r12, r13
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    acba:	f3 01       	movw	r30, r6
    acbc:	e9 55       	subi	r30, 0x59	; 89
    acbe:	f6 4e       	sbci	r31, 0xE6	; 230
            if (g_model.frsky.channels[i].ratio) {
              blink = (alarmRaised[i] ? INVERS : 0);
              lcd_puts_P(x0, 3*FH, PSTR("A ="));
              lcd_putc(x0+FW, 3*FH, '1'+i);
              x0 += 3*FW;
              val = frskyComputeVolts(staticTelemetry[i], g_model.frsky.channels[i].ratio);
    acc0:	83 01       	movw	r16, r6
    acc2:	73 e0       	ldi	r23, 0x03	; 3
    acc4:	00 0f       	add	r16, r16
    acc6:	11 1f       	adc	r17, r17
    acc8:	7a 95       	dec	r23
    acca:	e1 f7       	brne	.-8      	; 0xacc4 <_Z12menuMainViewh+0x72c>
    accc:	06 19       	sub	r16, r6
    acce:	17 09       	sbc	r17, r7
    acd0:	67 e5       	ldi	r22, 0x57	; 87
    acd2:	e6 2e       	mov	r14, r22
    acd4:	65 e1       	ldi	r22, 0x15	; 21
    acd6:	f6 2e       	mov	r15, r22
    acd8:	e0 0e       	add	r14, r16
    acda:	f1 1e       	adc	r15, r17
    acdc:	d7 01       	movw	r26, r14
    acde:	6c 91       	ld	r22, X
    ace0:	11 96       	adiw	r26, 0x01	; 1
    ace2:	7c 91       	ld	r23, X
    ace4:	7f 70       	andi	r23, 0x0F	; 15
    ace6:	80 81       	ld	r24, Z
    ace8:	41 e0       	ldi	r20, 0x01	; 1
    acea:	0e 94 61 a2 	call	0x144c2	; 0x144c2 <_Z17frskyComputeVoltshjh>
    acee:	48 2f       	mov	r20, r24
              putsTelemetry(x0, 2*FH, val, g_model.frsky.channels[i].type, blink|DBLSIZE|LEFT);
    acf0:	58 e5       	ldi	r21, 0x58	; 88
    acf2:	85 2e       	mov	r8, r21
    acf4:	55 e1       	ldi	r21, 0x15	; 21
    acf6:	95 2e       	mov	r9, r21
    acf8:	80 0e       	add	r8, r16
    acfa:	91 1e       	adc	r9, r17
    acfc:	f4 01       	movw	r30, r8
    acfe:	20 81       	ld	r18, Z
    ad00:	22 95       	swap	r18
    ad02:	2f 70       	andi	r18, 0x0F	; 15
    ad04:	39 81       	ldd	r19, Y+1	; 0x01
    ad06:	03 2f       	mov	r16, r19
    ad08:	04 68       	ori	r16, 0x84	; 132
    ad0a:	8c 2d       	mov	r24, r12
    ad0c:	60 e1       	ldi	r22, 0x10	; 16
    ad0e:	0e 94 7c 6c 	call	0xd8f8	; 0xd8f8 <_Z13putsTelemetryhhhhh>
              val = frskyComputeVolts(frskyTelemetry[i].min, g_model.frsky.channels[i].ratio);
    ad12:	d7 01       	movw	r26, r14
    ad14:	6c 91       	ld	r22, X
    ad16:	11 96       	adiw	r26, 0x01	; 1
    ad18:	7c 91       	ld	r23, X
    ad1a:	7f 70       	andi	r23, 0x0F	; 15
    ad1c:	f5 01       	movw	r30, r10
    ad1e:	80 81       	ld	r24, Z
    ad20:	41 e0       	ldi	r20, 0x01	; 1
    ad22:	0e 94 61 a2 	call	0x144c2	; 0x144c2 <_Z17frskyComputeVoltshjh>
    ad26:	48 2f       	mov	r20, r24
              putsTelemetry(x0, 4*FH, val, g_model.frsky.channels[i].type, 0);
    ad28:	d4 01       	movw	r26, r8
    ad2a:	2c 91       	ld	r18, X
    ad2c:	22 95       	swap	r18
    ad2e:	2f 70       	andi	r18, 0x0F	; 15
    ad30:	8c 2d       	mov	r24, r12
    ad32:	60 e2       	ldi	r22, 0x20	; 32
    ad34:	00 e0       	ldi	r16, 0x00	; 0
    ad36:	0e 94 7c 6c 	call	0xd8f8	; 0xd8f8 <_Z13putsTelemetryhhhhh>
              val = frskyComputeVolts(frskyTelemetry[i].max, g_model.frsky.channels[i].ratio);
    ad3a:	f7 01       	movw	r30, r14
    ad3c:	60 81       	ld	r22, Z
    ad3e:	71 81       	ldd	r23, Z+1	; 0x01
    ad40:	7f 70       	andi	r23, 0x0F	; 15
    ad42:	d5 01       	movw	r26, r10
    ad44:	11 96       	adiw	r26, 0x01	; 1
    ad46:	8c 91       	ld	r24, X
    ad48:	41 e0       	ldi	r20, 0x01	; 1
    ad4a:	0e 94 61 a2 	call	0x144c2	; 0x144c2 <_Z17frskyComputeVoltshjh>
    ad4e:	48 2f       	mov	r20, r24
              putsTelemetry(x0+3*FW, 4*FH, val, g_model.frsky.channels[i].type, LEFT);
    ad50:	f4 01       	movw	r30, r8
    ad52:	20 81       	ld	r18, Z
    ad54:	22 95       	swap	r18
    ad56:	2f 70       	andi	r18, 0x0F	; 15
    ad58:	8d 2d       	mov	r24, r13
    ad5a:	8c 5d       	subi	r24, 0xDC	; 220
    ad5c:	60 e2       	ldi	r22, 0x20	; 32
    ad5e:	00 e8       	ldi	r16, 0x80	; 128
    ad60:	0e 94 7c 6c 	call	0xd8f8	; 0xd8f8 <_Z13putsTelemetryhhhhh>
              x0 = 11*FW-2;
    ad64:	30 e4       	ldi	r19, 0x40	; 64
    ad66:	d3 2e       	mov	r13, r19
        //////////////////////////////////////////
#endif

        if (g_model.frsky.channels[0].ratio || g_model.frsky.channels[1].ratio) {
          x0 = 0;
          for (int i=0; i<2; i++) {
    ad68:	08 94       	sec
    ad6a:	61 1c       	adc	r6, r1
    ad6c:	71 1c       	adc	r7, r1
    ad6e:	23 e0       	ldi	r18, 0x03	; 3
    ad70:	30 e0       	ldi	r19, 0x00	; 0
    ad72:	a2 0e       	add	r10, r18
    ad74:	b3 1e       	adc	r11, r19
    ad76:	32 e0       	ldi	r19, 0x02	; 2
    ad78:	63 16       	cp	r6, r19
    ad7a:	71 04       	cpc	r7, r1
    ad7c:	09 f0       	breq	.+2      	; 0xad80 <_Z12menuMainViewh+0x7e8>
    ad7e:	72 cf       	rjmp	.-284    	; 0xac64 <_Z12menuMainViewh+0x6cc>
              x0 = 11*FW-2;
            }
          }
        }

        lcd_puts_P(0, 6*FH, PSTR("Rx="));
    ad80:	80 e0       	ldi	r24, 0x00	; 0
    ad82:	60 e3       	ldi	r22, 0x30	; 48
    ad84:	4a ea       	ldi	r20, 0xAA	; 170
    ad86:	59 e0       	ldi	r21, 0x09	; 9
    ad88:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(3 * FW - 2, 5*FH+2, staticRSSI[0], DBLSIZE|LEFT);
    ad8c:	40 91 a5 19 	lds	r20, 0x19A5
    ad90:	80 e1       	ldi	r24, 0x10	; 16
    ad92:	6a e2       	ldi	r22, 0x2A	; 42
    ad94:	50 e0       	ldi	r21, 0x00	; 0
    ad96:	24 e8       	ldi	r18, 0x84	; 132
    ad98:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_outdezAtt(4 * FW, 7*FH, frskyRSSI[0].min, 0);
    ad9c:	40 91 6c 1f 	lds	r20, 0x1F6C
    ada0:	88 e1       	ldi	r24, 0x18	; 24
    ada2:	68 e3       	ldi	r22, 0x38	; 56
    ada4:	50 e0       	ldi	r21, 0x00	; 0
    ada6:	20 e0       	ldi	r18, 0x00	; 0
    ada8:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_outdezAtt(6 * FW, 7*FH, frskyRSSI[0].max, LEFT);
    adac:	40 91 6d 1f 	lds	r20, 0x1F6D
    adb0:	84 e2       	ldi	r24, 0x24	; 36
    adb2:	68 e3       	ldi	r22, 0x38	; 56
    adb4:	50 e0       	ldi	r21, 0x00	; 0
    adb6:	20 e8       	ldi	r18, 0x80	; 128
    adb8:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_puts_P(11 * FW - 2, 6*FH, PSTR("Tx="));
    adbc:	80 e4       	ldi	r24, 0x40	; 64
    adbe:	60 e3       	ldi	r22, 0x30	; 48
    adc0:	46 ea       	ldi	r20, 0xA6	; 166
    adc2:	59 e0       	ldi	r21, 0x09	; 9
    adc4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(14 * FW - 4, 5*FH+2, staticRSSI[1], DBLSIZE|LEFT);
    adc8:	40 91 a6 19 	lds	r20, 0x19A6
    adcc:	80 e5       	ldi	r24, 0x50	; 80
    adce:	6a e2       	ldi	r22, 0x2A	; 42
    add0:	50 e0       	ldi	r21, 0x00	; 0
    add2:	24 e8       	ldi	r18, 0x84	; 132
    add4:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_outdezAtt(15 * FW - 2, 7*FH, frskyRSSI[1].min, 0);
    add8:	40 91 6f 1f 	lds	r20, 0x1F6F
    addc:	88 e5       	ldi	r24, 0x58	; 88
    adde:	68 e3       	ldi	r22, 0x38	; 56
    ade0:	50 e0       	ldi	r21, 0x00	; 0
    ade2:	20 e0       	ldi	r18, 0x00	; 0
    ade4:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_outdezAtt(17 * FW - 2, 7*FH, frskyRSSI[1].max, LEFT);
    ade8:	40 91 70 1f 	lds	r20, 0x1F70
    adec:	84 e6       	ldi	r24, 0x64	; 100
    adee:	68 e3       	ldi	r22, 0x38	; 56
    adf0:	c1 c2       	rjmp	.+1410   	; 0xb374 <_Z12menuMainViewh+0xddc>
      }
#ifdef FRSKY_HUB
      else if (g_eeGeneral.view == e_telemetry+2*ALTERNATE_VIEW) { // if on second alternate telemetry view
    adf2:	84 32       	cpi	r24, 0x24	; 36
    adf4:	09 f0       	breq	.+2      	; 0xadf8 <_Z12menuMainViewh+0x860>
    adf6:	56 c1       	rjmp	.+684    	; 0xb0a4 <_Z12menuMainViewh+0xb0c>
        // Date
        lcd_outdezNAtt(1*FW, 1*FH, frskyHubData.year+2000, LEFT, 4);
    adf8:	40 91 97 1f 	lds	r20, 0x1F97
    adfc:	50 91 98 1f 	lds	r21, 0x1F98
    ae00:	40 53       	subi	r20, 0x30	; 48
    ae02:	58 4f       	sbci	r21, 0xF8	; 248
    ae04:	86 e0       	ldi	r24, 0x06	; 6
    ae06:	68 e0       	ldi	r22, 0x08	; 8
    ae08:	20 e8       	ldi	r18, 0x80	; 128
    ae0a:	04 e0       	ldi	r16, 0x04	; 4
    ae0c:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, 1*FH, '-');
    ae10:	80 91 02 1f 	lds	r24, 0x1F02
    ae14:	68 e0       	ldi	r22, 0x08	; 8
    ae16:	4d e2       	ldi	r20, 0x2D	; 45
    ae18:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        lcd_outdezNAtt(lcd_lastPos+FW, 1*FH, frskyHubData.month, LEFT|LEADING0, 2);
    ae1c:	80 91 02 1f 	lds	r24, 0x1F02
    ae20:	40 91 96 1f 	lds	r20, 0x1F96
    ae24:	8a 5f       	subi	r24, 0xFA	; 250
    ae26:	68 e0       	ldi	r22, 0x08	; 8
    ae28:	50 e0       	ldi	r21, 0x00	; 0
    ae2a:	20 e9       	ldi	r18, 0x90	; 144
    ae2c:	02 e0       	ldi	r16, 0x02	; 2
    ae2e:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, 1*FH, '-');
    ae32:	80 91 02 1f 	lds	r24, 0x1F02
    ae36:	68 e0       	ldi	r22, 0x08	; 8
    ae38:	4d e2       	ldi	r20, 0x2D	; 45
    ae3a:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        lcd_outdezNAtt(lcd_lastPos+FW, 1*FH, frskyHubData.day, LEFT|LEADING0, 2);
    ae3e:	80 91 02 1f 	lds	r24, 0x1F02
    ae42:	40 91 95 1f 	lds	r20, 0x1F95
    ae46:	8a 5f       	subi	r24, 0xFA	; 250
    ae48:	68 e0       	ldi	r22, 0x08	; 8
    ae4a:	50 e0       	ldi	r21, 0x00	; 0
    ae4c:	20 e9       	ldi	r18, 0x90	; 144
    ae4e:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>

        // Time
        lcd_outdezNAtt(FW*10+8, 1*FH, frskyHubData.hour, LEFT|LEADING0, 2);
    ae52:	40 91 99 1f 	lds	r20, 0x1F99
    ae56:	84 e4       	ldi	r24, 0x44	; 68
    ae58:	68 e0       	ldi	r22, 0x08	; 8
    ae5a:	50 e0       	ldi	r21, 0x00	; 0
    ae5c:	20 e9       	ldi	r18, 0x90	; 144
    ae5e:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, 1*FH, ':');
    ae62:	80 91 02 1f 	lds	r24, 0x1F02
    ae66:	68 e0       	ldi	r22, 0x08	; 8
    ae68:	4a e3       	ldi	r20, 0x3A	; 58
    ae6a:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        lcd_outdezNAtt(lcd_lastPos+FW, 1*FH, frskyHubData.min, LEFT|LEADING0, 2);
    ae6e:	80 91 02 1f 	lds	r24, 0x1F02
    ae72:	40 91 9a 1f 	lds	r20, 0x1F9A
    ae76:	8a 5f       	subi	r24, 0xFA	; 250
    ae78:	68 e0       	ldi	r22, 0x08	; 8
    ae7a:	50 e0       	ldi	r21, 0x00	; 0
    ae7c:	20 e9       	ldi	r18, 0x90	; 144
    ae7e:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, 1*FH, ':');
    ae82:	80 91 02 1f 	lds	r24, 0x1F02
    ae86:	68 e0       	ldi	r22, 0x08	; 8
    ae88:	4a e3       	ldi	r20, 0x3A	; 58
    ae8a:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        lcd_outdezNAtt(lcd_lastPos+FW, 1*FH, frskyHubData.sec, LEFT|LEADING0, 2);
    ae8e:	80 91 02 1f 	lds	r24, 0x1F02
    ae92:	40 91 9b 1f 	lds	r20, 0x1F9B
    ae96:	50 91 9c 1f 	lds	r21, 0x1F9C
    ae9a:	8a 5f       	subi	r24, 0xFA	; 250
    ae9c:	68 e0       	ldi	r22, 0x08	; 8
    ae9e:	20 e9       	ldi	r18, 0x90	; 144
    aea0:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>

        // Longitude
        lcd_outdezAtt(FW*3-2, 3*FH,  frskyHubData.gpsLongitude_bp / 100, 0); // ddd before '.'
    aea4:	80 91 8f 1f 	lds	r24, 0x1F8F
    aea8:	90 91 90 1f 	lds	r25, 0x1F90
    aeac:	04 e6       	ldi	r16, 0x64	; 100
    aeae:	10 e0       	ldi	r17, 0x00	; 0
    aeb0:	b8 01       	movw	r22, r16
    aeb2:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    aeb6:	ab 01       	movw	r20, r22
    aeb8:	80 e1       	ldi	r24, 0x10	; 16
    aeba:	68 e1       	ldi	r22, 0x18	; 24
    aebc:	20 e0       	ldi	r18, 0x00	; 0
    aebe:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_putc(lcd_lastPos, 3*FH, '@');
    aec2:	80 91 02 1f 	lds	r24, 0x1F02
    aec6:	68 e1       	ldi	r22, 0x18	; 24
    aec8:	40 e4       	ldi	r20, 0x40	; 64
    aeca:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        uint8_t mn = frskyHubData.gpsLongitude_bp % 100;
        lcd_outdezNAtt(lcd_lastPos+FW, 3*FH, mn, LEFT|LEADING0, 2); // mm before '.'
    aece:	20 91 02 1f 	lds	r18, 0x1F02
        lcd_outdezNAtt(lcd_lastPos+FW, 1*FH, frskyHubData.sec, LEFT|LEADING0, 2);

        // Longitude
        lcd_outdezAtt(FW*3-2, 3*FH,  frskyHubData.gpsLongitude_bp / 100, 0); // ddd before '.'
        lcd_putc(lcd_lastPos, 3*FH, '@');
        uint8_t mn = frskyHubData.gpsLongitude_bp % 100;
    aed2:	80 91 8f 1f 	lds	r24, 0x1F8F
    aed6:	90 91 90 1f 	lds	r25, 0x1F90
    aeda:	b8 01       	movw	r22, r16
    aedc:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    aee0:	48 2f       	mov	r20, r24
        lcd_outdezNAtt(lcd_lastPos+FW, 3*FH, mn, LEFT|LEADING0, 2); // mm before '.'
    aee2:	82 2f       	mov	r24, r18
    aee4:	8a 5f       	subi	r24, 0xFA	; 250
    aee6:	68 e1       	ldi	r22, 0x18	; 24
    aee8:	50 e0       	ldi	r21, 0x00	; 0
    aeea:	20 e9       	ldi	r18, 0x90	; 144
    aeec:	02 e0       	ldi	r16, 0x02	; 2
    aeee:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_plot(lcd_lastPos, 4*FH-2, 0); // small decimal point
    aef2:	80 91 02 1f 	lds	r24, 0x1F02
    aef6:	6e e1       	ldi	r22, 0x1E	; 30
    aef8:	40 e0       	ldi	r20, 0x00	; 0
    aefa:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_outdezNAtt(lcd_lastPos+2, 3*FH, frskyHubData.gpsLongitude_ap, LEFT|UNSIGN|LEADING0, 4); // after '.'
    aefe:	80 91 02 1f 	lds	r24, 0x1F02
    af02:	40 91 9f 1f 	lds	r20, 0x1F9F
    af06:	50 91 a0 1f 	lds	r21, 0x1FA0
    af0a:	8e 5f       	subi	r24, 0xFE	; 254
    af0c:	68 e1       	ldi	r22, 0x18	; 24
    af0e:	28 e9       	ldi	r18, 0x98	; 152
    af10:	04 e0       	ldi	r16, 0x04	; 4
    af12:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos+1, 3*FH, frskyHubData.gpsLongitudeEW ? frskyHubData.gpsLongitudeEW : '-');
    af16:	80 91 02 1f 	lds	r24, 0x1F02
    af1a:	8f 5f       	subi	r24, 0xFF	; 255
    af1c:	40 91 a5 1f 	lds	r20, 0x1FA5
    af20:	50 91 a6 1f 	lds	r21, 0x1FA6
    af24:	41 15       	cp	r20, r1
    af26:	51 05       	cpc	r21, r1
    af28:	09 f4       	brne	.+2      	; 0xaf2c <_Z12menuMainViewh+0x994>
    af2a:	4d e2       	ldi	r20, 0x2D	; 45
    af2c:	68 e1       	ldi	r22, 0x18	; 24
    af2e:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

        // Latitude
        lcd_outdezAtt(lcd_lastPos+3*FW+3, 3*FH,  frskyHubData.gpsLatitude_bp / 100, 0); // ddd before '.'
    af32:	20 91 02 1f 	lds	r18, 0x1F02
    af36:	80 91 91 1f 	lds	r24, 0x1F91
    af3a:	90 91 92 1f 	lds	r25, 0x1F92
    af3e:	04 e6       	ldi	r16, 0x64	; 100
    af40:	10 e0       	ldi	r17, 0x00	; 0
    af42:	b8 01       	movw	r22, r16
    af44:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    af48:	ab 01       	movw	r20, r22
    af4a:	82 2f       	mov	r24, r18
    af4c:	8b 5e       	subi	r24, 0xEB	; 235
    af4e:	68 e1       	ldi	r22, 0x18	; 24
    af50:	20 e0       	ldi	r18, 0x00	; 0
    af52:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_putc(lcd_lastPos, 3*FH, '@');
    af56:	80 91 02 1f 	lds	r24, 0x1F02
    af5a:	68 e1       	ldi	r22, 0x18	; 24
    af5c:	40 e4       	ldi	r20, 0x40	; 64
    af5e:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        mn = frskyHubData.gpsLatitude_bp % 100;
        lcd_outdezNAtt(lcd_lastPos+FW, 3*FH, mn, LEFT|LEADING0, 2); // mm before '.'
    af62:	20 91 02 1f 	lds	r18, 0x1F02
        lcd_putc(lcd_lastPos+1, 3*FH, frskyHubData.gpsLongitudeEW ? frskyHubData.gpsLongitudeEW : '-');

        // Latitude
        lcd_outdezAtt(lcd_lastPos+3*FW+3, 3*FH,  frskyHubData.gpsLatitude_bp / 100, 0); // ddd before '.'
        lcd_putc(lcd_lastPos, 3*FH, '@');
        mn = frskyHubData.gpsLatitude_bp % 100;
    af66:	80 91 91 1f 	lds	r24, 0x1F91
    af6a:	90 91 92 1f 	lds	r25, 0x1F92
    af6e:	b8 01       	movw	r22, r16
    af70:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    af74:	48 2f       	mov	r20, r24
        lcd_outdezNAtt(lcd_lastPos+FW, 3*FH, mn, LEFT|LEADING0, 2); // mm before '.'
    af76:	82 2f       	mov	r24, r18
    af78:	8a 5f       	subi	r24, 0xFA	; 250
    af7a:	68 e1       	ldi	r22, 0x18	; 24
    af7c:	50 e0       	ldi	r21, 0x00	; 0
    af7e:	20 e9       	ldi	r18, 0x90	; 144
    af80:	02 e0       	ldi	r16, 0x02	; 2
    af82:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_plot(lcd_lastPos, 4*FH-2, 0); // small decimal point
    af86:	80 91 02 1f 	lds	r24, 0x1F02
    af8a:	6e e1       	ldi	r22, 0x1E	; 30
    af8c:	40 e0       	ldi	r20, 0x00	; 0
    af8e:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_outdezNAtt(lcd_lastPos+2, 3*FH, frskyHubData.gpsLatitude_ap, LEFT|UNSIGN|LEADING0, 4); // after '.'
    af92:	80 91 02 1f 	lds	r24, 0x1F02
    af96:	40 91 a1 1f 	lds	r20, 0x1FA1
    af9a:	50 91 a2 1f 	lds	r21, 0x1FA2
    af9e:	8e 5f       	subi	r24, 0xFE	; 254
    afa0:	68 e1       	ldi	r22, 0x18	; 24
    afa2:	28 e9       	ldi	r18, 0x98	; 152
    afa4:	04 e0       	ldi	r16, 0x04	; 4
    afa6:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos+1, 3*FH, frskyHubData.gpsLatitudeNS ? frskyHubData.gpsLatitudeNS : '-');
    afaa:	80 91 02 1f 	lds	r24, 0x1F02
    afae:	8f 5f       	subi	r24, 0xFF	; 255
    afb0:	40 91 a7 1f 	lds	r20, 0x1FA7
    afb4:	50 91 a8 1f 	lds	r21, 0x1FA8
    afb8:	41 15       	cp	r20, r1
    afba:	51 05       	cpc	r21, r1
    afbc:	09 f4       	brne	.+2      	; 0xafc0 <_Z12menuMainViewh+0xa28>
    afbe:	4d e2       	ldi	r20, 0x2D	; 45
    afc0:	68 e1       	ldi	r22, 0x18	; 24
    afc2:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

        // Course / Heading
        lcd_puts_P(5, 5*FH, PSTR("Hdg:"));
    afc6:	85 e0       	ldi	r24, 0x05	; 5
    afc8:	68 e2       	ldi	r22, 0x28	; 40
    afca:	41 ea       	ldi	r20, 0xA1	; 161
    afcc:	59 e0       	ldi	r21, 0x09	; 9
    afce:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, 5*FH, frskyHubData.gpsCourse_bp, LEFT|LEADING0, 3); // before '.'
    afd2:	40 91 93 1f 	lds	r20, 0x1F93
    afd6:	50 91 94 1f 	lds	r21, 0x1F94
    afda:	80 91 02 1f 	lds	r24, 0x1F02
    afde:	68 e2       	ldi	r22, 0x28	; 40
    afe0:	20 e9       	ldi	r18, 0x90	; 144
    afe2:	03 e0       	ldi	r16, 0x03	; 3
    afe4:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_plot(lcd_lastPos, 6*FH-2, 0); // small decimal point
    afe8:	80 91 02 1f 	lds	r24, 0x1F02
    afec:	6e e2       	ldi	r22, 0x2E	; 46
    afee:	40 e0       	ldi	r20, 0x00	; 0
    aff0:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_outdezAtt(lcd_lastPos+2, 5*FH, frskyHubData.gpsCourse_ap, LEFT); // after '.'
    aff4:	80 91 02 1f 	lds	r24, 0x1F02
    aff8:	40 91 a3 1f 	lds	r20, 0x1FA3
    affc:	50 91 a4 1f 	lds	r21, 0x1FA4
    b000:	8e 5f       	subi	r24, 0xFE	; 254
    b002:	68 e2       	ldi	r22, 0x28	; 40
    b004:	20 e8       	ldi	r18, 0x80	; 128
    b006:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_putc(lcd_lastPos, 5*FH, '@');
    b00a:	80 91 02 1f 	lds	r24, 0x1F02
    b00e:	68 e2       	ldi	r22, 0x28	; 40
    b010:	40 e4       	ldi	r20, 0x40	; 64
    b012:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

        // Speed
        lcd_puts_P(76, 5*FH, PSTR("Spd:"));
    b016:	8c e4       	ldi	r24, 0x4C	; 76
    b018:	68 e2       	ldi	r22, 0x28	; 40
    b01a:	4c e9       	ldi	r20, 0x9C	; 156
    b01c:	59 e0       	ldi	r21, 0x09	; 9
    b01e:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(lcd_lastPos, 5*FH, frskyHubData.gpsSpeed_bp, LEFT); // before '.'
    b022:	40 91 8d 1f 	lds	r20, 0x1F8D
    b026:	50 91 8e 1f 	lds	r21, 0x1F8E
    b02a:	80 91 02 1f 	lds	r24, 0x1F02
    b02e:	68 e2       	ldi	r22, 0x28	; 40
    b030:	20 e8       	ldi	r18, 0x80	; 128
    b032:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_plot(lcd_lastPos, 6*FH-2, 0); // small decimal point
    b036:	80 91 02 1f 	lds	r24, 0x1F02
    b03a:	6e e2       	ldi	r22, 0x2E	; 46
    b03c:	40 e0       	ldi	r20, 0x00	; 0
    b03e:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_outdezAtt(lcd_lastPos+2, 5*FH, frskyHubData.gpsSpeed_ap, LEFT|UNSIGN); // after '.'
    b042:	80 91 02 1f 	lds	r24, 0x1F02
    b046:	40 91 9d 1f 	lds	r20, 0x1F9D
    b04a:	50 91 9e 1f 	lds	r21, 0x1F9E
    b04e:	8e 5f       	subi	r24, 0xFE	; 254
    b050:	68 e2       	ldi	r22, 0x28	; 40
    b052:	28 e8       	ldi	r18, 0x88	; 136
    b054:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>

        // Altitude
        lcd_puts_P(7*FW, 7*FH, PSTR("Alt:"));
    b058:	8a e2       	ldi	r24, 0x2A	; 42
    b05a:	68 e3       	ldi	r22, 0x38	; 56
    b05c:	47 e9       	ldi	r20, 0x97	; 151
    b05e:	59 e0       	ldi	r21, 0x09	; 9
    b060:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, 7*FH, frskyHubData.gpsAltitude_bp, LEFT|LEADING0, 3); // before '.'
    b064:	40 91 7d 1f 	lds	r20, 0x1F7D
    b068:	50 91 7e 1f 	lds	r21, 0x1F7E
    b06c:	80 91 02 1f 	lds	r24, 0x1F02
    b070:	68 e3       	ldi	r22, 0x38	; 56
    b072:	20 e9       	ldi	r18, 0x90	; 144
    b074:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_plot(lcd_lastPos, 8*FH-2, 0); // small decimal point
    b078:	80 91 02 1f 	lds	r24, 0x1F02
    b07c:	6e e3       	ldi	r22, 0x3E	; 62
    b07e:	40 e0       	ldi	r20, 0x00	; 0
    b080:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        lcd_outdezAtt(lcd_lastPos+2, 7*FH, frskyHubData.gpsAltitude_ap, LEFT|UNSIGN); // after '.'
    b084:	80 91 02 1f 	lds	r24, 0x1F02
    b088:	40 91 89 1f 	lds	r20, 0x1F89
    b08c:	50 91 8a 1f 	lds	r21, 0x1F8A
    b090:	8e 5f       	subi	r24, 0xFE	; 254
    b092:	68 e3       	ldi	r22, 0x38	; 56
    b094:	28 e8       	ldi	r18, 0x88	; 136
    b096:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_putc(lcd_lastPos, 7*FH, 'm');
    b09a:	80 91 02 1f 	lds	r24, 0x1F02
    b09e:	68 e3       	ldi	r22, 0x38	; 56
    b0a0:	4d e6       	ldi	r20, 0x6D	; 109
    b0a2:	f9 c0       	rjmp	.+498    	; 0xb296 <_Z12menuMainViewh+0xcfe>
      }
      else if (g_eeGeneral.view == e_telemetry+3*ALTERNATE_VIEW) { // if on second alternate telemetry view
    b0a4:	84 33       	cpi	r24, 0x34	; 52
    b0a6:	09 f0       	breq	.+2      	; 0xb0aa <_Z12menuMainViewh+0xb12>
    b0a8:	f9 c0       	rjmp	.+498    	; 0xb29c <_Z12menuMainViewh+0xd04>

        uint8_t y = 2*FH;

        // Temperature 1
        lcd_puts_P(0, y, PSTR("Temp1:"));
    b0aa:	80 e0       	ldi	r24, 0x00	; 0
    b0ac:	60 e1       	ldi	r22, 0x10	; 16
    b0ae:	40 e9       	ldi	r20, 0x90	; 144
    b0b0:	59 e0       	ldi	r21, 0x09	; 9
    b0b2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.temperature1, LEFT);
    b0b6:	40 91 7f 1f 	lds	r20, 0x1F7F
    b0ba:	50 91 80 1f 	lds	r21, 0x1F80
    b0be:	80 91 02 1f 	lds	r24, 0x1F02
    b0c2:	60 e1       	ldi	r22, 0x10	; 16
    b0c4:	20 e8       	ldi	r18, 0x80	; 128
    b0c6:	00 e0       	ldi	r16, 0x00	; 0
    b0c8:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_puts_P(lcd_lastPos, y, PSTR("@C"));
    b0cc:	80 91 02 1f 	lds	r24, 0x1F02
    b0d0:	60 e1       	ldi	r22, 0x10	; 16
    b0d2:	4d e8       	ldi	r20, 0x8D	; 141
    b0d4:	59 e0       	ldi	r21, 0x09	; 9
    b0d6:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        y += FH;

        // Temperature 2
        lcd_puts_P(0, y, PSTR("Temp2:"));
    b0da:	80 e0       	ldi	r24, 0x00	; 0
    b0dc:	68 e1       	ldi	r22, 0x18	; 24
    b0de:	46 e8       	ldi	r20, 0x86	; 134
    b0e0:	59 e0       	ldi	r21, 0x09	; 9
    b0e2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.temperature2, LEFT);
    b0e6:	40 91 85 1f 	lds	r20, 0x1F85
    b0ea:	50 91 86 1f 	lds	r21, 0x1F86
    b0ee:	80 91 02 1f 	lds	r24, 0x1F02
    b0f2:	68 e1       	ldi	r22, 0x18	; 24
    b0f4:	20 e8       	ldi	r18, 0x80	; 128
    b0f6:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_puts_P(lcd_lastPos, y, PSTR("@C"));
    b0fa:	80 91 02 1f 	lds	r24, 0x1F02
    b0fe:	68 e1       	ldi	r22, 0x18	; 24
    b100:	43 e8       	ldi	r20, 0x83	; 131
    b102:	59 e0       	ldi	r21, 0x09	; 9
    b104:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>

        y += 2*FH;

        // RPM
        lcd_puts_P(0, y, PSTR("RPM:"));
    b108:	80 e0       	ldi	r24, 0x00	; 0
    b10a:	68 e2       	ldi	r22, 0x28	; 40
    b10c:	4e e7       	ldi	r20, 0x7E	; 126
    b10e:	59 e0       	ldi	r21, 0x09	; 9
    b110:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.rpm, LEFT);
    b114:	40 91 81 1f 	lds	r20, 0x1F81
    b118:	50 91 82 1f 	lds	r21, 0x1F82
    b11c:	80 91 02 1f 	lds	r24, 0x1F02
    b120:	68 e2       	ldi	r22, 0x28	; 40
    b122:	20 e8       	ldi	r18, 0x80	; 128
    b124:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        y += FH;

        // Fuel
        lcd_puts_P(0, y, PSTR("Fuel:"));
    b128:	80 e0       	ldi	r24, 0x00	; 0
    b12a:	60 e3       	ldi	r22, 0x30	; 48
    b12c:	48 e7       	ldi	r20, 0x78	; 120
    b12e:	59 e0       	ldi	r21, 0x09	; 9
    b130:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.fuelLevel, LEFT);
    b134:	40 91 83 1f 	lds	r20, 0x1F83
    b138:	50 91 84 1f 	lds	r21, 0x1F84
    b13c:	80 91 02 1f 	lds	r24, 0x1F02
    b140:	60 e3       	ldi	r22, 0x30	; 48
    b142:	20 e8       	ldi	r18, 0x80	; 128
    b144:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, '%');
    b148:	80 91 02 1f 	lds	r24, 0x1F02
    b14c:	60 e3       	ldi	r22, 0x30	; 48
    b14e:	45 e2       	ldi	r20, 0x25	; 37
    b150:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        y += FH;

        // Volts
        lcd_puts_P(0, y, PSTR("Volts:"));
    b154:	80 e0       	ldi	r24, 0x00	; 0
    b156:	68 e3       	ldi	r22, 0x38	; 56
    b158:	41 e7       	ldi	r20, 0x71	; 113
    b15a:	59 e0       	ldi	r21, 0x09	; 9
    b15c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.volts, LEFT);
    b160:	40 91 87 1f 	lds	r20, 0x1F87
    b164:	50 91 88 1f 	lds	r21, 0x1F88
    b168:	80 91 02 1f 	lds	r24, 0x1F02
    b16c:	68 e3       	ldi	r22, 0x38	; 56
    b16e:	20 e8       	ldi	r18, 0x80	; 128
    b170:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, 'V');
    b174:	80 91 02 1f 	lds	r24, 0x1F02
    b178:	68 e3       	ldi	r22, 0x38	; 56
    b17a:	46 e5       	ldi	r20, 0x56	; 86
    b17c:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

        y = 2*FH;
        // Altitude (barometric)
        lcd_puts_P(12*FW, y, PSTR("Alt:"));
    b180:	88 e4       	ldi	r24, 0x48	; 72
    b182:	60 e1       	ldi	r22, 0x10	; 16
    b184:	4c e6       	ldi	r20, 0x6C	; 108
    b186:	59 e0       	ldi	r21, 0x09	; 9
    b188:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(lcd_lastPos, y, frskyHubData.baroAltitude, LEFT|UNSIGN);
    b18c:	40 91 8b 1f 	lds	r20, 0x1F8B
    b190:	50 91 8c 1f 	lds	r21, 0x1F8C
    b194:	80 91 02 1f 	lds	r24, 0x1F02
    b198:	60 e1       	ldi	r22, 0x10	; 16
    b19a:	28 e8       	ldi	r18, 0x88	; 136
    b19c:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, 'm');
    b1a0:	80 91 02 1f 	lds	r24, 0x1F02
    b1a4:	60 e1       	ldi	r22, 0x10	; 16
    b1a6:	4d e6       	ldi	r20, 0x6D	; 109
    b1a8:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>

        y += 2*FH;

        // Acceleromter
        lcd_puts_P(11*FW, y, PSTR("Accel"));
    b1ac:	82 e4       	ldi	r24, 0x42	; 66
    b1ae:	60 e2       	ldi	r22, 0x20	; 32
    b1b0:	46 e6       	ldi	r20, 0x66	; 102
    b1b2:	59 e0       	ldi	r21, 0x09	; 9
    b1b4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        y += FH;
        lcd_puts_P(11*FW, y, PSTR("x="));
    b1b8:	82 e4       	ldi	r24, 0x42	; 66
    b1ba:	68 e2       	ldi	r22, 0x28	; 40
    b1bc:	43 e6       	ldi	r20, 0x63	; 99
    b1be:	59 e0       	ldi	r21, 0x09	; 9
    b1c0:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(FW*17, y, (int32_t)frskyHubData.accelX * 100 / 256, PREC2);
    b1c4:	60 91 a9 1f 	lds	r22, 0x1FA9
    b1c8:	70 91 aa 1f 	lds	r23, 0x1FAA
    b1cc:	88 27       	eor	r24, r24
    b1ce:	77 fd       	sbrc	r23, 7
    b1d0:	80 95       	com	r24
    b1d2:	98 2f       	mov	r25, r24
    b1d4:	24 e6       	ldi	r18, 0x64	; 100
    b1d6:	30 e0       	ldi	r19, 0x00	; 0
    b1d8:	40 e0       	ldi	r20, 0x00	; 0
    b1da:	50 e0       	ldi	r21, 0x00	; 0
    b1dc:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    b1e0:	a1 2c       	mov	r10, r1
    b1e2:	21 e0       	ldi	r18, 0x01	; 1
    b1e4:	b2 2e       	mov	r11, r18
    b1e6:	c1 2c       	mov	r12, r1
    b1e8:	d1 2c       	mov	r13, r1
    b1ea:	a6 01       	movw	r20, r12
    b1ec:	95 01       	movw	r18, r10
    b1ee:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    b1f2:	86 e6       	ldi	r24, 0x66	; 102
    b1f4:	68 e2       	ldi	r22, 0x28	; 40
    b1f6:	a9 01       	movw	r20, r18
    b1f8:	20 e6       	ldi	r18, 0x60	; 96
    b1fa:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, 'g');
    b1fe:	80 91 02 1f 	lds	r24, 0x1F02
    b202:	68 e2       	ldi	r22, 0x28	; 40
    b204:	47 e6       	ldi	r20, 0x67	; 103
    b206:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        y += FH;
        lcd_puts_P(11*FW, y, PSTR("y="));
    b20a:	82 e4       	ldi	r24, 0x42	; 66
    b20c:	60 e3       	ldi	r22, 0x30	; 48
    b20e:	40 e6       	ldi	r20, 0x60	; 96
    b210:	59 e0       	ldi	r21, 0x09	; 9
    b212:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(FW*17, y, (int32_t)frskyHubData.accelY * 100 / 256, PREC2);
    b216:	60 91 ab 1f 	lds	r22, 0x1FAB
    b21a:	70 91 ac 1f 	lds	r23, 0x1FAC
    b21e:	88 27       	eor	r24, r24
    b220:	77 fd       	sbrc	r23, 7
    b222:	80 95       	com	r24
    b224:	98 2f       	mov	r25, r24
    b226:	24 e6       	ldi	r18, 0x64	; 100
    b228:	30 e0       	ldi	r19, 0x00	; 0
    b22a:	40 e0       	ldi	r20, 0x00	; 0
    b22c:	50 e0       	ldi	r21, 0x00	; 0
    b22e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    b232:	a6 01       	movw	r20, r12
    b234:	95 01       	movw	r18, r10
    b236:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    b23a:	86 e6       	ldi	r24, 0x66	; 102
    b23c:	60 e3       	ldi	r22, 0x30	; 48
    b23e:	a9 01       	movw	r20, r18
    b240:	20 e6       	ldi	r18, 0x60	; 96
    b242:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, 'g');
    b246:	80 91 02 1f 	lds	r24, 0x1F02
    b24a:	60 e3       	ldi	r22, 0x30	; 48
    b24c:	47 e6       	ldi	r20, 0x67	; 103
    b24e:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        y += FH;
        lcd_puts_P(11*FW, y, PSTR("z="));
    b252:	82 e4       	ldi	r24, 0x42	; 66
    b254:	68 e3       	ldi	r22, 0x38	; 56
    b256:	4d e5       	ldi	r20, 0x5D	; 93
    b258:	59 e0       	ldi	r21, 0x09	; 9
    b25a:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezNAtt(FW*17, y, (int32_t)frskyHubData.accelZ * 100 / 256, PREC2);
    b25e:	60 91 ad 1f 	lds	r22, 0x1FAD
    b262:	70 91 ae 1f 	lds	r23, 0x1FAE
    b266:	88 27       	eor	r24, r24
    b268:	77 fd       	sbrc	r23, 7
    b26a:	80 95       	com	r24
    b26c:	98 2f       	mov	r25, r24
    b26e:	24 e6       	ldi	r18, 0x64	; 100
    b270:	30 e0       	ldi	r19, 0x00	; 0
    b272:	40 e0       	ldi	r20, 0x00	; 0
    b274:	50 e0       	ldi	r21, 0x00	; 0
    b276:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    b27a:	a6 01       	movw	r20, r12
    b27c:	95 01       	movw	r18, r10
    b27e:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    b282:	86 e6       	ldi	r24, 0x66	; 102
    b284:	68 e3       	ldi	r22, 0x38	; 56
    b286:	a9 01       	movw	r20, r18
    b288:	20 e6       	ldi	r18, 0x60	; 96
    b28a:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_putc(lcd_lastPos, y, 'g');
    b28e:	80 91 02 1f 	lds	r24, 0x1F02
    b292:	68 e3       	ldi	r22, 0x38	; 56
    b294:	47 e6       	ldi	r20, 0x67	; 103
    b296:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
    b29a:	ad c0       	rjmp	.+346    	; 0xb3f6 <_Z12menuMainViewh+0xe5e>
        lcd_outdezNAtt(lcd_lastPos, 7*FH, frskyHubData.gpsAltitude_bp, LEFT|LEADING0, 3); // before '.'
        lcd_plot(lcd_lastPos, 8*FH-2, 0); // small decimal point
        lcd_outdezAtt(lcd_lastPos+2, 7*FH, frskyHubData.gpsAltitude_ap, LEFT|UNSIGN); // after '.'
        lcd_putc(lcd_lastPos, 7*FH, 'm');
      }
      else if (g_eeGeneral.view == e_telemetry+3*ALTERNATE_VIEW) { // if on second alternate telemetry view
    b29c:	cc 24       	eor	r12, r12
    b29e:	dd 24       	eor	r13, r13
    b2a0:	15 e1       	ldi	r17, 0x15	; 21
      else {
        y0 = 5*FH;
        //lcd_puts_P(2*FW-3, y0, PSTR("Tele:"));
        x0 = 4*FW-3;
        for (int i=0; i<2; i++) {
          if (g_model.frsky.channels[i].ratio) {
    b2a2:	f6 01       	movw	r30, r12
    b2a4:	93 e0       	ldi	r25, 0x03	; 3
    b2a6:	ee 0f       	add	r30, r30
    b2a8:	ff 1f       	adc	r31, r31
    b2aa:	9a 95       	dec	r25
    b2ac:	e1 f7       	brne	.-8      	; 0xb2a6 <_Z12menuMainViewh+0xd0e>
    b2ae:	ec 19       	sub	r30, r12
    b2b0:	fd 09       	sbc	r31, r13
    b2b2:	e9 5a       	subi	r30, 0xA9	; 169
    b2b4:	fa 4e       	sbci	r31, 0xEA	; 234
    b2b6:	20 81       	ld	r18, Z
    b2b8:	81 81       	ldd	r24, Z+1	; 0x01
    b2ba:	38 2f       	mov	r19, r24
    b2bc:	3f 70       	andi	r19, 0x0F	; 15
    b2be:	21 15       	cp	r18, r1
    b2c0:	31 05       	cpc	r19, r1
    b2c2:	c1 f1       	breq	.+112    	; 0xb334 <_Z12menuMainViewh+0xd9c>
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    b2c4:	f6 01       	movw	r30, r12
    b2c6:	ed 55       	subi	r30, 0x5D	; 93
    b2c8:	f6 4e       	sbci	r31, 0xE6	; 230
        y0 = 5*FH;
        //lcd_puts_P(2*FW-3, y0, PSTR("Tele:"));
        x0 = 4*FW-3;
        for (int i=0; i<2; i++) {
          if (g_model.frsky.channels[i].ratio) {
            blink = (alarmRaised[i] ? INVERS+BLINK : 0)|LEFT;
    b2ca:	80 81       	ld	r24, Z
    b2cc:	88 23       	and	r24, r24
    b2ce:	11 f0       	breq	.+4      	; 0xb2d4 <_Z12menuMainViewh+0xd3c>
    b2d0:	03 e8       	ldi	r16, 0x83	; 131
    b2d2:	01 c0       	rjmp	.+2      	; 0xb2d6 <_Z12menuMainViewh+0xd3e>
    b2d4:	00 e8       	ldi	r16, 0x80	; 128
            lcd_puts_P(x0, y0, PSTR("A ="));
    b2d6:	81 2f       	mov	r24, r17
    b2d8:	68 e2       	ldi	r22, 0x28	; 40
    b2da:	49 e5       	ldi	r20, 0x59	; 89
    b2dc:	59 e0       	ldi	r21, 0x09	; 9
    b2de:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    b2e2:	4c 2d       	mov	r20, r12
    b2e4:	4f 5c       	subi	r20, 0xCF	; 207
        x0 = 4*FW-3;
        for (int i=0; i<2; i++) {
          if (g_model.frsky.channels[i].ratio) {
            blink = (alarmRaised[i] ? INVERS+BLINK : 0)|LEFT;
            lcd_puts_P(x0, y0, PSTR("A ="));
            lcd_putc(x0+FW, y0, '1'+i);
    b2e6:	81 2f       	mov	r24, r17
    b2e8:	8a 5f       	subi	r24, 0xFA	; 250
    b2ea:	68 e2       	ldi	r22, 0x28	; 40
    b2ec:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
      V_BAR(SCREEN_WIDTH/2+x,SCREEN_HEIGHT-8, len)
    }
  }
}

void menuMainView(uint8_t event)
    b2f0:	d6 01       	movw	r26, r12
    b2f2:	a9 55       	subi	r26, 0x59	; 89
    b2f4:	b6 4e       	sbci	r27, 0xE6	; 230
        for (int i=0; i<2; i++) {
          if (g_model.frsky.channels[i].ratio) {
            blink = (alarmRaised[i] ? INVERS+BLINK : 0)|LEFT;
            lcd_puts_P(x0, y0, PSTR("A ="));
            lcd_putc(x0+FW, y0, '1'+i);
            val = frskyComputeVolts(staticTelemetry[i], g_model.frsky.channels[i].ratio);
    b2f6:	76 01       	movw	r14, r12
    b2f8:	83 e0       	ldi	r24, 0x03	; 3
    b2fa:	ee 0c       	add	r14, r14
    b2fc:	ff 1c       	adc	r15, r15
    b2fe:	8a 95       	dec	r24
    b300:	e1 f7       	brne	.-8      	; 0xb2fa <_Z12menuMainViewh+0xd62>
    b302:	ec 18       	sub	r14, r12
    b304:	fd 08       	sbc	r15, r13
    b306:	f7 01       	movw	r30, r14
    b308:	e9 5a       	subi	r30, 0xA9	; 169
    b30a:	fa 4e       	sbci	r31, 0xEA	; 234
    b30c:	60 81       	ld	r22, Z
    b30e:	71 81       	ldd	r23, Z+1	; 0x01
    b310:	7f 70       	andi	r23, 0x0F	; 15
    b312:	8c 91       	ld	r24, X
    b314:	41 e0       	ldi	r20, 0x01	; 1
    b316:	0e 94 61 a2 	call	0x144c2	; 0x144c2 <_Z17frskyComputeVoltshjh>
    b31a:	48 2f       	mov	r20, r24
            putsTelemetry(x0+3*FW, y0, val, g_model.frsky.channels[i].type, blink);
    b31c:	f7 01       	movw	r30, r14
    b31e:	e8 5a       	subi	r30, 0xA8	; 168
    b320:	fa 4e       	sbci	r31, 0xEA	; 234
    b322:	20 81       	ld	r18, Z
    b324:	22 95       	swap	r18
    b326:	2f 70       	andi	r18, 0x0F	; 15
    b328:	81 2f       	mov	r24, r17
    b32a:	8e 5e       	subi	r24, 0xEE	; 238
    b32c:	68 e2       	ldi	r22, 0x28	; 40
    b32e:	0e 94 7c 6c 	call	0xd8f8	; 0xd8f8 <_Z13putsTelemetryhhhhh>
            x0 = 13*FW-3;
    b332:	1b e4       	ldi	r17, 0x4B	; 75
#endif
      else {
        y0 = 5*FH;
        //lcd_puts_P(2*FW-3, y0, PSTR("Tele:"));
        x0 = 4*FW-3;
        for (int i=0; i<2; i++) {
    b334:	08 94       	sec
    b336:	c1 1c       	adc	r12, r1
    b338:	d1 1c       	adc	r13, r1
    b33a:	82 e0       	ldi	r24, 0x02	; 2
    b33c:	c8 16       	cp	r12, r24
    b33e:	d1 04       	cpc	r13, r1
    b340:	09 f0       	breq	.+2      	; 0xb344 <_Z12menuMainViewh+0xdac>
    b342:	af cf       	rjmp	.-162    	; 0xb2a2 <_Z12menuMainViewh+0xd0a>
            x0 = 13*FW-3;
          }
        }
        y0+=FH;
        //lcd_puts_P(2*FW-3, y0, PSTR("RSSI:"));
        lcd_puts_P(4*FW-3, y0, PSTR("Rx="));
    b344:	85 e1       	ldi	r24, 0x15	; 21
    b346:	60 e3       	ldi	r22, 0x30	; 48
    b348:	45 e5       	ldi	r20, 0x55	; 85
    b34a:	59 e0       	ldi	r21, 0x09	; 9
    b34c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(7*FW-3, y0, staticRSSI[0], LEFT);
    b350:	40 91 a5 19 	lds	r20, 0x19A5
    b354:	87 e2       	ldi	r24, 0x27	; 39
    b356:	60 e3       	ldi	r22, 0x30	; 48
    b358:	50 e0       	ldi	r21, 0x00	; 0
    b35a:	20 e8       	ldi	r18, 0x80	; 128
    b35c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
        lcd_puts_P(13*FW-3, y0, PSTR("Tx="));
    b360:	8b e4       	ldi	r24, 0x4B	; 75
    b362:	60 e3       	ldi	r22, 0x30	; 48
    b364:	41 e5       	ldi	r20, 0x51	; 81
    b366:	59 e0       	ldi	r21, 0x09	; 9
    b368:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
        lcd_outdezAtt(16*FW-3, y0, staticRSSI[1], LEFT);
    b36c:	40 91 a6 19 	lds	r20, 0x19A6
    b370:	8d e5       	ldi	r24, 0x5D	; 93
    b372:	60 e3       	ldi	r22, 0x30	; 48
    b374:	50 e0       	ldi	r21, 0x00	; 0
    b376:	20 e8       	ldi	r18, 0x80	; 128
    b378:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
    b37c:	3c c0       	rjmp	.+120    	; 0xb3f6 <_Z12menuMainViewh+0xe5e>
      }
    }
    else {
#if defined (PCBV3)
      if (g_eeGeneral.view == e_telemetry+ALTERNATE_VIEW) // if on first alternate telemetry view
    b37e:	80 91 80 12 	lds	r24, 0x1280
    b382:	84 31       	cpi	r24, 0x14	; 20
    b384:	31 f5       	brne	.+76     	; 0xb3d2 <_Z12menuMainViewh+0xe3a>
      {
        lcd_putsAtt(0, FH*2, g_logFilename, BSS); // Show log filename (or error msg)
    b386:	80 e0       	ldi	r24, 0x00	; 0
    b388:	60 e1       	ldi	r22, 0x10	; 16
    b38a:	40 eb       	ldi	r20, 0xB0	; 176
    b38c:	5f e1       	ldi	r21, 0x1F	; 31
    b38e:	20 e1       	ldi	r18, 0x10	; 16
    b390:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
        
        /*** DEBUG XXX TODO REMOVE ME ***/
#if defined (PCBV4)
        lcd_outdezNAtt(FW*5, FH*3, g_rotenc1);
    b394:	40 91 91 18 	lds	r20, 0x1891
    b398:	8e e1       	ldi	r24, 0x1E	; 30
    b39a:	68 e1       	ldi	r22, 0x18	; 24
    b39c:	50 e0       	ldi	r21, 0x00	; 0
    b39e:	20 e0       	ldi	r18, 0x00	; 0
    b3a0:	00 e0       	ldi	r16, 0x00	; 0
    b3a2:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        lcd_outdezNAtt(FW*10, FH*3, g_rotenc2);
    b3a6:	40 91 92 18 	lds	r20, 0x1892
    b3aa:	8c e3       	ldi	r24, 0x3C	; 60
    b3ac:	68 e1       	ldi	r22, 0x18	; 24
    b3ae:	50 e0       	ldi	r21, 0x00	; 0
    b3b0:	20 e0       	ldi	r18, 0x00	; 0
    b3b2:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
        if (~PIND & 0b00100000) lcd_putc(FW*5, FH*3,'X');
    b3b6:	4d 99       	sbic	0x09, 5	; 9
    b3b8:	05 c0       	rjmp	.+10     	; 0xb3c4 <_Z12menuMainViewh+0xe2c>
    b3ba:	8e e1       	ldi	r24, 0x1E	; 30
    b3bc:	68 e1       	ldi	r22, 0x18	; 24
    b3be:	48 e5       	ldi	r20, 0x58	; 88
    b3c0:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
        if (~PIND & 0b00010000) lcd_putc(FW*10, FH*3,'X');
    b3c4:	4c 99       	sbic	0x09, 4	; 9
    b3c6:	05 c0       	rjmp	.+10     	; 0xb3d2 <_Z12menuMainViewh+0xe3a>
    b3c8:	8c e3       	ldi	r24, 0x3C	; 60
    b3ca:	68 e1       	ldi	r22, 0x18	; 24
    b3cc:	48 e5       	ldi	r20, 0x58	; 88
    b3ce:	0e 94 77 67 	call	0xceee	; 0xceee <_Z8lcd_putchhc>
#endif
        /*************/
      }

#endif
      lcd_putsAtt(22, 40, PSTR("NO DATA"), DBLSIZE);
    b3d2:	86 e1       	ldi	r24, 0x16	; 22
    b3d4:	68 e2       	ldi	r22, 0x28	; 40
    b3d6:	49 e4       	ldi	r20, 0x49	; 73
    b3d8:	59 e0       	ldi	r21, 0x09	; 9
    b3da:	24 e0       	ldi	r18, 0x04	; 4
    b3dc:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    b3e0:	0a c0       	rjmp	.+20     	; 0xb3f6 <_Z12menuMainViewh+0xe5e>
  }
#endif /* defined(FRSKY) */

  else  // timer2
  {
    putsTime(33+FW+2, FH*5, timer2, DBLSIZE, DBLSIZE);
    b3e2:	40 91 91 15 	lds	r20, 0x1591
    b3e6:	50 91 92 15 	lds	r21, 0x1592
    b3ea:	89 e2       	ldi	r24, 0x29	; 41
    b3ec:	68 e2       	ldi	r22, 0x28	; 40
    b3ee:	24 e0       	ldi	r18, 0x04	; 4
    b3f0:	04 e0       	ldi	r16, 0x04	; 4
    b3f2:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>
  }

  theFile.DisplayProgressBar(20*FW+1);
    b3f6:	8c ea       	ldi	r24, 0xAC	; 172
    b3f8:	99 e1       	ldi	r25, 0x19	; 25
    b3fa:	69 e7       	ldi	r22, 0x79	; 121
    b3fc:	0e 94 24 66 	call	0xcc48	; 0xcc48 <_ZN7RlcFile18DisplayProgressBarEh>
}
    b400:	0f 90       	pop	r0
    b402:	0f 90       	pop	r0
    b404:	0f 90       	pop	r0
    b406:	cf 91       	pop	r28
    b408:	df 91       	pop	r29
    b40a:	1f 91       	pop	r17
    b40c:	0f 91       	pop	r16
    b40e:	ff 90       	pop	r15
    b410:	ef 90       	pop	r14
    b412:	df 90       	pop	r13
    b414:	cf 90       	pop	r12
    b416:	bf 90       	pop	r11
    b418:	af 90       	pop	r10
    b41a:	9f 90       	pop	r9
    b41c:	8f 90       	pop	r8
    b41e:	7f 90       	pop	r7
    b420:	6f 90       	pop	r6
    b422:	5f 90       	pop	r5
    b424:	4f 90       	pop	r4
    b426:	3f 90       	pop	r3
    b428:	2f 90       	pop	r2
    b42a:	08 95       	ret

0000b42c <_Z18menuProcStatistic2h>:
    if(traceRd==s_traceWr) break;
  }
}

void menuProcStatistic2(uint8_t event)
{
    b42c:	cf 93       	push	r28
    b42e:	c8 2f       	mov	r28, r24
  TITLE("STAT2");
    b430:	80 e0       	ldi	r24, 0x00	; 0
    b432:	60 e0       	ldi	r22, 0x00	; 0
    b434:	40 e4       	ldi	r20, 0x40	; 64
    b436:	5a e0       	ldi	r21, 0x0A	; 10
    b438:	22 e0       	ldi	r18, 0x02	; 2
    b43a:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  switch(event)
    b43e:	c2 36       	cpi	r28, 0x62	; 98
    b440:	d1 f0       	breq	.+52     	; 0xb476 <_Z18menuProcStatistic2h+0x4a>
    b442:	c3 36       	cpi	r28, 0x63	; 99
    b444:	28 f4       	brcc	.+10     	; 0xb450 <_Z18menuProcStatistic2h+0x24>
    b446:	c0 36       	cpi	r28, 0x60	; 96
    b448:	31 f0       	breq	.+12     	; 0xb456 <_Z18menuProcStatistic2h+0x2a>
    b44a:	c1 36       	cpi	r28, 0x61	; 97
    b44c:	d9 f4       	brne	.+54     	; 0xb484 <_Z18menuProcStatistic2h+0x58>
    b44e:	16 c0       	rjmp	.+44     	; 0xb47c <_Z18menuProcStatistic2h+0x50>
    b450:	c3 36       	cpi	r28, 0x63	; 99
    b452:	c1 f4       	brne	.+48     	; 0xb484 <_Z18menuProcStatistic2h+0x58>
    b454:	13 c0       	rjmp	.+38     	; 0xb47c <_Z18menuProcStatistic2h+0x50>
  {
    case EVT_KEY_FIRST(KEY_MENU):
      g_tmr1Latency_min = 0xff;
    b456:	8f ef       	ldi	r24, 0xFF	; 255
    b458:	80 93 66 15 	sts	0x1566, r24
      g_tmr1Latency_max = 0;
    b45c:	10 92 65 15 	sts	0x1565, r1
      g_timeMain    = 0;
    b460:	10 92 68 15 	sts	0x1568, r1
    b464:	10 92 67 15 	sts	0x1567, r1

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    b468:	80 91 72 15 	lds	r24, 0x1572
    b46c:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    b470:	84 e6       	ldi	r24, 0x64	; 100
    b472:	87 bd       	out	0x27, r24	; 39
    b474:	07 c0       	rjmp	.+14     	; 0xb484 <_Z18menuProcStatistic2h+0x58>
//      g_time_per10 = 0;
      beepKey();
      break;
    case EVT_KEY_FIRST(KEY_DOWN):
      chainMenu(menuProcStatistic);
    b476:	85 eb       	ldi	r24, 0xB5	; 181
    b478:	9a e5       	ldi	r25, 0x5A	; 90
    b47a:	02 c0       	rjmp	.+4      	; 0xb480 <_Z18menuProcStatistic2h+0x54>
      break;
    case EVT_KEY_FIRST(KEY_UP):
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
    b47c:	8c ec       	ldi	r24, 0xCC	; 204
    b47e:	92 e5       	ldi	r25, 0x52	; 82
    b480:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
      break;
  }
  lcd_puts_P( 0*FW,  1*FH, PSTR("tmr1Lat max    us"));
    b484:	80 e0       	ldi	r24, 0x00	; 0
    b486:	68 e0       	ldi	r22, 0x08	; 8
    b488:	4e e2       	ldi	r20, 0x2E	; 46
    b48a:	5a e0       	ldi	r21, 0x0A	; 10
    b48c:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdez8(15*FW , 1*FH, g_tmr1Latency_max/2 );
    b490:	40 91 65 15 	lds	r20, 0x1565
    b494:	46 95       	lsr	r20
    b496:	8a e5       	ldi	r24, 0x5A	; 90
    b498:	68 e0       	ldi	r22, 0x08	; 8
    b49a:	0e 94 42 6a 	call	0xd484	; 0xd484 <_Z11lcd_outdez8hha>
  lcd_puts_P( 0*FW,  2*FH, PSTR("tmr1Lat min    us"));
    b49e:	80 e0       	ldi	r24, 0x00	; 0
    b4a0:	60 e1       	ldi	r22, 0x10	; 16
    b4a2:	4c e1       	ldi	r20, 0x1C	; 28
    b4a4:	5a e0       	ldi	r21, 0x0A	; 10
    b4a6:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdez8(15*FW , 2*FH, g_tmr1Latency_min/2 );
    b4aa:	40 91 66 15 	lds	r20, 0x1566
    b4ae:	46 95       	lsr	r20
    b4b0:	8a e5       	ldi	r24, 0x5A	; 90
    b4b2:	60 e1       	ldi	r22, 0x10	; 16
    b4b4:	0e 94 42 6a 	call	0xd484	; 0xd484 <_Z11lcd_outdez8hha>
  lcd_puts_P( 0*FW,  3*FH, PSTR("tmr1 Jitter    us"));
    b4b8:	80 e0       	ldi	r24, 0x00	; 0
    b4ba:	68 e1       	ldi	r22, 0x18	; 24
    b4bc:	4a e0       	ldi	r20, 0x0A	; 10
    b4be:	5a e0       	ldi	r21, 0x0A	; 10
    b4c0:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdez8(15*FW , 3*FH, (g_tmr1Latency_max - g_tmr1Latency_min) /2 );
    b4c4:	80 91 65 15 	lds	r24, 0x1565
    b4c8:	90 e0       	ldi	r25, 0x00	; 0
    b4ca:	20 91 66 15 	lds	r18, 0x1566
    b4ce:	82 1b       	sub	r24, r18
    b4d0:	91 09       	sbc	r25, r1
    b4d2:	62 e0       	ldi	r22, 0x02	; 2
    b4d4:	70 e0       	ldi	r23, 0x00	; 0
    b4d6:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    b4da:	46 2f       	mov	r20, r22
    b4dc:	8a e5       	ldi	r24, 0x5A	; 90
    b4de:	68 e1       	ldi	r22, 0x18	; 24
    b4e0:	0e 94 42 6a 	call	0xd484	; 0xd484 <_Z11lcd_outdez8hha>
  lcd_puts_P( 0*FW,  4*FH, PSTR("tmain max      ms"));
    b4e4:	80 e0       	ldi	r24, 0x00	; 0
    b4e6:	60 e2       	ldi	r22, 0x20	; 32
    b4e8:	48 ef       	ldi	r20, 0xF8	; 248
    b4ea:	59 e0       	ldi	r21, 0x09	; 9
    b4ec:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdezAtt(15*FW, 4*FH, (g_timeMain*100)/16, PREC2);
    b4f0:	20 91 67 15 	lds	r18, 0x1567
    b4f4:	30 91 68 15 	lds	r19, 0x1568
    b4f8:	84 e6       	ldi	r24, 0x64	; 100
    b4fa:	90 e0       	ldi	r25, 0x00	; 0
    b4fc:	28 9f       	mul	r18, r24
    b4fe:	a0 01       	movw	r20, r0
    b500:	29 9f       	mul	r18, r25
    b502:	50 0d       	add	r21, r0
    b504:	38 9f       	mul	r19, r24
    b506:	50 0d       	add	r21, r0
    b508:	11 24       	eor	r1, r1
    b50a:	94 e0       	ldi	r25, 0x04	; 4
    b50c:	56 95       	lsr	r21
    b50e:	47 95       	ror	r20
    b510:	9a 95       	dec	r25
    b512:	e1 f7       	brne	.-8      	; 0xb50c <_Z18menuProcStatistic2h+0xe0>
    b514:	8a e5       	ldi	r24, 0x5A	; 90
    b516:	60 e2       	ldi	r22, 0x20	; 32
    b518:	20 e6       	ldi	r18, 0x60	; 96
    b51a:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  lcd_puts_P( 0*FW,  5*FH, PSTR("t10ms          us"));
    b51e:	80 e0       	ldi	r24, 0x00	; 0
    b520:	68 e2       	ldi	r22, 0x28	; 40
    b522:	46 ee       	ldi	r20, 0xE6	; 230
    b524:	59 e0       	ldi	r21, 0x09	; 9
    b526:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdez8(15*FW , 5*FH, g_time_per10/2 );
    b52a:	40 91 69 15 	lds	r20, 0x1569
    b52e:	50 91 6a 15 	lds	r21, 0x156A
    b532:	56 95       	lsr	r21
    b534:	47 95       	ror	r20
    b536:	8a e5       	ldi	r24, 0x5A	; 90
    b538:	68 e2       	ldi	r22, 0x28	; 40
    b53a:	0e 94 42 6a 	call	0xd484	; 0xd484 <_Z11lcd_outdez8hha>
#ifndef SIMU
  lcd_puts_P( 0*FW,  6*FH, PSTR("Free Stack min    b"));
    b53e:	80 e0       	ldi	r24, 0x00	; 0
    b540:	60 e3       	ldi	r22, 0x30	; 48
    b542:	42 ed       	ldi	r20, 0xD2	; 210
    b544:	59 e0       	ldi	r21, 0x09	; 9
    b546:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  lcd_outdezAtt(18*FW-1,  6*FH, stack_free() ) ;
    b54a:	0e 94 11 20 	call	0x4022	; 0x4022 <_Z10stack_freev>
    b54e:	ac 01       	movw	r20, r24
    b550:	8b e6       	ldi	r24, 0x6B	; 107
    b552:	60 e3       	ldi	r22, 0x30	; 48
    b554:	20 e0       	ldi	r18, 0x00	; 0
    b556:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
#endif
  lcd_puts_P( 3*FW,  7*FH, PSTR("[MENU] to reset"));
    b55a:	82 e1       	ldi	r24, 0x12	; 18
    b55c:	68 e3       	ldi	r22, 0x38	; 56
    b55e:	42 ec       	ldi	r20, 0xC2	; 194
    b560:	59 e0       	ldi	r21, 0x09	; 9
    b562:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
}
    b566:	cf 91       	pop	r28
    b568:	08 95       	ret

0000b56a <_Z17menuProcStatistich>:
 */

#include "menus.h"

void menuProcStatistic(uint8_t event)
{
    b56a:	0f 93       	push	r16
    b56c:	1f 93       	push	r17
    b56e:	cf 93       	push	r28
    b570:	df 93       	push	r29
    b572:	c8 2f       	mov	r28, r24
  TITLE("STAT");
    b574:	80 e0       	ldi	r24, 0x00	; 0
    b576:	60 e0       	ldi	r22, 0x00	; 0
    b578:	4a e5       	ldi	r20, 0x5A	; 90
    b57a:	5a e0       	ldi	r21, 0x0A	; 10
    b57c:	22 e0       	ldi	r18, 0x02	; 2
    b57e:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
  switch(event)
    b582:	c1 36       	cpi	r28, 0x61	; 97
    b584:	58 f0       	brcs	.+22     	; 0xb59c <_Z17menuProcStatistich+0x32>
    b586:	c3 36       	cpi	r28, 0x63	; 99
    b588:	28 f0       	brcs	.+10     	; 0xb594 <_Z17menuProcStatistich+0x2a>
    b58a:	c3 36       	cpi	r28, 0x63	; 99
    b58c:	39 f4       	brne	.+14     	; 0xb59c <_Z17menuProcStatistich+0x32>
  {
    case EVT_KEY_FIRST(KEY_UP):
      chainMenu(menuProcStatistic2);
    b58e:	86 e1       	ldi	r24, 0x16	; 22
    b590:	9a e5       	ldi	r25, 0x5A	; 90
    b592:	02 c0       	rjmp	.+4      	; 0xb598 <_Z17menuProcStatistich+0x2e>
      break;
    case EVT_KEY_FIRST(KEY_DOWN):
    case EVT_KEY_FIRST(KEY_EXIT):
      chainMenu(menuMainView);
    b594:	8c ec       	ldi	r24, 0xCC	; 204
    b596:	92 e5       	ldi	r25, 0x52	; 82
    b598:	0e 94 aa 22 	call	0x4554	; 0x4554 <_Z9chainMenuPFvhE>
      break;
  }

  lcd_puts_P(  1*FW, FH*1, PSTR("TME"));
    b59c:	86 e0       	ldi	r24, 0x06	; 6
    b59e:	68 e0       	ldi	r22, 0x08	; 8
    b5a0:	46 e5       	ldi	r20, 0x56	; 86
    b5a2:	5a e0       	ldi	r21, 0x0A	; 10
    b5a4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  putsTime(    5*FW, FH*1, s_timeCumAbs, 0, 0);
    b5a8:	40 91 84 15 	lds	r20, 0x1584
    b5ac:	50 91 85 15 	lds	r21, 0x1585
    b5b0:	8e e1       	ldi	r24, 0x1E	; 30
    b5b2:	68 e0       	ldi	r22, 0x08	; 8
    b5b4:	20 e0       	ldi	r18, 0x00	; 0
    b5b6:	00 e0       	ldi	r16, 0x00	; 0
    b5b8:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>
  lcd_puts_P( 17*FW, FH*1, PSTR("TSW"));
    b5bc:	86 e6       	ldi	r24, 0x66	; 102
    b5be:	68 e0       	ldi	r22, 0x08	; 8
    b5c0:	42 e5       	ldi	r20, 0x52	; 82
    b5c2:	5a e0       	ldi	r21, 0x0A	; 10
    b5c4:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  putsTime(   11*FW, FH*1, s_timeCumSw,      0, 0);
    b5c8:	40 91 86 15 	lds	r20, 0x1586
    b5cc:	50 91 87 15 	lds	r21, 0x1587
    b5d0:	82 e4       	ldi	r24, 0x42	; 66
    b5d2:	68 e0       	ldi	r22, 0x08	; 8
    b5d4:	20 e0       	ldi	r18, 0x00	; 0
    b5d6:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>

  lcd_puts_P(  1*FW, FH*2, PSTR("STK"));
    b5da:	86 e0       	ldi	r24, 0x06	; 6
    b5dc:	60 e1       	ldi	r22, 0x10	; 16
    b5de:	4e e4       	ldi	r20, 0x4E	; 78
    b5e0:	5a e0       	ldi	r21, 0x0A	; 10
    b5e2:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  putsTime(    5*FW, FH*2, s_timeCumThr, 0, 0);
    b5e6:	40 91 88 15 	lds	r20, 0x1588
    b5ea:	50 91 89 15 	lds	r21, 0x1589
    b5ee:	8e e1       	ldi	r24, 0x1E	; 30
    b5f0:	60 e1       	ldi	r22, 0x10	; 16
    b5f2:	20 e0       	ldi	r18, 0x00	; 0
    b5f4:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>
  lcd_puts_P( 17*FW, FH*2, PSTR("ST%"));
    b5f8:	86 e6       	ldi	r24, 0x66	; 102
    b5fa:	60 e1       	ldi	r22, 0x10	; 16
    b5fc:	4a e4       	ldi	r20, 0x4A	; 74
    b5fe:	5a e0       	ldi	r21, 0x0A	; 10
    b600:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  putsTime(   11*FW, FH*2, s_timeCum16ThrP/16, 0, 0);
    b604:	40 91 8a 15 	lds	r20, 0x158A
    b608:	50 91 8b 15 	lds	r21, 0x158B
    b60c:	24 e0       	ldi	r18, 0x04	; 4
    b60e:	56 95       	lsr	r21
    b610:	47 95       	ror	r20
    b612:	2a 95       	dec	r18
    b614:	e1 f7       	brne	.-8      	; 0xb60e <_Z17menuProcStatistich+0xa4>
    b616:	82 e4       	ldi	r24, 0x42	; 66
    b618:	60 e1       	ldi	r22, 0x10	; 16
    b61a:	20 e0       	ldi	r18, 0x00	; 0
    b61c:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>

  lcd_puts_P( 17*FW, FH*0, PSTR("TOT"));
    b620:	86 e6       	ldi	r24, 0x66	; 102
    b622:	60 e0       	ldi	r22, 0x00	; 0
    b624:	46 e4       	ldi	r20, 0x46	; 70
    b626:	5a e0       	ldi	r21, 0x0A	; 10
    b628:	0e 94 07 68 	call	0xd00e	; 0xd00e <_Z10lcd_puts_PhhPKc>
  putsTime(   11*FW, FH*0, s_timeCumTot, 0, 0);
    b62c:	40 91 82 15 	lds	r20, 0x1582
    b630:	50 91 83 15 	lds	r21, 0x1583
    b634:	82 e4       	ldi	r24, 0x42	; 66
    b636:	60 e0       	ldi	r22, 0x00	; 0
    b638:	20 e0       	ldi	r18, 0x00	; 0
    b63a:	0e 94 b3 6a 	call	0xd566	; 0xd566 <_Z8putsTimehhihh>

  uint16_t traceRd = s_traceCnt>MAXTRACE ? s_traceWr : 0;
    b63e:	80 91 0e 16 	lds	r24, 0x160E
    b642:	90 91 0f 16 	lds	r25, 0x160F
    b646:	89 37       	cpi	r24, 0x79	; 121
    b648:	91 05       	cpc	r25, r1
    b64a:	28 f0       	brcs	.+10     	; 0xb656 <_Z17menuProcStatistich+0xec>
    b64c:	c0 91 0c 16 	lds	r28, 0x160C
    b650:	d0 91 0d 16 	lds	r29, 0x160D
    b654:	02 c0       	rjmp	.+4      	; 0xb65a <_Z17menuProcStatistich+0xf0>
    b656:	c0 e0       	ldi	r28, 0x00	; 0
    b658:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t x=5;
  uint8_t y=60;
  lcd_hline(x-3,y,120+3+3);
    b65a:	82 e0       	ldi	r24, 0x02	; 2
    b65c:	6c e3       	ldi	r22, 0x3C	; 60
    b65e:	4e e7       	ldi	r20, 0x7E	; 126
    b660:	20 e0       	ldi	r18, 0x00	; 0
    b662:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
  lcd_vline(x,y-32,32+3);
    b666:	85 e0       	ldi	r24, 0x05	; 5
    b668:	6c e1       	ldi	r22, 0x1C	; 28
    b66a:	43 e2       	ldi	r20, 0x23	; 35
    b66c:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    b670:	1b e0       	ldi	r17, 0x0B	; 11

  for(uint8_t i=0; i<120; i+=6)
  {
    lcd_vline(x+i+6,y-1,3);
    b672:	81 2f       	mov	r24, r17
    b674:	6b e3       	ldi	r22, 0x3B	; 59
    b676:	43 e0       	ldi	r20, 0x03	; 3
    b678:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    b67c:	1a 5f       	subi	r17, 0xFA	; 250
  uint8_t x=5;
  uint8_t y=60;
  lcd_hline(x-3,y,120+3+3);
  lcd_vline(x,y-32,32+3);

  for(uint8_t i=0; i<120; i+=6)
    b67e:	13 38       	cpi	r17, 0x83	; 131
    b680:	c1 f7       	brne	.-16     	; 0xb672 <_Z17menuProcStatistich+0x108>
    b682:	16 e0       	ldi	r17, 0x06	; 6
  {
    lcd_vline(x+i+6,y-1,3);
  }
  for(uint8_t i=1; i<=120; i++)
  {
    lcd_vline(x+i,y-s_traceBuf[traceRd],s_traceBuf[traceRd]);
    b684:	0c e3       	ldi	r16, 0x3C	; 60
    b686:	fe 01       	movw	r30, r28
    b688:	ec 56       	subi	r30, 0x6C	; 108
    b68a:	fa 4e       	sbci	r31, 0xEA	; 234
    b68c:	40 81       	ld	r20, Z
    b68e:	60 2f       	mov	r22, r16
    b690:	64 1b       	sub	r22, r20
    b692:	81 2f       	mov	r24, r17
    b694:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    traceRd++;
    b698:	21 96       	adiw	r28, 0x01	; 1
    if(traceRd>=MAXTRACE) traceRd=0;
    b69a:	c8 37       	cpi	r28, 0x78	; 120
    b69c:	d1 05       	cpc	r29, r1
    b69e:	10 f0       	brcs	.+4      	; 0xb6a4 <_Z17menuProcStatistich+0x13a>
    b6a0:	c0 e0       	ldi	r28, 0x00	; 0
    b6a2:	d0 e0       	ldi	r29, 0x00	; 0
    if(traceRd==s_traceWr) break;
    b6a4:	20 91 0c 16 	lds	r18, 0x160C
    b6a8:	30 91 0d 16 	lds	r19, 0x160D
    b6ac:	c2 17       	cp	r28, r18
    b6ae:	d3 07       	cpc	r29, r19
    b6b0:	19 f0       	breq	.+6      	; 0xb6b8 <_Z17menuProcStatistich+0x14e>
    b6b2:	1f 5f       	subi	r17, 0xFF	; 255

  for(uint8_t i=0; i<120; i+=6)
  {
    lcd_vline(x+i+6,y-1,3);
  }
  for(uint8_t i=1; i<=120; i++)
    b6b4:	1e 37       	cpi	r17, 0x7E	; 126
    b6b6:	39 f7       	brne	.-50     	; 0xb686 <_Z17menuProcStatistich+0x11c>
    lcd_vline(x+i,y-s_traceBuf[traceRd],s_traceBuf[traceRd]);
    traceRd++;
    if(traceRd>=MAXTRACE) traceRd=0;
    if(traceRd==s_traceWr) break;
  }
}
    b6b8:	df 91       	pop	r29
    b6ba:	cf 91       	pop	r28
    b6bc:	1f 91       	pop	r17
    b6be:	0f 91       	pop	r16
    b6c0:	08 95       	ret

0000b6c2 <_ZN7RlcFile8readRlc1EPhj>:
  ///read from opened file and decode rlc-coded data
#ifdef TRANSLATIONS
  uint16_t readRlc12(uint8_t*buf,uint16_t i_len,bool rlc2);
  inline uint16_t readRlc1(uint8_t*buf,uint16_t i_len)
  {
    return readRlc12(buf,i_len,false);
    b6c2:	20 e0       	ldi	r18, 0x00	; 0
    b6c4:	0e 94 05 63 	call	0xc60a	; 0xc60a <_ZN7RlcFile9readRlc12EPhjb>
  }
    b6c8:	08 95       	ret

0000b6ca <_ZN7RlcFile7readRlcEPhj>:
  inline uint16_t readRlc(uint8_t*buf, uint16_t i_len)
  {
    return readRlc12(buf,i_len,true);
    b6ca:	21 e0       	ldi	r18, 0x01	; 1
    b6cc:	0e 94 05 63 	call	0xc60a	; 0xc60a <_ZN7RlcFile9readRlc12EPhjb>
  }
    b6d0:	08 95       	ret

/// Markiert einen EEPROM-Bereich als dirty. der Bereich wird dann in
/// eeCheck ins EEPROM zurueckgeschrieben.
void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size);
void eeDirty(uint8_t msk);
inline void eeFlush() { theFile.flush(); }
    b6d2:	8c ea       	ldi	r24, 0xAC	; 172
    b6d4:	99 e1       	ldi	r25, 0x19	; 25
    b6d6:	0e 94 fd 65 	call	0xcbfa	; 0xcbfa <_ZN7RlcFile5flushEv>
    b6da:	08 95       	ret

0000b6dc <_Z20applyDefaultTemplatev>:
void applyTemplate(uint8_t idx);

#ifdef TEMPLATES
inline void applyDefaultTemplate()
{
  applyTemplate(0);
    b6dc:	80 e0       	ldi	r24, 0x00	; 0
    b6de:	0e 94 e9 a6 	call	0x14dd2	; 0x14dd2 <_Z13applyTemplateh>
}
    b6e2:	08 95       	ret

0000b6e4 <_Z14generalDefaultv>:

RlcFile theFile;  //used for any file operation

void generalDefault()
{
  memset(&g_eeGeneral,0,sizeof(g_eeGeneral));
    b6e4:	ee e3       	ldi	r30, 0x3E	; 62
    b6e6:	f2 e1       	ldi	r31, 0x12	; 18
    b6e8:	8d e4       	ldi	r24, 0x4D	; 77
    b6ea:	df 01       	movw	r26, r30
    b6ec:	1d 92       	st	X+, r1
    b6ee:	8a 95       	dec	r24
    b6f0:	e9 f7       	brne	.-6      	; 0xb6ec <_Z14generalDefaultv+0x8>
  g_eeGeneral.myVers   =  EEPROM_VER;
    b6f2:	8a e6       	ldi	r24, 0x6A	; 106
    b6f4:	80 93 3e 12 	sts	0x123E, r24
  g_eeGeneral.currModel=  0;
  g_eeGeneral.contrast = 25;
    b6f8:	89 e1       	ldi	r24, 0x19	; 25
    b6fa:	80 93 6c 12 	sts	0x126C, r24
  g_eeGeneral.vBatWarn = 90;
    b6fe:	8a e5       	ldi	r24, 0x5A	; 90
    b700:	80 93 6d 12 	sts	0x126D, r24
#ifdef DEFAULTMODE1
  g_eeGeneral.stickMode=  0; // default to mode 1
#else
  g_eeGeneral.stickMode=  2; // default to mode 2
    b704:	82 e0       	ldi	r24, 0x02	; 2
    b706:	80 93 82 12 	sts	0x1282, r24
    b70a:	31 96       	adiw	r30, 0x01	; 1
#endif
  for (int i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    b70c:	20 e0       	ldi	r18, 0x00	; 0
    b70e:	32 e0       	ldi	r19, 0x02	; 2
    g_eeGeneral.calibSpanNeg[i] = 0x180;
    b710:	80 e8       	ldi	r24, 0x80	; 128
    b712:	91 e0       	ldi	r25, 0x01	; 1
  g_eeGeneral.stickMode=  0; // default to mode 1
#else
  g_eeGeneral.stickMode=  2; // default to mode 2
#endif
  for (int i = 0; i < 7; ++i) {
    g_eeGeneral.calibMid[i]     = 0x200;
    b714:	21 93       	st	Z+, r18
    b716:	31 93       	st	Z+, r19
    g_eeGeneral.calibSpanNeg[i] = 0x180;
    b718:	95 87       	std	Z+13, r25	; 0x0d
    b71a:	84 87       	std	Z+12, r24	; 0x0c
    g_eeGeneral.calibSpanPos[i] = 0x180;
    b71c:	93 8f       	std	Z+27, r25	; 0x1b
    b71e:	82 8f       	std	Z+26, r24	; 0x1a
#ifdef DEFAULTMODE1
  g_eeGeneral.stickMode=  0; // default to mode 1
#else
  g_eeGeneral.stickMode=  2; // default to mode 2
#endif
  for (int i = 0; i < 7; ++i) {
    b720:	b2 e1       	ldi	r27, 0x12	; 18
    b722:	ed 34       	cpi	r30, 0x4D	; 77
    b724:	fb 07       	cpc	r31, r27
    b726:	b1 f7       	brne	.-20     	; 0xb714 <_Z14generalDefaultv+0x30>
    g_eeGeneral.calibMid[i]     = 0x200;
    g_eeGeneral.calibSpanNeg[i] = 0x180;
    g_eeGeneral.calibSpanPos[i] = 0x180;
  }
  g_eeGeneral.chkSum = (0x200 * 7) + (0x180 * 5);
    b728:	80 e8       	ldi	r24, 0x80	; 128
    b72a:	95 e1       	ldi	r25, 0x15	; 21
    b72c:	90 93 6a 12 	sts	0x126A, r25
    b730:	80 93 69 12 	sts	0x1269, r24
}
    b734:	08 95       	ret

0000b736 <_Z9Translatev>:

#ifdef TRANSLATIONS
uint8_t Translate()
{
    b736:	2f 92       	push	r2
    b738:	3f 92       	push	r3
    b73a:	4f 92       	push	r4
    b73c:	5f 92       	push	r5
    b73e:	6f 92       	push	r6
    b740:	7f 92       	push	r7
    b742:	8f 92       	push	r8
    b744:	9f 92       	push	r9
    b746:	af 92       	push	r10
    b748:	bf 92       	push	r11
    b74a:	cf 92       	push	r12
    b74c:	df 92       	push	r13
    b74e:	ef 92       	push	r14
    b750:	ff 92       	push	r15
    b752:	0f 93       	push	r16
    b754:	1f 93       	push	r17
    b756:	df 93       	push	r29
    b758:	cf 93       	push	r28
    b75a:	cd b7       	in	r28, 0x3d	; 61
    b75c:	de b7       	in	r29, 0x3e	; 62
    b75e:	c5 54       	subi	r28, 0x45	; 69
    b760:	d0 40       	sbci	r29, 0x00	; 0
    b762:	0f b6       	in	r0, 0x3f	; 63
    b764:	f8 94       	cli
    b766:	de bf       	out	0x3e, r29	; 62
    b768:	0f be       	out	0x3f, r0	; 63
    b76a:	cd bf       	out	0x3d, r28	; 61
  if (g_eeGeneral.myVers == 0) {
    b76c:	80 91 3e 12 	lds	r24, 0x123E
    b770:	88 23       	and	r24, r24
    b772:	89 f4       	brne	.+34     	; 0xb796 <_Z9Translatev+0x60>
    if (theFile.readRlc1((uint8_t*)&g_eeGeneral, 1) != 1)
    b774:	8c ea       	ldi	r24, 0xAC	; 172
    b776:	99 e1       	ldi	r25, 0x19	; 25
    b778:	6e e3       	ldi	r22, 0x3E	; 62
    b77a:	72 e1       	ldi	r23, 0x12	; 18
    b77c:	41 e0       	ldi	r20, 0x01	; 1
    b77e:	50 e0       	ldi	r21, 0x00	; 0
    b780:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <_ZN7RlcFile8readRlc1EPhj>
    b784:	81 30       	cpi	r24, 0x01	; 1
    b786:	91 05       	cpc	r25, r1
    b788:	09 f0       	breq	.+2      	; 0xb78c <_Z9Translatev+0x56>
    b78a:	97 c3       	rjmp	.+1838   	; 0xbeba <_Z9Translatev+0x784>
      return 0;
    theFile.openRlc(FILE_GENERAL);
    b78c:	8c ea       	ldi	r24, 0xAC	; 172
    b78e:	99 e1       	ldi	r25, 0x19	; 25
    b790:	60 e0       	ldi	r22, 0x00	; 0
    b792:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
  }

  if (g_eeGeneral.myVers == EEPROM_VER_r584 || (g_eeGeneral.myVers >= EEPROM_ER9X_MIN && g_eeGeneral.myVers <= EEPROM_ER9X_MAX)) {
    b796:	80 91 3e 12 	lds	r24, 0x123E
    b79a:	98 2f       	mov	r25, r24
    b79c:	93 50       	subi	r25, 0x03	; 3
    b79e:	97 30       	cpi	r25, 0x07	; 7
    b7a0:	08 f0       	brcs	.+2      	; 0xb7a4 <_Z9Translatev+0x6e>
    b7a2:	8b c3       	rjmp	.+1814   	; 0xbeba <_Z9Translatev+0x784>
    alert(g_eeGeneral.myVers == EEPROM_VER_r584 ? PSTR("EEprom Data v3") : PSTR("EEprom Data Er9x"), true);
    b7a4:	83 30       	cpi	r24, 0x03	; 3
    b7a6:	19 f4       	brne	.+6      	; 0xb7ae <_Z9Translatev+0x78>
    b7a8:	84 ea       	ldi	r24, 0xA4	; 164
    b7aa:	9a e0       	ldi	r25, 0x0A	; 10
    b7ac:	02 c0       	rjmp	.+4      	; 0xb7b2 <_Z9Translatev+0x7c>
    b7ae:	83 e9       	ldi	r24, 0x93	; 147
    b7b0:	9a e0       	ldi	r25, 0x0A	; 10
    b7b2:	61 e0       	ldi	r22, 0x01	; 1
    b7b4:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    message(PSTR("EEPROM Converting"));
    b7b8:	81 e8       	ldi	r24, 0x81	; 129
    b7ba:	9a e0       	ldi	r25, 0x0A	; 10
    b7bc:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z7messagePKc>
    theFile.readRlc1((uint8_t*)&g_eeGeneral, sizeof(g_eeGeneral));
    b7c0:	8c ea       	ldi	r24, 0xAC	; 172
    b7c2:	99 e1       	ldi	r25, 0x19	; 25
    b7c4:	6e e3       	ldi	r22, 0x3E	; 62
    b7c6:	72 e1       	ldi	r23, 0x12	; 18
    b7c8:	4d e4       	ldi	r20, 0x4D	; 77
    b7ca:	50 e0       	ldi	r21, 0x00	; 0
    b7cc:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <_ZN7RlcFile8readRlc1EPhj>
    memset(&g_eeGeneral.frskyRssiAlarms, 0 , sizeof(g_eeGeneral.frskyRssiAlarms));
    b7d0:	10 92 8a 12 	sts	0x128A, r1
    b7d4:	10 92 89 12 	sts	0x1289, r1
    if (g_eeGeneral.myVers == EEPROM_VER_r584) {
    b7d8:	80 91 3e 12 	lds	r24, 0x123E
    b7dc:	83 30       	cpi	r24, 0x03	; 3
    b7de:	79 f4       	brne	.+30     	; 0xb7fe <_Z9Translatev+0xc8>
      // previous version had only 6 custom switches, OFF and ON values have to be shifted 6
      if (g_eeGeneral.lightSw == MAX_SWITCH-6)
    b7e0:	80 91 6f 12 	lds	r24, 0x126F
    b7e4:	80 31       	cpi	r24, 0x10	; 16
    b7e6:	19 f4       	brne	.+6      	; 0xb7ee <_Z9Translatev+0xb8>
        g_eeGeneral.lightSw += 6;
    b7e8:	86 e1       	ldi	r24, 0x16	; 22
    b7ea:	80 93 6f 12 	sts	0x126F, r24
      if (g_eeGeneral.lightSw == -MAX_SWITCH+6)
    b7ee:	80 91 6f 12 	lds	r24, 0x126F
    b7f2:	80 3f       	cpi	r24, 0xF0	; 240
    b7f4:	49 f4       	brne	.+18     	; 0xb808 <_Z9Translatev+0xd2>
        g_eeGeneral.lightSw -= 6;
    b7f6:	8a ee       	ldi	r24, 0xEA	; 234
    b7f8:	80 93 6f 12 	sts	0x126F, r24
    b7fc:	05 c0       	rjmp	.+10     	; 0xb808 <_Z9Translatev+0xd2>
    }
    else {
      g_eeGeneral.inactivityTimer += 10;
    b7fe:	80 91 83 12 	lds	r24, 0x1283
    b802:	86 5f       	subi	r24, 0xF6	; 246
    b804:	80 93 83 12 	sts	0x1283, r24
    }
    g_eeGeneral.view = 0; // will not translate the view index
    b808:	10 92 80 12 	sts	0x1280, r1
    EEPROM_V3::EEGeneral *old = (EEPROM_V3::EEGeneral *)&g_eeGeneral;
    g_eeGeneral.disableMemoryWarning = old->disableMemoryWarning;
    b80c:	80 91 81 12 	lds	r24, 0x1281
    b810:	98 2f       	mov	r25, r24
    b812:	92 95       	swap	r25
    b814:	90 74       	andi	r25, 0x40	; 64
    b816:	8f 7b       	andi	r24, 0xBF	; 191
    b818:	89 2b       	or	r24, r25
    b81a:	80 93 81 12 	sts	0x1281, r24
    g_eeGeneral.switchWarning = old->disableSwitchWarning ? 0 : -1;
    b81e:	81 ff       	sbrs	r24, 1
    b820:	02 c0       	rjmp	.+4      	; 0xb826 <_Z9Translatev+0xf0>
    b822:	80 e0       	ldi	r24, 0x00	; 0
    b824:	01 c0       	rjmp	.+2      	; 0xb828 <_Z9Translatev+0xf2>
    b826:	8f ef       	ldi	r24, 0xFF	; 255
    b828:	98 2f       	mov	r25, r24
    b82a:	96 70       	andi	r25, 0x06	; 6
    b82c:	80 91 81 12 	lds	r24, 0x1281
    b830:	89 7f       	andi	r24, 0xF9	; 249
    b832:	89 2b       	or	r24, r25
    b834:	80 93 81 12 	sts	0x1281, r24
    b838:	e9 e7       	ldi	r30, 0x79	; 121
    b83a:	f2 e1       	ldi	r31, 0x12	; 18
    b83c:	20 e0       	ldi	r18, 0x00	; 0
    b83e:	30 e0       	ldi	r19, 0x00	; 0
    for (uint8_t i=0; i<4; i++) {
      g_eeGeneral.trainer.mix[i].srcChn = old->trainer.mix[i].srcChn;
      g_eeGeneral.trainer.mix[i].mode = old->trainer.mix[i].mode;
      g_eeGeneral.trainer.mix[i].studWeight = old->trainer.mix[i].studWeight * 13 / 4;
    b840:	4d e0       	ldi	r20, 0x0D	; 13
    b842:	04 e0       	ldi	r16, 0x04	; 4
    b844:	10 e0       	ldi	r17, 0x00	; 0
    b846:	7f 01       	movw	r14, r30
    g_eeGeneral.view = 0; // will not translate the view index
    EEPROM_V3::EEGeneral *old = (EEPROM_V3::EEGeneral *)&g_eeGeneral;
    g_eeGeneral.disableMemoryWarning = old->disableMemoryWarning;
    g_eeGeneral.switchWarning = old->disableSwitchWarning ? 0 : -1;
    for (uint8_t i=0; i<4; i++) {
      g_eeGeneral.trainer.mix[i].srcChn = old->trainer.mix[i].srcChn;
    b848:	d9 01       	movw	r26, r18
    b84a:	aa 0f       	add	r26, r26
    b84c:	bb 1f       	adc	r27, r27
    b84e:	a8 58       	subi	r26, 0x88	; 136
    b850:	bd 4e       	sbci	r27, 0xED	; 237
    b852:	5c 91       	ld	r21, X
    b854:	57 7c       	andi	r21, 0xC7	; 199
      g_eeGeneral.trainer.mix[i].mode = old->trainer.mix[i].mode;
    b856:	c9 01       	movw	r24, r18
    b858:	88 0f       	add	r24, r24
    b85a:	99 1f       	adc	r25, r25
    b85c:	82 5c       	subi	r24, 0xC2	; 194
    b85e:	9d 4e       	sbci	r25, 0xED	; 237
    b860:	fc 01       	movw	r30, r24
    b862:	63 ad       	ldd	r22, Z+59	; 0x3b
    b864:	60 7c       	andi	r22, 0xC0	; 192
    b866:	5f 73       	andi	r21, 0x3F	; 63
    b868:	56 2b       	or	r21, r22
    b86a:	5c 93       	st	X, r21
      g_eeGeneral.trainer.mix[i].studWeight = old->trainer.mix[i].studWeight * 13 / 4;
    b86c:	83 ad       	ldd	r24, Z+59	; 0x3b
    b86e:	88 0f       	add	r24, r24
    b870:	88 0f       	add	r24, r24
    b872:	85 95       	asr	r24
    b874:	85 95       	asr	r24
    b876:	84 02       	muls	r24, r20
    b878:	c0 01       	movw	r24, r0
    b87a:	11 24       	eor	r1, r1
    b87c:	b8 01       	movw	r22, r16
    b87e:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    b882:	d7 01       	movw	r26, r14
    b884:	6c 93       	st	X, r22
    b886:	2f 5f       	subi	r18, 0xFF	; 255
    b888:	3f 4f       	sbci	r19, 0xFF	; 255
    b88a:	e2 e0       	ldi	r30, 0x02	; 2
    b88c:	f0 e0       	ldi	r31, 0x00	; 0
    b88e:	ee 0e       	add	r14, r30
    b890:	ff 1e       	adc	r15, r31
    }
    g_eeGeneral.view = 0; // will not translate the view index
    EEPROM_V3::EEGeneral *old = (EEPROM_V3::EEGeneral *)&g_eeGeneral;
    g_eeGeneral.disableMemoryWarning = old->disableMemoryWarning;
    g_eeGeneral.switchWarning = old->disableSwitchWarning ? 0 : -1;
    for (uint8_t i=0; i<4; i++) {
    b892:	24 30       	cpi	r18, 0x04	; 4
    b894:	31 05       	cpc	r19, r1
    b896:	c1 f6       	brne	.-80     	; 0xb848 <_Z9Translatev+0x112>
    b898:	77 24       	eor	r7, r7
              dr = 2;
            if (dr == 2 && !expo4[ch].expo[0][0][0] && !expo4[ch].expo[0][0][1] && !expo4[ch].expo[0][1][0] && !expo4[ch].expo[0][1][1])
              break;
            g_model.expoData[e].swtch = (dr == 0 ? -expo4[ch].drSw1 : (dr == 1 ? -expo4[ch].drSw2 : 0));
            g_model.expoData[e].chn = ch;
            g_model.expoData[e].expo = expo4[ch].expo[pos][0][0];
    b89a:	4e 01       	movw	r8, r28
    b89c:	08 94       	sec
    b89e:	81 1c       	adc	r8, r1
    b8a0:	91 1c       	adc	r9, r1
      g_eeGeneral.trainer.mix[i].srcChn = old->trainer.mix[i].srcChn;
      g_eeGeneral.trainer.mix[i].mode = old->trainer.mix[i].mode;
      g_eeGeneral.trainer.mix[i].studWeight = old->trainer.mix[i].studWeight * 13 / 4;
    }
    for (uint8_t id=0; id<MAX_MODELS; id++) {
      theFile.openRlc(FILE_MODEL(id));
    b8a2:	73 94       	inc	r7
    b8a4:	8c ea       	ldi	r24, 0xAC	; 172
    b8a6:	99 e1       	ldi	r25, 0x19	; 25
    b8a8:	67 2d       	mov	r22, r7
    b8aa:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
      uint16_t sz = theFile.readRlc1((uint8_t*)&g_model, sizeof(EEPROM_V4::ModelData));
    b8ae:	8c ea       	ldi	r24, 0xAC	; 172
    b8b0:	99 e1       	ldi	r25, 0x19	; 25
    b8b2:	6b e8       	ldi	r22, 0x8B	; 139
    b8b4:	72 e1       	ldi	r23, 0x12	; 18
    b8b6:	45 ea       	ldi	r20, 0xA5	; 165
    b8b8:	52 e0       	ldi	r21, 0x02	; 2
    b8ba:	0e 94 61 5b 	call	0xb6c2	; 0xb6c2 <_ZN7RlcFile8readRlc1EPhj>
      if(sz > 0) {
    b8be:	00 97       	sbiw	r24, 0x00	; 0
    b8c0:	09 f4       	brne	.+2      	; 0xb8c4 <_Z9Translatev+0x18e>
    b8c2:	e6 c2       	rjmp	.+1484   	; 0xbe90 <_Z9Translatev+0x75a>
        EEPROM_V4::ModelData *v4 = (EEPROM_V4::ModelData *)&g_model;
        EEPROM_V3::ModelData *v3 = (EEPROM_V3::ModelData *)&g_model;
        SwashRingData swashR;
        swashR.invertELE = v4->swashInvertELE;
    b8c4:	80 91 a1 12 	lds	r24, 0x12A1
    b8c8:	58 2e       	mov	r5, r24
    b8ca:	56 94       	lsr	r5
    b8cc:	56 94       	lsr	r5
    b8ce:	f1 e0       	ldi	r31, 0x01	; 1
    b8d0:	5f 22       	and	r5, r31
        swashR.invertAIL = v4->swashInvertAIL;
    b8d2:	b8 2e       	mov	r11, r24
    b8d4:	b6 94       	lsr	r11
    b8d6:	b6 94       	lsr	r11
    b8d8:	b6 94       	lsr	r11
    b8da:	bf 22       	and	r11, r31
        swashR.invertCOL = v4->swashInvertCOL;
    b8dc:	28 2e       	mov	r2, r24
    b8de:	22 94       	swap	r2
    b8e0:	7f e0       	ldi	r23, 0x0F	; 15
    b8e2:	27 22       	and	r2, r23
    b8e4:	2f 22       	and	r2, r31
        swashR.type = v4->swashType;
    b8e6:	82 95       	swap	r24
    b8e8:	86 95       	lsr	r24
    b8ea:	87 70       	andi	r24, 0x07	; 7
    b8ec:	22 96       	adiw	r28, 0x02	; 2
    b8ee:	8f af       	std	Y+63, r24	; 0x3f
    b8f0:	22 97       	sbiw	r28, 0x02	; 2
        swashR.collectiveSource = v4->swashCollectiveSource;
    b8f2:	20 91 a2 12 	lds	r18, 0x12A2
    b8f6:	23 96       	adiw	r28, 0x03	; 3
    b8f8:	2f af       	std	Y+63, r18	; 0x3f
    b8fa:	23 97       	sbiw	r28, 0x03	; 3
        swashR.value = v4->swashRingValue;
    b8fc:	60 91 a3 12 	lds	r22, 0x12A3
    b900:	24 96       	adiw	r28, 0x04	; 4
    b902:	6f af       	std	Y+63, r22	; 0x3f
    b904:	24 97       	sbiw	r28, 0x04	; 4
        int8_t trims[4];
        memcpy(&trims[0], &v3->trim[0], 4);
    b906:	80 91 6d 14 	lds	r24, 0x146D
    b90a:	90 91 6e 14 	lds	r25, 0x146E
    b90e:	a0 91 6f 14 	lds	r26, 0x146F
    b912:	b0 91 70 14 	lds	r27, 0x1470
    b916:	89 83       	std	Y+1, r24	; 0x01
    b918:	9a 83       	std	Y+2, r25	; 0x02
    b91a:	ab 83       	std	Y+3, r26	; 0x03
    b91c:	bc 83       	std	Y+4, r27	; 0x04
        int8_t trimSw = v3->trimSw;
    b91e:	70 91 9f 12 	lds	r23, 0x129F
    b922:	7d af       	std	Y+61, r23	; 0x3d
    b924:	0b e8       	ldi	r16, 0x8B	; 139
    b926:	12 e1       	ldi	r17, 0x12	; 18
        for (uint8_t i=0; i<10; i++)
          g_model.name[i] = char2idx(g_model.name[i]);
    b928:	d8 01       	movw	r26, r16
    b92a:	8c 91       	ld	r24, X
    b92c:	0e 94 c7 06 	call	0xd8e	; 0xd8e <_Z8char2idxc>
    b930:	f8 01       	movw	r30, r16
    b932:	81 93       	st	Z+, r24
    b934:	8f 01       	movw	r16, r30
        swashR.collectiveSource = v4->swashCollectiveSource;
        swashR.value = v4->swashRingValue;
        int8_t trims[4];
        memcpy(&trims[0], &v3->trim[0], 4);
        int8_t trimSw = v3->trimSw;
        for (uint8_t i=0; i<10; i++)
    b936:	f2 e1       	ldi	r31, 0x12	; 18
    b938:	05 39       	cpi	r16, 0x95	; 149
    b93a:	1f 07       	cpc	r17, r31
    b93c:	a9 f7       	brne	.-22     	; 0xb928 <_Z9Translatev+0x1f2>
          g_model.name[i] = char2idx(g_model.name[i]);
        g_model.tmrMode = v3->tmrMode;
    b93e:	80 91 96 12 	lds	r24, 0x1296
        g_model.tmrDir = v3->tmrDir;
    b942:	90 91 97 12 	lds	r25, 0x1297
    b946:	97 95       	ror	r25
    b948:	99 27       	eor	r25, r25
    b94a:	97 95       	ror	r25
    b94c:	8f 77       	andi	r24, 0x7F	; 127
    b94e:	89 2b       	or	r24, r25
    b950:	80 93 95 12 	sts	0x1295, r24
        g_model.tmrVal = v3->tmrVal;
    b954:	80 91 98 12 	lds	r24, 0x1298
    b958:	90 91 99 12 	lds	r25, 0x1299
    b95c:	90 93 97 12 	sts	0x1297, r25
    b960:	80 93 96 12 	sts	0x1296, r24
        g_model.protocol = v3->protocol;
    b964:	80 91 9a 12 	lds	r24, 0x129A
    b968:	87 70       	andi	r24, 0x07	; 7
        g_model.ppmNCH = v3->ppmNCH;
    b96a:	30 91 9b 12 	lds	r19, 0x129B
    b96e:	32 95       	swap	r19
    b970:	30 7f       	andi	r19, 0xF0	; 240
        g_model.thrTrim = v3->thrTrim;
    b972:	20 91 9c 12 	lds	r18, 0x129C
    b976:	92 2f       	mov	r25, r18
    b978:	91 70       	andi	r25, 0x01	; 1
    b97a:	99 0f       	add	r25, r25
    b97c:	99 0f       	add	r25, r25
    b97e:	99 0f       	add	r25, r25
    b980:	83 2b       	or	r24, r19
    b982:	89 2b       	or	r24, r25
    b984:	80 93 98 12 	sts	0x1298, r24
        g_model.thrExpo = v3->thrExpo;
    b988:	26 95       	lsr	r18
    b98a:	28 70       	andi	r18, 0x08	; 8
    b98c:	80 91 99 12 	lds	r24, 0x1299
    b990:	80 7f       	andi	r24, 0xF0	; 240
        g_model.trimInc = v3->trimInc;
    b992:	90 91 9d 12 	lds	r25, 0x129D
    b996:	97 70       	andi	r25, 0x07	; 7
    b998:	82 2b       	or	r24, r18
    b99a:	89 2b       	or	r24, r25
        g_model.pulsePol = v3->pulsePol;
    b99c:	90 91 a1 12 	lds	r25, 0x12A1
    b9a0:	29 2f       	mov	r18, r25
    b9a2:	21 70       	andi	r18, 0x01	; 1
    b9a4:	22 95       	swap	r18
    b9a6:	20 7f       	andi	r18, 0xF0	; 240
    b9a8:	8f 7c       	andi	r24, 0xCF	; 207
        if (g_eeGeneral.myVers == EEPROM_VER_r584)
    b9aa:	30 91 3e 12 	lds	r19, 0x123E
    b9ae:	82 2b       	or	r24, r18
    b9b0:	33 30       	cpi	r19, 0x03	; 3
    b9b2:	19 f4       	brne	.+6      	; 0xb9ba <_Z9Translatev+0x284>
          g_model.extendedLimits = 0;
    b9b4:	80 93 99 12 	sts	0x1299, r24
    b9b8:	05 c0       	rjmp	.+10     	; 0xb9c4 <_Z9Translatev+0x28e>
        else
          g_model.extendedLimits = v4->extendedLimits;
    b9ba:	92 95       	swap	r25
    b9bc:	90 72       	andi	r25, 0x20	; 32
    b9be:	98 2b       	or	r25, r24
    b9c0:	90 93 99 12 	sts	0x1299, r25
        g_model.extendedTrims = 0;
    b9c4:	80 91 99 12 	lds	r24, 0x1299
        g_model.spare2 = 0;
    b9c8:	8f 73       	andi	r24, 0x3F	; 63
    b9ca:	80 93 99 12 	sts	0x1299, r24
        g_model.ppmDelay = v3->ppmDelay;
    b9ce:	80 91 9e 12 	lds	r24, 0x129E
    b9d2:	80 93 9a 12 	sts	0x129A, r24
        g_model.beepANACenter = v3->beepANACenter;
    b9d6:	80 91 a0 12 	lds	r24, 0x12A0
    b9da:	80 93 9b 12 	sts	0x129B, r24
        g_model.tmr2Mode = 0;
        g_model.tmr2Dir = 0;
    b9de:	10 92 9c 12 	sts	0x129C, r1
        g_model.tmr2Val = 0;
    b9e2:	10 92 9e 12 	sts	0x129E, r1
    b9e6:	10 92 9d 12 	sts	0x129D, r1
    b9ea:	60 ea       	ldi	r22, 0xA0	; 160
    b9ec:	e6 2e       	mov	r14, r22
    b9ee:	62 e1       	ldi	r22, 0x12	; 18
    b9f0:	f6 2e       	mov	r15, r22
    b9f2:	00 e0       	ldi	r16, 0x00	; 0
    b9f4:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t i=0; i<MAX_MIXERS; i++) {
          memmove(&g_model.mixData[i], &v3->mixData[i], sizeof(MixData)); // MixData size changed!
    b9f6:	c8 01       	movw	r24, r16
    b9f8:	53 e0       	ldi	r21, 0x03	; 3
    b9fa:	88 0f       	add	r24, r24
    b9fc:	99 1f       	adc	r25, r25
    b9fe:	5a 95       	dec	r21
    ba00:	e1 f7       	brne	.-8      	; 0xb9fa <_Z9Translatev+0x2c4>
    ba02:	6c 01       	movw	r12, r24
    ba04:	c0 0e       	add	r12, r16
    ba06:	d1 1e       	adc	r13, r17
    ba08:	b8 01       	movw	r22, r16
    ba0a:	66 0f       	add	r22, r22
    ba0c:	77 1f       	adc	r23, r23
    ba0e:	68 0f       	add	r22, r24
    ba10:	79 1f       	adc	r23, r25
    ba12:	6b 55       	subi	r22, 0x5B	; 91
    ba14:	7d 4e       	sbci	r23, 0xED	; 237
    ba16:	c6 01       	movw	r24, r12
    ba18:	81 56       	subi	r24, 0x61	; 97
    ba1a:	9d 4e       	sbci	r25, 0xED	; 237
    ba1c:	49 e0       	ldi	r20, 0x09	; 9
    ba1e:	50 e0       	ldi	r21, 0x00	; 0
    ba20:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
          g_model.mixData[i].mixWarn = g_model.mixData[i].phase;
    ba24:	f6 01       	movw	r30, r12
    ba26:	e1 56       	subi	r30, 0x61	; 97
    ba28:	fd 4e       	sbci	r31, 0xED	; 237
    ba2a:	d6 01       	movw	r26, r12
    ba2c:	aa 55       	subi	r26, 0x5A	; 90
    ba2e:	bd 4e       	sbci	r27, 0xED	; 237
    ba30:	9c 91       	ld	r25, X
    ba32:	95 95       	asr	r25
    ba34:	95 95       	asr	r25
    ba36:	95 95       	asr	r25
    ba38:	95 95       	asr	r25
    ba3a:	92 95       	swap	r25
    ba3c:	99 0f       	add	r25, r25
    ba3e:	90 7e       	andi	r25, 0xE0	; 224
    ba40:	80 81       	ld	r24, Z
    ba42:	8f 71       	andi	r24, 0x1F	; 31
    ba44:	89 2b       	or	r24, r25
    ba46:	80 83       	st	Z, r24
          g_model.mixData[i].phase = 0;
    ba48:	8c 91       	ld	r24, X
    ba4a:	8f 70       	andi	r24, 0x0F	; 15
    ba4c:	8c 93       	st	X, r24
          if (g_eeGeneral.myVers == EEPROM_VER_r584 && g_model.mixData[i].srcRaw > MIX_FULL) {
    ba4e:	80 91 3e 12 	lds	r24, 0x123E
    ba52:	83 30       	cpi	r24, 0x03	; 3
    ba54:	31 f4       	brne	.+12     	; 0xba62 <_Z9Translatev+0x32c>
    ba56:	d7 01       	movw	r26, r14
    ba58:	8c 91       	ld	r24, X
    ba5a:	8a 30       	cpi	r24, 0x0A	; 10
    ba5c:	10 f0       	brcs	.+4      	; 0xba62 <_Z9Translatev+0x32c>
            g_model.mixData[i].srcRaw += 3; /* because of [CYC1:CYC3] inserted after MIX_FULL */
    ba5e:	8d 5f       	subi	r24, 0xFD	; 253
    ba60:	8c 93       	st	X, r24
    ba62:	0f 5f       	subi	r16, 0xFF	; 255
    ba64:	1f 4f       	sbci	r17, 0xFF	; 255
    ba66:	e9 e0       	ldi	r30, 0x09	; 9
    ba68:	f0 e0       	ldi	r31, 0x00	; 0
    ba6a:	ee 0e       	add	r14, r30
    ba6c:	ff 1e       	adc	r15, r31
        g_model.ppmDelay = v3->ppmDelay;
        g_model.beepANACenter = v3->beepANACenter;
        g_model.tmr2Mode = 0;
        g_model.tmr2Dir = 0;
        g_model.tmr2Val = 0;
        for (uint8_t i=0; i<MAX_MIXERS; i++) {
    ba6e:	00 32       	cpi	r16, 0x20	; 32
    ba70:	11 05       	cpc	r17, r1
    ba72:	09 f6       	brne	.-126    	; 0xb9f6 <_Z9Translatev+0x2c0>
          if (g_eeGeneral.myVers == EEPROM_VER_r584 && g_model.mixData[i].srcRaw > MIX_FULL) {
            g_model.mixData[i].srcRaw += 3; /* because of [CYC1:CYC3] inserted after MIX_FULL */
          }
        }
        assert((char *)&g_model.limitData[0] < (char *)&v3->limitData[0]);
        memmove(&g_model.limitData[0], &v3->limitData[0], sizeof(LimitData)*NUM_CHNOUT);
    ba74:	8f eb       	ldi	r24, 0xBF	; 191
    ba76:	93 e1       	ldi	r25, 0x13	; 19
    ba78:	65 ee       	ldi	r22, 0xE5	; 229
    ba7a:	73 e1       	ldi	r23, 0x13	; 19
    ba7c:	40 e5       	ldi	r20, 0x50	; 80
    ba7e:	50 e0       	ldi	r21, 0x00	; 0
    ba80:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
        assert((char *)&g_model.expoData[0] < (char *)v3->expoData);
        EEPROM_V4::ExpoData expo4[4];
        memcpy(&expo4[0], &v4->expoData[0], sizeof(expo4));
    ba84:	de 01       	movw	r26, r28
    ba86:	15 96       	adiw	r26, 0x05	; 5
    ba88:	e5 e3       	ldi	r30, 0x35	; 53
    ba8a:	f4 e1       	ldi	r31, 0x14	; 20
    ba8c:	88 e3       	ldi	r24, 0x38	; 56
    ba8e:	01 90       	ld	r0, Z+
    ba90:	0d 92       	st	X+, r0
    ba92:	81 50       	subi	r24, 0x01	; 1
    ba94:	e1 f7       	brne	.-8      	; 0xba8e <_Z9Translatev+0x358>
        memset(&g_model.expoData[0], 0, sizeof(expo4));
    ba96:	88 e3       	ldi	r24, 0x38	; 56
    ba98:	af e0       	ldi	r26, 0x0F	; 15
    ba9a:	b4 e1       	ldi	r27, 0x14	; 20
    ba9c:	1d 92       	st	X+, r1
    ba9e:	8a 95       	dec	r24
    baa0:	e9 f7       	brne	.-6      	; 0xba9c <_Z9Translatev+0x366>
    baa2:	fe 01       	movw	r30, r28
    baa4:	35 96       	adiw	r30, 0x05	; 5
    baa6:	80 e0       	ldi	r24, 0x00	; 0
    baa8:	90 e0       	ldi	r25, 0x00	; 0
        // expos conversion
        uint8_t e = 0;
    baaa:	00 e0       	ldi	r16, 0x00	; 0
    baac:	37 2c       	mov	r3, r7
    baae:	45 2c       	mov	r4, r5
    bab0:	5b 2c       	mov	r5, r11
    bab2:	1d c1       	rjmp	.+570    	; 0xbcee <_Z9Translatev+0x5b8>
        for (uint8_t ch = 0; ch < 4 && e < MAX_EXPOS; ch++) {
          for (uint8_t dr = 0, pos = 0; dr < 3 && e < MAX_EXPOS; dr++, pos++) {
            if ((dr == 0 && !expo4[ch].drSw1) || (dr == 1 && !expo4[ch].drSw2))
    bab4:	24 85       	ldd	r18, Z+12	; 0x0c
    bab6:	03 c0       	rjmp	.+6      	; 0xbabe <_Z9Translatev+0x388>
    bab8:	11 30       	cpi	r17, 0x01	; 1
    baba:	21 f4       	brne	.+8      	; 0xbac4 <_Z9Translatev+0x38e>
    babc:	25 85       	ldd	r18, Z+13	; 0x0d
    babe:	22 23       	and	r18, r18
    bac0:	19 f0       	breq	.+6      	; 0xbac8 <_Z9Translatev+0x392>
    bac2:	10 c0       	rjmp	.+32     	; 0xbae4 <_Z9Translatev+0x3ae>
              dr = 2;
            if (dr == 2 && !expo4[ch].expo[0][0][0] && !expo4[ch].expo[0][0][1] && !expo4[ch].expo[0][1][0] && !expo4[ch].expo[0][1][1])
    bac4:	12 30       	cpi	r17, 0x02	; 2
    bac6:	71 f4       	brne	.+28     	; 0xbae4 <_Z9Translatev+0x3ae>
    bac8:	20 81       	ld	r18, Z
    baca:	22 23       	and	r18, r18
    bacc:	51 f4       	brne	.+20     	; 0xbae2 <_Z9Translatev+0x3ac>
    bace:	21 81       	ldd	r18, Z+1	; 0x01
    bad0:	22 23       	and	r18, r18
    bad2:	39 f4       	brne	.+14     	; 0xbae2 <_Z9Translatev+0x3ac>
    bad4:	22 81       	ldd	r18, Z+2	; 0x02
    bad6:	22 23       	and	r18, r18
    bad8:	21 f4       	brne	.+8      	; 0xbae2 <_Z9Translatev+0x3ac>
    bada:	23 81       	ldd	r18, Z+3	; 0x03
    badc:	22 23       	and	r18, r18
    bade:	09 f4       	brne	.+2      	; 0xbae2 <_Z9Translatev+0x3ac>
    bae0:	fd c0       	rjmp	.+506    	; 0xbcdc <_Z9Translatev+0x5a6>
    bae2:	12 e0       	ldi	r17, 0x02	; 2
              break;
            g_model.expoData[e].swtch = (dr == 0 ? -expo4[ch].drSw1 : (dr == 1 ? -expo4[ch].drSw2 : 0));
    bae4:	40 2f       	mov	r20, r16
    bae6:	50 e0       	ldi	r21, 0x00	; 0
    bae8:	11 23       	and	r17, r17
    baea:	11 f4       	brne	.+4      	; 0xbaf0 <_Z9Translatev+0x3ba>
    baec:	24 85       	ldd	r18, Z+12	; 0x0c
    baee:	03 c0       	rjmp	.+6      	; 0xbaf6 <_Z9Translatev+0x3c0>
    baf0:	11 30       	cpi	r17, 0x01	; 1
    baf2:	49 f4       	brne	.+18     	; 0xbb06 <_Z9Translatev+0x3d0>
    baf4:	25 85       	ldd	r18, Z+13	; 0x0d
    baf6:	21 95       	neg	r18
    baf8:	22 0f       	add	r18, r18
    bafa:	22 0f       	add	r18, r18
    bafc:	22 0f       	add	r18, r18
    bafe:	25 95       	asr	r18
    bb00:	25 95       	asr	r18
    bb02:	25 95       	asr	r18
    bb04:	01 c0       	rjmp	.+2      	; 0xbb08 <_Z9Translatev+0x3d2>
    bb06:	20 e0       	ldi	r18, 0x00	; 0
    bb08:	7a 01       	movw	r14, r20
    bb0a:	ee 0c       	add	r14, r14
    bb0c:	ff 1c       	adc	r15, r15
    bb0e:	ee 0c       	add	r14, r14
    bb10:	ff 1c       	adc	r15, r15
    bb12:	d7 01       	movw	r26, r14
    bb14:	a0 5f       	subi	r26, 0xF0	; 240
    bb16:	bb 4e       	sbci	r27, 0xEB	; 235
    bb18:	2f 71       	andi	r18, 0x1F	; 31
    bb1a:	3c 91       	ld	r19, X
    bb1c:	30 7e       	andi	r19, 0xE0	; 224
    bb1e:	32 2b       	or	r19, r18
    bb20:	3c 93       	st	X, r19
            g_model.expoData[e].chn = ch;
    bb22:	97 01       	movw	r18, r14
    bb24:	21 5f       	subi	r18, 0xF1	; 241
    bb26:	3b 4e       	sbci	r19, 0xEB	; 235
    bb28:	d9 01       	movw	r26, r18
    bb2a:	6c 91       	ld	r22, X
    bb2c:	63 7f       	andi	r22, 0xF3	; 243
    bb2e:	6a 29       	or	r22, r10
    bb30:	6c 93       	st	X, r22
            g_model.expoData[e].expo = expo4[ch].expo[pos][0][0];
    bb32:	66 2d       	mov	r22, r6
    bb34:	70 e0       	ldi	r23, 0x00	; 0
    bb36:	7f af       	std	Y+63, r23	; 0x3f
    bb38:	6e af       	std	Y+62, r22	; 0x3e
    bb3a:	6b 01       	movw	r12, r22
    bb3c:	cc 0c       	add	r12, r12
    bb3e:	dd 1c       	adc	r13, r13
    bb40:	cc 0c       	add	r12, r12
    bb42:	dd 1c       	adc	r13, r13
    bb44:	bc 01       	movw	r22, r24
    bb46:	66 0f       	add	r22, r22
    bb48:	77 1f       	adc	r23, r23
    bb4a:	db 01       	movw	r26, r22
    bb4c:	aa 0f       	add	r26, r26
    bb4e:	bb 1f       	adc	r27, r27
    bb50:	aa 0f       	add	r26, r26
    bb52:	bb 1f       	adc	r27, r27
    bb54:	aa 0f       	add	r26, r26
    bb56:	bb 1f       	adc	r27, r27
    bb58:	a6 1b       	sub	r26, r22
    bb5a:	b7 0b       	sbc	r27, r23
    bb5c:	ac 0d       	add	r26, r12
    bb5e:	bd 1d       	adc	r27, r13
    bb60:	a8 0d       	add	r26, r8
    bb62:	b9 1d       	adc	r27, r9
    bb64:	14 96       	adiw	r26, 0x04	; 4
    bb66:	7c 90       	ld	r7, X
    bb68:	d7 01       	movw	r26, r14
    bb6a:	ae 5e       	subi	r26, 0xEE	; 238
    bb6c:	bb 4e       	sbci	r27, 0xEB	; 235
    bb6e:	7c 92       	st	X, r7
            g_model.expoData[e].weight = 100 + expo4[ch].expo[pos][1][0];
    bb70:	bc 01       	movw	r22, r24
    bb72:	66 0f       	add	r22, r22
    bb74:	77 1f       	adc	r23, r23
    bb76:	db 01       	movw	r26, r22
    bb78:	aa 0f       	add	r26, r26
    bb7a:	bb 1f       	adc	r27, r27
    bb7c:	aa 0f       	add	r26, r26
    bb7e:	bb 1f       	adc	r27, r27
    bb80:	aa 0f       	add	r26, r26
    bb82:	bb 1f       	adc	r27, r27
    bb84:	a6 1b       	sub	r26, r22
    bb86:	b7 0b       	sbc	r27, r23
    bb88:	ac 0d       	add	r26, r12
    bb8a:	bd 1d       	adc	r27, r13
    bb8c:	a8 0d       	add	r26, r8
    bb8e:	b9 1d       	adc	r27, r9
    bb90:	16 96       	adiw	r26, 0x06	; 6
    bb92:	bc 90       	ld	r11, X
    bb94:	d7 01       	movw	r26, r14
    bb96:	af 5e       	subi	r26, 0xEF	; 239
    bb98:	bb 4e       	sbci	r27, 0xEB	; 235
    bb9a:	7b 2d       	mov	r23, r11
    bb9c:	7c 59       	subi	r23, 0x9C	; 156
    bb9e:	77 0f       	add	r23, r23
    bba0:	6c 91       	ld	r22, X
    bba2:	61 70       	andi	r22, 0x01	; 1
    bba4:	67 2b       	or	r22, r23
    bba6:	6c 93       	st	X, r22
            if (expo4[ch].expo[pos][0][0] == expo4[ch].expo[pos][0][1] && expo4[ch].expo[pos][1][0] == expo4[ch].expo[pos][1][1]) {
    bba8:	bc 01       	movw	r22, r24
    bbaa:	66 0f       	add	r22, r22
    bbac:	77 1f       	adc	r23, r23
    bbae:	db 01       	movw	r26, r22
    bbb0:	aa 0f       	add	r26, r26
    bbb2:	bb 1f       	adc	r27, r27
    bbb4:	aa 0f       	add	r26, r26
    bbb6:	bb 1f       	adc	r27, r27
    bbb8:	aa 0f       	add	r26, r26
    bbba:	bb 1f       	adc	r27, r27
    bbbc:	a6 1b       	sub	r26, r22
    bbbe:	b7 0b       	sbc	r27, r23
    bbc0:	ac 0d       	add	r26, r12
    bbc2:	bd 1d       	adc	r27, r13
    bbc4:	a8 0d       	add	r26, r8
    bbc6:	b9 1d       	adc	r27, r9
    bbc8:	15 96       	adiw	r26, 0x05	; 5
    bbca:	fc 90       	ld	r15, X
    bbcc:	15 97       	sbiw	r26, 0x05	; 5
    bbce:	7f 14       	cp	r7, r15
    bbd0:	d1 f4       	brne	.+52     	; 0xbc06 <_Z9Translatev+0x4d0>
    bbd2:	bc 01       	movw	r22, r24
    bbd4:	66 0f       	add	r22, r22
    bbd6:	77 1f       	adc	r23, r23
    bbd8:	db 01       	movw	r26, r22
    bbda:	aa 0f       	add	r26, r26
    bbdc:	bb 1f       	adc	r27, r27
    bbde:	aa 0f       	add	r26, r26
    bbe0:	bb 1f       	adc	r27, r27
    bbe2:	aa 0f       	add	r26, r26
    bbe4:	bb 1f       	adc	r27, r27
    bbe6:	a6 1b       	sub	r26, r22
    bbe8:	b7 0b       	sbc	r27, r23
    bbea:	ac 0d       	add	r26, r12
    bbec:	bd 1d       	adc	r27, r13
    bbee:	a8 0d       	add	r26, r8
    bbf0:	b9 1d       	adc	r27, r9
    bbf2:	17 96       	adiw	r26, 0x07	; 7
    bbf4:	6c 91       	ld	r22, X
    bbf6:	17 97       	sbiw	r26, 0x07	; 7
    bbf8:	b6 16       	cp	r11, r22
    bbfa:	29 f4       	brne	.+10     	; 0xbc06 <_Z9Translatev+0x4d0>
              g_model.expoData[e++].mode = 3;
    bbfc:	d9 01       	movw	r26, r18
    bbfe:	4c 91       	ld	r20, X
    bc00:	43 60       	ori	r20, 0x03	; 3
    bc02:	4c 93       	st	X, r20
    bc04:	60 c0       	rjmp	.+192    	; 0xbcc6 <_Z9Translatev+0x590>
            }
            else {
              g_model.expoData[e].mode = 2;
    bc06:	da 01       	movw	r26, r20
    bc08:	aa 0f       	add	r26, r26
    bc0a:	bb 1f       	adc	r27, r27
    bc0c:	aa 0f       	add	r26, r26
    bc0e:	bb 1f       	adc	r27, r27
    bc10:	a1 5f       	subi	r26, 0xF1	; 241
    bc12:	bb 4e       	sbci	r27, 0xEB	; 235
    bc14:	2c 91       	ld	r18, X
    bc16:	2c 7f       	andi	r18, 0xFC	; 252
    bc18:	22 60       	ori	r18, 0x02	; 2
    bc1a:	2c 93       	st	X, r18
              if (e < MAX_EXPOS - 1) {
    bc1c:	0d 30       	cpi	r16, 0x0D	; 13
    bc1e:	08 f0       	brcs	.+2      	; 0xbc22 <_Z9Translatev+0x4ec>
    bc20:	53 c0       	rjmp	.+166    	; 0xbcc8 <_Z9Translatev+0x592>
                g_model.expoData[e + 1].swtch = g_model.expoData[e].swtch;
    bc22:	ba 01       	movw	r22, r20
    bc24:	66 0f       	add	r22, r22
    bc26:	77 1f       	adc	r23, r23
    bc28:	66 0f       	add	r22, r22
    bc2a:	77 1f       	adc	r23, r23
    bc2c:	6c 5e       	subi	r22, 0xEC	; 236
    bc2e:	7b 4e       	sbci	r23, 0xEB	; 235
    bc30:	44 0f       	add	r20, r20
    bc32:	55 1f       	adc	r21, r21
    bc34:	44 0f       	add	r20, r20
    bc36:	55 1f       	adc	r21, r21
    bc38:	40 5f       	subi	r20, 0xF0	; 240
    bc3a:	5b 4e       	sbci	r21, 0xEB	; 235
    bc3c:	da 01       	movw	r26, r20
    bc3e:	3c 91       	ld	r19, X
    bc40:	3f 71       	andi	r19, 0x1F	; 31
    bc42:	db 01       	movw	r26, r22
    bc44:	2c 91       	ld	r18, X
    bc46:	20 7e       	andi	r18, 0xE0	; 224
    bc48:	23 2b       	or	r18, r19
    bc4a:	2c 93       	st	X, r18
                g_model.expoData[++e].chn = ch;
    bc4c:	0f 5f       	subi	r16, 0xFF	; 255
    bc4e:	60 2f       	mov	r22, r16
    bc50:	70 e0       	ldi	r23, 0x00	; 0
    bc52:	db 01       	movw	r26, r22
    bc54:	aa 0f       	add	r26, r26
    bc56:	bb 1f       	adc	r27, r27
    bc58:	aa 0f       	add	r26, r26
    bc5a:	bb 1f       	adc	r27, r27
    bc5c:	a1 5f       	subi	r26, 0xF1	; 241
    bc5e:	bb 4e       	sbci	r27, 0xEB	; 235
    bc60:	2c 91       	ld	r18, X
    bc62:	20 7f       	andi	r18, 0xF0	; 240
                g_model.expoData[e].mode = 1;
    bc64:	2a 29       	or	r18, r10
    bc66:	21 60       	ori	r18, 0x01	; 1
    bc68:	2c 93       	st	X, r18
                g_model.expoData[e].expo = expo4[ch].expo[pos][0][1];
    bc6a:	66 0f       	add	r22, r22
    bc6c:	77 1f       	adc	r23, r23
    bc6e:	66 0f       	add	r22, r22
    bc70:	77 1f       	adc	r23, r23
    bc72:	db 01       	movw	r26, r22
    bc74:	ae 5e       	subi	r26, 0xEE	; 238
    bc76:	bb 4e       	sbci	r27, 0xEB	; 235
    bc78:	fc 92       	st	X, r15
                g_model.expoData[e++].weight = 100 + expo4[ch].expo[pos][1][1];
    bc7a:	6f 5e       	subi	r22, 0xEF	; 239
    bc7c:	7b 4e       	sbci	r23, 0xEB	; 235
    bc7e:	ae ad       	ldd	r26, Y+62	; 0x3e
    bc80:	bf ad       	ldd	r27, Y+63	; 0x3f
    bc82:	aa 0f       	add	r26, r26
    bc84:	bb 1f       	adc	r27, r27
    bc86:	aa 0f       	add	r26, r26
    bc88:	bb 1f       	adc	r27, r27
    bc8a:	21 96       	adiw	r28, 0x01	; 1
    bc8c:	4f ad       	ldd	r20, Y+63	; 0x3f
    bc8e:	21 97       	sbiw	r28, 0x01	; 1
    bc90:	25 96       	adiw	r28, 0x05	; 5
    bc92:	5f ad       	ldd	r21, Y+63	; 0x3f
    bc94:	25 97       	sbiw	r28, 0x05	; 5
    bc96:	44 0f       	add	r20, r20
    bc98:	55 1f       	adc	r21, r21
    bc9a:	9a 01       	movw	r18, r20
    bc9c:	22 0f       	add	r18, r18
    bc9e:	33 1f       	adc	r19, r19
    bca0:	22 0f       	add	r18, r18
    bca2:	33 1f       	adc	r19, r19
    bca4:	22 0f       	add	r18, r18
    bca6:	33 1f       	adc	r19, r19
    bca8:	24 1b       	sub	r18, r20
    bcaa:	35 0b       	sbc	r19, r21
    bcac:	a2 0f       	add	r26, r18
    bcae:	b3 1f       	adc	r27, r19
    bcb0:	a8 0d       	add	r26, r8
    bcb2:	b9 1d       	adc	r27, r9
    bcb4:	17 96       	adiw	r26, 0x07	; 7
    bcb6:	3c 91       	ld	r19, X
    bcb8:	3c 59       	subi	r19, 0x9C	; 156
    bcba:	33 0f       	add	r19, r19
    bcbc:	db 01       	movw	r26, r22
    bcbe:	2c 91       	ld	r18, X
    bcc0:	21 70       	andi	r18, 0x01	; 1
    bcc2:	23 2b       	or	r18, r19
    bcc4:	2c 93       	st	X, r18
    bcc6:	0f 5f       	subi	r16, 0xFF	; 255
        memcpy(&expo4[0], &v4->expoData[0], sizeof(expo4));
        memset(&g_model.expoData[0], 0, sizeof(expo4));
        // expos conversion
        uint8_t e = 0;
        for (uint8_t ch = 0; ch < 4 && e < MAX_EXPOS; ch++) {
          for (uint8_t dr = 0, pos = 0; dr < 3 && e < MAX_EXPOS; dr++, pos++) {
    bcc8:	1f 5f       	subi	r17, 0xFF	; 255
    bcca:	13 30       	cpi	r17, 0x03	; 3
    bccc:	38 f4       	brcc	.+14     	; 0xbcdc <_Z9Translatev+0x5a6>
    bcce:	0e 30       	cpi	r16, 0x0E	; 14
    bcd0:	28 f4       	brcc	.+10     	; 0xbcdc <_Z9Translatev+0x5a6>
    bcd2:	63 94       	inc	r6
            if ((dr == 0 && !expo4[ch].drSw1) || (dr == 1 && !expo4[ch].drSw2))
    bcd4:	11 23       	and	r17, r17
    bcd6:	09 f4       	brne	.+2      	; 0xbcda <_Z9Translatev+0x5a4>
    bcd8:	ed ce       	rjmp	.-550    	; 0xbab4 <_Z9Translatev+0x37e>
    bcda:	ee ce       	rjmp	.-548    	; 0xbab8 <_Z9Translatev+0x382>
        EEPROM_V4::ExpoData expo4[4];
        memcpy(&expo4[0], &v4->expoData[0], sizeof(expo4));
        memset(&g_model.expoData[0], 0, sizeof(expo4));
        // expos conversion
        uint8_t e = 0;
        for (uint8_t ch = 0; ch < 4 && e < MAX_EXPOS; ch++) {
    bcdc:	83 30       	cpi	r24, 0x03	; 3
    bcde:	91 05       	cpc	r25, r1
    bce0:	09 f4       	brne	.+2      	; 0xbce4 <_Z9Translatev+0x5ae>
    bce2:	06 c1       	rjmp	.+524    	; 0xbef0 <_Z9Translatev+0x7ba>
    bce4:	01 96       	adiw	r24, 0x01	; 1
    bce6:	3e 96       	adiw	r30, 0x0e	; 14
    bce8:	0e 30       	cpi	r16, 0x0E	; 14
    bcea:	08 f0       	brcs	.+2      	; 0xbcee <_Z9Translatev+0x5b8>
    bcec:	01 c1       	rjmp	.+514    	; 0xbef0 <_Z9Translatev+0x7ba>
          for (uint8_t dr = 0, pos = 0; dr < 3 && e < MAX_EXPOS; dr++, pos++) {
            if ((dr == 0 && !expo4[ch].drSw1) || (dr == 1 && !expo4[ch].drSw2))
              dr = 2;
            if (dr == 2 && !expo4[ch].expo[0][0][0] && !expo4[ch].expo[0][0][1] && !expo4[ch].expo[0][1][0] && !expo4[ch].expo[0][1][1])
              break;
            g_model.expoData[e].swtch = (dr == 0 ? -expo4[ch].drSw1 : (dr == 1 ? -expo4[ch].drSw2 : 0));
    bcee:	66 24       	eor	r6, r6
    bcf0:	10 e0       	ldi	r17, 0x00	; 0
    bcf2:	21 96       	adiw	r28, 0x01	; 1
    bcf4:	8f af       	std	Y+63, r24	; 0x3f
    bcf6:	21 97       	sbiw	r28, 0x01	; 1
    bcf8:	a8 2e       	mov	r10, r24
    bcfa:	b3 e0       	ldi	r27, 0x03	; 3
    bcfc:	ab 22       	and	r10, r27
            g_model.expoData[e].chn = ch;
    bcfe:	aa 0c       	add	r10, r10
    bd00:	aa 0c       	add	r10, r10
    bd02:	25 96       	adiw	r28, 0x05	; 5
    bd04:	9f af       	std	Y+63, r25	; 0x3f
    bd06:	25 97       	sbiw	r28, 0x05	; 5
    bd08:	e5 cf       	rjmp	.-54     	; 0xbcd4 <_Z9Translatev+0x59e>
        assert((char *)&g_model.curves5[0][0] < (char *)&v3->curves5[0][0]);
        memmove(&g_model.curves5[0][0], &v3->curves5[0][0], 5*MAX_CURVE5);
        assert((char *)&g_model.curves9[0][0] < (char *)&v3->curves9[0][0]);
        memmove(&g_model.curves9[0][0], &v3->curves9[0][0], 9*MAX_CURVE9);
        if (g_eeGeneral.myVers == EEPROM_VER_r584) {
          memmove(&g_model.customSw[0], &v3->customSw[0], sizeof(CustomSwData)*6);
    bd0a:	87 eb       	ldi	r24, 0xB7	; 183
    bd0c:	94 e1       	ldi	r25, 0x14	; 20
    bd0e:	61 ee       	ldi	r22, 0xE1	; 225
    bd10:	74 e1       	ldi	r23, 0x14	; 20
    bd12:	42 e1       	ldi	r20, 0x12	; 18
    bd14:	50 e0       	ldi	r21, 0x00	; 0
    bd16:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
          memset(&g_model.customSw[6], 0, sizeof(CustomSwData)*6);
    bd1a:	82 e1       	ldi	r24, 0x12	; 18
    bd1c:	e9 ec       	ldi	r30, 0xC9	; 201
    bd1e:	f4 e1       	ldi	r31, 0x14	; 20
    bd20:	11 92       	st	Z+, r1
    bd22:	8a 95       	dec	r24
    bd24:	e9 f7       	brne	.-6      	; 0xbd20 <_Z9Translatev+0x5ea>
          memset(&g_model.safetySw[0], 0, sizeof(SafetySwData)*NUM_CHNOUT + sizeof(SwashRingData) + sizeof(FrSkyData));
    bd26:	81 e3       	ldi	r24, 0x31	; 49
    bd28:	ab ed       	ldi	r26, 0xDB	; 219
    bd2a:	b4 e1       	ldi	r27, 0x14	; 20
    bd2c:	1d 92       	st	X+, r1
    bd2e:	8a 95       	dec	r24
    bd30:	e9 f7       	brne	.-6      	; 0xbd2c <_Z9Translatev+0x5f6>
    bd32:	79 c0       	rjmp	.+242    	; 0xbe26 <_Z9Translatev+0x6f0>
        }
        else {
          assert((char *)&g_model.customSw[0] < (char *)&v4->customSw[0]);
          memmove(&g_model.customSw[0], &v4->customSw[0], sizeof(CustomSwData)*12);
    bd34:	87 eb       	ldi	r24, 0xB7	; 183
    bd36:	94 e1       	ldi	r25, 0x14	; 20
    bd38:	61 ee       	ldi	r22, 0xE1	; 225
    bd3a:	74 e1       	ldi	r23, 0x14	; 20
    bd3c:	44 e2       	ldi	r20, 0x24	; 36
    bd3e:	50 e0       	ldi	r21, 0x00	; 0
    bd40:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
          assert((char *)&g_model.safetySw[0] < (char *)&v4->safetySw[0]);
          memmove(&g_model.safetySw[0], &v4->safetySw[0], sizeof(SafetySwData)*NUM_CHNOUT);
    bd44:	8b ed       	ldi	r24, 0xDB	; 219
    bd46:	94 e1       	ldi	r25, 0x14	; 20
    bd48:	68 e0       	ldi	r22, 0x08	; 8
    bd4a:	75 e1       	ldi	r23, 0x15	; 21
    bd4c:	40 e2       	ldi	r20, 0x20	; 32
    bd4e:	50 e0       	ldi	r21, 0x00	; 0
    bd50:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    bd54:	25 2d       	mov	r18, r5
    bd56:	21 70       	andi	r18, 0x01	; 1
    bd58:	8b 2d       	mov	r24, r11
    bd5a:	81 70       	andi	r24, 0x01	; 1
    bd5c:	88 0f       	add	r24, r24
    bd5e:	82 70       	andi	r24, 0x02	; 2
    bd60:	92 2d       	mov	r25, r2
    bd62:	91 70       	andi	r25, 0x01	; 1
    bd64:	99 0f       	add	r25, r25
    bd66:	99 0f       	add	r25, r25
    bd68:	82 2b       	or	r24, r18
    bd6a:	22 96       	adiw	r28, 0x02	; 2
    bd6c:	2f ad       	ldd	r18, Y+63	; 0x3f
    bd6e:	22 97       	sbiw	r28, 0x02	; 2
    bd70:	22 0f       	add	r18, r18
    bd72:	22 0f       	add	r18, r18
    bd74:	22 0f       	add	r18, r18
    bd76:	89 2b       	or	r24, r25
    bd78:	82 2b       	or	r24, r18
    bd7a:	80 93 13 15 	sts	0x1513, r24
    bd7e:	23 96       	adiw	r28, 0x03	; 3
    bd80:	bf ad       	ldd	r27, Y+63	; 0x3f
    bd82:	23 97       	sbiw	r28, 0x03	; 3
    bd84:	b0 93 14 15 	sts	0x1514, r27
    bd88:	24 96       	adiw	r28, 0x04	; 4
    bd8a:	ef ad       	ldd	r30, Y+63	; 0x3f
    bd8c:	24 97       	sbiw	r28, 0x04	; 4
    bd8e:	e0 93 15 15 	sts	0x1515, r30
          memcpy(&g_model.swashR, &swashR, sizeof(SwashRingData));
          for (uint8_t i=0; i<2; i++) {
            // TODO this conversion is bad
            // assert(&g_model.frsky.channels[i].ratio < &v4->frsky.channels[i].ratio);
            g_model.frsky.channels[i].ratio = v4->frsky.channels[i].ratio;
    bd92:	80 91 28 15 	lds	r24, 0x1528
    bd96:	80 93 57 15 	sts	0x1557, r24
            g_model.frsky.channels[i].type = v4->frsky.channels[i].type;
    bd9a:	90 91 2b 15 	lds	r25, 0x152B
    bd9e:	89 2f       	mov	r24, r25
    bda0:	82 95       	swap	r24
    bda2:	86 95       	lsr	r24
    bda4:	86 95       	lsr	r24
    bda6:	83 70       	andi	r24, 0x03	; 3
    bda8:	82 95       	swap	r24
    bdaa:	80 7f       	andi	r24, 0xF0	; 240
    bdac:	80 93 58 15 	sts	0x1558, r24
            // g_model.frsky.channels[i].offset = 0;
            g_model.frsky.channels[i].alarms_value[0] = v4->frsky.channels[i].alarms_value[0];
    bdb0:	80 91 29 15 	lds	r24, 0x1529
    bdb4:	80 93 59 15 	sts	0x1559, r24
            g_model.frsky.channels[i].alarms_value[1] = v4->frsky.channels[i].alarms_value[1];
    bdb8:	80 91 2a 15 	lds	r24, 0x152A
    bdbc:	80 93 5a 15 	sts	0x155A, r24
            g_model.frsky.channels[i].alarms_level = v4->frsky.channels[i].alarms_level;
    bdc0:	29 2f       	mov	r18, r25
    bdc2:	2f 70       	andi	r18, 0x0F	; 15
    bdc4:	80 91 5b 15 	lds	r24, 0x155B
    bdc8:	80 7c       	andi	r24, 0xC0	; 192
            g_model.frsky.channels[i].alarms_greater = v4->frsky.channels[i].alarms_greater;
    bdca:	90 73       	andi	r25, 0x30	; 48
    bdcc:	82 2b       	or	r24, r18
    bdce:	89 2b       	or	r24, r25
    bdd0:	80 93 5b 15 	sts	0x155B, r24
            g_model.frsky.channels[i].barMin = 0;
    bdd4:	10 92 5c 15 	sts	0x155C, r1
            g_model.frsky.channels[i].barMax = 0;
    bdd8:	10 92 5d 15 	sts	0x155D, r1
          memmove(&g_model.safetySw[0], &v4->safetySw[0], sizeof(SafetySwData)*NUM_CHNOUT);
          memcpy(&g_model.swashR, &swashR, sizeof(SwashRingData));
          for (uint8_t i=0; i<2; i++) {
            // TODO this conversion is bad
            // assert(&g_model.frsky.channels[i].ratio < &v4->frsky.channels[i].ratio);
            g_model.frsky.channels[i].ratio = v4->frsky.channels[i].ratio;
    bddc:	80 91 2c 15 	lds	r24, 0x152C
    bde0:	80 93 5e 15 	sts	0x155E, r24
            g_model.frsky.channels[i].type = v4->frsky.channels[i].type;
    bde4:	90 91 2f 15 	lds	r25, 0x152F
    bde8:	89 2f       	mov	r24, r25
    bdea:	82 95       	swap	r24
    bdec:	86 95       	lsr	r24
    bdee:	86 95       	lsr	r24
    bdf0:	83 70       	andi	r24, 0x03	; 3
    bdf2:	82 95       	swap	r24
    bdf4:	80 7f       	andi	r24, 0xF0	; 240
    bdf6:	80 93 5f 15 	sts	0x155F, r24
            // g_model.frsky.channels[i].offset = 0;
            g_model.frsky.channels[i].alarms_value[0] = v4->frsky.channels[i].alarms_value[0];
    bdfa:	80 91 2d 15 	lds	r24, 0x152D
    bdfe:	80 93 60 15 	sts	0x1560, r24
            g_model.frsky.channels[i].alarms_value[1] = v4->frsky.channels[i].alarms_value[1];
    be02:	80 91 2e 15 	lds	r24, 0x152E
    be06:	80 93 61 15 	sts	0x1561, r24
            g_model.frsky.channels[i].alarms_level = v4->frsky.channels[i].alarms_level;
    be0a:	29 2f       	mov	r18, r25
    be0c:	2f 70       	andi	r18, 0x0F	; 15
    be0e:	80 91 62 15 	lds	r24, 0x1562
    be12:	80 7c       	andi	r24, 0xC0	; 192
            g_model.frsky.channels[i].alarms_greater = v4->frsky.channels[i].alarms_greater;
    be14:	90 73       	andi	r25, 0x30	; 48
    be16:	82 2b       	or	r24, r18
    be18:	89 2b       	or	r24, r25
    be1a:	80 93 62 15 	sts	0x1562, r24
            g_model.frsky.channels[i].barMin = 0;
    be1e:	10 92 63 15 	sts	0x1563, r1
            g_model.frsky.channels[i].barMax = 0;
    be22:	10 92 64 15 	sts	0x1564, r1
          }
        }
        memset(&g_model.phaseData[0], 0, sizeof(g_model.phaseData));
    be26:	81 e4       	ldi	r24, 0x41	; 65
    be28:	a6 e1       	ldi	r26, 0x16	; 22
    be2a:	b5 e1       	ldi	r27, 0x15	; 21
    be2c:	1d 92       	st	X+, r1
    be2e:	8a 95       	dec	r24
    be30:	e9 f7       	brne	.-6      	; 0xbe2c <_Z9Translatev+0x6f6>
        memset(&g_model.funcSw[0], 0, sizeof(g_model.funcSw));
    be32:	88 e1       	ldi	r24, 0x18	; 24
    be34:	eb ef       	ldi	r30, 0xFB	; 251
    be36:	f4 e1       	ldi	r31, 0x14	; 20
    be38:	11 92       	st	Z+, r1
    be3a:	8a 95       	dec	r24
    be3c:	e9 f7       	brne	.-6      	; 0xbe38 <_Z9Translatev+0x702>
        if (trimSw) {
    be3e:	fd ad       	ldd	r31, Y+61	; 0x3d
    be40:	ff 23       	and	r31, r31
    be42:	29 f0       	breq	.+10     	; 0xbe4e <_Z9Translatev+0x718>
          g_model.funcSw[0].swtch = trimSw;
    be44:	f0 93 fb 14 	sts	0x14FB, r31
          g_model.funcSw[0].func = FUNC_INSTANT_TRIM;
    be48:	86 e0       	ldi	r24, 0x06	; 6
    be4a:	80 93 fc 14 	sts	0x14FC, r24
    be4e:	84 01       	movw	r16, r8
        assert((char *)&g_model.expoData[0] < (char *)v3->expoData);
        EEPROM_V4::ExpoData expo4[4];
        memcpy(&expo4[0], &v4->expoData[0], sizeof(expo4));
        memset(&g_model.expoData[0], 0, sizeof(expo4));
        // expos conversion
        uint8_t e = 0;
    be50:	90 e0       	ldi	r25, 0x00	; 0
        if (trimSw) {
          g_model.funcSw[0].swtch = trimSw;
          g_model.funcSw[0].func = FUNC_INSTANT_TRIM;
        }
        for (uint8_t i=0; i<NUM_STICKS; i++)
          setTrimValue(0, i, trims[i]);
    be52:	d8 01       	movw	r26, r16
    be54:	4d 91       	ld	r20, X+
    be56:	8d 01       	movw	r16, r26
    be58:	55 27       	eor	r21, r21
    be5a:	47 fd       	sbrc	r20, 7
    be5c:	50 95       	com	r21
    be5e:	80 e0       	ldi	r24, 0x00	; 0
    be60:	69 2f       	mov	r22, r25
    be62:	26 96       	adiw	r28, 0x06	; 6
    be64:	9f af       	std	Y+63, r25	; 0x3f
    be66:	26 97       	sbiw	r28, 0x06	; 6
    be68:	0e 94 95 0b 	call	0x172a	; 0x172a <_Z12setTrimValuehhi>
        memset(&g_model.funcSw[0], 0, sizeof(g_model.funcSw));
        if (trimSw) {
          g_model.funcSw[0].swtch = trimSw;
          g_model.funcSw[0].func = FUNC_INSTANT_TRIM;
        }
        for (uint8_t i=0; i<NUM_STICKS; i++)
    be6c:	26 96       	adiw	r28, 0x06	; 6
    be6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    be70:	26 97       	sbiw	r28, 0x06	; 6
    be72:	9f 5f       	subi	r25, 0xFF	; 255
    be74:	94 30       	cpi	r25, 0x04	; 4
    be76:	69 f7       	brne	.-38     	; 0xbe52 <_Z9Translatev+0x71c>
          setTrimValue(0, i, trims[i]);
        theFile.writeRlc(FILE_MODEL(id), FILE_TYP_MODEL, (uint8_t*)&g_model, sizeof(g_model), 200);
    be78:	8c ea       	ldi	r24, 0xAC	; 172
    be7a:	99 e1       	ldi	r25, 0x19	; 25
    be7c:	67 2d       	mov	r22, r7
    be7e:	42 e0       	ldi	r20, 0x02	; 2
    be80:	2b e8       	ldi	r18, 0x8B	; 139
    be82:	32 e1       	ldi	r19, 0x12	; 18
    be84:	0a ed       	ldi	r16, 0xDA	; 218
    be86:	12 e0       	ldi	r17, 0x02	; 2
    be88:	78 ec       	ldi	r23, 0xC8	; 200
    be8a:	e7 2e       	mov	r14, r23
    be8c:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>
    for (uint8_t i=0; i<4; i++) {
      g_eeGeneral.trainer.mix[i].srcChn = old->trainer.mix[i].srcChn;
      g_eeGeneral.trainer.mix[i].mode = old->trainer.mix[i].mode;
      g_eeGeneral.trainer.mix[i].studWeight = old->trainer.mix[i].studWeight * 13 / 4;
    }
    for (uint8_t id=0; id<MAX_MODELS; id++) {
    be90:	b7 2d       	mov	r27, r7
    be92:	b0 31       	cpi	r27, 0x10	; 16
    be94:	09 f0       	breq	.+2      	; 0xbe98 <_Z9Translatev+0x762>
    be96:	05 cd       	rjmp	.-1526   	; 0xb8a2 <_Z9Translatev+0x16c>
        for (uint8_t i=0; i<NUM_STICKS; i++)
          setTrimValue(0, i, trims[i]);
        theFile.writeRlc(FILE_MODEL(id), FILE_TYP_MODEL, (uint8_t*)&g_model, sizeof(g_model), 200);
      }
    }
    g_eeGeneral.myVers = EEPROM_VER;
    be98:	8a e6       	ldi	r24, 0x6A	; 106
    be9a:	80 93 3e 12 	sts	0x123E, r24
    theFile.writeRlc(FILE_GENERAL, FILE_TYP_GENERAL, (uint8_t*)&g_eeGeneral, sizeof(EEGeneral), 200);
    be9e:	8c ea       	ldi	r24, 0xAC	; 172
    bea0:	99 e1       	ldi	r25, 0x19	; 25
    bea2:	60 e0       	ldi	r22, 0x00	; 0
    bea4:	41 e0       	ldi	r20, 0x01	; 1
    bea6:	2e e3       	ldi	r18, 0x3E	; 62
    bea8:	32 e1       	ldi	r19, 0x12	; 18
    beaa:	0d e4       	ldi	r16, 0x4D	; 77
    beac:	10 e0       	ldi	r17, 0x00	; 0
    beae:	58 ec       	ldi	r21, 0xC8	; 200
    beb0:	e5 2e       	mov	r14, r21
    beb2:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>
    return sizeof(EEGeneral);
    beb6:	8d e4       	ldi	r24, 0x4D	; 77
    beb8:	01 c0       	rjmp	.+2      	; 0xbebc <_Z9Translatev+0x786>
  }

  return 0;
    beba:	80 e0       	ldi	r24, 0x00	; 0
}
    bebc:	cb 5b       	subi	r28, 0xBB	; 187
    bebe:	df 4f       	sbci	r29, 0xFF	; 255
    bec0:	0f b6       	in	r0, 0x3f	; 63
    bec2:	f8 94       	cli
    bec4:	de bf       	out	0x3e, r29	; 62
    bec6:	0f be       	out	0x3f, r0	; 63
    bec8:	cd bf       	out	0x3d, r28	; 61
    beca:	cf 91       	pop	r28
    becc:	df 91       	pop	r29
    bece:	1f 91       	pop	r17
    bed0:	0f 91       	pop	r16
    bed2:	ff 90       	pop	r15
    bed4:	ef 90       	pop	r14
    bed6:	df 90       	pop	r13
    bed8:	cf 90       	pop	r12
    beda:	bf 90       	pop	r11
    bedc:	af 90       	pop	r10
    bede:	9f 90       	pop	r9
    bee0:	8f 90       	pop	r8
    bee2:	7f 90       	pop	r7
    bee4:	6f 90       	pop	r6
    bee6:	5f 90       	pop	r5
    bee8:	4f 90       	pop	r4
    beea:	3f 90       	pop	r3
    beec:	2f 90       	pop	r2
    beee:	08 95       	ret
    bef0:	73 2c       	mov	r7, r3
    bef2:	b5 2c       	mov	r11, r5
    bef4:	54 2c       	mov	r5, r4
              }
            }
          }
        }
        assert((char *)&g_model.curves5[0][0] < (char *)&v3->curves5[0][0]);
        memmove(&g_model.curves5[0][0], &v3->curves5[0][0], 5*MAX_CURVE5);
    bef6:	87 e4       	ldi	r24, 0x47	; 71
    bef8:	94 e1       	ldi	r25, 0x14	; 20
    befa:	61 e7       	ldi	r22, 0x71	; 113
    befc:	74 e1       	ldi	r23, 0x14	; 20
    befe:	48 e2       	ldi	r20, 0x28	; 40
    bf00:	50 e0       	ldi	r21, 0x00	; 0
    bf02:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
        assert((char *)&g_model.curves9[0][0] < (char *)&v3->curves9[0][0]);
        memmove(&g_model.curves9[0][0], &v3->curves9[0][0], 9*MAX_CURVE9);
    bf06:	8f e6       	ldi	r24, 0x6F	; 111
    bf08:	94 e1       	ldi	r25, 0x14	; 20
    bf0a:	69 e9       	ldi	r22, 0x99	; 153
    bf0c:	74 e1       	ldi	r23, 0x14	; 20
    bf0e:	48 e4       	ldi	r20, 0x48	; 72
    bf10:	50 e0       	ldi	r21, 0x00	; 0
    bf12:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
        if (g_eeGeneral.myVers == EEPROM_VER_r584) {
    bf16:	80 91 3e 12 	lds	r24, 0x123E
    bf1a:	83 30       	cpi	r24, 0x03	; 3
    bf1c:	09 f0       	breq	.+2      	; 0xbf20 <_Z9Translatev+0x7ea>
    bf1e:	0a cf       	rjmp	.-492    	; 0xbd34 <_Z9Translatev+0x5fe>
    bf20:	f4 ce       	rjmp	.-536    	; 0xbd0a <_Z9Translatev+0x5d4>

0000bf22 <_Z13eeLoadGeneralv>:
#endif


bool eeLoadGeneral()
{
  theFile.openRlc(FILE_GENERAL);
    bf22:	8c ea       	ldi	r24, 0xAC	; 172
    bf24:	99 e1       	ldi	r25, 0x19	; 25
    bf26:	60 e0       	ldi	r22, 0x00	; 0
    bf28:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
  uint8_t sz = 0;

  if (theFile.readRlc((uint8_t*)&g_eeGeneral, 1) == 1) {
    bf2c:	8c ea       	ldi	r24, 0xAC	; 172
    bf2e:	99 e1       	ldi	r25, 0x19	; 25
    bf30:	6e e3       	ldi	r22, 0x3E	; 62
    bf32:	72 e1       	ldi	r23, 0x12	; 18
    bf34:	41 e0       	ldi	r20, 0x01	; 1
    bf36:	50 e0       	ldi	r21, 0x00	; 0
    bf38:	0e 94 65 5b 	call	0xb6ca	; 0xb6ca <_ZN7RlcFile7readRlcEPhj>
    bf3c:	81 30       	cpi	r24, 0x01	; 1
    bf3e:	91 05       	cpc	r25, r1
    bf40:	51 f5       	brne	.+84     	; 0xbf96 <_Z13eeLoadGeneralv+0x74>
    theFile.openRlc(FILE_GENERAL);
    bf42:	8c ea       	ldi	r24, 0xAC	; 172
    bf44:	99 e1       	ldi	r25, 0x19	; 25
    bf46:	60 e0       	ldi	r22, 0x00	; 0
    bf48:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
    if (g_eeGeneral.myVers == EEPROM_VER) {
    bf4c:	80 91 3e 12 	lds	r24, 0x123E
    bf50:	8a 36       	cpi	r24, 0x6A	; 106
    bf52:	49 f4       	brne	.+18     	; 0xbf66 <_Z13eeLoadGeneralv+0x44>
      sz = theFile.readRlc((uint8_t*)&g_eeGeneral, sizeof(g_eeGeneral));
    bf54:	8c ea       	ldi	r24, 0xAC	; 172
    bf56:	99 e1       	ldi	r25, 0x19	; 25
    bf58:	6e e3       	ldi	r22, 0x3E	; 62
    bf5a:	72 e1       	ldi	r23, 0x12	; 18
    bf5c:	4d e4       	ldi	r20, 0x4D	; 77
    bf5e:	50 e0       	ldi	r21, 0x00	; 0
    bf60:	0e 94 65 5b 	call	0xb6ca	; 0xb6ca <_ZN7RlcFile7readRlcEPhj>
    bf64:	02 c0       	rjmp	.+4      	; 0xbf6a <_Z13eeLoadGeneralv+0x48>
    }
#ifdef TRANSLATIONS
    else {
      sz = Translate();
    bf66:	0e 94 9b 5b 	call	0xb736	; 0xb736 <_Z9Translatev>
    }
#endif
  }

  if (sz == sizeof(EEGeneral)) {
    bf6a:	8d 34       	cpi	r24, 0x4D	; 77
    bf6c:	b1 f4       	brne	.+44     	; 0xbf9a <_Z13eeLoadGeneralv+0x78>
    bf6e:	ef e3       	ldi	r30, 0x3F	; 63
    bf70:	f2 e1       	ldi	r31, 0x12	; 18
  return 0;
}
#endif


bool eeLoadGeneral()
    bf72:	20 e0       	ldi	r18, 0x00	; 0
    bf74:	30 e0       	ldi	r19, 0x00	; 0
#endif
  }

  if (sz == sizeof(EEGeneral)) {
    uint16_t sum=0;
    for(int i=0; i<12;i++) sum+=g_eeGeneral.calibMid[i];
    bf76:	81 91       	ld	r24, Z+
    bf78:	91 91       	ld	r25, Z+
    bf7a:	28 0f       	add	r18, r24
    bf7c:	39 1f       	adc	r19, r25
    bf7e:	82 e1       	ldi	r24, 0x12	; 18
    bf80:	e7 35       	cpi	r30, 0x57	; 87
    bf82:	f8 07       	cpc	r31, r24
    bf84:	c1 f7       	brne	.-16     	; 0xbf76 <_Z13eeLoadGeneralv+0x54>
    return g_eeGeneral.chkSum == sum;
    bf86:	81 e0       	ldi	r24, 0x01	; 1
    bf88:	40 91 69 12 	lds	r20, 0x1269
    bf8c:	50 91 6a 12 	lds	r21, 0x126A
    bf90:	42 17       	cp	r20, r18
    bf92:	53 07       	cpc	r21, r19
    bf94:	19 f0       	breq	.+6      	; 0xbf9c <_Z13eeLoadGeneralv+0x7a>
  }
  return false;
    bf96:	80 e0       	ldi	r24, 0x00	; 0
    bf98:	08 95       	ret
    bf9a:	80 e0       	ldi	r24, 0x00	; 0
}
    bf9c:	08 95       	ret

0000bf9e <_Z12modelDefaulth>:
}
#endif

void modelDefault(uint8_t id)
{
  memset(&g_model, 0, sizeof(g_model));
    bf9e:	8a ed       	ldi	r24, 0xDA	; 218
    bfa0:	92 e0       	ldi	r25, 0x02	; 2
    bfa2:	eb e8       	ldi	r30, 0x8B	; 139
    bfa4:	f2 e1       	ldi	r31, 0x12	; 18
    bfa6:	df 01       	movw	r26, r30
    bfa8:	9c 01       	movw	r18, r24
    bfaa:	1d 92       	st	X+, r1
    bfac:	21 50       	subi	r18, 0x01	; 1
    bfae:	30 40       	sbci	r19, 0x00	; 0
    bfb0:	e1 f7       	brne	.-8      	; 0xbfaa <_Z12modelDefaulth+0xc>
  applyDefaultTemplate();
    bfb2:	0e 94 6e 5b 	call	0xb6dc	; 0xb6dc <_Z20applyDefaultTemplatev>
}
    bfb6:	08 95       	ret

0000bfb8 <_Z15eeLoadModelNamehPc>:

uint16_t eeLoadModelName(uint8_t id, char *name)
{
    bfb8:	1f 93       	push	r17
    bfba:	df 93       	push	r29
    bfbc:	cf 93       	push	r28
    bfbe:	0f 92       	push	r0
    bfc0:	cd b7       	in	r28, 0x3d	; 61
    bfc2:	de b7       	in	r29, 0x3e	; 62
    bfc4:	16 2f       	mov	r17, r22
  memset(name, 0, sizeof(g_model.name));
    bfc6:	e6 2f       	mov	r30, r22
    bfc8:	f7 2f       	mov	r31, r23
    bfca:	9a e0       	ldi	r25, 0x0A	; 10
    bfcc:	df 01       	movw	r26, r30
    bfce:	1d 92       	st	X+, r1
    bfd0:	9a 95       	dec	r25
    bfd2:	e9 f7       	brne	.-6      	; 0xbfce <_Z15eeLoadModelNamehPc+0x16>
  if (id<MAX_MODELS) {
    bfd4:	80 31       	cpi	r24, 0x10	; 16
    bfd6:	c0 f4       	brcc	.+48     	; 0xc008 <_Z15eeLoadModelNamehPc+0x50>
    theFile.openRlc(FILE_MODEL(id));
    bfd8:	68 2f       	mov	r22, r24
    bfda:	6f 5f       	subi	r22, 0xFF	; 255
    bfdc:	8c ea       	ldi	r24, 0xAC	; 172
    bfde:	99 e1       	ldi	r25, 0x19	; 25
    bfe0:	79 83       	std	Y+1, r23	; 0x01
    bfe2:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
    if (theFile.readRlc((uint8_t*)name, sizeof(g_model.name)) == sizeof(g_model.name)) {
    bfe6:	8c ea       	ldi	r24, 0xAC	; 172
    bfe8:	99 e1       	ldi	r25, 0x19	; 25
    bfea:	61 2f       	mov	r22, r17
    bfec:	79 81       	ldd	r23, Y+1	; 0x01
    bfee:	4a e0       	ldi	r20, 0x0A	; 10
    bff0:	50 e0       	ldi	r21, 0x00	; 0
    bff2:	0e 94 65 5b 	call	0xb6ca	; 0xb6ca <_ZN7RlcFile7readRlcEPhj>
    bff6:	8a 30       	cpi	r24, 0x0A	; 10
    bff8:	91 05       	cpc	r25, r1
    bffa:	31 f4       	brne	.+12     	; 0xc008 <_Z15eeLoadModelNamehPc+0x50>
      return theFile.size();
    bffc:	8c ea       	ldi	r24, 0xAC	; 172
    bffe:	99 e1       	ldi	r25, 0x19	; 25
    c000:	0e 94 8a 62 	call	0xc514	; 0xc514 <_ZN5EFile4sizeEv>
    c004:	9c 01       	movw	r18, r24
    c006:	02 c0       	rjmp	.+4      	; 0xc00c <_Z15eeLoadModelNamehPc+0x54>
    }
  }
  return 0;
    c008:	20 e0       	ldi	r18, 0x00	; 0
    c00a:	30 e0       	ldi	r19, 0x00	; 0
}
    c00c:	c9 01       	movw	r24, r18
    c00e:	0f 90       	pop	r0
    c010:	cf 91       	pop	r28
    c012:	df 91       	pop	r29
    c014:	1f 91       	pop	r17
    c016:	08 95       	ret

0000c018 <_Z13eeModelExistsh>:

bool eeModelExists(uint8_t id)
{
    return EFile::exists(FILE_MODEL(id));
    c018:	8f 5f       	subi	r24, 0xFF	; 255
    c01a:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
}
    c01e:	08 95       	ret

0000c020 <_Z16eeFindEmptyModelhb>:
#endif
  }
}

int8_t eeFindEmptyModel(uint8_t id, bool down)
{
    c020:	ef 92       	push	r14
    c022:	ff 92       	push	r15
    c024:	0f 93       	push	r16
    c026:	1f 93       	push	r17
    c028:	cf 93       	push	r28
    c02a:	df 93       	push	r29
    c02c:	f6 2e       	mov	r15, r22
  int8_t i = id;
    c02e:	e8 2e       	mov	r14, r24
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
    c030:	c0 e1       	ldi	r28, 0x10	; 16
    c032:	d0 e0       	ldi	r29, 0x00	; 0
    if (!EFile::exists(FILE_MODEL(i))) break;
    if (i == id) return -1; // no free space in directory left
    c034:	08 2f       	mov	r16, r24
    c036:	10 e0       	ldi	r17, 0x00	; 0
    c038:	8e 2d       	mov	r24, r14
    c03a:	99 27       	eor	r25, r25
    c03c:	87 fd       	sbrc	r24, 7
    c03e:	90 95       	com	r25

int8_t eeFindEmptyModel(uint8_t id, bool down)
{
  int8_t i = id;
  for (;;) {
    i = (MAX_MODELS + (down ? i+1 : i-1)) % MAX_MODELS;
    c040:	ff 20       	and	r15, r15
    c042:	11 f0       	breq	.+4      	; 0xc048 <_Z16eeFindEmptyModelhb+0x28>
    c044:	41 96       	adiw	r24, 0x11	; 17
    c046:	01 c0       	rjmp	.+2      	; 0xc04a <_Z16eeFindEmptyModelhb+0x2a>
    c048:	0f 96       	adiw	r24, 0x0f	; 15
    c04a:	be 01       	movw	r22, r28
    c04c:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    c050:	e8 2e       	mov	r14, r24
    if (!EFile::exists(FILE_MODEL(i))) break;
    c052:	8f 5f       	subi	r24, 0xFF	; 255
    c054:	0e 94 0f 62 	call	0xc41e	; 0xc41e <_ZN5EFile6existsEh>
    c058:	88 23       	and	r24, r24
    c05a:	49 f0       	breq	.+18     	; 0xc06e <_Z16eeFindEmptyModelhb+0x4e>
    if (i == id) return -1; // no free space in directory left
    c05c:	2e 2d       	mov	r18, r14
    c05e:	33 27       	eor	r19, r19
    c060:	27 fd       	sbrc	r18, 7
    c062:	30 95       	com	r19
    c064:	20 17       	cp	r18, r16
    c066:	31 07       	cpc	r19, r17
    c068:	39 f7       	brne	.-50     	; 0xc038 <_Z16eeFindEmptyModelhb+0x18>
    c06a:	ee 24       	eor	r14, r14
    c06c:	ea 94       	dec	r14
  }
  return i;
}
    c06e:	8e 2d       	mov	r24, r14
    c070:	df 91       	pop	r29
    c072:	cf 91       	pop	r28
    c074:	1f 91       	pop	r17
    c076:	0f 91       	pop	r16
    c078:	ff 90       	pop	r15
    c07a:	ef 90       	pop	r14
    c07c:	08 95       	ret

0000c07e <_Z7eeDirtyh>:


uint8_t  s_eeDirtyMsk;
void eeDirty(uint8_t msk)
{
  s_eeDirtyMsk |= msk;
    c07e:	90 91 bf 19 	lds	r25, 0x19BF
    c082:	98 2b       	or	r25, r24
    c084:	90 93 bf 19 	sts	0x19BF, r25
}
    c088:	08 95       	ret

0000c08a <_Z7eeCheckb>:

void eeCheck(bool immediately)
{
    c08a:	ef 92       	push	r14
    c08c:	0f 93       	push	r16
    c08e:	1f 93       	push	r17
    c090:	cf 93       	push	r28
    c092:	c8 2f       	mov	r28, r24
  if (immediately) {
    c094:	88 23       	and	r24, r24
    c096:	11 f0       	breq	.+4      	; 0xc09c <_Z7eeCheckb+0x12>
    eeFlush();
    c098:	0e 94 9a 33 	call	0x6734	; 0x6734 <_Z7eeFlushv>
  }
  if (s_eeDirtyMsk & EE_GENERAL) {
    c09c:	80 91 bf 19 	lds	r24, 0x19BF
    c0a0:	80 ff       	sbrs	r24, 0
    c0a2:	10 c0       	rjmp	.+32     	; 0xc0c4 <_Z7eeCheckb+0x3a>
    s_eeDirtyMsk -= EE_GENERAL;
    c0a4:	81 50       	subi	r24, 0x01	; 1
    c0a6:	80 93 bf 19 	sts	0x19BF, r24
    theFile.writeRlc(FILE_GENERAL, FILE_TYP_GENERAL, (uint8_t*)&g_eeGeneral, sizeof(EEGeneral), immediately);
    c0aa:	8c ea       	ldi	r24, 0xAC	; 172
    c0ac:	99 e1       	ldi	r25, 0x19	; 25
    c0ae:	60 e0       	ldi	r22, 0x00	; 0
    c0b0:	41 e0       	ldi	r20, 0x01	; 1
    c0b2:	2e e3       	ldi	r18, 0x3E	; 62
    c0b4:	32 e1       	ldi	r19, 0x12	; 18
    c0b6:	0d e4       	ldi	r16, 0x4D	; 77
    c0b8:	10 e0       	ldi	r17, 0x00	; 0
    c0ba:	ec 2e       	mov	r14, r28
    c0bc:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>
    if (!immediately) return;
    c0c0:	cc 23       	and	r28, r28
    c0c2:	99 f0       	breq	.+38     	; 0xc0ea <_Z7eeCheckb+0x60>
  }
  if (s_eeDirtyMsk & EE_MODEL) {
    c0c4:	80 91 bf 19 	lds	r24, 0x19BF
    c0c8:	81 ff       	sbrs	r24, 1
    c0ca:	0f c0       	rjmp	.+30     	; 0xc0ea <_Z7eeCheckb+0x60>
    s_eeDirtyMsk = 0;
    c0cc:	10 92 bf 19 	sts	0x19BF, r1
    theFile.writeRlc(FILE_MODEL(g_eeGeneral.currModel), FILE_TYP_MODEL, (uint8_t*)&g_model, sizeof(g_model), immediately);
    c0d0:	60 91 6b 12 	lds	r22, 0x126B
    c0d4:	6f 5f       	subi	r22, 0xFF	; 255
    c0d6:	8c ea       	ldi	r24, 0xAC	; 172
    c0d8:	99 e1       	ldi	r25, 0x19	; 25
    c0da:	42 e0       	ldi	r20, 0x02	; 2
    c0dc:	2b e8       	ldi	r18, 0x8B	; 139
    c0de:	32 e1       	ldi	r19, 0x12	; 18
    c0e0:	0a ed       	ldi	r16, 0xDA	; 218
    c0e2:	12 e0       	ldi	r17, 0x02	; 2
    c0e4:	ec 2e       	mov	r14, r28
    c0e6:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>
  }
}
    c0ea:	cf 91       	pop	r28
    c0ec:	1f 91       	pop	r17
    c0ee:	0f 91       	pop	r16
    c0f0:	ef 90       	pop	r14
    c0f2:	08 95       	ret

0000c0f4 <_Z11eeLoadModelh>:
{
    return EFile::exists(FILE_MODEL(id));
}

void eeLoadModel(uint8_t id)
{
    c0f4:	cf 93       	push	r28
    c0f6:	c8 2f       	mov	r28, r24
  if(id<MAX_MODELS)
    c0f8:	80 31       	cpi	r24, 0x10	; 16
    c0fa:	08 f5       	brcc	.+66     	; 0xc13e <_Z11eeLoadModelh+0x4a>
  {
    theFile.openRlc(FILE_MODEL(id));
    c0fc:	68 2f       	mov	r22, r24
    c0fe:	6f 5f       	subi	r22, 0xFF	; 255
    c100:	8c ea       	ldi	r24, 0xAC	; 172
    c102:	99 e1       	ldi	r25, 0x19	; 25
    c104:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
    uint16_t sz = theFile.readRlc((uint8_t*)&g_model, sizeof(g_model));
    c108:	8c ea       	ldi	r24, 0xAC	; 172
    c10a:	99 e1       	ldi	r25, 0x19	; 25
    c10c:	6b e8       	ldi	r22, 0x8B	; 139
    c10e:	72 e1       	ldi	r23, 0x12	; 18
    c110:	4a ed       	ldi	r20, 0xDA	; 218
    c112:	52 e0       	ldi	r21, 0x02	; 2
    c114:	0e 94 65 5b 	call	0xb6ca	; 0xb6ca <_ZN7RlcFile7readRlcEPhj>

    if (sz != sizeof(ModelData)) {
    c118:	22 e0       	ldi	r18, 0x02	; 2
    c11a:	8a 3d       	cpi	r24, 0xDA	; 218
    c11c:	92 07       	cpc	r25, r18
    c11e:	31 f0       	breq	.+12     	; 0xc12c <_Z11eeLoadModelh+0x38>
      // alert("Error Loading Model");
      modelDefault(id);
    c120:	8c 2f       	mov	r24, r28
    c122:	0e 94 cf 5f 	call	0xbf9e	; 0xbf9e <_Z12modelDefaulth>
      eeCheck(true);
    c126:	81 e0       	ldi	r24, 0x01	; 1
    c128:	0e 94 45 60 	call	0xc08a	; 0xc08a <_Z7eeCheckb>
    }

    resetTimer1();
    c12c:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <_Z11resetTimer1v>
    resetTimer2();
    c130:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <_Z11resetTimer2v>
#ifdef FRSKY
    resetTelemetry();
    c134:	0e 94 76 a5 	call	0x14aec	; 0x14aec <_Z14resetTelemetryv>
    c138:	84 e0       	ldi	r24, 0x04	; 4
    c13a:	80 93 af 1f 	sts	0x1FAF, r24
    FRSKY_setModelAlarms();
#endif
  }
}
    c13e:	cf 91       	pop	r28
    c140:	08 95       	ret

0000c142 <_Z9eeReadAllv>:
  }
  return i;
}

void eeReadAll()
{
    c142:	ef 92       	push	r14
    c144:	0f 93       	push	r16
    c146:	1f 93       	push	r17
  if(!EeFsOpen() ||
    c148:	0e 94 fa 61 	call	0xc3f4	; 0xc3f4 <_Z8EeFsOpenv>
    c14c:	88 23       	and	r24, r24
    c14e:	41 f0       	breq	.+16     	; 0xc160 <_Z9eeReadAllv+0x1e>
     EeFsck() < 0 ||
    c150:	0e 94 5d 61 	call	0xc2ba	; 0xc2ba <_Z6EeFsckv>
  return i;
}

void eeReadAll()
{
  if(!EeFsOpen() ||
    c154:	87 fd       	sbrc	r24, 7
    c156:	04 c0       	rjmp	.+8      	; 0xc160 <_Z9eeReadAllv+0x1e>
     EeFsck() < 0 ||
     !eeLoadGeneral()
    c158:	0e 94 91 5f 	call	0xbf22	; 0xbf22 <_Z13eeLoadGeneralv>
  return i;
}

void eeReadAll()
{
  if(!EeFsOpen() ||
    c15c:	88 23       	and	r24, r24
    c15e:	31 f5       	brne	.+76     	; 0xc1ac <_Z9eeReadAllv+0x6a>
     EeFsck() < 0 ||
     !eeLoadGeneral()
  )
  {
    alert(PSTR("Bad EEprom Data"), true);
    c160:	81 e7       	ldi	r24, 0x71	; 113
    c162:	9a e0       	ldi	r25, 0x0A	; 10
    c164:	61 e0       	ldi	r22, 0x01	; 1
    c166:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    message(PSTR("EEPROM Formatting"));
    c16a:	8f e5       	ldi	r24, 0x5F	; 95
    c16c:	9a e0       	ldi	r25, 0x0A	; 10
    c16e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <_Z7messagePKc>
    EeFsFormat();
    c172:	0e 94 cf 61 	call	0xc39e	; 0xc39e <_Z10EeFsFormatv>
    //alert(PSTR("format ok"));
    generalDefault();
    c176:	0e 94 72 5b 	call	0xb6e4	; 0xb6e4 <_Z14generalDefaultv>
    //alert(PSTR("default ok"));

    theFile.writeRlc(FILE_GENERAL, FILE_TYP_GENERAL,(uint8_t*)&g_eeGeneral,sizeof(EEGeneral), true);
    c17a:	8c ea       	ldi	r24, 0xAC	; 172
    c17c:	99 e1       	ldi	r25, 0x19	; 25
    c17e:	60 e0       	ldi	r22, 0x00	; 0
    c180:	41 e0       	ldi	r20, 0x01	; 1
    c182:	2e e3       	ldi	r18, 0x3E	; 62
    c184:	32 e1       	ldi	r19, 0x12	; 18
    c186:	0d e4       	ldi	r16, 0x4D	; 77
    c188:	10 e0       	ldi	r17, 0x00	; 0
    c18a:	ee 24       	eor	r14, r14
    c18c:	e3 94       	inc	r14
    c18e:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>

    modelDefault(0);
    c192:	80 e0       	ldi	r24, 0x00	; 0
    c194:	0e 94 cf 5f 	call	0xbf9e	; 0xbf9e <_Z12modelDefaulth>
    //alert(PSTR("modef ok"));
    theFile.writeRlc(FILE_MODEL(0), FILE_TYP_MODEL, (uint8_t*)&g_model, sizeof(g_model), true);
    c198:	8c ea       	ldi	r24, 0xAC	; 172
    c19a:	99 e1       	ldi	r25, 0x19	; 25
    c19c:	61 e0       	ldi	r22, 0x01	; 1
    c19e:	42 e0       	ldi	r20, 0x02	; 2
    c1a0:	2b e8       	ldi	r18, 0x8B	; 139
    c1a2:	32 e1       	ldi	r19, 0x12	; 18
    c1a4:	0a ed       	ldi	r16, 0xDA	; 218
    c1a6:	12 e0       	ldi	r17, 0x02	; 2
    c1a8:	0e 94 99 64 	call	0xc932	; 0xc932 <_ZN7RlcFile8writeRlcEhhPhjh>
    //alert(PSTR("modwrite ok"));
  }

  eeLoadModel(g_eeGeneral.currModel);
    c1ac:	80 91 6b 12 	lds	r24, 0x126B
    c1b0:	0e 94 7a 60 	call	0xc0f4	; 0xc0f4 <_Z11eeLoadModelh>
}
    c1b4:	1f 91       	pop	r17
    c1b6:	0f 91       	pop	r16
    c1b8:	ef 90       	pop	r14
    c1ba:	08 95       	ret

0000c1bc <_ZL8EeFsReadhh>:
  DirEnt   files[MAXFILES];
}) eeFs;


static uint8_t EeFsRead(uint8_t blk, uint8_t ofs)
{
    c1bc:	df 93       	push	r29
    c1be:	cf 93       	push	r28
    c1c0:	0f 92       	push	r0
    c1c2:	cd b7       	in	r28, 0x3d	; 61
    c1c4:	de b7       	in	r29, 0x3e	; 62
  uint8_t ret;
  eeprom_read_block(&ret, (const void*)(blk*BS+ofs), 1);
    c1c6:	28 2f       	mov	r18, r24
    c1c8:	30 e0       	ldi	r19, 0x00	; 0
    c1ca:	84 e0       	ldi	r24, 0x04	; 4
    c1cc:	22 0f       	add	r18, r18
    c1ce:	33 1f       	adc	r19, r19
    c1d0:	8a 95       	dec	r24
    c1d2:	e1 f7       	brne	.-8      	; 0xc1cc <_ZL8EeFsReadhh+0x10>
    c1d4:	26 0f       	add	r18, r22
    c1d6:	31 1d       	adc	r19, r1
    c1d8:	ce 01       	movw	r24, r28
    c1da:	01 96       	adiw	r24, 0x01	; 1
    c1dc:	b9 01       	movw	r22, r18
    c1de:	41 e0       	ldi	r20, 0x01	; 1
    c1e0:	50 e0       	ldi	r21, 0x00	; 0
    c1e2:	0e 94 94 ab 	call	0x15728	; 0x15728 <__eerd_block_m2560>
  return ret;
}
    c1e6:	89 81       	ldd	r24, Y+1	; 0x01
    c1e8:	0f 90       	pop	r0
    c1ea:	cf 91       	pop	r28
    c1ec:	df 91       	pop	r29
    c1ee:	08 95       	ret

0000c1f0 <_ZL11EeFsGetLinkh>:

static uint8_t EeFsGetLink(uint8_t blk)
{
  return EeFsRead(blk, 0);
    c1f0:	60 e0       	ldi	r22, 0x00	; 0
    c1f2:	0e 94 de 60 	call	0xc1bc	; 0xc1bc <_ZL8EeFsReadhh>
}
    c1f6:	08 95       	ret

0000c1f8 <_ZL15EeFsFlushDirEnth>:
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
}

static void EeFsFlushDirEnt(uint8_t i_fileId)
{
  eeWriteBlockCmp(&eeFs.files[i_fileId], offsetof(EeFs, files) + sizeof(DirEnt)*i_fileId, sizeof(DirEnt));
    c1f8:	48 2f       	mov	r20, r24
    c1fa:	50 e0       	ldi	r21, 0x00	; 0
    c1fc:	9a 01       	movw	r18, r20
    c1fe:	22 0f       	add	r18, r18
    c200:	33 1f       	adc	r19, r19
    c202:	24 0f       	add	r18, r20
    c204:	35 1f       	adc	r19, r21
    c206:	63 e0       	ldi	r22, 0x03	; 3
    c208:	86 9f       	mul	r24, r22
    c20a:	b0 01       	movw	r22, r0
    c20c:	11 24       	eor	r1, r1
    c20e:	6c 5f       	subi	r22, 0xFC	; 252
    c210:	7f 4f       	sbci	r23, 0xFF	; 255
    c212:	c9 01       	movw	r24, r18
    c214:	8a 53       	subi	r24, 0x3A	; 58
    c216:	96 4e       	sbci	r25, 0xE6	; 230
    c218:	43 e0       	ldi	r20, 0x03	; 3
    c21a:	50 e0       	ldi	r21, 0x00	; 0
    c21c:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <_Z15eeWriteBlockCmpPKvjj>
}
    c220:	08 95       	ret

0000c222 <_ZL11EeFsSetLinkhh>:
}

static void EeFsSetLink(uint8_t blk, uint8_t val)
{
  static uint8_t s_link; // we write asynchronously, then nothing on the stack!
  s_link = val;
    c222:	60 93 02 1a 	sts	0x1A02, r22
  eeWriteBlockCmp(&s_link, (blk*BS), 1);
    c226:	68 2f       	mov	r22, r24
    c228:	70 e0       	ldi	r23, 0x00	; 0
    c22a:	24 e0       	ldi	r18, 0x04	; 4
    c22c:	66 0f       	add	r22, r22
    c22e:	77 1f       	adc	r23, r23
    c230:	2a 95       	dec	r18
    c232:	e1 f7       	brne	.-8      	; 0xc22c <_ZL11EeFsSetLinkhh+0xa>
    c234:	82 e0       	ldi	r24, 0x02	; 2
    c236:	9a e1       	ldi	r25, 0x1A	; 26
    c238:	41 e0       	ldi	r20, 0x01	; 1
    c23a:	50 e0       	ldi	r21, 0x00	; 0
    c23c:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <_Z15eeWriteBlockCmpPKvjj>
}
    c240:	08 95       	ret

0000c242 <_ZL17EeFsFlushFreelistv>:
  eeWriteBlockCmp(buf, blk*BS+ofs+1, len);
}

static void EeFsFlushFreelist()
{
  eeWriteBlockCmp(&eeFs.freeList, offsetof(EeFs, freeList), sizeof(eeFs.freeList));
    c242:	84 ec       	ldi	r24, 0xC4	; 196
    c244:	99 e1       	ldi	r25, 0x19	; 25
    c246:	62 e0       	ldi	r22, 0x02	; 2
    c248:	70 e0       	ldi	r23, 0x00	; 0
    c24a:	41 e0       	ldi	r20, 0x01	; 1
    c24c:	50 e0       	ldi	r21, 0x00	; 0
    c24e:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <_Z15eeWriteBlockCmpPKvjj>
}
    c252:	08 95       	ret

0000c254 <_ZL8EeFsFreeh>:
    i = EeFsGetLink(i);
  }
  return ret;
}

static void EeFsFree(uint8_t blk){///free one or more blocks
    c254:	cf 93       	push	r28
    c256:	df 93       	push	r29
    c258:	c8 2f       	mov	r28, r24
  uint8_t i = blk;
    c25a:	d8 2f       	mov	r29, r24
  while( EeFsGetLink(i)) i = EeFsGetLink(i);
    c25c:	04 c0       	rjmp	.+8      	; 0xc266 <_ZL8EeFsFreeh+0x12>
    c25e:	8d 2f       	mov	r24, r29
    c260:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c264:	d8 2f       	mov	r29, r24
    c266:	8d 2f       	mov	r24, r29
    c268:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c26c:	88 23       	and	r24, r24
    c26e:	b9 f7       	brne	.-18     	; 0xc25e <_ZL8EeFsFreeh+0xa>
  EeFsSetLink(i,eeFs.freeList);
    c270:	8d 2f       	mov	r24, r29
    c272:	60 91 c4 19 	lds	r22, 0x19C4
    c276:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
  eeFs.freeList = blk; //chain in front
    c27a:	c0 93 c4 19 	sts	0x19C4, r28
  EeFsFlushFreelist();
    c27e:	0e 94 21 61 	call	0xc242	; 0xc242 <_ZL17EeFsFlushFreelistv>
}
    c282:	df 91       	pop	r29
    c284:	cf 91       	pop	r28
    c286:	08 95       	ret

0000c288 <_ZL9EeFsFlushv>:
  eeWriteBlockCmp(&eeFs.files[i_fileId], offsetof(EeFs, files) + sizeof(DirEnt)*i_fileId, sizeof(DirEnt));
}

static void EeFsFlush()
{
  eeWriteBlockCmp(&eeFs, 0, sizeof(eeFs));
    c288:	82 ec       	ldi	r24, 0xC2	; 194
    c28a:	99 e1       	ldi	r25, 0x19	; 25
    c28c:	60 e0       	ldi	r22, 0x00	; 0
    c28e:	70 e0       	ldi	r23, 0x00	; 0
    c290:	40 e4       	ldi	r20, 0x40	; 64
    c292:	50 e0       	ldi	r21, 0x00	; 0
    c294:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <_Z15eeWriteBlockCmpPKvjj>
}
    c298:	08 95       	ret

0000c29a <_Z11EeFsGetFreev>:

uint16_t EeFsGetFree()
{
    c29a:	cf 93       	push	r28
    c29c:	df 93       	push	r29
  uint16_t  ret = 0;
  uint8_t i = eeFs.freeList;
    c29e:	80 91 c4 19 	lds	r24, 0x19C4
  eeWriteBlockCmp(&eeFs, 0, sizeof(eeFs));
}

uint16_t EeFsGetFree()
{
  uint16_t  ret = 0;
    c2a2:	c0 e0       	ldi	r28, 0x00	; 0
    c2a4:	d0 e0       	ldi	r29, 0x00	; 0
  uint8_t i = eeFs.freeList;
  while( i ){
    c2a6:	03 c0       	rjmp	.+6      	; 0xc2ae <_Z11EeFsGetFreev+0x14>
    ret += BS-1;
    c2a8:	2f 96       	adiw	r28, 0x0f	; 15
    i = EeFsGetLink(i);
    c2aa:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>

uint16_t EeFsGetFree()
{
  uint16_t  ret = 0;
  uint8_t i = eeFs.freeList;
  while( i ){
    c2ae:	88 23       	and	r24, r24
    c2b0:	d9 f7       	brne	.-10     	; 0xc2a8 <_Z11EeFsGetFreev+0xe>
    ret += BS-1;
    i = EeFsGetLink(i);
  }
  return ret;
}
    c2b2:	ce 01       	movw	r24, r28
    c2b4:	df 91       	pop	r29
    c2b6:	cf 91       	pop	r28
    c2b8:	08 95       	ret

0000c2ba <_Z6EeFsckv>:
  eeFs.freeList = blk; //chain in front
  EeFsFlushFreelist();
}

int8_t EeFsck()
{
    c2ba:	cf 92       	push	r12
    c2bc:	df 92       	push	r13
    c2be:	ef 92       	push	r14
    c2c0:	ff 92       	push	r15
    c2c2:	0f 93       	push	r16
    c2c4:	1f 93       	push	r17
    c2c6:	cf 93       	push	r28
    c2c8:	df 93       	push	r29
  s_sync_write = true;
    c2ca:	81 e0       	ldi	r24, 0x01	; 1
    c2cc:	80 93 c1 19 	sts	0x19C1, r24

  uint8_t *bufp;
  static uint8_t buffer[BLOCKS];
  bufp = buffer;
  memset(bufp,0,BLOCKS);
    c2d0:	8f ef       	ldi	r24, 0xFF	; 255
    c2d2:	e3 e0       	ldi	r30, 0x03	; 3
    c2d4:	fa e1       	ldi	r31, 0x1A	; 26
    c2d6:	df 01       	movw	r26, r30
    c2d8:	1d 92       	st	X+, r1
    c2da:	8a 95       	dec	r24
    c2dc:	e9 f7       	brne	.-6      	; 0xc2d8 <_Z6EeFsckv+0x1e>
    c2de:	06 ec       	ldi	r16, 0xC6	; 198
    c2e0:	19 e1       	ldi	r17, 0x19	; 25
    c2e2:	c0 e0       	ldi	r28, 0x00	; 0
    c2e4:	d0 e0       	ldi	r29, 0x00	; 0
    c2e6:	8c 2f       	mov	r24, r28
  uint8_t blk ;
  int8_t ret=0;

  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    c2e8:	c4 31       	cpi	r28, 0x14	; 20
    c2ea:	39 f4       	brne	.+14     	; 0xc2fa <_Z6EeFsckv+0x40>
    c2ec:	d0 90 c4 19 	lds	r13, 0x19C4
    c2f0:	44 ec       	ldi	r20, 0xC4	; 196
    c2f2:	e4 2e       	mov	r14, r20
    c2f4:	49 e1       	ldi	r20, 0x19	; 25
    c2f6:	f4 2e       	mov	r15, r20
    c2f8:	0b c0       	rjmp	.+22     	; 0xc310 <_Z6EeFsckv+0x56>
    c2fa:	7e 01       	movw	r14, r28
    c2fc:	ee 0c       	add	r14, r14
    c2fe:	ff 1c       	adc	r15, r15
    c300:	ec 0e       	add	r14, r28
    c302:	fd 1e       	adc	r15, r29
    c304:	e6 ec       	ldi	r30, 0xC6	; 198
    c306:	f9 e1       	ldi	r31, 0x19	; 25
    c308:	ee 0e       	add	r14, r30
    c30a:	ff 1e       	adc	r15, r31
    c30c:	d8 01       	movw	r26, r16
    c30e:	dc 90       	ld	r13, X
    uint8_t lastBlk = 0;
    c310:	90 e0       	ldi	r25, 0x00	; 0
          EeFsFlush();
        }
        blk = 0; // abort
      }
      else {
        bufp[blk] = i+1;
    c312:	c8 2e       	mov	r12, r24
    c314:	c3 94       	inc	r12

  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    uint8_t lastBlk = 0;
    blk = *startP;
    while (blk) {
    c316:	1d c0       	rjmp	.+58     	; 0xc352 <_Z6EeFsckv+0x98>
      if (blk < FIRSTBLK || // bad blk index
    c318:	8d 2d       	mov	r24, r13
    c31a:	84 50       	subi	r24, 0x04	; 4
    c31c:	8b 3f       	cpi	r24, 0xFB	; 251
    c31e:	38 f4       	brcc	.+14     	; 0xc32e <_Z6EeFsckv+0x74>
          blk >= BLOCKS  || // bad blk index
          bufp[blk])        // blk double usage
    c320:	ed 2d       	mov	r30, r13
    c322:	f0 e0       	ldi	r31, 0x00	; 0
    c324:	ed 5f       	subi	r30, 0xFD	; 253
    c326:	f5 4e       	sbci	r31, 0xE5	; 229
  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    uint8_t lastBlk = 0;
    blk = *startP;
    while (blk) {
      if (blk < FIRSTBLK || // bad blk index
    c328:	80 81       	ld	r24, Z
    c32a:	88 23       	and	r24, r24
    c32c:	61 f0       	breq	.+24     	; 0xc346 <_Z6EeFsckv+0x8c>
          blk >= BLOCKS  || // bad blk index
          bufp[blk])        // blk double usage
      {
        if (lastBlk) {
    c32e:	99 23       	and	r25, r25
    c330:	29 f0       	breq	.+10     	; 0xc33c <_Z6EeFsckv+0x82>
          EeFsSetLink(lastBlk, 0);
    c332:	89 2f       	mov	r24, r25
    c334:	60 e0       	ldi	r22, 0x00	; 0
    c336:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
    c33a:	0d c0       	rjmp	.+26     	; 0xc356 <_Z6EeFsckv+0x9c>
        }
        else {
          *startP = 0; // interrupt chain at startpos
    c33c:	f7 01       	movw	r30, r14
    c33e:	10 82       	st	Z, r1
          EeFsFlush();
    c340:	0e 94 44 61 	call	0xc288	; 0xc288 <_ZL9EeFsFlushv>
    c344:	08 c0       	rjmp	.+16     	; 0xc356 <_Z6EeFsckv+0x9c>
        }
        blk = 0; // abort
      }
      else {
        bufp[blk] = i+1;
    c346:	c0 82       	st	Z, r12
        lastBlk   = blk;
        blk       = EeFsGetLink(blk);
    c348:	8d 2d       	mov	r24, r13
    c34a:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c34e:	9d 2d       	mov	r25, r13
    c350:	d8 2e       	mov	r13, r24

  for(uint8_t i = 0; i <= MAXFILES; i++){
    uint8_t *startP = i==MAXFILES ? &eeFs.freeList : &eeFs.files[i].startBlk;
    uint8_t lastBlk = 0;
    blk = *startP;
    while (blk) {
    c352:	dd 20       	and	r13, r13
    c354:	09 f7       	brne	.-62     	; 0xc318 <_Z6EeFsckv+0x5e>
    c356:	21 96       	adiw	r28, 0x01	; 1
    c358:	0d 5f       	subi	r16, 0xFD	; 253
    c35a:	1f 4f       	sbci	r17, 0xFF	; 255
  bufp = buffer;
  memset(bufp,0,BLOCKS);
  uint8_t blk ;
  int8_t ret=0;

  for(uint8_t i = 0; i <= MAXFILES; i++){
    c35c:	c5 31       	cpi	r28, 0x15	; 21
    c35e:	d1 05       	cpc	r29, r1
    c360:	11 f6       	brne	.-124    	; 0xc2e6 <_Z6EeFsckv+0x2c>
    c362:	c7 e0       	ldi	r28, 0x07	; 7
    c364:	da e1       	ldi	r29, 0x1A	; 26
    c366:	04 e0       	ldi	r16, 0x04	; 4
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for (blk=FIRSTBLK; blk<BLOCKS; blk++) {
    if (!bufp[blk]) { // unused block
    c368:	89 91       	ld	r24, Y+
    c36a:	88 23       	and	r24, r24
    c36c:	49 f4       	brne	.+18     	; 0xc380 <_Z6EeFsckv+0xc6>
      EeFsSetLink(blk, eeFs.freeList);
    c36e:	80 2f       	mov	r24, r16
    c370:	60 91 c4 19 	lds	r22, 0x19C4
    c374:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
      eeFs.freeList = blk; // chain in front
    c378:	00 93 c4 19 	sts	0x19C4, r16
      EeFsFlushFreelist();
    c37c:	0e 94 21 61 	call	0xc242	; 0xc242 <_ZL17EeFsFlushFreelistv>
        lastBlk   = blk;
        blk       = EeFsGetLink(blk);
      }
    }
  }
  for (blk=FIRSTBLK; blk<BLOCKS; blk++) {
    c380:	0f 5f       	subi	r16, 0xFF	; 255
    c382:	0f 3f       	cpi	r16, 0xFF	; 255
    c384:	89 f7       	brne	.-30     	; 0xc368 <_Z6EeFsckv+0xae>
      eeFs.freeList = blk; // chain in front
      EeFsFlushFreelist();
    }
  }

  s_sync_write = false;
    c386:	10 92 c1 19 	sts	0x19C1, r1

  return ret;
}
    c38a:	80 e0       	ldi	r24, 0x00	; 0
    c38c:	df 91       	pop	r29
    c38e:	cf 91       	pop	r28
    c390:	1f 91       	pop	r17
    c392:	0f 91       	pop	r16
    c394:	ff 90       	pop	r15
    c396:	ef 90       	pop	r14
    c398:	df 90       	pop	r13
    c39a:	cf 90       	pop	r12
    c39c:	08 95       	ret

0000c39e <_Z10EeFsFormatv>:

void EeFsFormat()
{
    c39e:	cf 93       	push	r28
  s_sync_write = true;
    c3a0:	81 e0       	ldi	r24, 0x01	; 1
    c3a2:	80 93 c1 19 	sts	0x19C1, r24

  memset(&eeFs,0, sizeof(eeFs));
    c3a6:	80 e4       	ldi	r24, 0x40	; 64
    c3a8:	e2 ec       	ldi	r30, 0xC2	; 194
    c3aa:	f9 e1       	ldi	r31, 0x19	; 25
    c3ac:	df 01       	movw	r26, r30
    c3ae:	98 2f       	mov	r25, r24
    c3b0:	1d 92       	st	X+, r1
    c3b2:	9a 95       	dec	r25
    c3b4:	e9 f7       	brne	.-6      	; 0xc3b0 <_Z10EeFsFormatv+0x12>
  eeFs.version  = EEFS_VERS;
    c3b6:	94 e0       	ldi	r25, 0x04	; 4
    c3b8:	90 93 c2 19 	sts	0x19C2, r25
  eeFs.mySize   = sizeof(eeFs);
    c3bc:	80 93 c3 19 	sts	0x19C3, r24
  eeFs.freeList = 0;
  eeFs.bs       = BS;
    c3c0:	80 e1       	ldi	r24, 0x10	; 16
    c3c2:	80 93 c5 19 	sts	0x19C5, r24
  for(uint8_t i = FIRSTBLK; i < BLOCKS; i++) EeFsSetLink(i,i+1);
    c3c6:	84 e0       	ldi	r24, 0x04	; 4
    c3c8:	01 c0       	rjmp	.+2      	; 0xc3cc <_Z10EeFsFormatv+0x2e>
    c3ca:	8c 2f       	mov	r24, r28
    c3cc:	c8 2f       	mov	r28, r24
    c3ce:	cf 5f       	subi	r28, 0xFF	; 255
    c3d0:	6c 2f       	mov	r22, r28
    c3d2:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
    c3d6:	cf 3f       	cpi	r28, 0xFF	; 255
    c3d8:	c1 f7       	brne	.-16     	; 0xc3ca <_Z10EeFsFormatv+0x2c>
  EeFsSetLink(BLOCKS-1, 0);
    c3da:	8e ef       	ldi	r24, 0xFE	; 254
    c3dc:	60 e0       	ldi	r22, 0x00	; 0
    c3de:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
  eeFs.freeList = FIRSTBLK;
    c3e2:	84 e0       	ldi	r24, 0x04	; 4
    c3e4:	80 93 c4 19 	sts	0x19C4, r24
  EeFsFlush();
    c3e8:	0e 94 44 61 	call	0xc288	; 0xc288 <_ZL9EeFsFlushv>

  s_sync_write = false;
    c3ec:	10 92 c1 19 	sts	0x19C1, r1
}
    c3f0:	cf 91       	pop	r28
    c3f2:	08 95       	ret

0000c3f4 <_Z8EeFsOpenv>:

bool EeFsOpen()
{
  eeprom_read_block(&eeFs,0,sizeof(eeFs));
    c3f4:	82 ec       	ldi	r24, 0xC2	; 194
    c3f6:	99 e1       	ldi	r25, 0x19	; 25
    c3f8:	60 e0       	ldi	r22, 0x00	; 0
    c3fa:	70 e0       	ldi	r23, 0x00	; 0
    c3fc:	40 e4       	ldi	r20, 0x40	; 64
    c3fe:	50 e0       	ldi	r21, 0x00	; 0
    c400:	0e 94 94 ab 	call	0x15728	; 0x15728 <__eerd_block_m2560>
#ifdef SIMU
  if(eeFs.version != EEFS_VERS)    perror("bad eeFs.version\n");
  if(eeFs.mySize  != sizeof(eeFs)) perror("bad eeFs.mySize\n");
#endif  

  return eeFs.version == EEFS_VERS && eeFs.mySize == sizeof(eeFs);
    c404:	80 91 c2 19 	lds	r24, 0x19C2
    c408:	84 30       	cpi	r24, 0x04	; 4
    c40a:	39 f4       	brne	.+14     	; 0xc41a <_Z8EeFsOpenv+0x26>
  EeFsFlush();

  s_sync_write = false;
}

bool EeFsOpen()
    c40c:	81 e0       	ldi	r24, 0x01	; 1
    c40e:	90 91 c3 19 	lds	r25, 0x19C3
    c412:	90 34       	cpi	r25, 0x40	; 64
    c414:	19 f0       	breq	.+6      	; 0xc41c <_Z8EeFsOpenv+0x28>
    c416:	80 e0       	ldi	r24, 0x00	; 0
    c418:	08 95       	ret
#ifdef SIMU
  if(eeFs.version != EEFS_VERS)    perror("bad eeFs.version\n");
  if(eeFs.mySize  != sizeof(eeFs)) perror("bad eeFs.mySize\n");
#endif  

  return eeFs.version == EEFS_VERS && eeFs.mySize == sizeof(eeFs);
    c41a:	80 e0       	ldi	r24, 0x00	; 0
}
    c41c:	08 95       	ret

0000c41e <_ZN5EFile6existsEh>:

bool EFile::exists(uint8_t i_fileId)
{
  return eeFs.files[i_fileId].startBlk;
    c41e:	90 e0       	ldi	r25, 0x00	; 0
    c420:	fc 01       	movw	r30, r24
    c422:	ee 0f       	add	r30, r30
    c424:	ff 1f       	adc	r31, r31
    c426:	e8 0f       	add	r30, r24
    c428:	f9 1f       	adc	r31, r25
    c42a:	ee 53       	subi	r30, 0x3E	; 62
    c42c:	f6 4e       	sbci	r31, 0xE6	; 230
    c42e:	81 e0       	ldi	r24, 0x01	; 1
    c430:	94 81       	ldd	r25, Z+4	; 0x04
    c432:	99 23       	and	r25, r25
    c434:	09 f4       	brne	.+2      	; 0xc438 <_ZN5EFile6existsEh+0x1a>
    c436:	80 e0       	ldi	r24, 0x00	; 0
}
    c438:	08 95       	ret

0000c43a <_ZN5EFile4swapEhh>:

/*
 * Swap two files in eeprom
 */
void EFile::swap(uint8_t i_fileId1, uint8_t i_fileId2)
{
    c43a:	df 93       	push	r29
    c43c:	cf 93       	push	r28
    c43e:	00 d0       	rcall	.+0      	; 0xc440 <_ZN5EFile4swapEhh+0x6>
    c440:	0f 92       	push	r0
    c442:	cd b7       	in	r28, 0x3d	; 61
    c444:	de b7       	in	r29, 0x3e	; 62
  DirEnt            tmp = eeFs.files[i_fileId1];
    c446:	48 2f       	mov	r20, r24
    c448:	50 e0       	ldi	r21, 0x00	; 0
    c44a:	fa 01       	movw	r30, r20
    c44c:	ee 0f       	add	r30, r30
    c44e:	ff 1f       	adc	r31, r31
    c450:	e4 0f       	add	r30, r20
    c452:	f5 1f       	adc	r31, r21
    c454:	de 01       	movw	r26, r28
    c456:	11 96       	adiw	r26, 0x01	; 1
    c458:	ea 53       	subi	r30, 0x3A	; 58
    c45a:	f6 4e       	sbci	r31, 0xE6	; 230
    c45c:	93 e0       	ldi	r25, 0x03	; 3
    c45e:	01 90       	ld	r0, Z+
    c460:	0d 92       	st	X+, r0
    c462:	91 50       	subi	r25, 0x01	; 1
    c464:	e1 f7       	brne	.-8      	; 0xc45e <_ZN5EFile4swapEhh+0x24>
  eeFs.files[i_fileId1] = eeFs.files[i_fileId2];
    c466:	26 2f       	mov	r18, r22
    c468:	30 e0       	ldi	r19, 0x00	; 0
    c46a:	da 01       	movw	r26, r20
    c46c:	aa 0f       	add	r26, r26
    c46e:	bb 1f       	adc	r27, r27
    c470:	a4 0f       	add	r26, r20
    c472:	b5 1f       	adc	r27, r21
    c474:	f9 01       	movw	r30, r18
    c476:	ee 0f       	add	r30, r30
    c478:	ff 1f       	adc	r31, r31
    c47a:	e2 0f       	add	r30, r18
    c47c:	f3 1f       	adc	r31, r19
    c47e:	aa 53       	subi	r26, 0x3A	; 58
    c480:	b6 4e       	sbci	r27, 0xE6	; 230
    c482:	ea 53       	subi	r30, 0x3A	; 58
    c484:	f6 4e       	sbci	r31, 0xE6	; 230
    c486:	93 e0       	ldi	r25, 0x03	; 3
    c488:	01 90       	ld	r0, Z+
    c48a:	0d 92       	st	X+, r0
    c48c:	91 50       	subi	r25, 0x01	; 1
    c48e:	e1 f7       	brne	.-8      	; 0xc488 <_ZN5EFile4swapEhh+0x4e>
  eeFs.files[i_fileId2] = tmp;
    c490:	f9 01       	movw	r30, r18
    c492:	ee 0f       	add	r30, r30
    c494:	ff 1f       	adc	r31, r31
    c496:	e2 0f       	add	r30, r18
    c498:	f3 1f       	adc	r31, r19
    c49a:	ea 53       	subi	r30, 0x3A	; 58
    c49c:	f6 4e       	sbci	r31, 0xE6	; 230
    c49e:	de 01       	movw	r26, r28
    c4a0:	11 96       	adiw	r26, 0x01	; 1
    c4a2:	93 e0       	ldi	r25, 0x03	; 3
    c4a4:	0d 90       	ld	r0, X+
    c4a6:	01 92       	st	Z+, r0
    c4a8:	91 50       	subi	r25, 0x01	; 1
    c4aa:	e1 f7       	brne	.-8      	; 0xc4a4 <_ZN5EFile4swapEhh+0x6a>
  s_sync_write = true;
    c4ac:	91 e0       	ldi	r25, 0x01	; 1
    c4ae:	90 93 c1 19 	sts	0x19C1, r25
  EeFsFlushDirEnt(i_fileId1);
    c4b2:	6c 83       	std	Y+4, r22	; 0x04
    c4b4:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <_ZL15EeFsFlushDirEnth>
  EeFsFlushDirEnt(i_fileId2);
    c4b8:	6c 81       	ldd	r22, Y+4	; 0x04
    c4ba:	86 2f       	mov	r24, r22
    c4bc:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <_ZL15EeFsFlushDirEnth>
  s_sync_write = false;
    c4c0:	10 92 c1 19 	sts	0x19C1, r1
}
    c4c4:	0f 90       	pop	r0
    c4c6:	0f 90       	pop	r0
    c4c8:	0f 90       	pop	r0
    c4ca:	0f 90       	pop	r0
    c4cc:	cf 91       	pop	r28
    c4ce:	df 91       	pop	r29
    c4d0:	08 95       	ret

0000c4d2 <_ZN5EFile2rmEh>:

void EFile::rm(uint8_t i_fileId)
{
    c4d2:	cf 93       	push	r28
  uint8_t i = eeFs.files[i_fileId].startBlk;
    c4d4:	48 2f       	mov	r20, r24
    c4d6:	50 e0       	ldi	r21, 0x00	; 0
    c4d8:	9a 01       	movw	r18, r20
    c4da:	22 0f       	add	r18, r18
    c4dc:	33 1f       	adc	r19, r19
    c4de:	24 0f       	add	r18, r20
    c4e0:	35 1f       	adc	r19, r21
    c4e2:	f9 01       	movw	r30, r18
    c4e4:	ee 53       	subi	r30, 0x3E	; 62
    c4e6:	f6 4e       	sbci	r31, 0xE6	; 230
    c4e8:	c4 81       	ldd	r28, Z+4	; 0x04
  memset(&eeFs.files[i_fileId], 0, sizeof(eeFs.files[i_fileId]));
    c4ea:	2a 53       	subi	r18, 0x3A	; 58
    c4ec:	36 4e       	sbci	r19, 0xE6	; 230
    c4ee:	93 e0       	ldi	r25, 0x03	; 3
    c4f0:	d9 01       	movw	r26, r18
    c4f2:	1d 92       	st	X+, r1
    c4f4:	9a 95       	dec	r25
    c4f6:	e9 f7       	brne	.-6      	; 0xc4f2 <_ZN5EFile2rmEh+0x20>
  s_sync_write = true;
    c4f8:	91 e0       	ldi	r25, 0x01	; 1
    c4fa:	90 93 c1 19 	sts	0x19C1, r25
  EeFsFlushDirEnt(i_fileId);
    c4fe:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <_ZL15EeFsFlushDirEnth>
  if (i) EeFsFree(i); //chain in
    c502:	cc 23       	and	r28, r28
    c504:	19 f0       	breq	.+6      	; 0xc50c <_ZN5EFile2rmEh+0x3a>
    c506:	8c 2f       	mov	r24, r28
    c508:	0e 94 2a 61 	call	0xc254	; 0xc254 <_ZL8EeFsFreeh>
  s_sync_write = false;
    c50c:	10 92 c1 19 	sts	0x19C1, r1

}
    c510:	cf 91       	pop	r28
    c512:	08 95       	ret

0000c514 <_ZN5EFile4sizeEv>:

uint16_t EFile::size()
{
  return eeFs.files[m_fileId].size;
    c514:	fc 01       	movw	r30, r24
    c516:	80 81       	ld	r24, Z
    c518:	90 e0       	ldi	r25, 0x00	; 0
    c51a:	fc 01       	movw	r30, r24
    c51c:	ee 0f       	add	r30, r30
    c51e:	ff 1f       	adc	r31, r31
    c520:	e8 0f       	add	r30, r24
    c522:	f9 1f       	adc	r31, r25
    c524:	e9 53       	subi	r30, 0x39	; 57
    c526:	f6 4e       	sbci	r31, 0xE6	; 230
    c528:	91 81       	ldd	r25, Z+1	; 0x01
}
    c52a:	80 81       	ld	r24, Z
    c52c:	9f 70       	andi	r25, 0x0F	; 15
    c52e:	08 95       	ret

0000c530 <_ZN5EFile6openRdEh>:
/*
 * Open file i_fileId for reading.
 * Return the file's type
 */
void EFile::openRd(uint8_t i_fileId)
{
    c530:	fc 01       	movw	r30, r24
  m_fileId = i_fileId;
    c532:	60 83       	st	Z, r22
  m_pos      = 0;
    c534:	12 82       	std	Z+2, r1	; 0x02
    c536:	11 82       	std	Z+1, r1	; 0x01
  m_currBlk  = eeFs.files[m_fileId].startBlk;
    c538:	70 e0       	ldi	r23, 0x00	; 0
    c53a:	db 01       	movw	r26, r22
    c53c:	aa 0f       	add	r26, r26
    c53e:	bb 1f       	adc	r27, r27
    c540:	a6 0f       	add	r26, r22
    c542:	b7 1f       	adc	r27, r23
    c544:	ae 53       	subi	r26, 0x3E	; 62
    c546:	b6 4e       	sbci	r27, 0xE6	; 230
    c548:	14 96       	adiw	r26, 0x04	; 4
    c54a:	8c 91       	ld	r24, X
    c54c:	14 97       	sbiw	r26, 0x04	; 4
    c54e:	83 83       	std	Z+3, r24	; 0x03
  m_ofs      = 0;
    c550:	14 82       	std	Z+4, r1	; 0x04
  s_write_err = ERR_NONE;       // error reasons */
    c552:	10 92 c0 19 	sts	0x19C0, r1
}
    c556:	08 95       	ret

0000c558 <_ZN7RlcFile7openRlcEh>:

void RlcFile::openRlc(uint8_t i_fileId)
{
    c558:	cf 93       	push	r28
    c55a:	df 93       	push	r29
    c55c:	ec 01       	movw	r28, r24
  EFile::openRd(i_fileId);
    c55e:	0e 94 98 62 	call	0xc530	; 0xc530 <_ZN5EFile6openRdEh>
  m_zeroes   = 0;
    c562:	1e 82       	std	Y+6, r1	; 0x06
  m_bRlc     = 0;
    c564:	1d 82       	std	Y+5, r1	; 0x05
}
    c566:	df 91       	pop	r29
    c568:	cf 91       	pop	r28
    c56a:	08 95       	ret

0000c56c <_ZN5EFile4readEPhj>:

uint8_t EFile::read(uint8_t*buf,uint16_t i_len)
{
    c56c:	cf 92       	push	r12
    c56e:	df 92       	push	r13
    c570:	ef 92       	push	r14
    c572:	ff 92       	push	r15
    c574:	0f 93       	push	r16
    c576:	1f 93       	push	r17
    c578:	cf 93       	push	r28
    c57a:	df 93       	push	r29
    c57c:	ec 01       	movw	r28, r24
    c57e:	6b 01       	movw	r12, r22
  uint16_t len = eeFs.files[m_fileId].size - m_pos;
    c580:	88 81       	ld	r24, Y
    c582:	90 e0       	ldi	r25, 0x00	; 0
    c584:	fc 01       	movw	r30, r24
    c586:	ee 0f       	add	r30, r30
    c588:	ff 1f       	adc	r31, r31
    c58a:	e8 0f       	add	r30, r24
    c58c:	f9 1f       	adc	r31, r25
    c58e:	e9 53       	subi	r30, 0x39	; 57
    c590:	f6 4e       	sbci	r31, 0xE6	; 230
    c592:	80 81       	ld	r24, Z
    c594:	21 81       	ldd	r18, Z+1	; 0x01
    c596:	92 2f       	mov	r25, r18
    c598:	9f 70       	andi	r25, 0x0F	; 15
    c59a:	29 81       	ldd	r18, Y+1	; 0x01
    c59c:	3a 81       	ldd	r19, Y+2	; 0x02
    c59e:	82 1b       	sub	r24, r18
    c5a0:	93 0b       	sbc	r25, r19
  if(len < i_len) i_len = len;
  len = i_len;
    c5a2:	04 2f       	mov	r16, r20
    c5a4:	15 2f       	mov	r17, r21
    c5a6:	80 17       	cp	r24, r16
    c5a8:	91 07       	cpc	r25, r17
    c5aa:	08 f4       	brcc	.+2      	; 0xc5ae <_ZN5EFile4readEPhj+0x42>
    c5ac:	8c 01       	movw	r16, r24
    c5ae:	78 01       	movw	r14, r16
  while(len)
    c5b0:	16 c0       	rjmp	.+44     	; 0xc5de <_ZN5EFile4readEPhj+0x72>
  {
    if(!m_currBlk) break;
    c5b2:	8b 81       	ldd	r24, Y+3	; 0x03
    c5b4:	88 23       	and	r24, r24
    c5b6:	b1 f0       	breq	.+44     	; 0xc5e4 <_ZN5EFile4readEPhj+0x78>
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    c5b8:	6c 81       	ldd	r22, Y+4	; 0x04
    c5ba:	6f 5f       	subi	r22, 0xFF	; 255
    c5bc:	6c 83       	std	Y+4, r22	; 0x04
  eeWriteBlockCmp(&s_link, (blk*BS), 1);
}

static uint8_t EeFsGetDat(uint8_t blk,uint8_t ofs)
{
  return EeFsRead(blk, ofs+1);
    c5be:	0e 94 de 60 	call	0xc1bc	; 0xc1bc <_ZL8EeFsReadhh>
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
  {
    if(!m_currBlk) break;
    *buf++ = EeFsGetDat(m_currBlk, m_ofs++);
    c5c2:	f6 01       	movw	r30, r12
    c5c4:	81 93       	st	Z+, r24
    c5c6:	6f 01       	movw	r12, r30
    if(m_ofs>=(BS-1)){
    c5c8:	8c 81       	ldd	r24, Y+4	; 0x04
    c5ca:	8f 30       	cpi	r24, 0x0F	; 15
    c5cc:	28 f0       	brcs	.+10     	; 0xc5d8 <_ZN5EFile4readEPhj+0x6c>
      m_ofs=0;
    c5ce:	1c 82       	std	Y+4, r1	; 0x04
      m_currBlk=EeFsGetLink(m_currBlk);
    c5d0:	8b 81       	ldd	r24, Y+3	; 0x03
    c5d2:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c5d6:	8b 83       	std	Y+3, r24	; 0x03
    }
    len--;
    c5d8:	08 94       	sec
    c5da:	e1 08       	sbc	r14, r1
    c5dc:	f1 08       	sbc	r15, r1
uint8_t EFile::read(uint8_t*buf,uint16_t i_len)
{
  uint16_t len = eeFs.files[m_fileId].size - m_pos;
  if(len < i_len) i_len = len;
  len = i_len;
  while(len)
    c5de:	e1 14       	cp	r14, r1
    c5e0:	f1 04       	cpc	r15, r1
    c5e2:	39 f7       	brne	.-50     	; 0xc5b2 <_ZN5EFile4readEPhj+0x46>
      m_ofs=0;
      m_currBlk=EeFsGetLink(m_currBlk);
    }
    len--;
  }
  m_pos += i_len - len;
    c5e4:	89 81       	ldd	r24, Y+1	; 0x01
    c5e6:	9a 81       	ldd	r25, Y+2	; 0x02
    c5e8:	80 0f       	add	r24, r16
    c5ea:	91 1f       	adc	r25, r17
    c5ec:	8e 19       	sub	r24, r14
    c5ee:	9f 09       	sbc	r25, r15
    c5f0:	9a 83       	std	Y+2, r25	; 0x02
    c5f2:	89 83       	std	Y+1, r24	; 0x01
  return i_len - len;
}
    c5f4:	80 2f       	mov	r24, r16
    c5f6:	8e 19       	sub	r24, r14
    c5f8:	df 91       	pop	r29
    c5fa:	cf 91       	pop	r28
    c5fc:	1f 91       	pop	r17
    c5fe:	0f 91       	pop	r16
    c600:	ff 90       	pop	r15
    c602:	ef 90       	pop	r14
    c604:	df 90       	pop	r13
    c606:	cf 90       	pop	r12
    c608:	08 95       	ret

0000c60a <_ZN7RlcFile9readRlc12EPhjb>:
#ifdef TRANSLATIONS
uint16_t RlcFile::readRlc12(uint8_t*buf,uint16_t i_len, bool rlc2)
#else
uint16_t RlcFile::readRlc(uint8_t*buf,uint16_t i_len)
#endif
{
    c60a:	4f 92       	push	r4
    c60c:	5f 92       	push	r5
    c60e:	6f 92       	push	r6
    c610:	7f 92       	push	r7
    c612:	8f 92       	push	r8
    c614:	9f 92       	push	r9
    c616:	af 92       	push	r10
    c618:	bf 92       	push	r11
    c61a:	cf 92       	push	r12
    c61c:	df 92       	push	r13
    c61e:	ef 92       	push	r14
    c620:	ff 92       	push	r15
    c622:	0f 93       	push	r16
    c624:	1f 93       	push	r17
    c626:	cf 93       	push	r28
    c628:	df 93       	push	r29
    c62a:	ec 01       	movw	r28, r24
    c62c:	7b 01       	movw	r14, r22
    c62e:	6a 01       	movw	r12, r20
    c630:	82 2e       	mov	r8, r18
  uint16_t i=0;
    c632:	00 e0       	ldi	r16, 0x00	; 0
    c634:	10 e0       	ldi	r17, 0x00	; 0
    i        += l;
    m_zeroes -= l;
    if(m_zeroes) break;

    l=min<uint16_t>(m_bRlc,i_len-i);
    uint8_t lr = read(&buf[i],l); 
    c636:	a8 2e       	mov	r10, r24
    c638:	9d 2e       	mov	r9, r29
    i        += lr ;
    m_bRlc   -= lr;
    if(m_bRlc) break;

    if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    c63a:	e5 e0       	ldi	r30, 0x05	; 5
    c63c:	4e 2e       	mov	r4, r30
    c63e:	51 2c       	mov	r5, r1
    c640:	48 0e       	add	r4, r24
    c642:	59 1e       	adc	r5, r25
uint16_t RlcFile::readRlc(uint8_t*buf,uint16_t i_len)
#endif
{
  uint16_t i=0;
  for( ; 1; ){
    uint8_t l=min<uint16_t>(m_zeroes,i_len-i);
    c644:	8e 81       	ldd	r24, Y+6	; 0x06
    c646:	90 e0       	ldi	r25, 0x00	; 0
    c648:	a6 01       	movw	r20, r12
    c64a:	40 1b       	sub	r20, r16
    c64c:	51 0b       	sbc	r21, r17
    c64e:	84 17       	cp	r24, r20
    c650:	95 07       	cpc	r25, r21
    c652:	08 f4       	brcc	.+2      	; 0xc656 <_ZN7RlcFile9readRlc12EPhjb+0x4c>
    c654:	ac 01       	movw	r20, r24
    c656:	b4 2e       	mov	r11, r20
    memset(&buf[i],0,l);
    c658:	64 2e       	mov	r6, r20
    c65a:	77 24       	eor	r7, r7
    c65c:	97 01       	movw	r18, r14
    c65e:	20 0f       	add	r18, r16
    c660:	31 1f       	adc	r19, r17
    c662:	c9 01       	movw	r24, r18
    c664:	60 e0       	ldi	r22, 0x00	; 0
    c666:	70 e0       	ldi	r23, 0x00	; 0
    c668:	50 e0       	ldi	r21, 0x00	; 0
    c66a:	0e 94 86 ab 	call	0x1570c	; 0x1570c <memset>
    i        += l;
    c66e:	06 0d       	add	r16, r6
    c670:	17 1d       	adc	r17, r7
    m_zeroes -= l;
    c672:	8e 81       	ldd	r24, Y+6	; 0x06
    c674:	8b 19       	sub	r24, r11
    c676:	8e 83       	std	Y+6, r24	; 0x06
    if(m_zeroes) break;
    c678:	88 23       	and	r24, r24
    c67a:	e1 f5       	brne	.+120    	; 0xc6f4 <_ZN7RlcFile9readRlc12EPhjb+0xea>

    l=min<uint16_t>(m_bRlc,i_len-i);
    c67c:	8d 81       	ldd	r24, Y+5	; 0x05
    c67e:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t lr = read(&buf[i],l); 
    c680:	b7 01       	movw	r22, r14
    c682:	60 0f       	add	r22, r16
    c684:	71 1f       	adc	r23, r17
    memset(&buf[i],0,l);
    i        += l;
    m_zeroes -= l;
    if(m_zeroes) break;

    l=min<uint16_t>(m_bRlc,i_len-i);
    c686:	a6 01       	movw	r20, r12
    c688:	40 1b       	sub	r20, r16
    c68a:	51 0b       	sbc	r21, r17
    c68c:	84 17       	cp	r24, r20
    c68e:	95 07       	cpc	r25, r21
    c690:	08 f4       	brcc	.+2      	; 0xc694 <_ZN7RlcFile9readRlc12EPhjb+0x8a>
    c692:	ac 01       	movw	r20, r24
    uint8_t lr = read(&buf[i],l); 
    c694:	8a 2d       	mov	r24, r10
    c696:	99 2d       	mov	r25, r9
    c698:	50 e0       	ldi	r21, 0x00	; 0
    c69a:	0e 94 b6 62 	call	0xc56c	; 0xc56c <_ZN5EFile4readEPhj>
    i        += lr ;
    c69e:	08 0f       	add	r16, r24
    c6a0:	11 1d       	adc	r17, r1
    m_bRlc   -= lr;
    c6a2:	9d 81       	ldd	r25, Y+5	; 0x05
    c6a4:	98 1b       	sub	r25, r24
    c6a6:	9d 83       	std	Y+5, r25	; 0x05
    if(m_bRlc) break;
    c6a8:	99 23       	and	r25, r25
    c6aa:	21 f5       	brne	.+72     	; 0xc6f4 <_ZN7RlcFile9readRlc12EPhjb+0xea>

    if(read(&m_bRlc,1)!=1) break; //read how many bytes to read
    c6ac:	8a 2d       	mov	r24, r10
    c6ae:	99 2d       	mov	r25, r9
    c6b0:	b2 01       	movw	r22, r4
    c6b2:	41 e0       	ldi	r20, 0x01	; 1
    c6b4:	50 e0       	ldi	r21, 0x00	; 0
    c6b6:	0e 94 b6 62 	call	0xc56c	; 0xc56c <_ZN5EFile4readEPhj>
    c6ba:	81 30       	cpi	r24, 0x01	; 1
    c6bc:	d9 f4       	brne	.+54     	; 0xc6f4 <_ZN7RlcFile9readRlc12EPhjb+0xea>
    c6be:	2d 81       	ldd	r18, Y+5	; 0x05

    assert(m_bRlc & 0x7f);
#ifdef TRANSLATIONS
    if (rlc2) {
    c6c0:	88 20       	and	r8, r8
    c6c2:	91 f0       	breq	.+36     	; 0xc6e8 <_ZN7RlcFile9readRlc12EPhjb+0xde>
    c6c4:	82 2f       	mov	r24, r18
    c6c6:	90 e0       	ldi	r25, 0x00	; 0
#endif
      if(m_bRlc&0x80){ // if contains high byte
    c6c8:	27 ff       	sbrs	r18, 7
    c6ca:	0a c0       	rjmp	.+20     	; 0xc6e0 <_ZN7RlcFile9readRlc12EPhjb+0xd6>
        m_zeroes  =(m_bRlc>>4) & 0x7;
    c6cc:	74 e0       	ldi	r23, 0x04	; 4
    c6ce:	95 95       	asr	r25
    c6d0:	87 95       	ror	r24
    c6d2:	7a 95       	dec	r23
    c6d4:	e1 f7       	brne	.-8      	; 0xc6ce <_ZN7RlcFile9readRlc12EPhjb+0xc4>
    c6d6:	87 70       	andi	r24, 0x07	; 7
    c6d8:	8e 83       	std	Y+6, r24	; 0x06
        m_bRlc    = m_bRlc & 0x0f;
    c6da:	2f 70       	andi	r18, 0x0F	; 15
    c6dc:	2d 83       	std	Y+5, r18	; 0x05
    c6de:	b2 cf       	rjmp	.-156    	; 0xc644 <_ZN7RlcFile9readRlc12EPhjb+0x3a>
      }
      else if(m_bRlc&0x40){
    c6e0:	26 ff       	sbrs	r18, 6
    c6e2:	b0 cf       	rjmp	.-160    	; 0xc644 <_ZN7RlcFile9readRlc12EPhjb+0x3a>
        m_zeroes  = m_bRlc & 0x3f;
    c6e4:	2f 73       	andi	r18, 0x3F	; 63
    c6e6:	03 c0       	rjmp	.+6      	; 0xc6ee <_ZN7RlcFile9readRlc12EPhjb+0xe4>
      }
      //else   m_bRlc
#ifdef TRANSLATIONS
    }
    else {
      if(m_bRlc&0x80){ // if contains high byte
    c6e8:	27 ff       	sbrs	r18, 7
    c6ea:	ac cf       	rjmp	.-168    	; 0xc644 <_ZN7RlcFile9readRlc12EPhjb+0x3a>
        m_zeroes  = m_bRlc & 0x7f;
    c6ec:	2f 77       	andi	r18, 0x7F	; 127
    c6ee:	2e 83       	std	Y+6, r18	; 0x06
        m_bRlc    = 0;
    c6f0:	1d 82       	std	Y+5, r1	; 0x05
    c6f2:	a8 cf       	rjmp	.-176    	; 0xc644 <_ZN7RlcFile9readRlc12EPhjb+0x3a>
      }
    }
#endif
  }
  return i;
}
    c6f4:	c8 01       	movw	r24, r16
    c6f6:	df 91       	pop	r29
    c6f8:	cf 91       	pop	r28
    c6fa:	1f 91       	pop	r17
    c6fc:	0f 91       	pop	r16
    c6fe:	ff 90       	pop	r15
    c700:	ef 90       	pop	r14
    c702:	df 90       	pop	r13
    c704:	cf 90       	pop	r12
    c706:	bf 90       	pop	r11
    c708:	af 90       	pop	r10
    c70a:	9f 90       	pop	r9
    c70c:	8f 90       	pop	r8
    c70e:	7f 90       	pop	r7
    c710:	6f 90       	pop	r6
    c712:	5f 90       	pop	r5
    c714:	4f 90       	pop	r4
    c716:	08 95       	ret

0000c718 <_ZN7RlcFile6createEhhh>:
  if (!s_sync_write)
    nextRlcWriteStep();
}

void RlcFile::create(uint8_t i_fileId, uint8_t typ, uint8_t sync_write)
{
    c718:	ef 92       	push	r14
    c71a:	ff 92       	push	r15
    c71c:	1f 93       	push	r17
    c71e:	df 93       	push	r29
    c720:	cf 93       	push	r28
    c722:	0f 92       	push	r0
    c724:	0f 92       	push	r0
    c726:	cd b7       	in	r28, 0x3d	; 61
    c728:	de b7       	in	r29, 0x3e	; 62
    c72a:	7c 01       	movw	r14, r24
    c72c:	16 2f       	mov	r17, r22
  // all write operations will be executed on FILE_TMP
  openRlc(FILE_TMP); // internal use
    c72e:	61 e1       	ldi	r22, 0x11	; 17
    c730:	2a 83       	std	Y+2, r18	; 0x02
    c732:	49 83       	std	Y+1, r20	; 0x01
    c734:	0e 94 ac 62 	call	0xc558	; 0xc558 <_ZN7RlcFile7openRlcEh>
  eeFs.files[FILE_TMP].typ      = typ;
  eeFs.files[FILE_TMP].size     = 0;
    c738:	10 92 fa 19 	sts	0x19FA, r1
    c73c:	49 81       	ldd	r20, Y+1	; 0x01
    c73e:	42 95       	swap	r20
    c740:	40 7f       	andi	r20, 0xF0	; 240
    c742:	40 93 fb 19 	sts	0x19FB, r20
  m_fileId = i_fileId;
    c746:	f7 01       	movw	r30, r14
    c748:	10 83       	st	Z, r17
  s_sync_write = sync_write;
    c74a:	2a 81       	ldd	r18, Y+2	; 0x02
    c74c:	20 93 c1 19 	sts	0x19C1, r18
}
    c750:	0f 90       	pop	r0
    c752:	0f 90       	pop	r0
    c754:	cf 91       	pop	r28
    c756:	df 91       	pop	r29
    c758:	1f 91       	pop	r17
    c75a:	ff 90       	pop	r15
    c75c:	ef 90       	pop	r14
    c75e:	08 95       	ret

0000c760 <_ZN7RlcFile16nextRlcWriteStepEv>:
    nextRlcWriteStep();
  } while (s_sync_write && m_write_step && !s_write_err);
}

void RlcFile::nextRlcWriteStep()
{
    c760:	0f 93       	push	r16
    c762:	1f 93       	push	r17
    c764:	cf 93       	push	r28
    c766:	df 93       	push	r29
    c768:	ec 01       	movw	r28, r24
  uint8_t cnt    = 1;
  uint8_t cnt0   = 0;
  uint16_t i = 0;

  if (m_cur_rlc_len) {
    c76a:	4d 85       	ldd	r20, Y+13	; 0x0d
    c76c:	eb 85       	ldd	r30, Y+11	; 0x0b
    c76e:	fc 85       	ldd	r31, Y+12	; 0x0c
    c770:	44 23       	and	r20, r20
    c772:	59 f0       	breq	.+22     	; 0xc78a <_ZN7RlcFile16nextRlcWriteStepEv+0x2a>
    uint8_t tmp1 = m_cur_rlc_len;
    uint8_t *tmp2 = m_rlc_buf;
    m_rlc_buf += m_cur_rlc_len;
    c774:	cf 01       	movw	r24, r30
    c776:	84 0f       	add	r24, r20
    c778:	91 1d       	adc	r25, r1
    c77a:	9c 87       	std	Y+12, r25	; 0x0c
    c77c:	8b 87       	std	Y+11, r24	; 0x0b
    m_cur_rlc_len = 0;
    c77e:	1d 86       	std	Y+13, r1	; 0x0d
    write(tmp2, tmp1);
    c780:	ce 01       	movw	r24, r28
    c782:	bf 01       	movw	r22, r30
    c784:	0e 94 6c 65 	call	0xcad8	; 0xcad8 <_ZN7RlcFile5writeEPhh>
    return;
    c788:	cf c0       	rjmp	.+414    	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>
  }

  bool    run0   = m_rlc_buf[0] == 0;
    c78a:	20 81       	ld	r18, Z

  if(m_rlc_len==0) goto close;
    c78c:	89 85       	ldd	r24, Y+9	; 0x09
    c78e:	9a 85       	ldd	r25, Y+10	; 0x0a
    c790:	00 97       	sbiw	r24, 0x00	; 0
    c792:	09 f4       	brne	.+2      	; 0xc796 <_ZN7RlcFile16nextRlcWriteStepEv+0x36>
    c794:	4d c0       	rjmp	.+154    	; 0xc830 <_ZN7RlcFile16nextRlcWriteStepEv+0xd0>
    m_cur_rlc_len = 0;
    write(tmp2, tmp1);
    return;
  }

  bool    run0   = m_rlc_buf[0] == 0;
    c796:	41 e0       	ldi	r20, 0x01	; 1
    c798:	21 11       	cpse	r18, r1
    c79a:	40 e0       	ldi	r20, 0x00	; 0
  do {
    nextRlcWriteStep();
  } while (s_sync_write && m_write_step && !s_write_err);
}

void RlcFile::nextRlcWriteStep()
    c79c:	df 01       	movw	r26, r30
    c79e:	11 96       	adiw	r26, 0x01	; 1
    c7a0:	21 e0       	ldi	r18, 0x01	; 1
    c7a2:	30 e0       	ldi	r19, 0x00	; 0
    c7a4:	70 e0       	ldi	r23, 0x00	; 0
    c7a6:	61 e0       	ldi	r22, 0x01	; 1

  if(m_rlc_len==0) goto close;

  for (i=1; 1; i++) // !! laeuft ein byte zu weit !!
  {
    bool cur0 = m_rlc_buf[i] == 0;
    c7a8:	1d 91       	ld	r17, X+
    c7aa:	51 e0       	ldi	r21, 0x01	; 1
    c7ac:	11 11       	cpse	r17, r1
    c7ae:	50 e0       	ldi	r21, 0x00	; 0
    if (cur0 != run0 || cnt==0x3f || (cnt0 && cnt==0xf)|| i==m_rlc_len){
    c7b0:	54 17       	cp	r21, r20
    c7b2:	49 f4       	brne	.+18     	; 0xc7c6 <_ZN7RlcFile16nextRlcWriteStepEv+0x66>
    c7b4:	6f 33       	cpi	r22, 0x3F	; 63
    c7b6:	39 f0       	breq	.+14     	; 0xc7c6 <_ZN7RlcFile16nextRlcWriteStepEv+0x66>
    c7b8:	77 23       	and	r23, r23
    c7ba:	11 f0       	breq	.+4      	; 0xc7c0 <_ZN7RlcFile16nextRlcWriteStepEv+0x60>
    c7bc:	6f 30       	cpi	r22, 0x0F	; 15
    c7be:	19 f0       	breq	.+6      	; 0xc7c6 <_ZN7RlcFile16nextRlcWriteStepEv+0x66>
    c7c0:	28 17       	cp	r18, r24
    c7c2:	39 07       	cpc	r19, r25
    c7c4:	81 f5       	brne	.+96     	; 0xc826 <_ZN7RlcFile16nextRlcWriteStepEv+0xc6>
      if (run0) {
    c7c6:	44 23       	and	r20, r20
    c7c8:	89 f0       	breq	.+34     	; 0xc7ec <_ZN7RlcFile16nextRlcWriteStepEv+0x8c>
        assert(cnt0==0);
        if (cnt<8 && i!=m_rlc_len)
    c7ca:	68 30       	cpi	r22, 0x08	; 8
    c7cc:	18 f4       	brcc	.+6      	; 0xc7d4 <_ZN7RlcFile16nextRlcWriteStepEv+0x74>
    c7ce:	28 17       	cp	r18, r24
    c7d0:	39 07       	cpc	r19, r25
    c7d2:	39 f5       	brne	.+78     	; 0xc822 <_ZN7RlcFile16nextRlcWriteStepEv+0xc2>
          cnt0 = cnt; //aufbew fuer spaeter
        else {
          m_rlc_buf+=cnt;
    c7d4:	26 2f       	mov	r18, r22
    c7d6:	30 e0       	ldi	r19, 0x00	; 0
    c7d8:	e2 0f       	add	r30, r18
    c7da:	f3 1f       	adc	r31, r19
    c7dc:	fc 87       	std	Y+12, r31	; 0x0c
    c7de:	eb 87       	std	Y+11, r30	; 0x0b
          m_rlc_len-=cnt;
    c7e0:	82 1b       	sub	r24, r18
    c7e2:	93 0b       	sbc	r25, r19
    c7e4:	9a 87       	std	Y+10, r25	; 0x0a
    c7e6:	89 87       	std	Y+9, r24	; 0x09
          write1(cnt|0x40);
    c7e8:	60 64       	ori	r22, 0x40	; 64
    c7ea:	17 c0       	rjmp	.+46     	; 0xc81a <_ZN7RlcFile16nextRlcWriteStepEv+0xba>
          return;
        }
      }
      else{
        m_rlc_buf+=cnt0;
    c7ec:	27 2f       	mov	r18, r23
    c7ee:	30 e0       	ldi	r19, 0x00	; 0
    c7f0:	e2 0f       	add	r30, r18
    c7f2:	f3 1f       	adc	r31, r19
    c7f4:	fc 87       	std	Y+12, r31	; 0x0c
    c7f6:	eb 87       	std	Y+11, r30	; 0x0b
        m_rlc_len-=cnt0+cnt;
    c7f8:	a9 01       	movw	r20, r18
    c7fa:	46 0f       	add	r20, r22
    c7fc:	51 1d       	adc	r21, r1
    c7fe:	84 1b       	sub	r24, r20
    c800:	95 0b       	sbc	r25, r21
    c802:	9a 87       	std	Y+10, r25	; 0x0a
    c804:	89 87       	std	Y+9, r24	; 0x09
        m_cur_rlc_len=cnt;
    c806:	6d 87       	std	Y+13, r22	; 0x0d
        if(cnt0){
    c808:	77 23       	and	r23, r23
    c80a:	39 f0       	breq	.+14     	; 0xc81a <_ZN7RlcFile16nextRlcWriteStepEv+0xba>
          write1(0x80 | (cnt0<<4) | cnt);
    c80c:	60 68       	ori	r22, 0x80	; 128
    c80e:	84 e0       	ldi	r24, 0x04	; 4
    c810:	22 0f       	add	r18, r18
    c812:	33 1f       	adc	r19, r19
    c814:	8a 95       	dec	r24
    c816:	e1 f7       	brne	.-8      	; 0xc810 <_ZN7RlcFile16nextRlcWriteStepEv+0xb0>
    c818:	62 2b       	or	r22, r18
    c81a:	ce 01       	movw	r24, r28
    c81c:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <_ZN7RlcFile6write1Eh>
    c820:	83 c0       	rjmp	.+262    	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>
  {
    bool cur0 = m_rlc_buf[i] == 0;
    if (cur0 != run0 || cnt==0x3f || (cnt0 && cnt==0xf)|| i==m_rlc_len){
      if (run0) {
        assert(cnt0==0);
        if (cnt<8 && i!=m_rlc_len)
    c822:	76 2f       	mov	r23, r22
        else{
          write1(cnt);
        }
        return;
      }
      cnt=0;
    c824:	60 e0       	ldi	r22, 0x00	; 0
      if (i==m_rlc_len) break;
      run0 = cur0;
    }
    cnt++;
    c826:	6f 5f       	subi	r22, 0xFF	; 255

  bool    run0   = m_rlc_buf[0] == 0;

  if(m_rlc_len==0) goto close;

  for (i=1; 1; i++) // !! laeuft ein byte zu weit !!
    c828:	2f 5f       	subi	r18, 0xFF	; 255
    c82a:	3f 4f       	sbci	r19, 0xFF	; 255
    c82c:	45 2f       	mov	r20, r21
    c82e:	bc cf       	rjmp	.-136    	; 0xc7a8 <_ZN7RlcFile16nextRlcWriteStepEv+0x48>
    cnt++;
  }

  close:

   switch(m_write_step) {
    c830:	88 85       	ldd	r24, Y+8	; 0x08
    c832:	80 33       	cpi	r24, 0x30	; 48
    c834:	09 f4       	brne	.+2      	; 0xc838 <_ZN7RlcFile16nextRlcWriteStepEv+0xd8>
    c836:	74 c0       	rjmp	.+232    	; 0xc920 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c0>
    c838:	81 33       	cpi	r24, 0x31	; 49
    c83a:	30 f4       	brcc	.+12     	; 0xc848 <_ZN7RlcFile16nextRlcWriteStepEv+0xe8>
    c83c:	80 31       	cpi	r24, 0x10	; 16
    c83e:	51 f0       	breq	.+20     	; 0xc854 <_ZN7RlcFile16nextRlcWriteStepEv+0xf4>
    c840:	80 32       	cpi	r24, 0x20	; 32
    c842:	09 f0       	breq	.+2      	; 0xc846 <_ZN7RlcFile16nextRlcWriteStepEv+0xe6>
    c844:	71 c0       	rjmp	.+226    	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>
    c846:	65 c0       	rjmp	.+202    	; 0xc912 <_ZN7RlcFile16nextRlcWriteStepEv+0x1b2>
    c848:	80 34       	cpi	r24, 0x40	; 64
    c84a:	f9 f0       	breq	.+62     	; 0xc88a <_ZN7RlcFile16nextRlcWriteStepEv+0x12a>
    c84c:	80 35       	cpi	r24, 0x50	; 80
    c84e:	09 f0       	breq	.+2      	; 0xc852 <_ZN7RlcFile16nextRlcWriteStepEv+0xf2>
    c850:	6b c0       	rjmp	.+214    	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>
    c852:	5a c0       	rjmp	.+180    	; 0xc908 <_ZN7RlcFile16nextRlcWriteStepEv+0x1a8>
     case WRITE_START_STEP:
     {
       uint8_t fri=0;

       if (m_currBlk && ( fri = EeFsGetLink(m_currBlk))) {
    c854:	8b 81       	ldd	r24, Y+3	; 0x03
    c856:	88 23       	and	r24, r24
    c858:	c1 f0       	breq	.+48     	; 0xc88a <_ZN7RlcFile16nextRlcWriteStepEv+0x12a>
    c85a:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c85e:	18 2f       	mov	r17, r24
    c860:	88 23       	and	r24, r24
    c862:	99 f0       	breq	.+38     	; 0xc88a <_ZN7RlcFile16nextRlcWriteStepEv+0x12a>
         uint8_t prev_freeList = eeFs.freeList;
    c864:	00 91 c4 19 	lds	r16, 0x19C4
         eeFs.freeList = fri;
    c868:	80 93 c4 19 	sts	0x19C4, r24
         while( EeFsGetLink(fri)) fri = EeFsGetLink(fri);
    c86c:	04 c0       	rjmp	.+8      	; 0xc876 <_ZN7RlcFile16nextRlcWriteStepEv+0x116>
    c86e:	81 2f       	mov	r24, r17
    c870:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c874:	18 2f       	mov	r17, r24
    c876:	81 2f       	mov	r24, r17
    c878:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c87c:	88 23       	and	r24, r24
    c87e:	b9 f7       	brne	.-18     	; 0xc86e <_ZN7RlcFile16nextRlcWriteStepEv+0x10e>
         m_write_step = WRITE_FREE_UNUSED_BLOCKS_STEP1;
    c880:	80 e2       	ldi	r24, 0x20	; 32
    c882:	88 87       	std	Y+8, r24	; 0x08
         EeFsSetLink(fri, prev_freeList);
    c884:	81 2f       	mov	r24, r17
    c886:	60 2f       	mov	r22, r16
    c888:	48 c0       	rjmp	.+144    	; 0xc91a <_ZN7RlcFile16nextRlcWriteStepEv+0x1ba>
         return;
       }
     }

     case WRITE_FINAL_DIRENT_STEP:
       m_currBlk = eeFs.files[FILE_TMP].startBlk;
    c88a:	80 91 f9 19 	lds	r24, 0x19F9
    c88e:	8b 83       	std	Y+3, r24	; 0x03
       eeFs.files[FILE_TMP].startBlk = eeFs.files[m_fileId].startBlk;
    c890:	88 81       	ld	r24, Y
    c892:	90 e0       	ldi	r25, 0x00	; 0
    c894:	fc 01       	movw	r30, r24
    c896:	ee 0f       	add	r30, r30
    c898:	ff 1f       	adc	r31, r31
    c89a:	e8 0f       	add	r30, r24
    c89c:	f9 1f       	adc	r31, r25
    c89e:	ee 53       	subi	r30, 0x3E	; 62
    c8a0:	f6 4e       	sbci	r31, 0xE6	; 230
    c8a2:	84 81       	ldd	r24, Z+4	; 0x04
    c8a4:	80 93 f9 19 	sts	0x19F9, r24
       eeFs.files[m_fileId].startBlk = m_currBlk;
    c8a8:	88 81       	ld	r24, Y
    c8aa:	90 e0       	ldi	r25, 0x00	; 0
    c8ac:	fc 01       	movw	r30, r24
    c8ae:	ee 0f       	add	r30, r30
    c8b0:	ff 1f       	adc	r31, r31
    c8b2:	e8 0f       	add	r30, r24
    c8b4:	f9 1f       	adc	r31, r25
    c8b6:	ee 53       	subi	r30, 0x3E	; 62
    c8b8:	f6 4e       	sbci	r31, 0xE6	; 230
    c8ba:	8b 81       	ldd	r24, Y+3	; 0x03
    c8bc:	84 83       	std	Z+4, r24	; 0x04
       eeFs.files[m_fileId].size = m_pos;
    c8be:	88 81       	ld	r24, Y
    c8c0:	90 e0       	ldi	r25, 0x00	; 0
    c8c2:	fc 01       	movw	r30, r24
    c8c4:	ee 0f       	add	r30, r30
    c8c6:	ff 1f       	adc	r31, r31
    c8c8:	e8 0f       	add	r30, r24
    c8ca:	f9 1f       	adc	r31, r25
    c8cc:	e9 53       	subi	r30, 0x39	; 57
    c8ce:	f6 4e       	sbci	r31, 0xE6	; 230
    c8d0:	89 81       	ldd	r24, Y+1	; 0x01
    c8d2:	80 83       	st	Z, r24
    c8d4:	9a 81       	ldd	r25, Y+2	; 0x02
    c8d6:	9f 70       	andi	r25, 0x0F	; 15
    c8d8:	81 81       	ldd	r24, Z+1	; 0x01
    c8da:	80 7f       	andi	r24, 0xF0	; 240
    c8dc:	89 2b       	or	r24, r25
    c8de:	81 83       	std	Z+1, r24	; 0x01
       eeFs.files[m_fileId].typ = eeFs.files[FILE_TMP].typ;
    c8e0:	88 81       	ld	r24, Y
    c8e2:	90 e0       	ldi	r25, 0x00	; 0
    c8e4:	fc 01       	movw	r30, r24
    c8e6:	ee 0f       	add	r30, r30
    c8e8:	ff 1f       	adc	r31, r31
    c8ea:	e8 0f       	add	r30, r24
    c8ec:	f9 1f       	adc	r31, r25
    c8ee:	e8 53       	subi	r30, 0x38	; 56
    c8f0:	f6 4e       	sbci	r31, 0xE6	; 230
    c8f2:	90 91 fb 19 	lds	r25, 0x19FB
    c8f6:	90 7f       	andi	r25, 0xF0	; 240
    c8f8:	80 81       	ld	r24, Z
    c8fa:	8f 70       	andi	r24, 0x0F	; 15
    c8fc:	89 2b       	or	r24, r25
    c8fe:	80 83       	st	Z, r24
       m_write_step = WRITE_TMP_DIRENT_STEP;
    c900:	80 e5       	ldi	r24, 0x50	; 80
    c902:	88 87       	std	Y+8, r24	; 0x08
       EeFsFlushDirEnt(m_fileId);
    c904:	88 81       	ld	r24, Y
    c906:	02 c0       	rjmp	.+4      	; 0xc90c <_ZN7RlcFile16nextRlcWriteStepEv+0x1ac>
       return;

     case WRITE_TMP_DIRENT_STEP:
       m_write_step = 0;
    c908:	18 86       	std	Y+8, r1	; 0x08
       EeFsFlushDirEnt(FILE_TMP);
    c90a:	81 e1       	ldi	r24, 0x11	; 17
    c90c:	0e 94 fc 60 	call	0xc1f8	; 0xc1f8 <_ZL15EeFsFlushDirEnth>
       return;
    c910:	0b c0       	rjmp	.+22     	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>

     case WRITE_FREE_UNUSED_BLOCKS_STEP1:
       m_write_step = WRITE_FREE_UNUSED_BLOCKS_STEP2;
    c912:	80 e3       	ldi	r24, 0x30	; 48
    c914:	88 87       	std	Y+8, r24	; 0x08
       EeFsSetLink(m_currBlk, 0);
    c916:	8b 81       	ldd	r24, Y+3	; 0x03
    c918:	60 e0       	ldi	r22, 0x00	; 0
    c91a:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
       return;
    c91e:	04 c0       	rjmp	.+8      	; 0xc928 <_ZN7RlcFile16nextRlcWriteStepEv+0x1c8>

     case WRITE_FREE_UNUSED_BLOCKS_STEP2:
       m_write_step = WRITE_FINAL_DIRENT_STEP;
    c920:	80 e4       	ldi	r24, 0x40	; 64
    c922:	88 87       	std	Y+8, r24	; 0x08
       EeFsFlushFreelist();
    c924:	0e 94 21 61 	call	0xc242	; 0xc242 <_ZL17EeFsFlushFreelistv>
       return;
   }
}
    c928:	df 91       	pop	r29
    c92a:	cf 91       	pop	r28
    c92c:	1f 91       	pop	r17
    c92e:	0f 91       	pop	r16
    c930:	08 95       	ret

0000c932 <_ZN7RlcFile8writeRlcEhhPhjh>:
  // s_sync_write is set to false in swap();
  return true;
}

void RlcFile::writeRlc(uint8_t i_fileId, uint8_t typ, uint8_t*buf, uint16_t i_len, uint8_t sync_write)
{
    c932:	cf 92       	push	r12
    c934:	df 92       	push	r13
    c936:	ef 92       	push	r14
    c938:	ff 92       	push	r15
    c93a:	0f 93       	push	r16
    c93c:	1f 93       	push	r17
    c93e:	cf 93       	push	r28
    c940:	df 93       	push	r29
    c942:	ec 01       	movw	r28, r24
    c944:	f4 2e       	mov	r15, r20
    c946:	69 01       	movw	r12, r18
    c948:	2e 2d       	mov	r18, r14
  create(i_fileId, typ, sync_write);
    c94a:	0e 94 8c 63 	call	0xc718	; 0xc718 <_ZN7RlcFile6createEhhh>

  m_write_step = WRITE_START_STEP;
    c94e:	80 e1       	ldi	r24, 0x10	; 16
    c950:	88 87       	std	Y+8, r24	; 0x08
  m_rlc_buf = buf;
    c952:	dc 86       	std	Y+12, r13	; 0x0c
    c954:	cb 86       	std	Y+11, r12	; 0x0b
  m_rlc_len = i_len;
    c956:	1a 87       	std	Y+10, r17	; 0x0a
    c958:	09 87       	std	Y+9, r16	; 0x09
  m_cur_rlc_len = 0;
    c95a:	1d 86       	std	Y+13, r1	; 0x0d
#if defined (PROGRESS_CIRCLE)
  m_ratio = (typ == FILE_TYP_MODEL ? 60 : 6);
#elif defined (PROGRESS_VERTICAL_BAR)
  m_ratio = (typ == FILE_TYP_MODEL ? 100 : 10);
    c95c:	8f 2d       	mov	r24, r15
    c95e:	82 30       	cpi	r24, 0x02	; 2
    c960:	11 f4       	brne	.+4      	; 0xc966 <_ZN7RlcFile8writeRlcEhhPhjh+0x34>
    c962:	84 e6       	ldi	r24, 0x64	; 100
    c964:	01 c0       	rjmp	.+2      	; 0xc968 <_ZN7RlcFile8writeRlcEhhPhjh+0x36>
    c966:	8a e0       	ldi	r24, 0x0A	; 10
    c968:	8a 8b       	std	Y+18, r24	; 0x12
#endif

  do {
    nextRlcWriteStep();
    c96a:	ce 01       	movw	r24, r28
    c96c:	0e 94 b0 63 	call	0xc760	; 0xc760 <_ZN7RlcFile16nextRlcWriteStepEv>
  m_ratio = (typ == FILE_TYP_MODEL ? 60 : 6);
#elif defined (PROGRESS_VERTICAL_BAR)
  m_ratio = (typ == FILE_TYP_MODEL ? 100 : 10);
#endif

  do {
    c970:	80 91 c1 19 	lds	r24, 0x19C1
    c974:	88 23       	and	r24, r24
    c976:	39 f0       	breq	.+14     	; 0xc986 <_ZN7RlcFile8writeRlcEhhPhjh+0x54>
    c978:	88 85       	ldd	r24, Y+8	; 0x08
    c97a:	88 23       	and	r24, r24
    c97c:	21 f0       	breq	.+8      	; 0xc986 <_ZN7RlcFile8writeRlcEhhPhjh+0x54>
    c97e:	80 91 c0 19 	lds	r24, 0x19C0
    c982:	88 23       	and	r24, r24
    c984:	91 f3       	breq	.-28     	; 0xc96a <_ZN7RlcFile8writeRlcEhhPhjh+0x38>
    nextRlcWriteStep();
  } while (s_sync_write && m_write_step && !s_write_err);
}
    c986:	df 91       	pop	r29
    c988:	cf 91       	pop	r28
    c98a:	1f 91       	pop	r17
    c98c:	0f 91       	pop	r16
    c98e:	ff 90       	pop	r15
    c990:	ef 90       	pop	r14
    c992:	df 90       	pop	r13
    c994:	cf 90       	pop	r12
    c996:	08 95       	ret

0000c998 <_ZN7RlcFile13nextWriteStepEv>:
    nextWriteStep();
  } while (s_sync_write && m_write_len && !s_write_err);
}

void RlcFile::nextWriteStep()
{
    c998:	cf 93       	push	r28
    c99a:	df 93       	push	r29
    c99c:	ec 01       	movw	r28, r24
  if (!m_currBlk && m_pos==0) {
    c99e:	8b 81       	ldd	r24, Y+3	; 0x03
    c9a0:	88 23       	and	r24, r24
    c9a2:	99 f4       	brne	.+38     	; 0xc9ca <_ZN7RlcFile13nextWriteStepEv+0x32>
    c9a4:	89 81       	ldd	r24, Y+1	; 0x01
    c9a6:	9a 81       	ldd	r25, Y+2	; 0x02
    c9a8:	00 97       	sbiw	r24, 0x00	; 0
    c9aa:	79 f4       	brne	.+30     	; 0xc9ca <_ZN7RlcFile13nextWriteStepEv+0x32>
    eeFs.files[FILE_TMP].startBlk = m_currBlk = eeFs.freeList;
    c9ac:	80 91 c4 19 	lds	r24, 0x19C4
    c9b0:	8b 83       	std	Y+3, r24	; 0x03
    c9b2:	80 93 f9 19 	sts	0x19F9, r24
    if (m_currBlk) {
    c9b6:	8b 81       	ldd	r24, Y+3	; 0x03
    c9b8:	88 23       	and	r24, r24
    c9ba:	39 f0       	breq	.+14     	; 0xc9ca <_ZN7RlcFile13nextWriteStepEv+0x32>
      eeFs.freeList = EeFsGetLink(m_currBlk);
    c9bc:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    c9c0:	80 93 c4 19 	sts	0x19C4, r24
      m_write_step |= WRITE_FIRST_LINK;
    c9c4:	88 85       	ldd	r24, Y+8	; 0x08
    c9c6:	81 60       	ori	r24, 0x01	; 1
    c9c8:	35 c0       	rjmp	.+106    	; 0xca34 <_ZN7RlcFile13nextWriteStepEv+0x9c>
      EeFsFlushFreelist();
      return;
    }
  }

  if ((m_write_step & 0x0f) == WRITE_FIRST_LINK) {
    c9ca:	88 85       	ldd	r24, Y+8	; 0x08
    c9cc:	98 2f       	mov	r25, r24
    c9ce:	9f 70       	andi	r25, 0x0F	; 15
    c9d0:	91 30       	cpi	r25, 0x01	; 1
    c9d2:	09 f0       	breq	.+2      	; 0xc9d6 <_ZN7RlcFile13nextWriteStepEv+0x3e>
    c9d4:	68 c0       	rjmp	.+208    	; 0xcaa6 <_ZN7RlcFile13nextWriteStepEv+0x10e>
    m_write_step -= WRITE_FIRST_LINK;
    c9d6:	81 50       	subi	r24, 0x01	; 1
    c9d8:	88 87       	std	Y+8, r24	; 0x08
    c9da:	32 c0       	rjmp	.+100    	; 0xca40 <_ZN7RlcFile13nextWriteStepEv+0xa8>
    EeFsSetLink(m_currBlk, 0);
    return;
  }

  while (m_write_len) {
    if (!m_currBlk) {
    c9dc:	8b 81       	ldd	r24, Y+3	; 0x03
    c9de:	88 23       	and	r24, r24
    c9e0:	a9 f1       	breq	.+106    	; 0xca4c <_ZN7RlcFile13nextWriteStepEv+0xb4>
      s_write_err = ERR_FULL;
      break;
    }
    if (m_ofs >= (BS-1)) {
    c9e2:	9c 81       	ldd	r25, Y+4	; 0x04
    c9e4:	9f 30       	cpi	r25, 0x0F	; 15
    c9e6:	88 f0       	brcs	.+34     	; 0xca0a <_ZN7RlcFile13nextWriteStepEv+0x72>
      m_ofs = 0;
    c9e8:	1c 82       	std	Y+4, r1	; 0x04
      uint8_t nextBlk = EeFsGetLink(m_currBlk);
    c9ea:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
      if (!nextBlk) {
    c9ee:	88 23       	and	r24, r24
    c9f0:	59 f4       	brne	.+22     	; 0xca08 <_ZN7RlcFile13nextWriteStepEv+0x70>
        if (!eeFs.freeList) {
    c9f2:	60 91 c4 19 	lds	r22, 0x19C4
    c9f6:	66 23       	and	r22, r22
    c9f8:	49 f1       	breq	.+82     	; 0xca4c <_ZN7RlcFile13nextWriteStepEv+0xb4>
          s_write_err = ERR_FULL;
          break;
        }
        m_write_step += WRITE_NEXT_LINK_1; // TODO review all these names
    c9fa:	88 85       	ldd	r24, Y+8	; 0x08
    c9fc:	8e 5f       	subi	r24, 0xFE	; 254
    c9fe:	88 87       	std	Y+8, r24	; 0x08
        EeFsSetLink(m_currBlk, eeFs.freeList);
    ca00:	8b 81       	ldd	r24, Y+3	; 0x03
    ca02:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>
        return;
    ca06:	65 c0       	rjmp	.+202    	; 0xcad2 <_ZN7RlcFile13nextWriteStepEv+0x13a>
      }
      m_currBlk = nextBlk;
    ca08:	8b 83       	std	Y+3, r24	; 0x03
    }
    switch (m_write_step & 0x0f) {
    ca0a:	28 85       	ldd	r18, Y+8	; 0x08
    ca0c:	82 2f       	mov	r24, r18
    ca0e:	90 e0       	ldi	r25, 0x00	; 0
    ca10:	8f 70       	andi	r24, 0x0F	; 15
    ca12:	90 70       	andi	r25, 0x00	; 0
    ca14:	82 30       	cpi	r24, 0x02	; 2
    ca16:	91 05       	cpc	r25, r1
    ca18:	21 f0       	breq	.+8      	; 0xca22 <_ZN7RlcFile13nextWriteStepEv+0x8a>
    ca1a:	83 30       	cpi	r24, 0x03	; 3
    ca1c:	91 05       	cpc	r25, r1
    ca1e:	99 f4       	brne	.+38     	; 0xca46 <_ZN7RlcFile13nextWriteStepEv+0xae>
    ca20:	0d c0       	rjmp	.+26     	; 0xca3c <_ZN7RlcFile13nextWriteStepEv+0xa4>
      case WRITE_NEXT_LINK_1:
        m_currBlk = eeFs.freeList;
    ca22:	80 91 c4 19 	lds	r24, 0x19C4
    ca26:	8b 83       	std	Y+3, r24	; 0x03
        eeFs.freeList = EeFsGetLink(eeFs.freeList);
    ca28:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    ca2c:	80 93 c4 19 	sts	0x19C4, r24
        m_write_step += 1;
    ca30:	88 85       	ldd	r24, Y+8	; 0x08
    ca32:	8f 5f       	subi	r24, 0xFF	; 255
    ca34:	88 87       	std	Y+8, r24	; 0x08
        EeFsFlushFreelist();
    ca36:	0e 94 21 61 	call	0xc242	; 0xc242 <_ZL17EeFsFlushFreelistv>
        return;
    ca3a:	4b c0       	rjmp	.+150    	; 0xcad2 <_ZN7RlcFile13nextWriteStepEv+0x13a>
      case WRITE_NEXT_LINK_2:
        m_write_step -= WRITE_NEXT_LINK_2;
    ca3c:	23 50       	subi	r18, 0x03	; 3
    ca3e:	28 87       	std	Y+8, r18	; 0x08
        EeFsSetLink(m_currBlk, 0); // TODO needed?
    ca40:	8b 81       	ldd	r24, Y+3	; 0x03
    ca42:	60 e0       	ldi	r22, 0x00	; 0
    ca44:	de cf       	rjmp	.-68     	; 0xca02 <_ZN7RlcFile13nextWriteStepEv+0x6a>
        return;
    }
    if (!m_currBlk) { // TODO needed?
    ca46:	6b 81       	ldd	r22, Y+3	; 0x03
    ca48:	66 23       	and	r22, r22
    ca4a:	21 f4       	brne	.+8      	; 0xca54 <_ZN7RlcFile13nextWriteStepEv+0xbc>
      s_write_err = ERR_FULL;
    ca4c:	81 e0       	ldi	r24, 0x01	; 1
    ca4e:	80 93 c0 19 	sts	0x19C0, r24
      break;
    ca52:	2d c0       	rjmp	.+90     	; 0xcaae <_ZN7RlcFile13nextWriteStepEv+0x116>
    }
    uint8_t tmp = BS-1-m_ofs; if(tmp>m_write_len) tmp=m_write_len;
    ca54:	fc 81       	ldd	r31, Y+4	; 0x04
    ca56:	ef e0       	ldi	r30, 0x0F	; 15
    ca58:	2f 85       	ldd	r18, Y+15	; 0x0f
    ca5a:	ef 1b       	sub	r30, r31
    ca5c:	2e 17       	cp	r18, r30
    ca5e:	08 f4       	brcc	.+2      	; 0xca62 <_ZN7RlcFile13nextWriteStepEv+0xca>
    ca60:	e2 2f       	mov	r30, r18
    m_write_buf += tmp;
    ca62:	4e 2f       	mov	r20, r30
    ca64:	50 e0       	ldi	r21, 0x00	; 0
    ca66:	88 89       	ldd	r24, Y+16	; 0x10
    ca68:	99 89       	ldd	r25, Y+17	; 0x11
    ca6a:	84 0f       	add	r24, r20
    ca6c:	95 1f       	adc	r25, r21
    ca6e:	99 8b       	std	Y+17, r25	; 0x11
    ca70:	88 8b       	std	Y+16, r24	; 0x10
    m_write_len -= tmp;
    ca72:	2e 1b       	sub	r18, r30
    ca74:	2f 87       	std	Y+15, r18	; 0x0f
    m_ofs += tmp;
    ca76:	fe 0f       	add	r31, r30
    ca78:	fc 83       	std	Y+4, r31	; 0x04
    m_pos += tmp;
    ca7a:	29 81       	ldd	r18, Y+1	; 0x01
    ca7c:	3a 81       	ldd	r19, Y+2	; 0x02
    ca7e:	24 0f       	add	r18, r20
    ca80:	35 1f       	adc	r19, r21
    ca82:	3a 83       	std	Y+2, r19	; 0x02
    ca84:	29 83       	std	Y+1, r18	; 0x01
  return EeFsRead(blk, ofs+1);
}

static void EeFsSetDat(uint8_t blk,uint8_t ofs,uint8_t*buf,uint8_t len)
{
  eeWriteBlockCmp(buf, blk*BS+ofs+1, len);
    ca86:	70 e0       	ldi	r23, 0x00	; 0
    ca88:	24 e0       	ldi	r18, 0x04	; 4
    ca8a:	66 0f       	add	r22, r22
    ca8c:	77 1f       	adc	r23, r23
    ca8e:	2a 95       	dec	r18
    ca90:	e1 f7       	brne	.-8      	; 0xca8a <_ZN7RlcFile13nextWriteStepEv+0xf2>
    ca92:	6f 5f       	subi	r22, 0xFF	; 255
    ca94:	7f 4f       	sbci	r23, 0xFF	; 255
    uint8_t tmp = BS-1-m_ofs; if(tmp>m_write_len) tmp=m_write_len;
    m_write_buf += tmp;
    m_write_len -= tmp;
    m_ofs += tmp;
    m_pos += tmp;
    EeFsSetDat(m_currBlk, m_ofs-tmp, m_write_buf-tmp, tmp);
    ca96:	fe 1b       	sub	r31, r30
  return EeFsRead(blk, ofs+1);
}

static void EeFsSetDat(uint8_t blk,uint8_t ofs,uint8_t*buf,uint8_t len)
{
  eeWriteBlockCmp(buf, blk*BS+ofs+1, len);
    ca98:	6f 0f       	add	r22, r31
    ca9a:	71 1d       	adc	r23, r1
    ca9c:	84 1b       	sub	r24, r20
    ca9e:	95 0b       	sbc	r25, r21
    caa0:	0e 94 51 6d 	call	0xdaa2	; 0xdaa2 <_Z15eeWriteBlockCmpPKvjj>
    caa4:	16 c0       	rjmp	.+44     	; 0xcad2 <_ZN7RlcFile13nextWriteStepEv+0x13a>
    m_write_step -= WRITE_FIRST_LINK;
    EeFsSetLink(m_currBlk, 0);
    return;
  }

  while (m_write_len) {
    caa6:	8f 85       	ldd	r24, Y+15	; 0x0f
    caa8:	88 23       	and	r24, r24
    caaa:	09 f0       	breq	.+2      	; 0xcaae <_ZN7RlcFile13nextWriteStepEv+0x116>
    caac:	97 cf       	rjmp	.-210    	; 0xc9dc <_ZN7RlcFile13nextWriteStepEv+0x44>
    m_pos += tmp;
    EeFsSetDat(m_currBlk, m_ofs-tmp, m_write_buf-tmp, tmp);
    return;
  }

  if (s_write_err == ERR_FULL) {
    caae:	80 91 c0 19 	lds	r24, 0x19C0
    cab2:	81 30       	cpi	r24, 0x01	; 1
    cab4:	39 f4       	brne	.+14     	; 0xcac4 <_ZN7RlcFile13nextWriteStepEv+0x12c>
    alert(PSTR("EEPROM overflow"));
    cab6:	83 eb       	ldi	r24, 0xB3	; 179
    cab8:	9a e0       	ldi	r25, 0x0A	; 10
    caba:	60 e0       	ldi	r22, 0x00	; 0
    cabc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <_Z5alertPKcb>
    m_write_step = 0;
    cac0:	18 86       	std	Y+8, r1	; 0x08
    m_write_len = 0;
    cac2:	1f 86       	std	Y+15, r1	; 0x0f
  }

  if (!s_sync_write)
    cac4:	80 91 c1 19 	lds	r24, 0x19C1
    cac8:	88 23       	and	r24, r24
    caca:	19 f4       	brne	.+6      	; 0xcad2 <_ZN7RlcFile13nextWriteStepEv+0x13a>
    nextRlcWriteStep();
    cacc:	ce 01       	movw	r24, r28
    cace:	0e 94 b0 63 	call	0xc760	; 0xc760 <_ZN7RlcFile16nextRlcWriteStepEv>
}
    cad2:	df 91       	pop	r29
    cad4:	cf 91       	pop	r28
    cad6:	08 95       	ret

0000cad8 <_ZN7RlcFile5writeEPhh>:
  m_write1_byte = b;
  write(&m_write1_byte, 1);
}

void RlcFile::write(uint8_t *buf, uint8_t i_len)
{
    cad8:	cf 93       	push	r28
    cada:	df 93       	push	r29
    cadc:	ec 01       	movw	r28, r24
  m_write_len = i_len;
    cade:	4f 87       	std	Y+15, r20	; 0x0f
  m_write_buf = buf;
    cae0:	79 8b       	std	Y+17, r23	; 0x11
    cae2:	68 8b       	std	Y+16, r22	; 0x10

  do {
    nextWriteStep();
    cae4:	ce 01       	movw	r24, r28
    cae6:	0e 94 cc 64 	call	0xc998	; 0xc998 <_ZN7RlcFile13nextWriteStepEv>
void RlcFile::write(uint8_t *buf, uint8_t i_len)
{
  m_write_len = i_len;
  m_write_buf = buf;

  do {
    caea:	80 91 c1 19 	lds	r24, 0x19C1
    caee:	88 23       	and	r24, r24
    caf0:	39 f0       	breq	.+14     	; 0xcb00 <_ZN7RlcFile5writeEPhh+0x28>
    caf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    caf4:	88 23       	and	r24, r24
    caf6:	21 f0       	breq	.+8      	; 0xcb00 <_ZN7RlcFile5writeEPhh+0x28>
    caf8:	80 91 c0 19 	lds	r24, 0x19C0
    cafc:	88 23       	and	r24, r24
    cafe:	91 f3       	breq	.-28     	; 0xcae4 <_ZN7RlcFile5writeEPhh+0xc>
    nextWriteStep();
  } while (s_sync_write && m_write_len && !s_write_err);
}
    cb00:	df 91       	pop	r29
    cb02:	cf 91       	pop	r28
    cb04:	08 95       	ret

0000cb06 <_ZN7RlcFile4copyEhh>:

/*
 * Copy file src to dst
 */
bool RlcFile::copy(uint8_t i_fileDst, uint8_t i_fileSrc)
{
    cb06:	bf 92       	push	r11
    cb08:	cf 92       	push	r12
    cb0a:	df 92       	push	r13
    cb0c:	ef 92       	push	r14
    cb0e:	ff 92       	push	r15
    cb10:	0f 93       	push	r16
    cb12:	1f 93       	push	r17
    cb14:	df 93       	push	r29
    cb16:	cf 93       	push	r28
    cb18:	cd b7       	in	r28, 0x3d	; 61
    cb1a:	de b7       	in	r29, 0x3e	; 62
    cb1c:	64 97       	sbiw	r28, 0x14	; 20
    cb1e:	0f b6       	in	r0, 0x3f	; 63
    cb20:	f8 94       	cli
    cb22:	de bf       	out	0x3e, r29	; 62
    cb24:	0f be       	out	0x3f, r0	; 63
    cb26:	cd bf       	out	0x3d, r28	; 61
    cb28:	8c 01       	movw	r16, r24
    cb2a:	c6 2e       	mov	r12, r22
  EFile theFile2;
  theFile2.openRd(i_fileSrc);
    cb2c:	7e 01       	movw	r14, r28
    cb2e:	08 94       	sec
    cb30:	e1 1c       	adc	r14, r1
    cb32:	f1 1c       	adc	r15, r1
    cb34:	c7 01       	movw	r24, r14
    cb36:	64 2f       	mov	r22, r20
    cb38:	0e 94 98 62 	call	0xc530	; 0xc530 <_ZN5EFile6openRdEh>

  create(i_fileDst, FILE_TYP_MODEL/*optimization, only model files are copied. should be eeFs.files[i_fileSrc].typ*/, true);
    cb3c:	c8 01       	movw	r24, r16
    cb3e:	6c 2d       	mov	r22, r12
    cb40:	42 e0       	ldi	r20, 0x02	; 2
    cb42:	21 e0       	ldi	r18, 0x01	; 1
    cb44:	0e 94 8c 63 	call	0xc718	; 0xc718 <_ZN7RlcFile6createEhhh>
  uint8_t buf[15];
  uint8_t len;
  while ((len=theFile2.read(buf, 15)))
    cb48:	36 e0       	ldi	r19, 0x06	; 6
    cb4a:	c3 2e       	mov	r12, r19
    cb4c:	d1 2c       	mov	r13, r1
    cb4e:	cc 0e       	add	r12, r28
    cb50:	dd 1e       	adc	r13, r29
    cb52:	be 2c       	mov	r11, r14
    cb54:	ef 2c       	mov	r14, r15
    cb56:	0c c0       	rjmp	.+24     	; 0xcb70 <_ZN7RlcFile4copyEhh+0x6a>
  {
    write(buf, len);
    cb58:	c8 01       	movw	r24, r16
    cb5a:	b6 01       	movw	r22, r12
    cb5c:	0e 94 6c 65 	call	0xcad8	; 0xcad8 <_ZN7RlcFile5writeEPhh>
    if (write_errno() != 0) {
    cb60:	80 91 c0 19 	lds	r24, 0x19C0
    cb64:	88 23       	and	r24, r24
    cb66:	21 f0       	breq	.+8      	; 0xcb70 <_ZN7RlcFile4copyEhh+0x6a>
      s_sync_write = false;
    cb68:	10 92 c1 19 	sts	0x19C1, r1
      return false;
    cb6c:	80 e0       	ldi	r24, 0x00	; 0
    cb6e:	2c c0       	rjmp	.+88     	; 0xcbc8 <_ZN7RlcFile4copyEhh+0xc2>
  theFile2.openRd(i_fileSrc);

  create(i_fileDst, FILE_TYP_MODEL/*optimization, only model files are copied. should be eeFs.files[i_fileSrc].typ*/, true);
  uint8_t buf[15];
  uint8_t len;
  while ((len=theFile2.read(buf, 15)))
    cb70:	8b 2d       	mov	r24, r11
    cb72:	9e 2d       	mov	r25, r14
    cb74:	b6 01       	movw	r22, r12
    cb76:	4f e0       	ldi	r20, 0x0F	; 15
    cb78:	50 e0       	ldi	r21, 0x00	; 0
    cb7a:	0e 94 b6 62 	call	0xc56c	; 0xc56c <_ZN5EFile4readEPhj>
    cb7e:	48 2f       	mov	r20, r24
    cb80:	88 23       	and	r24, r24
    cb82:	51 f7       	brne	.-44     	; 0xcb58 <_ZN7RlcFile4copyEhh+0x52>
      return false;
    }
  }

  uint8_t fri=0;
  if (m_currBlk && (fri=EeFsGetLink(m_currBlk)))
    cb84:	f8 01       	movw	r30, r16
    cb86:	83 81       	ldd	r24, Z+3	; 0x03
    cb88:	88 23       	and	r24, r24
    cb8a:	69 f0       	breq	.+26     	; 0xcba6 <_ZN7RlcFile4copyEhh+0xa0>
    cb8c:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <_ZL11EeFsGetLinkh>
    cb90:	e8 2e       	mov	r14, r24
    cb92:	88 23       	and	r24, r24
    cb94:	41 f0       	breq	.+16     	; 0xcba6 <_ZN7RlcFile4copyEhh+0xa0>
    EeFsSetLink(m_currBlk, 0);
    cb96:	f8 01       	movw	r30, r16
    cb98:	83 81       	ldd	r24, Z+3	; 0x03
    cb9a:	60 e0       	ldi	r22, 0x00	; 0
    cb9c:	0e 94 11 61 	call	0xc222	; 0xc222 <_ZL11EeFsSetLinkhh>

  if (fri) EeFsFree(fri);  //chain in
    cba0:	8e 2d       	mov	r24, r14
    cba2:	0e 94 2a 61 	call	0xc254	; 0xc254 <_ZL8EeFsFreeh>

  eeFs.files[FILE_TMP].size = m_pos;
    cba6:	f8 01       	movw	r30, r16
    cba8:	81 81       	ldd	r24, Z+1	; 0x01
    cbaa:	80 93 fa 19 	sts	0x19FA, r24
    cbae:	92 81       	ldd	r25, Z+2	; 0x02
    cbb0:	9f 70       	andi	r25, 0x0F	; 15
    cbb2:	80 91 fb 19 	lds	r24, 0x19FB
    cbb6:	80 7f       	andi	r24, 0xF0	; 240
    cbb8:	89 2b       	or	r24, r25
    cbba:	80 93 fb 19 	sts	0x19FB, r24
  EFile::swap(m_fileId, FILE_TMP);
    cbbe:	80 81       	ld	r24, Z
    cbc0:	61 e1       	ldi	r22, 0x11	; 17
    cbc2:	0e 94 1d 62 	call	0xc43a	; 0xc43a <_ZN5EFile4swapEhh>

  assert(!m_write_step);

  // s_sync_write is set to false in swap();
  return true;
    cbc6:	81 e0       	ldi	r24, 0x01	; 1
}
    cbc8:	64 96       	adiw	r28, 0x14	; 20
    cbca:	0f b6       	in	r0, 0x3f	; 63
    cbcc:	f8 94       	cli
    cbce:	de bf       	out	0x3e, r29	; 62
    cbd0:	0f be       	out	0x3f, r0	; 63
    cbd2:	cd bf       	out	0x3d, r28	; 61
    cbd4:	cf 91       	pop	r28
    cbd6:	df 91       	pop	r29
    cbd8:	1f 91       	pop	r17
    cbda:	0f 91       	pop	r16
    cbdc:	ff 90       	pop	r15
    cbde:	ef 90       	pop	r14
    cbe0:	df 90       	pop	r13
    cbe2:	cf 90       	pop	r12
    cbe4:	bf 90       	pop	r11
    cbe6:	08 95       	ret

0000cbe8 <_ZN7RlcFile6write1Eh>:
  return i;
}

void RlcFile::write1(uint8_t b)
{
  m_write1_byte = b;
    cbe8:	fc 01       	movw	r30, r24
    cbea:	66 87       	std	Z+14, r22	; 0x0e
  write(&m_write1_byte, 1);
    cbec:	bc 01       	movw	r22, r24
    cbee:	62 5f       	subi	r22, 0xF2	; 242
    cbf0:	7f 4f       	sbci	r23, 0xFF	; 255
    cbf2:	41 e0       	ldi	r20, 0x01	; 1
    cbf4:	0e 94 6c 65 	call	0xcad8	; 0xcad8 <_ZN7RlcFile5writeEPhh>
}
    cbf8:	08 95       	ret

0000cbfa <_ZN7RlcFile5flushEv>:
       return;
   }
}

void RlcFile::flush()
{
    cbfa:	cf 93       	push	r28
    cbfc:	df 93       	push	r29
    cbfe:	ec 01       	movw	r28, r24
  while (eeprom_buffer_size > 0) wdt_reset();
    cc00:	01 c0       	rjmp	.+2      	; 0xcc04 <_ZN7RlcFile5flushEv+0xa>
    cc02:	a8 95       	wdr
    cc04:	80 91 07 1f 	lds	r24, 0x1F07
    cc08:	18 16       	cp	r1, r24
    cc0a:	dc f3       	brlt	.-10     	; 0xcc02 <_ZN7RlcFile5flushEv+0x8>

  s_sync_write = true;
    cc0c:	81 e0       	ldi	r24, 0x01	; 1
    cc0e:	80 93 c1 19 	sts	0x19C1, r24
  while (m_write_len && !s_write_err)
    cc12:	8f 85       	ldd	r24, Y+15	; 0x0f
    cc14:	88 23       	and	r24, r24
    cc16:	41 f0       	breq	.+16     	; 0xcc28 <_ZN7RlcFile5flushEv+0x2e>
    cc18:	80 91 c0 19 	lds	r24, 0x19C0
    cc1c:	88 23       	and	r24, r24
    cc1e:	21 f4       	brne	.+8      	; 0xcc28 <_ZN7RlcFile5flushEv+0x2e>
    nextWriteStep();
    cc20:	ce 01       	movw	r24, r28
    cc22:	0e 94 cc 64 	call	0xc998	; 0xc998 <_ZN7RlcFile13nextWriteStepEv>
    cc26:	f5 cf       	rjmp	.-22     	; 0xcc12 <_ZN7RlcFile5flushEv+0x18>
  while (isWriting() && !s_write_err)
    cc28:	88 85       	ldd	r24, Y+8	; 0x08
    cc2a:	88 23       	and	r24, r24
    cc2c:	41 f0       	breq	.+16     	; 0xcc3e <_ZN7RlcFile5flushEv+0x44>
    cc2e:	80 91 c0 19 	lds	r24, 0x19C0
    cc32:	88 23       	and	r24, r24
    cc34:	21 f4       	brne	.+8      	; 0xcc3e <_ZN7RlcFile5flushEv+0x44>
    nextRlcWriteStep();
    cc36:	ce 01       	movw	r24, r28
    cc38:	0e 94 b0 63 	call	0xc760	; 0xc760 <_ZN7RlcFile16nextRlcWriteStepEv>
    cc3c:	f5 cf       	rjmp	.-22     	; 0xcc28 <_ZN7RlcFile5flushEv+0x2e>
  s_sync_write = false;
    cc3e:	10 92 c1 19 	sts	0x19C1, r1
}
    cc42:	df 91       	pop	r29
    cc44:	cf 91       	pop	r28
    cc46:	08 95       	ret

0000cc48 <_ZN7RlcFile18DisplayProgressBarEh>:

void RlcFile::DisplayProgressBar(uint8_t x)
{
    cc48:	0f 93       	push	r16
    cc4a:	cf 93       	push	r28
    cc4c:	df 93       	push	r29
    cc4e:	fc 01       	movw	r30, r24
    cc50:	c6 2f       	mov	r28, r22
  if (s_eeDirtyMsk || isWriting() || eeprom_buffer_size) {
    cc52:	80 91 bf 19 	lds	r24, 0x19BF
    cc56:	88 23       	and	r24, r24
    cc58:	99 f4       	brne	.+38     	; 0xcc80 <_ZN7RlcFile18DisplayProgressBarEh+0x38>
    cc5a:	80 85       	ldd	r24, Z+8	; 0x08
    cc5c:	88 23       	and	r24, r24
    cc5e:	21 f4       	brne	.+8      	; 0xcc68 <_ZN7RlcFile18DisplayProgressBarEh+0x20>
    cc60:	80 91 07 1f 	lds	r24, 0x1F07
    cc64:	88 23       	and	r24, r24
    cc66:	01 f1       	breq	.+64     	; 0xcca8 <_ZN7RlcFile18DisplayProgressBarEh+0x60>
          lcd_vline(x, 5, -min(3, len-9));
        }
      }
    }
#elif defined (PROGRESS_VERTICAL_BAR)
    uint8_t len = s_eeDirtyMsk ? 1 : limit((uint8_t)1, (uint8_t)(7 - (m_rlc_len/m_ratio)), (uint8_t)7);
    cc68:	62 89       	ldd	r22, Z+18	; 0x12
    cc6a:	81 85       	ldd	r24, Z+9	; 0x09
    cc6c:	92 85       	ldd	r25, Z+10	; 0x0a
    cc6e:	70 e0       	ldi	r23, 0x00	; 0
    cc70:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    cc74:	d7 e0       	ldi	r29, 0x07	; 7
    cc76:	d6 1b       	sub	r29, r22
/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
/// liefert das Maximum der Argumente
template<class t> FORCEINLINE t max(t a, t b) { return a>b?a:b; }
    cc78:	19 f0       	breq	.+6      	; 0xcc80 <_ZN7RlcFile18DisplayProgressBarEh+0x38>
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
/// liefert das Minimum der Argumente
template<class t> FORCEINLINE t min(t a, t b) { return a<b?a:b; }
    cc7a:	d7 30       	cpi	r29, 0x07	; 7
    cc7c:	18 f4       	brcc	.+6      	; 0xcc84 <_ZN7RlcFile18DisplayProgressBarEh+0x3c>
    cc7e:	03 c0       	rjmp	.+6      	; 0xcc86 <_ZN7RlcFile18DisplayProgressBarEh+0x3e>
    cc80:	d1 e0       	ldi	r29, 0x01	; 1
    cc82:	01 c0       	rjmp	.+2      	; 0xcc86 <_ZN7RlcFile18DisplayProgressBarEh+0x3e>
    cc84:	d7 e0       	ldi	r29, 0x07	; 7
    lcd_filled_rect(x+1, 0, 5, FH, WHITE);
    cc86:	8c 2f       	mov	r24, r28
    cc88:	8f 5f       	subi	r24, 0xFF	; 255
    cc8a:	60 e0       	ldi	r22, 0x00	; 0
    cc8c:	45 e0       	ldi	r20, 0x05	; 5
    cc8e:	28 e0       	ldi	r18, 0x08	; 8
    cc90:	04 e0       	ldi	r16, 0x04	; 4
    cc92:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
    lcd_filled_rect(x+2, 7-len, 3, len);
    cc96:	67 e0       	ldi	r22, 0x07	; 7
    cc98:	6d 1b       	sub	r22, r29
    cc9a:	8c 2f       	mov	r24, r28
    cc9c:	8e 5f       	subi	r24, 0xFE	; 254
    cc9e:	43 e0       	ldi	r20, 0x03	; 3
    cca0:	2d 2f       	mov	r18, r29
    cca2:	00 e0       	ldi	r16, 0x00	; 0
    cca4:	0e 94 80 6a 	call	0xd500	; 0xd500 <_Z15lcd_filled_recthahhh>
#elif defined (PROGRESS_FIXED_CIRCLE)
    lcd_square(x, 1, 5);
#endif
  }
}
    cca8:	df 91       	pop	r29
    ccaa:	cf 91       	pop	r28
    ccac:	0f 91       	pop	r16
    ccae:	08 95       	ret

0000ccb0 <_Z9lcd_clearv>:
uint8_t lcd_buf[DISPLAY_W*DISPLAY_H/8];
#endif

void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
    ccb0:	80 e0       	ldi	r24, 0x00	; 0
    ccb2:	94 e0       	ldi	r25, 0x04	; 4
    ccb4:	e2 e0       	ldi	r30, 0x02	; 2
    ccb6:	fb e1       	ldi	r31, 0x1B	; 27
    ccb8:	df 01       	movw	r26, r30
    ccba:	9c 01       	movw	r18, r24
    ccbc:	1d 92       	st	X+, r1
    ccbe:	21 50       	subi	r18, 0x01	; 1
    ccc0:	30 40       	sbci	r19, 0x00	; 0
    ccc2:	e1 f7       	brne	.-8      	; 0xccbc <_Z9lcd_clearv+0xc>
}
    ccc4:	08 95       	ret

0000ccc6 <_Z7lcd_imghhPKhhh>:

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
{
    ccc6:	0f 93       	push	r16
    ccc8:	1f 93       	push	r17
    ccca:	cf 93       	push	r28
    cccc:	df 93       	push	r29
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
    ccce:	da 01       	movw	r26, r20
    ccd0:	11 96       	adiw	r26, 0x01	; 1
    ccd2:	fa 01       	movw	r30, r20
    ccd4:	44 91       	lpm	r20, Z+
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
    ccd6:	ed 01       	movw	r28, r26
    ccd8:	21 96       	adiw	r28, 0x01	; 1
    ccda:	fd 01       	movw	r30, r26
    ccdc:	a4 91       	lpm	r26, Z+
    ccde:	b0 e0       	ldi	r27, 0x00	; 0
    cce0:	17 96       	adiw	r26, 0x07	; 7
    cce2:	13 e0       	ldi	r17, 0x03	; 3
    cce4:	b5 95       	asr	r27
    cce6:	a7 95       	ror	r26
    cce8:	1a 95       	dec	r17
    ccea:	e1 f7       	brne	.-8      	; 0xcce4 <_Z7lcd_imghhPKhhh+0x1e>
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
    ccec:	01 fd       	sbrc	r16, 1
    ccee:	08 c0       	rjmp	.+16     	; 0xcd00 <_Z7lcd_imghhPKhhh+0x3a>
    ccf0:	00 ff       	sbrs	r16, 0
    ccf2:	08 c0       	rjmp	.+16     	; 0xcd04 <_Z7lcd_imghhPKhhh+0x3e>
    ccf4:	90 91 34 1f 	lds	r25, 0x1F34
    ccf8:	51 e0       	ldi	r21, 0x01	; 1
    ccfa:	96 fd       	sbrc	r25, 6
    ccfc:	04 c0       	rjmp	.+8      	; 0xcd06 <_Z7lcd_imghhPKhhh+0x40>
    ccfe:	02 c0       	rjmp	.+4      	; 0xcd04 <_Z7lcd_imghhPKhhh+0x3e>
    cd00:	51 e0       	ldi	r21, 0x01	; 1
    cd02:	01 c0       	rjmp	.+2      	; 0xcd06 <_Z7lcd_imghhPKhhh+0x40>
    cd04:	50 e0       	ldi	r21, 0x00	; 0
  q += idx*w*hb;
    cd06:	42 9f       	mul	r20, r18
    cd08:	90 01       	movw	r18, r0
    cd0a:	11 24       	eor	r1, r1
    cd0c:	ea 2f       	mov	r30, r26
    cd0e:	f0 e0       	ldi	r31, 0x00	; 0
    cd10:	2e 9f       	mul	r18, r30
    cd12:	d0 01       	movw	r26, r0
    cd14:	2f 9f       	mul	r18, r31
    cd16:	b0 0d       	add	r27, r0
    cd18:	3e 9f       	mul	r19, r30
    cd1a:	b0 0d       	add	r27, r0
    cd1c:	11 24       	eor	r1, r1
    cd1e:	ac 0f       	add	r26, r28
    cd20:	bd 1f       	adc	r27, r29
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    cd22:	66 95       	lsr	r22
    cd24:	66 95       	lsr	r22
    cd26:	66 95       	lsr	r22
    cd28:	70 e0       	ldi	r23, 0x00	; 0
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
    cd2a:	9b 01       	movw	r18, r22
    cd2c:	36 95       	lsr	r19
    cd2e:	32 2f       	mov	r19, r18
    cd30:	22 27       	eor	r18, r18
    cd32:	37 95       	ror	r19
    cd34:	27 95       	ror	r18
    cd36:	90 e0       	ldi	r25, 0x00	; 0
    cd38:	28 0f       	add	r18, r24
    cd3a:	39 1f       	adc	r19, r25
    cd3c:	6e 0f       	add	r22, r30
    cd3e:	7f 1f       	adc	r23, r31
    cd40:	76 95       	lsr	r23
    cd42:	76 2f       	mov	r23, r22
    cd44:	66 27       	eor	r22, r22
    cd46:	77 95       	ror	r23
    cd48:	67 95       	ror	r22
    cd4a:	68 0f       	add	r22, r24
    cd4c:	79 1f       	adc	r23, r25
    cd4e:	04 2f       	mov	r16, r20
    cd50:	10 e0       	ldi	r17, 0x00	; 0
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    cd52:	14 c0       	rjmp	.+40     	; 0xcd7c <_Z7lcd_imghhPKhhh+0xb6>
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    cd54:	e9 01       	movw	r28, r18
    cd56:	ce 5f       	subi	r28, 0xFE	; 254
    cd58:	d4 4e       	sbci	r29, 0xE4	; 228
    for (uint8_t i=0; i<w; i++){
    cd5a:	80 e0       	ldi	r24, 0x00	; 0
    cd5c:	90 e0       	ldi	r25, 0x00	; 0
    cd5e:	08 c0       	rjmp	.+16     	; 0xcd70 <_Z7lcd_imghhPKhhh+0xaa>
      uint8_t b = pgm_read_byte(q++);
    cd60:	fd 01       	movw	r30, r26
    cd62:	e8 0f       	add	r30, r24
    cd64:	f9 1f       	adc	r31, r25
    cd66:	e4 91       	lpm	r30, Z+
      *p++ = inv ? ~b : b;
    cd68:	51 11       	cpse	r21, r1
    cd6a:	e0 95       	com	r30
    cd6c:	e9 93       	st	Y+, r30
    cd6e:	01 96       	adiw	r24, 0x01	; 1
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    uint8_t *p = &displayBuf[ (y / 8 + yb) * DISPLAY_W + x ];
    for (uint8_t i=0; i<w; i++){
    cd70:	84 17       	cp	r24, r20
    cd72:	b0 f3       	brcs	.-20     	; 0xcd60 <_Z7lcd_imghhPKhhh+0x9a>
void lcd_clear()
{
  memset(displayBuf, 0, sizeof(displayBuf));
}

void lcd_img(uint8_t x, uint8_t y, const pm_uchar * img, uint8_t idx, uint8_t mode)
    cd74:	a0 0f       	add	r26, r16
    cd76:	b1 1f       	adc	r27, r17
    cd78:	20 58       	subi	r18, 0x80	; 128
    cd7a:	3f 4f       	sbci	r19, 0xFF	; 255
  const pm_uchar *q = img;
  uint8_t w    = pgm_read_byte(q++);
  uint8_t hb   = (pgm_read_byte(q++)+7)/8;
  bool    inv  = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
  q += idx*w*hb;
  for (uint8_t yb = 0; yb < hb; yb++) {
    cd7c:	26 17       	cp	r18, r22
    cd7e:	37 07       	cpc	r19, r23
    cd80:	49 f7       	brne	.-46     	; 0xcd54 <_Z7lcd_imghhPKhhh+0x8e>
    for (uint8_t i=0; i<w; i++){
      uint8_t b = pgm_read_byte(q++);
      *p++ = inv ? ~b : b;
    }
  }
}
    cd82:	df 91       	pop	r29
    cd84:	cf 91       	pop	r28
    cd86:	1f 91       	pop	r17
    cd88:	0f 91       	pop	r16
    cd8a:	08 95       	ret

0000cd8c <_Z11lcd_putcAtthhch>:

uint8_t lcd_lastPos;

void lcd_putcAtt(uint8_t x, uint8_t y, const char c, uint8_t mode)
{
    cd8c:	0f 93       	push	r16
    cd8e:	1f 93       	push	r17
    cd90:	cf 93       	push	r28
    cd92:	df 93       	push	r29
  uint8_t *p    = &displayBuf[ y / 8 * DISPLAY_W + x ];
    cd94:	66 95       	lsr	r22
    cd96:	66 95       	lsr	r22
    cd98:	66 95       	lsr	r22
    cd9a:	70 e0       	ldi	r23, 0x00	; 0
    cd9c:	76 95       	lsr	r23
    cd9e:	76 2f       	mov	r23, r22
    cda0:	66 27       	eor	r22, r22
    cda2:	77 95       	ror	r23
    cda4:	67 95       	ror	r22
    cda6:	68 0f       	add	r22, r24
    cda8:	71 1d       	adc	r23, r1
    cdaa:	eb 01       	movw	r28, r22
    cdac:	ce 5f       	subi	r28, 0xFE	; 254
    cdae:	d4 4e       	sbci	r29, 0xE4	; 228

  pm_uchar    *q = &font_5x8_x20_x7f[ + (c-0x20)*5];
    cdb0:	04 2f       	mov	r16, r20
    cdb2:	11 27       	eor	r17, r17
    cdb4:	07 fd       	sbrc	r16, 7
    cdb6:	10 95       	com	r17
  bool         inv = (mode & INVERS) ? true : (mode & BLINK ? BLINK_ON_PHASE : false);
    cdb8:	30 e0       	ldi	r19, 0x00	; 0
    cdba:	21 fd       	sbrc	r18, 1
    cdbc:	08 c0       	rjmp	.+16     	; 0xcdce <_Z11lcd_putcAtthhch+0x42>
    cdbe:	20 ff       	sbrs	r18, 0
    cdc0:	08 c0       	rjmp	.+16     	; 0xcdd2 <_Z11lcd_putcAtthhch+0x46>
    cdc2:	80 91 34 1f 	lds	r24, 0x1F34
    cdc6:	41 e0       	ldi	r20, 0x01	; 1
    cdc8:	86 fd       	sbrc	r24, 6
    cdca:	04 c0       	rjmp	.+8      	; 0xcdd4 <_Z11lcd_putcAtthhch+0x48>
    cdcc:	02 c0       	rjmp	.+4      	; 0xcdd2 <_Z11lcd_putcAtthhch+0x46>
    cdce:	41 e0       	ldi	r20, 0x01	; 1
    cdd0:	01 c0       	rjmp	.+2      	; 0xcdd4 <_Z11lcd_putcAtthhch+0x48>
    cdd2:	40 e0       	ldi	r20, 0x00	; 0
  if(mode & DBLSIZE)
    cdd4:	22 ff       	sbrs	r18, 2
    cdd6:	53 c0       	rjmp	.+166    	; 0xce7e <_Z11lcd_putcAtthhch+0xf2>
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[(c-0x20)*10 + ((c-0x20)/16)*160];
    cdd8:	c8 01       	movw	r24, r16
    cdda:	80 97       	sbiw	r24, 0x20	; 32
    cddc:	60 e1       	ldi	r22, 0x10	; 16
    cdde:	70 e0       	ldi	r23, 0x00	; 0
    cde0:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    cde4:	e0 ea       	ldi	r30, 0xA0	; 160
    cde6:	f0 e0       	ldi	r31, 0x00	; 0
    cde8:	6e 9f       	mul	r22, r30
    cdea:	c0 01       	movw	r24, r0
    cdec:	6f 9f       	mul	r22, r31
    cdee:	90 0d       	add	r25, r0
    cdf0:	7e 9f       	mul	r23, r30
    cdf2:	90 0d       	add	r25, r0
    cdf4:	11 24       	eor	r1, r1
    cdf6:	b8 01       	movw	r22, r16
    cdf8:	66 0f       	add	r22, r22
    cdfa:	77 1f       	adc	r23, r23
    cdfc:	53 e0       	ldi	r21, 0x03	; 3
    cdfe:	00 0f       	add	r16, r16
    ce00:	11 1f       	adc	r17, r17
    ce02:	5a 95       	dec	r21
    ce04:	e1 f7       	brne	.-8      	; 0xcdfe <_Z11lcd_putcAtthhch+0x72>
    ce06:	60 0f       	add	r22, r16
    ce08:	71 1f       	adc	r23, r17
    ce0a:	86 0f       	add	r24, r22
    ce0c:	97 1f       	adc	r25, r23
    ce0e:	8a 5e       	subi	r24, 0xEA	; 234
    ce10:	97 4f       	sbci	r25, 0xF7	; 247
    for(char i=5; i>=0; i--) {
    ce12:	55 e0       	ldi	r21, 0x05	; 5
      if (mode & CONDENSED && i==0) break;
    ce14:	28 70       	andi	r18, 0x08	; 8
    ce16:	30 70       	andi	r19, 0x00	; 0
    ce18:	21 15       	cp	r18, r1
    ce1a:	31 05       	cpc	r19, r1
    ce1c:	19 f0       	breq	.+6      	; 0xce24 <_Z11lcd_putcAtthhch+0x98>
    ce1e:	55 23       	and	r21, r21
    ce20:	19 f4       	brne	.+6      	; 0xce28 <_Z11lcd_putcAtthhch+0x9c>
    ce22:	60 c0       	rjmp	.+192    	; 0xcee4 <_Z11lcd_putcAtthhch+0x158>
      /*top byte*/
      uint8_t b1 = i>0 ? pgm_read_byte(q) : 0;
    ce24:	55 23       	and	r21, r21
    ce26:	69 f0       	breq	.+26     	; 0xce42 <_Z11lcd_putcAtthhch+0xb6>
    ce28:	fc 01       	movw	r30, r24
    ce2a:	64 91       	lpm	r22, Z+
      /*bottom byte*/
      uint8_t b3 = i>0 ? pgm_read_byte(160+q) : 0;
    ce2c:	e0 56       	subi	r30, 0x60	; 96
    ce2e:	ff 4f       	sbci	r31, 0xFF	; 255
    ce30:	74 91       	lpm	r23, Z+
      /*top byte*/
      uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
    ce32:	01 96       	adiw	r24, 0x01	; 1
    ce34:	fc 01       	movw	r30, r24
    ce36:	a4 91       	lpm	r26, Z+
      /*bottom byte*/
      uint8_t b4 = i>0 ? pgm_read_byte(160+q) : 0;
    ce38:	e0 56       	subi	r30, 0x60	; 96
    ce3a:	ff 4f       	sbci	r31, 0xFF	; 255
    ce3c:	04 91       	lpm	r16, Z+
      /*top byte*/
      uint8_t b1 = i>0 ? pgm_read_byte(q) : 0;
      /*bottom byte*/
      uint8_t b3 = i>0 ? pgm_read_byte(160+q) : 0;
      /*top byte*/
      uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
    ce3e:	fa 2f       	mov	r31, r26
    ce40:	04 c0       	rjmp	.+8      	; 0xce4a <_Z11lcd_putcAtthhch+0xbe>
    ce42:	f0 e0       	ldi	r31, 0x00	; 0
    for(char i=5; i>=0; i--) {
      if (mode & CONDENSED && i==0) break;
      /*top byte*/
      uint8_t b1 = i>0 ? pgm_read_byte(q) : 0;
      /*bottom byte*/
      uint8_t b3 = i>0 ? pgm_read_byte(160+q) : 0;
    ce44:	70 e0       	ldi	r23, 0x00	; 0
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[(c-0x20)*10 + ((c-0x20)/16)*160];
    for(char i=5; i>=0; i--) {
      if (mode & CONDENSED && i==0) break;
      /*top byte*/
      uint8_t b1 = i>0 ? pgm_read_byte(q) : 0;
    ce46:	60 e0       	ldi	r22, 0x00	; 0
      /*bottom byte*/
      uint8_t b3 = i>0 ? pgm_read_byte(160+q) : 0;
      /*top byte*/
      uint8_t b2 = i>0 ? pgm_read_byte(++q) : 0;
      /*bottom byte*/
      uint8_t b4 = i>0 ? pgm_read_byte(160+q) : 0;
    ce48:	00 e0       	ldi	r16, 0x00	; 0

      if(inv) {
    ce4a:	44 23       	and	r20, r20
    ce4c:	21 f0       	breq	.+8      	; 0xce56 <_Z11lcd_putcAtthhch+0xca>
        b1=~b1;
    ce4e:	60 95       	com	r22
        b2=~b2;
    ce50:	f0 95       	com	r31
        b3=~b3;
    ce52:	70 95       	com	r23
        b4=~b4;
    ce54:	00 95       	com	r16
      }   

      if(&p[DISPLAY_W+1] < DISPLAY_END){
    ce56:	de 01       	movw	r26, r28
    ce58:	af 57       	subi	r26, 0x7F	; 127
    ce5a:	bf 4f       	sbci	r27, 0xFF	; 255
    ce5c:	ef e1       	ldi	r30, 0x1F	; 31
    ce5e:	a2 30       	cpi	r26, 0x02	; 2
    ce60:	be 07       	cpc	r27, r30
    ce62:	40 f4       	brcc	.+16     	; 0xce74 <_Z11lcd_putcAtthhch+0xe8>
        p[0]=b1;
    ce64:	68 83       	st	Y, r22
        p[1]=b2;
    ce66:	f9 83       	std	Y+1, r31	; 0x01
        p[DISPLAY_W] = b3; 
    ce68:	fe 01       	movw	r30, r28
    ce6a:	e0 58       	subi	r30, 0x80	; 128
    ce6c:	ff 4f       	sbci	r31, 0xFF	; 255
    ce6e:	70 83       	st	Z, r23
        p[DISPLAY_W+1] = b4; 
    ce70:	0c 93       	st	X, r16
        p+=2;
    ce72:	22 96       	adiw	r28, 0x02	; 2
  if(mode & DBLSIZE)
  {
    /* each letter consists of ten top bytes followed by
     * by ten bottom bytes (20 bytes per * char) */
    q = &font_10x16_x20_x7f[(c-0x20)*10 + ((c-0x20)/16)*160];
    for(char i=5; i>=0; i--) {
    ce74:	51 50       	subi	r21, 0x01	; 1
    ce76:	5f 3f       	cpi	r21, 0xFF	; 255
    ce78:	a9 f1       	breq	.+106    	; 0xcee4 <_Z11lcd_putcAtthhch+0x158>
        p[1]=b2;
        p[DISPLAY_W] = b3; 
        p[DISPLAY_W+1] = b4; 
        p+=2;
      }   
      q++;
    ce7a:	01 96       	adiw	r24, 0x01	; 1
    ce7c:	cd cf       	rjmp	.-102    	; 0xce18 <_Z11lcd_putcAtthhch+0x8c>
    }   
  }
  else {
    uint8_t condense=0;

    if (mode & CONDENSED) {
    ce7e:	23 ff       	sbrs	r18, 3
    ce80:	0c c0       	rjmp	.+24     	; 0xce9a <_Z11lcd_putcAtthhch+0x10e>
        *p++ = inv ? ~0 : 0;
    ce82:	44 23       	and	r20, r20
    ce84:	11 f0       	breq	.+4      	; 0xce8a <_Z11lcd_putcAtthhch+0xfe>
    ce86:	8f ef       	ldi	r24, 0xFF	; 255
    ce88:	01 c0       	rjmp	.+2      	; 0xce8c <_Z11lcd_putcAtthhch+0x100>
    ce8a:	80 e0       	ldi	r24, 0x00	; 0
    ce8c:	6e 5f       	subi	r22, 0xFE	; 254
    ce8e:	74 4e       	sbci	r23, 0xE4	; 228
    ce90:	fb 01       	movw	r30, r22
    ce92:	80 83       	st	Z, r24
    ce94:	21 96       	adiw	r28, 0x01	; 1
        condense=1;
    ce96:	31 e0       	ldi	r19, 0x01	; 1
    ce98:	01 c0       	rjmp	.+2      	; 0xce9c <_Z11lcd_putcAtthhch+0x110>
      }   
      q++;
    }   
  }
  else {
    uint8_t condense=0;
    ce9a:	30 e0       	ldi	r19, 0x00	; 0

void lcd_putcAtt(uint8_t x, uint8_t y, const char c, uint8_t mode)
{
  uint8_t *p    = &displayBuf[ y / 8 * DISPLAY_W + x ];

  pm_uchar    *q = &font_5x8_x20_x7f[ + (c-0x20)*5];
    ce9c:	c8 01       	movw	r24, r16
    ce9e:	88 0f       	add	r24, r24
    cea0:	99 1f       	adc	r25, r25
    cea2:	88 0f       	add	r24, r24
    cea4:	99 1f       	adc	r25, r25
    cea6:	80 0f       	add	r24, r16
    cea8:	91 1f       	adc	r25, r17
    ceaa:	8c 52       	subi	r24, 0x2C	; 44
    ceac:	99 4f       	sbci	r25, 0xF9	; 249
    ceae:	25 e0       	ldi	r18, 0x05	; 5
    ceb0:	fc 01       	movw	r30, r24
        *p++ = inv ? ~0 : 0;
        condense=1;
    }

    for (char i=5; i!=0; i--) {
        uint8_t b = pgm_read_byte(q++);
    ceb2:	01 96       	adiw	r24, 0x01	; 1
    ceb4:	e4 91       	lpm	r30, Z+
        if (condense && i==4) {
    ceb6:	33 23       	and	r19, r19
    ceb8:	11 f0       	breq	.+4      	; 0xcebe <_Z11lcd_putcAtthhch+0x132>
    ceba:	24 30       	cpi	r18, 0x04	; 4
    cebc:	39 f0       	breq	.+14     	; 0xcecc <_Z11lcd_putcAtthhch+0x140>
            /*condense the letter by skipping column 4 */
            continue;
        }
        if(p<DISPLAY_END) *p++ = inv ? ~b : b;
    cebe:	ff e1       	ldi	r31, 0x1F	; 31
    cec0:	c2 30       	cpi	r28, 0x02	; 2
    cec2:	df 07       	cpc	r29, r31
    cec4:	18 f4       	brcc	.+6      	; 0xcecc <_Z11lcd_putcAtthhch+0x140>
    cec6:	41 11       	cpse	r20, r1
    cec8:	e0 95       	com	r30
    ceca:	e9 93       	st	Y+, r30
    cecc:	21 50       	subi	r18, 0x01	; 1
    if (mode & CONDENSED) {
        *p++ = inv ? ~0 : 0;
        condense=1;
    }

    for (char i=5; i!=0; i--) {
    cece:	81 f7       	brne	.-32     	; 0xceb0 <_Z11lcd_putcAtthhch+0x124>
            /*condense the letter by skipping column 4 */
            continue;
        }
        if(p<DISPLAY_END) *p++ = inv ? ~b : b;
    }
    if(p<DISPLAY_END) *p++ = inv ? ~0 : 0;
    ced0:	5f e1       	ldi	r21, 0x1F	; 31
    ced2:	c2 30       	cpi	r28, 0x02	; 2
    ced4:	d5 07       	cpc	r29, r21
    ced6:	30 f4       	brcc	.+12     	; 0xcee4 <_Z11lcd_putcAtthhch+0x158>
    ced8:	44 23       	and	r20, r20
    ceda:	11 f0       	breq	.+4      	; 0xcee0 <_Z11lcd_putcAtthhch+0x154>
    cedc:	8f ef       	ldi	r24, 0xFF	; 255
    cede:	01 c0       	rjmp	.+2      	; 0xcee2 <_Z11lcd_putcAtthhch+0x156>
    cee0:	80 e0       	ldi	r24, 0x00	; 0
    cee2:	88 83       	st	Y, r24
  }
}
    cee4:	df 91       	pop	r29
    cee6:	cf 91       	pop	r28
    cee8:	1f 91       	pop	r17
    ceea:	0f 91       	pop	r16
    ceec:	08 95       	ret

0000ceee <_Z8lcd_putchhc>:

void lcd_putc(uint8_t x,uint8_t y,const char c)
{
  lcd_putcAtt(x,y,c,0);
    ceee:	20 e0       	ldi	r18, 0x00	; 0
    cef0:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
}
    cef4:	08 95       	ret

0000cef6 <_Z12lcd_putsnAtthhPKchh>:

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
    cef6:	af 92       	push	r10
    cef8:	bf 92       	push	r11
    cefa:	cf 92       	push	r12
    cefc:	df 92       	push	r13
    cefe:	ef 92       	push	r14
    cf00:	ff 92       	push	r15
    cf02:	0f 93       	push	r16
    cf04:	1f 93       	push	r17
    cf06:	cf 93       	push	r28
    cf08:	df 93       	push	r29
    cf0a:	18 2f       	mov	r17, r24
    cf0c:	b6 2e       	mov	r11, r22
    cf0e:	ea 01       	movw	r28, r20
    cf10:	a2 2e       	mov	r10, r18
  while(len!=0) {
    char c;
    switch (mode & (BSS+ZCHAR)) {
    cf12:	c0 2e       	mov	r12, r16
    cf14:	dd 24       	eor	r13, r13
    cf16:	a0 e3       	ldi	r26, 0x30	; 48
    cf18:	ea 2e       	mov	r14, r26
    cf1a:	f1 2c       	mov	r15, r1
    cf1c:	ec 20       	and	r14, r12
    cf1e:	fd 20       	and	r15, r13
        c = pgm_read_byte(s);
        break;
    }
    lcd_putcAtt(x,y,c,mode);
    x+=FW;
    if (mode&DBLSIZE) x+=FW-1;
    cf20:	84 e0       	ldi	r24, 0x04	; 4
    cf22:	c8 22       	and	r12, r24
    cf24:	dd 24       	eor	r13, r13
  lcd_putcAtt(x,y,c,0);
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
  while(len!=0) {
    cf26:	1e c0       	rjmp	.+60     	; 0xcf64 <_Z12lcd_putsnAtthhPKchh+0x6e>
    char c;
    switch (mode & (BSS+ZCHAR)) {
    cf28:	e0 e1       	ldi	r30, 0x10	; 16
    cf2a:	ee 16       	cp	r14, r30
    cf2c:	f1 04       	cpc	r15, r1
    cf2e:	29 f0       	breq	.+10     	; 0xcf3a <_Z12lcd_putsnAtthhPKchh+0x44>
    cf30:	f0 e2       	ldi	r31, 0x20	; 32
    cf32:	ef 16       	cp	r14, r31
    cf34:	f1 04       	cpc	r15, r1
    cf36:	41 f4       	brne	.+16     	; 0xcf48 <_Z12lcd_putsnAtthhPKchh+0x52>
    cf38:	02 c0       	rjmp	.+4      	; 0xcf3e <_Z12lcd_putsnAtthhPKchh+0x48>
      case BSS:
        c = *s;
    cf3a:	48 81       	ld	r20, Y
        break;
    cf3c:	07 c0       	rjmp	.+14     	; 0xcf4c <_Z12lcd_putsnAtthhPKchh+0x56>
      case ZCHAR:
        c = idx2char(*s);
    cf3e:	88 81       	ld	r24, Y
    cf40:	0e 94 ef 06 	call	0xdde	; 0xdde <_Z8idx2chara>
    cf44:	48 2f       	mov	r20, r24
        break;
    cf46:	02 c0       	rjmp	.+4      	; 0xcf4c <_Z12lcd_putsnAtthhPKchh+0x56>
      default:
        c = pgm_read_byte(s);
    cf48:	fe 01       	movw	r30, r28
    cf4a:	44 91       	lpm	r20, Z+
        break;
    }
    lcd_putcAtt(x,y,c,mode);
    cf4c:	81 2f       	mov	r24, r17
    cf4e:	6b 2d       	mov	r22, r11
    cf50:	20 2f       	mov	r18, r16
    cf52:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    x+=FW;
    cf56:	1a 5f       	subi	r17, 0xFA	; 250
    if (mode&DBLSIZE) x+=FW-1;
    cf58:	c1 14       	cp	r12, r1
    cf5a:	d1 04       	cpc	r13, r1
    cf5c:	09 f0       	breq	.+2      	; 0xcf60 <_Z12lcd_putsnAtthhPKchh+0x6a>
    cf5e:	1b 5f       	subi	r17, 0xFB	; 251
    s++;
    cf60:	21 96       	adiw	r28, 0x01	; 1
    len--;
    cf62:	aa 94       	dec	r10
  lcd_putcAtt(x,y,c,0);
}

void lcd_putsnAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t len,uint8_t mode)
{
  while(len!=0) {
    cf64:	aa 20       	and	r10, r10
    cf66:	01 f7       	brne	.-64     	; 0xcf28 <_Z12lcd_putsnAtthhPKchh+0x32>
    x+=FW;
    if (mode&DBLSIZE) x+=FW-1;
    s++;
    len--;
  }
}
    cf68:	df 91       	pop	r29
    cf6a:	cf 91       	pop	r28
    cf6c:	1f 91       	pop	r17
    cf6e:	0f 91       	pop	r16
    cf70:	ff 90       	pop	r15
    cf72:	ef 90       	pop	r14
    cf74:	df 90       	pop	r13
    cf76:	cf 90       	pop	r12
    cf78:	bf 90       	pop	r11
    cf7a:	af 90       	pop	r10
    cf7c:	08 95       	ret

0000cf7e <_Z11lcd_putsn_PhhPKch>:
void lcd_putsn_P(uint8_t x,uint8_t y,const pm_char * s,uint8_t len)
{
    cf7e:	0f 93       	push	r16
  lcd_putsnAtt( x,y,s,len,0);
    cf80:	00 e0       	ldi	r16, 0x00	; 0
    cf82:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    cf86:	0f 91       	pop	r16
    cf88:	08 95       	ret

0000cf8a <_Z11lcd_putsAtthhPKch>:

void lcd_putsAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t mode)
{
    cf8a:	af 92       	push	r10
    cf8c:	bf 92       	push	r11
    cf8e:	cf 92       	push	r12
    cf90:	df 92       	push	r13
    cf92:	ef 92       	push	r14
    cf94:	ff 92       	push	r15
    cf96:	0f 93       	push	r16
    cf98:	1f 93       	push	r17
    cf9a:	df 93       	push	r29
    cf9c:	cf 93       	push	r28
    cf9e:	0f 92       	push	r0
    cfa0:	cd b7       	in	r28, 0x3d	; 61
    cfa2:	de b7       	in	r29, 0x3e	; 62
    cfa4:	98 2f       	mov	r25, r24
    cfa6:	d6 2e       	mov	r13, r22
    cfa8:	c2 2e       	mov	r12, r18
    cfaa:	5a 01       	movw	r10, r20
  while(1) {
    char c = (mode & BSS) ? *s++ : pgm_read_byte(s++);
    cfac:	ec 2c       	mov	r14, r12
    cfae:	ff 24       	eor	r15, r15
    cfb0:	87 01       	movw	r16, r14
    cfb2:	00 71       	andi	r16, 0x10	; 16
    cfb4:	10 70       	andi	r17, 0x00	; 0
    if(!c) break;
    lcd_putcAtt(x,y,c,mode);
    x+=FW;
    if(mode&DBLSIZE) x+=FW;
    cfb6:	84 e0       	ldi	r24, 0x04	; 4
    cfb8:	e8 22       	and	r14, r24
    cfba:	ff 24       	eor	r15, r15
    cfbc:	03 c0       	rjmp	.+6      	; 0xcfc4 <_Z11lcd_putsAtthhPKch+0x3a>
{
  lcd_putsnAtt( x,y,s,len,0);
}

void lcd_putsAtt(uint8_t x,uint8_t y,const pm_char * s,uint8_t mode)
{
    cfbe:	08 94       	sec
    cfc0:	a1 1c       	adc	r10, r1
    cfc2:	b1 1c       	adc	r11, r1
  while(1) {
    char c = (mode & BSS) ? *s++ : pgm_read_byte(s++);
    cfc4:	01 15       	cp	r16, r1
    cfc6:	11 05       	cpc	r17, r1
    cfc8:	19 f0       	breq	.+6      	; 0xcfd0 <_Z11lcd_putsAtthhPKch+0x46>
    cfca:	f5 01       	movw	r30, r10
    cfcc:	40 81       	ld	r20, Z
    cfce:	02 c0       	rjmp	.+4      	; 0xcfd4 <_Z11lcd_putsAtthhPKch+0x4a>
    cfd0:	f5 01       	movw	r30, r10
    cfd2:	44 91       	lpm	r20, Z+
    if(!c) break;
    cfd4:	44 23       	and	r20, r20
    cfd6:	69 f0       	breq	.+26     	; 0xcff2 <_Z11lcd_putsAtthhPKch+0x68>
    lcd_putcAtt(x,y,c,mode);
    cfd8:	89 2f       	mov	r24, r25
    cfda:	6d 2d       	mov	r22, r13
    cfdc:	2c 2d       	mov	r18, r12
    cfde:	99 83       	std	Y+1, r25	; 0x01
    cfe0:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    x+=FW;
    cfe4:	99 81       	ldd	r25, Y+1	; 0x01
    cfe6:	9a 5f       	subi	r25, 0xFA	; 250
    if(mode&DBLSIZE) x+=FW;
    cfe8:	e1 14       	cp	r14, r1
    cfea:	f1 04       	cpc	r15, r1
    cfec:	41 f3       	breq	.-48     	; 0xcfbe <_Z11lcd_putsAtthhPKch+0x34>
    cfee:	9a 5f       	subi	r25, 0xFA	; 250
    cff0:	e6 cf       	rjmp	.-52     	; 0xcfbe <_Z11lcd_putsAtthhPKch+0x34>
  }
  lcd_lastPos = x;
    cff2:	90 93 02 1f 	sts	0x1F02, r25
}
    cff6:	0f 90       	pop	r0
    cff8:	cf 91       	pop	r28
    cffa:	df 91       	pop	r29
    cffc:	1f 91       	pop	r17
    cffe:	0f 91       	pop	r16
    d000:	ff 90       	pop	r15
    d002:	ef 90       	pop	r14
    d004:	df 90       	pop	r13
    d006:	cf 90       	pop	r12
    d008:	bf 90       	pop	r11
    d00a:	af 90       	pop	r10
    d00c:	08 95       	ret

0000d00e <_Z10lcd_puts_PhhPKc>:

void lcd_puts_P(uint8_t x,uint8_t y,const pm_char * s)
{
  lcd_putsAtt( x, y, s, 0);
    d00e:	20 e0       	ldi	r18, 0x00	; 0
    d010:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
}
    d014:	08 95       	ret

0000d016 <_Z11lcd_outhex4hhj>:

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
    d016:	ef 92       	push	r14
    d018:	ff 92       	push	r15
    d01a:	0f 93       	push	r16
    d01c:	1f 93       	push	r17
    d01e:	df 93       	push	r29
    d020:	cf 93       	push	r28
    d022:	0f 92       	push	r0
    d024:	cd b7       	in	r28, 0x3d	; 61
    d026:	de b7       	in	r29, 0x3e	; 62
    d028:	18 2f       	mov	r17, r24
    d02a:	06 2f       	mov	r16, r22
    d02c:	7a 01       	movw	r14, r20
  x+=FWNUM*4;
    d02e:	98 2f       	mov	r25, r24
    d030:	9c 5e       	subi	r25, 0xEC	; 236
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
    d032:	95 50       	subi	r25, 0x05	; 5
    char c = val & 0xf;
    d034:	4e 2d       	mov	r20, r14
    d036:	4f 70       	andi	r20, 0x0F	; 15
    c = c>9 ? c+'A'-10 : c+'0';
    d038:	4a 30       	cpi	r20, 0x0A	; 10
    d03a:	1c f0       	brlt	.+6      	; 0xd042 <_Z11lcd_outhex4hhj+0x2c>
    d03c:	49 5c       	subi	r20, 0xC9	; 201
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    d03e:	28 e0       	ldi	r18, 0x08	; 8
    d040:	02 c0       	rjmp	.+4      	; 0xd046 <_Z11lcd_outhex4hhj+0x30>
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
  {
    x-=FWNUM;
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    d042:	40 5d       	subi	r20, 0xD0	; 208
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    d044:	20 e0       	ldi	r18, 0x00	; 0
    d046:	89 2f       	mov	r24, r25
    d048:	60 2f       	mov	r22, r16
    d04a:	99 83       	std	Y+1, r25	; 0x01
    d04c:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
}

void lcd_outhex4(uint8_t x,uint8_t y,uint16_t val)
{
  x+=FWNUM*4;
  for(int i=0; i<4; i++)
    d050:	99 81       	ldd	r25, Y+1	; 0x01
    d052:	91 17       	cp	r25, r17
    d054:	31 f0       	breq	.+12     	; 0xd062 <_Z11lcd_outhex4hhj+0x4c>
  {
    x-=FWNUM;
    char c = val & 0xf;
    c = c>9 ? c+'A'-10 : c+'0';
    lcd_putcAtt(x,y,c,c>='A'?CONDENSED:0);
    val>>=4;
    d056:	b4 e0       	ldi	r27, 0x04	; 4
    d058:	f6 94       	lsr	r15
    d05a:	e7 94       	ror	r14
    d05c:	ba 95       	dec	r27
    d05e:	e1 f7       	brne	.-8      	; 0xd058 <_Z11lcd_outhex4hhj+0x42>
    d060:	e8 cf       	rjmp	.-48     	; 0xd032 <_Z11lcd_outhex4hhj+0x1c>
  }
}
    d062:	0f 90       	pop	r0
    d064:	cf 91       	pop	r28
    d066:	df 91       	pop	r29
    d068:	1f 91       	pop	r17
    d06a:	0f 91       	pop	r16
    d06c:	ff 90       	pop	r15
    d06e:	ef 90       	pop	r14
    d070:	08 95       	ret

0000d072 <_Z8lcd_maskPhhh>:
  // TODO we could change the '-' to have one pixel removed at its left
  if (neg) { lcd_putcAtt(x, y, '-', flags); lcd_plot(x, y+3); }
}

void lcd_mask(uint8_t *p, uint8_t mask, uint8_t att)
{
    d072:	fc 01       	movw	r30, r24
  assert(p >= displayBuf && p < DISPLAY_END);

  if (att & BLACK)
    d074:	41 ff       	sbrs	r20, 1
    d076:	04 c0       	rjmp	.+8      	; 0xd080 <_Z8lcd_maskPhhh+0xe>
    *p |= mask;
    d078:	80 81       	ld	r24, Z
    d07a:	86 2b       	or	r24, r22
    d07c:	80 83       	st	Z, r24
    d07e:	08 95       	ret
    d080:	80 81       	ld	r24, Z
  else if (att & WHITE)
    d082:	42 ff       	sbrs	r20, 2
    d084:	03 c0       	rjmp	.+6      	; 0xd08c <_Z8lcd_maskPhhh+0x1a>
    *p &= ~mask;
    d086:	60 95       	com	r22
    d088:	68 23       	and	r22, r24
    d08a:	01 c0       	rjmp	.+2      	; 0xd08e <_Z8lcd_maskPhhh+0x1c>
  else
    *p ^= mask;
    d08c:	68 27       	eor	r22, r24
    d08e:	60 83       	st	Z, r22
    d090:	08 95       	ret

0000d092 <_Z8lcd_plothhh>:
}

void lcd_plot(uint8_t x,uint8_t y, uint8_t att)
{
  uint8_t *p   = &displayBuf[ y / 8 * DISPLAY_W + x ];
    d092:	26 2f       	mov	r18, r22
    d094:	26 95       	lsr	r18
    d096:	26 95       	lsr	r18
    d098:	26 95       	lsr	r18
    d09a:	30 e0       	ldi	r19, 0x00	; 0
    d09c:	36 95       	lsr	r19
    d09e:	32 2f       	mov	r19, r18
    d0a0:	22 27       	eor	r18, r18
    d0a2:	37 95       	ror	r19
    d0a4:	27 95       	ror	r18
    d0a6:	28 0f       	add	r18, r24
    d0a8:	31 1d       	adc	r19, r1
    d0aa:	2e 5f       	subi	r18, 0xFE	; 254
    d0ac:	34 4e       	sbci	r19, 0xE4	; 228
  if (p<DISPLAY_END)
    d0ae:	8f e1       	ldi	r24, 0x1F	; 31
    d0b0:	22 30       	cpi	r18, 0x02	; 2
    d0b2:	38 07       	cpc	r19, r24
    d0b4:	60 f4       	brcc	.+24     	; 0xd0ce <_Z8lcd_plothhh+0x3c>
    lcd_mask(p, BITMASK(y%8), att);
    d0b6:	86 2f       	mov	r24, r22
    d0b8:	87 70       	andi	r24, 0x07	; 7
    d0ba:	61 e0       	ldi	r22, 0x01	; 1
    d0bc:	70 e0       	ldi	r23, 0x00	; 0
    d0be:	02 c0       	rjmp	.+4      	; 0xd0c4 <_Z8lcd_plothhh+0x32>
    d0c0:	66 0f       	add	r22, r22
    d0c2:	77 1f       	adc	r23, r23
    d0c4:	8a 95       	dec	r24
    d0c6:	e2 f7       	brpl	.-8      	; 0xd0c0 <_Z8lcd_plothhh+0x2e>
    d0c8:	c9 01       	movw	r24, r18
    d0ca:	0e 94 39 68 	call	0xd072	; 0xd072 <_Z8lcd_maskPhhh>
    d0ce:	08 95       	ret

0000d0d0 <_Z13lcd_hlineStipahahh>:
}

void lcd_hlineStip(int8_t x, uint8_t y, int8_t w, uint8_t pat, uint8_t att)
{
    d0d0:	df 92       	push	r13
    d0d2:	ef 92       	push	r14
    d0d4:	ff 92       	push	r15
    d0d6:	0f 93       	push	r16
    d0d8:	1f 93       	push	r17
    d0da:	cf 93       	push	r28
    d0dc:	df 93       	push	r29
    d0de:	f4 2e       	mov	r15, r20
    d0e0:	e0 2e       	mov	r14, r16
  if (y >= DISPLAY_H) return;
    d0e2:	60 34       	cpi	r22, 0x40	; 64
    d0e4:	08 f0       	brcs	.+2      	; 0xd0e8 <_Z13lcd_hlineStipahahh+0x18>
    d0e6:	43 c0       	rjmp	.+134    	; 0xd16e <_Z13lcd_hlineStipahahh+0x9e>
  if (w<0) { x+=w; w=-w; }
    d0e8:	47 ff       	sbrs	r20, 7
    d0ea:	02 c0       	rjmp	.+4      	; 0xd0f0 <_Z13lcd_hlineStipahahh+0x20>
    d0ec:	84 0f       	add	r24, r20
    d0ee:	f1 94       	neg	r15
  if (x<0) { w+=x; x=0; }
    d0f0:	87 ff       	sbrs	r24, 7
    d0f2:	02 c0       	rjmp	.+4      	; 0xd0f8 <_Z13lcd_hlineStipahahh+0x28>
    d0f4:	f8 0e       	add	r15, r24
    d0f6:	80 e0       	ldi	r24, 0x00	; 0
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }
    d0f8:	a8 2f       	mov	r26, r24
    d0fa:	bb 27       	eor	r27, r27
    d0fc:	a7 fd       	sbrc	r26, 7
    d0fe:	b0 95       	com	r27
    d100:	ef 2d       	mov	r30, r15
    d102:	ff 27       	eor	r31, r31
    d104:	e7 fd       	sbrc	r30, 7
    d106:	f0 95       	com	r31
    d108:	ea 0f       	add	r30, r26
    d10a:	fb 1f       	adc	r31, r27
    d10c:	e1 38       	cpi	r30, 0x81	; 129
    d10e:	f1 05       	cpc	r31, r1
    d110:	1c f0       	brlt	.+6      	; 0xd118 <_Z13lcd_hlineStipahahh+0x48>
    d112:	50 e8       	ldi	r21, 0x80	; 128
    d114:	f5 2e       	mov	r15, r21
    d116:	f8 1a       	sub	r15, r24

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
    d118:	06 2f       	mov	r16, r22
    d11a:	06 95       	lsr	r16
    d11c:	06 95       	lsr	r16
    d11e:	06 95       	lsr	r16
    d120:	10 e0       	ldi	r17, 0x00	; 0
    d122:	16 95       	lsr	r17
    d124:	10 2f       	mov	r17, r16
    d126:	00 27       	eor	r16, r16
    d128:	17 95       	ror	r17
    d12a:	07 95       	ror	r16
    d12c:	0a 0f       	add	r16, r26
    d12e:	1b 1f       	adc	r17, r27
    d130:	0e 5f       	subi	r16, 0xFE	; 254
    d132:	14 4e       	sbci	r17, 0xE4	; 228
  uint8_t msk = BITMASK(y%8);
    d134:	67 70       	andi	r22, 0x07	; 7
    d136:	81 e0       	ldi	r24, 0x01	; 1
    d138:	90 e0       	ldi	r25, 0x00	; 0
    d13a:	d8 2e       	mov	r13, r24
    d13c:	01 c0       	rjmp	.+2      	; 0xd140 <_Z13lcd_hlineStipahahh+0x70>
    d13e:	dd 0c       	add	r13, r13
    d140:	6a 95       	dec	r22
    d142:	ea f7       	brpl	.-6      	; 0xd13e <_Z13lcd_hlineStipahahh+0x6e>
  while(w) {
    d144:	12 c0       	rjmp	.+36     	; 0xd16a <_Z13lcd_hlineStipahahh+0x9a>
    if(pat&1) {
    d146:	30 e0       	ldi	r19, 0x00	; 0
    d148:	e9 01       	movw	r28, r18
    d14a:	d5 95       	asr	r29
    d14c:	c7 95       	ror	r28
    d14e:	20 ff       	sbrs	r18, 0
    d150:	08 c0       	rjmp	.+16     	; 0xd162 <_Z13lcd_hlineStipahahh+0x92>
      lcd_mask(p, msk, att);
    d152:	c8 01       	movw	r24, r16
    d154:	6d 2d       	mov	r22, r13
    d156:	4e 2d       	mov	r20, r14
    d158:	0e 94 39 68 	call	0xd072	; 0xd072 <_Z8lcd_maskPhhh>
      pat = (pat >> 1) | 0x80;
    d15c:	2c 2f       	mov	r18, r28
    d15e:	20 68       	ori	r18, 0x80	; 128
    d160:	01 c0       	rjmp	.+2      	; 0xd164 <_Z13lcd_hlineStipahahh+0x94>
    }
    else {
      pat = pat >> 1;
    d162:	2c 2f       	mov	r18, r28
    }
    w--;
    d164:	fa 94       	dec	r15
    p++;
    d166:	0f 5f       	subi	r16, 0xFF	; 255
    d168:	1f 4f       	sbci	r17, 0xFF	; 255
  if (x<0) { w+=x; x=0; }
  if (x+w > DISPLAY_W) { w = DISPLAY_W - x; }

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
  uint8_t msk = BITMASK(y%8);
  while(w) {
    d16a:	ff 20       	and	r15, r15
    d16c:	61 f7       	brne	.-40     	; 0xd146 <_Z13lcd_hlineStipahahh+0x76>
      pat = pat >> 1;
    }
    w--;
    p++;
  }
}
    d16e:	df 91       	pop	r29
    d170:	cf 91       	pop	r28
    d172:	1f 91       	pop	r17
    d174:	0f 91       	pop	r16
    d176:	ff 90       	pop	r15
    d178:	ef 90       	pop	r14
    d17a:	df 90       	pop	r13
    d17c:	08 95       	ret

0000d17e <_Z9lcd_hlinehhah>:

void lcd_hline(uint8_t x,uint8_t y, int8_t w, uint8_t att)
{
    d17e:	0f 93       	push	r16
    d180:	02 2f       	mov	r16, r18
  lcd_hlineStip(x, y, w, 0xff, att);
    d182:	2f ef       	ldi	r18, 0xFF	; 255
    d184:	0e 94 68 68 	call	0xd0d0	; 0xd0d0 <_Z13lcd_hlineStipahahh>
}
    d188:	0f 91       	pop	r16
    d18a:	08 95       	ret

0000d18c <_Z13lcd_vlineStiphaah>:

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
{
  if (x >= DISPLAY_W) return;
    d18c:	87 fd       	sbrc	r24, 7
    d18e:	5c c0       	rjmp	.+184    	; 0xd248 <_Z13lcd_vlineStiphaah+0xbc>
  if (h<0) { y+=h; h=-h; }
    d190:	47 ff       	sbrs	r20, 7
    d192:	02 c0       	rjmp	.+4      	; 0xd198 <_Z13lcd_vlineStiphaah+0xc>
    d194:	64 0f       	add	r22, r20
    d196:	41 95       	neg	r20
  if (y<0) { h+=y; y=0; }
    d198:	67 ff       	sbrs	r22, 7
    d19a:	02 c0       	rjmp	.+4      	; 0xd1a0 <_Z13lcd_vlineStiphaah+0x14>
    d19c:	46 0f       	add	r20, r22
    d19e:	60 e0       	ldi	r22, 0x00	; 0
  if (y+h > DISPLAY_H) { h = DISPLAY_H - y; }
    d1a0:	e4 2f       	mov	r30, r20
    d1a2:	ff 27       	eor	r31, r31
    d1a4:	e7 fd       	sbrc	r30, 7
    d1a6:	f0 95       	com	r31
    d1a8:	a6 2f       	mov	r26, r22
    d1aa:	bb 27       	eor	r27, r27
    d1ac:	a7 fd       	sbrc	r26, 7
    d1ae:	b0 95       	com	r27
    d1b0:	ea 0f       	add	r30, r26
    d1b2:	fb 1f       	adc	r31, r27
    d1b4:	e1 34       	cpi	r30, 0x41	; 65
    d1b6:	f1 05       	cpc	r31, r1
    d1b8:	14 f0       	brlt	.+4      	; 0xd1be <_Z13lcd_vlineStiphaah+0x32>
    d1ba:	40 e4       	ldi	r20, 0x40	; 64
    d1bc:	46 1b       	sub	r20, r22

  uint8_t *p  = &displayBuf[ y / 8 * DISPLAY_W + x ];
    d1be:	e6 2f       	mov	r30, r22
    d1c0:	e5 95       	asr	r30
    d1c2:	e5 95       	asr	r30
    d1c4:	e5 95       	asr	r30
    d1c6:	ff 27       	eor	r31, r31
    d1c8:	e7 fd       	sbrc	r30, 7
    d1ca:	f0 95       	com	r31
    d1cc:	f6 95       	lsr	r31
    d1ce:	fe 2f       	mov	r31, r30
    d1d0:	ee 27       	eor	r30, r30
    d1d2:	f7 95       	ror	r31
    d1d4:	e7 95       	ror	r30
    d1d6:	e8 0f       	add	r30, r24
    d1d8:	f1 1d       	adc	r31, r1
    d1da:	ee 5f       	subi	r30, 0xFE	; 254
    d1dc:	f4 4e       	sbci	r31, 0xE4	; 228
  y = y % 8;
    d1de:	67 70       	andi	r22, 0x07	; 7
  if (y) {
    d1e0:	c1 f0       	breq	.+48     	; 0xd212 <_Z13lcd_vlineStiphaah+0x86>
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
    d1e2:	a1 e0       	ldi	r26, 0x01	; 1
    d1e4:	b0 e0       	ldi	r27, 0x00	; 0
    d1e6:	06 2e       	mov	r0, r22
    d1e8:	02 c0       	rjmp	.+4      	; 0xd1ee <_Z13lcd_vlineStiphaah+0x62>
    d1ea:	aa 0f       	add	r26, r26
    d1ec:	bb 1f       	adc	r27, r27
    d1ee:	0a 94       	dec	r0
    d1f0:	e2 f7       	brpl	.-8      	; 0xd1ea <_Z13lcd_vlineStiphaah+0x5e>
    d1f2:	a1 95       	neg	r26
    d1f4:	a2 23       	and	r26, r18
    d1f6:	80 81       	ld	r24, Z
    d1f8:	a8 27       	eor	r26, r24
    d1fa:	a0 83       	st	Z, r26
    p += DISPLAY_W;
    d1fc:	e0 58       	subi	r30, 0x80	; 128
    d1fe:	ff 4f       	sbci	r31, 0xFF	; 255
    h -= 8-y;
    d200:	68 50       	subi	r22, 0x08	; 8
    d202:	46 0f       	add	r20, r22
    d204:	06 c0       	rjmp	.+12     	; 0xd212 <_Z13lcd_vlineStiphaah+0x86>
  }
  while (h>0) {
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
    d206:	80 81       	ld	r24, Z
    d208:	82 27       	eor	r24, r18
    d20a:	80 83       	st	Z, r24
    p += DISPLAY_W;
    d20c:	e0 58       	subi	r30, 0x80	; 128
    d20e:	ff 4f       	sbci	r31, 0xFF	; 255
void lcd_hline(uint8_t x,uint8_t y, int8_t w, uint8_t att)
{
  lcd_hlineStip(x, y, w, 0xff, att);
}

void lcd_vlineStip(uint8_t x, int8_t y, int8_t h, uint8_t pat)
    d210:	48 50       	subi	r20, 0x08	; 8
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(y)-1) & pat;
    p += DISPLAY_W;
    h -= 8-y;
  }
  while (h>0) {
    d212:	14 16       	cp	r1, r20
    d214:	c4 f3       	brlt	.-16     	; 0xd206 <_Z13lcd_vlineStiphaah+0x7a>
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= pat;
    p += DISPLAY_W;
    h -= 8;
  }
  h = (h+8) % 8;
    d216:	84 2f       	mov	r24, r20
    d218:	99 27       	eor	r25, r25
    d21a:	87 fd       	sbrc	r24, 7
    d21c:	90 95       	com	r25
    d21e:	08 96       	adiw	r24, 0x08	; 8
    d220:	68 e0       	ldi	r22, 0x08	; 8
    d222:	70 e0       	ldi	r23, 0x00	; 0
    d224:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
  if (h) {
    d228:	88 23       	and	r24, r24
    d22a:	71 f0       	breq	.+28     	; 0xd248 <_Z13lcd_vlineStiphaah+0xbc>
    p -= DISPLAY_W;
    d22c:	e0 58       	subi	r30, 0x80	; 128
    d22e:	f0 40       	sbci	r31, 0x00	; 0
    assert(p >= displayBuf && p < DISPLAY_END);
    *p ^= ~(BITMASK(h)-1) & pat;
    d230:	41 e0       	ldi	r20, 0x01	; 1
    d232:	50 e0       	ldi	r21, 0x00	; 0
    d234:	02 c0       	rjmp	.+4      	; 0xd23a <_Z13lcd_vlineStiphaah+0xae>
    d236:	44 0f       	add	r20, r20
    d238:	55 1f       	adc	r21, r21
    d23a:	8a 95       	dec	r24
    d23c:	e2 f7       	brpl	.-8      	; 0xd236 <_Z13lcd_vlineStiphaah+0xaa>
    d23e:	41 95       	neg	r20
    d240:	42 23       	and	r20, r18
    d242:	80 81       	ld	r24, Z
    d244:	84 27       	eor	r24, r20
    d246:	80 83       	st	Z, r24
    d248:	08 95       	ret

0000d24a <_Z9lcd_vlinehaa>:
  }
}

void lcd_vline(uint8_t x, int8_t y, int8_t h)
{
  lcd_vlineStip(x, y, h, 0xff);
    d24a:	2f ef       	ldi	r18, 0xFF	; 255
    d24c:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
}
    d250:	08 95       	ret

0000d252 <_Z14lcd_outdezNAtthhihh>:

  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
    d252:	2f 92       	push	r2
    d254:	3f 92       	push	r3
    d256:	4f 92       	push	r4
    d258:	5f 92       	push	r5
    d25a:	6f 92       	push	r6
    d25c:	7f 92       	push	r7
    d25e:	8f 92       	push	r8
    d260:	9f 92       	push	r9
    d262:	af 92       	push	r10
    d264:	bf 92       	push	r11
    d266:	cf 92       	push	r12
    d268:	df 92       	push	r13
    d26a:	ef 92       	push	r14
    d26c:	ff 92       	push	r15
    d26e:	0f 93       	push	r16
    d270:	1f 93       	push	r17
    d272:	df 93       	push	r29
    d274:	cf 93       	push	r28
    d276:	00 d0       	rcall	.+0      	; 0xd278 <_Z14lcd_outdezNAtthhihh+0x26>
    d278:	cd b7       	in	r28, 0x3d	; 61
    d27a:	de b7       	in	r29, 0x3e	; 62
    d27c:	e8 2f       	mov	r30, r24
    d27e:	f6 2e       	mov	r15, r22
    d280:	5b 83       	std	Y+3, r21	; 0x03
    d282:	4a 83       	std	Y+2, r20	; 0x02
    d284:	12 2f       	mov	r17, r18
    d286:	e0 2e       	mov	r14, r16
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);
    d288:	42 2f       	mov	r20, r18
    d28a:	55 27       	eor	r21, r21
    d28c:	47 fd       	sbrc	r20, 7
    d28e:	50 95       	com	r21
    d290:	40 77       	andi	r20, 0x70	; 112
    d292:	50 70       	andi	r21, 0x00	; 0
    d294:	84 e0       	ldi	r24, 0x04	; 4
    d296:	55 95       	asr	r21
    d298:	47 95       	ror	r20
    d29a:	8a 95       	dec	r24
    d29c:	e1 f7       	brne	.-8      	; 0xd296 <_Z14lcd_outdezNAtthhihh+0x44>
    d29e:	44 50       	subi	r20, 0x04	; 4

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
    d2a0:	23 ff       	sbrs	r18, 3
    d2a2:	02 c0       	rjmp	.+4      	; 0xd2a8 <_Z14lcd_outdezNAtthhihh+0x56>
    d2a4:	18 50       	subi	r17, 0x08	; 8
    d2a6:	0c c0       	rjmp	.+24     	; 0xd2c0 <_Z14lcd_outdezNAtthhihh+0x6e>
  else if (val < 0) { neg=true; val=-val; }
    d2a8:	8a 81       	ldd	r24, Y+2	; 0x02
    d2aa:	9b 81       	ldd	r25, Y+3	; 0x03
    d2ac:	97 ff       	sbrs	r25, 7
    d2ae:	08 c0       	rjmp	.+16     	; 0xd2c0 <_Z14lcd_outdezNAtthhihh+0x6e>
    d2b0:	90 95       	com	r25
    d2b2:	81 95       	neg	r24
    d2b4:	9f 4f       	sbci	r25, 0xFF	; 255
    d2b6:	9b 83       	std	Y+3, r25	; 0x03
    d2b8:	8a 83       	std	Y+2, r24	; 0x02
    d2ba:	77 24       	eor	r7, r7
    d2bc:	73 94       	inc	r7
    d2be:	01 c0       	rjmp	.+2      	; 0xd2c2 <_Z14lcd_outdezNAtthhihh+0x70>
void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  uint8_t fw = FWNUM;
  int8_t mode = MODE(flags);

  bool neg = false;
    d2c0:	77 24       	eor	r7, r7

  uint8_t xn = 0;
  uint8_t ln = 2;
  char c;

  if (mode != MODE(LEADING0)) {
    d2c2:	4d 3f       	cpi	r20, 0xFD	; 253
    d2c4:	f1 f0       	breq	.+60     	; 0xd302 <_Z14lcd_outdezNAtthhihh+0xb0>
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    d2c6:	8a 81       	ldd	r24, Y+2	; 0x02
    d2c8:	9b 81       	ldd	r25, Y+3	; 0x03
    d2ca:	6a e0       	ldi	r22, 0x0A	; 10
    d2cc:	70 e0       	ldi	r23, 0x00	; 0
    d2ce:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
  uint8_t xn = 0;
  uint8_t ln = 2;
  char c;

  if (mode != MODE(LEADING0)) {
    len = 1;
    d2d2:	ee 24       	eor	r14, r14
    d2d4:	e3 94       	inc	r14
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
      len++;
      tmp /= 10;
    d2d6:	2a e0       	ldi	r18, 0x0A	; 10
    d2d8:	30 e0       	ldi	r19, 0x00	; 0
  char c;

  if (mode != MODE(LEADING0)) {
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
    d2da:	05 c0       	rjmp	.+10     	; 0xd2e6 <_Z14lcd_outdezNAtthhihh+0x94>
      len++;
    d2dc:	e3 94       	inc	r14
      tmp /= 10;
    d2de:	cb 01       	movw	r24, r22
    d2e0:	b9 01       	movw	r22, r18
    d2e2:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
  char c;

  if (mode != MODE(LEADING0)) {
    len = 1;
    uint16_t tmp = ((uint16_t)val) / 10;
    while (tmp) {
    d2e6:	61 15       	cp	r22, r1
    d2e8:	71 05       	cpc	r23, r1
    d2ea:	c1 f7       	brne	.-16     	; 0xd2dc <_Z14lcd_outdezNAtthhihh+0x8a>
      len++;
      tmp /= 10;
    }
    if (len <= mode)
    d2ec:	2e 2d       	mov	r18, r14
    d2ee:	30 e0       	ldi	r19, 0x00	; 0
    d2f0:	84 2f       	mov	r24, r20
    d2f2:	99 27       	eor	r25, r25
    d2f4:	87 fd       	sbrc	r24, 7
    d2f6:	90 95       	com	r25
    d2f8:	82 17       	cp	r24, r18
    d2fa:	93 07       	cpc	r25, r19
    d2fc:	14 f0       	brlt	.+4      	; 0xd302 <_Z14lcd_outdezNAtthhihh+0xb0>
      len = mode + 1;
    d2fe:	e4 2e       	mov	r14, r20
    d300:	e3 94       	inc	r14
  }

  if (flags & DBLSIZE) {
    d302:	12 fd       	sbrc	r17, 2
    d304:	06 c0       	rjmp	.+12     	; 0xd312 <_Z14lcd_outdezNAtthhihh+0xc0>
    fw += FWNUM;
  }
  else {
    if (flags & LEFT) {
    d306:	17 ff       	sbrs	r17, 7
    d308:	07 c0       	rjmp	.+14     	; 0xd318 <_Z14lcd_outdezNAtthhihh+0xc6>
      if (mode > 0)
    d30a:	14 16       	cp	r1, r20
    d30c:	2c f4       	brge	.+10     	; 0xd318 <_Z14lcd_outdezNAtthhihh+0xc6>
        x += 2;
    d30e:	ee 5f       	subi	r30, 0xFE	; 254
    d310:	03 c0       	rjmp	.+6      	; 0xd318 <_Z14lcd_outdezNAtthhihh+0xc6>
    if (len <= mode)
      len = mode + 1;
  }

  if (flags & DBLSIZE) {
    fw += FWNUM;
    d312:	0a e0       	ldi	r16, 0x0A	; 10
    d314:	c0 2e       	mov	r12, r16
    d316:	02 c0       	rjmp	.+4      	; 0xd31c <_Z14lcd_outdezNAtthhihh+0xca>
  LEADING0 means pad 0 to the left of sig. digits up to 'len' total characters
*/

void lcd_outdezNAtt(uint8_t x, uint8_t y, int16_t val, uint8_t flags, uint8_t len)
{
  uint8_t fw = FWNUM;
    d318:	b5 e0       	ldi	r27, 0x05	; 5
    d31a:	cb 2e       	mov	r12, r27
      if (mode > 0)
        x += 2;
    }
  }

  if (flags & LEFT) {
    d31c:	17 ff       	sbrs	r17, 7
    d31e:	06 c0       	rjmp	.+12     	; 0xd32c <_Z14lcd_outdezNAtthhihh+0xda>
    x += len * fw;
    d320:	ce 9c       	mul	r12, r14
    d322:	80 2d       	mov	r24, r0
    d324:	11 24       	eor	r1, r1
    d326:	e8 0f       	add	r30, r24
    if (neg)
    d328:	71 10       	cpse	r7, r1
      x += FWNUM;
    d32a:	eb 5f       	subi	r30, 0xFB	; 251
  }

  lcd_lastPos = x;
    d32c:	e0 93 02 1f 	sts	0x1F02, r30
  x -= fw + 1;
    d330:	0c 2d       	mov	r16, r12
    d332:	00 95       	com	r16
    d334:	0e 0f       	add	r16, r30

  for (uint8_t i=1; i<=len; i++) {
    d336:	aa 24       	eor	r10, r10
    d338:	a3 94       	inc	r10
  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
  uint8_t ln = 2;
    d33a:	a2 e0       	ldi	r26, 0x02	; 2
    d33c:	ba 2e       	mov	r11, r26

  bool neg = false;
  if (flags & UNSIGN) { flags -= UNSIGN; }
  else if (val < 0) { neg=true; val=-val; }

  uint8_t xn = 0;
    d33e:	dd 24       	eor	r13, r13

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    c = ((uint16_t)val % 10) + '0';
    d340:	fa e0       	ldi	r31, 0x0A	; 10
    d342:	8f 2e       	mov	r8, r31
    d344:	91 2c       	mov	r9, r1
    if (c=='1' && flags&DBLSIZE && i==len) { x+=2; flags|=CONDENSED; }
    lcd_putcAtt(x, y, c, flags);
    if (mode==i) {
    d346:	24 2e       	mov	r2, r20
    d348:	33 24       	eor	r3, r3
    d34a:	27 fc       	sbrc	r2, 7
    d34c:	30 94       	com	r3
          else { xn--; ln++; }
        }
      }
      else {
        x -= 2;
        lcd_plot(x+1, y+6);
    d34e:	e6 e0       	ldi	r30, 0x06	; 6
    d350:	4e 2e       	mov	r4, r30
    d352:	4f 0c       	add	r4, r15
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    d354:	5a c0       	rjmp	.+180    	; 0xd40a <_Z14lcd_outdezNAtthhihh+0x1b8>
    c = ((uint16_t)val % 10) + '0';
    d356:	8a 81       	ldd	r24, Y+2	; 0x02
    d358:	9b 81       	ldd	r25, Y+3	; 0x03
    d35a:	b4 01       	movw	r22, r8
    d35c:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    d360:	38 2f       	mov	r19, r24
    d362:	30 5d       	subi	r19, 0xD0	; 208
    if (c=='1' && flags&DBLSIZE && i==len) { x+=2; flags|=CONDENSED; }
    d364:	31 33       	cpi	r19, 0x31	; 49
    d366:	31 f4       	brne	.+12     	; 0xd374 <_Z14lcd_outdezNAtthhihh+0x122>
    d368:	12 ff       	sbrs	r17, 2
    d36a:	04 c0       	rjmp	.+8      	; 0xd374 <_Z14lcd_outdezNAtthhihh+0x122>
    d36c:	ae 14       	cp	r10, r14
    d36e:	11 f4       	brne	.+4      	; 0xd374 <_Z14lcd_outdezNAtthhihh+0x122>
    d370:	0e 5f       	subi	r16, 0xFE	; 254
    d372:	18 60       	ori	r17, 0x08	; 8
    lcd_putcAtt(x, y, c, flags);
    d374:	80 2f       	mov	r24, r16
    d376:	6f 2d       	mov	r22, r15
    d378:	43 2f       	mov	r20, r19
    d37a:	21 2f       	mov	r18, r17
    d37c:	39 83       	std	Y+1, r19	; 0x01
    d37e:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    if (mode==i) {
    d382:	8a 2d       	mov	r24, r10
    d384:	90 e0       	ldi	r25, 0x00	; 0
    d386:	39 81       	ldd	r19, Y+1	; 0x01
    d388:	28 16       	cp	r2, r24
    d38a:	39 06       	cpc	r3, r25
    d38c:	a9 f5       	brne	.+106    	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
      flags &= ~PREC2; // TODO not needed but removes 64bytes, could be improved for sure, check asm
    d38e:	1f 79       	andi	r17, 0x9F	; 159
      if (flags & DBLSIZE) {
    d390:	12 ff       	sbrs	r17, 2
    d392:	1b c0       	rjmp	.+54     	; 0xd3ca <_Z14lcd_outdezNAtthhihh+0x178>
        xn = x;
        if(c=='2' || c=='3' || c=='1') ln++;
    d394:	83 2f       	mov	r24, r19
    d396:	81 53       	subi	r24, 0x31	; 49
    d398:	83 30       	cpi	r24, 0x03	; 3
    d39a:	08 f4       	brcc	.+2      	; 0xd39e <_Z14lcd_outdezNAtthhihh+0x14c>
    d39c:	b3 94       	inc	r11
        uint8_t tn = ((uint16_t)val/10) % 10;
    d39e:	8a 81       	ldd	r24, Y+2	; 0x02
    d3a0:	9b 81       	ldd	r25, Y+3	; 0x03
    d3a2:	b4 01       	movw	r22, r8
    d3a4:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    d3a8:	cb 01       	movw	r24, r22
    d3aa:	b4 01       	movw	r22, r8
    d3ac:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
        if (tn==2 || tn==4) {
    d3b0:	82 30       	cpi	r24, 0x02	; 2
    d3b2:	11 f0       	breq	.+4      	; 0xd3b8 <_Z14lcd_outdezNAtthhihh+0x166>
    d3b4:	84 30       	cpi	r24, 0x04	; 4
    d3b6:	f9 f4       	brne	.+62     	; 0xd3f6 <_Z14lcd_outdezNAtthhihh+0x1a4>
          if (c=='4') { xn++; }
    d3b8:	34 33       	cpi	r19, 0x34	; 52
    d3ba:	19 f4       	brne	.+6      	; 0xd3c2 <_Z14lcd_outdezNAtthhihh+0x170>
    d3bc:	d0 2e       	mov	r13, r16
    d3be:	d3 94       	inc	r13
    d3c0:	1b c0       	rjmp	.+54     	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
          else { xn--; ln++; }
    d3c2:	d0 2e       	mov	r13, r16
    d3c4:	da 94       	dec	r13
    d3c6:	b3 94       	inc	r11
    d3c8:	17 c0       	rjmp	.+46     	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
        }
      }
      else {
        x -= 2;
    d3ca:	02 50       	subi	r16, 0x02	; 2
        lcd_plot(x+1, y+6);
    d3cc:	50 2e       	mov	r5, r16
    d3ce:	53 94       	inc	r5
    d3d0:	85 2d       	mov	r24, r5
    d3d2:	64 2d       	mov	r22, r4
    d3d4:	40 e0       	ldi	r20, 0x00	; 0
    d3d6:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
        if (flags & INVERS || (flags & BLINK && BLINK_ON_PHASE))
    d3da:	11 fd       	sbrc	r17, 1
    d3dc:	06 c0       	rjmp	.+12     	; 0xd3ea <_Z14lcd_outdezNAtthhihh+0x198>
    d3de:	10 ff       	sbrs	r17, 0
    d3e0:	0b c0       	rjmp	.+22     	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
    d3e2:	80 91 34 1f 	lds	r24, 0x1F34
    d3e6:	86 ff       	sbrs	r24, 6
    d3e8:	07 c0       	rjmp	.+14     	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
          lcd_vline(x+1, y, 8);
    d3ea:	85 2d       	mov	r24, r5
    d3ec:	6f 2d       	mov	r22, r15
    d3ee:	48 e0       	ldi	r20, 0x08	; 8
    d3f0:	0e 94 25 69 	call	0xd24a	; 0xd24a <_Z9lcd_vlinehaa>
    d3f4:	01 c0       	rjmp	.+2      	; 0xd3f8 <_Z14lcd_outdezNAtthhihh+0x1a6>
    if (c=='1' && flags&DBLSIZE && i==len) { x+=2; flags|=CONDENSED; }
    lcd_putcAtt(x, y, c, flags);
    if (mode==i) {
      flags &= ~PREC2; // TODO not needed but removes 64bytes, could be improved for sure, check asm
      if (flags & DBLSIZE) {
        xn = x;
    d3f6:	d0 2e       	mov	r13, r16
        lcd_plot(x+1, y+6);
        if (flags & INVERS || (flags & BLINK && BLINK_ON_PHASE))
          lcd_vline(x+1, y, 8);
      }
    }
    val = ((uint16_t)val) / 10;
    d3f8:	8a 81       	ldd	r24, Y+2	; 0x02
    d3fa:	9b 81       	ldd	r25, Y+3	; 0x03
    d3fc:	b4 01       	movw	r22, r8
    d3fe:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    d402:	7b 83       	std	Y+3, r23	; 0x03
    d404:	6a 83       	std	Y+2, r22	; 0x02
    x-=fw;
    d406:	0c 19       	sub	r16, r12
  }

  lcd_lastPos = x;
  x -= fw + 1;

  for (uint8_t i=1; i<=len; i++) {
    d408:	a3 94       	inc	r10
    d40a:	ea 14       	cp	r14, r10
    d40c:	08 f0       	brcs	.+2      	; 0xd410 <_Z14lcd_outdezNAtthhihh+0x1be>
    d40e:	a3 cf       	rjmp	.-186    	; 0xd356 <_Z14lcd_outdezNAtthhihh+0x104>
      }
    }
    val = ((uint16_t)val) / 10;
    x-=fw;
  }
  if (xn) {
    d410:	dd 20       	and	r13, r13
    d412:	71 f0       	breq	.+28     	; 0xd430 <_Z14lcd_outdezNAtthhihh+0x1de>
    lcd_hline(xn, y+2*FH-3, ln);
    d414:	6f 2d       	mov	r22, r15
    d416:	63 5f       	subi	r22, 0xF3	; 243
    d418:	8d 2d       	mov	r24, r13
    d41a:	4b 2d       	mov	r20, r11
    d41c:	20 e0       	ldi	r18, 0x00	; 0
    d41e:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
    lcd_hline(xn, y+2*FH-2, ln);
    d422:	6f 2d       	mov	r22, r15
    d424:	62 5f       	subi	r22, 0xF2	; 242
    d426:	8d 2d       	mov	r24, r13
    d428:	4b 2d       	mov	r20, r11
    d42a:	20 e0       	ldi	r18, 0x00	; 0
    d42c:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
  }

  // TODO we could change the '-' to have one pixel removed at its left
  if (neg) { lcd_putcAtt(x, y, '-', flags); lcd_plot(x, y+3); }
    d430:	77 20       	and	r7, r7
    d432:	61 f0       	breq	.+24     	; 0xd44c <_Z14lcd_outdezNAtthhihh+0x1fa>
    d434:	80 2f       	mov	r24, r16
    d436:	6f 2d       	mov	r22, r15
    d438:	4d e2       	ldi	r20, 0x2D	; 45
    d43a:	21 2f       	mov	r18, r17
    d43c:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    d440:	6f 2d       	mov	r22, r15
    d442:	6d 5f       	subi	r22, 0xFD	; 253
    d444:	80 2f       	mov	r24, r16
    d446:	40 e0       	ldi	r20, 0x00	; 0
    d448:	0e 94 49 68 	call	0xd092	; 0xd092 <_Z8lcd_plothhh>
}
    d44c:	0f 90       	pop	r0
    d44e:	0f 90       	pop	r0
    d450:	0f 90       	pop	r0
    d452:	cf 91       	pop	r28
    d454:	df 91       	pop	r29
    d456:	1f 91       	pop	r17
    d458:	0f 91       	pop	r16
    d45a:	ff 90       	pop	r15
    d45c:	ef 90       	pop	r14
    d45e:	df 90       	pop	r13
    d460:	cf 90       	pop	r12
    d462:	bf 90       	pop	r11
    d464:	af 90       	pop	r10
    d466:	9f 90       	pop	r9
    d468:	8f 90       	pop	r8
    d46a:	7f 90       	pop	r7
    d46c:	6f 90       	pop	r6
    d46e:	5f 90       	pop	r5
    d470:	4f 90       	pop	r4
    d472:	3f 90       	pop	r3
    d474:	2f 90       	pop	r2
    d476:	08 95       	ret

0000d478 <_Z13lcd_outdezAtthhih>:
{
  lcd_outdezAtt(x, y, val);
}

void lcd_outdezAtt(uint8_t x, uint8_t y, int16_t val, uint8_t mode)
{
    d478:	0f 93       	push	r16
  lcd_outdezNAtt(x, y, val, mode);
    d47a:	00 e0       	ldi	r16, 0x00	; 0
    d47c:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
}
    d480:	0f 91       	pop	r16
    d482:	08 95       	ret

0000d484 <_Z11lcd_outdez8hha>:
    val>>=4;
  }
}
void lcd_outdez8(uint8_t x, uint8_t y, int8_t val)
{
  lcd_outdezAtt(x, y, val);
    d484:	55 27       	eor	r21, r21
    d486:	47 fd       	sbrc	r20, 7
    d488:	50 95       	com	r21
    d48a:	20 e0       	ldi	r18, 0x00	; 0
    d48c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
}
    d490:	08 95       	ret

0000d492 <_Z8lcd_recthhhhhh>:
{
  lcd_vlineStip(x, y, h, 0xff);
}

void lcd_rect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t pat, uint8_t att)
{
    d492:	df 92       	push	r13
    d494:	ef 92       	push	r14
    d496:	ff 92       	push	r15
    d498:	0f 93       	push	r16
    d49a:	1f 93       	push	r17
    d49c:	cf 93       	push	r28
    d49e:	df 93       	push	r29
    d4a0:	18 2f       	mov	r17, r24
    d4a2:	d6 2f       	mov	r29, r22
    d4a4:	f4 2e       	mov	r15, r20
    d4a6:	d2 2e       	mov	r13, r18
    d4a8:	c0 2f       	mov	r28, r16
  if (!((att & BLINK) && BLINK_ON_PHASE)) {
    d4aa:	e0 fe       	sbrs	r14, 0
    d4ac:	04 c0       	rjmp	.+8      	; 0xd4b6 <_Z8lcd_recthhhhhh+0x24>
    d4ae:	80 91 34 1f 	lds	r24, 0x1F34
    d4b2:	86 fd       	sbrc	r24, 6
    d4b4:	1d c0       	rjmp	.+58     	; 0xd4f0 <_Z8lcd_recthhhhhh+0x5e>
    lcd_vlineStip(x, y, h, pat);
    d4b6:	81 2f       	mov	r24, r17
    d4b8:	6d 2f       	mov	r22, r29
    d4ba:	4d 2d       	mov	r20, r13
    d4bc:	2c 2f       	mov	r18, r28
    d4be:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
    lcd_hlineStip(x, y+h-1, w, pat);
    d4c2:	6d 2f       	mov	r22, r29
    d4c4:	61 50       	subi	r22, 0x01	; 1
    d4c6:	6d 0d       	add	r22, r13
    d4c8:	81 2f       	mov	r24, r17
    d4ca:	4f 2d       	mov	r20, r15
    d4cc:	2c 2f       	mov	r18, r28
    d4ce:	00 e0       	ldi	r16, 0x00	; 0
    d4d0:	0e 94 68 68 	call	0xd0d0	; 0xd0d0 <_Z13lcd_hlineStipahahh>
    lcd_vlineStip(x+w-1, y, h, pat);
    d4d4:	81 2f       	mov	r24, r17
    d4d6:	81 50       	subi	r24, 0x01	; 1
    d4d8:	8f 0d       	add	r24, r15
    d4da:	6d 2f       	mov	r22, r29
    d4dc:	4d 2d       	mov	r20, r13
    d4de:	2c 2f       	mov	r18, r28
    d4e0:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
    lcd_hlineStip(x, y, w, pat);
    d4e4:	81 2f       	mov	r24, r17
    d4e6:	6d 2f       	mov	r22, r29
    d4e8:	4f 2d       	mov	r20, r15
    d4ea:	2c 2f       	mov	r18, r28
    d4ec:	0e 94 68 68 	call	0xd0d0	; 0xd0d0 <_Z13lcd_hlineStipahahh>
  }
}
    d4f0:	df 91       	pop	r29
    d4f2:	cf 91       	pop	r28
    d4f4:	1f 91       	pop	r17
    d4f6:	0f 91       	pop	r16
    d4f8:	ff 90       	pop	r15
    d4fa:	ef 90       	pop	r14
    d4fc:	df 90       	pop	r13
    d4fe:	08 95       	ret

0000d500 <_Z15lcd_filled_recthahhh>:

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t att)
{
    d500:	af 92       	push	r10
    d502:	bf 92       	push	r11
    d504:	cf 92       	push	r12
    d506:	df 92       	push	r13
    d508:	ef 92       	push	r14
    d50a:	ff 92       	push	r15
    d50c:	0f 93       	push	r16
    d50e:	1f 93       	push	r17
    d510:	cf 93       	push	r28
    d512:	df 93       	push	r29
    d514:	b8 2e       	mov	r11, r24
    d516:	14 2f       	mov	r17, r20
  for (int8_t i=y; i<y+h; i++) {
    d518:	a6 2e       	mov	r10, r22
    d51a:	c0 e0       	ldi	r28, 0x00	; 0
    d51c:	d0 e0       	ldi	r29, 0x00	; 0
    lcd_vlineStip(x+w-1, y, h, pat);
    lcd_hlineStip(x, y, w, pat);
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t att)
    d51e:	e6 2e       	mov	r14, r22
    d520:	ff 24       	eor	r15, r15
    d522:	e7 fc       	sbrc	r14, 7
    d524:	f0 94       	com	r15
{
  for (int8_t i=y; i<y+h; i++) {
    d526:	67 01       	movw	r12, r14
    d528:	c2 0e       	add	r12, r18
    d52a:	d1 1c       	adc	r13, r1
    d52c:	0b c0       	rjmp	.+22     	; 0xd544 <_Z15lcd_filled_recthahhh+0x44>
    if (i>=0 && i<64) lcd_hline(x, i, w, att);
    d52e:	8a 2d       	mov	r24, r10
    d530:	80 34       	cpi	r24, 0x40	; 64
    d532:	30 f4       	brcc	.+12     	; 0xd540 <_Z15lcd_filled_recthahhh+0x40>
    d534:	8b 2d       	mov	r24, r11
    d536:	6a 2d       	mov	r22, r10
    d538:	41 2f       	mov	r20, r17
    d53a:	20 2f       	mov	r18, r16
    d53c:	0e 94 bf 68 	call	0xd17e	; 0xd17e <_Z9lcd_hlinehhah>
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t att)
{
  for (int8_t i=y; i<y+h; i++) {
    d540:	a3 94       	inc	r10
    d542:	21 96       	adiw	r28, 0x01	; 1
    lcd_vlineStip(x+w-1, y, h, pat);
    lcd_hlineStip(x, y, w, pat);
  }
}

void lcd_filled_rect(uint8_t x, int8_t y, uint8_t w, uint8_t h, uint8_t att)
    d544:	fe 01       	movw	r30, r28
    d546:	ee 0d       	add	r30, r14
    d548:	ff 1d       	adc	r31, r15
{
  for (int8_t i=y; i<y+h; i++) {
    d54a:	ec 15       	cp	r30, r12
    d54c:	fd 05       	cpc	r31, r13
    d54e:	7c f3       	brlt	.-34     	; 0xd52e <_Z15lcd_filled_recthahhh+0x2e>
    if (i>=0 && i<64) lcd_hline(x, i, w, att);
  }
}
    d550:	df 91       	pop	r29
    d552:	cf 91       	pop	r28
    d554:	1f 91       	pop	r17
    d556:	0f 91       	pop	r16
    d558:	ff 90       	pop	r15
    d55a:	ef 90       	pop	r14
    d55c:	df 90       	pop	r13
    d55e:	cf 90       	pop	r12
    d560:	bf 90       	pop	r11
    d562:	af 90       	pop	r10
    d564:	08 95       	ret

0000d566 <_Z8putsTimehhihh>:

void putsTime(uint8_t x,uint8_t y,int16_t tme,uint8_t att,uint8_t att2)
{
    d566:	df 92       	push	r13
    d568:	ef 92       	push	r14
    d56a:	ff 92       	push	r15
    d56c:	0f 93       	push	r16
    d56e:	1f 93       	push	r17
    d570:	cf 93       	push	r28
    d572:	df 93       	push	r29
    d574:	d8 2e       	mov	r13, r24
    d576:	16 2f       	mov	r17, r22
    d578:	ea 01       	movw	r28, r20
    d57a:	e2 2e       	mov	r14, r18
    d57c:	f0 2e       	mov	r15, r16
  if (tme<0) {
    d57e:	57 ff       	sbrs	r21, 7
    d580:	10 c0       	rjmp	.+32     	; 0xd5a2 <_Z8putsTimehhihh+0x3c>
    lcd_putcAtt(x - ((att & DBLSIZE) ? FW+1 : FWNUM), y, '-', att);
    d582:	22 ff       	sbrs	r18, 2
    d584:	02 c0       	rjmp	.+4      	; 0xd58a <_Z8putsTimehhihh+0x24>
    d586:	87 e0       	ldi	r24, 0x07	; 7
    d588:	01 c0       	rjmp	.+2      	; 0xd58c <_Z8putsTimehhihh+0x26>
    d58a:	85 e0       	ldi	r24, 0x05	; 5
    d58c:	9d 2d       	mov	r25, r13
    d58e:	98 1b       	sub	r25, r24
    d590:	89 2f       	mov	r24, r25
    d592:	61 2f       	mov	r22, r17
    d594:	4d e2       	ldi	r20, 0x2D	; 45
    d596:	2e 2d       	mov	r18, r14
    d598:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
    tme = -tme;
    d59c:	d0 95       	com	r29
    d59e:	c1 95       	neg	r28
    d5a0:	df 4f       	sbci	r29, 0xFF	; 255
  }

  lcd_outdezNAtt(x, y, tme/60, att|LEADING0|LEFT, 2);
    d5a2:	ce 01       	movw	r24, r28
    d5a4:	6c e3       	ldi	r22, 0x3C	; 60
    d5a6:	70 e0       	ldi	r23, 0x00	; 0
    d5a8:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    d5ac:	ab 01       	movw	r20, r22
    d5ae:	2e 2d       	mov	r18, r14
    d5b0:	20 69       	ori	r18, 0x90	; 144
    d5b2:	8d 2d       	mov	r24, r13
    d5b4:	61 2f       	mov	r22, r17
    d5b6:	02 e0       	ldi	r16, 0x02	; 2
    d5b8:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
  lcd_putcAtt(lcd_lastPos-((att & DBLSIZE) ? 1 : 0), y, ':', att&att2);
    d5bc:	91 e0       	ldi	r25, 0x01	; 1
    d5be:	e2 fe       	sbrs	r14, 2
    d5c0:	90 e0       	ldi	r25, 0x00	; 0
    d5c2:	80 91 02 1f 	lds	r24, 0x1F02
    d5c6:	2f 2d       	mov	r18, r15
    d5c8:	2e 21       	and	r18, r14
    d5ca:	89 1b       	sub	r24, r25
    d5cc:	61 2f       	mov	r22, r17
    d5ce:	4a e3       	ldi	r20, 0x3A	; 58
    d5d0:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
  lcd_outdezNAtt(lcd_lastPos+FW, y, tme%60, att2|LEADING0|LEFT, 2);
    d5d4:	30 91 02 1f 	lds	r19, 0x1F02
    d5d8:	ce 01       	movw	r24, r28
    d5da:	6c e3       	ldi	r22, 0x3C	; 60
    d5dc:	70 e0       	ldi	r23, 0x00	; 0
    d5de:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    d5e2:	ac 01       	movw	r20, r24
    d5e4:	2f 2d       	mov	r18, r15
    d5e6:	20 69       	ori	r18, 0x90	; 144
    d5e8:	83 2f       	mov	r24, r19
    d5ea:	8a 5f       	subi	r24, 0xFA	; 250
    d5ec:	61 2f       	mov	r22, r17
    d5ee:	02 e0       	ldi	r16, 0x02	; 2
    d5f0:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
}
    d5f4:	df 91       	pop	r29
    d5f6:	cf 91       	pop	r28
    d5f8:	1f 91       	pop	r17
    d5fa:	0f 91       	pop	r16
    d5fc:	ff 90       	pop	r15
    d5fe:	ef 90       	pop	r14
    d600:	df 90       	pop	r13
    d602:	08 95       	ret

0000d604 <_Z9putsVoltshhjh>:

void putsVolts(uint8_t x, uint8_t y, uint16_t volts, uint8_t att)
{
    d604:	cf 93       	push	r28
    d606:	df 93       	push	r29
    d608:	d6 2f       	mov	r29, r22
    d60a:	c2 2f       	mov	r28, r18
  lcd_outdezAtt(x, y, (int16_t)volts, att|PREC1|UNSIGN);
    d60c:	28 65       	ori	r18, 0x58	; 88
    d60e:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  if (~att & NO_UNIT) lcd_putcAtt(lcd_lastPos, y, 'v', att);
    d612:	c3 fd       	sbrc	r28, 3
    d614:	07 c0       	rjmp	.+14     	; 0xd624 <_Z9putsVoltshhjh+0x20>
    d616:	80 91 02 1f 	lds	r24, 0x1F02
    d61a:	6d 2f       	mov	r22, r29
    d61c:	46 e7       	ldi	r20, 0x76	; 118
    d61e:	2c 2f       	mov	r18, r28
    d620:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
}
    d624:	df 91       	pop	r29
    d626:	cf 91       	pop	r28
    d628:	08 95       	ret

0000d62a <_Z8putsVBathhh>:

void putsVBat(uint8_t x, uint8_t y, uint8_t att)
{
    d62a:	24 2f       	mov	r18, r20
  putsVolts(x, y, g_vbat100mV, att);
    d62c:	40 91 79 15 	lds	r20, 0x1579
    d630:	50 e0       	ldi	r21, 0x00	; 0
    d632:	0e 94 02 6b 	call	0xd604	; 0xd604 <_Z9putsVoltshhjh>
}
    d636:	08 95       	ret

0000d638 <_Z10putsStrIdxhhPKchh>:

void putsStrIdx(uint8_t x, uint8_t y, const pm_char *str, uint8_t idx, uint8_t att)
{
    d638:	0f 93       	push	r16
    d63a:	cf 93       	push	r28
    d63c:	df 93       	push	r29
    d63e:	c6 2f       	mov	r28, r22
    d640:	d2 2f       	mov	r29, r18
  lcd_putsAtt(x, y, str, att /*i62*/&~BSS/**/); // Issue 62. G: Temporary fix? Permanent maybe, if we never use 
    d642:	20 2f       	mov	r18, r16
    d644:	2f 7e       	andi	r18, 0xEF	; 239
    d646:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
                                                //              putsStrIdx for SRAM based strings? 
  lcd_outdezNAtt(lcd_lastPos, y, idx, att|LEFT, 2);
    d64a:	20 2f       	mov	r18, r16
    d64c:	20 68       	ori	r18, 0x80	; 128
    d64e:	80 91 02 1f 	lds	r24, 0x1F02
    d652:	6c 2f       	mov	r22, r28
    d654:	4d 2f       	mov	r20, r29
    d656:	50 e0       	ldi	r21, 0x00	; 0
    d658:	02 e0       	ldi	r16, 0x02	; 2
    d65a:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
}
    d65e:	df 91       	pop	r29
    d660:	cf 91       	pop	r28
    d662:	0f 91       	pop	r16
    d664:	08 95       	ret

0000d666 <_Z10putsChnRawhhhh>:

void putsChnRaw(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
    d666:	0f 93       	push	r16
    d668:	02 2f       	mov	r16, r18
  if (idx==0)
    d66a:	44 23       	and	r20, r20
    d66c:	19 f4       	brne	.+6      	; 0xd674 <_Z10putsChnRawhhhh+0xe>
    lcd_putsnAtt(x, y, PSTR("----"), 4, att);
    d66e:	49 e9       	ldi	r20, 0x99	; 153
    d670:	5b e0       	ldi	r21, 0x0B	; 11
    d672:	13 c0       	rjmp	.+38     	; 0xd69a <_Z10putsChnRawhhhh+0x34>
  else if (idx<=NUM_STICKS)
    d674:	45 30       	cpi	r20, 0x05	; 5
    d676:	98 f4       	brcc	.+38     	; 0xd69e <_Z10putsChnRawhhhh+0x38>
    lcd_putsnAtt(x, y, modi12x3+g_eeGeneral.stickMode*16+4*(idx-1), 4, att);
    d678:	e0 91 82 12 	lds	r30, 0x1282
    d67c:	f0 e0       	ldi	r31, 0x00	; 0
    d67e:	ee 0f       	add	r30, r30
    d680:	ff 1f       	adc	r31, r31
    d682:	ee 0f       	add	r30, r30
    d684:	ff 1f       	adc	r31, r31
    d686:	31 97       	sbiw	r30, 0x01	; 1
    d688:	e4 0f       	add	r30, r20
    d68a:	f1 1d       	adc	r31, r1
    d68c:	ee 0f       	add	r30, r30
    d68e:	ff 1f       	adc	r31, r31
    d690:	ee 0f       	add	r30, r30
    d692:	ff 1f       	adc	r31, r31
    d694:	ec 51       	subi	r30, 0x1C	; 28
    d696:	ff 4f       	sbci	r31, 0xFF	; 255
    d698:	af 01       	movw	r20, r30
    d69a:	24 e0       	ldi	r18, 0x04	; 4
    d69c:	23 c0       	rjmp	.+70     	; 0xd6e4 <_Z10putsChnRawhhhh+0x7e>
  else if (idx<=NUM_STICKS+NUM_POTS+2+3)
    d69e:	4d 30       	cpi	r20, 0x0D	; 13
    d6a0:	40 f4       	brcc	.+16     	; 0xd6b2 <_Z10putsChnRawhhhh+0x4c>
    lcd_putsnAtt(x,y,PSTR("P1  P2  P3  MAX FULLCYC1CYC2CYC3")+4*(idx-5), 4, att);
    d6a2:	50 e0       	ldi	r21, 0x00	; 0
    d6a4:	44 0f       	add	r20, r20
    d6a6:	55 1f       	adc	r21, r21
    d6a8:	44 0f       	add	r20, r20
    d6aa:	55 1f       	adc	r21, r21
    d6ac:	4c 59       	subi	r20, 0x9C	; 156
    d6ae:	54 4f       	sbci	r21, 0xF4	; 244
    d6b0:	f4 cf       	rjmp	.-24     	; 0xd69a <_Z10putsChnRawhhhh+0x34>
  else if (idx<=NUM_STICKS+NUM_POTS+2+3+NUM_PPM)
    d6b2:	45 31       	cpi	r20, 0x15	; 21
    d6b4:	28 f4       	brcc	.+10     	; 0xd6c0 <_Z10putsChnRawhhhh+0x5a>
    putsStrIdx(x,y,PSTR("PPM"), idx - (NUM_STICKS+NUM_POTS+2+3), att);
    d6b6:	24 2f       	mov	r18, r20
    d6b8:	2c 50       	subi	r18, 0x0C	; 12
    d6ba:	44 e7       	ldi	r20, 0x74	; 116
    d6bc:	5b e0       	ldi	r21, 0x0B	; 11
    d6be:	06 c0       	rjmp	.+12     	; 0xd6cc <_Z10putsChnRawhhhh+0x66>
  else if (idx<=NUM_STICKS+NUM_POTS+2+3+NUM_PPM+NUM_CHNOUT)
    d6c0:	45 32       	cpi	r20, 0x25	; 37
    d6c2:	38 f4       	brcc	.+14     	; 0xd6d2 <_Z10putsChnRawhhhh+0x6c>
    putsStrIdx(x, y, PSTR("CH"), idx - (NUM_STICKS+NUM_POTS+2+3+NUM_PPM), att);
    d6c4:	24 2f       	mov	r18, r20
    d6c6:	24 51       	subi	r18, 0x14	; 20
    d6c8:	41 e7       	ldi	r20, 0x71	; 113
    d6ca:	5b e0       	ldi	r21, 0x0B	; 11
    d6cc:	0e 94 1c 6b 	call	0xd638	; 0xd638 <_Z10putsStrIdxhhPKchh>
    d6d0:	0b c0       	rjmp	.+22     	; 0xd6e8 <_Z10putsChnRawhhhh+0x82>
  else if (idx<=NUM_XCHNRAW)
    d6d2:	47 32       	cpi	r20, 0x27	; 39
    d6d4:	48 f4       	brcc	.+18     	; 0xd6e8 <_Z10putsChnRawhhhh+0x82>
    lcd_putsnAtt(x, y, PSTR(TELEMETRY_CHANNELS)+TELEMETRY_STRLEN*(idx-1-(NUM_STICKS+NUM_POTS+2+3+NUM_PPM+NUM_CHNOUT)), TELEMETRY_STRLEN, att);
    d6d6:	93 e0       	ldi	r25, 0x03	; 3
    d6d8:	49 9f       	mul	r20, r25
    d6da:	a0 01       	movw	r20, r0
    d6dc:	11 24       	eor	r1, r1
    d6de:	45 50       	subi	r20, 0x05	; 5
    d6e0:	55 4f       	sbci	r21, 0xF5	; 245
    d6e2:	23 e0       	ldi	r18, 0x03	; 3
    d6e4:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    d6e8:	0f 91       	pop	r16
    d6ea:	08 95       	ret

0000d6ec <_Z7putsChnhhhh>:

void putsChn(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
  if (idx > 0 && idx <= NUM_CHNOUT)
    d6ec:	94 2f       	mov	r25, r20
    d6ee:	91 50       	subi	r25, 0x01	; 1
    d6f0:	90 31       	cpi	r25, 0x10	; 16
    d6f2:	18 f4       	brcc	.+6      	; 0xd6fa <_Z7putsChnhhhh+0xe>
    putsChnRaw(x, y, idx+20, att);
    d6f4:	4c 5e       	subi	r20, 0xEC	; 236
    d6f6:	0e 94 33 6b 	call	0xd666	; 0xd666 <_Z10putsChnRawhhhh>
    d6fa:	08 95       	ret

0000d6fc <_Z13putsChnLetterhhhh>:
}

void putsChnLetter(uint8_t x, uint8_t y, uint8_t idx, uint8_t attr)
{
    d6fc:	0f 93       	push	r16
    d6fe:	02 2f       	mov	r16, r18
  lcd_putsnAtt(x, y, PSTR("RETA")+CHANNEL_ORDER(idx)-1, 1, attr);
    d700:	e0 91 87 12 	lds	r30, 0x1287
    d704:	f0 e0       	ldi	r31, 0x00	; 0
    d706:	ee 0f       	add	r30, r30
    d708:	ff 1f       	adc	r31, r31
    d70a:	ee 0f       	add	r30, r30
    d70c:	ff 1f       	adc	r31, r31
    d70e:	31 97       	sbiw	r30, 0x01	; 1
    d710:	e4 0f       	add	r30, r20
    d712:	f1 1d       	adc	r31, r1
    d714:	ee 5f       	subi	r30, 0xFE	; 254
    d716:	f9 4f       	sbci	r31, 0xF9	; 249
    d718:	44 91       	lpm	r20, Z+
    d71a:	50 e0       	ldi	r21, 0x00	; 0
    d71c:	4c 59       	subi	r20, 0x9C	; 156
    d71e:	54 4f       	sbci	r21, 0xF4	; 244
    d720:	21 e0       	ldi	r18, 0x01	; 1
    d722:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    d726:	0f 91       	pop	r16
    d728:	08 95       	ret

0000d72a <_Z13putsModelNamehhPchh>:

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
{
    d72a:	0f 93       	push	r16
void putsChnLetter(uint8_t x, uint8_t y, uint8_t idx, uint8_t attr)
{
  lcd_putsnAtt(x, y, PSTR("RETA")+CHANNEL_ORDER(idx)-1, 1, attr);
}

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
    d72c:	fa 01       	movw	r30, r20
    d72e:	3a 96       	adiw	r30, 0x0a	; 10
{
  uint8_t len = sizeof(g_model.name);
    d730:	9a e0       	ldi	r25, 0x0A	; 10
  while (len>0 && !name[len-1]) --len;
    d732:	32 91       	ld	r19, -Z
    d734:	33 23       	and	r19, r19
    d736:	71 f4       	brne	.+28     	; 0xd754 <_Z13putsModelNamehhPchh+0x2a>
    d738:	91 50       	subi	r25, 0x01	; 1
    d73a:	d9 f7       	brne	.-10     	; 0xd732 <_Z13putsModelNamehhPchh+0x8>
  if (len==0) {
    putsStrIdx(x, y, PSTR("MODEL"), id+1, att|LEADING0);
    d73c:	2f 5f       	subi	r18, 0xFF	; 255
    d73e:	00 61       	ori	r16, 0x10	; 16
    d740:	4f e5       	ldi	r20, 0x5F	; 95
    d742:	5b e0       	ldi	r21, 0x0B	; 11
    d744:	0e 94 1c 6b 	call	0xd638	; 0xd638 <_Z10putsStrIdxhhPKchh>
    d748:	08 c0       	rjmp	.+16     	; 0xd75a <_Z13putsModelNamehhPchh+0x30>
  }
  else {
    lcd_putsnAtt(x, y, name, sizeof(g_model.name), ZCHAR|att);
    d74a:	00 62       	ori	r16, 0x20	; 32
    d74c:	2a e0       	ldi	r18, 0x0A	; 10
    d74e:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    d752:	03 c0       	rjmp	.+6      	; 0xd75a <_Z13putsModelNamehhPchh+0x30>

void putsModelName(uint8_t x, uint8_t y, char *name, uint8_t id, uint8_t att)
{
  uint8_t len = sizeof(g_model.name);
  while (len>0 && !name[len-1]) --len;
  if (len==0) {
    d754:	99 23       	and	r25, r25
    d756:	c9 f7       	brne	.-14     	; 0xd74a <_Z13putsModelNamehhPchh+0x20>
    d758:	f1 cf       	rjmp	.-30     	; 0xd73c <_Z13putsModelNamehhPchh+0x12>
    putsStrIdx(x, y, PSTR("MODEL"), id+1, att|LEADING0);
  }
  else {
    lcd_putsnAtt(x, y, name, sizeof(g_model.name), ZCHAR|att);
  }
}
    d75a:	0f 91       	pop	r16
    d75c:	08 95       	ret

0000d75e <_Z12putsSwitcheshhah>:

#define SWITCHES_STR "THR""RUD""ELE""ID0""ID1""ID2""AIL""GEA""TRN""SW1""SW2""SW3""SW4""SW5""SW6""SW7""SW8""SW9""SWA""SWB""SWC"
void putsSwitches(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
    d75e:	0f 93       	push	r16
    d760:	1f 93       	push	r17
    d762:	cf 93       	push	r28
    d764:	df 93       	push	r29
    d766:	d8 2f       	mov	r29, r24
    d768:	c6 2f       	mov	r28, r22
    d76a:	14 2f       	mov	r17, r20
    d76c:	02 2f       	mov	r16, r18
  switch(idx){
    d76e:	44 23       	and	r20, r20
    d770:	29 f0       	breq	.+10     	; 0xd77c <_Z12putsSwitcheshhah+0x1e>
    d772:	46 31       	cpi	r20, 0x16	; 22
    d774:	31 f0       	breq	.+12     	; 0xd782 <_Z12putsSwitcheshhah+0x24>
    d776:	4a 3e       	cpi	r20, 0xEA	; 234
    d778:	69 f4       	brne	.+26     	; 0xd794 <_Z12putsSwitcheshhah+0x36>
    d77a:	06 c0       	rjmp	.+12     	; 0xd788 <_Z12putsSwitcheshhah+0x2a>
    case  0:          lcd_putsAtt(x,y,PSTR("---"),att);return;
    d77c:	4b e5       	ldi	r20, 0x5B	; 91
    d77e:	5b e0       	ldi	r21, 0x0B	; 11
    d780:	05 c0       	rjmp	.+10     	; 0xd78c <_Z12putsSwitcheshhah+0x2e>
    case  MAX_SWITCH: lcd_putsAtt(x,y,PSTR("ON "),att);return;
    d782:	47 e5       	ldi	r20, 0x57	; 87
    d784:	5b e0       	ldi	r21, 0x0B	; 11
    d786:	02 c0       	rjmp	.+4      	; 0xd78c <_Z12putsSwitcheshhah+0x2e>
    case -MAX_SWITCH: lcd_putsAtt(x,y,PSTR("OFF"),att);return;
    d788:	43 e5       	ldi	r20, 0x53	; 83
    d78a:	5b e0       	ldi	r21, 0x0B	; 11
    d78c:	20 2f       	mov	r18, r16
    d78e:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    d792:	20 c0       	rjmp	.+64     	; 0xd7d4 <_Z12putsSwitcheshhah+0x76>
  }
  if (idx<0) lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/);
    d794:	47 ff       	sbrs	r20, 7
    d796:	05 c0       	rjmp	.+10     	; 0xd7a2 <_Z12putsSwitcheshhah+0x44>
    d798:	82 50       	subi	r24, 0x02	; 2
    d79a:	48 e0       	ldi	r20, 0x08	; 8
    d79c:	2e e5       	ldi	r18, 0x5E	; 94
    d79e:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
#ifndef FORCEINLINE
#define FORCEINLINE inline __attribute__ ((always_inline))
#endif

/// liefert Betrag des Arguments
template<class t> FORCEINLINE t abs(t a) { return a>0?a:-a; }
    d7a2:	e1 2f       	mov	r30, r17
    d7a4:	ff 27       	eor	r31, r31
    d7a6:	e7 fd       	sbrc	r30, 7
    d7a8:	f0 95       	com	r31
    d7aa:	f7 ff       	sbrs	r31, 7
    d7ac:	03 c0       	rjmp	.+6      	; 0xd7b4 <_Z12putsSwitcheshhah+0x56>
    d7ae:	f0 95       	com	r31
    d7b0:	e1 95       	neg	r30
    d7b2:	ff 4f       	sbci	r31, 0xFF	; 255
  lcd_putsnAtt(x, y, PSTR(SWITCHES_STR)+3*(abs(idx)-1), 3, att);
    d7b4:	ff 27       	eor	r31, r31
    d7b6:	e7 fd       	sbrc	r30, 7
    d7b8:	f0 95       	com	r31
    d7ba:	31 97       	sbiw	r30, 0x01	; 1
    d7bc:	af 01       	movw	r20, r30
    d7be:	44 0f       	add	r20, r20
    d7c0:	55 1f       	adc	r21, r21
    d7c2:	4e 0f       	add	r20, r30
    d7c4:	5f 1f       	adc	r21, r31
    d7c6:	4d 5e       	subi	r20, 0xED	; 237
    d7c8:	54 4f       	sbci	r21, 0xF4	; 244
    d7ca:	8d 2f       	mov	r24, r29
    d7cc:	6c 2f       	mov	r22, r28
    d7ce:	23 e0       	ldi	r18, 0x03	; 3
    d7d0:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
}
    d7d4:	df 91       	pop	r29
    d7d6:	cf 91       	pop	r28
    d7d8:	1f 91       	pop	r17
    d7da:	0f 91       	pop	r16
    d7dc:	08 95       	ret

0000d7de <_Z15putsFlightPhasehhah>:

void putsFlightPhase(uint8_t x, uint8_t y, int8_t idx, uint8_t att)
{
    d7de:	0f 93       	push	r16
    d7e0:	1f 93       	push	r17
    d7e2:	cf 93       	push	r28
    d7e4:	df 93       	push	r29
    d7e6:	18 2f       	mov	r17, r24
    d7e8:	d6 2f       	mov	r29, r22
    d7ea:	c4 2f       	mov	r28, r20
    d7ec:	02 2f       	mov	r16, r18
  if (idx==0) { lcd_putsAtt(x,y,PSTR("---"),att); return; }
    d7ee:	44 23       	and	r20, r20
    d7f0:	29 f4       	brne	.+10     	; 0xd7fc <_Z15putsFlightPhasehhah+0x1e>
    d7f2:	4f e0       	ldi	r20, 0x0F	; 15
    d7f4:	5b e0       	ldi	r21, 0x0B	; 11
    d7f6:	0e 94 c5 67 	call	0xcf8a	; 0xcf8a <_Z11lcd_putsAtthhPKch>
    d7fa:	10 c0       	rjmp	.+32     	; 0xd81c <_Z15putsFlightPhasehhah+0x3e>
  if (idx < 0) { lcd_vlineStip(x-2, y, 8, 0x5E/*'!'*/); idx = -idx; }
    d7fc:	47 ff       	sbrs	r20, 7
    d7fe:	06 c0       	rjmp	.+12     	; 0xd80c <_Z15putsFlightPhasehhah+0x2e>
    d800:	82 50       	subi	r24, 0x02	; 2
    d802:	48 e0       	ldi	r20, 0x08	; 8
    d804:	2e e5       	ldi	r18, 0x5E	; 94
    d806:	0e 94 c6 68 	call	0xd18c	; 0xd18c <_Z13lcd_vlineStiphaah>
    d80a:	c1 95       	neg	r28
  putsStrIdx(x, y, PSTR("FP"), idx-1, att);
    d80c:	2c 2f       	mov	r18, r28
    d80e:	21 50       	subi	r18, 0x01	; 1
    d810:	81 2f       	mov	r24, r17
    d812:	6d 2f       	mov	r22, r29
    d814:	4c e0       	ldi	r20, 0x0C	; 12
    d816:	5b e0       	ldi	r21, 0x0B	; 11
    d818:	0e 94 1c 6b 	call	0xd638	; 0xd638 <_Z10putsStrIdxhhPKchh>
}
    d81c:	df 91       	pop	r29
    d81e:	cf 91       	pop	r28
    d820:	1f 91       	pop	r17
    d822:	0f 91       	pop	r16
    d824:	08 95       	ret

0000d826 <_Z9putsCurvehhhh>:

#define CURV_STR "---x>0x<0|x|f>0f<0|f|"
void putsCurve(uint8_t x, uint8_t y, uint8_t idx, uint8_t att)
{
    d826:	0f 93       	push	r16
    d828:	02 2f       	mov	r16, r18
  if (idx < CURVE_BASE)
    d82a:	47 30       	cpi	r20, 0x07	; 7
    d82c:	50 f4       	brcc	.+20     	; 0xd842 <_Z9putsCurvehhhh+0x1c>
    lcd_putsnAtt(x, y, PSTR(CURV_STR)+3*idx, 3, att);
    d82e:	93 e0       	ldi	r25, 0x03	; 3
    d830:	49 9f       	mul	r20, r25
    d832:	a0 01       	movw	r20, r0
    d834:	11 24       	eor	r1, r1
    d836:	4a 50       	subi	r20, 0x0A	; 10
    d838:	55 4f       	sbci	r21, 0xF5	; 245
    d83a:	23 e0       	ldi	r18, 0x03	; 3
    d83c:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    d840:	06 c0       	rjmp	.+12     	; 0xd84e <_Z9putsCurvehhhh+0x28>
  else
    putsStrIdx(x, y, PSTR("c"), idx-CURVE_BASE+1, att);
    d842:	24 2f       	mov	r18, r20
    d844:	26 50       	subi	r18, 0x06	; 6
    d846:	44 ef       	ldi	r20, 0xF4	; 244
    d848:	5a e0       	ldi	r21, 0x0A	; 10
    d84a:	0e 94 1c 6b 	call	0xd638	; 0xd638 <_Z10putsStrIdxhhPKchh>
}
    d84e:	0f 91       	pop	r16
    d850:	08 95       	ret

0000d852 <_Z11putsTmrModehhh>:

void putsTmrMode(uint8_t x, uint8_t y, uint8_t attr)
{
    d852:	ff 92       	push	r15
    d854:	0f 93       	push	r16
    d856:	1f 93       	push	r17
    d858:	cf 93       	push	r28
    d85a:	df 93       	push	r29
    d85c:	f8 2e       	mov	r15, r24
    d85e:	16 2f       	mov	r17, r22
    d860:	d4 2f       	mov	r29, r20
  int8_t tm = g_model.tmrMode;
    d862:	c0 91 95 12 	lds	r28, 0x1295
    d866:	cc 0f       	add	r28, r28
    d868:	c5 95       	asr	r28
    d86a:	ec 2f       	mov	r30, r28
    d86c:	ff 27       	eor	r31, r31
    d86e:	e7 fd       	sbrc	r30, 7
    d870:	f0 95       	com	r31
    d872:	f7 ff       	sbrs	r31, 7
    d874:	03 c0       	rjmp	.+6      	; 0xd87c <_Z11putsTmrModehhh+0x2a>
    d876:	f0 95       	com	r31
    d878:	e1 95       	neg	r30
    d87a:	ff 4f       	sbci	r31, 0xFF	; 255
  if(abs(tm)<TMR_VAROFS) {
    d87c:	e0 31       	cpi	r30, 0x10	; 16
    d87e:	a4 f4       	brge	.+40     	; 0xd8a8 <_Z11putsTmrModehhh+0x56>
    lcd_putsnAtt(  x, y, PSTR("OFFABSRUsRU%ELsEL%THsTH%ALsAL%P1 P1%P2 P2%P3 P3%")+3*abs(tm),3,attr);
    d880:	83 e0       	ldi	r24, 0x03	; 3
    d882:	e8 02       	muls	r30, r24
    d884:	f0 01       	movw	r30, r0
    d886:	11 24       	eor	r1, r1
    d888:	ed 53       	subi	r30, 0x3D	; 61
    d88a:	f5 4f       	sbci	r31, 0xF5	; 245
    d88c:	8f 2d       	mov	r24, r15
    d88e:	61 2f       	mov	r22, r17
    d890:	af 01       	movw	r20, r30
    d892:	23 e0       	ldi	r18, 0x03	; 3
    d894:	0d 2f       	mov	r16, r29
    d896:	0e 94 7b 67 	call	0xcef6	; 0xcef6 <_Z12lcd_putsnAtthhPKchh>
    if(tm<(-TMRMODE_ABS)) lcd_putcAtt(x-1*FW, y, '!', attr);
    d89a:	cf 3f       	cpi	r28, 0xFF	; 255
    d89c:	3c f5       	brge	.+78     	; 0xd8ec <_Z11putsTmrModehhh+0x9a>
    d89e:	8f 2d       	mov	r24, r15
    d8a0:	86 50       	subi	r24, 0x06	; 6
    d8a2:	61 2f       	mov	r22, r17
    d8a4:	41 e2       	ldi	r20, 0x21	; 33
    d8a6:	1f c0       	rjmp	.+62     	; 0xd8e6 <_Z11putsTmrModehhh+0x94>
    return;
  }

  if(abs(tm)<(TMR_VAROFS+MAX_SWITCH-1)) { //normal on-off
    d8a8:	e5 32       	cpi	r30, 0x25	; 37
    d8aa:	6c f4       	brge	.+26     	; 0xd8c6 <_Z11putsTmrModehhh+0x74>
    putsSwitches( x,y,tm>0 ? tm-(TMR_VAROFS-1) : tm+(TMR_VAROFS-1),attr);
    d8ac:	1c 16       	cp	r1, r28
    d8ae:	1c f4       	brge	.+6      	; 0xd8b6 <_Z11putsTmrModehhh+0x64>
    d8b0:	4c 2f       	mov	r20, r28
    d8b2:	4f 50       	subi	r20, 0x0F	; 15
    d8b4:	02 c0       	rjmp	.+4      	; 0xd8ba <_Z11putsTmrModehhh+0x68>
    d8b6:	4c 2f       	mov	r20, r28
    d8b8:	41 5f       	subi	r20, 0xF1	; 241
    d8ba:	8f 2d       	mov	r24, r15
    d8bc:	61 2f       	mov	r22, r17
    d8be:	2d 2f       	mov	r18, r29
    d8c0:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
    return;
    d8c4:	13 c0       	rjmp	.+38     	; 0xd8ec <_Z11putsTmrModehhh+0x9a>
  }

  putsSwitches( x,y,tm>0 ? tm-(TMR_VAROFS+MAX_SWITCH-1-1) : tm+(TMR_VAROFS+MAX_SWITCH-1-1),attr);//momentary on-off
    d8c6:	1c 16       	cp	r1, r28
    d8c8:	1c f4       	brge	.+6      	; 0xd8d0 <_Z11putsTmrModehhh+0x7e>
    d8ca:	4c 2f       	mov	r20, r28
    d8cc:	44 52       	subi	r20, 0x24	; 36
    d8ce:	02 c0       	rjmp	.+4      	; 0xd8d4 <_Z11putsTmrModehhh+0x82>
    d8d0:	4c 2f       	mov	r20, r28
    d8d2:	4c 5d       	subi	r20, 0xDC	; 220
    d8d4:	8f 2d       	mov	r24, r15
    d8d6:	61 2f       	mov	r22, r17
    d8d8:	2d 2f       	mov	r18, r29
    d8da:	0e 94 af 6b 	call	0xd75e	; 0xd75e <_Z12putsSwitcheshhah>
  lcd_putcAtt(x+3*FW,  y,'m',attr);
    d8de:	8f 2d       	mov	r24, r15
    d8e0:	8e 5e       	subi	r24, 0xEE	; 238
    d8e2:	61 2f       	mov	r22, r17
    d8e4:	4d e6       	ldi	r20, 0x6D	; 109
    d8e6:	2d 2f       	mov	r18, r29
    d8e8:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
}
    d8ec:	df 91       	pop	r29
    d8ee:	cf 91       	pop	r28
    d8f0:	1f 91       	pop	r17
    d8f2:	0f 91       	pop	r16
    d8f4:	ff 90       	pop	r15
    d8f6:	08 95       	ret

0000d8f8 <_Z13putsTelemetryhhhhh>:

#ifdef FRSKY
// TODO move this into frsky.cpp
void putsTelemetry(uint8_t x, uint8_t y, uint8_t val, uint8_t unit, uint8_t att)
{
    d8f8:	0f 93       	push	r16
    d8fa:	92 2f       	mov	r25, r18
    d8fc:	20 2f       	mov	r18, r16
  if (unit == 0/*v*/) {
    d8fe:	99 23       	and	r25, r25
    d900:	21 f4       	brne	.+8      	; 0xd90a <_Z13putsTelemetryhhhhh+0x12>
    putsVolts(x, y, val, att);
    d902:	50 e0       	ldi	r21, 0x00	; 0
    d904:	0e 94 02 6b 	call	0xd604	; 0xd604 <_Z9putsVoltshhjh>
    d908:	03 c0       	rjmp	.+6      	; 0xd910 <_Z13putsTelemetryhhhhh+0x18>
  }
  else /* raw or reserved unit */ {
    lcd_outdezAtt(x, y, val, att);
    d90a:	50 e0       	ldi	r21, 0x00	; 0
    d90c:	0e 94 3c 6a 	call	0xd478	; 0xd478 <_Z13lcd_outdezAtthhih>
  }
}
    d910:	0f 91       	pop	r16
    d912:	08 95       	ret

0000d914 <_Z10lcdSendCtlh>:
#endif

void lcdSendCtl(uint8_t val)
{
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    d914:	41 98       	cbi	0x08, 1	; 8
#ifdef LCD_MULTIPLEX
  DDRA = 0xFF; // set LCD_DAT pins to output
#endif
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_A0);
    d916:	43 98       	cbi	0x08, 3	; 8
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    d918:	44 98       	cbi	0x08, 4	; 8
  PORTA_LCD_DAT = val;
    d91a:	82 b9       	out	0x02, r24	; 2
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_E);
    d91c:	45 9a       	sbi	0x08, 5	; 8
  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d91e:	45 98       	cbi	0x08, 5	; 8
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d920:	43 9a       	sbi	0x08, 3	; 8
#ifdef LCD_MULTIPLEX
  DDRA = 0x00; // set LCD_DAT pins to input
#endif
  PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    d922:	41 9a       	sbi	0x08, 1	; 8
}
    d924:	08 95       	ret

0000d926 <_Z11delay_1_5usi>:


#define delay_1us() _delay_us(1)
void delay_1_5us(int ms)
{
  for(int i=0; i<ms; i++) delay_1us();
    d926:	20 e0       	ldi	r18, 0x00	; 0
    d928:	30 e0       	ldi	r19, 0x00	; 0
    d92a:	06 c0       	rjmp	.+12     	; 0xd938 <_Z11delay_1_5usi+0x12>
    d92c:	45 e0       	ldi	r20, 0x05	; 5
    d92e:	4a 95       	dec	r20
    d930:	f1 f7       	brne	.-4      	; 0xd92e <_Z11delay_1_5usi+0x8>
    d932:	00 00       	nop
    d934:	2f 5f       	subi	r18, 0xFF	; 255
    d936:	3f 4f       	sbci	r19, 0xFF	; 255
    d938:	28 17       	cp	r18, r24
    d93a:	39 07       	cpc	r19, r25
    d93c:	bc f3       	brlt	.-18     	; 0xd92c <_Z11delay_1_5usi+0x6>
}
    d93e:	08 95       	ret

0000d940 <_Z8lcd_initv>:
void lcd_init()
{
  // /home/thus/txt/datasheets/lcd/KS0713.pdf
  // ~/txt/flieger/ST7565RV17.pdf  from http://www.glyn.de/content.asp?wdid=132&sid=

  PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RES);  //LCD_RES
    d940:	42 98       	cbi	0x08, 2	; 8
    d942:	85 e0       	ldi	r24, 0x05	; 5
    d944:	8a 95       	dec	r24
    d946:	f1 f7       	brne	.-4      	; 0xd944 <_Z8lcd_initv+0x4>
    d948:	00 00       	nop
    d94a:	85 e0       	ldi	r24, 0x05	; 5
    d94c:	8a 95       	dec	r24
    d94e:	f1 f7       	brne	.-4      	; 0xd94c <_Z8lcd_initv+0xc>
    d950:	00 00       	nop
  delay_1us();
  delay_1us();//    f520  call  0xf4ce  delay_1us() ; 0x0xf4ce
  PORTC_LCD_CTRL |= (1<<OUT_C_LCD_RES); //  f524  sbi 0x15, 2 IOADR-PORTC_LCD_CTRL; 21           1
    d952:	42 9a       	sbi	0x08, 2	; 8
  delay_1_5us(1500);
    d954:	8c ed       	ldi	r24, 0xDC	; 220
    d956:	95 e0       	ldi	r25, 0x05	; 5
    d958:	0e 94 93 6c 	call	0xd926	; 0xd926 <_Z11delay_1_5usi>
  lcdSendCtl(0xe2); //Initialize the internal functions
    d95c:	82 ee       	ldi	r24, 0xE2	; 226
    d95e:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xae); //DON = 0: display OFF
    d962:	8e ea       	ldi	r24, 0xAE	; 174
    d964:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xa1); //ADC = 1: reverse direction(SEG132->SEG1)
    d968:	81 ea       	ldi	r24, 0xA1	; 161
    d96a:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xA6); //REV = 0: non-reverse display
    d96e:	86 ea       	ldi	r24, 0xA6	; 166
    d970:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xA4); //EON = 0: normal display. non-entire
    d974:	84 ea       	ldi	r24, 0xA4	; 164
    d976:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xA2); // Select LCD bias=0
    d97a:	82 ea       	ldi	r24, 0xA2	; 162
    d97c:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xC0); //SHL = 0: normal direction (COM1->COM64)
    d980:	80 ec       	ldi	r24, 0xC0	; 192
    d982:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0x2F); //Control power circuit operation VC=VR=VF=1
    d986:	8f e2       	ldi	r24, 0x2F	; 47
    d988:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0x25); //Select int resistance ratio R2 R1 R0 =5
    d98c:	85 e2       	ldi	r24, 0x25	; 37
    d98e:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0x81); //Set reference voltage Mode
    d992:	81 e8       	ldi	r24, 0x81	; 129
    d994:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0x22); // 24 SV5 SV4 SV3 SV2 SV1 SV0 = 0x18
    d998:	82 e2       	ldi	r24, 0x22	; 34
    d99a:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(0xAF); //DON = 1: display ON
    d99e:	8f ea       	ldi	r24, 0xAF	; 175
    d9a0:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  g_eeGeneral.contrast = 0x22;
    d9a4:	82 e2       	ldi	r24, 0x22	; 34
    d9a6:	80 93 6c 12 	sts	0x126C, r24
}
    d9aa:	08 95       	ret

0000d9ac <_Z13lcdSetRefVolth>:

void lcdSetRefVolt(uint8_t val)
{
    d9ac:	cf 93       	push	r28
    d9ae:	c8 2f       	mov	r28, r24
  lcdSendCtl(0x81);
    d9b0:	81 e8       	ldi	r24, 0x81	; 129
    d9b2:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
  lcdSendCtl(val);
    d9b6:	8c 2f       	mov	r24, r28
    d9b8:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
}
    d9bc:	cf 91       	pop	r28
    d9be:	08 95       	ret

0000d9c0 <_Z14refreshDisplayv>:

void refreshDisplay()
{
    d9c0:	1f 93       	push	r17
    d9c2:	cf 93       	push	r28
    d9c4:	df 93       	push	r29
#ifdef SIMU
  memcpy(lcd_buf, displayBuf, sizeof(displayBuf));
  lcd_refresh = true;
#else
  uint8_t *p=displayBuf;
  for(uint8_t y=0; y < 8; y++) {
    d9c6:	10 e0       	ldi	r17, 0x00	; 0
{
#ifdef SIMU
  memcpy(lcd_buf, displayBuf, sizeof(displayBuf));
  lcd_refresh = true;
#else
  uint8_t *p=displayBuf;
    d9c8:	c2 e0       	ldi	r28, 0x02	; 2
    d9ca:	db e1       	ldi	r29, 0x1B	; 27
  for(uint8_t y=0; y < 8; y++) {
    lcdSendCtl(0x04);
    d9cc:	84 e0       	ldi	r24, 0x04	; 4
    d9ce:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
    lcdSendCtl(0x10); //column addr 0
    d9d2:	80 e1       	ldi	r24, 0x10	; 16
    d9d4:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
    lcdSendCtl( y | 0xB0); //page addr y
    d9d8:	81 2f       	mov	r24, r17
    d9da:	80 6b       	ori	r24, 0xB0	; 176
    d9dc:	0e 94 8a 6c 	call	0xd914	; 0xd914 <_Z10lcdSendCtlh>
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_CS1);
    d9e0:	41 98       	cbi	0x08, 1	; 8
#ifdef LCD_MULTIPLEX
    DDRA = 0xFF; // set LCD_DAT pins to output
#endif
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d9e2:	43 9a       	sbi	0x08, 3	; 8
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    d9e4:	44 98       	cbi	0x08, 4	; 8
    d9e6:	fe 01       	movw	r30, r28
    d9e8:	80 e8       	ldi	r24, 0x80	; 128
    for(uint8_t x=128; x>0; --x) {
      PORTA_LCD_DAT = *p++;
    d9ea:	91 91       	ld	r25, Z+
    d9ec:	92 b9       	out	0x02, r25	; 2
      PORTC_LCD_CTRL |= (1<<OUT_C_LCD_E);
    d9ee:	45 9a       	sbi	0x08, 5	; 8
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    d9f0:	45 98       	cbi	0x08, 5	; 8
    d9f2:	81 50       	subi	r24, 0x01	; 1
#ifdef LCD_MULTIPLEX
    DDRA = 0xFF; // set LCD_DAT pins to output
#endif
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_RnW);
    for(uint8_t x=128; x>0; --x) {
    d9f4:	d1 f7       	brne	.-12     	; 0xd9ea <_Z14refreshDisplayv+0x2a>
    d9f6:	c0 58       	subi	r28, 0x80	; 128
    d9f8:	df 4f       	sbci	r29, 0xFF	; 255
      PORTA_LCD_DAT = *p++;
      PORTC_LCD_CTRL |= (1<<OUT_C_LCD_E);
      PORTC_LCD_CTRL &= ~(1<<OUT_C_LCD_E);
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    d9fa:	43 9a       	sbi	0x08, 3	; 8
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
    d9fc:	41 9a       	sbi	0x08, 1	; 8
#ifdef SIMU
  memcpy(lcd_buf, displayBuf, sizeof(displayBuf));
  lcd_refresh = true;
#else
  uint8_t *p=displayBuf;
  for(uint8_t y=0; y < 8; y++) {
    d9fe:	1f 5f       	subi	r17, 0xFF	; 255
    da00:	18 30       	cpi	r17, 0x08	; 8
    da02:	21 f7       	brne	.-56     	; 0xd9cc <_Z14refreshDisplayv+0xc>
    }
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_A0);
    PORTC_LCD_CTRL |=  (1<<OUT_C_LCD_CS1);
  }
#endif
}
    da04:	df 91       	pop	r29
    da06:	cf 91       	pop	r28
    da08:	1f 91       	pop	r17
    da0a:	08 95       	ret

0000da0c <_Z17__eewr_byte_m2560v>:

#else

inline void eeprom_write_byte()
{
  EEAR = eeprom_pointer;
    da0c:	80 91 03 1f 	lds	r24, 0x1F03
    da10:	90 91 04 1f 	lds	r25, 0x1F04
    da14:	92 bd       	out	0x22, r25	; 34
    da16:	81 bd       	out	0x21, r24	; 33
  EEDR = *eeprom_buffer_data;
    da18:	e0 91 05 1f 	lds	r30, 0x1F05
    da1c:	f0 91 06 1f 	lds	r31, 0x1F06
    da20:	21 91       	ld	r18, Z+
    da22:	20 bd       	out	0x20, r18	; 32
#if defined (PCBV3)
  EECR |= 1<<EEMPE;
    da24:	fa 9a       	sbi	0x1f, 2	; 31
  EECR |= 1<<EEPE;
    da26:	f9 9a       	sbi	0x1f, 1	; 31
#else
  EECR |= 1<<EEMWE;
  EECR |= 1<<EEWE;
#endif
  eeprom_pointer++;
    da28:	01 96       	adiw	r24, 0x01	; 1
    da2a:	90 93 04 1f 	sts	0x1F04, r25
    da2e:	80 93 03 1f 	sts	0x1F03, r24
  eeprom_buffer_data++;
    da32:	f0 93 06 1f 	sts	0x1F06, r31
    da36:	e0 93 05 1f 	sts	0x1F05, r30
}
    da3a:	08 95       	ret

0000da3c <__vector_30>:

ISR(EE_READY_vect)
{
    da3c:	1f 92       	push	r1
    da3e:	0f 92       	push	r0
    da40:	0f b6       	in	r0, 0x3f	; 63
    da42:	0f 92       	push	r0
    da44:	0b b6       	in	r0, 0x3b	; 59
    da46:	0f 92       	push	r0
    da48:	11 24       	eor	r1, r1
    da4a:	2f 93       	push	r18
    da4c:	3f 93       	push	r19
    da4e:	4f 93       	push	r20
    da50:	5f 93       	push	r21
    da52:	6f 93       	push	r22
    da54:	7f 93       	push	r23
    da56:	8f 93       	push	r24
    da58:	9f 93       	push	r25
    da5a:	af 93       	push	r26
    da5c:	bf 93       	push	r27
    da5e:	ef 93       	push	r30
    da60:	ff 93       	push	r31
  if (--eeprom_buffer_size > 0) {
    da62:	80 91 07 1f 	lds	r24, 0x1F07
    da66:	81 50       	subi	r24, 0x01	; 1
    da68:	80 93 07 1f 	sts	0x1F07, r24
    da6c:	80 91 07 1f 	lds	r24, 0x1F07
    da70:	18 16       	cp	r1, r24
    da72:	1c f4       	brge	.+6      	; 0xda7a <__vector_30+0x3e>
    eeprom_write_byte();
    da74:	0e 94 06 6d 	call	0xda0c	; 0xda0c <_Z17__eewr_byte_m2560v>
    da78:	01 c0       	rjmp	.+2      	; 0xda7c <__vector_30+0x40>
  }
  else {
#if defined (PCBV3)
    EECR &= ~(1<<EERIE);
    da7a:	fb 98       	cbi	0x1f, 3	; 31
#else
    EECR &= ~(1<<EERIE);
#endif
  }
}
    da7c:	ff 91       	pop	r31
    da7e:	ef 91       	pop	r30
    da80:	bf 91       	pop	r27
    da82:	af 91       	pop	r26
    da84:	9f 91       	pop	r25
    da86:	8f 91       	pop	r24
    da88:	7f 91       	pop	r23
    da8a:	6f 91       	pop	r22
    da8c:	5f 91       	pop	r21
    da8e:	4f 91       	pop	r20
    da90:	3f 91       	pop	r19
    da92:	2f 91       	pop	r18
    da94:	0f 90       	pop	r0
    da96:	0b be       	out	0x3b, r0	; 59
    da98:	0f 90       	pop	r0
    da9a:	0f be       	out	0x3f, r0	; 63
    da9c:	0f 90       	pop	r0
    da9e:	1f 90       	pop	r1
    daa0:	18 95       	reti

0000daa2 <_Z15eeWriteBlockCmpPKvjj>:

void eeWriteBlockCmp(const void *i_pointer_ram, uint16_t i_pointer_eeprom, size_t size)
{
  assert(!eeprom_buffer_size);

  eeprom_pointer = i_pointer_eeprom;
    daa2:	70 93 04 1f 	sts	0x1F04, r23
    daa6:	60 93 03 1f 	sts	0x1F03, r22
  eeprom_buffer_data = (const char*)i_pointer_ram;
    daaa:	90 93 06 1f 	sts	0x1F06, r25
    daae:	80 93 05 1f 	sts	0x1F05, r24
  eeprom_buffer_size = size+1;
    dab2:	4f 5f       	subi	r20, 0xFF	; 255
    dab4:	40 93 07 1f 	sts	0x1F07, r20

#ifdef SIMU
  sem_post(eeprom_write_sem);
#elif defined (PCBV3)
  EECR |= (1<<EERIE);
    dab8:	fb 9a       	sbi	0x1f, 3	; 31
#else
  EECR |= (1<<EERIE);
#endif

  if (s_sync_write) {
    daba:	80 91 c1 19 	lds	r24, 0x19C1
    dabe:	88 23       	and	r24, r24
    dac0:	11 f4       	brne	.+4      	; 0xdac6 <_Z15eeWriteBlockCmpPKvjj+0x24>
    dac2:	08 95       	ret
    while (eeprom_buffer_size > 0) wdt_reset();
    dac4:	a8 95       	wdr
    dac6:	80 91 07 1f 	lds	r24, 0x1F07
    daca:	18 16       	cp	r1, r24
    dacc:	dc f3       	brlt	.-10     	; 0xdac4 <_Z15eeWriteBlockCmpPKvjj+0x22>
    dace:	08 95       	ret

0000dad0 <_Z8putEventh>:
}

static uint8_t s_evt;
void putEvent(uint8_t evt)
{
  s_evt = evt;
    dad0:	80 93 36 1f 	sts	0x1F36, r24
}
    dad4:	08 95       	ret

0000dad6 <_Z8getEventv>:
uint8_t getEvent()
{
  uint8_t evt = s_evt;
    dad6:	80 91 36 1f 	lds	r24, 0x1F36
  s_evt=0;
    dada:	10 92 36 1f 	sts	0x1F36, r1
  return evt;
}
    dade:	08 95       	ret

0000dae0 <_ZN3Key5inputEb8EnumKeys>:
};


Key keys[NUM_KEYS];
void Key::input(bool val, EnumKeys enuk)
{
    dae0:	0f 93       	push	r16
    dae2:	1f 93       	push	r17
    dae4:	df 93       	push	r29
    dae6:	cf 93       	push	r28
    dae8:	0f 92       	push	r0
    daea:	cd b7       	in	r28, 0x3d	; 61
    daec:	de b7       	in	r29, 0x3e	; 62
    daee:	8c 01       	movw	r16, r24
  //  uint8_t old=m_vals;
  m_vals <<= 1;  if(val) m_vals |= 1; //portbit einschieben
    daf0:	fc 01       	movw	r30, r24
    daf2:	80 81       	ld	r24, Z
    daf4:	98 2f       	mov	r25, r24
    daf6:	99 0f       	add	r25, r25
    daf8:	9e 70       	andi	r25, 0x0E	; 14
    dafa:	80 7f       	andi	r24, 0xF0	; 240
    dafc:	89 2b       	or	r24, r25
    dafe:	80 83       	st	Z, r24
    db00:	66 23       	and	r22, r22
    db02:	21 f0       	breq	.+8      	; 0xdb0c <_ZN3Key5inputEb8EnumKeys+0x2c>
    db04:	91 60       	ori	r25, 0x01	; 1
    db06:	80 7f       	andi	r24, 0xF0	; 240
    db08:	89 2b       	or	r24, r25
    db0a:	80 83       	st	Z, r24
  m_cnt++;
    db0c:	f8 01       	movw	r30, r16
    db0e:	81 81       	ldd	r24, Z+1	; 0x01
    db10:	8f 5f       	subi	r24, 0xFF	; 255
    db12:	81 83       	std	Z+1, r24	; 0x01

  if(m_state && m_vals==0){  //gerade eben sprung auf 0
    db14:	92 81       	ldd	r25, Z+2	; 0x02
    db16:	99 23       	and	r25, r25
    db18:	c9 f0       	breq	.+50     	; 0xdb4c <_ZN3Key5inputEb8EnumKeys+0x6c>
    db1a:	80 81       	ld	r24, Z
    db1c:	8f 70       	andi	r24, 0x0F	; 15
    db1e:	b1 f4       	brne	.+44     	; 0xdb4c <_ZN3Key5inputEb8EnumKeys+0x6c>
    if(m_state!=KSTATE_KILLED) {
    db20:	93 36       	cpi	r25, 0x63	; 99
    db22:	89 f0       	breq	.+34     	; 0xdb46 <_ZN3Key5inputEb8EnumKeys+0x66>
      putEvent(EVT_KEY_BREAK(enuk));
    db24:	84 2f       	mov	r24, r20
    db26:	80 62       	ori	r24, 0x20	; 32
    db28:	49 83       	std	Y+1, r20	; 0x01
    db2a:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <_Z8putEventh>
      if(!( m_state == 16 && m_cnt<16)){
    db2e:	f8 01       	movw	r30, r16
    db30:	82 81       	ldd	r24, Z+2	; 0x02
    db32:	49 81       	ldd	r20, Y+1	; 0x01
    db34:	80 31       	cpi	r24, 0x10	; 16
    db36:	19 f4       	brne	.+6      	; 0xdb3e <_ZN3Key5inputEb8EnumKeys+0x5e>
    db38:	81 81       	ldd	r24, Z+1	; 0x01
    db3a:	80 31       	cpi	r24, 0x10	; 16
    db3c:	20 f0       	brcs	.+8      	; 0xdb46 <_ZN3Key5inputEb8EnumKeys+0x66>
        m_dblcnt=0;
    db3e:	f8 01       	movw	r30, r16
    db40:	80 81       	ld	r24, Z
    db42:	8f 7c       	andi	r24, 0xCF	; 207
    db44:	80 83       	st	Z, r24
      }
        //      }
    }
    m_cnt   = 0;
    db46:	f8 01       	movw	r30, r16
    db48:	11 82       	std	Z+1, r1	; 0x01
    m_state = KSTATE_OFF;
    db4a:	12 82       	std	Z+2, r1	; 0x02
  }
  switch(m_state){
    db4c:	f8 01       	movw	r30, r16
    db4e:	22 81       	ldd	r18, Z+2	; 0x02
    db50:	28 30       	cpi	r18, 0x08	; 8
    db52:	09 f4       	brne	.+2      	; 0xdb56 <_ZN3Key5inputEb8EnumKeys+0x76>
    db54:	4c c0       	rjmp	.+152    	; 0xdbee <_ZN3Key5inputEb8EnumKeys+0x10e>
    db56:	29 30       	cpi	r18, 0x09	; 9
    db58:	60 f4       	brcc	.+24     	; 0xdb72 <_ZN3Key5inputEb8EnumKeys+0x92>
    db5a:	21 30       	cpi	r18, 0x01	; 1
    db5c:	09 f4       	brne	.+2      	; 0xdb60 <_ZN3Key5inputEb8EnumKeys+0x80>
    db5e:	50 c0       	rjmp	.+160    	; 0xdc00 <_ZN3Key5inputEb8EnumKeys+0x120>
    db60:	21 30       	cpi	r18, 0x01	; 1
    db62:	a8 f0       	brcs	.+42     	; 0xdb8e <_ZN3Key5inputEb8EnumKeys+0xae>
    db64:	22 30       	cpi	r18, 0x02	; 2
    db66:	09 f4       	brne	.+2      	; 0xdb6a <_ZN3Key5inputEb8EnumKeys+0x8a>
    db68:	42 c0       	rjmp	.+132    	; 0xdbee <_ZN3Key5inputEb8EnumKeys+0x10e>
    db6a:	24 30       	cpi	r18, 0x04	; 4
    db6c:	09 f0       	breq	.+2      	; 0xdb70 <_ZN3Key5inputEb8EnumKeys+0x90>
    db6e:	60 c0       	rjmp	.+192    	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
    db70:	3e c0       	rjmp	.+124    	; 0xdbee <_ZN3Key5inputEb8EnumKeys+0x10e>
    db72:	2f 35       	cpi	r18, 0x5F	; 95
    db74:	71 f1       	breq	.+92     	; 0xdbd2 <_ZN3Key5inputEb8EnumKeys+0xf2>
    db76:	20 36       	cpi	r18, 0x60	; 96
    db78:	20 f4       	brcc	.+8      	; 0xdb82 <_ZN3Key5inputEb8EnumKeys+0xa2>
    db7a:	20 31       	cpi	r18, 0x10	; 16
    db7c:	09 f0       	breq	.+2      	; 0xdb80 <_ZN3Key5inputEb8EnumKeys+0xa0>
    db7e:	58 c0       	rjmp	.+176    	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
    db80:	36 c0       	rjmp	.+108    	; 0xdbee <_ZN3Key5inputEb8EnumKeys+0x10e>
    db82:	21 36       	cpi	r18, 0x61	; 97
    db84:	a1 f0       	breq	.+40     	; 0xdbae <_ZN3Key5inputEb8EnumKeys+0xce>
    db86:	22 36       	cpi	r18, 0x62	; 98
    db88:	09 f0       	breq	.+2      	; 0xdb8c <_ZN3Key5inputEb8EnumKeys+0xac>
    db8a:	52 c0       	rjmp	.+164    	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
    db8c:	4a c0       	rjmp	.+148    	; 0xdc22 <_ZN3Key5inputEb8EnumKeys+0x142>
    case KSTATE_OFF:
      if(m_vals==FFVAL){ //gerade eben sprung auf ff
    db8e:	f8 01       	movw	r30, r16
    db90:	80 81       	ld	r24, Z
    db92:	98 2f       	mov	r25, r24
    db94:	9f 70       	andi	r25, 0x0F	; 15
    db96:	9f 30       	cpi	r25, 0x0F	; 15
    db98:	09 f0       	breq	.+2      	; 0xdb9c <_ZN3Key5inputEb8EnumKeys+0xbc>
    db9a:	4a c0       	rjmp	.+148    	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
        m_state = KSTATE_START;
    db9c:	91 e6       	ldi	r25, 0x61	; 97
    db9e:	92 83       	std	Z+2, r25	; 0x02
        if(m_cnt>16) m_dblcnt=0; //pause zu lang fuer double
    dba0:	91 81       	ldd	r25, Z+1	; 0x01
    dba2:	91 31       	cpi	r25, 0x11	; 17
    dba4:	10 f0       	brcs	.+4      	; 0xdbaa <_ZN3Key5inputEb8EnumKeys+0xca>
    dba6:	8f 7c       	andi	r24, 0xCF	; 207
    dba8:	80 83       	st	Z, r24
        m_cnt   = 0;
    dbaa:	f8 01       	movw	r30, r16
    dbac:	40 c0       	rjmp	.+128    	; 0xdc2e <_ZN3Key5inputEb8EnumKeys+0x14e>
      }
      break;
      //fallthrough
    case KSTATE_START:
      putEvent(EVT_KEY_FIRST(enuk));
    dbae:	84 2f       	mov	r24, r20
    dbb0:	80 66       	ori	r24, 0x60	; 96
    dbb2:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <_Z8putEventh>
      m_dblcnt++;
    dbb6:	f8 01       	movw	r30, r16
    dbb8:	90 81       	ld	r25, Z
    dbba:	89 2f       	mov	r24, r25
    dbbc:	82 95       	swap	r24
    dbbe:	8f 70       	andi	r24, 0x0F	; 15
    dbc0:	8f 5f       	subi	r24, 0xFF	; 255
    dbc2:	83 70       	andi	r24, 0x03	; 3
    dbc4:	82 95       	swap	r24
    dbc6:	80 7f       	andi	r24, 0xF0	; 240
    dbc8:	9f 7c       	andi	r25, 0xCF	; 207
    dbca:	98 2b       	or	r25, r24
    dbcc:	90 83       	st	Z, r25
      m_state   = KSTATE_RPTDELAY;
    dbce:	8f e5       	ldi	r24, 0x5F	; 95
    dbd0:	2d c0       	rjmp	.+90     	; 0xdc2c <_ZN3Key5inputEb8EnumKeys+0x14c>
      m_cnt     = 0;
      break;

    case KSTATE_RPTDELAY: // gruvin: delay state before first key repeat
      if(m_cnt == 24) putEvent(EVT_KEY_LONG(enuk)); 
    dbd2:	f8 01       	movw	r30, r16
    dbd4:	81 81       	ldd	r24, Z+1	; 0x01
    dbd6:	88 31       	cpi	r24, 0x18	; 24
    dbd8:	21 f4       	brne	.+8      	; 0xdbe2 <_ZN3Key5inputEb8EnumKeys+0x102>
    dbda:	84 2f       	mov	r24, r20
    dbdc:	80 68       	ori	r24, 0x80	; 128
    dbde:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <_Z8putEventh>
      if (m_cnt == 40) {
    dbe2:	f8 01       	movw	r30, r16
    dbe4:	81 81       	ldd	r24, Z+1	; 0x01
    dbe6:	88 32       	cpi	r24, 0x28	; 40
    dbe8:	19 f5       	brne	.+70     	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
        m_state = 16;
    dbea:	80 e1       	ldi	r24, 0x10	; 16
    dbec:	1f c0       	rjmp	.+62     	; 0xdc2c <_ZN3Key5inputEb8EnumKeys+0x14c>

    case 16:
    case 8:
    case 4:
    case 2:
      if(m_cnt >= 48)  { //3 6 12 24 48 pulses in every 480ms
    dbee:	f8 01       	movw	r30, r16
    dbf0:	81 81       	ldd	r24, Z+1	; 0x01
    dbf2:	80 33       	cpi	r24, 0x30	; 48
    dbf4:	28 f0       	brcs	.+10     	; 0xdc00 <_ZN3Key5inputEb8EnumKeys+0x120>
        m_state >>= 1;
    dbf6:	30 e0       	ldi	r19, 0x00	; 0
    dbf8:	35 95       	asr	r19
    dbfa:	27 95       	ror	r18
    dbfc:	22 83       	std	Z+2, r18	; 0x02
        m_cnt     = 0;
    dbfe:	11 82       	std	Z+1, r1	; 0x01
      }
      //fallthrough
    case 1:
      if( (m_cnt & (m_state-1)) == 0)  putEvent(EVT_KEY_REPT(enuk));
    dc00:	f8 01       	movw	r30, r16
    dc02:	22 81       	ldd	r18, Z+2	; 0x02
    dc04:	30 e0       	ldi	r19, 0x00	; 0
    dc06:	21 50       	subi	r18, 0x01	; 1
    dc08:	30 40       	sbci	r19, 0x00	; 0
    dc0a:	61 81       	ldd	r22, Z+1	; 0x01
    dc0c:	70 e0       	ldi	r23, 0x00	; 0
    dc0e:	26 23       	and	r18, r22
    dc10:	37 23       	and	r19, r23
    dc12:	21 15       	cp	r18, r1
    dc14:	31 05       	cpc	r19, r1
    dc16:	61 f4       	brne	.+24     	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
    dc18:	84 2f       	mov	r24, r20
    dc1a:	80 64       	ori	r24, 0x40	; 64
    dc1c:	0e 94 68 6d 	call	0xdad0	; 0xdad0 <_Z8putEventh>
    dc20:	07 c0       	rjmp	.+14     	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
      break;

    case KSTATE_PAUSE: //pause
      if(m_cnt >= 64)      {
    dc22:	f8 01       	movw	r30, r16
    dc24:	81 81       	ldd	r24, Z+1	; 0x01
    dc26:	80 34       	cpi	r24, 0x40	; 64
    dc28:	18 f0       	brcs	.+6      	; 0xdc30 <_ZN3Key5inputEb8EnumKeys+0x150>
        m_state = 8;
    dc2a:	88 e0       	ldi	r24, 0x08	; 8
    dc2c:	82 83       	std	Z+2, r24	; 0x02
        m_cnt   = 0;
    dc2e:	11 82       	std	Z+1, r1	; 0x01
      break;

    case KSTATE_KILLED: //killed
      break;
  }
}
    dc30:	0f 90       	pop	r0
    dc32:	cf 91       	pop	r28
    dc34:	df 91       	pop	r29
    dc36:	1f 91       	pop	r17
    dc38:	0f 91       	pop	r16
    dc3a:	08 95       	ret

0000dc3c <_Z8keyState8EnumKeys>:

bool keyState(EnumKeys enuk)
{
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;
    dc3c:	9c 01       	movw	r18, r24
    dc3e:	8e 30       	cpi	r24, 0x0E	; 14
    dc40:	91 05       	cpc	r25, r1
    dc42:	74 f4       	brge	.+28     	; 0xdc60 <_Z8keyState8EnumKeys+0x24>
  uint8_t m_dblcnt:2;
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
    dc44:	fc 01       	movw	r30, r24
    dc46:	ee 0f       	add	r30, r30
    dc48:	ff 1f       	adc	r31, r31
    dc4a:	e2 0f       	add	r30, r18
    dc4c:	f3 1f       	adc	r31, r19
    dc4e:	e8 5f       	subi	r30, 0xF8	; 248
    dc50:	f0 4e       	sbci	r31, 0xE0	; 224
    dc52:	90 81       	ld	r25, Z
    dc54:	9f 70       	andi	r25, 0x0F	; 15
    dc56:	81 e0       	ldi	r24, 0x01	; 1
    dc58:	9f 30       	cpi	r25, 0x0F	; 15
    dc5a:	09 f0       	breq	.+2      	; 0xdc5e <_Z8keyState8EnumKeys+0x22>
    dc5c:	4a c0       	rjmp	.+148    	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    dc5e:	4c c0       	rjmp	.+152    	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
bool keyState(EnumKeys enuk)
{
  if(enuk < (int)DIM(keys))  return keys[enuk].state() ? 1 : 0;

#if defined (PCBV4)
  switch(enuk){
    dc60:	82 31       	cpi	r24, 0x12	; 18
    dc62:	91 05       	cpc	r25, r1
    dc64:	89 f1       	breq	.+98     	; 0xdcc8 <_Z8keyState8EnumKeys+0x8c>
    dc66:	83 31       	cpi	r24, 0x13	; 19
    dc68:	91 05       	cpc	r25, r1
    dc6a:	8c f4       	brge	.+34     	; 0xdc8e <_Z8keyState8EnumKeys+0x52>
    dc6c:	8f 30       	cpi	r24, 0x0F	; 15
    dc6e:	91 05       	cpc	r25, r1
    dc70:	21 f1       	breq	.+72     	; 0xdcba <_Z8keyState8EnumKeys+0x7e>
    dc72:	80 31       	cpi	r24, 0x10	; 16
    dc74:	91 05       	cpc	r25, r1
    dc76:	24 f4       	brge	.+8      	; 0xdc80 <_Z8keyState8EnumKeys+0x44>
    dc78:	8e 30       	cpi	r24, 0x0E	; 14
    dc7a:	91 05       	cpc	r25, r1
    dc7c:	d1 f5       	brne	.+116    	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    dc7e:	32 c0       	rjmp	.+100    	; 0xdce4 <_Z8keyState8EnumKeys+0xa8>
    dc80:	80 31       	cpi	r24, 0x10	; 16
    dc82:	91 05       	cpc	r25, r1
    dc84:	89 f0       	breq	.+34     	; 0xdca8 <_Z8keyState8EnumKeys+0x6c>
    dc86:	81 31       	cpi	r24, 0x11	; 17
    dc88:	91 05       	cpc	r25, r1
    dc8a:	99 f5       	brne	.+102    	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    dc8c:	19 c0       	rjmp	.+50     	; 0xdcc0 <_Z8keyState8EnumKeys+0x84>
    dc8e:	84 31       	cpi	r24, 0x14	; 20
    dc90:	91 05       	cpc	r25, r1
    dc92:	71 f0       	breq	.+28     	; 0xdcb0 <_Z8keyState8EnumKeys+0x74>
    dc94:	84 31       	cpi	r24, 0x14	; 20
    dc96:	91 05       	cpc	r25, r1
    dc98:	ec f0       	brlt	.+58     	; 0xdcd4 <_Z8keyState8EnumKeys+0x98>
    dc9a:	85 31       	cpi	r24, 0x15	; 21
    dc9c:	91 05       	cpc	r25, r1
    dc9e:	f1 f0       	breq	.+60     	; 0xdcdc <_Z8keyState8EnumKeys+0xa0>
    dca0:	86 31       	cpi	r24, 0x16	; 22
    dca2:	91 05       	cpc	r25, r1
    dca4:	31 f5       	brne	.+76     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    dca6:	22 c0       	rjmp	.+68     	; 0xdcec <_Z8keyState8EnumKeys+0xb0>
    case SW_ElevDR : return PINC & (1<<INP_C_ElevDR);
    dca8:	81 e0       	ldi	r24, 0x01	; 1
    dcaa:	36 99       	sbic	0x06, 6	; 6
    dcac:	25 c0       	rjmp	.+74     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dcae:	21 c0       	rjmp	.+66     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    
    case SW_AileDR : return PINC & (1<<INP_C_AileDR);
    dcb0:	86 b1       	in	r24, 0x06	; 6
    dcb2:	88 1f       	adc	r24, r24
    dcb4:	88 27       	eor	r24, r24
    dcb6:	88 1f       	adc	r24, r24
    dcb8:	08 95       	ret

    case SW_RuddDR : return PING & (1<<INP_G_RuddDR);
    dcba:	82 b3       	in	r24, 0x12	; 18
    dcbc:	81 70       	andi	r24, 0x01	; 1
    dcbe:	08 95       	ret
      //     INP_G_ID1 INP_B_ID2
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0    : return !(PING & (1<<INP_G_ID1));
    dcc0:	81 e0       	ldi	r24, 0x01	; 1
    dcc2:	93 9b       	sbis	0x12, 3	; 18
    dcc4:	19 c0       	rjmp	.+50     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dcc6:	15 c0       	rjmp	.+42     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
    case SW_ID1    : return (PING & (1<<INP_G_ID1))&& (PINB & (1<<INP_B_ID2));
    dcc8:	93 9b       	sbis	0x12, 3	; 18
    dcca:	15 c0       	rjmp	.+42     	; 0xdcf6 <_Z8keyState8EnumKeys+0xba>
    case KSTATE_KILLED: //killed
      break;
  }
}

bool keyState(EnumKeys enuk)
    dccc:	81 e0       	ldi	r24, 0x01	; 1
    dcce:	1c 99       	sbic	0x03, 4	; 3
    dcd0:	13 c0       	rjmp	.+38     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dcd2:	0f c0       	rjmp	.+30     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0    : return !(PING & (1<<INP_G_ID1));
    case SW_ID1    : return (PING & (1<<INP_G_ID1))&& (PINB & (1<<INP_B_ID2));
    case SW_ID2    : return !(PINB & (1<<INP_B_ID2));
    dcd4:	81 e0       	ldi	r24, 0x01	; 1
    dcd6:	1c 9b       	sbis	0x03, 4	; 3
    dcd8:	0f c0       	rjmp	.+30     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dcda:	0b c0       	rjmp	.+22     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>

    case SW_Gear   : return PING & (1<<INP_G_Gear);
    dcdc:	81 e0       	ldi	r24, 0x01	; 1
    dcde:	95 99       	sbic	0x12, 5	; 18
    dce0:	0b c0       	rjmp	.+22     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dce2:	07 c0       	rjmp	.+14     	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>

    case SW_ThrCt  : return PING & (1<<INP_G_ThrCt);
    dce4:	81 e0       	ldi	r24, 0x01	; 1
    dce6:	92 99       	sbic	0x12, 2	; 18
    dce8:	07 c0       	rjmp	.+14     	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>
    dcea:	03 c0       	rjmp	.+6      	; 0xdcf2 <_Z8keyState8EnumKeys+0xb6>

    case SW_Trainer: return PINB & (1<<INP_B_Trainer);
    dcec:	81 e0       	ldi	r24, 0x01	; 1
    dcee:	1d 99       	sbic	0x03, 5	; 3
    dcf0:	03 c0       	rjmp	.+6      	; 0xdcf8 <_Z8keyState8EnumKeys+0xbc>

    case SW_Trainer: return PINE & (1<<INP_E_Trainer);
    default:;
  }
#endif // defined (PCBV4)
  return 0;
    dcf2:	80 e0       	ldi	r24, 0x00	; 0
    dcf4:	08 95       	ret
      //     INP_G_ID1 INP_B_ID2
      // id0    0        1
      // id1    1        1
      // id2    1        0
    case SW_ID0    : return !(PING & (1<<INP_G_ID1));
    case SW_ID1    : return (PING & (1<<INP_G_ID1))&& (PINB & (1<<INP_B_ID2));
    dcf6:	80 e0       	ldi	r24, 0x00	; 0
    case SW_Trainer: return PINE & (1<<INP_E_Trainer);
    default:;
  }
#endif // defined (PCBV4)
  return 0;
}
    dcf8:	08 95       	ret

0000dcfa <_Z11pauseEventsh>:

void pauseEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    dcfa:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
    dcfc:	8e 30       	cpi	r24, 0x0E	; 14
    dcfe:	58 f4       	brcc	.+22     	; 0xdd16 <_Z11pauseEventsh+0x1c>
    dd00:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t m_cnt;
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
    dd02:	fc 01       	movw	r30, r24
    dd04:	ee 0f       	add	r30, r30
    dd06:	ff 1f       	adc	r31, r31
    dd08:	e8 0f       	add	r30, r24
    dd0a:	f9 1f       	adc	r31, r25
    dd0c:	e8 5f       	subi	r30, 0xF8	; 248
    dd0e:	f0 4e       	sbci	r31, 0xE0	; 224
    dd10:	82 e6       	ldi	r24, 0x62	; 98
    dd12:	82 83       	std	Z+2, r24	; 0x02
    dd14:	11 82       	std	Z+1, r1	; 0x01
    dd16:	08 95       	ret

0000dd18 <_Z10killEventsh>:
  event=event & EVT_KEY_MASK;
  if(event < (int)DIM(keys))  keys[event].pauseEvents();
}
void killEvents(uint8_t event)
{
  event=event & EVT_KEY_MASK;
    dd18:	8f 70       	andi	r24, 0x0F	; 15
  if(event < (int)DIM(keys))  keys[event].killEvents();
    dd1a:	8e 30       	cpi	r24, 0x0E	; 14
    dd1c:	68 f4       	brcc	.+26     	; 0xdd38 <_Z10killEventsh+0x20>
    dd1e:	90 e0       	ldi	r25, 0x00	; 0
  uint8_t m_state;
public:
  void input(bool val, EnumKeys enuk);
  bool state()       { return m_vals==FFVAL;                }
  void pauseEvents() { m_state = KSTATE_PAUSE;  m_cnt   = 0;}
  void killEvents()  { m_state = KSTATE_KILLED; m_dblcnt=0; }
    dd20:	fc 01       	movw	r30, r24
    dd22:	ee 0f       	add	r30, r30
    dd24:	ff 1f       	adc	r31, r31
    dd26:	e8 0f       	add	r30, r24
    dd28:	f9 1f       	adc	r31, r25
    dd2a:	e8 5f       	subi	r30, 0xF8	; 248
    dd2c:	f0 4e       	sbci	r31, 0xE0	; 224
    dd2e:	83 e6       	ldi	r24, 0x63	; 99
    dd30:	82 83       	std	Z+2, r24	; 0x02
    dd32:	80 81       	ld	r24, Z
    dd34:	8f 7c       	andi	r24, 0xCF	; 207
    dd36:	80 83       	st	Z, r24
    dd38:	08 95       	ret

0000dd3a <_Z7per10msv>:

#if defined (PCBV3)
uint8_t g_ms100 = 0; // global to allow time set function to reset to zero
#endif
void per10ms()
{
    dd3a:	0f 93       	push	r16
    dd3c:	1f 93       	push	r17
    dd3e:	cf 93       	push	r28
    dd40:	df 93       	push	r29
    g_tmr10ms++;
    dd42:	80 91 32 1f 	lds	r24, 0x1F32
    dd46:	90 91 33 1f 	lds	r25, 0x1F33
    dd4a:	01 96       	adiw	r24, 0x01	; 1
    dd4c:	90 93 33 1f 	sts	0x1F33, r25
    dd50:	80 93 32 1f 	sts	0x1F32, r24
    g_blinkTmr10ms++;
    dd54:	80 91 34 1f 	lds	r24, 0x1F34
    dd58:	8f 5f       	subi	r24, 0xFF	; 255
    dd5a:	80 93 34 1f 	sts	0x1F34, r24

#if defined (PCBV3)
    /* Update gloabal Date/Time every 100 per10ms cycles */
    if (++g_ms100 == 100)
    dd5e:	80 91 35 1f 	lds	r24, 0x1F35
    dd62:	8f 5f       	subi	r24, 0xFF	; 255
    dd64:	80 93 35 1f 	sts	0x1F35, r24
    dd68:	84 36       	cpi	r24, 0x64	; 100
    dd6a:	a9 f4       	brne	.+42     	; 0xdd96 <_Z7per10msv+0x5c>
    {
      g_unixTime++; // inc global unix timestamp one second
    dd6c:	80 91 3a 12 	lds	r24, 0x123A
    dd70:	90 91 3b 12 	lds	r25, 0x123B
    dd74:	a0 91 3c 12 	lds	r26, 0x123C
    dd78:	b0 91 3d 12 	lds	r27, 0x123D
    dd7c:	01 96       	adiw	r24, 0x01	; 1
    dd7e:	a1 1d       	adc	r26, r1
    dd80:	b1 1d       	adc	r27, r1
    dd82:	80 93 3a 12 	sts	0x123A, r24
    dd86:	90 93 3b 12 	sts	0x123B, r25
    dd8a:	a0 93 3c 12 	sts	0x123C, r26
    dd8e:	b0 93 3d 12 	sts	0x123D, r27
      g_ms100 = 0;
    dd92:	10 92 35 1f 	sts	0x1F35, r1
      1   MENU
      0   other use
  */

#  if defined (PCBV4)
  uint8_t tin = ~PINL;
    dd96:	00 91 09 01 	lds	r16, 0x0109
    dd9a:	00 95       	com	r16
  uint8_t in;
  in = (tin & 0x0f) << 3;
  in |= (tin & 0x30) >> 3;
    dd9c:	80 2f       	mov	r24, r16
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	80 73       	andi	r24, 0x30	; 48
    dda2:	90 70       	andi	r25, 0x00	; 0
    dda4:	73 e0       	ldi	r23, 0x03	; 3
    dda6:	95 95       	asr	r25
    dda8:	87 95       	ror	r24
    ddaa:	7a 95       	dec	r23
    ddac:	e1 f7       	brne	.-8      	; 0xdda6 <_Z7per10msv+0x6c>
  */

#  if defined (PCBV4)
  uint8_t tin = ~PINL;
  uint8_t in;
  in = (tin & 0x0f) << 3;
    ddae:	0f 70       	andi	r16, 0x0F	; 15
    ddb0:	00 0f       	add	r16, r16
    ddb2:	00 0f       	add	r16, r16
    ddb4:	00 0f       	add	r16, r16
  in |= (tin & 0x30) >> 3;
    ddb6:	08 2b       	or	r16, r24
    ddb8:	40 e0       	ldi	r20, 0x00	; 0
    ddba:	50 e0       	ldi	r21, 0x00	; 0
#endif

  for(int i=1; i<7; i++)
  {
    //INP_B_KEY_MEN 1  .. INP_B_KEY_LFT 6
    keys[enuk].input(in & (1<<i),(EnumKeys)enuk);
    ddbc:	10 e0       	ldi	r17, 0x00	; 0
    ddbe:	01 c0       	rjmp	.+2      	; 0xddc2 <_Z7per10msv+0x88>

#else
  uint8_t in = ~PINB;
#endif

  for(int i=1; i<7; i++)
    ddc0:	ae 01       	movw	r20, r28


#if defined (PCBV3)
uint8_t g_ms100 = 0; // global to allow time set function to reset to zero
#endif
void per10ms()
    ddc2:	ea 01       	movw	r28, r20
    ddc4:	21 96       	adiw	r28, 0x01	; 1
#endif

  for(int i=1; i<7; i++)
  {
    //INP_B_KEY_MEN 1  .. INP_B_KEY_LFT 6
    keys[enuk].input(in & (1<<i),(EnumKeys)enuk);
    ddc6:	ca 01       	movw	r24, r20
    ddc8:	88 0f       	add	r24, r24
    ddca:	99 1f       	adc	r25, r25
    ddcc:	84 0f       	add	r24, r20
    ddce:	95 1f       	adc	r25, r21
    ddd0:	b8 01       	movw	r22, r16
    ddd2:	0c 2e       	mov	r0, r28
    ddd4:	02 c0       	rjmp	.+4      	; 0xddda <_Z7per10msv+0xa0>
    ddd6:	75 95       	asr	r23
    ddd8:	67 95       	ror	r22
    ddda:	0a 94       	dec	r0
    dddc:	e2 f7       	brpl	.-8      	; 0xddd6 <_Z7per10msv+0x9c>
    ddde:	61 70       	andi	r22, 0x01	; 1
    dde0:	70 70       	andi	r23, 0x00	; 0
    dde2:	88 5f       	subi	r24, 0xF8	; 248
    dde4:	90 4e       	sbci	r25, 0xE0	; 224
    dde6:	50 e0       	ldi	r21, 0x00	; 0
    dde8:	0e 94 70 6d 	call	0xdae0	; 0xdae0 <_ZN3Key5inputEb8EnumKeys>

#else
  uint8_t in = ~PINB;
#endif

  for(int i=1; i<7; i++)
    ddec:	c6 30       	cpi	r28, 0x06	; 6
    ddee:	d1 05       	cpc	r29, r1
    ddf0:	39 f7       	brne	.-50     	; 0xddc0 <_Z7per10msv+0x86>
#endif

#if defined (PCBV3)

#  if defined (PCBV4)
  in = ~PINJ;
    ddf2:	00 91 03 01 	lds	r16, 0x0103
    ddf6:	00 95       	com	r16
  in |= (~PINC & (1<<INP_C_TRM_LV_UP)) ? (1<<INP_D_TRM_LV_UP) : 0;
  in |= (~PING & (1<<INP_G_TRM_LV_DWN)) ? (1<<INP_D_TRM_LV_DWN) : 0;
#  endif
#endif

  for(int i=0; i<8; i++)
    ddf8:	c0 e0       	ldi	r28, 0x00	; 0
    ddfa:	d0 e0       	ldi	r29, 0x00	; 0
  {
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    ddfc:	fe 01       	movw	r30, r28
    ddfe:	e9 52       	subi	r30, 0x29	; 41
    de00:	ff 4e       	sbci	r31, 0xEF	; 239
    de02:	e4 91       	lpm	r30, Z+


#if defined (PCBV3)
uint8_t g_ms100 = 0; // global to allow time set function to reset to zero
#endif
void per10ms()
    de04:	9e 01       	movw	r18, r28
    de06:	2a 5f       	subi	r18, 0xFA	; 250
    de08:	3f 4f       	sbci	r19, 0xFF	; 255
#endif

  for(int i=0; i<8; i++)
  {
    // INP_D_TRM_RH_UP   0 .. INP_D_TRM_LH_UP   7
    keys[enuk].input(in & pgm_read_byte(crossTrim+i),(EnumKeys)enuk);
    de0a:	c9 01       	movw	r24, r18
    de0c:	88 0f       	add	r24, r24
    de0e:	99 1f       	adc	r25, r25
    de10:	82 0f       	add	r24, r18
    de12:	93 1f       	adc	r25, r19
    de14:	88 5f       	subi	r24, 0xF8	; 248
    de16:	90 4e       	sbci	r25, 0xE0	; 224
    de18:	e0 23       	and	r30, r16
    de1a:	61 e0       	ldi	r22, 0x01	; 1
    de1c:	09 f4       	brne	.+2      	; 0xde20 <_Z7per10msv+0xe6>
    de1e:	60 e0       	ldi	r22, 0x00	; 0
    de20:	4c 2f       	mov	r20, r28
    de22:	4a 5f       	subi	r20, 0xFA	; 250
    de24:	50 e0       	ldi	r21, 0x00	; 0
    de26:	0e 94 70 6d 	call	0xdae0	; 0xdae0 <_ZN3Key5inputEb8EnumKeys>
  in |= (~PINC & (1<<INP_C_TRM_LV_UP)) ? (1<<INP_D_TRM_LV_UP) : 0;
  in |= (~PING & (1<<INP_G_TRM_LV_DWN)) ? (1<<INP_D_TRM_LV_DWN) : 0;
#  endif
#endif

  for(int i=0; i<8; i++)
    de2a:	21 96       	adiw	r28, 0x01	; 1
    de2c:	c8 30       	cpi	r28, 0x08	; 8
    de2e:	d1 05       	cpc	r29, r1
    de30:	29 f7       	brne	.-54     	; 0xddfc <_Z7per10msv+0xc2>

#if defined (FRSKY)

  // Attempt to transmit any waiting Fr-Sky alarm set packets every 50ms (subject to packet buffer availability)
  static uint8_t FrskyDelay = 5;
  if (FrskyAlarmSendState && (--FrskyDelay == 0))
    de32:	80 91 af 1f 	lds	r24, 0x1FAF
    de36:	88 23       	and	r24, r24
    de38:	61 f0       	breq	.+24     	; 0xde52 <_Z7per10msv+0x118>
    de3a:	80 91 d6 10 	lds	r24, 0x10D6
    de3e:	81 50       	subi	r24, 0x01	; 1
    de40:	80 93 d6 10 	sts	0x10D6, r24
    de44:	88 23       	and	r24, r24
    de46:	29 f4       	brne	.+10     	; 0xde52 <_Z7per10msv+0x118>
  {
    FrskyDelay = 5; // 50ms
    de48:	85 e0       	ldi	r24, 0x05	; 5
    de4a:	80 93 d6 10 	sts	0x10D6, r24
    FRSKY10mspoll();
    de4e:	0e 94 8b a3 	call	0x14716	; 0x14716 <_Z13FRSKY10mspollv>
  }
  
  if (frskyStreaming > 0)
    de52:	80 91 64 1f 	lds	r24, 0x1F64
    de56:	88 23       	and	r24, r24
    de58:	21 f0       	breq	.+8      	; 0xde62 <_Z7per10msv+0x128>
    frskyStreaming--;
    de5a:	81 50       	subi	r24, 0x01	; 1
    de5c:	80 93 64 1f 	sts	0x1F64, r24
    de60:	35 c0       	rjmp	.+106    	; 0xdecc <_Z7per10msv+0x192>
  else if (g_eeGeneral.enableTelemetryAlarm && (g_model.frsky.channels[0].ratio || g_model.frsky.channels[1].ratio)) {
    de62:	80 91 84 12 	lds	r24, 0x1284
    de66:	85 ff       	sbrs	r24, 5
    de68:	31 c0       	rjmp	.+98     	; 0xdecc <_Z7per10msv+0x192>
    de6a:	80 91 57 15 	lds	r24, 0x1557
    de6e:	20 91 58 15 	lds	r18, 0x1558
    de72:	92 2f       	mov	r25, r18
    de74:	9f 70       	andi	r25, 0x0F	; 15
    de76:	00 97       	sbiw	r24, 0x00	; 0
    de78:	41 f4       	brne	.+16     	; 0xde8a <_Z7per10msv+0x150>
    de7a:	80 91 5e 15 	lds	r24, 0x155E
    de7e:	20 91 5f 15 	lds	r18, 0x155F
    de82:	92 2f       	mov	r25, r18
    de84:	9f 70       	andi	r25, 0x0F	; 15
    de86:	00 97       	sbiw	r24, 0x00	; 0
    de88:	09 f1       	breq	.+66     	; 0xdecc <_Z7per10msv+0x192>
#if defined (BEEPSPKR)
    if (!(g_tmr10ms % 30)) beepWarn2Spkr((g_tmr10ms % 60) ? 25 : 20);
    de8a:	80 91 32 1f 	lds	r24, 0x1F32
    de8e:	90 91 33 1f 	lds	r25, 0x1F33
    de92:	6e e1       	ldi	r22, 0x1E	; 30
    de94:	70 e0       	ldi	r23, 0x00	; 0
    de96:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    de9a:	00 97       	sbiw	r24, 0x00	; 0
    de9c:	b9 f4       	brne	.+46     	; 0xdecc <_Z7per10msv+0x192>
    de9e:	20 91 74 15 	lds	r18, 0x1574
    dea2:	80 91 32 1f 	lds	r24, 0x1F32
    dea6:	90 91 33 1f 	lds	r25, 0x1F33
    deaa:	6c e3       	ldi	r22, 0x3C	; 60
    deac:	70 e0       	ldi	r23, 0x00	; 0
    deae:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    deb2:	00 97       	sbiw	r24, 0x00	; 0
    deb4:	11 f0       	breq	.+4      	; 0xdeba <_Z7per10msv+0x180>
    deb6:	69 e1       	ldi	r22, 0x19	; 25
    deb8:	01 c0       	rjmp	.+2      	; 0xdebc <_Z7per10msv+0x182>
    deba:	64 e1       	ldi	r22, 0x14	; 20

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    debc:	20 93 71 15 	sts	0x1571, r18
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    dec0:	88 e8       	ldi	r24, 0x88	; 136
    dec2:	93 e1       	ldi	r25, 0x13	; 19
    dec4:	70 e0       	ldi	r23, 0x00	; 0
    dec6:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    deca:	67 bd       	out	0x27, r22	; 39
  }
#endif

  // These moved here from perOut() [gruvin9x.cpp] to improve beep trigger reliability.
#if defined (BEEPSPKR)
  if(mixWarning & 1) if(((g_tmr10ms&0xFF)==  0)) beepWarn1Spkr(BEEP_DEFAULT_FREQ+7);
    decc:	80 91 7b 18 	lds	r24, 0x187B
    ded0:	80 ff       	sbrs	r24, 0
    ded2:	0c c0       	rjmp	.+24     	; 0xdeec <_Z7per10msv+0x1b2>
    ded4:	80 91 32 1f 	lds	r24, 0x1F32
    ded8:	90 91 33 1f 	lds	r25, 0x1F33
    dedc:	88 23       	and	r24, r24
    dede:	31 f4       	brne	.+12     	; 0xdeec <_Z7per10msv+0x1b2>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    dee0:	80 91 73 15 	lds	r24, 0x1573
    dee4:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    dee8:	87 e5       	ldi	r24, 0x57	; 87
    deea:	87 bd       	out	0x27, r24	; 39
  if(mixWarning & 2) if(((g_tmr10ms&0xFF)== 64) 
    deec:	80 91 7b 18 	lds	r24, 0x187B
    def0:	81 ff       	sbrs	r24, 1
    def2:	12 c0       	rjmp	.+36     	; 0xdf18 <_Z7per10msv+0x1de>
    def4:	80 91 32 1f 	lds	r24, 0x1F32
    def8:	90 91 33 1f 	lds	r25, 0x1F33
    defc:	80 34       	cpi	r24, 0x40	; 64
    defe:	31 f0       	breq	.+12     	; 0xdf0c <_Z7per10msv+0x1d2>
    df00:	80 91 32 1f 	lds	r24, 0x1F32
    df04:	90 91 33 1f 	lds	r25, 0x1F33
    df08:	88 34       	cpi	r24, 0x48	; 72
    df0a:	31 f4       	brne	.+12     	; 0xdf18 <_Z7per10msv+0x1de>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    df0c:	80 91 73 15 	lds	r24, 0x1573
    df10:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    df14:	84 e5       	ldi	r24, 0x54	; 84
    df16:	87 bd       	out	0x27, r24	; 39
      || ((g_tmr10ms&0xFF)== 72)) beepWarn1Spkr(BEEP_DEFAULT_FREQ+9);
  if(mixWarning & 4) if(((g_tmr10ms&0xFF)==128) || ((g_tmr10ms&0xFF)==136) 
    df18:	80 91 7b 18 	lds	r24, 0x187B
    df1c:	82 ff       	sbrs	r24, 2
    df1e:	18 c0       	rjmp	.+48     	; 0xdf50 <_Z7per10msv+0x216>
    df20:	80 91 32 1f 	lds	r24, 0x1F32
    df24:	90 91 33 1f 	lds	r25, 0x1F33
    df28:	80 38       	cpi	r24, 0x80	; 128
    df2a:	61 f0       	breq	.+24     	; 0xdf44 <_Z7per10msv+0x20a>
    df2c:	80 91 32 1f 	lds	r24, 0x1F32
    df30:	90 91 33 1f 	lds	r25, 0x1F33
    df34:	88 38       	cpi	r24, 0x88	; 136
    df36:	31 f0       	breq	.+12     	; 0xdf44 <_Z7per10msv+0x20a>
    df38:	80 91 32 1f 	lds	r24, 0x1F32
    df3c:	90 91 33 1f 	lds	r25, 0x1F33
    df40:	80 39       	cpi	r24, 0x90	; 144
    df42:	31 f4       	brne	.+12     	; 0xdf50 <_Z7per10msv+0x216>

extern uint8_t toneFreq;
#if defined (PCBV3) && defined(BEEPSPKR)
inline void _beepSpkr(uint8_t d, uint8_t f)
{
  g_beepCnt=d;
    df44:	80 91 73 15 	lds	r24, 0x1573
    df48:	80 93 71 15 	sts	0x1571, r24
  OCR0A = (5000 / f); // sticking with old values approx 20(abs. min) to 90, 60 being the default tone(?).
    df4c:	81 e5       	ldi	r24, 0x51	; 81
    df4e:	87 bd       	out	0x27, r24	; 39
#else
  if(mixWarning & 1) if(((g_tmr10ms&0xFF)==  0)) beepWarn1();
  if(mixWarning & 2) if(((g_tmr10ms&0xFF)== 64) || ((g_tmr10ms&0xFF)== 72)) beepWarn1();
  if(mixWarning & 4) if(((g_tmr10ms&0xFF)==128) || ((g_tmr10ms&0xFF)==136) || ((g_tmr10ms&0xFF)==144)) beepWarn1();
#endif
}
    df50:	df 91       	pop	r29
    df52:	cf 91       	pop	r28
    df54:	1f 91       	pop	r17
    df56:	0f 91       	pop	r16
    df58:	08 95       	ret

0000df5a <_ZL8leapyearl>:
  /* Don't add YEAR to TM_YEAR_BASE, as that might overflow.
     Also, work even if YEAR is negative.  */
  return
    ((year & 3) == 0
     && (year % 100 != 0
	 || ((year / 100) & 3) == (- (TM_YEAR_BASE / 100) & 3)));
    df5a:	9b 01       	movw	r18, r22
    df5c:	ac 01       	movw	r20, r24
    df5e:	23 70       	andi	r18, 0x03	; 3
    df60:	30 70       	andi	r19, 0x00	; 0
    df62:	40 70       	andi	r20, 0x00	; 0
    df64:	50 70       	andi	r21, 0x00	; 0
    df66:	21 15       	cp	r18, r1
    df68:	31 05       	cpc	r19, r1
    df6a:	41 05       	cpc	r20, r1
    df6c:	51 05       	cpc	r21, r1
    df6e:	a9 f4       	brne	.+42     	; 0xdf9a <_ZL8leapyearl+0x40>
    df70:	24 e6       	ldi	r18, 0x64	; 100
    df72:	30 e0       	ldi	r19, 0x00	; 0
    df74:	40 e0       	ldi	r20, 0x00	; 0
    df76:	50 e0       	ldi	r21, 0x00	; 0
    df78:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    df7c:	61 15       	cp	r22, r1
    df7e:	71 05       	cpc	r23, r1
    df80:	81 05       	cpc	r24, r1
    df82:	91 05       	cpc	r25, r1
    df84:	61 f4       	brne	.+24     	; 0xdf9e <_ZL8leapyearl+0x44>
    df86:	23 70       	andi	r18, 0x03	; 3
    df88:	30 70       	andi	r19, 0x00	; 0
    df8a:	40 70       	andi	r20, 0x00	; 0
    df8c:	50 70       	andi	r21, 0x00	; 0
#define	SECS_PER_DAY	86400ul
#define EOVERFLOW 0

/* Return 1 if YEAR + TM_YEAR_BASE is a leap year.  */
static inline int
leapyear (long int year)
    df8e:	81 e0       	ldi	r24, 0x01	; 1
    df90:	21 30       	cpi	r18, 0x01	; 1
    df92:	31 05       	cpc	r19, r1
    df94:	41 05       	cpc	r20, r1
    df96:	51 05       	cpc	r21, r1
    df98:	19 f0       	breq	.+6      	; 0xdfa0 <_ZL8leapyearl+0x46>
  /* Don't add YEAR to TM_YEAR_BASE, as that might overflow.
     Also, work even if YEAR is negative.  */
  return
    ((year & 3) == 0
     && (year % 100 != 0
	 || ((year / 100) & 3) == (- (TM_YEAR_BASE / 100) & 3)));
    df9a:	80 e0       	ldi	r24, 0x00	; 0
    df9c:	01 c0       	rjmp	.+2      	; 0xdfa0 <_ZL8leapyearl+0x46>
    df9e:	81 e0       	ldi	r24, 0x01	; 1
}
    dfa0:	90 e0       	ldi	r25, 0x00	; 0
    dfa2:	08 95       	ret

0000dfa4 <_ZL10ydhms_difflliiiiiiii>:
   detect overflow.  */

static inline time_t
ydhms_diff (long int year1, long int yday1, int hour1, int min1, int sec1,
	    int year0, int yday0, int hour0, int min0, int sec0)
{
    dfa4:	2f 92       	push	r2
    dfa6:	3f 92       	push	r3
    dfa8:	4f 92       	push	r4
    dfaa:	5f 92       	push	r5
    dfac:	6f 92       	push	r6
    dfae:	7f 92       	push	r7
    dfb0:	8f 92       	push	r8
    dfb2:	9f 92       	push	r9
    dfb4:	af 92       	push	r10
    dfb6:	bf 92       	push	r11
    dfb8:	cf 92       	push	r12
    dfba:	df 92       	push	r13
    dfbc:	ef 92       	push	r14
    dfbe:	ff 92       	push	r15
    dfc0:	0f 93       	push	r16
    dfc2:	1f 93       	push	r17
    dfc4:	df 93       	push	r29
    dfc6:	cf 93       	push	r28
    dfc8:	cd b7       	in	r28, 0x3d	; 61
    dfca:	de b7       	in	r29, 0x3e	; 62
    dfcc:	62 97       	sbiw	r28, 0x12	; 18
    dfce:	0f b6       	in	r0, 0x3f	; 63
    dfd0:	f8 94       	cli
    dfd2:	de bf       	out	0x3e, r29	; 62
    dfd4:	0f be       	out	0x3f, r0	; 63
    dfd6:	cd bf       	out	0x3d, r28	; 61
    dfd8:	69 83       	std	Y+1, r22	; 0x01
    dfda:	7a 83       	std	Y+2, r23	; 0x02
    dfdc:	8b 83       	std	Y+3, r24	; 0x03
    dfde:	9c 83       	std	Y+4, r25	; 0x04
    dfe0:	2d 87       	std	Y+13, r18	; 0x0d
    dfe2:	3e 87       	std	Y+14, r19	; 0x0e
    dfe4:	4f 87       	std	Y+15, r20	; 0x0f
    dfe6:	58 8b       	std	Y+16, r21	; 0x10
    dfe8:	95 01       	movw	r18, r10
    dfea:	9a 8a       	std	Y+18, r9	; 0x12
    dfec:	89 8a       	std	Y+17, r8	; 0x11
  verify (long_int_year_and_yday_are_wide_enough,
	  INT_MAX <= LONG_MAX / 2 || TIME_T_MAX <= UINT_MAX);

  /* Compute intervening leap days correctly even if year is negative.
     Take care to avoid integer overflow here.  */
  int a4 = SHR (year1, 2) + SHR (TM_YEAR_BASE, 2) - ! (year1 & 3);
    dfee:	e2 e0       	ldi	r30, 0x02	; 2
    dff0:	95 95       	asr	r25
    dff2:	87 95       	ror	r24
    dff4:	77 95       	ror	r23
    dff6:	67 95       	ror	r22
    dff8:	ea 95       	dec	r30
    dffa:	d1 f7       	brne	.-12     	; 0xdff0 <_ZL10ydhms_difflliiiiiiii+0x4c>
    dffc:	65 52       	subi	r22, 0x25	; 37
    dffe:	7e 4f       	sbci	r23, 0xFE	; 254
    e000:	89 81       	ldd	r24, Y+1	; 0x01
    e002:	9a 81       	ldd	r25, Y+2	; 0x02
    e004:	ab 81       	ldd	r26, Y+3	; 0x03
    e006:	bc 81       	ldd	r27, Y+4	; 0x04
    e008:	83 70       	andi	r24, 0x03	; 3
    e00a:	90 70       	andi	r25, 0x00	; 0
    e00c:	a0 70       	andi	r26, 0x00	; 0
    e00e:	b0 70       	andi	r27, 0x00	; 0
    e010:	41 e0       	ldi	r20, 0x01	; 1
    e012:	50 e0       	ldi	r21, 0x00	; 0
    e014:	00 97       	sbiw	r24, 0x00	; 0
    e016:	a1 05       	cpc	r26, r1
    e018:	b1 05       	cpc	r27, r1
    e01a:	11 f0       	breq	.+4      	; 0xe020 <_ZL10ydhms_difflliiiiiiii+0x7c>
    e01c:	40 e0       	ldi	r20, 0x00	; 0
    e01e:	50 e0       	ldi	r21, 0x00	; 0
    e020:	cb 01       	movw	r24, r22
    e022:	84 1b       	sub	r24, r20
    e024:	95 0b       	sbc	r25, r21
    e026:	9e 83       	std	Y+6, r25	; 0x06
    e028:	8d 83       	std	Y+5, r24	; 0x05
  int b4 = SHR (year0, 2) + SHR (TM_YEAR_BASE, 2) - ! (year0 & 3);
    e02a:	c9 01       	movw	r24, r18
    e02c:	95 95       	asr	r25
    e02e:	87 95       	ror	r24
    e030:	95 95       	asr	r25
    e032:	87 95       	ror	r24
    e034:	85 52       	subi	r24, 0x25	; 37
    e036:	9e 4f       	sbci	r25, 0xFE	; 254
    e038:	b9 01       	movw	r22, r18
    e03a:	63 70       	andi	r22, 0x03	; 3
    e03c:	70 70       	andi	r23, 0x00	; 0
    e03e:	41 e0       	ldi	r20, 0x01	; 1
    e040:	50 e0       	ldi	r21, 0x00	; 0
    e042:	61 15       	cp	r22, r1
    e044:	71 05       	cpc	r23, r1
    e046:	11 f0       	breq	.+4      	; 0xe04c <_ZL10ydhms_difflliiiiiiii+0xa8>
    e048:	40 e0       	ldi	r20, 0x00	; 0
    e04a:	50 e0       	ldi	r21, 0x00	; 0
    e04c:	bc 01       	movw	r22, r24
    e04e:	64 1b       	sub	r22, r20
    e050:	75 0b       	sbc	r23, r21
    e052:	78 87       	std	Y+8, r23	; 0x08
    e054:	6f 83       	std	Y+7, r22	; 0x07
  int a100 = a4 / 25 - (a4 % 25 < 0);
    e056:	e9 e1       	ldi	r30, 0x19	; 25
    e058:	f0 e0       	ldi	r31, 0x00	; 0
    e05a:	8d 81       	ldd	r24, Y+5	; 0x05
    e05c:	9e 81       	ldd	r25, Y+6	; 0x06
    e05e:	bf 01       	movw	r22, r30
    e060:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    e064:	99 1f       	adc	r25, r25
    e066:	99 27       	eor	r25, r25
    e068:	99 1f       	adc	r25, r25
    e06a:	ab 01       	movw	r20, r22
    e06c:	49 1b       	sub	r20, r25
    e06e:	51 09       	sbc	r21, r1
    e070:	5a 87       	std	Y+10, r21	; 0x0a
    e072:	49 87       	std	Y+9, r20	; 0x09
  int b100 = b4 / 25 - (b4 % 25 < 0);
    e074:	8f 81       	ldd	r24, Y+7	; 0x07
    e076:	98 85       	ldd	r25, Y+8	; 0x08
    e078:	bf 01       	movw	r22, r30
    e07a:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    e07e:	99 1f       	adc	r25, r25
    e080:	99 27       	eor	r25, r25
    e082:	99 1f       	adc	r25, r25
    e084:	ab 01       	movw	r20, r22
    e086:	49 1b       	sub	r20, r25
    e088:	51 09       	sbc	r21, r1
    e08a:	5c 87       	std	Y+12, r21	; 0x0c
    e08c:	4b 87       	std	Y+11, r20	; 0x0b
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
  time_t hours = 24 * days + hour1 - hour0;
  time_t minutes = 60 * hours + min1 - min0;
  time_t seconds = 60 * minutes + sec1 - sec0;
    e08e:	16 01       	movw	r2, r12
    e090:	44 24       	eor	r4, r4
    e092:	37 fc       	sbrc	r3, 7
    e094:	40 94       	com	r4
    e096:	54 2c       	mov	r5, r4
    e098:	8c a5       	ldd	r24, Y+44	; 0x2c
    e09a:	9d a5       	ldd	r25, Y+45	; 0x2d
    e09c:	aa 27       	eor	r26, r26
    e09e:	97 fd       	sbrc	r25, 7
    e0a0:	a0 95       	com	r26
    e0a2:	ba 2f       	mov	r27, r26
    e0a4:	28 1a       	sub	r2, r24
    e0a6:	39 0a       	sbc	r3, r25
    e0a8:	4a 0a       	sbc	r4, r26
    e0aa:	5b 0a       	sbc	r5, r27
     occur here.  */
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
  time_t hours = 24 * days + hour1 - hour0;
  time_t minutes = 60 * hours + min1 - min0;
    e0ac:	37 01       	movw	r6, r14
    e0ae:	88 24       	eor	r8, r8
    e0b0:	77 fc       	sbrc	r7, 7
    e0b2:	80 94       	com	r8
    e0b4:	98 2c       	mov	r9, r8
    e0b6:	8a a5       	ldd	r24, Y+42	; 0x2a
    e0b8:	9b a5       	ldd	r25, Y+43	; 0x2b
    e0ba:	aa 27       	eor	r26, r26
    e0bc:	97 fd       	sbrc	r25, 7
    e0be:	a0 95       	com	r26
    e0c0:	ba 2f       	mov	r27, r26
    e0c2:	68 1a       	sub	r6, r24
    e0c4:	79 0a       	sbc	r7, r25
    e0c6:	8a 0a       	sbc	r8, r26
    e0c8:	9b 0a       	sbc	r9, r27
  /* Compute the desired time in time_t precision.  Overflow might
     occur here.  */
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
  time_t hours = 24 * days + hour1 - hour0;
    e0ca:	58 01       	movw	r10, r16
    e0cc:	cc 24       	eor	r12, r12
    e0ce:	b7 fc       	sbrc	r11, 7
    e0d0:	c0 94       	com	r12
    e0d2:	dc 2c       	mov	r13, r12
    e0d4:	88 a5       	ldd	r24, Y+40	; 0x28
    e0d6:	99 a5       	ldd	r25, Y+41	; 0x29
    e0d8:	aa 27       	eor	r26, r26
    e0da:	97 fd       	sbrc	r25, 7
    e0dc:	a0 95       	com	r26
    e0de:	ba 2f       	mov	r27, r26
    e0e0:	a8 1a       	sub	r10, r24
    e0e2:	b9 0a       	sbc	r11, r25
    e0e4:	ca 0a       	sbc	r12, r26
    e0e6:	db 0a       	sbc	r13, r27

  /* Compute the desired time in time_t precision.  Overflow might
     occur here.  */
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
    e0e8:	69 89       	ldd	r22, Y+17	; 0x11
    e0ea:	7a 89       	ldd	r23, Y+18	; 0x12
    e0ec:	cb 01       	movw	r24, r22
    e0ee:	aa 27       	eor	r26, r26
    e0f0:	97 fd       	sbrc	r25, 7
    e0f2:	a0 95       	com	r26
    e0f4:	ba 2f       	mov	r27, r26
    e0f6:	ed 84       	ldd	r14, Y+13	; 0x0d
    e0f8:	fe 84       	ldd	r15, Y+14	; 0x0e
    e0fa:	0f 85       	ldd	r16, Y+15	; 0x0f
    e0fc:	18 89       	ldd	r17, Y+16	; 0x10
    e0fe:	e8 1a       	sub	r14, r24
    e100:	f9 0a       	sbc	r15, r25
    e102:	0a 0b       	sbc	r16, r26
    e104:	1b 0b       	sbc	r17, r27
  int intervening_leap_days = (a4 - b4) - (a100 - b100) + (a400 - b400);

  /* Compute the desired time in time_t precision.  Overflow might
     occur here.  */
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
    e106:	44 27       	eor	r20, r20
    e108:	37 fd       	sbrc	r19, 7
    e10a:	40 95       	com	r20
    e10c:	54 2f       	mov	r21, r20
    e10e:	69 81       	ldd	r22, Y+1	; 0x01
    e110:	7a 81       	ldd	r23, Y+2	; 0x02
    e112:	8b 81       	ldd	r24, Y+3	; 0x03
    e114:	9c 81       	ldd	r25, Y+4	; 0x04
    e116:	62 1b       	sub	r22, r18
    e118:	73 0b       	sbc	r23, r19
    e11a:	84 0b       	sbc	r24, r20
    e11c:	95 0b       	sbc	r25, r21
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
    e11e:	2d e6       	ldi	r18, 0x6D	; 109
    e120:	31 e0       	ldi	r19, 0x01	; 1
    e122:	40 e0       	ldi	r20, 0x00	; 0
    e124:	50 e0       	ldi	r21, 0x00	; 0
    e126:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    e12a:	e6 0e       	add	r14, r22
    e12c:	f7 1e       	adc	r15, r23
    e12e:	08 1f       	adc	r16, r24
    e130:	19 1f       	adc	r17, r25
     Take care to avoid integer overflow here.  */
  int a4 = SHR (year1, 2) + SHR (TM_YEAR_BASE, 2) - ! (year1 & 3);
  int b4 = SHR (year0, 2) + SHR (TM_YEAR_BASE, 2) - ! (year0 & 3);
  int a100 = a4 / 25 - (a4 % 25 < 0);
  int b100 = b4 / 25 - (b4 % 25 < 0);
  int a400 = SHR (a100, 2);
    e132:	89 85       	ldd	r24, Y+9	; 0x09
    e134:	9a 85       	ldd	r25, Y+10	; 0x0a
    e136:	95 95       	asr	r25
    e138:	87 95       	ror	r24
    e13a:	95 95       	asr	r25
    e13c:	87 95       	ror	r24
  int b400 = SHR (b100, 2);
  int intervening_leap_days = (a4 - b4) - (a100 - b100) + (a400 - b400);
    e13e:	29 85       	ldd	r18, Y+9	; 0x09
    e140:	3a 85       	ldd	r19, Y+10	; 0x0a
    e142:	82 1b       	sub	r24, r18
    e144:	93 0b       	sbc	r25, r19
    e146:	4d 81       	ldd	r20, Y+5	; 0x05
    e148:	5e 81       	ldd	r21, Y+6	; 0x06
    e14a:	84 0f       	add	r24, r20
    e14c:	95 1f       	adc	r25, r21
    e14e:	6f 81       	ldd	r22, Y+7	; 0x07
    e150:	78 85       	ldd	r23, Y+8	; 0x08
    e152:	86 1b       	sub	r24, r22
    e154:	97 0b       	sbc	r25, r23
    e156:	2b 85       	ldd	r18, Y+11	; 0x0b
    e158:	3c 85       	ldd	r19, Y+12	; 0x0c
    e15a:	82 0f       	add	r24, r18
    e15c:	93 1f       	adc	r25, r19
  int a4 = SHR (year1, 2) + SHR (TM_YEAR_BASE, 2) - ! (year1 & 3);
  int b4 = SHR (year0, 2) + SHR (TM_YEAR_BASE, 2) - ! (year0 & 3);
  int a100 = a4 / 25 - (a4 % 25 < 0);
  int b100 = b4 / 25 - (b4 % 25 < 0);
  int a400 = SHR (a100, 2);
  int b400 = SHR (b100, 2);
    e15e:	35 95       	asr	r19
    e160:	27 95       	ror	r18
    e162:	35 95       	asr	r19
    e164:	27 95       	ror	r18
  int intervening_leap_days = (a4 - b4) - (a100 - b100) + (a400 - b400);
    e166:	82 1b       	sub	r24, r18
    e168:	93 0b       	sbc	r25, r19

  /* Compute the desired time in time_t precision.  Overflow might
     occur here.  */
  time_t tyear1 = year1;
  time_t years = tyear1 - year0;
  time_t days = 365 * years + yday1 - yday0 + intervening_leap_days;
    e16a:	aa 27       	eor	r26, r26
    e16c:	97 fd       	sbrc	r25, 7
    e16e:	a0 95       	com	r26
    e170:	ba 2f       	mov	r27, r26
    e172:	e8 0e       	add	r14, r24
    e174:	f9 1e       	adc	r15, r25
    e176:	0a 1f       	adc	r16, r26
    e178:	1b 1f       	adc	r17, r27
  time_t hours = 24 * days + hour1 - hour0;
    e17a:	c8 01       	movw	r24, r16
    e17c:	b7 01       	movw	r22, r14
    e17e:	28 e1       	ldi	r18, 0x18	; 24
    e180:	30 e0       	ldi	r19, 0x00	; 0
    e182:	40 e0       	ldi	r20, 0x00	; 0
    e184:	50 e0       	ldi	r21, 0x00	; 0
    e186:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    e18a:	a6 0e       	add	r10, r22
    e18c:	b7 1e       	adc	r11, r23
    e18e:	c8 1e       	adc	r12, r24
    e190:	d9 1e       	adc	r13, r25
  time_t minutes = 60 * hours + min1 - min0;
    e192:	c6 01       	movw	r24, r12
    e194:	b5 01       	movw	r22, r10
    e196:	2c e3       	ldi	r18, 0x3C	; 60
    e198:	30 e0       	ldi	r19, 0x00	; 0
    e19a:	40 e0       	ldi	r20, 0x00	; 0
    e19c:	50 e0       	ldi	r21, 0x00	; 0
    e19e:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    e1a2:	66 0e       	add	r6, r22
    e1a4:	77 1e       	adc	r7, r23
    e1a6:	88 1e       	adc	r8, r24
    e1a8:	99 1e       	adc	r9, r25
  time_t seconds = 60 * minutes + sec1 - sec0;
    e1aa:	c4 01       	movw	r24, r8
    e1ac:	b3 01       	movw	r22, r6
    e1ae:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    e1b2:	26 0e       	add	r2, r22
    e1b4:	37 1e       	adc	r3, r23
    e1b6:	48 1e       	adc	r4, r24
    e1b8:	59 1e       	adc	r5, r25
  return seconds;
}
    e1ba:	b1 01       	movw	r22, r2
    e1bc:	c2 01       	movw	r24, r4
    e1be:	62 96       	adiw	r28, 0x12	; 18
    e1c0:	0f b6       	in	r0, 0x3f	; 63
    e1c2:	f8 94       	cli
    e1c4:	de bf       	out	0x3e, r29	; 62
    e1c6:	0f be       	out	0x3f, r0	; 63
    e1c8:	cd bf       	out	0x3d, r28	; 61
    e1ca:	cf 91       	pop	r28
    e1cc:	df 91       	pop	r29
    e1ce:	1f 91       	pop	r17
    e1d0:	0f 91       	pop	r16
    e1d2:	ff 90       	pop	r15
    e1d4:	ef 90       	pop	r14
    e1d6:	df 90       	pop	r13
    e1d8:	cf 90       	pop	r12
    e1da:	bf 90       	pop	r11
    e1dc:	af 90       	pop	r10
    e1de:	9f 90       	pop	r9
    e1e0:	8f 90       	pop	r8
    e1e2:	7f 90       	pop	r7
    e1e4:	6f 90       	pop	r6
    e1e6:	5f 90       	pop	r5
    e1e8:	4f 90       	pop	r4
    e1ea:	3f 90       	pop	r3
    e1ec:	2f 90       	pop	r2
    e1ee:	08 95       	ret

0000e1f0 <_Z9__offtimePllP2tm>:
int
__offtime (
     time_t *t,
     long int offset,
     struct tm *tp)
{
    e1f0:	2f 92       	push	r2
    e1f2:	3f 92       	push	r3
    e1f4:	4f 92       	push	r4
    e1f6:	5f 92       	push	r5
    e1f8:	6f 92       	push	r6
    e1fa:	7f 92       	push	r7
    e1fc:	8f 92       	push	r8
    e1fe:	9f 92       	push	r9
    e200:	af 92       	push	r10
    e202:	bf 92       	push	r11
    e204:	cf 92       	push	r12
    e206:	df 92       	push	r13
    e208:	ef 92       	push	r14
    e20a:	ff 92       	push	r15
    e20c:	0f 93       	push	r16
    e20e:	1f 93       	push	r17
    e210:	df 93       	push	r29
    e212:	cf 93       	push	r28
    e214:	cd b7       	in	r28, 0x3d	; 61
    e216:	de b7       	in	r29, 0x3e	; 62
    e218:	2e 97       	sbiw	r28, 0x0e	; 14
    e21a:	0f b6       	in	r0, 0x3f	; 63
    e21c:	f8 94       	cli
    e21e:	de bf       	out	0x3e, r29	; 62
    e220:	0f be       	out	0x3f, r0	; 63
    e222:	cd bf       	out	0x3d, r28	; 61
    e224:	5a 01       	movw	r10, r20
    e226:	6b 01       	movw	r12, r22
    e228:	39 01       	movw	r6, r18
  long int days, rem, y;
  const unsigned short int *ip;

  days = *t / SECS_PER_DAY;
    e22a:	dc 01       	movw	r26, r24
    e22c:	6d 91       	ld	r22, X+
    e22e:	7d 91       	ld	r23, X+
    e230:	8d 91       	ld	r24, X+
    e232:	9c 91       	ld	r25, X
    e234:	20 e8       	ldi	r18, 0x80	; 128
    e236:	31 e5       	ldi	r19, 0x51	; 81
    e238:	41 e0       	ldi	r20, 0x01	; 1
    e23a:	50 e0       	ldi	r21, 0x00	; 0
    e23c:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
    e240:	79 01       	movw	r14, r18
    e242:	8a 01       	movw	r16, r20
  rem = *t % SECS_PER_DAY;
  rem += offset;
    e244:	a6 0e       	add	r10, r22
    e246:	b7 1e       	adc	r11, r23
    e248:	c8 1e       	adc	r12, r24
    e24a:	d9 1e       	adc	r13, r25
    e24c:	d6 01       	movw	r26, r12
    e24e:	c5 01       	movw	r24, r10
  while (rem < 0)
    e250:	09 c0       	rjmp	.+18     	; 0xe264 <_Z9__offtimePllP2tm+0x74>
/* Compute the `struct tm' representation of *T,
   offset OFFSET seconds east of UTC,
   and store year, yday, mon, mday, wday, hour, min, sec into *TP.
   Return nonzero if successful.  */
int
__offtime (
    e252:	80 58       	subi	r24, 0x80	; 128
    e254:	9e 4a       	sbci	r25, 0xAE	; 174
    e256:	ae 4f       	sbci	r26, 0xFE	; 254
    e258:	bf 4f       	sbci	r27, 0xFF	; 255
  rem = *t % SECS_PER_DAY;
  rem += offset;
  while (rem < 0)
    {
      rem += SECS_PER_DAY;
      --days;
    e25a:	08 94       	sec
    e25c:	e1 08       	sbc	r14, r1
    e25e:	f1 08       	sbc	r15, r1
    e260:	01 09       	sbc	r16, r1
    e262:	11 09       	sbc	r17, r1
  const unsigned short int *ip;

  days = *t / SECS_PER_DAY;
  rem = *t % SECS_PER_DAY;
  rem += offset;
  while (rem < 0)
    e264:	b7 fd       	sbrc	r27, 7
    e266:	f5 cf       	rjmp	.-22     	; 0xe252 <_Z9__offtimePllP2tm+0x62>
    e268:	09 c0       	rjmp	.+18     	; 0xe27c <_Z9__offtimePllP2tm+0x8c>
/* Compute the `struct tm' representation of *T,
   offset OFFSET seconds east of UTC,
   and store year, yday, mon, mday, wday, hour, min, sec into *TP.
   Return nonzero if successful.  */
int
__offtime (
    e26a:	80 58       	subi	r24, 0x80	; 128
    e26c:	91 45       	sbci	r25, 0x51	; 81
    e26e:	a1 40       	sbci	r26, 0x01	; 1
    e270:	b0 40       	sbci	r27, 0x00	; 0
      --days;
    }
  while (rem >= SECS_PER_DAY)
    {
      rem -= SECS_PER_DAY;
      ++days;
    e272:	08 94       	sec
    e274:	e1 1c       	adc	r14, r1
    e276:	f1 1c       	adc	r15, r1
    e278:	01 1d       	adc	r16, r1
    e27a:	11 1d       	adc	r17, r1
  while (rem < 0)
    {
      rem += SECS_PER_DAY;
      --days;
    }
  while (rem >= SECS_PER_DAY)
    e27c:	80 38       	cpi	r24, 0x80	; 128
    e27e:	e1 e5       	ldi	r30, 0x51	; 81
    e280:	9e 07       	cpc	r25, r30
    e282:	e1 e0       	ldi	r30, 0x01	; 1
    e284:	ae 07       	cpc	r26, r30
    e286:	e0 e0       	ldi	r30, 0x00	; 0
    e288:	be 07       	cpc	r27, r30
    e28a:	78 f7       	brcc	.-34     	; 0xe26a <_Z9__offtimePllP2tm+0x7a>
    {
      rem -= SECS_PER_DAY;
      ++days;
    }
  tp->tm_hour = rem / SECS_PER_HOUR;
    e28c:	bc 01       	movw	r22, r24
    e28e:	cd 01       	movw	r24, r26
    e290:	20 e1       	ldi	r18, 0x10	; 16
    e292:	3e e0       	ldi	r19, 0x0E	; 14
    e294:	40 e0       	ldi	r20, 0x00	; 0
    e296:	50 e0       	ldi	r21, 0x00	; 0
    e298:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
    e29c:	d3 01       	movw	r26, r6
    e29e:	12 96       	adiw	r26, 0x02	; 2
    e2a0:	2c 93       	st	X, r18
  rem %= SECS_PER_HOUR;
  tp->tm_min = rem / 60;
    e2a2:	2c e3       	ldi	r18, 0x3C	; 60
    e2a4:	30 e0       	ldi	r19, 0x00	; 0
    e2a6:	40 e0       	ldi	r20, 0x00	; 0
    e2a8:	50 e0       	ldi	r21, 0x00	; 0
    e2aa:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e2ae:	f3 01       	movw	r30, r6
    e2b0:	21 83       	std	Z+1, r18	; 0x01
  tp->tm_sec = rem % 60;
    e2b2:	60 83       	st	Z, r22
  /* January 1, 1970 was a Thursday.  */
  tp->tm_wday = (4 + days) % 7;
    e2b4:	c8 01       	movw	r24, r16
    e2b6:	b7 01       	movw	r22, r14
    e2b8:	6c 5f       	subi	r22, 0xFC	; 252
    e2ba:	7f 4f       	sbci	r23, 0xFF	; 255
    e2bc:	8f 4f       	sbci	r24, 0xFF	; 255
    e2be:	9f 4f       	sbci	r25, 0xFF	; 255
    e2c0:	27 e0       	ldi	r18, 0x07	; 7
    e2c2:	30 e0       	ldi	r19, 0x00	; 0
    e2c4:	40 e0       	ldi	r20, 0x00	; 0
    e2c6:	50 e0       	ldi	r21, 0x00	; 0
    e2c8:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e2cc:	86 2f       	mov	r24, r22
    e2ce:	d3 01       	movw	r26, r6
    e2d0:	16 96       	adiw	r26, 0x06	; 6
    e2d2:	6c 93       	st	X, r22
    e2d4:	16 97       	sbiw	r26, 0x06	; 6
  if (tp->tm_wday < 0)
    e2d6:	67 ff       	sbrs	r22, 7
    e2d8:	04 c0       	rjmp	.+8      	; 0xe2e2 <_Z9__offtimePllP2tm+0xf2>
    tp->tm_wday += 7;
    e2da:	89 5f       	subi	r24, 0xF9	; 249
    e2dc:	16 96       	adiw	r26, 0x06	; 6
    e2de:	8c 93       	st	X, r24
    e2e0:	16 97       	sbiw	r26, 0x06	; 6
  y = 1970;
    e2e2:	a2 eb       	ldi	r26, 0xB2	; 178
    e2e4:	2a 2e       	mov	r2, r26
    e2e6:	a7 e0       	ldi	r26, 0x07	; 7
    e2e8:	3a 2e       	mov	r3, r26
    e2ea:	41 2c       	mov	r4, r1
    e2ec:	51 2c       	mov	r5, r1
      long int yg = y + days / 365 - (days % 365 < 0);

      /* Adjust DAYS and Y to match the guessed year.  */
      days -= ((yg - y) * 365
	       + LEAPS_THRU_END_OF (yg - 1)
	       - LEAPS_THRU_END_OF (y - 1));
    e2ee:	7e 86       	std	Y+14, r7	; 0x0e
    e2f0:	6d 86       	std	Y+13, r6	; 0x0d
  y = 1970;

#define DIV(a, b) ((a) / (b) - ((a) % (b) < 0))
#define LEAPS_THRU_END_OF(y) (DIV (y, 4) - DIV (y, 100) + DIV (y, 400))

  while (days < 0 || days >= (leapyear (y) ? 366 : 365))
    e2f2:	17 fd       	sbrc	r17, 7
    e2f4:	15 c0       	rjmp	.+42     	; 0xe320 <_Z9__offtimePllP2tm+0x130>
    e2f6:	c2 01       	movw	r24, r4
    e2f8:	b1 01       	movw	r22, r2
    e2fa:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <_ZL8leapyearl>
    e2fe:	00 97       	sbiw	r24, 0x00	; 0
    e300:	29 f4       	brne	.+10     	; 0xe30c <_Z9__offtimePllP2tm+0x11c>
    e302:	2d e6       	ldi	r18, 0x6D	; 109
    e304:	31 e0       	ldi	r19, 0x01	; 1
    e306:	40 e0       	ldi	r20, 0x00	; 0
    e308:	50 e0       	ldi	r21, 0x00	; 0
    e30a:	04 c0       	rjmp	.+8      	; 0xe314 <_Z9__offtimePllP2tm+0x124>
    e30c:	2e e6       	ldi	r18, 0x6E	; 110
    e30e:	31 e0       	ldi	r19, 0x01	; 1
    e310:	40 e0       	ldi	r20, 0x00	; 0
    e312:	50 e0       	ldi	r21, 0x00	; 0
    e314:	e2 16       	cp	r14, r18
    e316:	f3 06       	cpc	r15, r19
    e318:	04 07       	cpc	r16, r20
    e31a:	15 07       	cpc	r17, r21
    e31c:	0c f4       	brge	.+2      	; 0xe320 <_Z9__offtimePllP2tm+0x130>
    e31e:	fb c0       	rjmp	.+502    	; 0xe516 <_Z9__offtimePllP2tm+0x326>
    {
      /* Guess a corrected year, assuming 365 days per year.  */
      long int yg = y + days / 365 - (days % 365 < 0);
    e320:	c8 01       	movw	r24, r16
    e322:	b7 01       	movw	r22, r14
    e324:	2d e6       	ldi	r18, 0x6D	; 109
    e326:	31 e0       	ldi	r19, 0x01	; 1
    e328:	40 e0       	ldi	r20, 0x00	; 0
    e32a:	50 e0       	ldi	r21, 0x00	; 0
    e32c:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e330:	66 27       	eor	r22, r22
    e332:	97 fd       	sbrc	r25, 7
    e334:	63 95       	inc	r22
    e336:	77 27       	eor	r23, r23
    e338:	88 27       	eor	r24, r24
    e33a:	99 27       	eor	r25, r25
    e33c:	59 01       	movw	r10, r18
    e33e:	6a 01       	movw	r12, r20
    e340:	a6 1a       	sub	r10, r22
    e342:	b7 0a       	sbc	r11, r23
    e344:	c8 0a       	sbc	r12, r24
    e346:	d9 0a       	sbc	r13, r25
    e348:	a2 0c       	add	r10, r2
    e34a:	b3 1c       	adc	r11, r3
    e34c:	c4 1c       	adc	r12, r4
    e34e:	d5 1c       	adc	r13, r5
    e350:	a9 82       	std	Y+1, r10	; 0x01
    e352:	ba 82       	std	Y+2, r11	; 0x02
    e354:	cb 82       	std	Y+3, r12	; 0x03
    e356:	dc 82       	std	Y+4, r13	; 0x04

      /* Adjust DAYS and Y to match the guessed year.  */
      days -= ((yg - y) * 365
	       + LEAPS_THRU_END_OF (yg - 1)
	       - LEAPS_THRU_END_OF (y - 1));
    e358:	62 01       	movw	r12, r4
    e35a:	51 01       	movw	r10, r2
    e35c:	08 94       	sec
    e35e:	a1 08       	sbc	r10, r1
    e360:	b1 08       	sbc	r11, r1
    e362:	c1 08       	sbc	r12, r1
    e364:	d1 08       	sbc	r13, r1
    e366:	69 80       	ldd	r6, Y+1	; 0x01
    e368:	7a 80       	ldd	r7, Y+2	; 0x02
    e36a:	8b 80       	ldd	r8, Y+3	; 0x03
    e36c:	9c 80       	ldd	r9, Y+4	; 0x04
    e36e:	08 94       	sec
    e370:	61 08       	sbc	r6, r1
    e372:	71 08       	sbc	r7, r1
    e374:	81 08       	sbc	r8, r1
    e376:	91 08       	sbc	r9, r1
    e378:	c6 01       	movw	r24, r12
    e37a:	b5 01       	movw	r22, r10
    e37c:	24 e0       	ldi	r18, 0x04	; 4
    e37e:	30 e0       	ldi	r19, 0x00	; 0
    e380:	40 e0       	ldi	r20, 0x00	; 0
    e382:	50 e0       	ldi	r21, 0x00	; 0
    e384:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e388:	2d 83       	std	Y+5, r18	; 0x05
    e38a:	3e 83       	std	Y+6, r19	; 0x06
    e38c:	4f 83       	std	Y+7, r20	; 0x07
    e38e:	58 87       	std	Y+8, r21	; 0x08
    e390:	69 87       	std	Y+9, r22	; 0x09
    e392:	7a 87       	std	Y+10, r23	; 0x0a
    e394:	8b 87       	std	Y+11, r24	; 0x0b
    e396:	9c 87       	std	Y+12, r25	; 0x0c
    e398:	c6 01       	movw	r24, r12
    e39a:	b5 01       	movw	r22, r10
    e39c:	2c e9       	ldi	r18, 0x9C	; 156
    e39e:	3f ef       	ldi	r19, 0xFF	; 255
    e3a0:	4f ef       	ldi	r20, 0xFF	; 255
    e3a2:	5f ef       	ldi	r21, 0xFF	; 255
    e3a4:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e3a8:	8d 81       	ldd	r24, Y+5	; 0x05
    e3aa:	9e 81       	ldd	r25, Y+6	; 0x06
    e3ac:	af 81       	ldd	r26, Y+7	; 0x07
    e3ae:	b8 85       	ldd	r27, Y+8	; 0x08
    e3b0:	28 0f       	add	r18, r24
    e3b2:	39 1f       	adc	r19, r25
    e3b4:	4a 1f       	adc	r20, r26
    e3b6:	5b 1f       	adc	r21, r27
    e3b8:	e2 0e       	add	r14, r18
    e3ba:	f3 1e       	adc	r15, r19
    e3bc:	04 1f       	adc	r16, r20
    e3be:	15 1f       	adc	r17, r21
    e3c0:	c6 01       	movw	r24, r12
    e3c2:	b5 01       	movw	r22, r10
    e3c4:	20 e9       	ldi	r18, 0x90	; 144
    e3c6:	31 e0       	ldi	r19, 0x01	; 1
    e3c8:	40 e0       	ldi	r20, 0x00	; 0
    e3ca:	50 e0       	ldi	r21, 0x00	; 0
    e3cc:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e3d0:	6d 83       	std	Y+5, r22	; 0x05
    e3d2:	7e 83       	std	Y+6, r23	; 0x06
    e3d4:	8f 83       	std	Y+7, r24	; 0x07
    e3d6:	98 87       	std	Y+8, r25	; 0x08
    e3d8:	e2 0e       	add	r14, r18
    e3da:	f3 1e       	adc	r15, r19
    e3dc:	04 1f       	adc	r16, r20
    e3de:	15 1f       	adc	r17, r21
    e3e0:	c6 01       	movw	r24, r12
    e3e2:	b5 01       	movw	r22, r10
    e3e4:	24 e6       	ldi	r18, 0x64	; 100
    e3e6:	30 e0       	ldi	r19, 0x00	; 0
    e3e8:	40 e0       	ldi	r20, 0x00	; 0
    e3ea:	50 e0       	ldi	r21, 0x00	; 0
    e3ec:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e3f0:	66 27       	eor	r22, r22
    e3f2:	97 fd       	sbrc	r25, 7
    e3f4:	63 95       	inc	r22
    e3f6:	77 27       	eor	r23, r23
    e3f8:	88 27       	eor	r24, r24
    e3fa:	99 27       	eor	r25, r25
    e3fc:	e6 0e       	add	r14, r22
    e3fe:	f7 1e       	adc	r15, r23
    e400:	08 1f       	adc	r16, r24
    e402:	19 1f       	adc	r17, r25
    e404:	8d 81       	ldd	r24, Y+5	; 0x05
    e406:	9e 81       	ldd	r25, Y+6	; 0x06
    e408:	af 81       	ldd	r26, Y+7	; 0x07
    e40a:	b8 85       	ldd	r27, Y+8	; 0x08
    e40c:	88 27       	eor	r24, r24
    e40e:	b7 fd       	sbrc	r27, 7
    e410:	83 95       	inc	r24
    e412:	99 27       	eor	r25, r25
    e414:	aa 27       	eor	r26, r26
    e416:	bb 27       	eor	r27, r27
    e418:	e8 1a       	sub	r14, r24
    e41a:	f9 0a       	sbc	r15, r25
    e41c:	0a 0b       	sbc	r16, r26
    e41e:	1b 0b       	sbc	r17, r27
    e420:	89 85       	ldd	r24, Y+9	; 0x09
    e422:	9a 85       	ldd	r25, Y+10	; 0x0a
    e424:	ab 85       	ldd	r26, Y+11	; 0x0b
    e426:	bc 85       	ldd	r27, Y+12	; 0x0c
    e428:	88 27       	eor	r24, r24
    e42a:	b7 fd       	sbrc	r27, 7
    e42c:	83 95       	inc	r24
    e42e:	99 27       	eor	r25, r25
    e430:	aa 27       	eor	r26, r26
    e432:	bb 27       	eor	r27, r27
    e434:	e8 1a       	sub	r14, r24
    e436:	f9 0a       	sbc	r15, r25
    e438:	0a 0b       	sbc	r16, r26
    e43a:	1b 0b       	sbc	r17, r27
    e43c:	c4 01       	movw	r24, r8
    e43e:	b3 01       	movw	r22, r6
    e440:	20 e7       	ldi	r18, 0x70	; 112
    e442:	3e ef       	ldi	r19, 0xFE	; 254
    e444:	4f ef       	ldi	r20, 0xFF	; 255
    e446:	5f ef       	ldi	r21, 0xFF	; 255
    e448:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e44c:	e2 0e       	add	r14, r18
    e44e:	f3 1e       	adc	r15, r19
    e450:	04 1f       	adc	r16, r20
    e452:	15 1f       	adc	r17, r21
    e454:	c4 01       	movw	r24, r8
    e456:	b3 01       	movw	r22, r6
    e458:	24 e6       	ldi	r18, 0x64	; 100
    e45a:	30 e0       	ldi	r19, 0x00	; 0
    e45c:	40 e0       	ldi	r20, 0x00	; 0
    e45e:	50 e0       	ldi	r21, 0x00	; 0
    e460:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e464:	6d 83       	std	Y+5, r22	; 0x05
    e466:	7e 83       	std	Y+6, r23	; 0x06
    e468:	8f 83       	std	Y+7, r24	; 0x07
    e46a:	98 87       	std	Y+8, r25	; 0x08
    e46c:	e2 0e       	add	r14, r18
    e46e:	f3 1e       	adc	r15, r19
    e470:	04 1f       	adc	r16, r20
    e472:	15 1f       	adc	r17, r21
    e474:	c4 01       	movw	r24, r8
    e476:	b3 01       	movw	r22, r6
    e478:	24 e0       	ldi	r18, 0x04	; 4
    e47a:	30 e0       	ldi	r19, 0x00	; 0
    e47c:	40 e0       	ldi	r20, 0x00	; 0
    e47e:	50 e0       	ldi	r21, 0x00	; 0
    e480:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e484:	5b 01       	movw	r10, r22
    e486:	6c 01       	movw	r12, r24
    e488:	e2 1a       	sub	r14, r18
    e48a:	f3 0a       	sbc	r15, r19
    e48c:	04 0b       	sbc	r16, r20
    e48e:	15 0b       	sbc	r17, r21
    e490:	c4 01       	movw	r24, r8
    e492:	b3 01       	movw	r22, r6
    e494:	20 e9       	ldi	r18, 0x90	; 144
    e496:	31 e0       	ldi	r19, 0x01	; 1
    e498:	40 e0       	ldi	r20, 0x00	; 0
    e49a:	50 e0       	ldi	r21, 0x00	; 0
    e49c:	0e 94 50 ab 	call	0x156a0	; 0x156a0 <__divmodsi4>
    e4a0:	66 27       	eor	r22, r22
    e4a2:	97 fd       	sbrc	r25, 7
    e4a4:	63 95       	inc	r22
    e4a6:	77 27       	eor	r23, r23
    e4a8:	88 27       	eor	r24, r24
    e4aa:	99 27       	eor	r25, r25
    e4ac:	e6 0e       	add	r14, r22
    e4ae:	f7 1e       	adc	r15, r23
    e4b0:	08 1f       	adc	r16, r24
    e4b2:	19 1f       	adc	r17, r25
    e4b4:	d6 01       	movw	r26, r12
    e4b6:	c5 01       	movw	r24, r10
    e4b8:	88 27       	eor	r24, r24
    e4ba:	b7 fd       	sbrc	r27, 7
    e4bc:	83 95       	inc	r24
    e4be:	99 27       	eor	r25, r25
    e4c0:	aa 27       	eor	r26, r26
    e4c2:	bb 27       	eor	r27, r27
    e4c4:	e8 0e       	add	r14, r24
    e4c6:	f9 1e       	adc	r15, r25
    e4c8:	0a 1f       	adc	r16, r26
    e4ca:	1b 1f       	adc	r17, r27
    e4cc:	c2 01       	movw	r24, r4
    e4ce:	b1 01       	movw	r22, r2
    e4d0:	a9 80       	ldd	r10, Y+1	; 0x01
    e4d2:	ba 80       	ldd	r11, Y+2	; 0x02
    e4d4:	cb 80       	ldd	r12, Y+3	; 0x03
    e4d6:	dc 80       	ldd	r13, Y+4	; 0x04
    e4d8:	6a 19       	sub	r22, r10
    e4da:	7b 09       	sbc	r23, r11
    e4dc:	8c 09       	sbc	r24, r12
    e4de:	9d 09       	sbc	r25, r13
    e4e0:	2d e6       	ldi	r18, 0x6D	; 109
    e4e2:	31 e0       	ldi	r19, 0x01	; 1
    e4e4:	40 e0       	ldi	r20, 0x00	; 0
    e4e6:	50 e0       	ldi	r21, 0x00	; 0
    e4e8:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    e4ec:	e6 0e       	add	r14, r22
    e4ee:	f7 1e       	adc	r15, r23
    e4f0:	08 1f       	adc	r16, r24
    e4f2:	19 1f       	adc	r17, r25
    e4f4:	8d 81       	ldd	r24, Y+5	; 0x05
    e4f6:	9e 81       	ldd	r25, Y+6	; 0x06
    e4f8:	af 81       	ldd	r26, Y+7	; 0x07
    e4fa:	b8 85       	ldd	r27, Y+8	; 0x08
    e4fc:	88 27       	eor	r24, r24
    e4fe:	b7 fd       	sbrc	r27, 7
    e500:	83 95       	inc	r24
    e502:	99 27       	eor	r25, r25
    e504:	aa 27       	eor	r26, r26
    e506:	bb 27       	eor	r27, r27
    e508:	e8 1a       	sub	r14, r24
    e50a:	f9 0a       	sbc	r15, r25
    e50c:	0a 0b       	sbc	r16, r26
    e50e:	1b 0b       	sbc	r17, r27
      y = yg;
    e510:	15 01       	movw	r2, r10
    e512:	26 01       	movw	r4, r12
    e514:	ee ce       	rjmp	.-548    	; 0xe2f2 <_Z9__offtimePllP2tm+0x102>
    e516:	6d 84       	ldd	r6, Y+13	; 0x0d
    e518:	7e 84       	ldd	r7, Y+14	; 0x0e
    }
  tp->tm_year = y - 1900;
    e51a:	22 2d       	mov	r18, r2
    e51c:	2c 56       	subi	r18, 0x6C	; 108
    e51e:	d3 01       	movw	r26, r6
    e520:	15 96       	adiw	r26, 0x05	; 5
    e522:	2c 93       	st	X, r18
    e524:	15 97       	sbiw	r26, 0x05	; 5
  if (tp->tm_year != y - 1900)
    e526:	a2 2e       	mov	r10, r18
    e528:	bb 24       	eor	r11, r11
    e52a:	a7 fc       	sbrc	r10, 7
    e52c:	b0 94       	com	r11
    e52e:	cb 2c       	mov	r12, r11
    e530:	db 2c       	mov	r13, r11
    e532:	a2 01       	movw	r20, r4
    e534:	91 01       	movw	r18, r2
    e536:	2c 56       	subi	r18, 0x6C	; 108
    e538:	37 40       	sbci	r19, 0x07	; 7
    e53a:	40 40       	sbci	r20, 0x00	; 0
    e53c:	50 40       	sbci	r21, 0x00	; 0
    e53e:	a2 16       	cp	r10, r18
    e540:	b3 06       	cpc	r11, r19
    e542:	c4 06       	cpc	r12, r20
    e544:	d5 06       	cpc	r13, r21
    e546:	59 f5       	brne	.+86     	; 0xe59e <_Z9__offtimePllP2tm+0x3ae>
    {
      /* The year cannot be represented due to overflow.  */
      // __set_errno (EOVERFLOW);
      return 0;
    }
  tp->tm_yday = days;
    e548:	18 96       	adiw	r26, 0x08	; 8
    e54a:	fc 92       	st	X, r15
    e54c:	ee 92       	st	-X, r14
    e54e:	17 97       	sbiw	r26, 0x07	; 7
/* Compute the `struct tm' representation of *T,
   offset OFFSET seconds east of UTC,
   and store year, yday, mon, mday, wday, hour, min, sec into *TP.
   Return nonzero if successful.  */
int
__offtime (
    e550:	2a e1       	ldi	r18, 0x1A	; 26
    e552:	30 e0       	ldi	r19, 0x00	; 0
    e554:	82 9f       	mul	r24, r18
    e556:	f0 01       	movw	r30, r0
    e558:	83 9f       	mul	r24, r19
    e55a:	f0 0d       	add	r31, r0
    e55c:	92 9f       	mul	r25, r18
    e55e:	f0 0d       	add	r31, r0
    e560:	11 24       	eor	r1, r1
    e562:	e9 50       	subi	r30, 0x09	; 9
    e564:	ff 4e       	sbci	r31, 0xEF	; 239
      // __set_errno (EOVERFLOW);
      return 0;
    }
  tp->tm_yday = days;
  ip = __mon_yday[leapyear(y)];
  for (y = 11; days < (long int) ip[y]; --y)
    e566:	8b e0       	ldi	r24, 0x0B	; 11
    e568:	90 e0       	ldi	r25, 0x00	; 0
    e56a:	a0 e0       	ldi	r26, 0x00	; 0
    e56c:	b0 e0       	ldi	r27, 0x00	; 0
    e56e:	03 c0       	rjmp	.+6      	; 0xe576 <_Z9__offtimePllP2tm+0x386>
    e570:	01 97       	sbiw	r24, 0x01	; 1
    e572:	a1 09       	sbc	r26, r1
    e574:	b1 09       	sbc	r27, r1
    e576:	32 91       	ld	r19, -Z
    e578:	22 91       	ld	r18, -Z
    e57a:	40 e0       	ldi	r20, 0x00	; 0
    e57c:	50 e0       	ldi	r21, 0x00	; 0
    e57e:	e2 16       	cp	r14, r18
    e580:	f3 06       	cpc	r15, r19
    e582:	04 07       	cpc	r16, r20
    e584:	15 07       	cpc	r17, r21
    e586:	a4 f3       	brlt	.-24     	; 0xe570 <_Z9__offtimePllP2tm+0x380>
    continue;
  days -= ip[y];
  tp->tm_mon = y;
    e588:	f3 01       	movw	r30, r6
    e58a:	84 83       	std	Z+4, r24	; 0x04
    }
  tp->tm_yday = days;
  ip = __mon_yday[leapyear(y)];
  for (y = 11; days < (long int) ip[y]; --y)
    continue;
  days -= ip[y];
    e58c:	e2 1a       	sub	r14, r18
    e58e:	f3 0a       	sbc	r15, r19
    e590:	04 0b       	sbc	r16, r20
    e592:	15 0b       	sbc	r17, r21
  tp->tm_mon = y;
  tp->tm_mday = days + 1;
    e594:	e3 94       	inc	r14
    e596:	e3 82       	std	Z+3, r14	; 0x03
  return 1;
    e598:	21 e0       	ldi	r18, 0x01	; 1
    e59a:	30 e0       	ldi	r19, 0x00	; 0
    e59c:	02 c0       	rjmp	.+4      	; 0xe5a2 <_Z9__offtimePllP2tm+0x3b2>
  tp->tm_year = y - 1900;
  if (tp->tm_year != y - 1900)
    {
      /* The year cannot be represented due to overflow.  */
      // __set_errno (EOVERFLOW);
      return 0;
    e59e:	20 e0       	ldi	r18, 0x00	; 0
    e5a0:	30 e0       	ldi	r19, 0x00	; 0
    continue;
  days -= ip[y];
  tp->tm_mon = y;
  tp->tm_mday = days + 1;
  return 1;
}
    e5a2:	c9 01       	movw	r24, r18
    e5a4:	2e 96       	adiw	r28, 0x0e	; 14
    e5a6:	0f b6       	in	r0, 0x3f	; 63
    e5a8:	f8 94       	cli
    e5aa:	de bf       	out	0x3e, r29	; 62
    e5ac:	0f be       	out	0x3f, r0	; 63
    e5ae:	cd bf       	out	0x3d, r28	; 61
    e5b0:	cf 91       	pop	r28
    e5b2:	df 91       	pop	r29
    e5b4:	1f 91       	pop	r17
    e5b6:	0f 91       	pop	r16
    e5b8:	ff 90       	pop	r15
    e5ba:	ef 90       	pop	r14
    e5bc:	df 90       	pop	r13
    e5be:	cf 90       	pop	r12
    e5c0:	bf 90       	pop	r11
    e5c2:	af 90       	pop	r10
    e5c4:	9f 90       	pop	r9
    e5c6:	8f 90       	pop	r8
    e5c8:	7f 90       	pop	r7
    e5ca:	6f 90       	pop	r6
    e5cc:	5f 90       	pop	r5
    e5ce:	4f 90       	pop	r4
    e5d0:	3f 90       	pop	r3
    e5d2:	2f 90       	pop	r2
    e5d4:	08 95       	ret

0000e5d6 <_Z13__localtime_rPlP2tm>:

/* time_r function implementations */
// G: No time zones in our implementation so just do the converion from time_t to struct tm
struct tm * 
__localtime_r (time_t * t, struct tm * tp)
{
    e5d6:	cf 93       	push	r28
    e5d8:	df 93       	push	r29
    e5da:	d6 2f       	mov	r29, r22
    e5dc:	c7 2f       	mov	r28, r23
  __offtime(t, 0, tp);
    e5de:	40 e0       	ldi	r20, 0x00	; 0
    e5e0:	50 e0       	ldi	r21, 0x00	; 0
    e5e2:	ba 01       	movw	r22, r20
    e5e4:	2d 2f       	mov	r18, r29
    e5e6:	3c 2f       	mov	r19, r28
    e5e8:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <_Z9__offtimePllP2tm>
  return tp;
}
    e5ec:	8d 2f       	mov	r24, r29
    e5ee:	9c 2f       	mov	r25, r28
    e5f0:	df 91       	pop	r29
    e5f2:	cf 91       	pop	r28
    e5f4:	08 95       	ret

0000e5f6 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_>:
   This function is external because it is used also by timegm.c.  */
time_t
__mktime_internal (struct tm *tp,
		   struct tm *(*convert) (time_t *, struct tm *),
		   time_t *offset)
{
    e5f6:	2f 92       	push	r2
    e5f8:	3f 92       	push	r3
    e5fa:	4f 92       	push	r4
    e5fc:	5f 92       	push	r5
    e5fe:	6f 92       	push	r6
    e600:	7f 92       	push	r7
    e602:	8f 92       	push	r8
    e604:	9f 92       	push	r9
    e606:	af 92       	push	r10
    e608:	bf 92       	push	r11
    e60a:	cf 92       	push	r12
    e60c:	df 92       	push	r13
    e60e:	ef 92       	push	r14
    e610:	ff 92       	push	r15
    e612:	0f 93       	push	r16
    e614:	1f 93       	push	r17
    e616:	df 93       	push	r29
    e618:	cf 93       	push	r28
    e61a:	cd b7       	in	r28, 0x3d	; 61
    e61c:	de b7       	in	r29, 0x3e	; 62
    e61e:	e3 97       	sbiw	r28, 0x33	; 51
    e620:	0f b6       	in	r0, 0x3f	; 63
    e622:	f8 94       	cli
    e624:	de bf       	out	0x3e, r29	; 62
    e626:	0f be       	out	0x3f, r0	; 63
    e628:	cd bf       	out	0x3d, r28	; 61
    e62a:	1c 01       	movw	r2, r24
    e62c:	7b a7       	std	Y+43, r23	; 0x2b
    e62e:	6a a7       	std	Y+42, r22	; 0x2a
    e630:	59 ab       	std	Y+49, r21	; 0x31
    e632:	48 ab       	std	Y+48, r20	; 0x30
     POSIX.1 prohibits leap seconds, but some hosts have them anyway.  */
  int remaining_probes = 6;

  /* Time requested.  Copy it in case CONVERT modifies *TP; this can
     occur if TP is localtime's returned value and CONVERT is localtime.  */
  int sec = tp->tm_sec;
    e634:	dc 01       	movw	r26, r24
    e636:	8c 91       	ld	r24, X
    e638:	e8 2f       	mov	r30, r24
    e63a:	ff 27       	eor	r31, r31
    e63c:	e7 fd       	sbrc	r30, 7
    e63e:	f0 95       	com	r31
    e640:	f9 a3       	std	Y+33, r31	; 0x21
    e642:	e8 a3       	std	Y+32, r30	; 0x20
  int min = tp->tm_min;
    e644:	11 96       	adiw	r26, 0x01	; 1
    e646:	8c 91       	ld	r24, X
    e648:	11 97       	sbiw	r26, 0x01	; 1
    e64a:	e8 2e       	mov	r14, r24
    e64c:	ff 24       	eor	r15, r15
    e64e:	e7 fc       	sbrc	r14, 7
    e650:	f0 94       	com	r15
    e652:	fb a2       	std	Y+35, r15	; 0x23
    e654:	ea a2       	std	Y+34, r14	; 0x22
  int hour = tp->tm_hour;
    e656:	12 96       	adiw	r26, 0x02	; 2
    e658:	8c 91       	ld	r24, X
    e65a:	12 97       	sbiw	r26, 0x02	; 2
    e65c:	08 2f       	mov	r16, r24
    e65e:	11 27       	eor	r17, r17
    e660:	07 fd       	sbrc	r16, 7
    e662:	10 95       	com	r17
    e664:	1d a3       	std	Y+37, r17	; 0x25
    e666:	0c a3       	std	Y+36, r16	; 0x24
  int mday = tp->tm_mday;
    e668:	13 96       	adiw	r26, 0x03	; 3
    e66a:	6c 90       	ld	r6, X
    e66c:	13 97       	sbiw	r26, 0x03	; 3
    e66e:	77 24       	eor	r7, r7
    e670:	67 fc       	sbrc	r6, 7
    e672:	70 94       	com	r7
  int mon = tp->tm_mon;
    e674:	14 96       	adiw	r26, 0x04	; 4
    e676:	8c 91       	ld	r24, X
    e678:	14 97       	sbiw	r26, 0x04	; 4
    e67a:	99 27       	eor	r25, r25
    e67c:	87 fd       	sbrc	r24, 7
    e67e:	90 95       	com	r25
  int year_requested = tp->tm_year;
    e680:	15 96       	adiw	r26, 0x05	; 5
    e682:	4c 90       	ld	r4, X
    e684:	55 24       	eor	r5, r5
    e686:	47 fc       	sbrc	r4, 7
    e688:	50 94       	com	r5

  /* Ensure that mon is in range, and set year accordingly.  */
  int mon_remainder = mon % 12;
    e68a:	6c e0       	ldi	r22, 0x0C	; 12
    e68c:	70 e0       	ldi	r23, 0x00	; 0
    e68e:	0e 94 1b ab 	call	0x15636	; 0x15636 <__divmodhi4>
    e692:	5c 01       	movw	r10, r24
  int negative_mon_remainder = mon_remainder < 0;
    e694:	eb 2c       	mov	r14, r11
    e696:	ee 1c       	adc	r14, r14
    e698:	ee 24       	eor	r14, r14
    e69a:	ee 1c       	adc	r14, r14
    e69c:	ff 24       	eor	r15, r15
  int mon_years = mon / 12 - negative_mon_remainder;
    e69e:	6e 19       	sub	r22, r14
    e6a0:	7f 09       	sbc	r23, r15
  long int lyear_requested = year_requested;
  long int year = lyear_requested + mon_years;
    e6a2:	9b 01       	movw	r18, r22
    e6a4:	44 27       	eor	r20, r20
    e6a6:	37 fd       	sbrc	r19, 7
    e6a8:	40 95       	com	r20
    e6aa:	54 2f       	mov	r21, r20

  /* Ensure that mon is in range, and set year accordingly.  */
  int mon_remainder = mon % 12;
  int negative_mon_remainder = mon_remainder < 0;
  int mon_years = mon / 12 - negative_mon_remainder;
  long int lyear_requested = year_requested;
    e6ac:	c2 01       	movw	r24, r4
    e6ae:	aa 27       	eor	r26, r26
    e6b0:	97 fd       	sbrc	r25, 7
    e6b2:	a0 95       	com	r26
    e6b4:	ba 2f       	mov	r27, r26
  long int year = lyear_requested + mon_years;
    e6b6:	28 0f       	add	r18, r24
    e6b8:	39 1f       	adc	r19, r25
    e6ba:	4a 1f       	adc	r20, r26
    e6bc:	5b 1f       	adc	r21, r27
    e6be:	2a 8b       	std	Y+18, r18	; 0x12
    e6c0:	3b 8b       	std	Y+19, r19	; 0x13
    e6c2:	4c 8b       	std	Y+20, r20	; 0x14
    e6c4:	5d 8b       	std	Y+21, r21	; 0x15
     assuming int and time_t arithmetic wraps around.
     Major overflows are caught at the end.  */

  /* Calculate day of year from year, month, and day of month.
     The result need not be in range.  */
  int mon_yday = ((__mon_yday[leapyear (year)]
    e6c6:	ca 01       	movw	r24, r20
    e6c8:	b9 01       	movw	r22, r18
    e6ca:	0e 94 ad 6f 	call	0xdf5a	; 0xdf5a <_ZL8leapyearl>
		   [mon_remainder + 12 * negative_mon_remainder])
    e6ce:	f7 01       	movw	r30, r14
    e6d0:	ee 0f       	add	r30, r30
    e6d2:	ff 1f       	adc	r31, r31
    e6d4:	ee 0d       	add	r30, r14
    e6d6:	ff 1d       	adc	r31, r15
    e6d8:	ee 0f       	add	r30, r30
    e6da:	ff 1f       	adc	r31, r31
    e6dc:	ee 0f       	add	r30, r30
    e6de:	ff 1f       	adc	r31, r31
    e6e0:	ea 0d       	add	r30, r10
    e6e2:	fb 1d       	adc	r31, r11
    e6e4:	2d e0       	ldi	r18, 0x0D	; 13
    e6e6:	30 e0       	ldi	r19, 0x00	; 0
    e6e8:	ac 01       	movw	r20, r24
    e6ea:	42 9f       	mul	r20, r18
    e6ec:	c0 01       	movw	r24, r0
    e6ee:	43 9f       	mul	r20, r19
    e6f0:	90 0d       	add	r25, r0
    e6f2:	52 9f       	mul	r21, r18
    e6f4:	90 0d       	add	r25, r0
    e6f6:	11 24       	eor	r1, r1
    e6f8:	e8 0f       	add	r30, r24
    e6fa:	f9 1f       	adc	r31, r25
    e6fc:	ee 0f       	add	r30, r30
    e6fe:	ff 1f       	adc	r31, r31
    e700:	e1 52       	subi	r30, 0x21	; 33
    e702:	ff 4e       	sbci	r31, 0xEF	; 239
		  - 1);
    e704:	80 81       	ld	r24, Z
    e706:	91 81       	ldd	r25, Z+1	; 0x01
    e708:	01 97       	sbiw	r24, 0x01	; 1
  long int lmday = mday;
  long int yday = mon_yday + lmday;
    e70a:	7c 01       	movw	r14, r24
    e70c:	00 27       	eor	r16, r16
    e70e:	f7 fc       	sbrc	r15, 7
    e710:	00 95       	com	r16
    e712:	10 2f       	mov	r17, r16
  /* Calculate day of year from year, month, and day of month.
     The result need not be in range.  */
  int mon_yday = ((__mon_yday[leapyear (year)]
		   [mon_remainder + 12 * negative_mon_remainder])
		  - 1);
  long int lmday = mday;
    e714:	c3 01       	movw	r24, r6
    e716:	aa 27       	eor	r26, r26
    e718:	97 fd       	sbrc	r25, 7
    e71a:	a0 95       	com	r26
    e71c:	ba 2f       	mov	r27, r26
  long int yday = mon_yday + lmday;
    e71e:	e8 0e       	add	r14, r24
    e720:	f9 1e       	adc	r15, r25
    e722:	0a 1f       	adc	r16, r26
    e724:	1b 1f       	adc	r17, r27
    e726:	ea 8e       	std	Y+26, r14	; 0x1a
    e728:	fb 8e       	std	Y+27, r15	; 0x1b
    e72a:	0c 8f       	std	Y+28, r16	; 0x1c
    e72c:	1d 8f       	std	Y+29, r17	; 0x1d

  time_t guessed_offset = *offset;
    e72e:	a8 a9       	ldd	r26, Y+48	; 0x30
    e730:	b9 a9       	ldd	r27, Y+49	; 0x31
    e732:	0d 91       	ld	r16, X+
    e734:	1d 91       	ld	r17, X+
    e736:	2d 91       	ld	r18, X+
    e738:	3c 91       	ld	r19, X
    e73a:	0e 8b       	std	Y+22, r16	; 0x16
    e73c:	1f 8b       	std	Y+23, r17	; 0x17
    e73e:	28 8f       	std	Y+24, r18	; 0x18
    e740:	39 8f       	std	Y+25, r19	; 0x19

  /* Invert CONVERT by probing.  First assume the same offset as last
     time.  */

  t0 = ydhms_diff (year, yday, hour, min, sec,
		   EPOCH_YEAR - TM_YEAR_BASE, 0, 0, 0, - guessed_offset);
    e742:	00 d0       	rcall	.+0      	; 0xe744 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x14e>
    e744:	00 d0       	rcall	.+0      	; 0xe746 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x150>
    e746:	ed b7       	in	r30, 0x3d	; 61
    e748:	fe b7       	in	r31, 0x3e	; 62
    e74a:	31 96       	adiw	r30, 0x01	; 1
    e74c:	ad b7       	in	r26, 0x3d	; 61
    e74e:	be b7       	in	r27, 0x3e	; 62
    e750:	12 96       	adiw	r26, 0x02	; 2
    e752:	1c 92       	st	X, r1
    e754:	1e 92       	st	-X, r1
    e756:	11 97       	sbiw	r26, 0x01	; 1
    e758:	13 82       	std	Z+3, r1	; 0x03
    e75a:	12 82       	std	Z+2, r1	; 0x02
    e75c:	8e 89       	ldd	r24, Y+22	; 0x16
    e75e:	9f 89       	ldd	r25, Y+23	; 0x17
    e760:	90 95       	com	r25
    e762:	81 95       	neg	r24
    e764:	9f 4f       	sbci	r25, 0xFF	; 255
    e766:	95 83       	std	Z+5, r25	; 0x05
    e768:	84 83       	std	Z+4, r24	; 0x04
    e76a:	6a 89       	ldd	r22, Y+18	; 0x12
    e76c:	7b 89       	ldd	r23, Y+19	; 0x13
    e76e:	8c 89       	ldd	r24, Y+20	; 0x14
    e770:	9d 89       	ldd	r25, Y+21	; 0x15
    e772:	2a 8d       	ldd	r18, Y+26	; 0x1a
    e774:	3b 8d       	ldd	r19, Y+27	; 0x1b
    e776:	4c 8d       	ldd	r20, Y+28	; 0x1c
    e778:	5d 8d       	ldd	r21, Y+29	; 0x1d
    e77a:	0c a1       	ldd	r16, Y+36	; 0x24
    e77c:	1d a1       	ldd	r17, Y+37	; 0x25
    e77e:	ea a0       	ldd	r14, Y+34	; 0x22
    e780:	fb a0       	ldd	r15, Y+35	; 0x23
    e782:	c8 a0       	ldd	r12, Y+32	; 0x20
    e784:	d9 a0       	ldd	r13, Y+33	; 0x21
    e786:	a6 e4       	ldi	r26, 0x46	; 70
    e788:	aa 2e       	mov	r10, r26
    e78a:	b1 2c       	mov	r11, r1
    e78c:	88 24       	eor	r8, r8
    e78e:	99 24       	eor	r9, r9
    e790:	0e 94 d2 6f 	call	0xdfa4	; 0xdfa4 <_ZL10ydhms_difflliiiiiiii>
    e794:	ed b7       	in	r30, 0x3d	; 61
    e796:	fe b7       	in	r31, 0x3e	; 62
    e798:	36 96       	adiw	r30, 0x06	; 6
    e79a:	0f b6       	in	r0, 0x3f	; 63
    e79c:	f8 94       	cli
    e79e:	fe bf       	out	0x3e, r31	; 62
    e7a0:	0f be       	out	0x3f, r0	; 63
    e7a2:	ed bf       	out	0x3d, r30	; 61
    e7a4:	6e 87       	std	Y+14, r22	; 0x0e
    e7a6:	7f 87       	std	Y+15, r23	; 0x0f
    e7a8:	88 8b       	std	Y+16, r24	; 0x10
    e7aa:	99 8b       	std	Y+17, r25	; 0x11
	 + SHR (mday, ALOG2_DAYS_PER_BIENNIUM)
	 + SHR (hour, ALOG2_HOURS_PER_BIENNIUM)
	 + SHR (min, ALOG2_MINUTES_PER_BIENNIUM)
	 + (LEAP_SECONDS_POSSIBLE
	    ? 0
	    : SHR (sec, ALOG2_SECONDS_PER_BIENNIUM)));
    e7ac:	b2 01       	movw	r22, r4
    e7ae:	75 95       	asr	r23
    e7b0:	67 95       	ror	r22
    e7b2:	67 2c       	mov	r6, r7
    e7b4:	77 0c       	add	r7, r7
    e7b6:	77 08       	sbc	r7, r7
    e7b8:	65 94       	asr	r6
    e7ba:	65 94       	asr	r6
    e7bc:	66 0d       	add	r22, r6
    e7be:	77 1d       	adc	r23, r7
    e7c0:	63 52       	subi	r22, 0x23	; 35
    e7c2:	70 40       	sbci	r23, 0x00	; 0
    e7c4:	c8 01       	movw	r24, r16
    e7c6:	99 0f       	add	r25, r25
    e7c8:	88 0b       	sbc	r24, r24
    e7ca:	99 0f       	add	r25, r25
    e7cc:	98 2f       	mov	r25, r24
    e7ce:	88 1f       	adc	r24, r24
    e7d0:	68 0f       	add	r22, r24
    e7d2:	79 1f       	adc	r23, r25
    e7d4:	c7 01       	movw	r24, r14
    e7d6:	99 0f       	add	r25, r25
    e7d8:	88 0b       	sbc	r24, r24
    e7da:	98 2f       	mov	r25, r24
    e7dc:	68 0f       	add	r22, r24
    e7de:	79 1f       	adc	r23, r25
    e7e0:	c6 01       	movw	r24, r12
    e7e2:	99 0f       	add	r25, r25
    e7e4:	88 0b       	sbc	r24, r24
    e7e6:	98 2f       	mov	r25, r24
    e7e8:	68 0f       	add	r22, r24
    e7ea:	79 1f       	adc	r23, r25

      int approx_biennia = SHR (t0, ALOG2_SECONDS_PER_BIENNIUM);
    e7ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    e7ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    e7f0:	a8 89       	ldd	r26, Y+16	; 0x10
    e7f2:	b9 89       	ldd	r27, Y+17	; 0x11
    e7f4:	fa e1       	ldi	r31, 0x1A	; 26
    e7f6:	b5 95       	asr	r27
    e7f8:	a7 95       	ror	r26
    e7fa:	97 95       	ror	r25
    e7fc:	87 95       	ror	r24
    e7fe:	fa 95       	dec	r31
    e800:	d1 f7       	brne	.-12     	; 0xe7f6 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x200>
      int diff = approx_biennia - approx_requested_biennia;
    e802:	86 1b       	sub	r24, r22
    e804:	97 0b       	sbc	r25, r23
      int abs_diff = diff < 0 ? - diff : diff;
    e806:	97 ff       	sbrs	r25, 7
    e808:	03 c0       	rjmp	.+6      	; 0xe810 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x21a>
    e80a:	90 95       	com	r25
    e80c:	81 95       	neg	r24
    e80e:	9f 4f       	sbci	r25, 0xFF	; 255
      time_t time_t_max = TIME_T_MAX;
      time_t time_t_min = TIME_T_MIN;
      time_t overflow_threshold =
	(time_t_max / 3 - time_t_min / 3) >> ALOG2_SECONDS_PER_BIENNIUM;

      if (overflow_threshold < abs_diff)
    e810:	86 31       	cpi	r24, 0x16	; 22
    e812:	91 05       	cpc	r25, r1
    e814:	b4 f1       	brlt	.+108    	; 0xe882 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x28c>
	{
	  /* Overflow occurred.  Try repairing it; this might work if
	     the time zone offset is enough to undo the overflow.  */
	  time_t repaired_t0 = -1 - t0;
    e816:	8e 85       	ldd	r24, Y+14	; 0x0e
    e818:	9f 85       	ldd	r25, Y+15	; 0x0f
    e81a:	a8 89       	ldd	r26, Y+16	; 0x10
    e81c:	b9 89       	ldd	r27, Y+17	; 0x11
    e81e:	80 95       	com	r24
    e820:	90 95       	com	r25
    e822:	a0 95       	com	r26
    e824:	b0 95       	com	r27
	  approx_biennia = SHR (repaired_t0, ALOG2_SECONDS_PER_BIENNIUM);
    e826:	9c 01       	movw	r18, r24
    e828:	ad 01       	movw	r20, r26
    e82a:	ea e1       	ldi	r30, 0x1A	; 26
    e82c:	55 95       	asr	r21
    e82e:	47 95       	ror	r20
    e830:	37 95       	ror	r19
    e832:	27 95       	ror	r18
    e834:	ea 95       	dec	r30
    e836:	d1 f7       	brne	.-12     	; 0xe82c <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x236>
	  diff = approx_biennia - approx_requested_biennia;
    e838:	26 1b       	sub	r18, r22
    e83a:	37 0b       	sbc	r19, r23
	  abs_diff = diff < 0 ? - diff : diff;
    e83c:	37 ff       	sbrs	r19, 7
    e83e:	03 c0       	rjmp	.+6      	; 0xe846 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x250>
    e840:	30 95       	com	r19
    e842:	21 95       	neg	r18
    e844:	3f 4f       	sbci	r19, 0xFF	; 255
	  if (overflow_threshold < abs_diff)
    e846:	26 31       	cpi	r18, 0x16	; 22
    e848:	31 05       	cpc	r19, r1
    e84a:	0c f0       	brlt	.+2      	; 0xe84e <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x258>
    e84c:	86 c1       	rjmp	.+780    	; 0xeb5a <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x564>
	    return -1;
	  guessed_offset += repaired_t0 - t0;
    e84e:	9c 01       	movw	r18, r24
    e850:	ad 01       	movw	r20, r26
    e852:	ee 84       	ldd	r14, Y+14	; 0x0e
    e854:	ff 84       	ldd	r15, Y+15	; 0x0f
    e856:	08 89       	ldd	r16, Y+16	; 0x10
    e858:	19 89       	ldd	r17, Y+17	; 0x11
    e85a:	2e 19       	sub	r18, r14
    e85c:	3f 09       	sbc	r19, r15
    e85e:	40 0b       	sbc	r20, r16
    e860:	51 0b       	sbc	r21, r17
    e862:	ee 88       	ldd	r14, Y+22	; 0x16
    e864:	ff 88       	ldd	r15, Y+23	; 0x17
    e866:	08 8d       	ldd	r16, Y+24	; 0x18
    e868:	19 8d       	ldd	r17, Y+25	; 0x19
    e86a:	e2 0e       	add	r14, r18
    e86c:	f3 1e       	adc	r15, r19
    e86e:	04 1f       	adc	r16, r20
    e870:	15 1f       	adc	r17, r21
    e872:	ee 8a       	std	Y+22, r14	; 0x16
    e874:	ff 8a       	std	Y+23, r15	; 0x17
    e876:	08 8f       	std	Y+24, r16	; 0x18
    e878:	19 8f       	std	Y+25, r17	; 0x19
	  t0 = repaired_t0;
    e87a:	8e 87       	std	Y+14, r24	; 0x0e
    e87c:	9f 87       	std	Y+15, r25	; 0x0f
    e87e:	a8 8b       	std	Y+16, r26	; 0x10
    e880:	b9 8b       	std	Y+17, r27	; 0x11
	}
    }

  /* Repeatedly use the error to improve the guess.  */

  for (t = t1 = t2 = t0;
    e882:	0e 85       	ldd	r16, Y+14	; 0x0e
    e884:	1f 85       	ldd	r17, Y+15	; 0x0f
    e886:	28 89       	ldd	r18, Y+16	; 0x10
    e888:	39 89       	ldd	r19, Y+17	; 0x11
    e88a:	09 83       	std	Y+1, r16	; 0x01
    e88c:	1a 83       	std	Y+2, r17	; 0x02
    e88e:	2b 83       	std	Y+3, r18	; 0x03
    e890:	3c 83       	std	Y+4, r19	; 0x04
    e892:	0e a3       	std	Y+38, r16	; 0x26
    e894:	1f a3       	std	Y+39, r17	; 0x27
    e896:	28 a7       	std	Y+40, r18	; 0x28
    e898:	39 a7       	std	Y+41, r19	; 0x29
    e89a:	a9 01       	movw	r20, r18
    e89c:	98 01       	movw	r18, r16
    e89e:	2c a7       	std	Y+44, r18	; 0x2c
    e8a0:	3d a7       	std	Y+45, r19	; 0x2d
    e8a2:	4e a7       	std	Y+46, r20	; 0x2e
    e8a4:	5f a7       	std	Y+47, r21	; 0x2f

  /* The maximum number of probes (calls to CONVERT) should be enough
     to handle any combinations of time zone rule changes, solar time,
     leap seconds, and oscillations around a spring-forward gap.
     POSIX.1 prohibits leap seconds, but some hosts have them anyway.  */
  int remaining_probes = 6;
    e8a6:	46 e0       	ldi	r20, 0x06	; 6
    e8a8:	50 e0       	ldi	r21, 0x00	; 0
    e8aa:	5f 8f       	std	Y+31, r21	; 0x1f
    e8ac:	4e 8f       	std	Y+30, r20	; 0x1e
	}
    }

  /* Repeatedly use the error to improve the guess.  */

  for (t = t1 = t2 = t0;
    e8ae:	2d c0       	rjmp	.+90     	; 0xe90a <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x314>
       (gt = guess_time_tm (year, yday, hour, min, sec, &t,
			    ranged_convert (convert, &t, &tm)),
	t != gt);
       t1 = t2, t2 = t, t = gt)
    if (t == t1 && t != t2)
    e8b0:	ec a4       	ldd	r14, Y+44	; 0x2c
    e8b2:	fd a4       	ldd	r15, Y+45	; 0x2d
    e8b4:	0e a5       	ldd	r16, Y+46	; 0x2e
    e8b6:	1f a5       	ldd	r17, Y+47	; 0x2f
    e8b8:	4e 14       	cp	r4, r14
    e8ba:	5f 04       	cpc	r5, r15
    e8bc:	60 06       	cpc	r6, r16
    e8be:	71 06       	cpc	r7, r17
    e8c0:	51 f4       	brne	.+20     	; 0xe8d6 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x2e0>
    e8c2:	0e a1       	ldd	r16, Y+38	; 0x26
    e8c4:	1f a1       	ldd	r17, Y+39	; 0x27
    e8c6:	28 a5       	ldd	r18, Y+40	; 0x28
    e8c8:	39 a5       	ldd	r19, Y+41	; 0x29
    e8ca:	40 16       	cp	r4, r16
    e8cc:	51 06       	cpc	r5, r17
    e8ce:	62 06       	cpc	r6, r18
    e8d0:	73 06       	cpc	r7, r19
    e8d2:	09 f0       	breq	.+2      	; 0xe8d6 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x2e0>
    e8d4:	23 c1       	rjmp	.+582    	; 0xeb1c <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x526>
      goto offset_found;
    else if (--remaining_probes == 0)
    e8d6:	2e 8d       	ldd	r18, Y+30	; 0x1e
    e8d8:	3f 8d       	ldd	r19, Y+31	; 0x1f
    e8da:	21 50       	subi	r18, 0x01	; 1
    e8dc:	30 40       	sbci	r19, 0x00	; 0
    e8de:	3f 8f       	std	Y+31, r19	; 0x1f
    e8e0:	2e 8f       	std	Y+30, r18	; 0x1e
    e8e2:	21 15       	cp	r18, r1
    e8e4:	31 05       	cpc	r19, r1
    e8e6:	09 f4       	brne	.+2      	; 0xe8ea <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x2f4>
    e8e8:	38 c1       	rjmp	.+624    	; 0xeb5a <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x564>
	}
    }

  /* Repeatedly use the error to improve the guess.  */

  for (t = t1 = t2 = t0;
    e8ea:	89 83       	std	Y+1, r24	; 0x01
    e8ec:	9a 83       	std	Y+2, r25	; 0x02
    e8ee:	ab 83       	std	Y+3, r26	; 0x03
    e8f0:	bc 83       	std	Y+4, r27	; 0x04
    e8f2:	8e a1       	ldd	r24, Y+38	; 0x26
    e8f4:	9f a1       	ldd	r25, Y+39	; 0x27
    e8f6:	a8 a5       	ldd	r26, Y+40	; 0x28
    e8f8:	b9 a5       	ldd	r27, Y+41	; 0x29
    e8fa:	8c a7       	std	Y+44, r24	; 0x2c
    e8fc:	9d a7       	std	Y+45, r25	; 0x2d
    e8fe:	ae a7       	std	Y+46, r26	; 0x2e
    e900:	bf a7       	std	Y+47, r27	; 0x2f
    e902:	4e a2       	std	Y+38, r4	; 0x26
    e904:	5f a2       	std	Y+39, r5	; 0x27
    e906:	68 a6       	std	Y+40, r6	; 0x28
    e908:	79 a6       	std	Y+41, r7	; 0x29
   it is the nearest in-range value and then convert that.  */
static struct tm *
ranged_convert (struct tm *(*convert) (time_t *, struct tm *),
		time_t *t, struct tm *tp)
{
  struct tm *r = convert (t, tp);
    e90a:	ce 01       	movw	r24, r28
    e90c:	01 96       	adiw	r24, 0x01	; 1
    e90e:	be 01       	movw	r22, r28
    e910:	6b 5f       	subi	r22, 0xFB	; 251
    e912:	7f 4f       	sbci	r23, 0xFF	; 255
    e914:	aa a5       	ldd	r26, Y+42	; 0x2a
    e916:	bb a5       	ldd	r27, Y+43	; 0x2b
    e918:	fd 01       	movw	r30, r26
    e91a:	19 95       	eicall
    e91c:	fc 01       	movw	r30, r24

  if (!r && *t)
    e91e:	00 97       	sbiw	r24, 0x00	; 0
    e920:	09 f0       	breq	.+2      	; 0xe924 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x32e>
    e922:	6e c0       	rjmp	.+220    	; 0xea00 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x40a>
    e924:	a9 80       	ldd	r10, Y+1	; 0x01
    e926:	ba 80       	ldd	r11, Y+2	; 0x02
    e928:	cb 80       	ldd	r12, Y+3	; 0x03
    e92a:	dc 80       	ldd	r13, Y+4	; 0x04
    e92c:	a1 14       	cp	r10, r1
    e92e:	b1 04       	cpc	r11, r1
    e930:	c1 04       	cpc	r12, r1
    e932:	d1 04       	cpc	r13, r1
    e934:	09 f4       	brne	.+2      	; 0xe938 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x342>
    e936:	64 c0       	rjmp	.+200    	; 0xea00 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x40a>
    e938:	66 24       	eor	r6, r6
    e93a:	77 24       	eor	r7, r7
    e93c:	43 01       	movw	r8, r6
    e93e:	20 e0       	ldi	r18, 0x00	; 0
    e940:	30 e0       	ldi	r19, 0x00	; 0
    e942:	34 c0       	rjmp	.+104    	; 0xe9ac <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x3b6>
	 they differ by 1.  */
      while (bad != ok + (bad < 0 ? -1 : 1))
	{
	  time_t mid = *t = (bad < 0
			     ? bad + ((ok - bad) >> 1)
			     : ok + ((bad - ok) >> 1));
    e944:	d7 fe       	sbrs	r13, 7
    e946:	0f c0       	rjmp	.+30     	; 0xe966 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x370>
    e948:	84 01       	movw	r16, r8
    e94a:	73 01       	movw	r14, r6
    e94c:	ea 18       	sub	r14, r10
    e94e:	fb 08       	sbc	r15, r11
    e950:	0c 09       	sbc	r16, r12
    e952:	1d 09       	sbc	r17, r13
    e954:	15 95       	asr	r17
    e956:	07 95       	ror	r16
    e958:	f7 94       	ror	r15
    e95a:	e7 94       	ror	r14
    e95c:	ea 0c       	add	r14, r10
    e95e:	fb 1c       	adc	r15, r11
    e960:	0c 1d       	adc	r16, r12
    e962:	1d 1d       	adc	r17, r13
    e964:	0e c0       	rjmp	.+28     	; 0xe982 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x38c>
    e966:	86 01       	movw	r16, r12
    e968:	75 01       	movw	r14, r10
    e96a:	e6 18       	sub	r14, r6
    e96c:	f7 08       	sbc	r15, r7
    e96e:	08 09       	sbc	r16, r8
    e970:	19 09       	sbc	r17, r9
    e972:	15 95       	asr	r17
    e974:	07 95       	ror	r16
    e976:	f7 94       	ror	r15
    e978:	e7 94       	ror	r14
    e97a:	e6 0c       	add	r14, r6
    e97c:	f7 1c       	adc	r15, r7
    e97e:	08 1d       	adc	r16, r8
    e980:	19 1d       	adc	r17, r9
    e982:	e9 82       	std	Y+1, r14	; 0x01
    e984:	fa 82       	std	Y+2, r15	; 0x02
    e986:	0b 83       	std	Y+3, r16	; 0x03
    e988:	1c 83       	std	Y+4, r17	; 0x04
	  r = convert (t, tp);
    e98a:	ce 01       	movw	r24, r28
    e98c:	01 96       	adiw	r24, 0x01	; 1
    e98e:	be 01       	movw	r22, r28
    e990:	6b 5f       	subi	r22, 0xFB	; 251
    e992:	7f 4f       	sbci	r23, 0xFF	; 255
    e994:	ea a5       	ldd	r30, Y+42	; 0x2a
    e996:	fb a5       	ldd	r31, Y+43	; 0x2b
    e998:	19 95       	eicall
    e99a:	9c 01       	movw	r18, r24
	  if (r)
    e99c:	00 97       	sbiw	r24, 0x00	; 0
    e99e:	21 f0       	breq	.+8      	; 0xe9a8 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x3b2>
	    ok = mid;
    e9a0:	37 01       	movw	r6, r14
    e9a2:	48 01       	movw	r8, r16
	{
	  time_t mid = *t = (bad < 0
			     ? bad + ((ok - bad) >> 1)
			     : ok + ((bad - ok) >> 1));
	  r = convert (t, tp);
	  if (r)
    e9a4:	86 01       	movw	r16, r12
    e9a6:	75 01       	movw	r14, r10
ranged_convert (struct tm *(*convert) (time_t *, struct tm *),
		time_t *t, struct tm *tp)
{
  struct tm *r = convert (t, tp);

  if (!r && *t)
    e9a8:	57 01       	movw	r10, r14
    e9aa:	68 01       	movw	r12, r16
      time_t ok = 0;

      /* BAD is a known unconvertible time_t, and OK is a known good one.
	 Use binary search to narrow the range between BAD and OK until
	 they differ by 1.  */
      while (bad != ok + (bad < 0 ? -1 : 1))
    e9ac:	d7 fe       	sbrs	r13, 7
    e9ae:	04 c0       	rjmp	.+8      	; 0xe9b8 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x3c2>
    e9b0:	8f ef       	ldi	r24, 0xFF	; 255
    e9b2:	9f ef       	ldi	r25, 0xFF	; 255
    e9b4:	dc 01       	movw	r26, r24
    e9b6:	04 c0       	rjmp	.+8      	; 0xe9c0 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x3ca>
    e9b8:	81 e0       	ldi	r24, 0x01	; 1
    e9ba:	90 e0       	ldi	r25, 0x00	; 0
    e9bc:	a0 e0       	ldi	r26, 0x00	; 0
    e9be:	b0 e0       	ldi	r27, 0x00	; 0
    e9c0:	86 0d       	add	r24, r6
    e9c2:	97 1d       	adc	r25, r7
    e9c4:	a8 1d       	adc	r26, r8
    e9c6:	b9 1d       	adc	r27, r9
    e9c8:	a8 16       	cp	r10, r24
    e9ca:	b9 06       	cpc	r11, r25
    e9cc:	ca 06       	cpc	r12, r26
    e9ce:	db 06       	cpc	r13, r27
    e9d0:	09 f0       	breq	.+2      	; 0xe9d4 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x3de>
    e9d2:	b8 cf       	rjmp	.-144    	; 0xe944 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x34e>
    e9d4:	f9 01       	movw	r30, r18
	    ok = mid;
	  else
	    bad = mid;
	}

      if (!r && ok)
    e9d6:	30 97       	sbiw	r30, 0x00	; 0
    e9d8:	99 f4       	brne	.+38     	; 0xea00 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x40a>
    e9da:	61 14       	cp	r6, r1
    e9dc:	71 04       	cpc	r7, r1
    e9de:	81 04       	cpc	r8, r1
    e9e0:	91 04       	cpc	r9, r1
    e9e2:	71 f0       	breq	.+28     	; 0xea00 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x40a>
	{
	  /* The last conversion attempt failed;
	     revert to the most recent successful attempt.  */
	  *t = ok;
    e9e4:	69 82       	std	Y+1, r6	; 0x01
    e9e6:	7a 82       	std	Y+2, r7	; 0x02
    e9e8:	8b 82       	std	Y+3, r8	; 0x03
    e9ea:	9c 82       	std	Y+4, r9	; 0x04
	  r = convert (t, tp);
    e9ec:	ce 01       	movw	r24, r28
    e9ee:	01 96       	adiw	r24, 0x01	; 1
    e9f0:	be 01       	movw	r22, r28
    e9f2:	6b 5f       	subi	r22, 0xFB	; 251
    e9f4:	7f 4f       	sbci	r23, 0xFF	; 255
    e9f6:	ea a4       	ldd	r14, Y+42	; 0x2a
    e9f8:	fb a4       	ldd	r15, Y+43	; 0x2b
    e9fa:	f7 01       	movw	r30, r14
    e9fc:	19 95       	eicall
    e9fe:	fc 01       	movw	r30, r24
/* Fill a (struct tm) TP* from a given time_t time stamp */
time_t
filltm(time_t *t, struct tm *tp)
{
  return __offtime(t, 0, tp);
}
    ea00:	49 80       	ldd	r4, Y+1	; 0x01
    ea02:	5a 80       	ldd	r5, Y+2	; 0x02
    ea04:	6b 80       	ldd	r6, Y+3	; 0x03
    ea06:	7c 80       	ldd	r7, Y+4	; 0x04
   yield a value equal to *T.  */
static time_t
guess_time_tm (long int year, long int yday, int hour, int min, int sec,
	       time_t *t, struct tm *tp)
{
  if (tp)
    ea08:	30 97       	sbiw	r30, 0x00	; 0
    ea0a:	09 f4       	brne	.+2      	; 0xea0e <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x418>
    ea0c:	58 c0       	rjmp	.+176    	; 0xeabe <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x4c8>
    {
      time_t d = ydhms_diff (year, yday, hour, min, sec,
			     tp->tm_year, tp->tm_yday,
			     tp->tm_hour, tp->tm_min, tp->tm_sec);
    ea0e:	00 d0       	rcall	.+0      	; 0xea10 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x41a>
    ea10:	00 d0       	rcall	.+0      	; 0xea12 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x41c>
    ea12:	0d b7       	in	r16, 0x3d	; 61
    ea14:	1e b7       	in	r17, 0x3e	; 62
    ea16:	0f 5f       	subi	r16, 0xFF	; 255
    ea18:	1f 4f       	sbci	r17, 0xFF	; 255
    ea1a:	1b ab       	std	Y+51, r17	; 0x33
    ea1c:	0a ab       	std	Y+50, r16	; 0x32
    ea1e:	a5 80       	ldd	r10, Z+5	; 0x05
    ea20:	bb 24       	eor	r11, r11
    ea22:	a7 fc       	sbrc	r10, 7
    ea24:	b0 94       	com	r11
    ea26:	87 80       	ldd	r8, Z+7	; 0x07
    ea28:	90 84       	ldd	r9, Z+8	; 0x08
    ea2a:	82 81       	ldd	r24, Z+2	; 0x02
    ea2c:	99 27       	eor	r25, r25
    ea2e:	87 fd       	sbrc	r24, 7
    ea30:	90 95       	com	r25
    ea32:	ad b7       	in	r26, 0x3d	; 61
    ea34:	be b7       	in	r27, 0x3e	; 62
    ea36:	12 96       	adiw	r26, 0x02	; 2
    ea38:	9c 93       	st	X, r25
    ea3a:	8e 93       	st	-X, r24
    ea3c:	11 97       	sbiw	r26, 0x01	; 1
    ea3e:	81 81       	ldd	r24, Z+1	; 0x01
    ea40:	99 27       	eor	r25, r25
    ea42:	87 fd       	sbrc	r24, 7
    ea44:	90 95       	com	r25
    ea46:	d8 01       	movw	r26, r16
    ea48:	13 96       	adiw	r26, 0x03	; 3
    ea4a:	9c 93       	st	X, r25
    ea4c:	8e 93       	st	-X, r24
    ea4e:	12 97       	sbiw	r26, 0x02	; 2
    ea50:	80 81       	ld	r24, Z
    ea52:	99 27       	eor	r25, r25
    ea54:	87 fd       	sbrc	r24, 7
    ea56:	90 95       	com	r25
    ea58:	15 96       	adiw	r26, 0x05	; 5
    ea5a:	9c 93       	st	X, r25
    ea5c:	8e 93       	st	-X, r24
    ea5e:	14 97       	sbiw	r26, 0x04	; 4
    ea60:	6a 89       	ldd	r22, Y+18	; 0x12
    ea62:	7b 89       	ldd	r23, Y+19	; 0x13
    ea64:	8c 89       	ldd	r24, Y+20	; 0x14
    ea66:	9d 89       	ldd	r25, Y+21	; 0x15
    ea68:	2a 8d       	ldd	r18, Y+26	; 0x1a
    ea6a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    ea6c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    ea6e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    ea70:	0c a1       	ldd	r16, Y+36	; 0x24
    ea72:	1d a1       	ldd	r17, Y+37	; 0x25
    ea74:	ea a0       	ldd	r14, Y+34	; 0x22
    ea76:	fb a0       	ldd	r15, Y+35	; 0x23
    ea78:	c8 a0       	ldd	r12, Y+32	; 0x20
    ea7a:	d9 a0       	ldd	r13, Y+33	; 0x21
    ea7c:	0e 94 d2 6f 	call	0xdfa4	; 0xdfa4 <_ZL10ydhms_difflliiiiiiii>
    ea80:	ed b7       	in	r30, 0x3d	; 61
    ea82:	fe b7       	in	r31, 0x3e	; 62
    ea84:	36 96       	adiw	r30, 0x06	; 6
    ea86:	0f b6       	in	r0, 0x3f	; 63
    ea88:	f8 94       	cli
    ea8a:	fe bf       	out	0x3e, r31	; 62
    ea8c:	0f be       	out	0x3f, r0	; 63
    ea8e:	ed bf       	out	0x3d, r30	; 61
    ea90:	9b 01       	movw	r18, r22
    ea92:	ac 01       	movw	r20, r24
      time_t t1 = *t + d;
    ea94:	dc 01       	movw	r26, r24
    ea96:	cb 01       	movw	r24, r22
    ea98:	84 0d       	add	r24, r4
    ea9a:	95 1d       	adc	r25, r5
    ea9c:	a6 1d       	adc	r26, r6
    ea9e:	b7 1d       	adc	r27, r7
      if ((t1 < *t) == (TYPE_SIGNED (time_t) ? d < 0 : TIME_T_MAX / 2 < d))
    eaa0:	61 e0       	ldi	r22, 0x01	; 1
    eaa2:	84 15       	cp	r24, r4
    eaa4:	95 05       	cpc	r25, r5
    eaa6:	a6 05       	cpc	r26, r6
    eaa8:	b7 05       	cpc	r27, r7
    eaaa:	0c f4       	brge	.+2      	; 0xeaae <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x4b8>
    eaac:	60 e0       	ldi	r22, 0x00	; 0
    eaae:	22 27       	eor	r18, r18
    eab0:	57 fd       	sbrc	r21, 7
    eab2:	23 95       	inc	r18
    eab4:	33 27       	eor	r19, r19
    eab6:	44 27       	eor	r20, r20
    eab8:	55 27       	eor	r21, r21
    eaba:	62 17       	cp	r22, r18
    eabc:	49 f5       	brne	.+82     	; 0xeb10 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x51a>
     if the actual difference is nonzero, as that would cause a false
     match; and don't oscillate between two values, as that would
     confuse the spring-forward gap detector.  */
  return (*t < TIME_T_MIDPOINT
	  ? (*t <= TIME_T_MIN + 1 ? *t + 1 : TIME_T_MIN)
	  : (TIME_T_MAX - 1 <= *t ? *t - 1 : TIME_T_MAX));
    eabe:	77 fe       	sbrs	r7, 7
    eac0:	0f c0       	rjmp	.+30     	; 0xeae0 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x4ea>
    eac2:	f2 e0       	ldi	r31, 0x02	; 2
    eac4:	4f 16       	cp	r4, r31
    eac6:	f0 e0       	ldi	r31, 0x00	; 0
    eac8:	5f 06       	cpc	r5, r31
    eaca:	f0 e0       	ldi	r31, 0x00	; 0
    eacc:	6f 06       	cpc	r6, r31
    eace:	f0 e8       	ldi	r31, 0x80	; 128
    ead0:	7f 06       	cpc	r7, r31
    ead2:	ac f4       	brge	.+42     	; 0xeafe <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x508>
    ead4:	d3 01       	movw	r26, r6
    ead6:	c2 01       	movw	r24, r4
    ead8:	01 96       	adiw	r24, 0x01	; 1
    eada:	a1 1d       	adc	r26, r1
    eadc:	b1 1d       	adc	r27, r1
    eade:	18 c0       	rjmp	.+48     	; 0xeb10 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x51a>
    eae0:	0e ef       	ldi	r16, 0xFE	; 254
    eae2:	40 16       	cp	r4, r16
    eae4:	0f ef       	ldi	r16, 0xFF	; 255
    eae6:	50 06       	cpc	r5, r16
    eae8:	0f ef       	ldi	r16, 0xFF	; 255
    eaea:	60 06       	cpc	r6, r16
    eaec:	0f e7       	ldi	r16, 0x7F	; 127
    eaee:	70 06       	cpc	r7, r16
    eaf0:	5c f0       	brlt	.+22     	; 0xeb08 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x512>
    eaf2:	d3 01       	movw	r26, r6
    eaf4:	c2 01       	movw	r24, r4
    eaf6:	01 97       	sbiw	r24, 0x01	; 1
    eaf8:	a1 09       	sbc	r26, r1
    eafa:	b1 09       	sbc	r27, r1
    eafc:	09 c0       	rjmp	.+18     	; 0xeb10 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x51a>
    eafe:	80 e0       	ldi	r24, 0x00	; 0
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	a0 e0       	ldi	r26, 0x00	; 0
    eb04:	b0 e8       	ldi	r27, 0x80	; 128
    eb06:	04 c0       	rjmp	.+8      	; 0xeb10 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x51a>
    eb08:	8f ef       	ldi	r24, 0xFF	; 255
    eb0a:	9f ef       	ldi	r25, 0xFF	; 255
    eb0c:	af ef       	ldi	r26, 0xFF	; 255
    eb0e:	bf e7       	ldi	r27, 0x7F	; 127
	}
    }

  /* Repeatedly use the error to improve the guess.  */

  for (t = t1 = t2 = t0;
    eb10:	48 16       	cp	r4, r24
    eb12:	59 06       	cpc	r5, r25
    eb14:	6a 06       	cpc	r6, r26
    eb16:	7b 06       	cpc	r7, r27
    eb18:	09 f0       	breq	.+2      	; 0xeb1c <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x526>
    eb1a:	ca ce       	rjmp	.-620    	; 0xe8b0 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x2ba>
      goto offset_found;
    else if (--remaining_probes == 0)
      return -1;

 offset_found:
  *offset = guessed_offset + t - t0;
    eb1c:	8e 89       	ldd	r24, Y+22	; 0x16
    eb1e:	9f 89       	ldd	r25, Y+23	; 0x17
    eb20:	a8 8d       	ldd	r26, Y+24	; 0x18
    eb22:	b9 8d       	ldd	r27, Y+25	; 0x19
    eb24:	2e 85       	ldd	r18, Y+14	; 0x0e
    eb26:	3f 85       	ldd	r19, Y+15	; 0x0f
    eb28:	48 89       	ldd	r20, Y+16	; 0x10
    eb2a:	59 89       	ldd	r21, Y+17	; 0x11
    eb2c:	82 1b       	sub	r24, r18
    eb2e:	93 0b       	sbc	r25, r19
    eb30:	a4 0b       	sbc	r26, r20
    eb32:	b5 0b       	sbc	r27, r21
    eb34:	84 0d       	add	r24, r4
    eb36:	95 1d       	adc	r25, r5
    eb38:	a6 1d       	adc	r26, r6
    eb3a:	b7 1d       	adc	r27, r7
    eb3c:	e8 a9       	ldd	r30, Y+48	; 0x30
    eb3e:	f9 a9       	ldd	r31, Y+49	; 0x31
    eb40:	80 83       	st	Z, r24
    eb42:	91 83       	std	Z+1, r25	; 0x01
    eb44:	a2 83       	std	Z+2, r26	; 0x02
    eb46:	b3 83       	std	Z+3, r27	; 0x03
	  | ! convert (&t2, &tm))
	return -1;
      t = t2;
    }

  *tp = tm;
    eb48:	d1 01       	movw	r26, r2
    eb4a:	fe 01       	movw	r30, r28
    eb4c:	35 96       	adiw	r30, 0x05	; 5
    eb4e:	89 e0       	ldi	r24, 0x09	; 9
    eb50:	01 90       	ld	r0, Z+
    eb52:	0d 92       	st	X+, r0
    eb54:	81 50       	subi	r24, 0x01	; 1
    eb56:	e1 f7       	brne	.-8      	; 0xeb50 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x55a>
    eb58:	04 c0       	rjmp	.+8      	; 0xeb62 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_+0x56c>
	t != gt);
       t1 = t2, t2 = t, t = gt)
    if (t == t1 && t != t2)
      goto offset_found;
    else if (--remaining_probes == 0)
      return -1;
    eb5a:	44 24       	eor	r4, r4
    eb5c:	4a 94       	dec	r4
    eb5e:	54 2c       	mov	r5, r4
    eb60:	32 01       	movw	r6, r4
      t = t2;
    }

  *tp = tm;
  return t;
}
    eb62:	b2 01       	movw	r22, r4
    eb64:	c3 01       	movw	r24, r6
    eb66:	e3 96       	adiw	r28, 0x33	; 51
    eb68:	0f b6       	in	r0, 0x3f	; 63
    eb6a:	f8 94       	cli
    eb6c:	de bf       	out	0x3e, r29	; 62
    eb6e:	0f be       	out	0x3f, r0	; 63
    eb70:	cd bf       	out	0x3d, r28	; 61
    eb72:	cf 91       	pop	r28
    eb74:	df 91       	pop	r29
    eb76:	1f 91       	pop	r17
    eb78:	0f 91       	pop	r16
    eb7a:	ff 90       	pop	r15
    eb7c:	ef 90       	pop	r14
    eb7e:	df 90       	pop	r13
    eb80:	cf 90       	pop	r12
    eb82:	bf 90       	pop	r11
    eb84:	af 90       	pop	r10
    eb86:	9f 90       	pop	r9
    eb88:	8f 90       	pop	r8
    eb8a:	7f 90       	pop	r7
    eb8c:	6f 90       	pop	r6
    eb8e:	5f 90       	pop	r5
    eb90:	4f 90       	pop	r4
    eb92:	3f 90       	pop	r3
    eb94:	2f 90       	pop	r2
    eb96:	08 95       	ret

0000eb98 <_Z6mktimeP2tm>:
time_t
mktime (struct tm *tp)
{
 // no time zone stuff. Just do the math ;)
  static time_t localtime_offset;
  return __mktime_internal (tp, __localtime_r, &localtime_offset);
    eb98:	6b ee       	ldi	r22, 0xEB	; 235
    eb9a:	72 e7       	ldi	r23, 0x72	; 114
    eb9c:	47 e3       	ldi	r20, 0x37	; 55
    eb9e:	5f e1       	ldi	r21, 0x1F	; 31
    eba0:	0e 94 fb 72 	call	0xe5f6	; 0xe5f6 <_Z17__mktime_internalP2tmPFS0_PlS0_ES1_>
}
    eba4:	08 95       	ret

0000eba6 <_Z6filltmPlP2tm>:

/* Fill a (struct tm) TP* from a given time_t time stamp */
time_t
filltm(time_t *t, struct tm *tp)
{
    eba6:	9b 01       	movw	r18, r22
  return __offtime(t, 0, tp);
    eba8:	40 e0       	ldi	r20, 0x00	; 0
    ebaa:	50 e0       	ldi	r21, 0x00	; 0
    ebac:	ba 01       	movw	r22, r20
    ebae:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <_Z9__offtimePllP2tm>
    ebb2:	9c 01       	movw	r18, r24
    ebb4:	44 27       	eor	r20, r20
    ebb6:	37 fd       	sbrc	r19, 7
    ebb8:	40 95       	com	r20
    ebba:	54 2f       	mov	r21, r20
}
    ebbc:	b9 01       	movw	r22, r18
    ebbe:	ca 01       	movw	r24, r20
    ebc0:	08 95       	ret

0000ebc2 <_ZL9iic_delayv>:
static
void iic_delay (void)
{
	int n;

	for (n = 4; n; n--) PINB;
    ebc2:	83 b1       	in	r24, 0x03	; 3
    ebc4:	83 b1       	in	r24, 0x03	; 3
    ebc6:	83 b1       	in	r24, 0x03	; 3
    ebc8:	83 b1       	in	r24, 0x03	; 3
}
    ebca:	08 95       	ret

0000ebcc <_ZL9iic_startv>:

/* Generate start condition on the IIC bus */
static
void iic_start (void)
{
	SDA_HIGH();
    ebcc:	51 98       	cbi	0x0a, 1	; 10
	iic_delay();
    ebce:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_HIGH();
    ebd2:	50 98       	cbi	0x0a, 0	; 10
	iic_delay();
    ebd4:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SDA_LOW();
    ebd8:	51 9a       	sbi	0x0a, 1	; 10
	iic_delay();
    ebda:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_LOW();
    ebde:	50 9a       	sbi	0x0a, 0	; 10
	iic_delay();
    ebe0:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
}
    ebe4:	08 95       	ret

0000ebe6 <_ZL8iic_stopv>:

/* Generate stop condition on the IIC bus */
static
void iic_stop (void)
{
	SDA_LOW();
    ebe6:	51 9a       	sbi	0x0a, 1	; 10
	iic_delay();
    ebe8:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_HIGH();
    ebec:	50 98       	cbi	0x0a, 0	; 10
	iic_delay();
    ebee:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SDA_HIGH();
    ebf2:	51 98       	cbi	0x0a, 1	; 10
	iic_delay();
    ebf4:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
}
    ebf8:	08 95       	ret

0000ebfa <_ZL8iic_sendh>:


/* Send a byte to the IIC bus */
static
int iic_send (BYTE dat)
{
    ebfa:	ef 92       	push	r14
    ebfc:	ff 92       	push	r15
    ebfe:	1f 93       	push	r17
    ec00:	df 93       	push	r29
    ec02:	cf 93       	push	r28
    ec04:	0f 92       	push	r0
    ec06:	cd b7       	in	r28, 0x3d	; 61
    ec08:	de b7       	in	r29, 0x3e	; 62
    ec0a:	98 e0       	ldi	r25, 0x08	; 8
    ec0c:	e9 2e       	mov	r14, r25
    ec0e:	f1 2c       	mov	r15, r1
	BYTE b = 0x80;
    ec10:	10 e8       	ldi	r17, 0x80	; 128
	int ack;


	do {
		if (dat & b)	 {	/* SDA = Z/L */
    ec12:	91 2f       	mov	r25, r17
    ec14:	98 23       	and	r25, r24
    ec16:	11 f0       	breq	.+4      	; 0xec1c <_ZL8iic_sendh+0x22>
			SDA_HIGH();
    ec18:	51 98       	cbi	0x0a, 1	; 10
    ec1a:	01 c0       	rjmp	.+2      	; 0xec1e <_ZL8iic_sendh+0x24>
		} else {
			SDA_LOW();
    ec1c:	51 9a       	sbi	0x0a, 1	; 10
		}
		iic_delay();
    ec1e:	89 83       	std	Y+1, r24	; 0x01
    ec20:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
		SCL_HIGH();
    ec24:	50 98       	cbi	0x0a, 0	; 10
		iic_delay();
    ec26:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
		SCL_LOW();
    ec2a:	50 9a       	sbi	0x0a, 0	; 10
		iic_delay();
    ec2c:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
{
	BYTE b = 0x80;
	int ack;


	do {
    ec30:	16 95       	lsr	r17
    ec32:	08 94       	sec
    ec34:	e1 08       	sbc	r14, r1
    ec36:	f1 08       	sbc	r15, r1
    ec38:	89 81       	ldd	r24, Y+1	; 0x01
    ec3a:	e1 14       	cp	r14, r1
    ec3c:	f1 04       	cpc	r15, r1
    ec3e:	49 f7       	brne	.-46     	; 0xec12 <_ZL8iic_sendh+0x18>
		SCL_HIGH();
		iic_delay();
		SCL_LOW();
		iic_delay();
	} while (b >>= 1);
	SDA_HIGH();
    ec40:	51 98       	cbi	0x0a, 1	; 10
	iic_delay();
    ec42:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_HIGH();
    ec46:	50 98       	cbi	0x0a, 0	; 10
	ack = SDA_VAL ? 0 : 1;	/* Sample ACK */
    ec48:	19 b1       	in	r17, 0x09	; 9
	iic_delay();
    ec4a:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_LOW();
    ec4e:	50 9a       	sbi	0x0a, 0	; 10
	iic_delay();
    ec50:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
		iic_delay();
	} while (b >>= 1);
	SDA_HIGH();
	iic_delay();
	SCL_HIGH();
	ack = SDA_VAL ? 0 : 1;	/* Sample ACK */
    ec54:	21 e0       	ldi	r18, 0x01	; 1
    ec56:	30 e0       	ldi	r19, 0x00	; 0
    ec58:	11 ff       	sbrs	r17, 1
    ec5a:	02 c0       	rjmp	.+4      	; 0xec60 <_ZL8iic_sendh+0x66>
    ec5c:	20 e0       	ldi	r18, 0x00	; 0
    ec5e:	30 e0       	ldi	r19, 0x00	; 0
	iic_delay();
	SCL_LOW();
	iic_delay();
	return ack;
}
    ec60:	c9 01       	movw	r24, r18
    ec62:	0f 90       	pop	r0
    ec64:	cf 91       	pop	r28
    ec66:	df 91       	pop	r29
    ec68:	1f 91       	pop	r17
    ec6a:	ff 90       	pop	r15
    ec6c:	ef 90       	pop	r14
    ec6e:	08 95       	ret

0000ec70 <_Z8iic_readhjjPh>:
	BYTE dev,		/* Device address */
	UINT adr,		/* Read start address */
	UINT cnt,		/* Read byte count */
	BYTE *buff		/* Read data buffer */
)
{
    ec70:	af 92       	push	r10
    ec72:	bf 92       	push	r11
    ec74:	df 92       	push	r13
    ec76:	ef 92       	push	r14
    ec78:	ff 92       	push	r15
    ec7a:	0f 93       	push	r16
    ec7c:	1f 93       	push	r17
    ec7e:	df 93       	push	r29
    ec80:	cf 93       	push	r28
    ec82:	0f 92       	push	r0
    ec84:	cd b7       	in	r28, 0x3d	; 61
    ec86:	de b7       	in	r29, 0x3e	; 62
    ec88:	e8 2e       	mov	r14, r24
    ec8a:	5a 01       	movw	r10, r20
    ec8c:	f2 2e       	mov	r15, r18
    ec8e:	d3 2e       	mov	r13, r19
	BYTE *rbuff = buff;
	int n;


	if (!cnt) return 0;
    ec90:	41 15       	cp	r20, r1
    ec92:	51 05       	cpc	r21, r1
    ec94:	09 f4       	brne	.+2      	; 0xec98 <_Z8iic_readhjjPh+0x28>
    ec96:	56 c0       	rjmp	.+172    	; 0xed44 <_Z8iic_readhjjPh+0xd4>
    ec98:	0a e0       	ldi	r16, 0x0A	; 10
    ec9a:	10 e0       	ldi	r17, 0x00	; 0

	n = 10;
	do {							/* Select device */
		iic_start();
    ec9c:	69 83       	std	Y+1, r22	; 0x01
    ec9e:	0e 94 e6 75 	call	0xebcc	; 0xebcc <_ZL9iic_startv>
	} while (!iic_send(dev) && --n);
    eca2:	8e 2d       	mov	r24, r14
    eca4:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>


	if (!cnt) return 0;

	n = 10;
	do {							/* Select device */
    eca8:	69 81       	ldd	r22, Y+1	; 0x01
    ecaa:	00 97       	sbiw	r24, 0x00	; 0
    ecac:	09 f0       	breq	.+2      	; 0xecb0 <_Z8iic_readhjjPh+0x40>
    ecae:	58 c0       	rjmp	.+176    	; 0xed60 <_Z8iic_readhjjPh+0xf0>
    ecb0:	01 50       	subi	r16, 0x01	; 1
    ecb2:	10 40       	sbci	r17, 0x00	; 0
    ecb4:	99 f7       	brne	.-26     	; 0xec9c <_Z8iic_readhjjPh+0x2c>
    ecb6:	3f c0       	rjmp	.+126    	; 0xed36 <_Z8iic_readhjjPh+0xc6>
		iic_start();
	} while (!iic_send(dev) && --n);
	if (n) {
		if (iic_send((BYTE)adr)) {		/* Set start address */
    ecb8:	86 2f       	mov	r24, r22
    ecba:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>
    ecbe:	00 97       	sbiw	r24, 0x00	; 0
    ecc0:	d1 f1       	breq	.+116    	; 0xed36 <_Z8iic_readhjjPh+0xc6>
			iic_start();				/* Reselect device in read mode */
    ecc2:	0e 94 e6 75 	call	0xebcc	; 0xebcc <_ZL9iic_startv>
			if (iic_send(dev | 1)) {
    ecc6:	8e 2d       	mov	r24, r14
    ecc8:	81 60       	ori	r24, 0x01	; 1
    ecca:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>
    ecce:	00 97       	sbiw	r24, 0x00	; 0
    ecd0:	91 f1       	breq	.+100    	; 0xed36 <_Z8iic_readhjjPh+0xc6>
    ecd2:	ef 2c       	mov	r14, r15
    ecd4:	fd 2c       	mov	r15, r13
				do {					/* Receive data */
					cnt--;
    ecd6:	08 94       	sec
    ecd8:	a1 08       	sbc	r10, r1
    ecda:	b1 08       	sbc	r11, r1

/*-------------------------------------------------*/
/* I2C block read/write controls                   */


int iic_read (
    ecdc:	dd 24       	eor	r13, r13
    ecde:	d3 94       	inc	r13
    ece0:	a1 14       	cp	r10, r1
    ece2:	b1 04       	cpc	r11, r1
    ece4:	09 f4       	brne	.+2      	; 0xece8 <_Z8iic_readhjjPh+0x78>
    ece6:	dd 24       	eor	r13, r13

/* Receive a byte from the IIC bus */
static
BYTE iic_rcvr (int ack)
{
	UINT d = 1;
    ece8:	01 e0       	ldi	r16, 0x01	; 1
    ecea:	10 e0       	ldi	r17, 0x00	; 0


	do {
		d <<= 1;
    ecec:	00 0f       	add	r16, r16
    ecee:	11 1f       	adc	r17, r17
		SCL_HIGH();
    ecf0:	50 98       	cbi	0x0a, 0	; 10
		if (SDA_VAL) d++;
    ecf2:	49 9b       	sbis	0x09, 1	; 9
    ecf4:	02 c0       	rjmp	.+4      	; 0xecfa <_Z8iic_readhjjPh+0x8a>
    ecf6:	0f 5f       	subi	r16, 0xFF	; 255
    ecf8:	1f 4f       	sbci	r17, 0xFF	; 255
		iic_delay();
    ecfa:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
		SCL_LOW();
    ecfe:	50 9a       	sbi	0x0a, 0	; 10
		iic_delay();
    ed00:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
BYTE iic_rcvr (int ack)
{
	UINT d = 1;


	do {
    ed04:	0f 3f       	cpi	r16, 0xFF	; 255
    ed06:	11 05       	cpc	r17, r1
    ed08:	89 f3       	breq	.-30     	; 0xecec <_Z8iic_readhjjPh+0x7c>
    ed0a:	80 f3       	brcs	.-32     	; 0xecec <_Z8iic_readhjjPh+0x7c>
		if (SDA_VAL) d++;
		iic_delay();
		SCL_LOW();
		iic_delay();
	} while (d < 0x100);
	if (ack) {		/* SDA = ACK */
    ed0c:	dd 20       	and	r13, r13
    ed0e:	11 f0       	breq	.+4      	; 0xed14 <_Z8iic_readhjjPh+0xa4>
		SDA_LOW();
    ed10:	51 9a       	sbi	0x0a, 1	; 10
    ed12:	01 c0       	rjmp	.+2      	; 0xed16 <_Z8iic_readhjjPh+0xa6>
	} else {
		SDA_HIGH();
    ed14:	51 98       	cbi	0x0a, 1	; 10
	}
	iic_delay();
    ed16:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_HIGH();
    ed1a:	50 98       	cbi	0x0a, 0	; 10
	iic_delay();
    ed1c:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>
	SCL_LOW();
    ed20:	50 9a       	sbi	0x0a, 0	; 10
	SDA_HIGH();
    ed22:	51 98       	cbi	0x0a, 1	; 10
	iic_delay();
    ed24:	0e 94 e1 75 	call	0xebc2	; 0xebc2 <_ZL9iic_delayv>

	return (BYTE)d;
    ed28:	f7 01       	movw	r30, r14
    ed2a:	01 93       	st	Z+, r16
    ed2c:	7f 01       	movw	r14, r30
	} while (!iic_send(dev) && --n);
	if (n) {
		if (iic_send((BYTE)adr)) {		/* Set start address */
			iic_start();				/* Reselect device in read mode */
			if (iic_send(dev | 1)) {
				do {					/* Receive data */
    ed2e:	dd 20       	and	r13, r13
    ed30:	91 f6       	brne	.-92     	; 0xecd6 <_Z8iic_readhjjPh+0x66>
    ed32:	aa 24       	eor	r10, r10
    ed34:	bb 24       	eor	r11, r11
				} while (cnt);
			}
		}
	}

	iic_stop();						/* Deselect device */
    ed36:	0e 94 f3 75 	call	0xebe6	; 0xebe6 <_ZL8iic_stopv>

	return cnt ? 0 : 1;
    ed3a:	21 e0       	ldi	r18, 0x01	; 1
    ed3c:	30 e0       	ldi	r19, 0x00	; 0
    ed3e:	a1 14       	cp	r10, r1
    ed40:	b1 04       	cpc	r11, r1
    ed42:	11 f0       	breq	.+4      	; 0xed48 <_Z8iic_readhjjPh+0xd8>
{
	BYTE *rbuff = buff;
	int n;


	if (!cnt) return 0;
    ed44:	20 e0       	ldi	r18, 0x00	; 0
    ed46:	30 e0       	ldi	r19, 0x00	; 0
	}

	iic_stop();						/* Deselect device */

	return cnt ? 0 : 1;
}
    ed48:	c9 01       	movw	r24, r18
    ed4a:	0f 90       	pop	r0
    ed4c:	cf 91       	pop	r28
    ed4e:	df 91       	pop	r29
    ed50:	1f 91       	pop	r17
    ed52:	0f 91       	pop	r16
    ed54:	ff 90       	pop	r15
    ed56:	ef 90       	pop	r14
    ed58:	df 90       	pop	r13
    ed5a:	bf 90       	pop	r11
    ed5c:	af 90       	pop	r10
    ed5e:	08 95       	ret

	n = 10;
	do {							/* Select device */
		iic_start();
	} while (!iic_send(dev) && --n);
	if (n) {
    ed60:	01 15       	cp	r16, r1
    ed62:	11 05       	cpc	r17, r1
    ed64:	41 f3       	breq	.-48     	; 0xed36 <_Z8iic_readhjjPh+0xc6>
    ed66:	a8 cf       	rjmp	.-176    	; 0xecb8 <_Z8iic_readhjjPh+0x48>

0000ed68 <_Z9iic_writehjjPKh>:
	BYTE dev,			/* Device address */
	UINT adr,			/* Write start address */
	UINT cnt,			/* Write byte count */
	const BYTE *buff	/* Data to be written */
)
{
    ed68:	af 92       	push	r10
    ed6a:	bf 92       	push	r11
    ed6c:	df 92       	push	r13
    ed6e:	ef 92       	push	r14
    ed70:	ff 92       	push	r15
    ed72:	0f 93       	push	r16
    ed74:	1f 93       	push	r17
    ed76:	df 93       	push	r29
    ed78:	cf 93       	push	r28
    ed7a:	0f 92       	push	r0
    ed7c:	cd b7       	in	r28, 0x3d	; 61
    ed7e:	de b7       	in	r29, 0x3e	; 62
    ed80:	f8 2e       	mov	r15, r24
    ed82:	5a 01       	movw	r10, r20
    ed84:	e2 2e       	mov	r14, r18
    ed86:	d3 2e       	mov	r13, r19
	const BYTE *wbuff = buff;
	int n;


	if (!cnt) return 0;
    ed88:	41 15       	cp	r20, r1
    ed8a:	51 05       	cpc	r21, r1
    ed8c:	51 f1       	breq	.+84     	; 0xede2 <_Z9iic_writehjjPKh+0x7a>
    ed8e:	0a e0       	ldi	r16, 0x0A	; 10
    ed90:	10 e0       	ldi	r17, 0x00	; 0

	n = 10;
	do {							/* Select device */
		iic_start();
    ed92:	69 83       	std	Y+1, r22	; 0x01
    ed94:	0e 94 e6 75 	call	0xebcc	; 0xebcc <_ZL9iic_startv>
	} while (!iic_send(dev) && --n);
    ed98:	8f 2d       	mov	r24, r15
    ed9a:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>


	if (!cnt) return 0;

	n = 10;
	do {							/* Select device */
    ed9e:	69 81       	ldd	r22, Y+1	; 0x01
    eda0:	00 97       	sbiw	r24, 0x00	; 0
    eda2:	69 f5       	brne	.+90     	; 0xedfe <_Z9iic_writehjjPKh+0x96>
    eda4:	01 50       	subi	r16, 0x01	; 1
    eda6:	10 40       	sbci	r17, 0x00	; 0
    eda8:	a1 f7       	brne	.-24     	; 0xed92 <_Z9iic_writehjjPKh+0x2a>
    edaa:	14 c0       	rjmp	.+40     	; 0xedd4 <_Z9iic_writehjjPKh+0x6c>
		iic_start();
	} while (!iic_send(dev) && --n);
	if (n) {
		if (iic_send((BYTE)adr)) {		/* Set start address */
    edac:	86 2f       	mov	r24, r22
    edae:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>
    edb2:	00 97       	sbiw	r24, 0x00	; 0
    edb4:	79 f0       	breq	.+30     	; 0xedd4 <_Z9iic_writehjjPKh+0x6c>
    edb6:	0e 2d       	mov	r16, r14
    edb8:	1d 2d       	mov	r17, r13
			do {						/* Send data */
				if (!iic_send(*wbuff++)) break;
    edba:	f8 01       	movw	r30, r16
    edbc:	81 91       	ld	r24, Z+
    edbe:	8f 01       	movw	r16, r30
    edc0:	0e 94 fd 75 	call	0xebfa	; 0xebfa <_ZL8iic_sendh>
    edc4:	00 97       	sbiw	r24, 0x00	; 0
    edc6:	31 f0       	breq	.+12     	; 0xedd4 <_Z9iic_writehjjPKh+0x6c>
	do {							/* Select device */
		iic_start();
	} while (!iic_send(dev) && --n);
	if (n) {
		if (iic_send((BYTE)adr)) {		/* Set start address */
			do {						/* Send data */
    edc8:	08 94       	sec
    edca:	a1 08       	sbc	r10, r1
    edcc:	b1 08       	sbc	r11, r1
    edce:	a1 14       	cp	r10, r1
    edd0:	b1 04       	cpc	r11, r1
    edd2:	99 f7       	brne	.-26     	; 0xedba <_Z9iic_writehjjPKh+0x52>
				if (!iic_send(*wbuff++)) break;
			} while (--cnt);
		}
	}

	iic_stop();						/* Deselect device */
    edd4:	0e 94 f3 75 	call	0xebe6	; 0xebe6 <_ZL8iic_stopv>

	return cnt ? 0 : 1;
    edd8:	21 e0       	ldi	r18, 0x01	; 1
    edda:	30 e0       	ldi	r19, 0x00	; 0
    eddc:	a1 14       	cp	r10, r1
    edde:	b1 04       	cpc	r11, r1
    ede0:	11 f0       	breq	.+4      	; 0xede6 <_Z9iic_writehjjPKh+0x7e>
{
	const BYTE *wbuff = buff;
	int n;


	if (!cnt) return 0;
    ede2:	20 e0       	ldi	r18, 0x00	; 0
    ede4:	30 e0       	ldi	r19, 0x00	; 0
	}

	iic_stop();						/* Deselect device */

	return cnt ? 0 : 1;
}
    ede6:	c9 01       	movw	r24, r18
    ede8:	0f 90       	pop	r0
    edea:	cf 91       	pop	r28
    edec:	df 91       	pop	r29
    edee:	1f 91       	pop	r17
    edf0:	0f 91       	pop	r16
    edf2:	ff 90       	pop	r15
    edf4:	ef 90       	pop	r14
    edf6:	df 90       	pop	r13
    edf8:	bf 90       	pop	r11
    edfa:	af 90       	pop	r10
    edfc:	08 95       	ret

	n = 10;
	do {							/* Select device */
		iic_start();
	} while (!iic_send(dev) && --n);
	if (n) {
    edfe:	01 15       	cp	r16, r1
    ee00:	11 05       	cpc	r17, r1
    ee02:	41 f3       	breq	.-48     	; 0xedd4 <_Z9iic_writehjjPKh+0x6c>
    ee04:	d3 cf       	rjmp	.-90     	; 0xedac <_Z9iic_writehjjPKh+0x44>

0000ee06 <_Z11rtc_gettimeP3RTC>:
/*-------------------------------------------------*/
/* RTC functions                                   */


int rtc_gettime (RTC *rtc)
{
    ee06:	0f 93       	push	r16
    ee08:	1f 93       	push	r17
    ee0a:	df 93       	push	r29
    ee0c:	cf 93       	push	r28
    ee0e:	cd b7       	in	r28, 0x3d	; 61
    ee10:	de b7       	in	r29, 0x3e	; 62
    ee12:	28 97       	sbiw	r28, 0x08	; 8
    ee14:	0f b6       	in	r0, 0x3f	; 63
    ee16:	f8 94       	cli
    ee18:	de bf       	out	0x3e, r29	; 62
    ee1a:	0f be       	out	0x3f, r0	; 63
    ee1c:	cd bf       	out	0x3d, r28	; 61
    ee1e:	8c 01       	movw	r16, r24
	BYTE buf[8];


	if (!iic_read(0xD0, 0, 7, buf)) return 0;
    ee20:	80 ed       	ldi	r24, 0xD0	; 208
    ee22:	60 e0       	ldi	r22, 0x00	; 0
    ee24:	70 e0       	ldi	r23, 0x00	; 0
    ee26:	47 e0       	ldi	r20, 0x07	; 7
    ee28:	50 e0       	ldi	r21, 0x00	; 0
    ee2a:	9e 01       	movw	r18, r28
    ee2c:	2f 5f       	subi	r18, 0xFF	; 255
    ee2e:	3f 4f       	sbci	r19, 0xFF	; 255
    ee30:	0e 94 38 76 	call	0xec70	; 0xec70 <_Z8iic_readhjjPh>
    ee34:	00 97       	sbiw	r24, 0x00	; 0
    ee36:	09 f4       	brne	.+2      	; 0xee3a <_Z11rtc_gettimeP3RTC+0x34>
    ee38:	71 c0       	rjmp	.+226    	; 0xef1c <_Z11rtc_gettimeP3RTC+0x116>

	rtc->sec = (buf[0] & 0x0F) + ((buf[0] >> 4) & 7) * 10;
    ee3a:	29 81       	ldd	r18, Y+1	; 0x01
    ee3c:	82 2f       	mov	r24, r18
    ee3e:	90 e0       	ldi	r25, 0x00	; 0
    ee40:	34 e0       	ldi	r19, 0x04	; 4
    ee42:	95 95       	asr	r25
    ee44:	87 95       	ror	r24
    ee46:	3a 95       	dec	r19
    ee48:	e1 f7       	brne	.-8      	; 0xee42 <_Z11rtc_gettimeP3RTC+0x3c>
    ee4a:	87 70       	andi	r24, 0x07	; 7
    ee4c:	88 0f       	add	r24, r24
    ee4e:	98 2f       	mov	r25, r24
    ee50:	99 0f       	add	r25, r25
    ee52:	99 0f       	add	r25, r25
    ee54:	98 0f       	add	r25, r24
    ee56:	2f 70       	andi	r18, 0x0F	; 15
    ee58:	92 0f       	add	r25, r18
    ee5a:	f8 01       	movw	r30, r16
    ee5c:	97 83       	std	Z+7, r25	; 0x07
	rtc->min = (buf[1] & 0x0F) + (buf[1] >> 4) * 10;
    ee5e:	2a 81       	ldd	r18, Y+2	; 0x02
    ee60:	92 2f       	mov	r25, r18
    ee62:	92 95       	swap	r25
    ee64:	9f 70       	andi	r25, 0x0F	; 15
    ee66:	99 0f       	add	r25, r25
    ee68:	89 2f       	mov	r24, r25
    ee6a:	88 0f       	add	r24, r24
    ee6c:	88 0f       	add	r24, r24
    ee6e:	89 0f       	add	r24, r25
    ee70:	2f 70       	andi	r18, 0x0F	; 15
    ee72:	82 0f       	add	r24, r18
    ee74:	86 83       	std	Z+6, r24	; 0x06
	rtc->hour = (buf[2] & 0x0F) + ((buf[2] >> 4) & 3) * 10;
    ee76:	2b 81       	ldd	r18, Y+3	; 0x03
    ee78:	82 2f       	mov	r24, r18
    ee7a:	90 e0       	ldi	r25, 0x00	; 0
    ee7c:	04 e0       	ldi	r16, 0x04	; 4
    ee7e:	95 95       	asr	r25
    ee80:	87 95       	ror	r24
    ee82:	0a 95       	dec	r16
    ee84:	e1 f7       	brne	.-8      	; 0xee7e <_Z11rtc_gettimeP3RTC+0x78>
    ee86:	83 70       	andi	r24, 0x03	; 3
    ee88:	88 0f       	add	r24, r24
    ee8a:	98 2f       	mov	r25, r24
    ee8c:	99 0f       	add	r25, r25
    ee8e:	99 0f       	add	r25, r25
    ee90:	98 0f       	add	r25, r24
    ee92:	82 2f       	mov	r24, r18
    ee94:	8f 70       	andi	r24, 0x0F	; 15
    ee96:	98 0f       	add	r25, r24
    ee98:	95 83       	std	Z+5, r25	; 0x05
	rtc->wday = (buf[2] & 0x07);
    ee9a:	27 70       	andi	r18, 0x07	; 7
    ee9c:	24 83       	std	Z+4, r18	; 0x04
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
    ee9e:	2d 81       	ldd	r18, Y+5	; 0x05
    eea0:	82 2f       	mov	r24, r18
    eea2:	90 e0       	ldi	r25, 0x00	; 0
    eea4:	14 e0       	ldi	r17, 0x04	; 4
    eea6:	95 95       	asr	r25
    eea8:	87 95       	ror	r24
    eeaa:	1a 95       	dec	r17
    eeac:	e1 f7       	brne	.-8      	; 0xeea6 <_Z11rtc_gettimeP3RTC+0xa0>
    eeae:	83 70       	andi	r24, 0x03	; 3
    eeb0:	88 0f       	add	r24, r24
    eeb2:	98 2f       	mov	r25, r24
    eeb4:	99 0f       	add	r25, r25
    eeb6:	99 0f       	add	r25, r25
    eeb8:	98 0f       	add	r25, r24
    eeba:	2f 70       	andi	r18, 0x0F	; 15
    eebc:	92 0f       	add	r25, r18
    eebe:	93 83       	std	Z+3, r25	; 0x03
	rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
    eec0:	2e 81       	ldd	r18, Y+6	; 0x06
    eec2:	82 2f       	mov	r24, r18
    eec4:	90 e0       	ldi	r25, 0x00	; 0
    eec6:	b4 e0       	ldi	r27, 0x04	; 4
    eec8:	95 95       	asr	r25
    eeca:	87 95       	ror	r24
    eecc:	ba 95       	dec	r27
    eece:	e1 f7       	brne	.-8      	; 0xeec8 <_Z11rtc_gettimeP3RTC+0xc2>
    eed0:	81 70       	andi	r24, 0x01	; 1
    eed2:	88 0f       	add	r24, r24
    eed4:	98 2f       	mov	r25, r24
    eed6:	99 0f       	add	r25, r25
    eed8:	99 0f       	add	r25, r25
    eeda:	98 0f       	add	r25, r24
    eedc:	2f 70       	andi	r18, 0x0F	; 15
    eede:	92 0f       	add	r25, r18
    eee0:	92 83       	std	Z+2, r25	; 0x02
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;
    eee2:	4f 81       	ldd	r20, Y+7	; 0x07
    eee4:	50 e0       	ldi	r21, 0x00	; 0
    eee6:	ca 01       	movw	r24, r20
    eee8:	8f 70       	andi	r24, 0x0F	; 15
    eeea:	90 70       	andi	r25, 0x00	; 0
    eeec:	80 53       	subi	r24, 0x30	; 48
    eeee:	98 4f       	sbci	r25, 0xF8	; 248
    eef0:	a4 e0       	ldi	r26, 0x04	; 4
    eef2:	55 95       	asr	r21
    eef4:	47 95       	ror	r20
    eef6:	aa 95       	dec	r26
    eef8:	e1 f7       	brne	.-8      	; 0xeef2 <_Z11rtc_gettimeP3RTC+0xec>
    eefa:	9a 01       	movw	r18, r20
    eefc:	22 0f       	add	r18, r18
    eefe:	33 1f       	adc	r19, r19
    ef00:	63 e0       	ldi	r22, 0x03	; 3
    ef02:	44 0f       	add	r20, r20
    ef04:	55 1f       	adc	r21, r21
    ef06:	6a 95       	dec	r22
    ef08:	e1 f7       	brne	.-8      	; 0xef02 <_Z11rtc_gettimeP3RTC+0xfc>
    ef0a:	24 0f       	add	r18, r20
    ef0c:	35 1f       	adc	r19, r21
    ef0e:	82 0f       	add	r24, r18
    ef10:	93 1f       	adc	r25, r19
    ef12:	91 83       	std	Z+1, r25	; 0x01
    ef14:	80 83       	st	Z, r24

	return 1;
    ef16:	21 e0       	ldi	r18, 0x01	; 1
    ef18:	30 e0       	ldi	r19, 0x00	; 0
    ef1a:	02 c0       	rjmp	.+4      	; 0xef20 <_Z11rtc_gettimeP3RTC+0x11a>
int rtc_gettime (RTC *rtc)
{
	BYTE buf[8];


	if (!iic_read(0xD0, 0, 7, buf)) return 0;
    ef1c:	20 e0       	ldi	r18, 0x00	; 0
    ef1e:	30 e0       	ldi	r19, 0x00	; 0
	rtc->mday = (buf[4] & 0x0F) + ((buf[4] >> 4) & 3) * 10;
	rtc->month = (buf[5] & 0x0F) + ((buf[5] >> 4) & 1) * 10;
	rtc->year = 2000 + (buf[6] & 0x0F) + (buf[6] >> 4) * 10;

	return 1;
}
    ef20:	c9 01       	movw	r24, r18
    ef22:	28 96       	adiw	r28, 0x08	; 8
    ef24:	0f b6       	in	r0, 0x3f	; 63
    ef26:	f8 94       	cli
    ef28:	de bf       	out	0x3e, r29	; 62
    ef2a:	0f be       	out	0x3f, r0	; 63
    ef2c:	cd bf       	out	0x3d, r28	; 61
    ef2e:	cf 91       	pop	r28
    ef30:	df 91       	pop	r29
    ef32:	1f 91       	pop	r17
    ef34:	0f 91       	pop	r16
    ef36:	08 95       	ret

0000ef38 <_Z11rtc_settimePK3RTC>:




int rtc_settime (const RTC *rtc)
{
    ef38:	df 93       	push	r29
    ef3a:	cf 93       	push	r28
    ef3c:	cd b7       	in	r28, 0x3d	; 61
    ef3e:	de b7       	in	r29, 0x3e	; 62
    ef40:	28 97       	sbiw	r28, 0x08	; 8
    ef42:	0f b6       	in	r0, 0x3f	; 63
    ef44:	f8 94       	cli
    ef46:	de bf       	out	0x3e, r29	; 62
    ef48:	0f be       	out	0x3f, r0	; 63
    ef4a:	cd bf       	out	0x3d, r28	; 61
    ef4c:	fc 01       	movw	r30, r24

	BYTE buf[8];


	buf[0] = rtc->sec / 10 * 16 + rtc->sec % 10;
    ef4e:	87 81       	ldd	r24, Z+7	; 0x07
    ef50:	2a e0       	ldi	r18, 0x0A	; 10
    ef52:	62 2f       	mov	r22, r18
    ef54:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
    ef58:	82 95       	swap	r24
    ef5a:	80 7f       	andi	r24, 0xF0	; 240
    ef5c:	89 0f       	add	r24, r25
    ef5e:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = rtc->min / 10 * 16 + rtc->min % 10;
    ef60:	86 81       	ldd	r24, Z+6	; 0x06
    ef62:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
    ef66:	82 95       	swap	r24
    ef68:	80 7f       	andi	r24, 0xF0	; 240
    ef6a:	89 0f       	add	r24, r25
    ef6c:	8a 83       	std	Y+2, r24	; 0x02
	buf[2] = rtc->hour / 10 * 16 + rtc->hour % 10;
    ef6e:	85 81       	ldd	r24, Z+5	; 0x05
    ef70:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
    ef74:	82 95       	swap	r24
    ef76:	80 7f       	andi	r24, 0xF0	; 240
    ef78:	89 0f       	add	r24, r25
    ef7a:	8b 83       	std	Y+3, r24	; 0x03
	buf[3] = rtc->wday & 7;
    ef7c:	84 81       	ldd	r24, Z+4	; 0x04
    ef7e:	87 70       	andi	r24, 0x07	; 7
    ef80:	8c 83       	std	Y+4, r24	; 0x04
	buf[4] = rtc->mday / 10 * 16 + rtc->mday % 10;
    ef82:	83 81       	ldd	r24, Z+3	; 0x03
    ef84:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
    ef88:	82 95       	swap	r24
    ef8a:	80 7f       	andi	r24, 0xF0	; 240
    ef8c:	89 0f       	add	r24, r25
    ef8e:	8d 83       	std	Y+5, r24	; 0x05
	buf[5] = rtc->month / 10 * 16 + rtc->month % 10;
    ef90:	82 81       	ldd	r24, Z+2	; 0x02
    ef92:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
    ef96:	82 95       	swap	r24
    ef98:	80 7f       	andi	r24, 0xF0	; 240
    ef9a:	89 0f       	add	r24, r25
    ef9c:	8e 83       	std	Y+6, r24	; 0x06
	buf[6] = (rtc->year - 2000) / 10 * 16 + (rtc->year - 2000) % 10;
    ef9e:	80 81       	ld	r24, Z
    efa0:	91 81       	ldd	r25, Z+1	; 0x01
    efa2:	80 5d       	subi	r24, 0xD0	; 208
    efa4:	97 40       	sbci	r25, 0x07	; 7
    efa6:	6a e0       	ldi	r22, 0x0A	; 10
    efa8:	70 e0       	ldi	r23, 0x00	; 0
    efaa:	0e 94 07 ab 	call	0x1560e	; 0x1560e <__udivmodhi4>
    efae:	62 95       	swap	r22
    efb0:	60 7f       	andi	r22, 0xF0	; 240
    efb2:	68 0f       	add	r22, r24
    efb4:	6f 83       	std	Y+7, r22	; 0x07
	return iic_write(0xD0, 0, 7, buf);
    efb6:	80 ed       	ldi	r24, 0xD0	; 208
    efb8:	60 e0       	ldi	r22, 0x00	; 0
    efba:	70 e0       	ldi	r23, 0x00	; 0
    efbc:	47 e0       	ldi	r20, 0x07	; 7
    efbe:	50 e0       	ldi	r21, 0x00	; 0
    efc0:	9e 01       	movw	r18, r28
    efc2:	2f 5f       	subi	r18, 0xFF	; 255
    efc4:	3f 4f       	sbci	r19, 0xFF	; 255
    efc6:	0e 94 b4 76 	call	0xed68	; 0xed68 <_Z9iic_writehjjPKh>
}
    efca:	28 96       	adiw	r28, 0x08	; 8
    efcc:	0f b6       	in	r0, 0x3f	; 63
    efce:	f8 94       	cli
    efd0:	de bf       	out	0x3e, r29	; 62
    efd2:	0f be       	out	0x3f, r0	; 63
    efd4:	cd bf       	out	0x3d, r28	; 61
    efd6:	cf 91       	pop	r28
    efd8:	df 91       	pop	r29
    efda:	08 95       	ret

0000efdc <_Z8rtc_initv>:




int rtc_init (void)
{
    efdc:	ef 92       	push	r14
    efde:	ff 92       	push	r15
    efe0:	0f 93       	push	r16
    efe2:	1f 93       	push	r17
    efe4:	df 93       	push	r29
    efe6:	cf 93       	push	r28
    efe8:	cd b7       	in	r28, 0x3d	; 61
    efea:	de b7       	in	r29, 0x3e	; 62
    efec:	28 97       	sbiw	r28, 0x08	; 8
    efee:	0f b6       	in	r0, 0x3f	; 63
    eff0:	f8 94       	cli
    eff2:	de bf       	out	0x3e, r29	; 62
    eff4:	0f be       	out	0x3f, r0	; 63
    eff6:	cd bf       	out	0x3d, r28	; 61
	BYTE buf[8];	/* RTC R/W buffer */
	UINT adr;


	/* Read RTC registers */
	if (!iic_read(0xD0, 0, 8, buf)) return 0;	/* IIC error */
    eff8:	80 ed       	ldi	r24, 0xD0	; 208
    effa:	60 e0       	ldi	r22, 0x00	; 0
    effc:	70 e0       	ldi	r23, 0x00	; 0
    effe:	48 e0       	ldi	r20, 0x08	; 8
    f000:	50 e0       	ldi	r21, 0x00	; 0
    f002:	7e 01       	movw	r14, r28
    f004:	08 94       	sec
    f006:	e1 1c       	adc	r14, r1
    f008:	f1 1c       	adc	r15, r1
    f00a:	97 01       	movw	r18, r14
    f00c:	0e 94 38 76 	call	0xec70	; 0xec70 <_Z8iic_readhjjPh>
    f010:	00 97       	sbiw	r24, 0x00	; 0
    f012:	49 f1       	breq	.+82     	; 0xf066 <_Z8rtc_initv+0x8a>

	if (buf[7] & 0x20) {	/* When data has been volatiled, set default time */
    f014:	88 85       	ldd	r24, Y+8	; 0x08
    f016:	85 ff       	sbrs	r24, 5
    f018:	29 c0       	rjmp	.+82     	; 0xf06c <_Z8rtc_initv+0x90>
		/* Clear nv-ram. Reg[8..63] */
		memset(buf, 0, 8);
    f01a:	88 e0       	ldi	r24, 0x08	; 8
    f01c:	f7 01       	movw	r30, r14
    f01e:	11 92       	st	Z+, r1
    f020:	8a 95       	dec	r24
    f022:	e9 f7       	brne	.-6      	; 0xf01e <_Z8rtc_initv+0x42>
		for (adr = 8; adr < 64; adr += 8)
    f024:	08 e0       	ldi	r16, 0x08	; 8
    f026:	10 e0       	ldi	r17, 0x00	; 0
			iic_write(0x0D, adr, 8, buf);
    f028:	c7 01       	movw	r24, r14
    f02a:	fe 2c       	mov	r15, r14
    f02c:	e9 2e       	mov	r14, r25
    f02e:	8d e0       	ldi	r24, 0x0D	; 13
    f030:	b8 01       	movw	r22, r16
    f032:	48 e0       	ldi	r20, 0x08	; 8
    f034:	50 e0       	ldi	r21, 0x00	; 0
    f036:	2f 2d       	mov	r18, r15
    f038:	3e 2d       	mov	r19, r14
    f03a:	0e 94 b4 76 	call	0xed68	; 0xed68 <_Z9iic_writehjjPKh>
	if (!iic_read(0xD0, 0, 8, buf)) return 0;	/* IIC error */

	if (buf[7] & 0x20) {	/* When data has been volatiled, set default time */
		/* Clear nv-ram. Reg[8..63] */
		memset(buf, 0, 8);
		for (adr = 8; adr < 64; adr += 8)
    f03e:	08 5f       	subi	r16, 0xF8	; 248
    f040:	1f 4f       	sbci	r17, 0xFF	; 255
    f042:	00 34       	cpi	r16, 0x40	; 64
    f044:	11 05       	cpc	r17, r1
    f046:	99 f7       	brne	.-26     	; 0xf02e <_Z8rtc_initv+0x52>
			iic_write(0x0D, adr, 8, buf);
		/* Reset time to Jan 1, '08. Reg[0..7] */
		buf[4] = 1; buf[5] = 1; buf[6] = 8;
    f048:	81 e0       	ldi	r24, 0x01	; 1
    f04a:	8d 83       	std	Y+5, r24	; 0x05
    f04c:	8e 83       	std	Y+6, r24	; 0x06
    f04e:	88 e0       	ldi	r24, 0x08	; 8
    f050:	8f 83       	std	Y+7, r24	; 0x07
		iic_write(0x0D, 0, 8, buf);
    f052:	8d e0       	ldi	r24, 0x0D	; 13
    f054:	60 e0       	ldi	r22, 0x00	; 0
    f056:	70 e0       	ldi	r23, 0x00	; 0
    f058:	48 e0       	ldi	r20, 0x08	; 8
    f05a:	50 e0       	ldi	r21, 0x00	; 0
    f05c:	2f 2d       	mov	r18, r15
    f05e:	3e 2d       	mov	r19, r14
    f060:	0e 94 b4 76 	call	0xed68	; 0xed68 <_Z9iic_writehjjPKh>
    f064:	03 c0       	rjmp	.+6      	; 0xf06c <_Z8rtc_initv+0x90>
	BYTE buf[8];	/* RTC R/W buffer */
	UINT adr;


	/* Read RTC registers */
	if (!iic_read(0xD0, 0, 8, buf)) return 0;	/* IIC error */
    f066:	20 e0       	ldi	r18, 0x00	; 0
    f068:	30 e0       	ldi	r19, 0x00	; 0
    f06a:	02 c0       	rjmp	.+4      	; 0xf070 <_Z8rtc_initv+0x94>
			iic_write(0x0D, adr, 8, buf);
		/* Reset time to Jan 1, '08. Reg[0..7] */
		buf[4] = 1; buf[5] = 1; buf[6] = 8;
		iic_write(0x0D, 0, 8, buf);
	}
	return 1;
    f06c:	21 e0       	ldi	r18, 0x01	; 1
    f06e:	30 e0       	ldi	r19, 0x00	; 0
}
    f070:	c9 01       	movw	r24, r18
    f072:	28 96       	adiw	r28, 0x08	; 8
    f074:	0f b6       	in	r0, 0x3f	; 63
    f076:	f8 94       	cli
    f078:	de bf       	out	0x3e, r29	; 62
    f07a:	0f be       	out	0x3f, r0	; 63
    f07c:	cd bf       	out	0x3d, r28	; 61
    f07e:	cf 91       	pop	r28
    f080:	df 91       	pop	r29
    f082:	1f 91       	pop	r17
    f084:	0f 91       	pop	r16
    f086:	ff 90       	pop	r15
    f088:	ef 90       	pop	r14
    f08a:	08 95       	ret

0000f08c <_ZL7mem_cpyPvPKvj>:
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    f08c:	28 2f       	mov	r18, r24
    f08e:	39 2f       	mov	r19, r25
    f090:	d9 01       	movw	r26, r18
    f092:	86 2f       	mov	r24, r22
    f094:	97 2f       	mov	r25, r23
    f096:	fc 01       	movw	r30, r24
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    f098:	04 c0       	rjmp	.+8      	; 0xf0a2 <_ZL7mem_cpyPvPKvj+0x16>
		*d++ = *s++;
    f09a:	81 91       	ld	r24, Z+
    f09c:	8d 93       	st	X+, r24
    f09e:	41 50       	subi	r20, 0x01	; 1
    f0a0:	50 40       	sbci	r21, 0x00	; 0
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    f0a2:	41 15       	cp	r20, r1
    f0a4:	51 05       	cpc	r21, r1
    f0a6:	c9 f7       	brne	.-14     	; 0xf09a <_ZL7mem_cpyPvPKvj+0xe>
		*d++ = *s++;
}
    f0a8:	08 95       	ret

0000f0aa <_ZL7mem_setPvij>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    f0aa:	28 2f       	mov	r18, r24
    f0ac:	39 2f       	mov	r19, r25
    f0ae:	f9 01       	movw	r30, r18

	while (cnt--)
    f0b0:	03 c0       	rjmp	.+6      	; 0xf0b8 <_ZL7mem_setPvij+0xe>
		*d++ = (BYTE)val;
    f0b2:	61 93       	st	Z+, r22
    f0b4:	41 50       	subi	r20, 0x01	; 1
    f0b6:	50 40       	sbci	r21, 0x00	; 0
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
    f0b8:	41 15       	cp	r20, r1
    f0ba:	51 05       	cpc	r21, r1
    f0bc:	d1 f7       	brne	.-12     	; 0xf0b2 <_ZL7mem_setPvij+0x8>
		*d++ = (BYTE)val;
}
    f0be:	08 95       	ret

0000f0c0 <_ZL12get_fileinfoP3DIRP7FILINFO>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    f0c0:	0f 93       	push	r16
    f0c2:	1f 93       	push	r17
    f0c4:	cf 93       	push	r28
    f0c6:	df 93       	push	r29
    f0c8:	fc 01       	movw	r30, r24
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    f0ca:	8b 01       	movw	r16, r22
    f0cc:	07 5f       	subi	r16, 0xF7	; 247
    f0ce:	1f 4f       	sbci	r17, 0xFF	; 255
	if (dj->sect) {
    f0d0:	26 85       	ldd	r18, Z+14	; 0x0e
    f0d2:	37 85       	ldd	r19, Z+15	; 0x0f
    f0d4:	40 89       	ldd	r20, Z+16	; 0x10
    f0d6:	51 89       	ldd	r21, Z+17	; 0x11
    f0d8:	21 15       	cp	r18, r1
    f0da:	31 05       	cpc	r19, r1
    f0dc:	41 05       	cpc	r20, r1
    f0de:	51 05       	cpc	r21, r1
    f0e0:	09 f4       	brne	.+2      	; 0xf0e4 <_ZL12get_fileinfoP3DIRP7FILINFO+0x24>
    f0e2:	68 c0       	rjmp	.+208    	; 0xf1b4 <_ZL12get_fileinfoP3DIRP7FILINFO+0xf4>
		dir = dj->dir;
    f0e4:	02 88       	ldd	r0, Z+18	; 0x12
    f0e6:	f3 89       	ldd	r31, Z+19	; 0x13
    f0e8:	e0 2d       	mov	r30, r0
    f0ea:	df 01       	movw	r26, r30
    f0ec:	c8 01       	movw	r24, r16
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    f0ee:	20 e0       	ldi	r18, 0x00	; 0
    f0f0:	30 e0       	ldi	r19, 0x00	; 0
	TCHAR *p, c;


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
    f0f2:	8c 01       	movw	r16, r24
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
    f0f4:	4d 91       	ld	r20, X+
			if (c == ' ') break;
    f0f6:	40 32       	cpi	r20, 0x20	; 32
    f0f8:	61 f0       	breq	.+24     	; 0xf112 <_ZL12get_fileinfoP3DIRP7FILINFO+0x52>
			if (c == 0x05) c = (TCHAR)0xE5;
    f0fa:	45 30       	cpi	r20, 0x05	; 5
    f0fc:	09 f4       	brne	.+2      	; 0xf100 <_ZL12get_fileinfoP3DIRP7FILINFO+0x40>
    f0fe:	45 ee       	ldi	r20, 0xE5	; 229
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    f100:	ec 01       	movw	r28, r24
    f102:	49 93       	st	Y+, r20
    f104:	ce 01       	movw	r24, r28
    f106:	8e 01       	movw	r16, r28

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
    f108:	2f 5f       	subi	r18, 0xFF	; 255
    f10a:	3f 4f       	sbci	r19, 0xFF	; 255
    f10c:	28 30       	cpi	r18, 0x08	; 8
    f10e:	31 05       	cpc	r19, r1
    f110:	81 f7       	brne	.-32     	; 0xf0f2 <_ZL12get_fileinfoP3DIRP7FILINFO+0x32>
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    f112:	9f 01       	movw	r18, r30
    f114:	28 5f       	subi	r18, 0xF8	; 248
    f116:	3f 4f       	sbci	r19, 0xFF	; 255
    f118:	40 85       	ldd	r20, Z+8	; 0x08
    f11a:	40 32       	cpi	r20, 0x20	; 32
    f11c:	79 f0       	breq	.+30     	; 0xf13c <_ZL12get_fileinfoP3DIRP7FILINFO+0x7c>
			*p++ = '.';
    f11e:	dc 01       	movw	r26, r24
    f120:	4e e2       	ldi	r20, 0x2E	; 46
    f122:	4d 93       	st	X+, r20
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/
#if _FS_MINIMIZE <= 1
static
void get_fileinfo (		/* No return code */
    f124:	04 96       	adiw	r24, 0x04	; 4
    f126:	8d 01       	movw	r16, r26
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
				c = dir[i];
    f128:	e9 01       	movw	r28, r18
    f12a:	49 91       	ld	r20, Y+
    f12c:	9e 01       	movw	r18, r28
				if (c == ' ') break;
    f12e:	40 32       	cpi	r20, 0x20	; 32
    f130:	29 f0       	breq	.+10     	; 0xf13c <_ZL12get_fileinfoP3DIRP7FILINFO+0x7c>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    f132:	4d 93       	st	X+, r20
    f134:	8d 01       	movw	r16, r26
#endif
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
    f136:	a8 17       	cp	r26, r24
    f138:	b9 07       	cpc	r27, r25
    f13a:	a9 f7       	brne	.-22     	; 0xf126 <_ZL12get_fileinfoP3DIRP7FILINFO+0x66>
				if (!c) c = '?';
#endif
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    f13c:	83 85       	ldd	r24, Z+11	; 0x0b
    f13e:	db 01       	movw	r26, r22
    f140:	18 96       	adiw	r26, 0x08	; 8
    f142:	8c 93       	st	X, r24
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    f144:	87 8d       	ldd	r24, Z+31	; 0x1f
    f146:	90 e0       	ldi	r25, 0x00	; 0
    f148:	a0 e0       	ldi	r26, 0x00	; 0
    f14a:	b0 e0       	ldi	r27, 0x00	; 0
    f14c:	b8 2f       	mov	r27, r24
    f14e:	aa 27       	eor	r26, r26
    f150:	99 27       	eor	r25, r25
    f152:	88 27       	eor	r24, r24
    f154:	26 8d       	ldd	r18, Z+30	; 0x1e
    f156:	30 e0       	ldi	r19, 0x00	; 0
    f158:	40 e0       	ldi	r20, 0x00	; 0
    f15a:	50 e0       	ldi	r21, 0x00	; 0
    f15c:	a9 01       	movw	r20, r18
    f15e:	33 27       	eor	r19, r19
    f160:	22 27       	eor	r18, r18
    f162:	82 2b       	or	r24, r18
    f164:	93 2b       	or	r25, r19
    f166:	a4 2b       	or	r26, r20
    f168:	b5 2b       	or	r27, r21
    f16a:	24 8d       	ldd	r18, Z+28	; 0x1c
    f16c:	30 e0       	ldi	r19, 0x00	; 0
    f16e:	40 e0       	ldi	r20, 0x00	; 0
    f170:	50 e0       	ldi	r21, 0x00	; 0
    f172:	82 2b       	or	r24, r18
    f174:	93 2b       	or	r25, r19
    f176:	a4 2b       	or	r26, r20
    f178:	b5 2b       	or	r27, r21
    f17a:	35 8d       	ldd	r19, Z+29	; 0x1d
    f17c:	20 e0       	ldi	r18, 0x00	; 0
    f17e:	40 e0       	ldi	r20, 0x00	; 0
    f180:	50 e0       	ldi	r21, 0x00	; 0
    f182:	82 2b       	or	r24, r18
    f184:	93 2b       	or	r25, r19
    f186:	a4 2b       	or	r26, r20
    f188:	b5 2b       	or	r27, r21
    f18a:	eb 01       	movw	r28, r22
    f18c:	88 83       	st	Y, r24
    f18e:	99 83       	std	Y+1, r25	; 0x01
    f190:	aa 83       	std	Y+2, r26	; 0x02
    f192:	bb 83       	std	Y+3, r27	; 0x03
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    f194:	31 8d       	ldd	r19, Z+25	; 0x19
    f196:	20 e0       	ldi	r18, 0x00	; 0
    f198:	80 8d       	ldd	r24, Z+24	; 0x18
    f19a:	90 e0       	ldi	r25, 0x00	; 0
    f19c:	82 2b       	or	r24, r18
    f19e:	93 2b       	or	r25, r19
    f1a0:	9d 83       	std	Y+5, r25	; 0x05
    f1a2:	8c 83       	std	Y+4, r24	; 0x04
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    f1a4:	37 89       	ldd	r19, Z+23	; 0x17
    f1a6:	20 e0       	ldi	r18, 0x00	; 0
    f1a8:	86 89       	ldd	r24, Z+22	; 0x16
    f1aa:	90 e0       	ldi	r25, 0x00	; 0
    f1ac:	82 2b       	or	r24, r18
    f1ae:	93 2b       	or	r25, r19
    f1b0:	9f 83       	std	Y+7, r25	; 0x07
    f1b2:	8e 83       	std	Y+6, r24	; 0x06
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    f1b4:	f8 01       	movw	r30, r16
    f1b6:	10 82       	st	Z, r1
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    f1b8:	df 91       	pop	r29
    f1ba:	cf 91       	pop	r28
    f1bc:	1f 91       	pop	r17
    f1be:	0f 91       	pop	r16
    f1c0:	08 95       	ret

0000f1c2 <_ZL8validateP5FATFSt>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    f1c2:	fc 01       	movw	r30, r24
	if (!fs || !fs->fs_type || fs->id != id)
    f1c4:	00 97       	sbiw	r24, 0x00	; 0
    f1c6:	81 f0       	breq	.+32     	; 0xf1e8 <_ZL8validateP5FATFSt+0x26>
    f1c8:	80 81       	ld	r24, Z
    f1ca:	88 23       	and	r24, r24
    f1cc:	69 f0       	breq	.+26     	; 0xf1e8 <_ZL8validateP5FATFSt+0x26>
    f1ce:	86 81       	ldd	r24, Z+6	; 0x06
    f1d0:	97 81       	ldd	r25, Z+7	; 0x07
    f1d2:	86 17       	cp	r24, r22
    f1d4:	97 07       	cpc	r25, r23
    f1d6:	41 f4       	brne	.+16     	; 0xf1e8 <_ZL8validateP5FATFSt+0x26>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    f1d8:	81 81       	ldd	r24, Z+1	; 0x01
    f1da:	0e 94 ea 9f 	call	0x13fd4	; 0x13fd4 <_Z11disk_statush>
    f1de:	80 ff       	sbrs	r24, 0
    f1e0:	06 c0       	rjmp	.+12     	; 0xf1ee <_ZL8validateP5FATFSt+0x2c>
		return FR_NOT_READY;
    f1e2:	23 e0       	ldi	r18, 0x03	; 3
    f1e4:	30 e0       	ldi	r19, 0x00	; 0
    f1e6:	05 c0       	rjmp	.+10     	; 0xf1f2 <_ZL8validateP5FATFSt+0x30>
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
    f1e8:	29 e0       	ldi	r18, 0x09	; 9
    f1ea:	30 e0       	ldi	r19, 0x00	; 0
    f1ec:	02 c0       	rjmp	.+4      	; 0xf1f2 <_ZL8validateP5FATFSt+0x30>
	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
    f1ee:	20 e0       	ldi	r18, 0x00	; 0
    f1f0:	30 e0       	ldi	r19, 0x00	; 0
}
    f1f2:	c9 01       	movw	r24, r18
    f1f4:	08 95       	ret

0000f1f6 <_ZL8check_fsP5FATFSm>:
static
BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    f1f6:	0f 93       	push	r16
    f1f8:	cf 93       	push	r28
    f1fa:	df 93       	push	r29
    f1fc:	ec 01       	movw	r28, r24
    f1fe:	9a 01       	movw	r18, r20
    f200:	ab 01       	movw	r20, r22
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    f202:	bc 01       	movw	r22, r24
    f204:	6e 5c       	subi	r22, 0xCE	; 206
    f206:	7f 4f       	sbci	r23, 0xFF	; 255
    f208:	89 81       	ldd	r24, Y+1	; 0x01
    f20a:	01 e0       	ldi	r16, 0x01	; 1
    f20c:	0e 94 f1 9f 	call	0x13fe2	; 0x13fe2 <_Z9disk_readhPhmh>
    f210:	00 97       	sbiw	r24, 0x00	; 0
    f212:	09 f0       	breq	.+2      	; 0xf216 <_ZL8check_fsP5FATFSm+0x20>
    f214:	82 c0       	rjmp	.+260    	; 0xf31a <_ZL8check_fsP5FATFSm+0x124>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    f216:	fe 01       	movw	r30, r28
    f218:	ef 5c       	subi	r30, 0xCF	; 207
    f21a:	fd 4f       	sbci	r31, 0xFD	; 253
    f21c:	30 81       	ld	r19, Z
    f21e:	20 e0       	ldi	r18, 0x00	; 0
    f220:	fe 01       	movw	r30, r28
    f222:	e0 5d       	subi	r30, 0xD0	; 208
    f224:	fd 4f       	sbci	r31, 0xFD	; 253
    f226:	80 81       	ld	r24, Z
    f228:	90 e0       	ldi	r25, 0x00	; 0
    f22a:	82 2b       	or	r24, r18
    f22c:	93 2b       	or	r25, r19
    f22e:	2a ea       	ldi	r18, 0xAA	; 170
    f230:	85 35       	cpi	r24, 0x55	; 85
    f232:	92 07       	cpc	r25, r18
    f234:	09 f0       	breq	.+2      	; 0xf238 <_ZL8check_fsP5FATFSm+0x42>
    f236:	73 c0       	rjmp	.+230    	; 0xf31e <_ZL8check_fsP5FATFSm+0x128>
		return 2;

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    f238:	fe 01       	movw	r30, r28
    f23a:	e5 59       	subi	r30, 0x95	; 149
    f23c:	ff 4f       	sbci	r31, 0xFF	; 255
    f23e:	80 81       	ld	r24, Z
    f240:	90 e0       	ldi	r25, 0x00	; 0
    f242:	a0 e0       	ldi	r26, 0x00	; 0
    f244:	b0 e0       	ldi	r27, 0x00	; 0
    f246:	b8 2f       	mov	r27, r24
    f248:	aa 27       	eor	r26, r26
    f24a:	99 27       	eor	r25, r25
    f24c:	88 27       	eor	r24, r24
    f24e:	fe 01       	movw	r30, r28
    f250:	e6 59       	subi	r30, 0x96	; 150
    f252:	ff 4f       	sbci	r31, 0xFF	; 255
    f254:	20 81       	ld	r18, Z
    f256:	30 e0       	ldi	r19, 0x00	; 0
    f258:	40 e0       	ldi	r20, 0x00	; 0
    f25a:	50 e0       	ldi	r21, 0x00	; 0
    f25c:	a9 01       	movw	r20, r18
    f25e:	33 27       	eor	r19, r19
    f260:	22 27       	eor	r18, r18
    f262:	82 2b       	or	r24, r18
    f264:	93 2b       	or	r25, r19
    f266:	a4 2b       	or	r26, r20
    f268:	b5 2b       	or	r27, r21
    f26a:	fe 01       	movw	r30, r28
    f26c:	e8 59       	subi	r30, 0x98	; 152
    f26e:	ff 4f       	sbci	r31, 0xFF	; 255
    f270:	20 81       	ld	r18, Z
    f272:	30 e0       	ldi	r19, 0x00	; 0
    f274:	40 e0       	ldi	r20, 0x00	; 0
    f276:	50 e0       	ldi	r21, 0x00	; 0
    f278:	82 2b       	or	r24, r18
    f27a:	93 2b       	or	r25, r19
    f27c:	a4 2b       	or	r26, r20
    f27e:	b5 2b       	or	r27, r21
    f280:	fe 01       	movw	r30, r28
    f282:	e7 59       	subi	r30, 0x97	; 151
    f284:	ff 4f       	sbci	r31, 0xFF	; 255
    f286:	30 81       	ld	r19, Z
    f288:	20 e0       	ldi	r18, 0x00	; 0
    f28a:	40 e0       	ldi	r20, 0x00	; 0
    f28c:	50 e0       	ldi	r21, 0x00	; 0
    f28e:	82 2b       	or	r24, r18
    f290:	93 2b       	or	r25, r19
    f292:	a4 2b       	or	r26, r20
    f294:	b5 2b       	or	r27, r21
    f296:	b0 70       	andi	r27, 0x00	; 0
    f298:	86 34       	cpi	r24, 0x46	; 70
    f29a:	21 e4       	ldi	r18, 0x41	; 65
    f29c:	92 07       	cpc	r25, r18
    f29e:	24 e5       	ldi	r18, 0x54	; 84
    f2a0:	a2 07       	cpc	r26, r18
    f2a2:	20 e0       	ldi	r18, 0x00	; 0
    f2a4:	b2 07       	cpc	r27, r18
    f2a6:	e9 f1       	breq	.+122    	; 0xf322 <_ZL8check_fsP5FATFSm+0x12c>
		return 0;
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    f2a8:	fe 01       	movw	r30, r28
    f2aa:	e9 57       	subi	r30, 0x79	; 121
    f2ac:	ff 4f       	sbci	r31, 0xFF	; 255
    f2ae:	20 81       	ld	r18, Z
    f2b0:	30 e0       	ldi	r19, 0x00	; 0
    f2b2:	40 e0       	ldi	r20, 0x00	; 0
    f2b4:	50 e0       	ldi	r21, 0x00	; 0
    f2b6:	52 2f       	mov	r21, r18
    f2b8:	44 27       	eor	r20, r20
    f2ba:	33 27       	eor	r19, r19
    f2bc:	22 27       	eor	r18, r18
    f2be:	fe 01       	movw	r30, r28
    f2c0:	ea 57       	subi	r30, 0x7A	; 122
    f2c2:	ff 4f       	sbci	r31, 0xFF	; 255
    f2c4:	80 81       	ld	r24, Z
    f2c6:	90 e0       	ldi	r25, 0x00	; 0
    f2c8:	a0 e0       	ldi	r26, 0x00	; 0
    f2ca:	b0 e0       	ldi	r27, 0x00	; 0
    f2cc:	dc 01       	movw	r26, r24
    f2ce:	99 27       	eor	r25, r25
    f2d0:	88 27       	eor	r24, r24
    f2d2:	28 2b       	or	r18, r24
    f2d4:	39 2b       	or	r19, r25
    f2d6:	4a 2b       	or	r20, r26
    f2d8:	5b 2b       	or	r21, r27
    f2da:	fe 01       	movw	r30, r28
    f2dc:	ec 57       	subi	r30, 0x7C	; 124
    f2de:	ff 4f       	sbci	r31, 0xFF	; 255
    f2e0:	80 81       	ld	r24, Z
    f2e2:	90 e0       	ldi	r25, 0x00	; 0
    f2e4:	a0 e0       	ldi	r26, 0x00	; 0
    f2e6:	b0 e0       	ldi	r27, 0x00	; 0
    f2e8:	28 2b       	or	r18, r24
    f2ea:	39 2b       	or	r19, r25
    f2ec:	4a 2b       	or	r20, r26
    f2ee:	5b 2b       	or	r21, r27
    f2f0:	cb 57       	subi	r28, 0x7B	; 123
    f2f2:	df 4f       	sbci	r29, 0xFF	; 255
    f2f4:	98 81       	ld	r25, Y
    f2f6:	80 e0       	ldi	r24, 0x00	; 0
    f2f8:	a0 e0       	ldi	r26, 0x00	; 0
    f2fa:	b0 e0       	ldi	r27, 0x00	; 0
    f2fc:	28 2b       	or	r18, r24
    f2fe:	39 2b       	or	r19, r25
    f300:	4a 2b       	or	r20, r26
    f302:	5b 2b       	or	r21, r27
    f304:	50 70       	andi	r21, 0x00	; 0
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
    f306:	81 e0       	ldi	r24, 0x01	; 1
    f308:	26 34       	cpi	r18, 0x46	; 70
    f30a:	91 e4       	ldi	r25, 0x41	; 65
    f30c:	39 07       	cpc	r19, r25
    f30e:	94 e5       	ldi	r25, 0x54	; 84
    f310:	49 07       	cpc	r20, r25
    f312:	90 e0       	ldi	r25, 0x00	; 0
    f314:	59 07       	cpc	r21, r25
    f316:	31 f4       	brne	.+12     	; 0xf324 <_ZL8check_fsP5FATFSm+0x12e>
    f318:	04 c0       	rjmp	.+8      	; 0xf322 <_ZL8check_fsP5FATFSm+0x12c>
    f31a:	83 e0       	ldi	r24, 0x03	; 3
    f31c:	03 c0       	rjmp	.+6      	; 0xf324 <_ZL8check_fsP5FATFSm+0x12e>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
    f31e:	82 e0       	ldi	r24, 0x02	; 2
    f320:	01 c0       	rjmp	.+2      	; 0xf324 <_ZL8check_fsP5FATFSm+0x12e>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
		return 0;
    f322:	80 e0       	ldi	r24, 0x00	; 0
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
		return 0;

	return 1;
}
    f324:	df 91       	pop	r29
    f326:	cf 91       	pop	r28
    f328:	0f 91       	pop	r16
    f32a:	08 95       	ret

0000f32c <_ZL11chk_mountedPPKcPP5FATFSh>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    f32c:	3f 92       	push	r3
    f32e:	4f 92       	push	r4
    f330:	5f 92       	push	r5
    f332:	6f 92       	push	r6
    f334:	7f 92       	push	r7
    f336:	8f 92       	push	r8
    f338:	9f 92       	push	r9
    f33a:	af 92       	push	r10
    f33c:	bf 92       	push	r11
    f33e:	cf 92       	push	r12
    f340:	df 92       	push	r13
    f342:	ef 92       	push	r14
    f344:	ff 92       	push	r15
    f346:	0f 93       	push	r16
    f348:	1f 93       	push	r17
    f34a:	df 93       	push	r29
    f34c:	cf 93       	push	r28
    f34e:	cd b7       	in	r28, 0x3d	; 61
    f350:	de b7       	in	r29, 0x3e	; 62
    f352:	2e 97       	sbiw	r28, 0x0e	; 14
    f354:	0f b6       	in	r0, 0x3f	; 63
    f356:	f8 94       	cli
    f358:	de bf       	out	0x3e, r29	; 62
    f35a:	0f be       	out	0x3f, r0	; 63
    f35c:	cd bf       	out	0x3d, r28	; 61
    f35e:	fc 01       	movw	r30, r24
    f360:	e4 2e       	mov	r14, r20
	BYTE fmt, b, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    f362:	a0 81       	ld	r26, Z
    f364:	b1 81       	ldd	r27, Z+1	; 0x01
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    f366:	8c 91       	ld	r24, X
    f368:	99 27       	eor	r25, r25
    f36a:	87 fd       	sbrc	r24, 7
    f36c:	90 95       	com	r25
    f36e:	c0 97       	sbiw	r24, 0x30	; 48
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    f370:	8a 30       	cpi	r24, 0x0A	; 10
    f372:	91 05       	cpc	r25, r1
    f374:	48 f4       	brcc	.+18     	; 0xf388 <_ZL11chk_mountedPPKcPP5FATFSh+0x5c>
    f376:	11 96       	adiw	r26, 0x01	; 1
    f378:	2c 91       	ld	r18, X
    f37a:	11 97       	sbiw	r26, 0x01	; 1
    f37c:	2a 33       	cpi	r18, 0x3A	; 58
    f37e:	21 f4       	brne	.+8      	; 0xf388 <_ZL11chk_mountedPPKcPP5FATFSh+0x5c>
		p += 2; *path = p;				/* Return pointer to the path name */
    f380:	12 96       	adiw	r26, 0x02	; 2
    f382:	b1 83       	std	Z+1, r27	; 0x01
    f384:	a0 83       	st	Z, r26
    f386:	03 c0       	rjmp	.+6      	; 0xf38e <_ZL11chk_mountedPPKcPP5FATFSh+0x62>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
    f388:	80 91 3d 1f 	lds	r24, 0x1F3D
    f38c:	90 e0       	ldi	r25, 0x00	; 0
		vol = 0;						/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    f38e:	00 97       	sbiw	r24, 0x00	; 0
    f390:	09 f0       	breq	.+2      	; 0xf394 <_ZL11chk_mountedPPKcPP5FATFSh+0x68>
    f392:	c3 c3       	rjmp	.+1926   	; 0xfb1a <_ZL11chk_mountedPPKcPP5FATFSh+0x7ee>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    f394:	20 91 3b 1f 	lds	r18, 0x1F3B
    f398:	30 91 3c 1f 	lds	r19, 0x1F3C
    f39c:	3e 87       	std	Y+14, r19	; 0x0e
    f39e:	2d 87       	std	Y+13, r18	; 0x0d
    f3a0:	db 01       	movw	r26, r22
    f3a2:	11 96       	adiw	r26, 0x01	; 1
    f3a4:	3c 93       	st	X, r19
    f3a6:	2e 93       	st	-X, r18
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    f3a8:	21 15       	cp	r18, r1
    f3aa:	31 05       	cpc	r19, r1
    f3ac:	09 f4       	brne	.+2      	; 0xf3b0 <_ZL11chk_mountedPPKcPP5FATFSh+0x84>
    f3ae:	b8 c3       	rjmp	.+1904   	; 0xfb20 <_ZL11chk_mountedPPKcPP5FATFSh+0x7f4>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    f3b0:	f9 01       	movw	r30, r18
    f3b2:	80 81       	ld	r24, Z
    f3b4:	88 23       	and	r24, r24
    f3b6:	59 f0       	breq	.+22     	; 0xf3ce <_ZL11chk_mountedPPKcPP5FATFSh+0xa2>
		stat = disk_status(fs->drv);
    f3b8:	81 81       	ldd	r24, Z+1	; 0x01
    f3ba:	0e 94 ea 9f 	call	0x13fd4	; 0x13fd4 <_Z11disk_statush>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    f3be:	80 fd       	sbrc	r24, 0
    f3c0:	06 c0       	rjmp	.+12     	; 0xf3ce <_ZL11chk_mountedPPKcPP5FATFSh+0xa2>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    f3c2:	ee 20       	and	r14, r14
    f3c4:	09 f4       	brne	.+2      	; 0xf3c8 <_ZL11chk_mountedPPKcPP5FATFSh+0x9c>
    f3c6:	af c3       	rjmp	.+1886   	; 0xfb26 <_ZL11chk_mountedPPKcPP5FATFSh+0x7fa>
    f3c8:	82 ff       	sbrs	r24, 2
    f3ca:	ad c3       	rjmp	.+1882   	; 0xfb26 <_ZL11chk_mountedPPKcPP5FATFSh+0x7fa>
    f3cc:	b2 c3       	rjmp	.+1892   	; 0xfb32 <_ZL11chk_mountedPPKcPP5FATFSh+0x806>
	}

	/* The logical drive must be mounted. */
	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    f3ce:	ad 85       	ldd	r26, Y+13	; 0x0d
    f3d0:	be 85       	ldd	r27, Y+14	; 0x0e
    f3d2:	1c 92       	st	X, r1
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
    f3d4:	11 96       	adiw	r26, 0x01	; 1
    f3d6:	1c 92       	st	X, r1
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    f3d8:	80 e0       	ldi	r24, 0x00	; 0
    f3da:	0e 94 22 9f 	call	0x13e44	; 0x13e44 <_Z15disk_initializeh>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    f3de:	80 fd       	sbrc	r24, 0
    f3e0:	a5 c3       	rjmp	.+1866   	; 0xfb2c <_ZL11chk_mountedPPKcPP5FATFSh+0x800>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    f3e2:	ee 20       	and	r14, r14
    f3e4:	11 f0       	breq	.+4      	; 0xf3ea <_ZL11chk_mountedPPKcPP5FATFSh+0xbe>
    f3e6:	82 fd       	sbrc	r24, 2
    f3e8:	a4 c3       	rjmp	.+1864   	; 0xfb32 <_ZL11chk_mountedPPKcPP5FATFSh+0x806>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    f3ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    f3ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    f3ee:	40 e0       	ldi	r20, 0x00	; 0
    f3f0:	50 e0       	ldi	r21, 0x00	; 0
    f3f2:	ba 01       	movw	r22, r20
    f3f4:	0e 94 fb 78 	call	0xf1f6	; 0xf1f6 <_ZL8check_fsP5FATFSm>
	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
    f3f8:	81 30       	cpi	r24, 0x01	; 1
    f3fa:	09 f0       	breq	.+2      	; 0xf3fe <_ZL11chk_mountedPPKcPP5FATFSh+0xd2>
    f3fc:	46 c0       	rjmp	.+140    	; 0xf48a <_ZL11chk_mountedPPKcPP5FATFSh+0x15e>
		/* Check the partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
    f3fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    f400:	fe 85       	ldd	r31, Y+14	; 0x0e
    f402:	ec 50       	subi	r30, 0x0C	; 12
    f404:	fe 4f       	sbci	r31, 0xFE	; 254
    f406:	80 81       	ld	r24, Z
    f408:	88 23       	and	r24, r24
    f40a:	09 f4       	brne	.+2      	; 0xf40e <_ZL11chk_mountedPPKcPP5FATFSh+0xe2>
    f40c:	98 c3       	rjmp	.+1840   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
    f40e:	ed 85       	ldd	r30, Y+13	; 0x0d
    f410:	fe 85       	ldd	r31, Y+14	; 0x0e
    f412:	e5 50       	subi	r30, 0x05	; 5
    f414:	fe 4f       	sbci	r31, 0xFE	; 254
    f416:	80 81       	ld	r24, Z
    f418:	90 e0       	ldi	r25, 0x00	; 0
    f41a:	a0 e0       	ldi	r26, 0x00	; 0
    f41c:	b0 e0       	ldi	r27, 0x00	; 0
    f41e:	58 2f       	mov	r21, r24
    f420:	44 27       	eor	r20, r20
    f422:	33 27       	eor	r19, r19
    f424:	22 27       	eor	r18, r18
    f426:	ed 85       	ldd	r30, Y+13	; 0x0d
    f428:	fe 85       	ldd	r31, Y+14	; 0x0e
    f42a:	e6 50       	subi	r30, 0x06	; 6
    f42c:	fe 4f       	sbci	r31, 0xFE	; 254
    f42e:	80 81       	ld	r24, Z
    f430:	90 e0       	ldi	r25, 0x00	; 0
    f432:	a0 e0       	ldi	r26, 0x00	; 0
    f434:	b0 e0       	ldi	r27, 0x00	; 0
    f436:	dc 01       	movw	r26, r24
    f438:	99 27       	eor	r25, r25
    f43a:	88 27       	eor	r24, r24
    f43c:	28 2b       	or	r18, r24
    f43e:	39 2b       	or	r19, r25
    f440:	4a 2b       	or	r20, r26
    f442:	5b 2b       	or	r21, r27
    f444:	ed 85       	ldd	r30, Y+13	; 0x0d
    f446:	fe 85       	ldd	r31, Y+14	; 0x0e
    f448:	e8 50       	subi	r30, 0x08	; 8
    f44a:	fe 4f       	sbci	r31, 0xFE	; 254
    f44c:	80 81       	ld	r24, Z
    f44e:	90 e0       	ldi	r25, 0x00	; 0
    f450:	a0 e0       	ldi	r26, 0x00	; 0
    f452:	b0 e0       	ldi	r27, 0x00	; 0
    f454:	28 2b       	or	r18, r24
    f456:	39 2b       	or	r19, r25
    f458:	4a 2b       	or	r20, r26
    f45a:	5b 2b       	or	r21, r27
    f45c:	ed 85       	ldd	r30, Y+13	; 0x0d
    f45e:	fe 85       	ldd	r31, Y+14	; 0x0e
    f460:	e7 50       	subi	r30, 0x07	; 7
    f462:	fe 4f       	sbci	r31, 0xFE	; 254
    f464:	90 81       	ld	r25, Z
    f466:	80 e0       	ldi	r24, 0x00	; 0
    f468:	a0 e0       	ldi	r26, 0x00	; 0
    f46a:	b0 e0       	ldi	r27, 0x00	; 0
    f46c:	28 2b       	or	r18, r24
    f46e:	39 2b       	or	r19, r25
    f470:	4a 2b       	or	r20, r26
    f472:	5b 2b       	or	r21, r27
    f474:	29 83       	std	Y+1, r18	; 0x01
    f476:	3a 83       	std	Y+2, r19	; 0x02
    f478:	4b 83       	std	Y+3, r20	; 0x03
    f47a:	5c 83       	std	Y+4, r21	; 0x04
			fmt = check_fs(fs, bsect);					/* Check the partition */
    f47c:	8d 85       	ldd	r24, Y+13	; 0x0d
    f47e:	9e 85       	ldd	r25, Y+14	; 0x0e
    f480:	ba 01       	movw	r22, r20
    f482:	a9 01       	movw	r20, r18
    f484:	0e 94 fb 78 	call	0xf1f6	; 0xf1f6 <_ZL8check_fsP5FATFSm>
    f488:	04 c0       	rjmp	.+8      	; 0xf492 <_ZL11chk_mountedPPKcPP5FATFSh+0x166>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
    f48a:	19 82       	std	Y+1, r1	; 0x01
    f48c:	1a 82       	std	Y+2, r1	; 0x02
    f48e:	1b 82       	std	Y+3, r1	; 0x03
    f490:	1c 82       	std	Y+4, r1	; 0x04
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    f492:	83 30       	cpi	r24, 0x03	; 3
    f494:	09 f4       	brne	.+2      	; 0xf498 <_ZL11chk_mountedPPKcPP5FATFSh+0x16c>
    f496:	50 c3       	rjmp	.+1696   	; 0xfb38 <_ZL11chk_mountedPPKcPP5FATFSh+0x80c>
	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
    f498:	88 23       	and	r24, r24
    f49a:	09 f0       	breq	.+2      	; 0xf49e <_ZL11chk_mountedPPKcPP5FATFSh+0x172>
    f49c:	50 c3       	rjmp	.+1696   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>

	/* Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    f49e:	ad 85       	ldd	r26, Y+13	; 0x0d
    f4a0:	be 85       	ldd	r27, Y+14	; 0x0e
    f4a2:	de 96       	adiw	r26, 0x3e	; 62
    f4a4:	3c 91       	ld	r19, X
    f4a6:	de 97       	sbiw	r26, 0x3e	; 62
    f4a8:	20 e0       	ldi	r18, 0x00	; 0
    f4aa:	dd 96       	adiw	r26, 0x3d	; 61
    f4ac:	8c 91       	ld	r24, X
    f4ae:	dd 97       	sbiw	r26, 0x3d	; 61
    f4b0:	90 e0       	ldi	r25, 0x00	; 0
    f4b2:	82 2b       	or	r24, r18
    f4b4:	93 2b       	or	r25, r19
    f4b6:	b2 e0       	ldi	r27, 0x02	; 2
    f4b8:	80 30       	cpi	r24, 0x00	; 0
    f4ba:	9b 07       	cpc	r25, r27
    f4bc:	09 f0       	breq	.+2      	; 0xf4c0 <_ZL11chk_mountedPPKcPP5FATFSh+0x194>
    f4be:	3f c3       	rjmp	.+1662   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
		return FR_NO_FILESYSTEM;

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    f4c0:	ed 85       	ldd	r30, Y+13	; 0x0d
    f4c2:	fe 85       	ldd	r31, Y+14	; 0x0e
    f4c4:	e7 5b       	subi	r30, 0xB7	; 183
    f4c6:	ff 4f       	sbci	r31, 0xFF	; 255
    f4c8:	90 81       	ld	r25, Z
    f4ca:	80 e0       	ldi	r24, 0x00	; 0
    f4cc:	ed 85       	ldd	r30, Y+13	; 0x0d
    f4ce:	fe 85       	ldd	r31, Y+14	; 0x0e
    f4d0:	e8 5b       	subi	r30, 0xB8	; 184
    f4d2:	ff 4f       	sbci	r31, 0xFF	; 255
    f4d4:	60 80       	ld	r6, Z
    f4d6:	77 24       	eor	r7, r7
    f4d8:	68 2a       	or	r6, r24
    f4da:	79 2a       	or	r7, r25
    f4dc:	88 24       	eor	r8, r8
    f4de:	99 24       	eor	r9, r9
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    f4e0:	61 14       	cp	r6, r1
    f4e2:	71 04       	cpc	r7, r1
    f4e4:	81 04       	cpc	r8, r1
    f4e6:	91 04       	cpc	r9, r1
    f4e8:	99 f5       	brne	.+102    	; 0xf550 <_ZL11chk_mountedPPKcPP5FATFSh+0x224>
    f4ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    f4ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    f4ee:	e7 5a       	subi	r30, 0xA7	; 167
    f4f0:	ff 4f       	sbci	r31, 0xFF	; 255
    f4f2:	60 80       	ld	r6, Z
    f4f4:	77 24       	eor	r7, r7
    f4f6:	88 24       	eor	r8, r8
    f4f8:	99 24       	eor	r9, r9
    f4fa:	96 2c       	mov	r9, r6
    f4fc:	88 24       	eor	r8, r8
    f4fe:	77 24       	eor	r7, r7
    f500:	66 24       	eor	r6, r6
    f502:	ed 85       	ldd	r30, Y+13	; 0x0d
    f504:	fe 85       	ldd	r31, Y+14	; 0x0e
    f506:	e8 5a       	subi	r30, 0xA8	; 168
    f508:	ff 4f       	sbci	r31, 0xFF	; 255
    f50a:	80 81       	ld	r24, Z
    f50c:	90 e0       	ldi	r25, 0x00	; 0
    f50e:	a0 e0       	ldi	r26, 0x00	; 0
    f510:	b0 e0       	ldi	r27, 0x00	; 0
    f512:	dc 01       	movw	r26, r24
    f514:	99 27       	eor	r25, r25
    f516:	88 27       	eor	r24, r24
    f518:	68 2a       	or	r6, r24
    f51a:	79 2a       	or	r7, r25
    f51c:	8a 2a       	or	r8, r26
    f51e:	9b 2a       	or	r9, r27
    f520:	ed 85       	ldd	r30, Y+13	; 0x0d
    f522:	fe 85       	ldd	r31, Y+14	; 0x0e
    f524:	ea 5a       	subi	r30, 0xAA	; 170
    f526:	ff 4f       	sbci	r31, 0xFF	; 255
    f528:	80 81       	ld	r24, Z
    f52a:	90 e0       	ldi	r25, 0x00	; 0
    f52c:	a0 e0       	ldi	r26, 0x00	; 0
    f52e:	b0 e0       	ldi	r27, 0x00	; 0
    f530:	68 2a       	or	r6, r24
    f532:	79 2a       	or	r7, r25
    f534:	8a 2a       	or	r8, r26
    f536:	9b 2a       	or	r9, r27
    f538:	ed 85       	ldd	r30, Y+13	; 0x0d
    f53a:	fe 85       	ldd	r31, Y+14	; 0x0e
    f53c:	e9 5a       	subi	r30, 0xA9	; 169
    f53e:	ff 4f       	sbci	r31, 0xFF	; 255
    f540:	90 81       	ld	r25, Z
    f542:	80 e0       	ldi	r24, 0x00	; 0
    f544:	a0 e0       	ldi	r26, 0x00	; 0
    f546:	b0 e0       	ldi	r27, 0x00	; 0
    f548:	68 2a       	or	r6, r24
    f54a:	79 2a       	or	r7, r25
    f54c:	8a 2a       	or	r8, r26
    f54e:	9b 2a       	or	r9, r27
	fs->fsize = fasize;
    f550:	ed 85       	ldd	r30, Y+13	; 0x0d
    f552:	fe 85       	ldd	r31, Y+14	; 0x0e
    f554:	66 8e       	std	Z+30, r6	; 0x1e
    f556:	77 8e       	std	Z+31, r7	; 0x1f
    f558:	80 a2       	std	Z+32, r8	; 0x20
    f55a:	91 a2       	std	Z+33, r9	; 0x21

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    f55c:	ee 5b       	subi	r30, 0xBE	; 190
    f55e:	ff 4f       	sbci	r31, 0xFF	; 255
    f560:	20 81       	ld	r18, Z
    f562:	ad 85       	ldd	r26, Y+13	; 0x0d
    f564:	be 85       	ldd	r27, Y+14	; 0x0e
    f566:	13 96       	adiw	r26, 0x03	; 3
    f568:	2c 93       	st	X, r18
    f56a:	13 97       	sbiw	r26, 0x03	; 3
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    f56c:	82 2f       	mov	r24, r18
    f56e:	81 50       	subi	r24, 0x01	; 1
    f570:	82 30       	cpi	r24, 0x02	; 2
    f572:	08 f0       	brcs	.+2      	; 0xf576 <_ZL11chk_mountedPPKcPP5FATFSh+0x24a>
    f574:	e4 c2       	rjmp	.+1480   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
	fasize *= b;										/* Number of sectors for FAT area */

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    f576:	df 96       	adiw	r26, 0x3f	; 63
    f578:	3c 90       	ld	r3, X
    f57a:	df 97       	sbiw	r26, 0x3f	; 63
    f57c:	12 96       	adiw	r26, 0x02	; 2
    f57e:	3c 92       	st	X, r3
    f580:	12 97       	sbiw	r26, 0x02	; 2
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    f582:	33 20       	and	r3, r3
    f584:	09 f4       	brne	.+2      	; 0xf588 <_ZL11chk_mountedPPKcPP5FATFSh+0x25c>
    f586:	db c2       	rjmp	.+1462   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
    f588:	43 2d       	mov	r20, r3
    f58a:	50 e0       	ldi	r21, 0x00	; 0
    f58c:	ca 01       	movw	r24, r20
    f58e:	01 97       	sbiw	r24, 0x01	; 1
    f590:	84 23       	and	r24, r20
    f592:	95 23       	and	r25, r21
    f594:	00 97       	sbiw	r24, 0x00	; 0
    f596:	09 f0       	breq	.+2      	; 0xf59a <_ZL11chk_mountedPPKcPP5FATFSh+0x26e>
    f598:	d2 c2       	rjmp	.+1444   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    f59a:	fd 01       	movw	r30, r26
    f59c:	ec 5b       	subi	r30, 0xBC	; 188
    f59e:	ff 4f       	sbci	r31, 0xFF	; 255
    f5a0:	90 81       	ld	r25, Z
    f5a2:	80 e0       	ldi	r24, 0x00	; 0
    f5a4:	fd 01       	movw	r30, r26
    f5a6:	ed 5b       	subi	r30, 0xBD	; 189
    f5a8:	ff 4f       	sbci	r31, 0xFF	; 255
    f5aa:	40 80       	ld	r4, Z
    f5ac:	55 24       	eor	r5, r5
    f5ae:	48 2a       	or	r4, r24
    f5b0:	59 2a       	or	r5, r25
    f5b2:	19 96       	adiw	r26, 0x09	; 9
    f5b4:	5c 92       	st	X, r5
    f5b6:	4e 92       	st	-X, r4
    f5b8:	18 97       	sbiw	r26, 0x08	; 8
	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    f5ba:	c2 01       	movw	r24, r4
    f5bc:	8f 70       	andi	r24, 0x0F	; 15
    f5be:	90 70       	andi	r25, 0x00	; 0
    f5c0:	00 97       	sbiw	r24, 0x00	; 0
    f5c2:	09 f0       	breq	.+2      	; 0xf5c6 <_ZL11chk_mountedPPKcPP5FATFSh+0x29a>
    f5c4:	bc c2       	rjmp	.+1400   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    f5c6:	fd 01       	movw	r30, r26
    f5c8:	ea 5b       	subi	r30, 0xBA	; 186
    f5ca:	ff 4f       	sbci	r31, 0xFF	; 255
    f5cc:	90 81       	ld	r25, Z
    f5ce:	80 e0       	ldi	r24, 0x00	; 0
    f5d0:	fd 01       	movw	r30, r26
    f5d2:	eb 5b       	subi	r30, 0xBB	; 187
    f5d4:	ff 4f       	sbci	r31, 0xFF	; 255
    f5d6:	e0 80       	ld	r14, Z
    f5d8:	ff 24       	eor	r15, r15
    f5da:	e8 2a       	or	r14, r24
    f5dc:	f9 2a       	or	r15, r25
    f5de:	00 e0       	ldi	r16, 0x00	; 0
    f5e0:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    f5e2:	e1 14       	cp	r14, r1
    f5e4:	f1 04       	cpc	r15, r1
    f5e6:	01 05       	cpc	r16, r1
    f5e8:	11 05       	cpc	r17, r1
    f5ea:	89 f5       	brne	.+98     	; 0xf64e <_ZL11chk_mountedPPKcPP5FATFSh+0x322>
    f5ec:	fd 01       	movw	r30, r26
    f5ee:	eb 5a       	subi	r30, 0xAB	; 171
    f5f0:	ff 4f       	sbci	r31, 0xFF	; 255
    f5f2:	e0 80       	ld	r14, Z
    f5f4:	ff 24       	eor	r15, r15
    f5f6:	00 e0       	ldi	r16, 0x00	; 0
    f5f8:	10 e0       	ldi	r17, 0x00	; 0
    f5fa:	1e 2d       	mov	r17, r14
    f5fc:	00 27       	eor	r16, r16
    f5fe:	ff 24       	eor	r15, r15
    f600:	ee 24       	eor	r14, r14
    f602:	fd 01       	movw	r30, r26
    f604:	ec 5a       	subi	r30, 0xAC	; 172
    f606:	ff 4f       	sbci	r31, 0xFF	; 255
    f608:	80 81       	ld	r24, Z
    f60a:	90 e0       	ldi	r25, 0x00	; 0
    f60c:	a0 e0       	ldi	r26, 0x00	; 0
    f60e:	b0 e0       	ldi	r27, 0x00	; 0
    f610:	dc 01       	movw	r26, r24
    f612:	99 27       	eor	r25, r25
    f614:	88 27       	eor	r24, r24
    f616:	e8 2a       	or	r14, r24
    f618:	f9 2a       	or	r15, r25
    f61a:	0a 2b       	or	r16, r26
    f61c:	1b 2b       	or	r17, r27
    f61e:	ed 85       	ldd	r30, Y+13	; 0x0d
    f620:	fe 85       	ldd	r31, Y+14	; 0x0e
    f622:	ee 5a       	subi	r30, 0xAE	; 174
    f624:	ff 4f       	sbci	r31, 0xFF	; 255
    f626:	80 81       	ld	r24, Z
    f628:	90 e0       	ldi	r25, 0x00	; 0
    f62a:	a0 e0       	ldi	r26, 0x00	; 0
    f62c:	b0 e0       	ldi	r27, 0x00	; 0
    f62e:	e8 2a       	or	r14, r24
    f630:	f9 2a       	or	r15, r25
    f632:	0a 2b       	or	r16, r26
    f634:	1b 2b       	or	r17, r27
    f636:	ed 85       	ldd	r30, Y+13	; 0x0d
    f638:	fe 85       	ldd	r31, Y+14	; 0x0e
    f63a:	ed 5a       	subi	r30, 0xAD	; 173
    f63c:	ff 4f       	sbci	r31, 0xFF	; 255
    f63e:	90 81       	ld	r25, Z
    f640:	80 e0       	ldi	r24, 0x00	; 0
    f642:	a0 e0       	ldi	r26, 0x00	; 0
    f644:	b0 e0       	ldi	r27, 0x00	; 0
    f646:	e8 2a       	or	r14, r24
    f648:	f9 2a       	or	r15, r25
    f64a:	0a 2b       	or	r16, r26
    f64c:	1b 2b       	or	r17, r27

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    f64e:	ed 85       	ldd	r30, Y+13	; 0x0d
    f650:	fe 85       	ldd	r31, Y+14	; 0x0e
    f652:	ef 5b       	subi	r30, 0xBF	; 191
    f654:	ff 4f       	sbci	r31, 0xFF	; 255
    f656:	90 81       	ld	r25, Z
    f658:	80 e0       	ldi	r24, 0x00	; 0
    f65a:	ed 85       	ldd	r30, Y+13	; 0x0d
    f65c:	fe 85       	ldd	r31, Y+14	; 0x0e
    f65e:	e0 5c       	subi	r30, 0xC0	; 192
    f660:	ff 4f       	sbci	r31, 0xFF	; 255
    f662:	a0 80       	ld	r10, Z
    f664:	bb 24       	eor	r11, r11
    f666:	a8 2a       	or	r10, r24
    f668:	b9 2a       	or	r11, r25
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    f66a:	a1 14       	cp	r10, r1
    f66c:	b1 04       	cpc	r11, r1
    f66e:	09 f4       	brne	.+2      	; 0xf672 <_ZL11chk_mountedPPKcPP5FATFSh+0x346>
    f670:	66 c2       	rjmp	.+1228   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->fsize = fasize;

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
	fasize *= b;										/* Number of sectors for FAT area */
    f672:	30 e0       	ldi	r19, 0x00	; 0
    f674:	40 e0       	ldi	r20, 0x00	; 0
    f676:	50 e0       	ldi	r21, 0x00	; 0
    f678:	c4 01       	movw	r24, r8
    f67a:	b3 01       	movw	r22, r6
    f67c:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    f680:	6d 83       	std	Y+5, r22	; 0x05
    f682:	7e 83       	std	Y+6, r23	; 0x06
    f684:	8f 83       	std	Y+7, r24	; 0x07
    f686:	98 87       	std	Y+8, r25	; 0x08

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
    f688:	95 01       	movw	r18, r10
    f68a:	40 e0       	ldi	r20, 0x00	; 0
    f68c:	50 e0       	ldi	r21, 0x00	; 0
    f68e:	29 87       	std	Y+9, r18	; 0x09
    f690:	3a 87       	std	Y+10, r19	; 0x0a
    f692:	4b 87       	std	Y+11, r20	; 0x0b
    f694:	5c 87       	std	Y+12, r21	; 0x0c
    f696:	52 01       	movw	r10, r4
    f698:	b4 e0       	ldi	r27, 0x04	; 4
    f69a:	b6 94       	lsr	r11
    f69c:	a7 94       	ror	r10
    f69e:	ba 95       	dec	r27
    f6a0:	e1 f7       	brne	.-8      	; 0xf69a <_ZL11chk_mountedPPKcPP5FATFSh+0x36e>
    f6a2:	cc 24       	eor	r12, r12
    f6a4:	dd 24       	eor	r13, r13
    f6a6:	a2 0e       	add	r10, r18
    f6a8:	b3 1e       	adc	r11, r19
    f6aa:	c4 1e       	adc	r12, r20
    f6ac:	d5 1e       	adc	r13, r21
    f6ae:	a6 0e       	add	r10, r22
    f6b0:	b7 1e       	adc	r11, r23
    f6b2:	c8 1e       	adc	r12, r24
    f6b4:	d9 1e       	adc	r13, r25
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    f6b6:	ea 14       	cp	r14, r10
    f6b8:	fb 04       	cpc	r15, r11
    f6ba:	0c 05       	cpc	r16, r12
    f6bc:	1d 05       	cpc	r17, r13
    f6be:	08 f4       	brcc	.+2      	; 0xf6c2 <_ZL11chk_mountedPPKcPP5FATFSh+0x396>
    f6c0:	3e c2       	rjmp	.+1148   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    f6c2:	c8 01       	movw	r24, r16
    f6c4:	b7 01       	movw	r22, r14
    f6c6:	6a 19       	sub	r22, r10
    f6c8:	7b 09       	sbc	r23, r11
    f6ca:	8c 09       	sbc	r24, r12
    f6cc:	9d 09       	sbc	r25, r13
    f6ce:	23 2d       	mov	r18, r3
    f6d0:	30 e0       	ldi	r19, 0x00	; 0
    f6d2:	40 e0       	ldi	r20, 0x00	; 0
    f6d4:	50 e0       	ldi	r21, 0x00	; 0
    f6d6:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    f6da:	21 15       	cp	r18, r1
    f6dc:	31 05       	cpc	r19, r1
    f6de:	41 05       	cpc	r20, r1
    f6e0:	51 05       	cpc	r21, r1
    f6e2:	09 f4       	brne	.+2      	; 0xf6e6 <_ZL11chk_mountedPPKcPP5FATFSh+0x3ba>
    f6e4:	2c c2       	rjmp	.+1112   	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    f6e6:	26 3f       	cpi	r18, 0xF6	; 246
    f6e8:	8f e0       	ldi	r24, 0x0F	; 15
    f6ea:	38 07       	cpc	r19, r24
    f6ec:	80 e0       	ldi	r24, 0x00	; 0
    f6ee:	48 07       	cpc	r20, r24
    f6f0:	80 e0       	ldi	r24, 0x00	; 0
    f6f2:	58 07       	cpc	r21, r24
    f6f4:	58 f0       	brcs	.+22     	; 0xf70c <_ZL11chk_mountedPPKcPP5FATFSh+0x3e0>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    f6f6:	26 3f       	cpi	r18, 0xF6	; 246
    f6f8:	9f ef       	ldi	r25, 0xFF	; 255
    f6fa:	39 07       	cpc	r19, r25
    f6fc:	90 e0       	ldi	r25, 0x00	; 0
    f6fe:	49 07       	cpc	r20, r25
    f700:	90 e0       	ldi	r25, 0x00	; 0
    f702:	59 07       	cpc	r21, r25
    f704:	30 f4       	brcc	.+12     	; 0xf712 <_ZL11chk_mountedPPKcPP5FATFSh+0x3e6>
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    f706:	a2 e0       	ldi	r26, 0x02	; 2
    f708:	3a 2e       	mov	r3, r26
    f70a:	05 c0       	rjmp	.+10     	; 0xf716 <_ZL11chk_mountedPPKcPP5FATFSh+0x3ea>
	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
	fmt = FS_FAT12;
    f70c:	33 24       	eor	r3, r3
    f70e:	33 94       	inc	r3
    f710:	02 c0       	rjmp	.+4      	; 0xf716 <_ZL11chk_mountedPPKcPP5FATFSh+0x3ea>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    f712:	f3 e0       	ldi	r31, 0x03	; 3
    f714:	3f 2e       	mov	r3, r31

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    f716:	e2 e0       	ldi	r30, 0x02	; 2
    f718:	ee 2e       	mov	r14, r30
    f71a:	f1 2c       	mov	r15, r1
    f71c:	01 2d       	mov	r16, r1
    f71e:	11 2d       	mov	r17, r1
    f720:	e2 0e       	add	r14, r18
    f722:	f3 1e       	adc	r15, r19
    f724:	04 1f       	adc	r16, r20
    f726:	15 1f       	adc	r17, r21
    f728:	ad 85       	ldd	r26, Y+13	; 0x0d
    f72a:	be 85       	ldd	r27, Y+14	; 0x0e
    f72c:	5a 96       	adiw	r26, 0x1a	; 26
    f72e:	ed 92       	st	X+, r14
    f730:	fd 92       	st	X+, r15
    f732:	0d 93       	st	X+, r16
    f734:	1c 93       	st	X, r17
    f736:	5d 97       	sbiw	r26, 0x1d	; 29
	fs->database = bsect + sysect;						/* Data start sector */
    f738:	29 81       	ldd	r18, Y+1	; 0x01
    f73a:	3a 81       	ldd	r19, Y+2	; 0x02
    f73c:	4b 81       	ldd	r20, Y+3	; 0x03
    f73e:	5c 81       	ldd	r21, Y+4	; 0x04
    f740:	a2 0e       	add	r10, r18
    f742:	b3 1e       	adc	r11, r19
    f744:	c4 1e       	adc	r12, r20
    f746:	d5 1e       	adc	r13, r21
    f748:	9a 96       	adiw	r26, 0x2a	; 42
    f74a:	ad 92       	st	X+, r10
    f74c:	bd 92       	st	X+, r11
    f74e:	cd 92       	st	X+, r12
    f750:	dc 92       	st	X, r13
    f752:	9d 97       	sbiw	r26, 0x2d	; 45
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    f754:	59 01       	movw	r10, r18
    f756:	6a 01       	movw	r12, r20
    f758:	29 85       	ldd	r18, Y+9	; 0x09
    f75a:	3a 85       	ldd	r19, Y+10	; 0x0a
    f75c:	4b 85       	ldd	r20, Y+11	; 0x0b
    f75e:	5c 85       	ldd	r21, Y+12	; 0x0c
    f760:	a2 0e       	add	r10, r18
    f762:	b3 1e       	adc	r11, r19
    f764:	c4 1e       	adc	r12, r20
    f766:	d5 1e       	adc	r13, r21
    f768:	92 96       	adiw	r26, 0x22	; 34
    f76a:	ad 92       	st	X+, r10
    f76c:	bd 92       	st	X+, r11
    f76e:	cd 92       	st	X+, r12
    f770:	dc 92       	st	X, r13
    f772:	95 97       	sbiw	r26, 0x25	; 37
	if (fmt == FS_FAT32) {
    f774:	b3 2d       	mov	r27, r3
    f776:	b3 30       	cpi	r27, 0x03	; 3
    f778:	09 f0       	breq	.+2      	; 0xf77c <_ZL11chk_mountedPPKcPP5FATFSh+0x450>
    f77a:	47 c0       	rjmp	.+142    	; 0xf80a <_ZL11chk_mountedPPKcPP5FATFSh+0x4de>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    f77c:	41 14       	cp	r4, r1
    f77e:	51 04       	cpc	r5, r1
    f780:	09 f0       	breq	.+2      	; 0xf784 <_ZL11chk_mountedPPKcPP5FATFSh+0x458>
    f782:	dd c1       	rjmp	.+954    	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    f784:	ed 85       	ldd	r30, Y+13	; 0x0d
    f786:	fe 85       	ldd	r31, Y+14	; 0x0e
    f788:	ef 59       	subi	r30, 0x9F	; 159
    f78a:	ff 4f       	sbci	r31, 0xFF	; 255
    f78c:	80 81       	ld	r24, Z
    f78e:	90 e0       	ldi	r25, 0x00	; 0
    f790:	a0 e0       	ldi	r26, 0x00	; 0
    f792:	b0 e0       	ldi	r27, 0x00	; 0
    f794:	b8 2f       	mov	r27, r24
    f796:	aa 27       	eor	r26, r26
    f798:	99 27       	eor	r25, r25
    f79a:	88 27       	eor	r24, r24
    f79c:	ed 85       	ldd	r30, Y+13	; 0x0d
    f79e:	fe 85       	ldd	r31, Y+14	; 0x0e
    f7a0:	e0 5a       	subi	r30, 0xA0	; 160
    f7a2:	ff 4f       	sbci	r31, 0xFF	; 255
    f7a4:	20 81       	ld	r18, Z
    f7a6:	30 e0       	ldi	r19, 0x00	; 0
    f7a8:	40 e0       	ldi	r20, 0x00	; 0
    f7aa:	50 e0       	ldi	r21, 0x00	; 0
    f7ac:	a9 01       	movw	r20, r18
    f7ae:	33 27       	eor	r19, r19
    f7b0:	22 27       	eor	r18, r18
    f7b2:	82 2b       	or	r24, r18
    f7b4:	93 2b       	or	r25, r19
    f7b6:	a4 2b       	or	r26, r20
    f7b8:	b5 2b       	or	r27, r21
    f7ba:	ed 85       	ldd	r30, Y+13	; 0x0d
    f7bc:	fe 85       	ldd	r31, Y+14	; 0x0e
    f7be:	e2 5a       	subi	r30, 0xA2	; 162
    f7c0:	ff 4f       	sbci	r31, 0xFF	; 255
    f7c2:	20 81       	ld	r18, Z
    f7c4:	30 e0       	ldi	r19, 0x00	; 0
    f7c6:	40 e0       	ldi	r20, 0x00	; 0
    f7c8:	50 e0       	ldi	r21, 0x00	; 0
    f7ca:	82 2b       	or	r24, r18
    f7cc:	93 2b       	or	r25, r19
    f7ce:	a4 2b       	or	r26, r20
    f7d0:	b5 2b       	or	r27, r21
    f7d2:	ed 85       	ldd	r30, Y+13	; 0x0d
    f7d4:	fe 85       	ldd	r31, Y+14	; 0x0e
    f7d6:	e1 5a       	subi	r30, 0xA1	; 161
    f7d8:	ff 4f       	sbci	r31, 0xFF	; 255
    f7da:	30 81       	ld	r19, Z
    f7dc:	20 e0       	ldi	r18, 0x00	; 0
    f7de:	40 e0       	ldi	r20, 0x00	; 0
    f7e0:	50 e0       	ldi	r21, 0x00	; 0
    f7e2:	82 2b       	or	r24, r18
    f7e4:	93 2b       	or	r25, r19
    f7e6:	a4 2b       	or	r26, r20
    f7e8:	b5 2b       	or	r27, r21
    f7ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    f7ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    f7ee:	86 a3       	std	Z+38, r24	; 0x26
    f7f0:	97 a3       	std	Z+39, r25	; 0x27
    f7f2:	a0 a7       	std	Z+40, r26	; 0x28
    f7f4:	b1 a7       	std	Z+41, r27	; 0x29
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    f7f6:	d8 01       	movw	r26, r16
    f7f8:	c7 01       	movw	r24, r14
    f7fa:	52 e0       	ldi	r21, 0x02	; 2
    f7fc:	88 0f       	add	r24, r24
    f7fe:	99 1f       	adc	r25, r25
    f800:	aa 1f       	adc	r26, r26
    f802:	bb 1f       	adc	r27, r27
    f804:	5a 95       	dec	r21
    f806:	d1 f7       	brne	.-12     	; 0xf7fc <_ZL11chk_mountedPPKcPP5FATFSh+0x4d0>
    f808:	2d c0       	rjmp	.+90     	; 0xf864 <_ZL11chk_mountedPPKcPP5FATFSh+0x538>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    f80a:	41 14       	cp	r4, r1
    f80c:	51 04       	cpc	r5, r1
    f80e:	09 f4       	brne	.+2      	; 0xf812 <_ZL11chk_mountedPPKcPP5FATFSh+0x4e6>
    f810:	96 c1       	rjmp	.+812    	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    f812:	8d 81       	ldd	r24, Y+5	; 0x05
    f814:	9e 81       	ldd	r25, Y+6	; 0x06
    f816:	af 81       	ldd	r26, Y+7	; 0x07
    f818:	b8 85       	ldd	r27, Y+8	; 0x08
    f81a:	8a 0d       	add	r24, r10
    f81c:	9b 1d       	adc	r25, r11
    f81e:	ac 1d       	adc	r26, r12
    f820:	bd 1d       	adc	r27, r13
    f822:	ed 85       	ldd	r30, Y+13	; 0x0d
    f824:	fe 85       	ldd	r31, Y+14	; 0x0e
    f826:	86 a3       	std	Z+38, r24	; 0x26
    f828:	97 a3       	std	Z+39, r25	; 0x27
    f82a:	a0 a7       	std	Z+40, r26	; 0x28
    f82c:	b1 a7       	std	Z+41, r27	; 0x29
    f82e:	d8 01       	movw	r26, r16
    f830:	c7 01       	movw	r24, r14
    f832:	88 0f       	add	r24, r24
    f834:	99 1f       	adc	r25, r25
    f836:	aa 1f       	adc	r26, r26
    f838:	bb 1f       	adc	r27, r27
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    f83a:	f3 2d       	mov	r31, r3
    f83c:	f2 30       	cpi	r31, 0x02	; 2
    f83e:	91 f0       	breq	.+36     	; 0xf864 <_ZL11chk_mountedPPKcPP5FATFSh+0x538>
    f840:	8e 0d       	add	r24, r14
    f842:	9f 1d       	adc	r25, r15
    f844:	a0 1f       	adc	r26, r16
    f846:	b1 1f       	adc	r27, r17
    f848:	b6 95       	lsr	r27
    f84a:	a7 95       	ror	r26
    f84c:	97 95       	ror	r25
    f84e:	87 95       	ror	r24
    f850:	a8 01       	movw	r20, r16
    f852:	97 01       	movw	r18, r14
    f854:	21 70       	andi	r18, 0x01	; 1
    f856:	30 70       	andi	r19, 0x00	; 0
    f858:	40 70       	andi	r20, 0x00	; 0
    f85a:	50 70       	andi	r21, 0x00	; 0
    f85c:	82 0f       	add	r24, r18
    f85e:	93 1f       	adc	r25, r19
    f860:	a4 1f       	adc	r26, r20
    f862:	b5 1f       	adc	r27, r21
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
    f864:	81 50       	subi	r24, 0x01	; 1
    f866:	9e 4f       	sbci	r25, 0xFE	; 254
    f868:	af 4f       	sbci	r26, 0xFF	; 255
    f86a:	bf 4f       	sbci	r27, 0xFF	; 255
    f86c:	29 e0       	ldi	r18, 0x09	; 9
    f86e:	b6 95       	lsr	r27
    f870:	a7 95       	ror	r26
    f872:	97 95       	ror	r25
    f874:	87 95       	ror	r24
    f876:	2a 95       	dec	r18
    f878:	d1 f7       	brne	.-12     	; 0xf86e <_ZL11chk_mountedPPKcPP5FATFSh+0x542>
    f87a:	68 16       	cp	r6, r24
    f87c:	79 06       	cpc	r7, r25
    f87e:	8a 06       	cpc	r8, r26
    f880:	9b 06       	cpc	r9, r27
    f882:	08 f4       	brcc	.+2      	; 0xf886 <_ZL11chk_mountedPPKcPP5FATFSh+0x55a>
    f884:	5c c1       	rjmp	.+696    	; 0xfb3e <_ZL11chk_mountedPPKcPP5FATFSh+0x812>
		return FR_NO_FILESYSTEM;

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    f886:	8f ef       	ldi	r24, 0xFF	; 255
    f888:	9f ef       	ldi	r25, 0xFF	; 255
    f88a:	dc 01       	movw	r26, r24
    f88c:	ed 85       	ldd	r30, Y+13	; 0x0d
    f88e:	fe 85       	ldd	r31, Y+14	; 0x0e
    f890:	86 87       	std	Z+14, r24	; 0x0e
    f892:	97 87       	std	Z+15, r25	; 0x0f
    f894:	a0 8b       	std	Z+16, r26	; 0x10
    f896:	b1 8b       	std	Z+17, r27	; 0x11
	fs->last_clust = 0;
    f898:	12 86       	std	Z+10, r1	; 0x0a
    f89a:	13 86       	std	Z+11, r1	; 0x0b
    f89c:	14 86       	std	Z+12, r1	; 0x0c
    f89e:	15 86       	std	Z+13, r1	; 0x0d

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    f8a0:	b3 2d       	mov	r27, r3
    f8a2:	b3 30       	cpi	r27, 0x03	; 3
    f8a4:	09 f0       	breq	.+2      	; 0xf8a8 <_ZL11chk_mountedPPKcPP5FATFSh+0x57c>
    f8a6:	19 c1       	rjmp	.+562    	; 0xfada <_ZL11chk_mountedPPKcPP5FATFSh+0x7ae>
	 	fs->fsi_flag = 0;
    f8a8:	15 82       	std	Z+5, r1	; 0x05
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    f8aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    f8ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    f8ae:	ed 59       	subi	r30, 0x9D	; 157
    f8b0:	ff 4f       	sbci	r31, 0xFF	; 255
    f8b2:	90 81       	ld	r25, Z
    f8b4:	80 e0       	ldi	r24, 0x00	; 0
    f8b6:	ed 85       	ldd	r30, Y+13	; 0x0d
    f8b8:	fe 85       	ldd	r31, Y+14	; 0x0e
    f8ba:	ee 59       	subi	r30, 0x9E	; 158
    f8bc:	ff 4f       	sbci	r31, 0xFF	; 255
    f8be:	20 81       	ld	r18, Z
    f8c0:	30 e0       	ldi	r19, 0x00	; 0
    f8c2:	28 2b       	or	r18, r24
    f8c4:	39 2b       	or	r19, r25
    f8c6:	40 e0       	ldi	r20, 0x00	; 0
    f8c8:	50 e0       	ldi	r21, 0x00	; 0
    f8ca:	89 81       	ldd	r24, Y+1	; 0x01
    f8cc:	9a 81       	ldd	r25, Y+2	; 0x02
    f8ce:	ab 81       	ldd	r26, Y+3	; 0x03
    f8d0:	bc 81       	ldd	r27, Y+4	; 0x04
    f8d2:	28 0f       	add	r18, r24
    f8d4:	39 1f       	adc	r19, r25
    f8d6:	4a 1f       	adc	r20, r26
    f8d8:	5b 1f       	adc	r21, r27
    f8da:	ad 85       	ldd	r26, Y+13	; 0x0d
    f8dc:	be 85       	ldd	r27, Y+14	; 0x0e
    f8de:	52 96       	adiw	r26, 0x12	; 18
    f8e0:	2d 93       	st	X+, r18
    f8e2:	3d 93       	st	X+, r19
    f8e4:	4d 93       	st	X+, r20
    f8e6:	5c 93       	st	X, r21
    f8e8:	55 97       	sbiw	r26, 0x15	; 21
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    f8ea:	bd 01       	movw	r22, r26
    f8ec:	6e 5c       	subi	r22, 0xCE	; 206
    f8ee:	7f 4f       	sbci	r23, 0xFF	; 255
    f8f0:	11 96       	adiw	r26, 0x01	; 1
    f8f2:	8c 91       	ld	r24, X
    f8f4:	01 e0       	ldi	r16, 0x01	; 1
    f8f6:	0e 94 f1 9f 	call	0x13fe2	; 0x13fe2 <_Z9disk_readhPhmh>
    f8fa:	00 97       	sbiw	r24, 0x00	; 0
    f8fc:	09 f0       	breq	.+2      	; 0xf900 <_ZL11chk_mountedPPKcPP5FATFSh+0x5d4>
    f8fe:	ed c0       	rjmp	.+474    	; 0xfada <_ZL11chk_mountedPPKcPP5FATFSh+0x7ae>
    f900:	ed 85       	ldd	r30, Y+13	; 0x0d
    f902:	fe 85       	ldd	r31, Y+14	; 0x0e
    f904:	ef 5c       	subi	r30, 0xCF	; 207
    f906:	fd 4f       	sbci	r31, 0xFD	; 253
    f908:	30 81       	ld	r19, Z
    f90a:	20 e0       	ldi	r18, 0x00	; 0
    f90c:	ed 85       	ldd	r30, Y+13	; 0x0d
    f90e:	fe 85       	ldd	r31, Y+14	; 0x0e
    f910:	e0 5d       	subi	r30, 0xD0	; 208
    f912:	fd 4f       	sbci	r31, 0xFD	; 253
    f914:	80 81       	ld	r24, Z
    f916:	90 e0       	ldi	r25, 0x00	; 0
    f918:	82 2b       	or	r24, r18
    f91a:	93 2b       	or	r25, r19
    f91c:	ba ea       	ldi	r27, 0xAA	; 170
    f91e:	85 35       	cpi	r24, 0x55	; 85
    f920:	9b 07       	cpc	r25, r27
    f922:	09 f0       	breq	.+2      	; 0xf926 <_ZL11chk_mountedPPKcPP5FATFSh+0x5fa>
    f924:	da c0       	rjmp	.+436    	; 0xfada <_ZL11chk_mountedPPKcPP5FATFSh+0x7ae>
    f926:	ed 85       	ldd	r30, Y+13	; 0x0d
    f928:	fe 85       	ldd	r31, Y+14	; 0x0e
    f92a:	85 a9       	ldd	r24, Z+53	; 0x35
    f92c:	90 e0       	ldi	r25, 0x00	; 0
    f92e:	a0 e0       	ldi	r26, 0x00	; 0
    f930:	b0 e0       	ldi	r27, 0x00	; 0
    f932:	b8 2f       	mov	r27, r24
    f934:	aa 27       	eor	r26, r26
    f936:	99 27       	eor	r25, r25
    f938:	88 27       	eor	r24, r24
    f93a:	24 a9       	ldd	r18, Z+52	; 0x34
    f93c:	30 e0       	ldi	r19, 0x00	; 0
    f93e:	40 e0       	ldi	r20, 0x00	; 0
    f940:	50 e0       	ldi	r21, 0x00	; 0
    f942:	a9 01       	movw	r20, r18
    f944:	33 27       	eor	r19, r19
    f946:	22 27       	eor	r18, r18
    f948:	82 2b       	or	r24, r18
    f94a:	93 2b       	or	r25, r19
    f94c:	a4 2b       	or	r26, r20
    f94e:	b5 2b       	or	r27, r21
    f950:	22 a9       	ldd	r18, Z+50	; 0x32
    f952:	30 e0       	ldi	r19, 0x00	; 0
    f954:	40 e0       	ldi	r20, 0x00	; 0
    f956:	50 e0       	ldi	r21, 0x00	; 0
    f958:	82 2b       	or	r24, r18
    f95a:	93 2b       	or	r25, r19
    f95c:	a4 2b       	or	r26, r20
    f95e:	b5 2b       	or	r27, r21
    f960:	33 a9       	ldd	r19, Z+51	; 0x33
    f962:	20 e0       	ldi	r18, 0x00	; 0
    f964:	40 e0       	ldi	r20, 0x00	; 0
    f966:	50 e0       	ldi	r21, 0x00	; 0
    f968:	82 2b       	or	r24, r18
    f96a:	93 2b       	or	r25, r19
    f96c:	a4 2b       	or	r26, r20
    f96e:	b5 2b       	or	r27, r21
    f970:	82 35       	cpi	r24, 0x52	; 82
    f972:	f2 e5       	ldi	r31, 0x52	; 82
    f974:	9f 07       	cpc	r25, r31
    f976:	f1 e6       	ldi	r31, 0x61	; 97
    f978:	af 07       	cpc	r26, r31
    f97a:	f1 e4       	ldi	r31, 0x41	; 65
    f97c:	bf 07       	cpc	r27, r31
    f97e:	09 f0       	breq	.+2      	; 0xf982 <_ZL11chk_mountedPPKcPP5FATFSh+0x656>
    f980:	ac c0       	rjmp	.+344    	; 0xfada <_ZL11chk_mountedPPKcPP5FATFSh+0x7ae>
    f982:	ed 85       	ldd	r30, Y+13	; 0x0d
    f984:	fe 85       	ldd	r31, Y+14	; 0x0e
    f986:	e7 5e       	subi	r30, 0xE7	; 231
    f988:	fd 4f       	sbci	r31, 0xFD	; 253
    f98a:	80 81       	ld	r24, Z
    f98c:	90 e0       	ldi	r25, 0x00	; 0
    f98e:	a0 e0       	ldi	r26, 0x00	; 0
    f990:	b0 e0       	ldi	r27, 0x00	; 0
    f992:	b8 2f       	mov	r27, r24
    f994:	aa 27       	eor	r26, r26
    f996:	99 27       	eor	r25, r25
    f998:	88 27       	eor	r24, r24
    f99a:	ed 85       	ldd	r30, Y+13	; 0x0d
    f99c:	fe 85       	ldd	r31, Y+14	; 0x0e
    f99e:	e8 5e       	subi	r30, 0xE8	; 232
    f9a0:	fd 4f       	sbci	r31, 0xFD	; 253
    f9a2:	20 81       	ld	r18, Z
    f9a4:	30 e0       	ldi	r19, 0x00	; 0
    f9a6:	40 e0       	ldi	r20, 0x00	; 0
    f9a8:	50 e0       	ldi	r21, 0x00	; 0
    f9aa:	a9 01       	movw	r20, r18
    f9ac:	33 27       	eor	r19, r19
    f9ae:	22 27       	eor	r18, r18
    f9b0:	82 2b       	or	r24, r18
    f9b2:	93 2b       	or	r25, r19
    f9b4:	a4 2b       	or	r26, r20
    f9b6:	b5 2b       	or	r27, r21
    f9b8:	ed 85       	ldd	r30, Y+13	; 0x0d
    f9ba:	fe 85       	ldd	r31, Y+14	; 0x0e
    f9bc:	ea 5e       	subi	r30, 0xEA	; 234
    f9be:	fd 4f       	sbci	r31, 0xFD	; 253
    f9c0:	20 81       	ld	r18, Z
    f9c2:	30 e0       	ldi	r19, 0x00	; 0
    f9c4:	40 e0       	ldi	r20, 0x00	; 0
    f9c6:	50 e0       	ldi	r21, 0x00	; 0
    f9c8:	82 2b       	or	r24, r18
    f9ca:	93 2b       	or	r25, r19
    f9cc:	a4 2b       	or	r26, r20
    f9ce:	b5 2b       	or	r27, r21
    f9d0:	ed 85       	ldd	r30, Y+13	; 0x0d
    f9d2:	fe 85       	ldd	r31, Y+14	; 0x0e
    f9d4:	e9 5e       	subi	r30, 0xE9	; 233
    f9d6:	fd 4f       	sbci	r31, 0xFD	; 253
    f9d8:	30 81       	ld	r19, Z
    f9da:	20 e0       	ldi	r18, 0x00	; 0
    f9dc:	40 e0       	ldi	r20, 0x00	; 0
    f9de:	50 e0       	ldi	r21, 0x00	; 0
    f9e0:	82 2b       	or	r24, r18
    f9e2:	93 2b       	or	r25, r19
    f9e4:	a4 2b       	or	r26, r20
    f9e6:	b5 2b       	or	r27, r21
    f9e8:	82 37       	cpi	r24, 0x72	; 114
    f9ea:	22 e7       	ldi	r18, 0x72	; 114
    f9ec:	92 07       	cpc	r25, r18
    f9ee:	21 e4       	ldi	r18, 0x41	; 65
    f9f0:	a2 07       	cpc	r26, r18
    f9f2:	21 e6       	ldi	r18, 0x61	; 97
    f9f4:	b2 07       	cpc	r27, r18
    f9f6:	09 f0       	breq	.+2      	; 0xf9fa <_ZL11chk_mountedPPKcPP5FATFSh+0x6ce>
    f9f8:	70 c0       	rjmp	.+224    	; 0xfada <_ZL11chk_mountedPPKcPP5FATFSh+0x7ae>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    f9fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    f9fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    f9fe:	ef 5d       	subi	r30, 0xDF	; 223
    fa00:	fd 4f       	sbci	r31, 0xFD	; 253
    fa02:	80 81       	ld	r24, Z
    fa04:	90 e0       	ldi	r25, 0x00	; 0
    fa06:	a0 e0       	ldi	r26, 0x00	; 0
    fa08:	b0 e0       	ldi	r27, 0x00	; 0
    fa0a:	b8 2f       	mov	r27, r24
    fa0c:	aa 27       	eor	r26, r26
    fa0e:	99 27       	eor	r25, r25
    fa10:	88 27       	eor	r24, r24
    fa12:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa14:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa16:	e0 5e       	subi	r30, 0xE0	; 224
    fa18:	fd 4f       	sbci	r31, 0xFD	; 253
    fa1a:	20 81       	ld	r18, Z
    fa1c:	30 e0       	ldi	r19, 0x00	; 0
    fa1e:	40 e0       	ldi	r20, 0x00	; 0
    fa20:	50 e0       	ldi	r21, 0x00	; 0
    fa22:	a9 01       	movw	r20, r18
    fa24:	33 27       	eor	r19, r19
    fa26:	22 27       	eor	r18, r18
    fa28:	82 2b       	or	r24, r18
    fa2a:	93 2b       	or	r25, r19
    fa2c:	a4 2b       	or	r26, r20
    fa2e:	b5 2b       	or	r27, r21
    fa30:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa32:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa34:	e2 5e       	subi	r30, 0xE2	; 226
    fa36:	fd 4f       	sbci	r31, 0xFD	; 253
    fa38:	20 81       	ld	r18, Z
    fa3a:	30 e0       	ldi	r19, 0x00	; 0
    fa3c:	40 e0       	ldi	r20, 0x00	; 0
    fa3e:	50 e0       	ldi	r21, 0x00	; 0
    fa40:	82 2b       	or	r24, r18
    fa42:	93 2b       	or	r25, r19
    fa44:	a4 2b       	or	r26, r20
    fa46:	b5 2b       	or	r27, r21
    fa48:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa4a:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa4c:	e1 5e       	subi	r30, 0xE1	; 225
    fa4e:	fd 4f       	sbci	r31, 0xFD	; 253
    fa50:	30 81       	ld	r19, Z
    fa52:	20 e0       	ldi	r18, 0x00	; 0
    fa54:	40 e0       	ldi	r20, 0x00	; 0
    fa56:	50 e0       	ldi	r21, 0x00	; 0
    fa58:	82 2b       	or	r24, r18
    fa5a:	93 2b       	or	r25, r19
    fa5c:	a4 2b       	or	r26, r20
    fa5e:	b5 2b       	or	r27, r21
    fa60:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa62:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa64:	82 87       	std	Z+10, r24	; 0x0a
    fa66:	93 87       	std	Z+11, r25	; 0x0b
    fa68:	a4 87       	std	Z+12, r26	; 0x0c
    fa6a:	b5 87       	std	Z+13, r27	; 0x0d
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    fa6c:	e3 5e       	subi	r30, 0xE3	; 227
    fa6e:	fd 4f       	sbci	r31, 0xFD	; 253
    fa70:	80 81       	ld	r24, Z
    fa72:	90 e0       	ldi	r25, 0x00	; 0
    fa74:	a0 e0       	ldi	r26, 0x00	; 0
    fa76:	b0 e0       	ldi	r27, 0x00	; 0
    fa78:	b8 2f       	mov	r27, r24
    fa7a:	aa 27       	eor	r26, r26
    fa7c:	99 27       	eor	r25, r25
    fa7e:	88 27       	eor	r24, r24
    fa80:	ed 85       	ldd	r30, Y+13	; 0x0d
    fa82:	fe 85       	ldd	r31, Y+14	; 0x0e
    fa84:	e4 5e       	subi	r30, 0xE4	; 228
    fa86:	fd 4f       	sbci	r31, 0xFD	; 253
    fa88:	20 81       	ld	r18, Z
    fa8a:	30 e0       	ldi	r19, 0x00	; 0
    fa8c:	40 e0       	ldi	r20, 0x00	; 0
    fa8e:	50 e0       	ldi	r21, 0x00	; 0
    fa90:	a9 01       	movw	r20, r18
    fa92:	33 27       	eor	r19, r19
    fa94:	22 27       	eor	r18, r18
    fa96:	82 2b       	or	r24, r18
    fa98:	93 2b       	or	r25, r19
    fa9a:	a4 2b       	or	r26, r20
    fa9c:	b5 2b       	or	r27, r21
    fa9e:	ed 85       	ldd	r30, Y+13	; 0x0d
    faa0:	fe 85       	ldd	r31, Y+14	; 0x0e
    faa2:	e6 5e       	subi	r30, 0xE6	; 230
    faa4:	fd 4f       	sbci	r31, 0xFD	; 253
    faa6:	20 81       	ld	r18, Z
    faa8:	30 e0       	ldi	r19, 0x00	; 0
    faaa:	40 e0       	ldi	r20, 0x00	; 0
    faac:	50 e0       	ldi	r21, 0x00	; 0
    faae:	82 2b       	or	r24, r18
    fab0:	93 2b       	or	r25, r19
    fab2:	a4 2b       	or	r26, r20
    fab4:	b5 2b       	or	r27, r21
    fab6:	ed 85       	ldd	r30, Y+13	; 0x0d
    fab8:	fe 85       	ldd	r31, Y+14	; 0x0e
    faba:	e5 5e       	subi	r30, 0xE5	; 229
    fabc:	fd 4f       	sbci	r31, 0xFD	; 253
    fabe:	30 81       	ld	r19, Z
    fac0:	20 e0       	ldi	r18, 0x00	; 0
    fac2:	40 e0       	ldi	r20, 0x00	; 0
    fac4:	50 e0       	ldi	r21, 0x00	; 0
    fac6:	82 2b       	or	r24, r18
    fac8:	93 2b       	or	r25, r19
    faca:	a4 2b       	or	r26, r20
    facc:	b5 2b       	or	r27, r21
    face:	ed 85       	ldd	r30, Y+13	; 0x0d
    fad0:	fe 85       	ldd	r31, Y+14	; 0x0e
    fad2:	86 87       	std	Z+14, r24	; 0x0e
    fad4:	97 87       	std	Z+15, r25	; 0x0f
    fad6:	a0 8b       	std	Z+16, r26	; 0x10
    fad8:	b1 8b       	std	Z+17, r27	; 0x11
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    fada:	ad 85       	ldd	r26, Y+13	; 0x0d
    fadc:	be 85       	ldd	r27, Y+14	; 0x0e
    fade:	3c 92       	st	X, r3
	fs->id = ++Fsid;		/* File system mount ID */
    fae0:	80 91 3e 1f 	lds	r24, 0x1F3E
    fae4:	90 91 3f 1f 	lds	r25, 0x1F3F
    fae8:	01 96       	adiw	r24, 0x01	; 1
    faea:	90 93 3f 1f 	sts	0x1F3F, r25
    faee:	80 93 3e 1f 	sts	0x1F3E, r24
    faf2:	17 96       	adiw	r26, 0x07	; 7
    faf4:	9c 93       	st	X, r25
    faf6:	8e 93       	st	-X, r24
    faf8:	16 97       	sbiw	r26, 0x06	; 6
	fs->winsect = 0;		/* Invalidate sector cache */
    fafa:	ed 85       	ldd	r30, Y+13	; 0x0d
    fafc:	fe 85       	ldd	r31, Y+14	; 0x0e
    fafe:	16 a6       	std	Z+46, r1	; 0x2e
    fb00:	17 a6       	std	Z+47, r1	; 0x2f
    fb02:	10 aa       	std	Z+48, r1	; 0x30
    fb04:	11 aa       	std	Z+49, r1	; 0x31
	fs->wflag = 0;
    fb06:	14 82       	std	Z+4, r1	; 0x04
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
    fb08:	ad 85       	ldd	r26, Y+13	; 0x0d
    fb0a:	be 85       	ldd	r27, Y+14	; 0x0e
    fb0c:	56 96       	adiw	r26, 0x16	; 22
    fb0e:	1d 92       	st	X+, r1
    fb10:	1d 92       	st	X+, r1
    fb12:	1d 92       	st	X+, r1
    fb14:	1c 92       	st	X, r1
    fb16:	59 97       	sbiw	r26, 0x19	; 25
    fb18:	06 c0       	rjmp	.+12     	; 0xfb26 <_ZL11chk_mountedPPKcPP5FATFSh+0x7fa>
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
    fb1a:	2b e0       	ldi	r18, 0x0B	; 11
    fb1c:	30 e0       	ldi	r19, 0x00	; 0
    fb1e:	11 c0       	rjmp	.+34     	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    fb20:	2c e0       	ldi	r18, 0x0C	; 12
    fb22:	30 e0       	ldi	r19, 0x00	; 0
    fb24:	0e c0       	rjmp	.+28     	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;				/* The file system object is valid */
    fb26:	20 e0       	ldi	r18, 0x00	; 0
    fb28:	30 e0       	ldi	r19, 0x00	; 0
    fb2a:	0b c0       	rjmp	.+22     	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    fb2c:	23 e0       	ldi	r18, 0x03	; 3
    fb2e:	30 e0       	ldi	r19, 0x00	; 0
    fb30:	08 c0       	rjmp	.+16     	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    fb32:	2a e0       	ldi	r18, 0x0A	; 10
    fb34:	30 e0       	ldi	r19, 0x00	; 0
    fb36:	05 c0       	rjmp	.+10     	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    fb38:	21 e0       	ldi	r18, 0x01	; 1
    fb3a:	30 e0       	ldi	r19, 0x00	; 0
    fb3c:	02 c0       	rjmp	.+4      	; 0xfb42 <_ZL11chk_mountedPPKcPP5FATFSh+0x816>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors */
		return FR_NO_FILESYSTEM;
    fb3e:	2d e0       	ldi	r18, 0x0D	; 13
    fb40:	30 e0       	ldi	r19, 0x00	; 0
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
    fb42:	c9 01       	movw	r24, r18
    fb44:	2e 96       	adiw	r28, 0x0e	; 14
    fb46:	0f b6       	in	r0, 0x3f	; 63
    fb48:	f8 94       	cli
    fb4a:	de bf       	out	0x3e, r29	; 62
    fb4c:	0f be       	out	0x3f, r0	; 63
    fb4e:	cd bf       	out	0x3d, r28	; 61
    fb50:	cf 91       	pop	r28
    fb52:	df 91       	pop	r29
    fb54:	1f 91       	pop	r17
    fb56:	0f 91       	pop	r16
    fb58:	ff 90       	pop	r15
    fb5a:	ef 90       	pop	r14
    fb5c:	df 90       	pop	r13
    fb5e:	cf 90       	pop	r12
    fb60:	bf 90       	pop	r11
    fb62:	af 90       	pop	r10
    fb64:	9f 90       	pop	r9
    fb66:	8f 90       	pop	r8
    fb68:	7f 90       	pop	r7
    fb6a:	6f 90       	pop	r6
    fb6c:	5f 90       	pop	r5
    fb6e:	4f 90       	pop	r4
    fb70:	3f 90       	pop	r3
    fb72:	08 95       	ret

0000fb74 <_ZL11move_windowP5FATFSm>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    fb74:	6f 92       	push	r6
    fb76:	7f 92       	push	r7
    fb78:	8f 92       	push	r8
    fb7a:	9f 92       	push	r9
    fb7c:	af 92       	push	r10
    fb7e:	bf 92       	push	r11
    fb80:	cf 92       	push	r12
    fb82:	df 92       	push	r13
    fb84:	ef 92       	push	r14
    fb86:	ff 92       	push	r15
    fb88:	0f 93       	push	r16
    fb8a:	1f 93       	push	r17
    fb8c:	cf 93       	push	r28
    fb8e:	df 93       	push	r29
    fb90:	ec 01       	movw	r28, r24
    fb92:	4a 01       	movw	r8, r20
    fb94:	5b 01       	movw	r10, r22
	DWORD wsect;


	wsect = fs->winsect;
    fb96:	ce a4       	ldd	r12, Y+46	; 0x2e
    fb98:	df a4       	ldd	r13, Y+47	; 0x2f
    fb9a:	e8 a8       	ldd	r14, Y+48	; 0x30
    fb9c:	f9 a8       	ldd	r15, Y+49	; 0x31
	if (wsect != sector) {	/* Changed current window */
    fb9e:	c4 16       	cp	r12, r20
    fba0:	d5 06       	cpc	r13, r21
    fba2:	e6 06       	cpc	r14, r22
    fba4:	f7 06       	cpc	r15, r23
    fba6:	09 f4       	brne	.+2      	; 0xfbaa <_ZL11move_windowP5FATFSm+0x36>
    fba8:	4b c0       	rjmp	.+150    	; 0xfc40 <_ZL11move_windowP5FATFSm+0xcc>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    fbaa:	8c 81       	ldd	r24, Y+4	; 0x04
    fbac:	88 23       	and	r24, r24
    fbae:	a1 f1       	breq	.+104    	; 0xfc18 <_ZL11move_windowP5FATFSm+0xa4>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    fbb0:	f2 e3       	ldi	r31, 0x32	; 50
    fbb2:	6f 2e       	mov	r6, r31
    fbb4:	71 2c       	mov	r7, r1
    fbb6:	6c 0e       	add	r6, r28
    fbb8:	7d 1e       	adc	r7, r29
    fbba:	89 81       	ldd	r24, Y+1	; 0x01
    fbbc:	b3 01       	movw	r22, r6
    fbbe:	a7 01       	movw	r20, r14
    fbc0:	96 01       	movw	r18, r12
    fbc2:	01 e0       	ldi	r16, 0x01	; 1
    fbc4:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
    fbc8:	00 97       	sbiw	r24, 0x00	; 0
    fbca:	e9 f5       	brne	.+122    	; 0xfc46 <_ZL11move_windowP5FATFSm+0xd2>
				return FR_DISK_ERR;
			fs->wflag = 0;
    fbcc:	1c 82       	std	Y+4, r1	; 0x04
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    fbce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fbd0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fbd2:	a8 a1       	ldd	r26, Y+32	; 0x20
    fbd4:	b9 a1       	ldd	r27, Y+33	; 0x21
    fbd6:	2a a1       	ldd	r18, Y+34	; 0x22
    fbd8:	3b a1       	ldd	r19, Y+35	; 0x23
    fbda:	4c a1       	ldd	r20, Y+36	; 0x24
    fbdc:	5d a1       	ldd	r21, Y+37	; 0x25
    fbde:	82 0f       	add	r24, r18
    fbe0:	93 1f       	adc	r25, r19
    fbe2:	a4 1f       	adc	r26, r20
    fbe4:	b5 1f       	adc	r27, r21
    fbe6:	c8 16       	cp	r12, r24
    fbe8:	d9 06       	cpc	r13, r25
    fbea:	ea 06       	cpc	r14, r26
    fbec:	fb 06       	cpc	r15, r27
    fbee:	a0 f4       	brcc	.+40     	; 0xfc18 <_ZL11move_windowP5FATFSm+0xa4>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    fbf0:	1b 81       	ldd	r17, Y+3	; 0x03
    fbf2:	10 c0       	rjmp	.+32     	; 0xfc14 <_ZL11move_windowP5FATFSm+0xa0>
					wsect += fs->fsize;
    fbf4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    fbf6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    fbf8:	a8 a1       	ldd	r26, Y+32	; 0x20
    fbfa:	b9 a1       	ldd	r27, Y+33	; 0x21
    fbfc:	c8 0e       	add	r12, r24
    fbfe:	d9 1e       	adc	r13, r25
    fc00:	ea 1e       	adc	r14, r26
    fc02:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    fc04:	89 81       	ldd	r24, Y+1	; 0x01
    fc06:	b3 01       	movw	r22, r6
    fc08:	a7 01       	movw	r20, r14
    fc0a:	96 01       	movw	r18, r12
    fc0c:	01 e0       	ldi	r16, 0x01	; 1
    fc0e:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    fc12:	11 50       	subi	r17, 0x01	; 1
    fc14:	12 30       	cpi	r17, 0x02	; 2
    fc16:	70 f7       	brcc	.-36     	; 0xfbf4 <_ZL11move_windowP5FATFSm+0x80>
					disk_write(fs->drv, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
    fc18:	81 14       	cp	r8, r1
    fc1a:	91 04       	cpc	r9, r1
    fc1c:	a1 04       	cpc	r10, r1
    fc1e:	b1 04       	cpc	r11, r1
    fc20:	79 f0       	breq	.+30     	; 0xfc40 <_ZL11move_windowP5FATFSm+0xcc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    fc22:	be 01       	movw	r22, r28
    fc24:	6e 5c       	subi	r22, 0xCE	; 206
    fc26:	7f 4f       	sbci	r23, 0xFF	; 255
    fc28:	89 81       	ldd	r24, Y+1	; 0x01
    fc2a:	a5 01       	movw	r20, r10
    fc2c:	94 01       	movw	r18, r8
    fc2e:	01 e0       	ldi	r16, 0x01	; 1
    fc30:	0e 94 f1 9f 	call	0x13fe2	; 0x13fe2 <_Z9disk_readhPhmh>
    fc34:	00 97       	sbiw	r24, 0x00	; 0
    fc36:	39 f4       	brne	.+14     	; 0xfc46 <_ZL11move_windowP5FATFSm+0xd2>
				return FR_DISK_ERR;
			fs->winsect = sector;
    fc38:	8e a6       	std	Y+46, r8	; 0x2e
    fc3a:	9f a6       	std	Y+47, r9	; 0x2f
    fc3c:	a8 aa       	std	Y+48, r10	; 0x30
    fc3e:	b9 aa       	std	Y+49, r11	; 0x31
		}
	}

	return FR_OK;
    fc40:	20 e0       	ldi	r18, 0x00	; 0
    fc42:	30 e0       	ldi	r19, 0x00	; 0
    fc44:	02 c0       	rjmp	.+4      	; 0xfc4a <_ZL11move_windowP5FATFSm+0xd6>
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
    fc46:	21 e0       	ldi	r18, 0x01	; 1
    fc48:	30 e0       	ldi	r19, 0x00	; 0
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
    fc4a:	c9 01       	movw	r24, r18
    fc4c:	df 91       	pop	r29
    fc4e:	cf 91       	pop	r28
    fc50:	1f 91       	pop	r17
    fc52:	0f 91       	pop	r16
    fc54:	ff 90       	pop	r15
    fc56:	ef 90       	pop	r14
    fc58:	df 90       	pop	r13
    fc5a:	cf 90       	pop	r12
    fc5c:	bf 90       	pop	r11
    fc5e:	af 90       	pop	r10
    fc60:	9f 90       	pop	r9
    fc62:	8f 90       	pop	r8
    fc64:	7f 90       	pop	r7
    fc66:	6f 90       	pop	r6
    fc68:	08 95       	ret

0000fc6a <_ZL4syncP5FATFS>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    fc6a:	0f 93       	push	r16
    fc6c:	1f 93       	push	r17
    fc6e:	cf 93       	push	r28
    fc70:	df 93       	push	r29
    fc72:	ec 01       	movw	r28, r24
	FRESULT res;


	res = move_window(fs, 0);
    fc74:	40 e0       	ldi	r20, 0x00	; 0
    fc76:	50 e0       	ldi	r21, 0x00	; 0
    fc78:	ba 01       	movw	r22, r20
    fc7a:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
    fc7e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    fc80:	00 97       	sbiw	r24, 0x00	; 0
    fc82:	09 f0       	breq	.+2      	; 0xfc86 <_ZL4syncP5FATFS+0x1c>
    fc84:	76 c0       	rjmp	.+236    	; 0xfd72 <_ZL4syncP5FATFS+0x108>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    fc86:	88 81       	ld	r24, Y
    fc88:	83 30       	cpi	r24, 0x03	; 3
    fc8a:	09 f0       	breq	.+2      	; 0xfc8e <_ZL4syncP5FATFS+0x24>
    fc8c:	66 c0       	rjmp	.+204    	; 0xfd5a <_ZL4syncP5FATFS+0xf0>
    fc8e:	8d 81       	ldd	r24, Y+5	; 0x05
    fc90:	88 23       	and	r24, r24
    fc92:	09 f4       	brne	.+2      	; 0xfc96 <_ZL4syncP5FATFS+0x2c>
    fc94:	62 c0       	rjmp	.+196    	; 0xfd5a <_ZL4syncP5FATFS+0xf0>
			fs->winsect = 0;
    fc96:	1e a6       	std	Y+46, r1	; 0x2e
    fc98:	1f a6       	std	Y+47, r1	; 0x2f
    fc9a:	18 aa       	std	Y+48, r1	; 0x30
    fc9c:	19 aa       	std	Y+49, r1	; 0x31
			mem_set(fs->win, 0, 512);
    fc9e:	8e 01       	movw	r16, r28
    fca0:	0e 5c       	subi	r16, 0xCE	; 206
    fca2:	1f 4f       	sbci	r17, 0xFF	; 255
    fca4:	c8 01       	movw	r24, r16
    fca6:	60 e0       	ldi	r22, 0x00	; 0
    fca8:	70 e0       	ldi	r23, 0x00	; 0
    fcaa:	40 e0       	ldi	r20, 0x00	; 0
    fcac:	52 e0       	ldi	r21, 0x02	; 2
    fcae:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    fcb2:	fe 01       	movw	r30, r28
    fcb4:	e0 5d       	subi	r30, 0xD0	; 208
    fcb6:	fd 4f       	sbci	r31, 0xFD	; 253
    fcb8:	85 e5       	ldi	r24, 0x55	; 85
    fcba:	80 83       	st	Z, r24
    fcbc:	fe 01       	movw	r30, r28
    fcbe:	ef 5c       	subi	r30, 0xCF	; 207
    fcc0:	fd 4f       	sbci	r31, 0xFD	; 253
    fcc2:	8a ea       	ldi	r24, 0xAA	; 170
    fcc4:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    fcc6:	82 e5       	ldi	r24, 0x52	; 82
    fcc8:	8a ab       	std	Y+50, r24	; 0x32
    fcca:	8b ab       	std	Y+51, r24	; 0x33
    fccc:	81 e6       	ldi	r24, 0x61	; 97
    fcce:	8c ab       	std	Y+52, r24	; 0x34
    fcd0:	91 e4       	ldi	r25, 0x41	; 65
    fcd2:	9d ab       	std	Y+53, r25	; 0x35
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    fcd4:	fe 01       	movw	r30, r28
    fcd6:	ea 5e       	subi	r30, 0xEA	; 234
    fcd8:	fd 4f       	sbci	r31, 0xFD	; 253
    fcda:	22 e7       	ldi	r18, 0x72	; 114
    fcdc:	20 83       	st	Z, r18
    fcde:	fe 01       	movw	r30, r28
    fce0:	e9 5e       	subi	r30, 0xE9	; 233
    fce2:	fd 4f       	sbci	r31, 0xFD	; 253
    fce4:	20 83       	st	Z, r18
    fce6:	fe 01       	movw	r30, r28
    fce8:	e8 5e       	subi	r30, 0xE8	; 232
    fcea:	fd 4f       	sbci	r31, 0xFD	; 253
    fcec:	90 83       	st	Z, r25
    fcee:	fe 01       	movw	r30, r28
    fcf0:	e7 5e       	subi	r30, 0xE7	; 231
    fcf2:	fd 4f       	sbci	r31, 0xFD	; 253
    fcf4:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    fcf6:	3e 85       	ldd	r19, Y+14	; 0x0e
    fcf8:	2f 85       	ldd	r18, Y+15	; 0x0f
    fcfa:	98 89       	ldd	r25, Y+16	; 0x10
    fcfc:	89 89       	ldd	r24, Y+17	; 0x11
    fcfe:	fe 01       	movw	r30, r28
    fd00:	e6 5e       	subi	r30, 0xE6	; 230
    fd02:	fd 4f       	sbci	r31, 0xFD	; 253
    fd04:	30 83       	st	Z, r19
    fd06:	fe 01       	movw	r30, r28
    fd08:	e5 5e       	subi	r30, 0xE5	; 229
    fd0a:	fd 4f       	sbci	r31, 0xFD	; 253
    fd0c:	20 83       	st	Z, r18
    fd0e:	fe 01       	movw	r30, r28
    fd10:	e4 5e       	subi	r30, 0xE4	; 228
    fd12:	fd 4f       	sbci	r31, 0xFD	; 253
    fd14:	90 83       	st	Z, r25
    fd16:	fe 01       	movw	r30, r28
    fd18:	e3 5e       	subi	r30, 0xE3	; 227
    fd1a:	fd 4f       	sbci	r31, 0xFD	; 253
    fd1c:	80 83       	st	Z, r24
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    fd1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    fd20:	2b 85       	ldd	r18, Y+11	; 0x0b
    fd22:	9c 85       	ldd	r25, Y+12	; 0x0c
    fd24:	8d 85       	ldd	r24, Y+13	; 0x0d
    fd26:	fe 01       	movw	r30, r28
    fd28:	e2 5e       	subi	r30, 0xE2	; 226
    fd2a:	fd 4f       	sbci	r31, 0xFD	; 253
    fd2c:	30 83       	st	Z, r19
    fd2e:	fe 01       	movw	r30, r28
    fd30:	e1 5e       	subi	r30, 0xE1	; 225
    fd32:	fd 4f       	sbci	r31, 0xFD	; 253
    fd34:	20 83       	st	Z, r18
    fd36:	fe 01       	movw	r30, r28
    fd38:	e0 5e       	subi	r30, 0xE0	; 224
    fd3a:	fd 4f       	sbci	r31, 0xFD	; 253
    fd3c:	90 83       	st	Z, r25
    fd3e:	fe 01       	movw	r30, r28
    fd40:	ef 5d       	subi	r30, 0xDF	; 223
    fd42:	fd 4f       	sbci	r31, 0xFD	; 253
    fd44:	80 83       	st	Z, r24
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    fd46:	2a 89       	ldd	r18, Y+18	; 0x12
    fd48:	3b 89       	ldd	r19, Y+19	; 0x13
    fd4a:	4c 89       	ldd	r20, Y+20	; 0x14
    fd4c:	5d 89       	ldd	r21, Y+21	; 0x15
    fd4e:	89 81       	ldd	r24, Y+1	; 0x01
    fd50:	b8 01       	movw	r22, r16
    fd52:	01 e0       	ldi	r16, 0x01	; 1
    fd54:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
			fs->fsi_flag = 0;
    fd58:	1d 82       	std	Y+5, r1	; 0x05
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, (BYTE*)0) != RES_OK)
    fd5a:	89 81       	ldd	r24, Y+1	; 0x01
    fd5c:	60 e0       	ldi	r22, 0x00	; 0
    fd5e:	40 e0       	ldi	r20, 0x00	; 0
    fd60:	50 e0       	ldi	r21, 0x00	; 0
    fd62:	0e 94 bd a0 	call	0x1417a	; 0x1417a <_Z10disk_ioctlhhPh>
			res = FR_DISK_ERR;
    fd66:	21 e0       	ldi	r18, 0x01	; 1
    fd68:	30 e0       	ldi	r19, 0x00	; 0
    fd6a:	00 97       	sbiw	r24, 0x00	; 0
    fd6c:	11 f4       	brne	.+4      	; 0xfd72 <_ZL4syncP5FATFS+0x108>
    fd6e:	20 e0       	ldi	r18, 0x00	; 0
    fd70:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    fd72:	c9 01       	movw	r24, r18
    fd74:	df 91       	pop	r29
    fd76:	cf 91       	pop	r28
    fd78:	1f 91       	pop	r17
    fd7a:	0f 91       	pop	r16
    fd7c:	08 95       	ret

0000fd7e <_Z10clust2sectP5FATFSm>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    fd7e:	cf 93       	push	r28
    fd80:	df 93       	push	r29
    fd82:	ec 01       	movw	r28, r24
    fd84:	cb 01       	movw	r24, r22
    fd86:	ba 01       	movw	r22, r20
	clst -= 2;
    fd88:	62 50       	subi	r22, 0x02	; 2
    fd8a:	70 40       	sbci	r23, 0x00	; 0
    fd8c:	80 40       	sbci	r24, 0x00	; 0
    fd8e:	90 40       	sbci	r25, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    fd90:	2a 8d       	ldd	r18, Y+26	; 0x1a
    fd92:	3b 8d       	ldd	r19, Y+27	; 0x1b
    fd94:	4c 8d       	ldd	r20, Y+28	; 0x1c
    fd96:	5d 8d       	ldd	r21, Y+29	; 0x1d
    fd98:	22 50       	subi	r18, 0x02	; 2
    fd9a:	30 40       	sbci	r19, 0x00	; 0
    fd9c:	40 40       	sbci	r20, 0x00	; 0
    fd9e:	50 40       	sbci	r21, 0x00	; 0
    fda0:	62 17       	cp	r22, r18
    fda2:	73 07       	cpc	r23, r19
    fda4:	84 07       	cpc	r24, r20
    fda6:	95 07       	cpc	r25, r21
    fda8:	88 f4       	brcc	.+34     	; 0xfdcc <_Z10clust2sectP5FATFSm+0x4e>
	return clst * fs->csize + fs->database;
    fdaa:	2a 81       	ldd	r18, Y+2	; 0x02
    fdac:	30 e0       	ldi	r19, 0x00	; 0
    fdae:	40 e0       	ldi	r20, 0x00	; 0
    fdb0:	50 e0       	ldi	r21, 0x00	; 0
    fdb2:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
    fdb6:	9b 01       	movw	r18, r22
    fdb8:	ac 01       	movw	r20, r24
    fdba:	8a a5       	ldd	r24, Y+42	; 0x2a
    fdbc:	9b a5       	ldd	r25, Y+43	; 0x2b
    fdbe:	ac a5       	ldd	r26, Y+44	; 0x2c
    fdc0:	bd a5       	ldd	r27, Y+45	; 0x2d
    fdc2:	28 0f       	add	r18, r24
    fdc4:	39 1f       	adc	r19, r25
    fdc6:	4a 1f       	adc	r20, r26
    fdc8:	5b 1f       	adc	r21, r27
    fdca:	03 c0       	rjmp	.+6      	; 0xfdd2 <_Z10clust2sectP5FATFSm+0x54>
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    fdcc:	20 e0       	ldi	r18, 0x00	; 0
    fdce:	30 e0       	ldi	r19, 0x00	; 0
    fdd0:	a9 01       	movw	r20, r18
	return clst * fs->csize + fs->database;
}
    fdd2:	b9 01       	movw	r22, r18
    fdd4:	ca 01       	movw	r24, r20
    fdd6:	df 91       	pop	r29
    fdd8:	cf 91       	pop	r28
    fdda:	08 95       	ret

0000fddc <_Z7get_fatP5FATFSm>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    fddc:	bf 92       	push	r11
    fdde:	cf 92       	push	r12
    fde0:	df 92       	push	r13
    fde2:	ef 92       	push	r14
    fde4:	ff 92       	push	r15
    fde6:	0f 93       	push	r16
    fde8:	1f 93       	push	r17
    fdea:	cf 93       	push	r28
    fdec:	df 93       	push	r29
    fdee:	ec 01       	movw	r28, r24
    fdf0:	6a 01       	movw	r12, r20
    fdf2:	7b 01       	movw	r14, r22
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    fdf4:	42 30       	cpi	r20, 0x02	; 2
    fdf6:	51 05       	cpc	r21, r1
    fdf8:	61 05       	cpc	r22, r1
    fdfa:	71 05       	cpc	r23, r1
    fdfc:	08 f4       	brcc	.+2      	; 0xfe00 <_Z7get_fatP5FATFSm+0x24>
    fdfe:	da c0       	rjmp	.+436    	; 0xffb4 <_Z7get_fatP5FATFSm+0x1d8>
    fe00:	8a 8d       	ldd	r24, Y+26	; 0x1a
    fe02:	9b 8d       	ldd	r25, Y+27	; 0x1b
    fe04:	ac 8d       	ldd	r26, Y+28	; 0x1c
    fe06:	bd 8d       	ldd	r27, Y+29	; 0x1d
    fe08:	48 17       	cp	r20, r24
    fe0a:	59 07       	cpc	r21, r25
    fe0c:	6a 07       	cpc	r22, r26
    fe0e:	7b 07       	cpc	r23, r27
    fe10:	08 f0       	brcs	.+2      	; 0xfe14 <_Z7get_fatP5FATFSm+0x38>
    fe12:	d0 c0       	rjmp	.+416    	; 0xffb4 <_Z7get_fatP5FATFSm+0x1d8>
		return 1;

	switch (fs->fs_type) {
    fe14:	88 81       	ld	r24, Y
    fe16:	82 30       	cpi	r24, 0x02	; 2
    fe18:	09 f4       	brne	.+2      	; 0xfe1c <_Z7get_fatP5FATFSm+0x40>
    fe1a:	54 c0       	rjmp	.+168    	; 0xfec4 <_Z7get_fatP5FATFSm+0xe8>
    fe1c:	83 30       	cpi	r24, 0x03	; 3
    fe1e:	09 f4       	brne	.+2      	; 0xfe22 <_Z7get_fatP5FATFSm+0x46>
    fe20:	78 c0       	rjmp	.+240    	; 0xff12 <_Z7get_fatP5FATFSm+0x136>
    fe22:	81 30       	cpi	r24, 0x01	; 1
    fe24:	09 f0       	breq	.+2      	; 0xfe28 <_Z7get_fatP5FATFSm+0x4c>
    fe26:	cb c0       	rjmp	.+406    	; 0xffbe <_Z7get_fatP5FATFSm+0x1e2>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    fe28:	8a 01       	movw	r16, r20
    fe2a:	16 95       	lsr	r17
    fe2c:	07 95       	ror	r16
    fe2e:	04 0f       	add	r16, r20
    fe30:	15 1f       	adc	r17, r21
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    fe32:	a8 01       	movw	r20, r16
    fe34:	45 2f       	mov	r20, r21
    fe36:	55 27       	eor	r21, r21
    fe38:	46 95       	lsr	r20
    fe3a:	60 e0       	ldi	r22, 0x00	; 0
    fe3c:	70 e0       	ldi	r23, 0x00	; 0
    fe3e:	8a a1       	ldd	r24, Y+34	; 0x22
    fe40:	9b a1       	ldd	r25, Y+35	; 0x23
    fe42:	ac a1       	ldd	r26, Y+36	; 0x24
    fe44:	bd a1       	ldd	r27, Y+37	; 0x25
    fe46:	48 0f       	add	r20, r24
    fe48:	59 1f       	adc	r21, r25
    fe4a:	6a 1f       	adc	r22, r26
    fe4c:	7b 1f       	adc	r23, r27
    fe4e:	ce 01       	movw	r24, r28
    fe50:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
    fe54:	00 97       	sbiw	r24, 0x00	; 0
    fe56:	09 f0       	breq	.+2      	; 0xfe5a <_Z7get_fatP5FATFSm+0x7e>
    fe58:	b2 c0       	rjmp	.+356    	; 0xffbe <_Z7get_fatP5FATFSm+0x1e2>
		wc = fs->win[bc % SS(fs)]; bc++;
    fe5a:	f8 01       	movw	r30, r16
    fe5c:	f1 70       	andi	r31, 0x01	; 1
    fe5e:	ec 0f       	add	r30, r28
    fe60:	fd 1f       	adc	r31, r29
    fe62:	b2 a8       	ldd	r11, Z+50	; 0x32
    fe64:	0f 5f       	subi	r16, 0xFF	; 255
    fe66:	1f 4f       	sbci	r17, 0xFF	; 255
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    fe68:	a8 01       	movw	r20, r16
    fe6a:	45 2f       	mov	r20, r21
    fe6c:	55 27       	eor	r21, r21
    fe6e:	46 95       	lsr	r20
    fe70:	60 e0       	ldi	r22, 0x00	; 0
    fe72:	70 e0       	ldi	r23, 0x00	; 0
    fe74:	8a a1       	ldd	r24, Y+34	; 0x22
    fe76:	9b a1       	ldd	r25, Y+35	; 0x23
    fe78:	ac a1       	ldd	r26, Y+36	; 0x24
    fe7a:	bd a1       	ldd	r27, Y+37	; 0x25
    fe7c:	48 0f       	add	r20, r24
    fe7e:	59 1f       	adc	r21, r25
    fe80:	6a 1f       	adc	r22, r26
    fe82:	7b 1f       	adc	r23, r27
    fe84:	ce 01       	movw	r24, r28
    fe86:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
    fe8a:	00 97       	sbiw	r24, 0x00	; 0
    fe8c:	09 f0       	breq	.+2      	; 0xfe90 <_Z7get_fatP5FATFSm+0xb4>
    fe8e:	97 c0       	rjmp	.+302    	; 0xffbe <_Z7get_fatP5FATFSm+0x1e2>

	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc = fs->win[bc % SS(fs)]; bc++;
    fe90:	2b 2d       	mov	r18, r11
    fe92:	30 e0       	ldi	r19, 0x00	; 0
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
		wc |= fs->win[bc % SS(fs)] << 8;
    fe94:	11 70       	andi	r17, 0x01	; 1
    fe96:	0c 0f       	add	r16, r28
    fe98:	1d 1f       	adc	r17, r29
    fe9a:	d8 01       	movw	r26, r16
    fe9c:	d2 96       	adiw	r26, 0x32	; 50
    fe9e:	9c 91       	ld	r25, X
    fea0:	d2 97       	sbiw	r26, 0x32	; 50
    fea2:	80 e0       	ldi	r24, 0x00	; 0
    fea4:	28 2b       	or	r18, r24
    fea6:	39 2b       	or	r19, r25
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    fea8:	c0 fe       	sbrs	r12, 0
    feaa:	06 c0       	rjmp	.+12     	; 0xfeb8 <_Z7get_fatP5FATFSm+0xdc>
    feac:	44 e0       	ldi	r20, 0x04	; 4
    feae:	36 95       	lsr	r19
    feb0:	27 95       	ror	r18
    feb2:	4a 95       	dec	r20
    feb4:	e1 f7       	brne	.-8      	; 0xfeae <_Z7get_fatP5FATFSm+0xd2>
    feb6:	2a c0       	rjmp	.+84     	; 0xff0c <_Z7get_fatP5FATFSm+0x130>
    feb8:	40 e0       	ldi	r20, 0x00	; 0
    feba:	50 e0       	ldi	r21, 0x00	; 0
    febc:	3f 70       	andi	r19, 0x0F	; 15
    febe:	40 70       	andi	r20, 0x00	; 0
    fec0:	50 70       	andi	r21, 0x00	; 0
    fec2:	80 c0       	rjmp	.+256    	; 0xffc4 <_Z7get_fatP5FATFSm+0x1e8>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    fec4:	45 2f       	mov	r20, r21
    fec6:	56 2f       	mov	r21, r22
    fec8:	67 2f       	mov	r22, r23
    feca:	77 27       	eor	r23, r23
    fecc:	8a a1       	ldd	r24, Y+34	; 0x22
    fece:	9b a1       	ldd	r25, Y+35	; 0x23
    fed0:	ac a1       	ldd	r26, Y+36	; 0x24
    fed2:	bd a1       	ldd	r27, Y+37	; 0x25
    fed4:	48 0f       	add	r20, r24
    fed6:	59 1f       	adc	r21, r25
    fed8:	6a 1f       	adc	r22, r26
    feda:	7b 1f       	adc	r23, r27
    fedc:	ce 01       	movw	r24, r28
    fede:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
    fee2:	00 97       	sbiw	r24, 0x00	; 0
    fee4:	09 f0       	breq	.+2      	; 0xfee8 <_Z7get_fatP5FATFSm+0x10c>
    fee6:	6b c0       	rjmp	.+214    	; 0xffbe <_Z7get_fatP5FATFSm+0x1e2>
		p = &fs->win[clst * 2 % SS(fs)];
    fee8:	d7 01       	movw	r26, r14
    feea:	c6 01       	movw	r24, r12
    feec:	88 0f       	add	r24, r24
    feee:	99 1f       	adc	r25, r25
    fef0:	aa 1f       	adc	r26, r26
    fef2:	bb 1f       	adc	r27, r27
    fef4:	91 70       	andi	r25, 0x01	; 1
    fef6:	a0 70       	andi	r26, 0x00	; 0
    fef8:	b0 70       	andi	r27, 0x00	; 0
		return LD_WORD(p);
    fefa:	fe 01       	movw	r30, r28
    fefc:	e8 0f       	add	r30, r24
    fefe:	f9 1f       	adc	r31, r25
    ff00:	22 a9       	ldd	r18, Z+50	; 0x32
    ff02:	30 e0       	ldi	r19, 0x00	; 0
    ff04:	53 a9       	ldd	r21, Z+51	; 0x33
    ff06:	40 e0       	ldi	r20, 0x00	; 0
    ff08:	24 2b       	or	r18, r20
    ff0a:	35 2b       	or	r19, r21
    ff0c:	40 e0       	ldi	r20, 0x00	; 0
    ff0e:	50 e0       	ldi	r21, 0x00	; 0
    ff10:	59 c0       	rjmp	.+178    	; 0xffc4 <_Z7get_fatP5FATFSm+0x1e8>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    ff12:	97 e0       	ldi	r25, 0x07	; 7
    ff14:	76 95       	lsr	r23
    ff16:	67 95       	ror	r22
    ff18:	57 95       	ror	r21
    ff1a:	47 95       	ror	r20
    ff1c:	9a 95       	dec	r25
    ff1e:	d1 f7       	brne	.-12     	; 0xff14 <_Z7get_fatP5FATFSm+0x138>
    ff20:	8a a1       	ldd	r24, Y+34	; 0x22
    ff22:	9b a1       	ldd	r25, Y+35	; 0x23
    ff24:	ac a1       	ldd	r26, Y+36	; 0x24
    ff26:	bd a1       	ldd	r27, Y+37	; 0x25
    ff28:	48 0f       	add	r20, r24
    ff2a:	59 1f       	adc	r21, r25
    ff2c:	6a 1f       	adc	r22, r26
    ff2e:	7b 1f       	adc	r23, r27
    ff30:	ce 01       	movw	r24, r28
    ff32:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
    ff36:	00 97       	sbiw	r24, 0x00	; 0
    ff38:	09 f0       	breq	.+2      	; 0xff3c <_Z7get_fatP5FATFSm+0x160>
    ff3a:	41 c0       	rjmp	.+130    	; 0xffbe <_Z7get_fatP5FATFSm+0x1e2>
		p = &fs->win[clst * 4 % SS(fs)];
    ff3c:	87 01       	movw	r16, r14
    ff3e:	76 01       	movw	r14, r12
    ff40:	82 e0       	ldi	r24, 0x02	; 2
    ff42:	ee 0c       	add	r14, r14
    ff44:	ff 1c       	adc	r15, r15
    ff46:	00 1f       	adc	r16, r16
    ff48:	11 1f       	adc	r17, r17
    ff4a:	8a 95       	dec	r24
    ff4c:	d1 f7       	brne	.-12     	; 0xff42 <_Z7get_fatP5FATFSm+0x166>
    ff4e:	8f ef       	ldi	r24, 0xFF	; 255
    ff50:	91 e0       	ldi	r25, 0x01	; 1
    ff52:	a0 e0       	ldi	r26, 0x00	; 0
    ff54:	b0 e0       	ldi	r27, 0x00	; 0
    ff56:	e8 22       	and	r14, r24
    ff58:	f9 22       	and	r15, r25
    ff5a:	0a 23       	and	r16, r26
    ff5c:	1b 23       	and	r17, r27
    ff5e:	f7 01       	movw	r30, r14
    ff60:	f2 96       	adiw	r30, 0x32	; 50
    ff62:	ec 0f       	add	r30, r28
    ff64:	fd 1f       	adc	r31, r29
		return LD_DWORD(p) & 0x0FFFFFFF;
    ff66:	22 81       	ldd	r18, Z+2	; 0x02
    ff68:	30 e0       	ldi	r19, 0x00	; 0
    ff6a:	40 e0       	ldi	r20, 0x00	; 0
    ff6c:	50 e0       	ldi	r21, 0x00	; 0
    ff6e:	a9 01       	movw	r20, r18
    ff70:	33 27       	eor	r19, r19
    ff72:	22 27       	eor	r18, r18
    ff74:	83 81       	ldd	r24, Z+3	; 0x03
    ff76:	90 e0       	ldi	r25, 0x00	; 0
    ff78:	a0 e0       	ldi	r26, 0x00	; 0
    ff7a:	b0 e0       	ldi	r27, 0x00	; 0
    ff7c:	b8 2f       	mov	r27, r24
    ff7e:	aa 27       	eor	r26, r26
    ff80:	99 27       	eor	r25, r25
    ff82:	88 27       	eor	r24, r24
    ff84:	28 2b       	or	r18, r24
    ff86:	39 2b       	or	r19, r25
    ff88:	4a 2b       	or	r20, r26
    ff8a:	5b 2b       	or	r21, r27
    ff8c:	91 81       	ldd	r25, Z+1	; 0x01
    ff8e:	80 e0       	ldi	r24, 0x00	; 0
    ff90:	a0 e0       	ldi	r26, 0x00	; 0
    ff92:	b0 e0       	ldi	r27, 0x00	; 0
    ff94:	28 2b       	or	r18, r24
    ff96:	39 2b       	or	r19, r25
    ff98:	4a 2b       	or	r20, r26
    ff9a:	5b 2b       	or	r21, r27
    ff9c:	ce 0d       	add	r28, r14
    ff9e:	df 1d       	adc	r29, r15
    ffa0:	8a a9       	ldd	r24, Y+50	; 0x32
    ffa2:	90 e0       	ldi	r25, 0x00	; 0
    ffa4:	a0 e0       	ldi	r26, 0x00	; 0
    ffa6:	b0 e0       	ldi	r27, 0x00	; 0
    ffa8:	28 2b       	or	r18, r24
    ffaa:	39 2b       	or	r19, r25
    ffac:	4a 2b       	or	r20, r26
    ffae:	5b 2b       	or	r21, r27
    ffb0:	5f 70       	andi	r21, 0x0F	; 15
    ffb2:	08 c0       	rjmp	.+16     	; 0xffc4 <_Z7get_fatP5FATFSm+0x1e8>
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
		return 1;
    ffb4:	21 e0       	ldi	r18, 0x01	; 1
    ffb6:	30 e0       	ldi	r19, 0x00	; 0
    ffb8:	40 e0       	ldi	r20, 0x00	; 0
    ffba:	50 e0       	ldi	r21, 0x00	; 0
    ffbc:	03 c0       	rjmp	.+6      	; 0xffc4 <_Z7get_fatP5FATFSm+0x1e8>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
		p = &fs->win[clst * 4 % SS(fs)];
		return LD_DWORD(p) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    ffbe:	2f ef       	ldi	r18, 0xFF	; 255
    ffc0:	3f ef       	ldi	r19, 0xFF	; 255
    ffc2:	a9 01       	movw	r20, r18
}
    ffc4:	b9 01       	movw	r22, r18
    ffc6:	ca 01       	movw	r24, r20
    ffc8:	df 91       	pop	r29
    ffca:	cf 91       	pop	r28
    ffcc:	1f 91       	pop	r17
    ffce:	0f 91       	pop	r16
    ffd0:	ff 90       	pop	r15
    ffd2:	ef 90       	pop	r14
    ffd4:	df 90       	pop	r13
    ffd6:	cf 90       	pop	r12
    ffd8:	bf 90       	pop	r11
    ffda:	08 95       	ret

0000ffdc <_ZL7dir_sdiP3DIRt>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    ffdc:	ef 92       	push	r14
    ffde:	ff 92       	push	r15
    ffe0:	0f 93       	push	r16
    ffe2:	1f 93       	push	r17
    ffe4:	cf 93       	push	r28
    ffe6:	df 93       	push	r29
    ffe8:	ec 01       	movw	r28, r24
    ffea:	8b 01       	movw	r16, r22
	DWORD clst;
	WORD ic;


	dj->index = idx;
    ffec:	7d 83       	std	Y+5, r23	; 0x05
    ffee:	6c 83       	std	Y+4, r22	; 0x04
	clst = dj->sclust;
    fff0:	4e 81       	ldd	r20, Y+6	; 0x06
    fff2:	5f 81       	ldd	r21, Y+7	; 0x07
    fff4:	68 85       	ldd	r22, Y+8	; 0x08
    fff6:	79 85       	ldd	r23, Y+9	; 0x09
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    fff8:	41 30       	cpi	r20, 0x01	; 1
    fffa:	51 05       	cpc	r21, r1
    fffc:	61 05       	cpc	r22, r1
    fffe:	71 05       	cpc	r23, r1
   10000:	09 f4       	brne	.+2      	; 0x10004 <_ZL7dir_sdiP3DIRt+0x28>
   10002:	8c c0       	rjmp	.+280    	; 0x1011c <_ZL7dir_sdiP3DIRt+0x140>
   10004:	e8 81       	ld	r30, Y
   10006:	f9 81       	ldd	r31, Y+1	; 0x01
   10008:	82 8d       	ldd	r24, Z+26	; 0x1a
   1000a:	93 8d       	ldd	r25, Z+27	; 0x1b
   1000c:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1000e:	b5 8d       	ldd	r27, Z+29	; 0x1d
   10010:	48 17       	cp	r20, r24
   10012:	59 07       	cpc	r21, r25
   10014:	6a 07       	cpc	r22, r26
   10016:	7b 07       	cpc	r23, r27
   10018:	08 f0       	brcs	.+2      	; 0x1001c <_ZL7dir_sdiP3DIRt+0x40>
   1001a:	80 c0       	rjmp	.+256    	; 0x1011c <_ZL7dir_sdiP3DIRt+0x140>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   1001c:	41 15       	cp	r20, r1
   1001e:	51 05       	cpc	r21, r1
   10020:	61 05       	cpc	r22, r1
   10022:	71 05       	cpc	r23, r1
   10024:	19 f5       	brne	.+70     	; 0x1006c <_ZL7dir_sdiP3DIRt+0x90>
   10026:	80 81       	ld	r24, Z
   10028:	83 30       	cpi	r24, 0x03	; 3
   1002a:	49 f4       	brne	.+18     	; 0x1003e <_ZL7dir_sdiP3DIRt+0x62>
		clst = dj->fs->dirbase;
   1002c:	46 a1       	ldd	r20, Z+38	; 0x26
   1002e:	57 a1       	ldd	r21, Z+39	; 0x27
   10030:	60 a5       	ldd	r22, Z+40	; 0x28
   10032:	71 a5       	ldd	r23, Z+41	; 0x29

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   10034:	41 15       	cp	r20, r1
   10036:	51 05       	cpc	r21, r1
   10038:	61 05       	cpc	r22, r1
   1003a:	71 05       	cpc	r23, r1
   1003c:	b9 f4       	brne	.+46     	; 0x1006c <_ZL7dir_sdiP3DIRt+0x90>
		dj->clust = clst;
   1003e:	1a 86       	std	Y+10, r1	; 0x0a
   10040:	1b 86       	std	Y+11, r1	; 0x0b
   10042:	1c 86       	std	Y+12, r1	; 0x0c
   10044:	1d 86       	std	Y+13, r1	; 0x0d
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   10046:	80 85       	ldd	r24, Z+8	; 0x08
   10048:	91 85       	ldd	r25, Z+9	; 0x09
   1004a:	08 17       	cp	r16, r24
   1004c:	19 07       	cpc	r17, r25
   1004e:	08 f0       	brcs	.+2      	; 0x10052 <_ZL7dir_sdiP3DIRt+0x76>
   10050:	65 c0       	rjmp	.+202    	; 0x1011c <_ZL7dir_sdiP3DIRt+0x140>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
   10052:	c8 01       	movw	r24, r16
   10054:	24 e0       	ldi	r18, 0x04	; 4
   10056:	96 95       	lsr	r25
   10058:	87 95       	ror	r24
   1005a:	2a 95       	dec	r18
   1005c:	e1 f7       	brne	.-8      	; 0x10056 <_ZL7dir_sdiP3DIRt+0x7a>
   1005e:	a0 e0       	ldi	r26, 0x00	; 0
   10060:	b0 e0       	ldi	r27, 0x00	; 0
   10062:	26 a1       	ldd	r18, Z+38	; 0x26
   10064:	37 a1       	ldd	r19, Z+39	; 0x27
   10066:	40 a5       	ldd	r20, Z+40	; 0x28
   10068:	51 a5       	ldd	r21, Z+41	; 0x29
   1006a:	3c c0       	rjmp	.+120    	; 0x100e4 <_ZL7dir_sdiP3DIRt+0x108>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
   1006c:	e2 80       	ldd	r14, Z+2	; 0x02
   1006e:	ff 24       	eor	r15, r15
   10070:	b4 e0       	ldi	r27, 0x04	; 4
   10072:	ee 0c       	add	r14, r14
   10074:	ff 1c       	adc	r15, r15
   10076:	ba 95       	dec	r27
   10078:	e1 f7       	brne	.-8      	; 0x10072 <_ZL7dir_sdiP3DIRt+0x96>
		while (idx >= ic) {	/* Follow cluster chain */
   1007a:	1f c0       	rjmp	.+62     	; 0x100ba <_ZL7dir_sdiP3DIRt+0xde>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   1007c:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   10080:	ab 01       	movw	r20, r22
   10082:	bc 01       	movw	r22, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   10084:	4f 3f       	cpi	r20, 0xFF	; 255
   10086:	8f ef       	ldi	r24, 0xFF	; 255
   10088:	58 07       	cpc	r21, r24
   1008a:	8f ef       	ldi	r24, 0xFF	; 255
   1008c:	68 07       	cpc	r22, r24
   1008e:	8f ef       	ldi	r24, 0xFF	; 255
   10090:	78 07       	cpc	r23, r24
   10092:	09 f4       	brne	.+2      	; 0x10096 <_ZL7dir_sdiP3DIRt+0xba>
   10094:	40 c0       	rjmp	.+128    	; 0x10116 <_ZL7dir_sdiP3DIRt+0x13a>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   10096:	42 30       	cpi	r20, 0x02	; 2
   10098:	51 05       	cpc	r21, r1
   1009a:	61 05       	cpc	r22, r1
   1009c:	71 05       	cpc	r23, r1
   1009e:	f0 f1       	brcs	.+124    	; 0x1011c <_ZL7dir_sdiP3DIRt+0x140>
   100a0:	e8 81       	ld	r30, Y
   100a2:	f9 81       	ldd	r31, Y+1	; 0x01
   100a4:	82 8d       	ldd	r24, Z+26	; 0x1a
   100a6:	93 8d       	ldd	r25, Z+27	; 0x1b
   100a8:	a4 8d       	ldd	r26, Z+28	; 0x1c
   100aa:	b5 8d       	ldd	r27, Z+29	; 0x1d
   100ac:	48 17       	cp	r20, r24
   100ae:	59 07       	cpc	r21, r25
   100b0:	6a 07       	cpc	r22, r26
   100b2:	7b 07       	cpc	r23, r27
   100b4:	98 f5       	brcc	.+102    	; 0x1011c <_ZL7dir_sdiP3DIRt+0x140>
				return FR_INT_ERR;
			idx -= ic;
   100b6:	0e 19       	sub	r16, r14
   100b8:	1f 09       	sbc	r17, r15
   100ba:	88 81       	ld	r24, Y
   100bc:	99 81       	ldd	r25, Y+1	; 0x01
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
   100be:	0e 15       	cp	r16, r14
   100c0:	1f 05       	cpc	r17, r15
   100c2:	e0 f6       	brcc	.-72     	; 0x1007c <_ZL7dir_sdiP3DIRt+0xa0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
   100c4:	4a 87       	std	Y+10, r20	; 0x0a
   100c6:	5b 87       	std	Y+11, r21	; 0x0b
   100c8:	6c 87       	std	Y+12, r22	; 0x0c
   100ca:	7d 87       	std	Y+13, r23	; 0x0d
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
   100cc:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
   100d0:	9b 01       	movw	r18, r22
   100d2:	ac 01       	movw	r20, r24
   100d4:	c8 01       	movw	r24, r16
   100d6:	a4 e0       	ldi	r26, 0x04	; 4
   100d8:	96 95       	lsr	r25
   100da:	87 95       	ror	r24
   100dc:	aa 95       	dec	r26
   100de:	e1 f7       	brne	.-8      	; 0x100d8 <_ZL7dir_sdiP3DIRt+0xfc>
   100e0:	a0 e0       	ldi	r26, 0x00	; 0
   100e2:	b0 e0       	ldi	r27, 0x00	; 0
   100e4:	82 0f       	add	r24, r18
   100e6:	93 1f       	adc	r25, r19
   100e8:	a4 1f       	adc	r26, r20
   100ea:	b5 1f       	adc	r27, r21
   100ec:	8e 87       	std	Y+14, r24	; 0x0e
   100ee:	9f 87       	std	Y+15, r25	; 0x0f
   100f0:	a8 8b       	std	Y+16, r26	; 0x10
   100f2:	b9 8b       	std	Y+17, r27	; 0x11
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
   100f4:	88 81       	ld	r24, Y
   100f6:	99 81       	ldd	r25, Y+1	; 0x01
   100f8:	c2 96       	adiw	r24, 0x32	; 50
   100fa:	0f 70       	andi	r16, 0x0F	; 15
   100fc:	10 70       	andi	r17, 0x00	; 0
   100fe:	f5 e0       	ldi	r31, 0x05	; 5
   10100:	00 0f       	add	r16, r16
   10102:	11 1f       	adc	r17, r17
   10104:	fa 95       	dec	r31
   10106:	e1 f7       	brne	.-8      	; 0x10100 <_ZL7dir_sdiP3DIRt+0x124>
   10108:	80 0f       	add	r24, r16
   1010a:	91 1f       	adc	r25, r17
   1010c:	9b 8b       	std	Y+19, r25	; 0x13
   1010e:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;	/* Seek succeeded */
   10110:	20 e0       	ldi	r18, 0x00	; 0
   10112:	30 e0       	ldi	r19, 0x00	; 0
   10114:	05 c0       	rjmp	.+10     	; 0x10120 <_ZL7dir_sdiP3DIRt+0x144>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   10116:	21 e0       	ldi	r18, 0x01	; 1
   10118:	30 e0       	ldi	r19, 0x00	; 0
   1011a:	02 c0       	rjmp	.+4      	; 0x10120 <_ZL7dir_sdiP3DIRt+0x144>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
				return FR_INT_ERR;
   1011c:	22 e0       	ldi	r18, 0x02	; 2
   1011e:	30 e0       	ldi	r19, 0x00	; 0
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
   10120:	c9 01       	movw	r24, r18
   10122:	df 91       	pop	r29
   10124:	cf 91       	pop	r28
   10126:	1f 91       	pop	r17
   10128:	0f 91       	pop	r16
   1012a:	ff 90       	pop	r15
   1012c:	ef 90       	pop	r14
   1012e:	08 95       	ret

00010130 <_ZL10dir_removeP3DIR>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
   10130:	cf 93       	push	r28
   10132:	df 93       	push	r29
   10134:	ec 01       	movw	r28, r24
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
   10136:	6c 81       	ldd	r22, Y+4	; 0x04
   10138:	7d 81       	ldd	r23, Y+5	; 0x05
   1013a:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   1013e:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   10140:	00 97       	sbiw	r24, 0x00	; 0
   10142:	99 f4       	brne	.+38     	; 0x1016a <_ZL10dir_removeP3DIR+0x3a>
		res = move_window(dj->fs, dj->sect);
   10144:	4e 85       	ldd	r20, Y+14	; 0x0e
   10146:	5f 85       	ldd	r21, Y+15	; 0x0f
   10148:	68 89       	ldd	r22, Y+16	; 0x10
   1014a:	79 89       	ldd	r23, Y+17	; 0x11
   1014c:	88 81       	ld	r24, Y
   1014e:	99 81       	ldd	r25, Y+1	; 0x01
   10150:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10154:	9c 01       	movw	r18, r24
		if (res == FR_OK) {
   10156:	00 97       	sbiw	r24, 0x00	; 0
   10158:	41 f4       	brne	.+16     	; 0x1016a <_ZL10dir_removeP3DIR+0x3a>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
   1015a:	ea 89       	ldd	r30, Y+18	; 0x12
   1015c:	fb 89       	ldd	r31, Y+19	; 0x13
   1015e:	85 ee       	ldi	r24, 0xE5	; 229
   10160:	80 83       	st	Z, r24
			dj->fs->wflag = 1;
   10162:	e8 81       	ld	r30, Y
   10164:	f9 81       	ldd	r31, Y+1	; 0x01
   10166:	81 e0       	ldi	r24, 0x01	; 1
   10168:	84 83       	std	Z+4, r24	; 0x04
		}
	}
#endif

	return res;
}
   1016a:	c9 01       	movw	r24, r18
   1016c:	df 91       	pop	r29
   1016e:	cf 91       	pop	r28
   10170:	08 95       	ret

00010172 <_Z7put_fatP5FATFSmm>:
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   10172:	4f 92       	push	r4
   10174:	5f 92       	push	r5
   10176:	6f 92       	push	r6
   10178:	7f 92       	push	r7
   1017a:	8f 92       	push	r8
   1017c:	9f 92       	push	r9
   1017e:	af 92       	push	r10
   10180:	bf 92       	push	r11
   10182:	cf 92       	push	r12
   10184:	df 92       	push	r13
   10186:	ef 92       	push	r14
   10188:	ff 92       	push	r15
   1018a:	0f 93       	push	r16
   1018c:	1f 93       	push	r17
   1018e:	cf 93       	push	r28
   10190:	df 93       	push	r29
   10192:	ec 01       	movw	r28, r24
   10194:	6a 01       	movw	r12, r20
   10196:	7b 01       	movw	r14, r22
   10198:	48 01       	movw	r8, r16
   1019a:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   1019c:	42 30       	cpi	r20, 0x02	; 2
   1019e:	51 05       	cpc	r21, r1
   101a0:	61 05       	cpc	r22, r1
   101a2:	71 05       	cpc	r23, r1
   101a4:	08 f4       	brcc	.+2      	; 0x101a8 <_Z7put_fatP5FATFSmm+0x36>
   101a6:	e6 c0       	rjmp	.+460    	; 0x10374 <_Z7put_fatP5FATFSmm+0x202>
   101a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
   101aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
   101ac:	ac 8d       	ldd	r26, Y+28	; 0x1c
   101ae:	bd 8d       	ldd	r27, Y+29	; 0x1d
   101b0:	48 17       	cp	r20, r24
   101b2:	59 07       	cpc	r21, r25
   101b4:	6a 07       	cpc	r22, r26
   101b6:	7b 07       	cpc	r23, r27
   101b8:	08 f0       	brcs	.+2      	; 0x101bc <_Z7put_fatP5FATFSmm+0x4a>
   101ba:	dc c0       	rjmp	.+440    	; 0x10374 <_Z7put_fatP5FATFSmm+0x202>
		res = FR_INT_ERR;

	} else {
		switch (fs->fs_type) {
   101bc:	88 81       	ld	r24, Y
   101be:	82 30       	cpi	r24, 0x02	; 2
   101c0:	09 f4       	brne	.+2      	; 0x101c4 <_Z7put_fatP5FATFSmm+0x52>
   101c2:	72 c0       	rjmp	.+228    	; 0x102a8 <_Z7put_fatP5FATFSmm+0x136>
   101c4:	83 30       	cpi	r24, 0x03	; 3
   101c6:	09 f4       	brne	.+2      	; 0x101ca <_Z7put_fatP5FATFSmm+0x58>
   101c8:	91 c0       	rjmp	.+290    	; 0x102ec <_Z7put_fatP5FATFSmm+0x17a>
   101ca:	81 30       	cpi	r24, 0x01	; 1
   101cc:	09 f0       	breq	.+2      	; 0x101d0 <_Z7put_fatP5FATFSmm+0x5e>
   101ce:	cd c0       	rjmp	.+410    	; 0x1036a <_Z7put_fatP5FATFSmm+0x1f8>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   101d0:	8a 01       	movw	r16, r20
   101d2:	16 95       	lsr	r17
   101d4:	07 95       	ror	r16
   101d6:	04 0f       	add	r16, r20
   101d8:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   101da:	a8 01       	movw	r20, r16
   101dc:	45 2f       	mov	r20, r21
   101de:	55 27       	eor	r21, r21
   101e0:	46 95       	lsr	r20
   101e2:	60 e0       	ldi	r22, 0x00	; 0
   101e4:	70 e0       	ldi	r23, 0x00	; 0
   101e6:	8a a1       	ldd	r24, Y+34	; 0x22
   101e8:	9b a1       	ldd	r25, Y+35	; 0x23
   101ea:	ac a1       	ldd	r26, Y+36	; 0x24
   101ec:	bd a1       	ldd	r27, Y+37	; 0x25
   101ee:	48 0f       	add	r20, r24
   101f0:	59 1f       	adc	r21, r25
   101f2:	6a 1f       	adc	r22, r26
   101f4:	7b 1f       	adc	r23, r27
   101f6:	ce 01       	movw	r24, r28
   101f8:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   101fc:	bc 01       	movw	r22, r24
			if (res != FR_OK) break;
   101fe:	00 97       	sbiw	r24, 0x00	; 0
   10200:	09 f0       	breq	.+2      	; 0x10204 <_Z7put_fatP5FATFSmm+0x92>
   10202:	b5 c0       	rjmp	.+362    	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>
			p = &fs->win[bc % SS(fs)];
   10204:	c8 01       	movw	r24, r16
   10206:	91 70       	andi	r25, 0x01	; 1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   10208:	71 e0       	ldi	r23, 0x01	; 1
   1020a:	47 2e       	mov	r4, r23
   1020c:	51 2c       	mov	r5, r1
   1020e:	61 2c       	mov	r6, r1
   10210:	71 2c       	mov	r7, r1
   10212:	4c 20       	and	r4, r12
   10214:	5d 20       	and	r5, r13
   10216:	6e 20       	and	r6, r14
   10218:	7f 20       	and	r7, r15
   1021a:	c0 fe       	sbrs	r12, 0
   1021c:	0a c0       	rjmp	.+20     	; 0x10232 <_Z7put_fatP5FATFSmm+0xc0>
   1021e:	fe 01       	movw	r30, r28
   10220:	e8 0f       	add	r30, r24
   10222:	f9 1f       	adc	r31, r25
   10224:	32 a9       	ldd	r19, Z+50	; 0x32
   10226:	3f 70       	andi	r19, 0x0F	; 15
   10228:	28 2d       	mov	r18, r8
   1022a:	22 95       	swap	r18
   1022c:	20 7f       	andi	r18, 0xF0	; 240
   1022e:	23 2b       	or	r18, r19
   10230:	01 c0       	rjmp	.+2      	; 0x10234 <_Z7put_fatP5FATFSmm+0xc2>
   10232:	28 2d       	mov	r18, r8
   10234:	8c 0f       	add	r24, r28
   10236:	9d 1f       	adc	r25, r29
   10238:	dc 01       	movw	r26, r24
   1023a:	d2 96       	adiw	r26, 0x32	; 50
   1023c:	2c 93       	st	X, r18
			bc++;
   1023e:	0f 5f       	subi	r16, 0xFF	; 255
   10240:	1f 4f       	sbci	r17, 0xFF	; 255
			fs->wflag = 1;
   10242:	81 e0       	ldi	r24, 0x01	; 1
   10244:	8c 83       	std	Y+4, r24	; 0x04
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   10246:	a8 01       	movw	r20, r16
   10248:	45 2f       	mov	r20, r21
   1024a:	55 27       	eor	r21, r21
   1024c:	46 95       	lsr	r20
   1024e:	60 e0       	ldi	r22, 0x00	; 0
   10250:	70 e0       	ldi	r23, 0x00	; 0
   10252:	8a a1       	ldd	r24, Y+34	; 0x22
   10254:	9b a1       	ldd	r25, Y+35	; 0x23
   10256:	ac a1       	ldd	r26, Y+36	; 0x24
   10258:	bd a1       	ldd	r27, Y+37	; 0x25
   1025a:	48 0f       	add	r20, r24
   1025c:	59 1f       	adc	r21, r25
   1025e:	6a 1f       	adc	r22, r26
   10260:	7b 1f       	adc	r23, r27
   10262:	ce 01       	movw	r24, r28
   10264:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10268:	bc 01       	movw	r22, r24
			if (res != FR_OK) break;
   1026a:	00 97       	sbiw	r24, 0x00	; 0
   1026c:	09 f0       	breq	.+2      	; 0x10270 <_Z7put_fatP5FATFSmm+0xfe>
   1026e:	7f c0       	rjmp	.+254    	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>
			p = &fs->win[bc % SS(fs)];
   10270:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   10272:	41 14       	cp	r4, r1
   10274:	51 04       	cpc	r5, r1
   10276:	61 04       	cpc	r6, r1
   10278:	71 04       	cpc	r7, r1
   1027a:	49 f0       	breq	.+18     	; 0x1028e <_Z7put_fatP5FATFSmm+0x11c>
   1027c:	44 e0       	ldi	r20, 0x04	; 4
   1027e:	b6 94       	lsr	r11
   10280:	a7 94       	ror	r10
   10282:	97 94       	ror	r9
   10284:	87 94       	ror	r8
   10286:	4a 95       	dec	r20
   10288:	d1 f7       	brne	.-12     	; 0x1027e <_Z7put_fatP5FATFSmm+0x10c>
   1028a:	88 2d       	mov	r24, r8
   1028c:	08 c0       	rjmp	.+16     	; 0x1029e <_Z7put_fatP5FATFSmm+0x12c>
   1028e:	fe 01       	movw	r30, r28
   10290:	e0 0f       	add	r30, r16
   10292:	f1 1f       	adc	r31, r17
   10294:	82 a9       	ldd	r24, Z+50	; 0x32
   10296:	80 7f       	andi	r24, 0xF0	; 240
   10298:	99 2d       	mov	r25, r9
   1029a:	9f 70       	andi	r25, 0x0F	; 15
   1029c:	89 2b       	or	r24, r25
   1029e:	0c 0f       	add	r16, r28
   102a0:	1d 1f       	adc	r17, r29
   102a2:	f8 01       	movw	r30, r16
   102a4:	82 ab       	std	Z+50, r24	; 0x32
			break;
   102a6:	63 c0       	rjmp	.+198    	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   102a8:	45 2f       	mov	r20, r21
   102aa:	56 2f       	mov	r21, r22
   102ac:	67 2f       	mov	r22, r23
   102ae:	77 27       	eor	r23, r23
   102b0:	8a a1       	ldd	r24, Y+34	; 0x22
   102b2:	9b a1       	ldd	r25, Y+35	; 0x23
   102b4:	ac a1       	ldd	r26, Y+36	; 0x24
   102b6:	bd a1       	ldd	r27, Y+37	; 0x25
   102b8:	48 0f       	add	r20, r24
   102ba:	59 1f       	adc	r21, r25
   102bc:	6a 1f       	adc	r22, r26
   102be:	7b 1f       	adc	r23, r27
   102c0:	ce 01       	movw	r24, r28
   102c2:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   102c6:	bc 01       	movw	r22, r24
			if (res != FR_OK) break;
   102c8:	00 97       	sbiw	r24, 0x00	; 0
   102ca:	09 f0       	breq	.+2      	; 0x102ce <_Z7put_fatP5FATFSmm+0x15c>
   102cc:	50 c0       	rjmp	.+160    	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>
			p = &fs->win[clst * 2 % SS(fs)];
   102ce:	d7 01       	movw	r26, r14
   102d0:	c6 01       	movw	r24, r12
   102d2:	88 0f       	add	r24, r24
   102d4:	99 1f       	adc	r25, r25
   102d6:	aa 1f       	adc	r26, r26
   102d8:	bb 1f       	adc	r27, r27
   102da:	91 70       	andi	r25, 0x01	; 1
   102dc:	a0 70       	andi	r26, 0x00	; 0
   102de:	b0 70       	andi	r27, 0x00	; 0
			ST_WORD(p, (WORD)val);
   102e0:	fe 01       	movw	r30, r28
   102e2:	e8 0f       	add	r30, r24
   102e4:	f9 1f       	adc	r31, r25
   102e6:	82 aa       	std	Z+50, r8	; 0x32
   102e8:	93 aa       	std	Z+51, r9	; 0x33
			break;
   102ea:	41 c0       	rjmp	.+130    	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   102ec:	07 e0       	ldi	r16, 0x07	; 7
   102ee:	76 95       	lsr	r23
   102f0:	67 95       	ror	r22
   102f2:	57 95       	ror	r21
   102f4:	47 95       	ror	r20
   102f6:	0a 95       	dec	r16
   102f8:	d1 f7       	brne	.-12     	; 0x102ee <_Z7put_fatP5FATFSmm+0x17c>
   102fa:	8a a1       	ldd	r24, Y+34	; 0x22
   102fc:	9b a1       	ldd	r25, Y+35	; 0x23
   102fe:	ac a1       	ldd	r26, Y+36	; 0x24
   10300:	bd a1       	ldd	r27, Y+37	; 0x25
   10302:	48 0f       	add	r20, r24
   10304:	59 1f       	adc	r21, r25
   10306:	6a 1f       	adc	r22, r26
   10308:	7b 1f       	adc	r23, r27
   1030a:	ce 01       	movw	r24, r28
   1030c:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10310:	bc 01       	movw	r22, r24
			if (res != FR_OK) break;
   10312:	00 97       	sbiw	r24, 0x00	; 0
   10314:	61 f5       	brne	.+88     	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>
			p = &fs->win[clst * 4 % SS(fs)];
   10316:	d7 01       	movw	r26, r14
   10318:	c6 01       	movw	r24, r12
   1031a:	12 e0       	ldi	r17, 0x02	; 2
   1031c:	88 0f       	add	r24, r24
   1031e:	99 1f       	adc	r25, r25
   10320:	aa 1f       	adc	r26, r26
   10322:	bb 1f       	adc	r27, r27
   10324:	1a 95       	dec	r17
   10326:	d1 f7       	brne	.-12     	; 0x1031c <_Z7put_fatP5FATFSmm+0x1aa>
   10328:	91 70       	andi	r25, 0x01	; 1
   1032a:	a0 70       	andi	r26, 0x00	; 0
   1032c:	b0 70       	andi	r27, 0x00	; 0
   1032e:	fc 01       	movw	r30, r24
   10330:	f2 96       	adiw	r30, 0x32	; 50
   10332:	ec 0f       	add	r30, r28
   10334:	fd 1f       	adc	r31, r29
			val |= LD_DWORD(p) & 0xF0000000;
   10336:	23 81       	ldd	r18, Z+3	; 0x03
   10338:	30 e0       	ldi	r19, 0x00	; 0
   1033a:	40 e0       	ldi	r20, 0x00	; 0
   1033c:	50 e0       	ldi	r21, 0x00	; 0
   1033e:	52 2f       	mov	r21, r18
   10340:	44 27       	eor	r20, r20
   10342:	33 27       	eor	r19, r19
   10344:	22 27       	eor	r18, r18
   10346:	8c 0f       	add	r24, r28
   10348:	9d 1f       	adc	r25, r29
   1034a:	20 70       	andi	r18, 0x00	; 0
   1034c:	30 70       	andi	r19, 0x00	; 0
   1034e:	40 70       	andi	r20, 0x00	; 0
   10350:	50 7f       	andi	r21, 0xF0	; 240
   10352:	28 29       	or	r18, r8
   10354:	39 29       	or	r19, r9
   10356:	4a 29       	or	r20, r10
   10358:	5b 29       	or	r21, r11
			ST_DWORD(p, val);
   1035a:	dc 01       	movw	r26, r24
   1035c:	d2 96       	adiw	r26, 0x32	; 50
   1035e:	2c 93       	st	X, r18
   10360:	d2 97       	sbiw	r26, 0x32	; 50
   10362:	31 83       	std	Z+1, r19	; 0x01
   10364:	42 83       	std	Z+2, r20	; 0x02
   10366:	53 83       	std	Z+3, r21	; 0x03
			break;
   10368:	02 c0       	rjmp	.+4      	; 0x1036e <_Z7put_fatP5FATFSmm+0x1fc>

		default :
			res = FR_INT_ERR;
   1036a:	62 e0       	ldi	r22, 0x02	; 2
   1036c:	70 e0       	ldi	r23, 0x00	; 0
		}
		fs->wflag = 1;
   1036e:	81 e0       	ldi	r24, 0x01	; 1
   10370:	8c 83       	std	Y+4, r24	; 0x04
   10372:	02 c0       	rjmp	.+4      	; 0x10378 <_Z7put_fatP5FATFSmm+0x206>
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;
   10374:	62 e0       	ldi	r22, 0x02	; 2
   10376:	70 e0       	ldi	r23, 0x00	; 0
		}
		fs->wflag = 1;
	}

	return res;
}
   10378:	cb 01       	movw	r24, r22
   1037a:	df 91       	pop	r29
   1037c:	cf 91       	pop	r28
   1037e:	1f 91       	pop	r17
   10380:	0f 91       	pop	r16
   10382:	ff 90       	pop	r15
   10384:	ef 90       	pop	r14
   10386:	df 90       	pop	r13
   10388:	cf 90       	pop	r12
   1038a:	bf 90       	pop	r11
   1038c:	af 90       	pop	r10
   1038e:	9f 90       	pop	r9
   10390:	8f 90       	pop	r8
   10392:	7f 90       	pop	r7
   10394:	6f 90       	pop	r6
   10396:	5f 90       	pop	r5
   10398:	4f 90       	pop	r4
   1039a:	08 95       	ret

0001039c <_ZL12create_chainP5FATFSm>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   1039c:	4f 92       	push	r4
   1039e:	5f 92       	push	r5
   103a0:	6f 92       	push	r6
   103a2:	7f 92       	push	r7
   103a4:	8f 92       	push	r8
   103a6:	9f 92       	push	r9
   103a8:	af 92       	push	r10
   103aa:	bf 92       	push	r11
   103ac:	cf 92       	push	r12
   103ae:	df 92       	push	r13
   103b0:	ef 92       	push	r14
   103b2:	ff 92       	push	r15
   103b4:	0f 93       	push	r16
   103b6:	1f 93       	push	r17
   103b8:	cf 93       	push	r28
   103ba:	df 93       	push	r29
   103bc:	ec 01       	movw	r28, r24
   103be:	2a 01       	movw	r4, r20
   103c0:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   103c2:	41 15       	cp	r20, r1
   103c4:	51 05       	cpc	r21, r1
   103c6:	61 05       	cpc	r22, r1
   103c8:	71 05       	cpc	r23, r1
   103ca:	99 f4       	brne	.+38     	; 0x103f2 <_ZL12create_chainP5FATFSm+0x56>
		scl = fs->last_clust;			/* Get suggested start point */
   103cc:	8a 84       	ldd	r8, Y+10	; 0x0a
   103ce:	9b 84       	ldd	r9, Y+11	; 0x0b
   103d0:	ac 84       	ldd	r10, Y+12	; 0x0c
   103d2:	bd 84       	ldd	r11, Y+13	; 0x0d
		if (!scl || scl >= fs->n_fatent) scl = 1;
   103d4:	81 14       	cp	r8, r1
   103d6:	91 04       	cpc	r9, r1
   103d8:	a1 04       	cpc	r10, r1
   103da:	b1 04       	cpc	r11, r1
   103dc:	09 f1       	breq	.+66     	; 0x10420 <_ZL12create_chainP5FATFSm+0x84>
   103de:	8a 8d       	ldd	r24, Y+26	; 0x1a
   103e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
   103e2:	ac 8d       	ldd	r26, Y+28	; 0x1c
   103e4:	bd 8d       	ldd	r27, Y+29	; 0x1d
   103e6:	88 16       	cp	r8, r24
   103e8:	99 06       	cpc	r9, r25
   103ea:	aa 06       	cpc	r10, r26
   103ec:	bb 06       	cpc	r11, r27
   103ee:	c0 f4       	brcc	.+48     	; 0x10420 <_ZL12create_chainP5FATFSm+0x84>
   103f0:	1c c0       	rjmp	.+56     	; 0x1042a <_ZL12create_chainP5FATFSm+0x8e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   103f2:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   103f6:	9b 01       	movw	r18, r22
   103f8:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;			/* It is an invalid cluster */
   103fa:	62 30       	cpi	r22, 0x02	; 2
   103fc:	71 05       	cpc	r23, r1
   103fe:	81 05       	cpc	r24, r1
   10400:	91 05       	cpc	r25, r1
   10402:	08 f4       	brcc	.+2      	; 0x10406 <_ZL12create_chainP5FATFSm+0x6a>
   10404:	94 c0       	rjmp	.+296    	; 0x1052e <_ZL12create_chainP5FATFSm+0x192>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   10406:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10408:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1040a:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1040c:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1040e:	28 17       	cp	r18, r24
   10410:	39 07       	cpc	r19, r25
   10412:	4a 07       	cpc	r20, r26
   10414:	5b 07       	cpc	r21, r27
   10416:	08 f4       	brcc	.+2      	; 0x1041a <_ZL12create_chainP5FATFSm+0x7e>
   10418:	8e c0       	rjmp	.+284    	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
   1041a:	53 01       	movw	r10, r6
   1041c:	42 01       	movw	r8, r4
   1041e:	05 c0       	rjmp	.+10     	; 0x1042a <_ZL12create_chainP5FATFSm+0x8e>
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (!scl || scl >= fs->n_fatent) scl = 1;
   10420:	b1 e0       	ldi	r27, 0x01	; 1
   10422:	8b 2e       	mov	r8, r27
   10424:	91 2c       	mov	r9, r1
   10426:	a1 2c       	mov	r10, r1
   10428:	b1 2c       	mov	r11, r1
   1042a:	75 01       	movw	r14, r10
   1042c:	64 01       	movw	r12, r8
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
   1042e:	08 94       	sec
   10430:	c1 1c       	adc	r12, r1
   10432:	d1 1c       	adc	r13, r1
   10434:	e1 1c       	adc	r14, r1
   10436:	f1 1c       	adc	r15, r1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   10438:	8a 8d       	ldd	r24, Y+26	; 0x1a
   1043a:	9b 8d       	ldd	r25, Y+27	; 0x1b
   1043c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1043e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   10440:	c8 16       	cp	r12, r24
   10442:	d9 06       	cpc	r13, r25
   10444:	ea 06       	cpc	r14, r26
   10446:	fb 06       	cpc	r15, r27
   10448:	60 f0       	brcs	.+24     	; 0x10462 <_ZL12create_chainP5FATFSm+0xc6>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
   1044a:	22 e0       	ldi	r18, 0x02	; 2
   1044c:	82 16       	cp	r8, r18
   1044e:	91 04       	cpc	r9, r1
   10450:	a1 04       	cpc	r10, r1
   10452:	b1 04       	cpc	r11, r1
   10454:	08 f4       	brcc	.+2      	; 0x10458 <_ZL12create_chainP5FATFSm+0xbc>
   10456:	64 c0       	rjmp	.+200    	; 0x10520 <_ZL12create_chainP5FATFSm+0x184>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
   10458:	a2 e0       	ldi	r26, 0x02	; 2
   1045a:	ca 2e       	mov	r12, r26
   1045c:	d1 2c       	mov	r13, r1
   1045e:	e1 2c       	mov	r14, r1
   10460:	f1 2c       	mov	r15, r1
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   10462:	ce 01       	movw	r24, r28
   10464:	b7 01       	movw	r22, r14
   10466:	a6 01       	movw	r20, r12
   10468:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   1046c:	9b 01       	movw	r18, r22
   1046e:	ac 01       	movw	r20, r24
		if (cs == 0) break;				/* Found a free cluster */
   10470:	61 15       	cp	r22, r1
   10472:	71 05       	cpc	r23, r1
   10474:	81 05       	cpc	r24, r1
   10476:	91 05       	cpc	r25, r1
   10478:	a9 f0       	breq	.+42     	; 0x104a4 <_ZL12create_chainP5FATFSm+0x108>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   1047a:	2f 3f       	cpi	r18, 0xFF	; 255
   1047c:	8f ef       	ldi	r24, 0xFF	; 255
   1047e:	38 07       	cpc	r19, r24
   10480:	8f ef       	ldi	r24, 0xFF	; 255
   10482:	48 07       	cpc	r20, r24
   10484:	8f ef       	ldi	r24, 0xFF	; 255
   10486:	58 07       	cpc	r21, r24
   10488:	09 f4       	brne	.+2      	; 0x1048c <_ZL12create_chainP5FATFSm+0xf0>
   1048a:	55 c0       	rjmp	.+170    	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
   1048c:	21 30       	cpi	r18, 0x01	; 1
   1048e:	31 05       	cpc	r19, r1
   10490:	41 05       	cpc	r20, r1
   10492:	51 05       	cpc	r21, r1
   10494:	09 f4       	brne	.+2      	; 0x10498 <_ZL12create_chainP5FATFSm+0xfc>
   10496:	4f c0       	rjmp	.+158    	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
   10498:	c8 14       	cp	r12, r8
   1049a:	d9 04       	cpc	r13, r9
   1049c:	ea 04       	cpc	r14, r10
   1049e:	fb 04       	cpc	r15, r11
   104a0:	31 f6       	brne	.-116    	; 0x1042e <_ZL12create_chainP5FATFSm+0x92>
   104a2:	3e c0       	rjmp	.+124    	; 0x10520 <_ZL12create_chainP5FATFSm+0x184>
		if (ncl >= fs->n_fatent) {		/* Wrap around */
			ncl = 2;
			if (ncl > scl) return 0;	/* No free cluster */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
   104a4:	8c 2c       	mov	r8, r12
   104a6:	bd 2c       	mov	r11, r13
   104a8:	ae 2c       	mov	r10, r14
   104aa:	9f 2c       	mov	r9, r15
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   104ac:	ce 01       	movw	r24, r28
   104ae:	a6 01       	movw	r20, r12
   104b0:	b7 01       	movw	r22, r14
   104b2:	0f ef       	ldi	r16, 0xFF	; 255
   104b4:	1f ef       	ldi	r17, 0xFF	; 255
   104b6:	2f ef       	ldi	r18, 0xFF	; 255
   104b8:	3f e0       	ldi	r19, 0x0F	; 15
   104ba:	0e 94 b9 80 	call	0x10172	; 0x10172 <_Z7put_fatP5FATFSmm>
	if (res == FR_OK && clst != 0) {
   104be:	00 97       	sbiw	r24, 0x00	; 0
   104c0:	41 f5       	brne	.+80     	; 0x10512 <_ZL12create_chainP5FATFSm+0x176>
   104c2:	41 14       	cp	r4, r1
   104c4:	51 04       	cpc	r5, r1
   104c6:	61 04       	cpc	r6, r1
   104c8:	71 04       	cpc	r7, r1
   104ca:	49 f0       	breq	.+18     	; 0x104de <_ZL12create_chainP5FATFSm+0x142>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   104cc:	ce 01       	movw	r24, r28
   104ce:	b3 01       	movw	r22, r6
   104d0:	a2 01       	movw	r20, r4
   104d2:	86 01       	movw	r16, r12
   104d4:	97 01       	movw	r18, r14
   104d6:	0e 94 b9 80 	call	0x10172	; 0x10172 <_Z7put_fatP5FATFSmm>
	}
	if (res == FR_OK) {
   104da:	00 97       	sbiw	r24, 0x00	; 0
   104dc:	d1 f4       	brne	.+52     	; 0x10512 <_ZL12create_chainP5FATFSm+0x176>
		fs->last_clust = ncl;			/* Update FSINFO */
   104de:	8a 86       	std	Y+10, r8	; 0x0a
   104e0:	bb 86       	std	Y+11, r11	; 0x0b
   104e2:	ac 86       	std	Y+12, r10	; 0x0c
   104e4:	9d 86       	std	Y+13, r9	; 0x0d
		if (fs->free_clust != 0xFFFFFFFF) {
   104e6:	8e 85       	ldd	r24, Y+14	; 0x0e
   104e8:	9f 85       	ldd	r25, Y+15	; 0x0f
   104ea:	a8 89       	ldd	r26, Y+16	; 0x10
   104ec:	b9 89       	ldd	r27, Y+17	; 0x11
   104ee:	8f 3f       	cpi	r24, 0xFF	; 255
   104f0:	2f ef       	ldi	r18, 0xFF	; 255
   104f2:	92 07       	cpc	r25, r18
   104f4:	2f ef       	ldi	r18, 0xFF	; 255
   104f6:	a2 07       	cpc	r26, r18
   104f8:	2f ef       	ldi	r18, 0xFF	; 255
   104fa:	b2 07       	cpc	r27, r18
   104fc:	a9 f0       	breq	.+42     	; 0x10528 <_ZL12create_chainP5FATFSm+0x18c>
			fs->free_clust--;
   104fe:	01 97       	sbiw	r24, 0x01	; 1
   10500:	a1 09       	sbc	r26, r1
   10502:	b1 09       	sbc	r27, r1
   10504:	8e 87       	std	Y+14, r24	; 0x0e
   10506:	9f 87       	std	Y+15, r25	; 0x0f
   10508:	a8 8b       	std	Y+16, r26	; 0x10
   1050a:	b9 8b       	std	Y+17, r27	; 0x11
			fs->fsi_flag = 1;
   1050c:	81 e0       	ldi	r24, 0x01	; 1
   1050e:	8d 83       	std	Y+5, r24	; 0x05
   10510:	0b c0       	rjmp	.+22     	; 0x10528 <_ZL12create_chainP5FATFSm+0x18c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   10512:	81 30       	cpi	r24, 0x01	; 1
   10514:	91 05       	cpc	r25, r1
   10516:	59 f4       	brne	.+22     	; 0x1052e <_ZL12create_chainP5FATFSm+0x192>
   10518:	2f ef       	ldi	r18, 0xFF	; 255
   1051a:	3f ef       	ldi	r19, 0xFF	; 255
   1051c:	a9 01       	movw	r20, r18
   1051e:	0b c0       	rjmp	.+22     	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
			return cs;
		if (ncl == scl) return 0;		/* No free cluster */
   10520:	20 e0       	ldi	r18, 0x00	; 0
   10522:	30 e0       	ldi	r19, 0x00	; 0
   10524:	a9 01       	movw	r20, r18
   10526:	07 c0       	rjmp	.+14     	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
	if (res == FR_OK && clst != 0) {
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
	}
	if (res == FR_OK) {
		fs->last_clust = ncl;			/* Update FSINFO */
		if (fs->free_clust != 0xFFFFFFFF) {
   10528:	a7 01       	movw	r20, r14
   1052a:	96 01       	movw	r18, r12
   1052c:	04 c0       	rjmp	.+8      	; 0x10536 <_ZL12create_chainP5FATFSm+0x19a>
			fs->free_clust--;
			fs->fsi_flag = 1;
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   1052e:	21 e0       	ldi	r18, 0x01	; 1
   10530:	30 e0       	ldi	r19, 0x00	; 0
   10532:	40 e0       	ldi	r20, 0x00	; 0
   10534:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error code */
}
   10536:	b9 01       	movw	r22, r18
   10538:	ca 01       	movw	r24, r20
   1053a:	df 91       	pop	r29
   1053c:	cf 91       	pop	r28
   1053e:	1f 91       	pop	r17
   10540:	0f 91       	pop	r16
   10542:	ff 90       	pop	r15
   10544:	ef 90       	pop	r14
   10546:	df 90       	pop	r13
   10548:	cf 90       	pop	r12
   1054a:	bf 90       	pop	r11
   1054c:	af 90       	pop	r10
   1054e:	9f 90       	pop	r9
   10550:	8f 90       	pop	r8
   10552:	7f 90       	pop	r7
   10554:	6f 90       	pop	r6
   10556:	5f 90       	pop	r5
   10558:	4f 90       	pop	r4
   1055a:	08 95       	ret

0001055c <_ZL8dir_nextP3DIRi>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   1055c:	8f 92       	push	r8
   1055e:	9f 92       	push	r9
   10560:	af 92       	push	r10
   10562:	bf 92       	push	r11
   10564:	cf 92       	push	r12
   10566:	df 92       	push	r13
   10568:	ef 92       	push	r14
   1056a:	ff 92       	push	r15
   1056c:	0f 93       	push	r16
   1056e:	1f 93       	push	r17
   10570:	cf 93       	push	r28
   10572:	df 93       	push	r29
   10574:	ec 01       	movw	r28, r24
   10576:	5b 01       	movw	r10, r22
	DWORD clst;
	WORD i;


	i = dj->index + 1;
   10578:	cc 80       	ldd	r12, Y+4	; 0x04
   1057a:	dd 80       	ldd	r13, Y+5	; 0x05
   1057c:	08 94       	sec
   1057e:	c1 1c       	adc	r12, r1
   10580:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   10582:	c1 14       	cp	r12, r1
   10584:	d1 04       	cpc	r13, r1
   10586:	09 f4       	brne	.+2      	; 0x1058a <_ZL8dir_nextP3DIRi+0x2e>
   10588:	eb c0       	rjmp	.+470    	; 0x10760 <_ZL8dir_nextP3DIRi+0x204>
   1058a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1058c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1058e:	a8 89       	ldd	r26, Y+16	; 0x10
   10590:	b9 89       	ldd	r27, Y+17	; 0x11
   10592:	00 97       	sbiw	r24, 0x00	; 0
   10594:	a1 05       	cpc	r26, r1
   10596:	b1 05       	cpc	r27, r1
   10598:	09 f4       	brne	.+2      	; 0x1059c <_ZL8dir_nextP3DIRi+0x40>
   1059a:	e2 c0       	rjmp	.+452    	; 0x10760 <_ZL8dir_nextP3DIRi+0x204>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
   1059c:	2f e0       	ldi	r18, 0x0F	; 15
   1059e:	82 2e       	mov	r8, r18
   105a0:	91 2c       	mov	r9, r1
   105a2:	8c 20       	and	r8, r12
   105a4:	9d 20       	and	r9, r13
   105a6:	81 14       	cp	r8, r1
   105a8:	91 04       	cpc	r9, r1
   105aa:	09 f0       	breq	.+2      	; 0x105ae <_ZL8dir_nextP3DIRi+0x52>
   105ac:	c8 c0       	rjmp	.+400    	; 0x1073e <_ZL8dir_nextP3DIRi+0x1e2>
		dj->sect++;					/* Next sector */
   105ae:	01 96       	adiw	r24, 0x01	; 1
   105b0:	a1 1d       	adc	r26, r1
   105b2:	b1 1d       	adc	r27, r1
   105b4:	8e 87       	std	Y+14, r24	; 0x0e
   105b6:	9f 87       	std	Y+15, r25	; 0x0f
   105b8:	a8 8b       	std	Y+16, r26	; 0x10
   105ba:	b9 8b       	std	Y+17, r27	; 0x11

		if (dj->clust == 0) {	/* Static table */
   105bc:	4a 85       	ldd	r20, Y+10	; 0x0a
   105be:	5b 85       	ldd	r21, Y+11	; 0x0b
   105c0:	6c 85       	ldd	r22, Y+12	; 0x0c
   105c2:	7d 85       	ldd	r23, Y+13	; 0x0d
   105c4:	88 81       	ld	r24, Y
   105c6:	99 81       	ldd	r25, Y+1	; 0x01
   105c8:	41 15       	cp	r20, r1
   105ca:	51 05       	cpc	r21, r1
   105cc:	61 05       	cpc	r22, r1
   105ce:	71 05       	cpc	r23, r1
   105d0:	41 f4       	brne	.+16     	; 0x105e2 <_ZL8dir_nextP3DIRi+0x86>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   105d2:	fc 01       	movw	r30, r24
   105d4:	80 85       	ldd	r24, Z+8	; 0x08
   105d6:	91 85       	ldd	r25, Z+9	; 0x09
   105d8:	c8 16       	cp	r12, r24
   105da:	d9 06       	cpc	r13, r25
   105dc:	08 f4       	brcc	.+2      	; 0x105e0 <_ZL8dir_nextP3DIRi+0x84>
   105de:	af c0       	rjmp	.+350    	; 0x1073e <_ZL8dir_nextP3DIRi+0x1e2>
   105e0:	bf c0       	rjmp	.+382    	; 0x10760 <_ZL8dir_nextP3DIRi+0x204>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   105e2:	fc 01       	movw	r30, r24
   105e4:	22 81       	ldd	r18, Z+2	; 0x02
   105e6:	30 e0       	ldi	r19, 0x00	; 0
   105e8:	21 50       	subi	r18, 0x01	; 1
   105ea:	30 40       	sbci	r19, 0x00	; 0
   105ec:	f6 01       	movw	r30, r12
   105ee:	04 e0       	ldi	r16, 0x04	; 4
   105f0:	f6 95       	lsr	r31
   105f2:	e7 95       	ror	r30
   105f4:	0a 95       	dec	r16
   105f6:	e1 f7       	brne	.-8      	; 0x105f0 <_ZL8dir_nextP3DIRi+0x94>
   105f8:	2e 23       	and	r18, r30
   105fa:	3f 23       	and	r19, r31
   105fc:	21 15       	cp	r18, r1
   105fe:	31 05       	cpc	r19, r1
   10600:	09 f0       	breq	.+2      	; 0x10604 <_ZL8dir_nextP3DIRi+0xa8>
   10602:	9d c0       	rjmp	.+314    	; 0x1073e <_ZL8dir_nextP3DIRi+0x1e2>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   10604:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   10608:	7b 01       	movw	r14, r22
   1060a:	8c 01       	movw	r16, r24
				if (clst <= 1) return FR_INT_ERR;
   1060c:	62 30       	cpi	r22, 0x02	; 2
   1060e:	71 05       	cpc	r23, r1
   10610:	81 05       	cpc	r24, r1
   10612:	91 05       	cpc	r25, r1
   10614:	08 f4       	brcc	.+2      	; 0x10618 <_ZL8dir_nextP3DIRi+0xbc>
   10616:	aa c0       	rjmp	.+340    	; 0x1076c <_ZL8dir_nextP3DIRi+0x210>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   10618:	8f ef       	ldi	r24, 0xFF	; 255
   1061a:	e8 16       	cp	r14, r24
   1061c:	8f ef       	ldi	r24, 0xFF	; 255
   1061e:	f8 06       	cpc	r15, r24
   10620:	8f ef       	ldi	r24, 0xFF	; 255
   10622:	08 07       	cpc	r16, r24
   10624:	8f ef       	ldi	r24, 0xFF	; 255
   10626:	18 07       	cpc	r17, r24
   10628:	09 f4       	brne	.+2      	; 0x1062c <_ZL8dir_nextP3DIRi+0xd0>
   1062a:	a3 c0       	rjmp	.+326    	; 0x10772 <_ZL8dir_nextP3DIRi+0x216>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   1062c:	e8 81       	ld	r30, Y
   1062e:	f9 81       	ldd	r31, Y+1	; 0x01
   10630:	82 8d       	ldd	r24, Z+26	; 0x1a
   10632:	93 8d       	ldd	r25, Z+27	; 0x1b
   10634:	a4 8d       	ldd	r26, Z+28	; 0x1c
   10636:	b5 8d       	ldd	r27, Z+29	; 0x1d
   10638:	e8 16       	cp	r14, r24
   1063a:	f9 06       	cpc	r15, r25
   1063c:	0a 07       	cpc	r16, r26
   1063e:	1b 07       	cpc	r17, r27
   10640:	08 f4       	brcc	.+2      	; 0x10644 <_ZL8dir_nextP3DIRi+0xe8>
   10642:	6f c0       	rjmp	.+222    	; 0x10722 <_ZL8dir_nextP3DIRi+0x1c6>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   10644:	a1 14       	cp	r10, r1
   10646:	b1 04       	cpc	r11, r1
   10648:	09 f4       	brne	.+2      	; 0x1064c <_ZL8dir_nextP3DIRi+0xf0>
   1064a:	8a c0       	rjmp	.+276    	; 0x10760 <_ZL8dir_nextP3DIRi+0x204>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   1064c:	4a 85       	ldd	r20, Y+10	; 0x0a
   1064e:	5b 85       	ldd	r21, Y+11	; 0x0b
   10650:	6c 85       	ldd	r22, Y+12	; 0x0c
   10652:	7d 85       	ldd	r23, Y+13	; 0x0d
   10654:	cf 01       	movw	r24, r30
   10656:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   1065a:	7b 01       	movw	r14, r22
   1065c:	8c 01       	movw	r16, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   1065e:	61 15       	cp	r22, r1
   10660:	71 05       	cpc	r23, r1
   10662:	81 05       	cpc	r24, r1
   10664:	91 05       	cpc	r25, r1
   10666:	09 f4       	brne	.+2      	; 0x1066a <_ZL8dir_nextP3DIRi+0x10e>
   10668:	7e c0       	rjmp	.+252    	; 0x10766 <_ZL8dir_nextP3DIRi+0x20a>
					if (clst == 1) return FR_INT_ERR;
   1066a:	61 30       	cpi	r22, 0x01	; 1
   1066c:	71 05       	cpc	r23, r1
   1066e:	81 05       	cpc	r24, r1
   10670:	91 05       	cpc	r25, r1
   10672:	09 f4       	brne	.+2      	; 0x10676 <_ZL8dir_nextP3DIRi+0x11a>
   10674:	7b c0       	rjmp	.+246    	; 0x1076c <_ZL8dir_nextP3DIRi+0x210>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   10676:	6f 3f       	cpi	r22, 0xFF	; 255
   10678:	ff ef       	ldi	r31, 0xFF	; 255
   1067a:	7f 07       	cpc	r23, r31
   1067c:	ff ef       	ldi	r31, 0xFF	; 255
   1067e:	8f 07       	cpc	r24, r31
   10680:	ff ef       	ldi	r31, 0xFF	; 255
   10682:	9f 07       	cpc	r25, r31
   10684:	09 f4       	brne	.+2      	; 0x10688 <_ZL8dir_nextP3DIRi+0x12c>
   10686:	75 c0       	rjmp	.+234    	; 0x10772 <_ZL8dir_nextP3DIRi+0x216>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   10688:	88 81       	ld	r24, Y
   1068a:	99 81       	ldd	r25, Y+1	; 0x01
   1068c:	40 e0       	ldi	r20, 0x00	; 0
   1068e:	50 e0       	ldi	r21, 0x00	; 0
   10690:	ba 01       	movw	r22, r20
   10692:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10696:	00 97       	sbiw	r24, 0x00	; 0
   10698:	09 f0       	breq	.+2      	; 0x1069c <_ZL8dir_nextP3DIRi+0x140>
   1069a:	6b c0       	rjmp	.+214    	; 0x10772 <_ZL8dir_nextP3DIRi+0x216>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   1069c:	88 81       	ld	r24, Y
   1069e:	99 81       	ldd	r25, Y+1	; 0x01
   106a0:	c2 96       	adiw	r24, 0x32	; 50
   106a2:	60 e0       	ldi	r22, 0x00	; 0
   106a4:	70 e0       	ldi	r23, 0x00	; 0
   106a6:	40 e0       	ldi	r20, 0x00	; 0
   106a8:	52 e0       	ldi	r21, 0x02	; 2
   106aa:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   106ae:	a8 80       	ld	r10, Y
   106b0:	b9 80       	ldd	r11, Y+1	; 0x01
   106b2:	c5 01       	movw	r24, r10
   106b4:	b8 01       	movw	r22, r16
   106b6:	a7 01       	movw	r20, r14
   106b8:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
   106bc:	f5 01       	movw	r30, r10
   106be:	66 a7       	std	Z+46, r22	; 0x2e
   106c0:	77 a7       	std	Z+47, r23	; 0x2f
   106c2:	80 ab       	std	Z+48, r24	; 0x30
   106c4:	91 ab       	std	Z+49, r25	; 0x31
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   106c6:	bb 24       	eor	r11, r11
						dj->fs->wflag = 1;
   106c8:	aa 24       	eor	r10, r10
   106ca:	a3 94       	inc	r10
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   106cc:	19 c0       	rjmp	.+50     	; 0x10700 <_ZL8dir_nextP3DIRi+0x1a4>
						dj->fs->wflag = 1;
   106ce:	a4 82       	std	Z+4, r10	; 0x04
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   106d0:	88 81       	ld	r24, Y
   106d2:	99 81       	ldd	r25, Y+1	; 0x01
   106d4:	40 e0       	ldi	r20, 0x00	; 0
   106d6:	50 e0       	ldi	r21, 0x00	; 0
   106d8:	ba 01       	movw	r22, r20
   106da:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   106de:	00 97       	sbiw	r24, 0x00	; 0
   106e0:	09 f0       	breq	.+2      	; 0x106e4 <_ZL8dir_nextP3DIRi+0x188>
   106e2:	47 c0       	rjmp	.+142    	; 0x10772 <_ZL8dir_nextP3DIRi+0x216>
						dj->fs->winsect++;
   106e4:	e8 81       	ld	r30, Y
   106e6:	f9 81       	ldd	r31, Y+1	; 0x01
   106e8:	86 a5       	ldd	r24, Z+46	; 0x2e
   106ea:	97 a5       	ldd	r25, Z+47	; 0x2f
   106ec:	a0 a9       	ldd	r26, Z+48	; 0x30
   106ee:	b1 a9       	ldd	r27, Z+49	; 0x31
   106f0:	01 96       	adiw	r24, 0x01	; 1
   106f2:	a1 1d       	adc	r26, r1
   106f4:	b1 1d       	adc	r27, r1
   106f6:	86 a7       	std	Z+46, r24	; 0x2e
   106f8:	97 a7       	std	Z+47, r25	; 0x2f
   106fa:	a0 ab       	std	Z+48, r26	; 0x30
   106fc:	b1 ab       	std	Z+49, r27	; 0x31
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   106fe:	b3 94       	inc	r11
   10700:	e8 81       	ld	r30, Y
   10702:	f9 81       	ldd	r31, Y+1	; 0x01
   10704:	82 81       	ldd	r24, Z+2	; 0x02
   10706:	b8 16       	cp	r11, r24
   10708:	10 f3       	brcs	.-60     	; 0x106ce <_ZL8dir_nextP3DIRi+0x172>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   1070a:	86 a5       	ldd	r24, Z+46	; 0x2e
   1070c:	97 a5       	ldd	r25, Z+47	; 0x2f
   1070e:	a0 a9       	ldd	r26, Z+48	; 0x30
   10710:	b1 a9       	ldd	r27, Z+49	; 0x31
   10712:	8b 19       	sub	r24, r11
   10714:	91 09       	sbc	r25, r1
   10716:	a1 09       	sbc	r26, r1
   10718:	b1 09       	sbc	r27, r1
   1071a:	86 a7       	std	Z+46, r24	; 0x2e
   1071c:	97 a7       	std	Z+47, r25	; 0x2f
   1071e:	a0 ab       	std	Z+48, r26	; 0x30
   10720:	b1 ab       	std	Z+49, r27	; 0x31
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   10722:	ea 86       	std	Y+10, r14	; 0x0a
   10724:	fb 86       	std	Y+11, r15	; 0x0b
   10726:	0c 87       	std	Y+12, r16	; 0x0c
   10728:	1d 87       	std	Y+13, r17	; 0x0d
				dj->sect = clust2sect(dj->fs, clst);
   1072a:	88 81       	ld	r24, Y
   1072c:	99 81       	ldd	r25, Y+1	; 0x01
   1072e:	b8 01       	movw	r22, r16
   10730:	a7 01       	movw	r20, r14
   10732:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
   10736:	6e 87       	std	Y+14, r22	; 0x0e
   10738:	7f 87       	std	Y+15, r23	; 0x0f
   1073a:	88 8b       	std	Y+16, r24	; 0x10
   1073c:	99 8b       	std	Y+17, r25	; 0x11
			}
		}
	}

	dj->index = i;
   1073e:	dd 82       	std	Y+5, r13	; 0x05
   10740:	cc 82       	std	Y+4, r12	; 0x04
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
   10742:	88 81       	ld	r24, Y
   10744:	99 81       	ldd	r25, Y+1	; 0x01
   10746:	c2 96       	adiw	r24, 0x32	; 50
   10748:	15 e0       	ldi	r17, 0x05	; 5
   1074a:	88 0c       	add	r8, r8
   1074c:	99 1c       	adc	r9, r9
   1074e:	1a 95       	dec	r17
   10750:	e1 f7       	brne	.-8      	; 0x1074a <_ZL8dir_nextP3DIRi+0x1ee>
   10752:	88 0d       	add	r24, r8
   10754:	99 1d       	adc	r25, r9
   10756:	9b 8b       	std	Y+19, r25	; 0x13
   10758:	8a 8b       	std	Y+18, r24	; 0x12

	return FR_OK;
   1075a:	20 e0       	ldi	r18, 0x00	; 0
   1075c:	30 e0       	ldi	r19, 0x00	; 0
   1075e:	0b c0       	rjmp	.+22     	; 0x10776 <_ZL8dir_nextP3DIRi+0x21a>
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   10760:	24 e0       	ldi	r18, 0x04	; 4
   10762:	30 e0       	ldi	r19, 0x00	; 0
   10764:	08 c0       	rjmp	.+16     	; 0x10776 <_ZL8dir_nextP3DIRi+0x21a>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   10766:	27 e0       	ldi	r18, 0x07	; 7
   10768:	30 e0       	ldi	r19, 0x00	; 0
   1076a:	05 c0       	rjmp	.+10     	; 0x10776 <_ZL8dir_nextP3DIRi+0x21a>
					if (clst == 1) return FR_INT_ERR;
   1076c:	22 e0       	ldi	r18, 0x02	; 2
   1076e:	30 e0       	ldi	r19, 0x00	; 0
   10770:	02 c0       	rjmp	.+4      	; 0x10776 <_ZL8dir_nextP3DIRi+0x21a>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   10772:	21 e0       	ldi	r18, 0x01	; 1
   10774:	30 e0       	ldi	r19, 0x00	; 0

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
   10776:	c9 01       	movw	r24, r18
   10778:	df 91       	pop	r29
   1077a:	cf 91       	pop	r28
   1077c:	1f 91       	pop	r17
   1077e:	0f 91       	pop	r16
   10780:	ff 90       	pop	r15
   10782:	ef 90       	pop	r14
   10784:	df 90       	pop	r13
   10786:	cf 90       	pop	r12
   10788:	bf 90       	pop	r11
   1078a:	af 90       	pop	r10
   1078c:	9f 90       	pop	r9
   1078e:	8f 90       	pop	r8
   10790:	08 95       	ret

00010792 <_ZL11follow_pathP3DIRPKc>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   10792:	7f 92       	push	r7
   10794:	8f 92       	push	r8
   10796:	9f 92       	push	r9
   10798:	af 92       	push	r10
   1079a:	bf 92       	push	r11
   1079c:	cf 92       	push	r12
   1079e:	df 92       	push	r13
   107a0:	ef 92       	push	r14
   107a2:	ff 92       	push	r15
   107a4:	0f 93       	push	r16
   107a6:	1f 93       	push	r17
   107a8:	cf 93       	push	r28
   107aa:	df 93       	push	r29
   107ac:	ec 01       	movw	r28, r24
   107ae:	8b 01       	movw	r16, r22
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') { /* There is a heading separator */
   107b0:	fb 01       	movw	r30, r22
   107b2:	80 81       	ld	r24, Z
   107b4:	8f 32       	cpi	r24, 0x2F	; 47
   107b6:	11 f0       	breq	.+4      	; 0x107bc <_ZL11follow_pathP3DIRPKc+0x2a>
   107b8:	8c 35       	cpi	r24, 0x5C	; 92
   107ba:	39 f4       	brne	.+14     	; 0x107ca <_ZL11follow_pathP3DIRPKc+0x38>
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
   107bc:	0f 5f       	subi	r16, 0xFF	; 255
   107be:	1f 4f       	sbci	r17, 0xFF	; 255
   107c0:	1e 82       	std	Y+6, r1	; 0x06
   107c2:	1f 82       	std	Y+7, r1	; 0x07
   107c4:	18 86       	std	Y+8, r1	; 0x08
   107c6:	19 86       	std	Y+9, r1	; 0x09
   107c8:	0a c0       	rjmp	.+20     	; 0x107de <_ZL11follow_pathP3DIRPKc+0x4c>
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
   107ca:	e8 81       	ld	r30, Y
   107cc:	f9 81       	ldd	r31, Y+1	; 0x01
   107ce:	86 89       	ldd	r24, Z+22	; 0x16
   107d0:	97 89       	ldd	r25, Z+23	; 0x17
   107d2:	a0 8d       	ldd	r26, Z+24	; 0x18
   107d4:	b1 8d       	ldd	r27, Z+25	; 0x19
   107d6:	8e 83       	std	Y+6, r24	; 0x06
   107d8:	9f 83       	std	Y+7, r25	; 0x07
   107da:	a8 87       	std	Y+8, r26	; 0x08
   107dc:	b9 87       	std	Y+9, r27	; 0x09
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   107de:	f8 01       	movw	r30, r16
   107e0:	80 81       	ld	r24, Z
   107e2:	80 32       	cpi	r24, 0x20	; 32
   107e4:	48 f4       	brcc	.+18     	; 0x107f8 <_ZL11follow_pathP3DIRPKc+0x66>
		res = dir_sdi(dj, 0);
   107e6:	ce 01       	movw	r24, r28
   107e8:	60 e0       	ldi	r22, 0x00	; 0
   107ea:	70 e0       	ldi	r23, 0x00	; 0
   107ec:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   107f0:	9c 01       	movw	r18, r24
		dj->dir = 0;
   107f2:	1b 8a       	std	Y+19, r1	; 0x13
   107f4:	1a 8a       	std	Y+18, r1	; 0x12
   107f6:	37 c1       	rjmp	.+622    	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
   107f8:	45 e0       	ldi	r20, 0x05	; 5
   107fa:	74 2e       	mov	r7, r20
		if (cc != EOF) cc = 0;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
}
   107fc:	ec 88       	ldd	r14, Y+20	; 0x14
   107fe:	fd 88       	ldd	r15, Y+21	; 0x15
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
   10800:	c7 01       	movw	r24, r14
   10802:	60 e2       	ldi	r22, 0x20	; 32
   10804:	70 e0       	ldi	r23, 0x00	; 0
   10806:	4b e0       	ldi	r20, 0x0B	; 11
   10808:	50 e0       	ldi	r21, 0x00	; 0
   1080a:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
   1080e:	f8 01       	movw	r30, r16
   10810:	80 81       	ld	r24, Z
   10812:	8e 32       	cpi	r24, 0x2E	; 46
   10814:	41 f0       	breq	.+16     	; 0x10826 <_ZL11follow_pathP3DIRPKc+0x94>
   10816:	80 e0       	ldi	r24, 0x00	; 0
   10818:	90 e0       	ldi	r25, 0x00	; 0
   1081a:	20 e0       	ldi	r18, 0x00	; 0
   1081c:	30 e0       	ldi	r19, 0x00	; 0
   1081e:	48 e0       	ldi	r20, 0x08	; 8
   10820:	50 e0       	ldi	r21, 0x00	; 0
   10822:	dd 24       	eor	r13, r13
   10824:	20 c0       	rjmp	.+64     	; 0x10866 <_ZL11follow_pathP3DIRPKc+0xd4>
		for (;;) {
			c = (BYTE)p[si++];
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
   10826:	f7 01       	movw	r30, r14
   10828:	80 83       	st	Z, r24
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
   1082a:	f8 01       	movw	r30, r16
   1082c:	21 81       	ldd	r18, Z+1	; 0x01
			if (c != '.' || si >= 3) break;
   1082e:	2e 32       	cpi	r18, 0x2E	; 46
   10830:	39 f4       	brne	.+14     	; 0x10840 <_ZL11follow_pathP3DIRPKc+0xae>
			sfn[i++] = c;
   10832:	f7 01       	movw	r30, r14
   10834:	21 83       	std	Z+1, r18	; 0x01
	si = i = b = 0; ni = 8;
	p = *path;
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
		for (;;) {
			c = (BYTE)p[si++];
   10836:	f8 01       	movw	r30, r16
   10838:	22 81       	ldd	r18, Z+2	; 0x02
   1083a:	83 e0       	ldi	r24, 0x03	; 3
   1083c:	90 e0       	ldi	r25, 0x00	; 0
   1083e:	02 c0       	rjmp	.+4      	; 0x10844 <_ZL11follow_pathP3DIRPKc+0xb2>
   10840:	82 e0       	ldi	r24, 0x02	; 2
   10842:	90 e0       	ldi	r25, 0x00	; 0
			if (c != '.' || si >= 3) break;
			sfn[i++] = c;
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
   10844:	2f 32       	cpi	r18, 0x2F	; 47
   10846:	29 f0       	breq	.+10     	; 0x10852 <_ZL11follow_pathP3DIRPKc+0xc0>
   10848:	2c 35       	cpi	r18, 0x5C	; 92
   1084a:	19 f0       	breq	.+6      	; 0x10852 <_ZL11follow_pathP3DIRPKc+0xc0>
   1084c:	21 32       	cpi	r18, 0x21	; 33
   1084e:	08 f0       	brcs	.+2      	; 0x10852 <_ZL11follow_pathP3DIRPKc+0xc0>
   10850:	05 c1       	rjmp	.+522    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
		*path = &p[si];									/* Return pointer to the next segment */
   10852:	08 0f       	add	r16, r24
   10854:	19 1f       	adc	r17, r25
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
   10856:	21 32       	cpi	r18, 0x21	; 33
   10858:	10 f4       	brcc	.+4      	; 0x1085e <_ZL11follow_pathP3DIRPKc+0xcc>
   1085a:	84 e2       	ldi	r24, 0x24	; 36
   1085c:	01 c0       	rjmp	.+2      	; 0x10860 <_ZL11follow_pathP3DIRPKc+0xce>
   1085e:	80 e2       	ldi	r24, 0x20	; 32
   10860:	f7 01       	movw	r30, r14
   10862:	83 87       	std	Z+11, r24	; 0x0b
   10864:	15 c1       	rjmp	.+554    	; 0x10a90 <_ZL11follow_pathP3DIRPKc+0x2fe>
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
   10866:	f8 01       	movw	r30, r16
   10868:	e2 0f       	add	r30, r18
   1086a:	f3 1f       	adc	r31, r19
   1086c:	c0 80       	ld	r12, Z
   1086e:	2f 5f       	subi	r18, 0xFF	; 255
   10870:	3f 4f       	sbci	r19, 0xFF	; 255
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
   10872:	fc 2d       	mov	r31, r12
   10874:	f1 32       	cpi	r31, 0x21	; 33
   10876:	08 f4       	brcc	.+2      	; 0x1087a <_ZL11follow_pathP3DIRPKc+0xe8>
   10878:	67 c0       	rjmp	.+206    	; 0x10948 <_ZL11follow_pathP3DIRPKc+0x1b6>
   1087a:	ff 32       	cpi	r31, 0x2F	; 47
   1087c:	09 f4       	brne	.+2      	; 0x10880 <_ZL11follow_pathP3DIRPKc+0xee>
   1087e:	66 c0       	rjmp	.+204    	; 0x1094c <_ZL11follow_pathP3DIRPKc+0x1ba>
   10880:	fc 35       	cpi	r31, 0x5C	; 92
   10882:	09 f4       	brne	.+2      	; 0x10886 <_ZL11follow_pathP3DIRPKc+0xf4>
   10884:	63 c0       	rjmp	.+198    	; 0x1094c <_ZL11follow_pathP3DIRPKc+0x1ba>
		if (c == '.' || i >= ni) {
   10886:	fe 32       	cpi	r31, 0x2E	; 46
   10888:	19 f0       	breq	.+6      	; 0x10890 <_ZL11follow_pathP3DIRPKc+0xfe>
   1088a:	84 17       	cp	r24, r20
   1088c:	95 07       	cpc	r25, r21
   1088e:	78 f0       	brcs	.+30     	; 0x108ae <_ZL11follow_pathP3DIRPKc+0x11c>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
   10890:	48 30       	cpi	r20, 0x08	; 8
   10892:	51 05       	cpc	r21, r1
   10894:	09 f0       	breq	.+2      	; 0x10898 <_ZL11follow_pathP3DIRPKc+0x106>
   10896:	e2 c0       	rjmp	.+452    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
   10898:	6c 2d       	mov	r22, r12
   1089a:	6e 32       	cpi	r22, 0x2E	; 46
   1089c:	09 f0       	breq	.+2      	; 0x108a0 <_ZL11follow_pathP3DIRPKc+0x10e>
   1089e:	de c0       	rjmp	.+444    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
			i = 8; ni = 11;
			b <<= 2; continue;
   108a0:	dd 0c       	add	r13, r13
   108a2:	dd 0c       	add	r13, r13
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
   108a4:	88 e0       	ldi	r24, 0x08	; 8
   108a6:	90 e0       	ldi	r25, 0x00	; 0
   108a8:	4b e0       	ldi	r20, 0x0B	; 11
   108aa:	50 e0       	ldi	r21, 0x00	; 0
   108ac:	dc cf       	rjmp	.-72     	; 0x10866 <_ZL11follow_pathP3DIRPKc+0xd4>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char? */
   108ae:	c7 fe       	sbrs	r12, 7
   108b0:	02 c0       	rjmp	.+4      	; 0x108b6 <_ZL11follow_pathP3DIRPKc+0x124>
			b |= 3;						/* Eliminate NT flag */
   108b2:	e3 e0       	ldi	r30, 0x03	; 3
   108b4:	de 2a       	or	r13, r30
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
   108b6:	6c 2d       	mov	r22, r12
   108b8:	61 58       	subi	r22, 0x81	; 129
   108ba:	6f 31       	cpi	r22, 0x1F	; 31
   108bc:	18 f0       	brcs	.+6      	; 0x108c4 <_ZL11follow_pathP3DIRPKc+0x132>
   108be:	6f 55       	subi	r22, 0x5F	; 95
   108c0:	6d 31       	cpi	r22, 0x1D	; 29
   108c2:	f8 f4       	brcc	.+62     	; 0x10902 <_ZL11follow_pathP3DIRPKc+0x170>
			d = (BYTE)p[si++];			/* Get 2nd byte */
   108c4:	f8 01       	movw	r30, r16
   108c6:	e2 0f       	add	r30, r18
   108c8:	f3 1f       	adc	r31, r19
   108ca:	a0 81       	ld	r26, Z
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
   108cc:	6a 2f       	mov	r22, r26
   108ce:	60 54       	subi	r22, 0x40	; 64
   108d0:	6f 33       	cpi	r22, 0x3F	; 63
   108d2:	20 f0       	brcs	.+8      	; 0x108dc <_ZL11follow_pathP3DIRPKc+0x14a>
   108d4:	60 54       	subi	r22, 0x40	; 64
   108d6:	6d 37       	cpi	r22, 0x7D	; 125
   108d8:	08 f0       	brcs	.+2      	; 0x108dc <_ZL11follow_pathP3DIRPKc+0x14a>
   108da:	c0 c0       	rjmp	.+384    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
   108dc:	ba 01       	movw	r22, r20
   108de:	61 50       	subi	r22, 0x01	; 1
   108e0:	70 40       	sbci	r23, 0x00	; 0
   108e2:	86 17       	cp	r24, r22
   108e4:	97 07       	cpc	r25, r23
   108e6:	08 f0       	brcs	.+2      	; 0x108ea <_ZL11follow_pathP3DIRPKc+0x158>
   108e8:	b9 c0       	rjmp	.+370    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
			return FR_INVALID_NAME;
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
   108ea:	2f 5f       	subi	r18, 0xFF	; 255
   108ec:	3f 4f       	sbci	r19, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
   108ee:	f7 01       	movw	r30, r14
   108f0:	e8 0f       	add	r30, r24
   108f2:	f9 1f       	adc	r31, r25
   108f4:	c0 82       	st	Z, r12
   108f6:	01 96       	adiw	r24, 0x01	; 1
			sfn[i++] = d;
   108f8:	f7 01       	movw	r30, r14
   108fa:	e8 0f       	add	r30, r24
   108fc:	f9 1f       	adc	r31, r25
   108fe:	a0 83       	st	Z, r26
   10900:	21 c0       	rjmp	.+66     	; 0x10944 <_ZL11follow_pathP3DIRPKc+0x1b2>
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
   10902:	ac 2d       	mov	r26, r12
   10904:	b0 e0       	ldi	r27, 0x00	; 0
   10906:	e3 e1       	ldi	r30, 0x13	; 19
   10908:	f1 e1       	ldi	r31, 0x11	; 17
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
   1090a:	61 91       	ld	r22, Z+
   1090c:	66 23       	and	r22, r22
   1090e:	39 f0       	breq	.+14     	; 0x1091e <_ZL11follow_pathP3DIRPKc+0x18c>
   10910:	77 27       	eor	r23, r23
   10912:	67 fd       	sbrc	r22, 7
   10914:	70 95       	com	r23
   10916:	6a 17       	cp	r22, r26
   10918:	7b 07       	cpc	r23, r27
   1091a:	b9 f7       	brne	.-18     	; 0x1090a <_ZL11follow_pathP3DIRPKc+0x178>
   1091c:	9f c0       	rjmp	.+318    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {			/* ASCII large capital? */
   1091e:	6c 2d       	mov	r22, r12
   10920:	61 54       	subi	r22, 0x41	; 65
   10922:	6a 31       	cpi	r22, 0x1A	; 26
   10924:	18 f4       	brcc	.+6      	; 0x1092c <_ZL11follow_pathP3DIRPKc+0x19a>
				b |= 2;
   10926:	f2 e0       	ldi	r31, 0x02	; 2
   10928:	df 2a       	or	r13, r31
   1092a:	08 c0       	rjmp	.+16     	; 0x1093c <_ZL11follow_pathP3DIRPKc+0x1aa>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
   1092c:	6c 2d       	mov	r22, r12
   1092e:	61 56       	subi	r22, 0x61	; 97
   10930:	6a 31       	cpi	r22, 0x1A	; 26
   10932:	20 f4       	brcc	.+8      	; 0x1093c <_ZL11follow_pathP3DIRPKc+0x1aa>
					b |= 1; c -= 0x20;
   10934:	61 e0       	ldi	r22, 0x01	; 1
   10936:	d6 2a       	or	r13, r22
   10938:	e0 ee       	ldi	r30, 0xE0	; 224
   1093a:	ce 0e       	add	r12, r30
				}
			}
			sfn[i++] = c;
   1093c:	f7 01       	movw	r30, r14
   1093e:	e8 0f       	add	r30, r24
   10940:	f9 1f       	adc	r31, r25
   10942:	c0 82       	st	Z, r12
   10944:	01 96       	adiw	r24, 0x01	; 1
   10946:	8f cf       	rjmp	.-226    	; 0x10866 <_ZL11follow_pathP3DIRPKc+0xd4>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   10948:	64 e0       	ldi	r22, 0x04	; 4
   1094a:	01 c0       	rjmp	.+2      	; 0x1094e <_ZL11follow_pathP3DIRPKc+0x1bc>
   1094c:	60 e0       	ldi	r22, 0x00	; 0

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   1094e:	00 97       	sbiw	r24, 0x00	; 0
   10950:	09 f4       	brne	.+2      	; 0x10954 <_ZL11follow_pathP3DIRPKc+0x1c2>
   10952:	84 c0       	rjmp	.+264    	; 0x10a5c <_ZL11follow_pathP3DIRPKc+0x2ca>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
   10954:	f7 01       	movw	r30, r14
   10956:	80 81       	ld	r24, Z
   10958:	85 3e       	cpi	r24, 0xE5	; 229
   1095a:	09 f4       	brne	.+2      	; 0x1095e <_ZL11follow_pathP3DIRPKc+0x1cc>
   1095c:	70 82       	st	Z, r7

	if (ni == 8) b <<= 2;
   1095e:	48 30       	cpi	r20, 0x08	; 8
   10960:	51 05       	cpc	r21, r1
   10962:	11 f4       	brne	.+4      	; 0x10968 <_ZL11follow_pathP3DIRPKc+0x1d6>
   10964:	dd 0c       	add	r13, r13
   10966:	dd 0c       	add	r13, r13
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
   10968:	8d 2d       	mov	r24, r13
   1096a:	90 e0       	ldi	r25, 0x00	; 0
   1096c:	ac 01       	movw	r20, r24
   1096e:	43 70       	andi	r20, 0x03	; 3
   10970:	50 70       	andi	r21, 0x00	; 0
   10972:	41 30       	cpi	r20, 0x01	; 1
   10974:	51 05       	cpc	r21, r1
   10976:	09 f4       	brne	.+2      	; 0x1097a <_ZL11follow_pathP3DIRPKc+0x1e8>
   10978:	60 61       	ori	r22, 0x10	; 16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
   1097a:	8c 70       	andi	r24, 0x0C	; 12
   1097c:	90 70       	andi	r25, 0x00	; 0
   1097e:	84 30       	cpi	r24, 0x04	; 4
   10980:	91 05       	cpc	r25, r1
   10982:	09 f4       	brne	.+2      	; 0x10986 <_ZL11follow_pathP3DIRPKc+0x1f4>
   10984:	68 60       	ori	r22, 0x08	; 8
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
   10986:	02 0f       	add	r16, r18
   10988:	13 1f       	adc	r17, r19

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */

	sfn[NS] = c;		/* Store NT flag, File name is created */
   1098a:	f7 01       	movw	r30, r14
   1098c:	63 87       	std	Z+11, r22	; 0x0b
   1098e:	80 c0       	rjmp	.+256    	; 0x10a90 <_ZL11follow_pathP3DIRPKc+0x2fe>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   10990:	4e 85       	ldd	r20, Y+14	; 0x0e
   10992:	5f 85       	ldd	r21, Y+15	; 0x0f
   10994:	68 89       	ldd	r22, Y+16	; 0x10
   10996:	79 89       	ldd	r23, Y+17	; 0x11
   10998:	88 81       	ld	r24, Y
   1099a:	99 81       	ldd	r25, Y+1	; 0x01
   1099c:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   109a0:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
   109a2:	00 97       	sbiw	r24, 0x00	; 0
   109a4:	d1 f4       	brne	.+52     	; 0x109da <_ZL11follow_pathP3DIRPKc+0x248>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   109a6:	ea 89       	ldd	r30, Y+18	; 0x12
   109a8:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   109aa:	80 81       	ld	r24, Z
   109ac:	88 23       	and	r24, r24
   109ae:	99 f0       	breq	.+38     	; 0x109d6 <_ZL11follow_pathP3DIRPKc+0x244>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
   109b0:	83 85       	ldd	r24, Z+11	; 0x0b
   109b2:	83 fd       	sbrc	r24, 3
   109b4:	67 c0       	rjmp	.+206    	; 0x10a84 <_ZL11follow_pathP3DIRPKc+0x2f2>
   109b6:	ac 89       	ldd	r26, Y+20	; 0x14
   109b8:	bd 89       	ldd	r27, Y+21	; 0x15
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
   109ba:	af 01       	movw	r20, r30
   109bc:	45 5f       	subi	r20, 0xF5	; 245
   109be:	5f 4f       	sbci	r21, 0xFF	; 255
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   109c0:	e4 17       	cp	r30, r20
   109c2:	f5 07       	cpc	r31, r21
   109c4:	51 f0       	breq	.+20     	; 0x109da <_ZL11follow_pathP3DIRPKc+0x248>
   109c6:	81 91       	ld	r24, Z+
   109c8:	6d 91       	ld	r22, X+
   109ca:	90 e0       	ldi	r25, 0x00	; 0
   109cc:	86 1b       	sub	r24, r22
   109ce:	91 09       	sbc	r25, r1
   109d0:	00 97       	sbiw	r24, 0x00	; 0
   109d2:	b1 f3       	breq	.-20     	; 0x109c0 <_ZL11follow_pathP3DIRPKc+0x22e>
   109d4:	57 c0       	rjmp	.+174    	; 0x10a84 <_ZL11follow_pathP3DIRPKc+0x2f2>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   109d6:	24 e0       	ldi	r18, 0x04	; 4
   109d8:	30 e0       	ldi	r19, 0x00	; 0
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			ns = *(dj->fn+NS);
   109da:	ec 89       	ldd	r30, Y+20	; 0x14
   109dc:	fd 89       	ldd	r31, Y+21	; 0x15
   109de:	43 85       	ldd	r20, Z+11	; 0x0b
			if (res != FR_OK) {				/* Failed to find the object */
   109e0:	21 15       	cp	r18, r1
   109e2:	31 05       	cpc	r19, r1
   109e4:	c1 f0       	breq	.+48     	; 0x10a16 <_ZL11follow_pathP3DIRPKc+0x284>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   109e6:	24 30       	cpi	r18, 0x04	; 4
   109e8:	31 05       	cpc	r19, r1
   109ea:	e9 f5       	brne	.+122    	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
   109ec:	50 e0       	ldi	r21, 0x00	; 0
   109ee:	ca 01       	movw	r24, r20
   109f0:	84 70       	andi	r24, 0x04	; 4
   109f2:	90 70       	andi	r25, 0x00	; 0
   109f4:	45 ff       	sbrs	r20, 5
   109f6:	0c c0       	rjmp	.+24     	; 0x10a10 <_ZL11follow_pathP3DIRPKc+0x27e>
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
   109f8:	1e 82       	std	Y+6, r1	; 0x06
   109fa:	1f 82       	std	Y+7, r1	; 0x07
   109fc:	18 86       	std	Y+8, r1	; 0x08
   109fe:	19 86       	std	Y+9, r1	; 0x09
   10a00:	1b 8a       	std	Y+19, r1	; 0x13
   10a02:	1a 8a       	std	Y+18, r1	; 0x12
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
   10a04:	00 97       	sbiw	r24, 0x00	; 0
   10a06:	09 f4       	brne	.+2      	; 0x10a0a <_ZL11follow_pathP3DIRPKc+0x278>
   10a08:	f9 ce       	rjmp	.-526    	; 0x107fc <_ZL11follow_pathP3DIRPKc+0x6a>
			if (res != FR_OK) {				/* Failed to find the object */
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
				/* Object not found */
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
   10a0a:	20 e0       	ldi	r18, 0x00	; 0
   10a0c:	30 e0       	ldi	r19, 0x00	; 0
   10a0e:	2b c0       	rjmp	.+86     	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   10a10:	00 97       	sbiw	r24, 0x00	; 0
   10a12:	39 f1       	breq	.+78     	; 0x10a62 <_ZL11follow_pathP3DIRPKc+0x2d0>
   10a14:	28 c0       	rjmp	.+80     	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   10a16:	42 fd       	sbrc	r20, 2
   10a18:	26 c0       	rjmp	.+76     	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   10a1a:	ea 89       	ldd	r30, Y+18	; 0x12
   10a1c:	fb 89       	ldd	r31, Y+19	; 0x13
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   10a1e:	83 85       	ldd	r24, Z+11	; 0x0b
   10a20:	84 ff       	sbrs	r24, 4
   10a22:	1f c0       	rjmp	.+62     	; 0x10a62 <_ZL11follow_pathP3DIRPKc+0x2d0>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
   10a24:	95 88       	ldd	r9, Z+21	; 0x15
   10a26:	88 24       	eor	r8, r8
   10a28:	84 89       	ldd	r24, Z+20	; 0x14
   10a2a:	90 e0       	ldi	r25, 0x00	; 0
   10a2c:	88 29       	or	r24, r8
   10a2e:	99 29       	or	r25, r9
   10a30:	a0 e0       	ldi	r26, 0x00	; 0
   10a32:	b0 e0       	ldi	r27, 0x00	; 0
   10a34:	dc 01       	movw	r26, r24
   10a36:	99 27       	eor	r25, r25
   10a38:	88 27       	eor	r24, r24
   10a3a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   10a3c:	aa 24       	eor	r10, r10
   10a3e:	22 8d       	ldd	r18, Z+26	; 0x1a
   10a40:	30 e0       	ldi	r19, 0x00	; 0
   10a42:	2a 29       	or	r18, r10
   10a44:	3b 29       	or	r19, r11
   10a46:	40 e0       	ldi	r20, 0x00	; 0
   10a48:	50 e0       	ldi	r21, 0x00	; 0
   10a4a:	82 2b       	or	r24, r18
   10a4c:	93 2b       	or	r25, r19
   10a4e:	a4 2b       	or	r26, r20
   10a50:	b5 2b       	or	r27, r21
   10a52:	8e 83       	std	Y+6, r24	; 0x06
   10a54:	9f 83       	std	Y+7, r25	; 0x07
   10a56:	a8 87       	std	Y+8, r26	; 0x08
   10a58:	b9 87       	std	Y+9, r27	; 0x09
   10a5a:	d0 ce       	rjmp	.-608    	; 0x107fc <_ZL11follow_pathP3DIRPKc+0x6a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
   10a5c:	26 e0       	ldi	r18, 0x06	; 6
   10a5e:	30 e0       	ldi	r19, 0x00	; 0
   10a60:	02 c0       	rjmp	.+4      	; 0x10a66 <_ZL11follow_pathP3DIRPKc+0x2d4>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
   10a62:	25 e0       	ldi	r18, 0x05	; 5
   10a64:	30 e0       	ldi	r19, 0x00	; 0
			dj->sclust = LD_CLUST(dir);
		}
	}

	return res;
}
   10a66:	c9 01       	movw	r24, r18
   10a68:	df 91       	pop	r29
   10a6a:	cf 91       	pop	r28
   10a6c:	1f 91       	pop	r17
   10a6e:	0f 91       	pop	r16
   10a70:	ff 90       	pop	r15
   10a72:	ef 90       	pop	r14
   10a74:	df 90       	pop	r13
   10a76:	cf 90       	pop	r12
   10a78:	bf 90       	pop	r11
   10a7a:	af 90       	pop	r10
   10a7c:	9f 90       	pop	r9
   10a7e:	8f 90       	pop	r8
   10a80:	7f 90       	pop	r7
   10a82:	08 95       	ret
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   10a84:	ce 01       	movw	r24, r28
   10a86:	60 e0       	ldi	r22, 0x00	; 0
   10a88:	70 e0       	ldi	r23, 0x00	; 0
   10a8a:	0e 94 ae 82 	call	0x1055c	; 0x1055c <_ZL8dir_nextP3DIRi>
   10a8e:	05 c0       	rjmp	.+10     	; 0x10a9a <_ZL11follow_pathP3DIRPKc+0x308>
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   10a90:	ce 01       	movw	r24, r28
   10a92:	60 e0       	ldi	r22, 0x00	; 0
   10a94:	70 e0       	ldi	r23, 0x00	; 0
   10a96:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   10a9a:	9c 01       	movw	r18, r24
	if (res != FR_OK) return res;
   10a9c:	00 97       	sbiw	r24, 0x00	; 0
   10a9e:	09 f4       	brne	.+2      	; 0x10aa2 <_ZL11follow_pathP3DIRPKc+0x310>
   10aa0:	77 cf       	rjmp	.-274    	; 0x10990 <_ZL11follow_pathP3DIRPKc+0x1fe>
   10aa2:	9b cf       	rjmp	.-202    	; 0x109da <_ZL11follow_pathP3DIRPKc+0x248>

00010aa4 <_ZL12dir_registerP3DIR>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   10aa4:	ef 92       	push	r14
   10aa6:	ff 92       	push	r15
   10aa8:	0f 93       	push	r16
   10aaa:	1f 93       	push	r17
   10aac:	cf 93       	push	r28
   10aae:	df 93       	push	r29
   10ab0:	ec 01       	movw	r28, r24
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
   10ab2:	60 e0       	ldi	r22, 0x00	; 0
   10ab4:	70 e0       	ldi	r23, 0x00	; 0
   10ab6:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   10aba:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
   10abc:	00 97       	sbiw	r24, 0x00	; 0
   10abe:	61 f5       	brne	.+88     	; 0x10b18 <_ZL12dir_registerP3DIR+0x74>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
   10ac0:	4e 85       	ldd	r20, Y+14	; 0x0e
   10ac2:	5f 85       	ldd	r21, Y+15	; 0x0f
   10ac4:	68 89       	ldd	r22, Y+16	; 0x10
   10ac6:	79 89       	ldd	r23, Y+17	; 0x11
   10ac8:	88 81       	ld	r24, Y
   10aca:	99 81       	ldd	r25, Y+1	; 0x01
   10acc:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10ad0:	8c 01       	movw	r16, r24
			if (res != FR_OK) break;
   10ad2:	00 97       	sbiw	r24, 0x00	; 0
   10ad4:	09 f5       	brne	.+66     	; 0x10b18 <_ZL12dir_registerP3DIR+0x74>
			c = *dj->dir;
   10ad6:	ea 89       	ldd	r30, Y+18	; 0x12
   10ad8:	fb 89       	ldd	r31, Y+19	; 0x13
   10ada:	80 81       	ld	r24, Z
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
   10adc:	85 3e       	cpi	r24, 0xE5	; 229
   10ade:	21 f1       	breq	.+72     	; 0x10b28 <_ZL12dir_registerP3DIR+0x84>
   10ae0:	88 23       	and	r24, r24
   10ae2:	11 f1       	breq	.+68     	; 0x10b28 <_ZL12dir_registerP3DIR+0x84>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
   10ae4:	ce 01       	movw	r24, r28
   10ae6:	61 e0       	ldi	r22, 0x01	; 1
   10ae8:	70 e0       	ldi	r23, 0x00	; 0
   10aea:	0e 94 ae 82 	call	0x1055c	; 0x1055c <_ZL8dir_nextP3DIRi>
   10aee:	e5 cf       	rjmp	.-54     	; 0x10aba <_ZL12dir_registerP3DIR+0x16>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
   10af0:	ea 88       	ldd	r14, Y+18	; 0x12
   10af2:	fb 88       	ldd	r15, Y+19	; 0x13
			mem_set(dir, 0, 32);		/* Clean the entry */
   10af4:	c7 01       	movw	r24, r14
   10af6:	60 e0       	ldi	r22, 0x00	; 0
   10af8:	70 e0       	ldi	r23, 0x00	; 0
   10afa:	40 e2       	ldi	r20, 0x20	; 32
   10afc:	50 e0       	ldi	r21, 0x00	; 0
   10afe:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   10b02:	6c 89       	ldd	r22, Y+20	; 0x14
   10b04:	7d 89       	ldd	r23, Y+21	; 0x15
   10b06:	c7 01       	movw	r24, r14
   10b08:	4b e0       	ldi	r20, 0x0B	; 11
   10b0a:	50 e0       	ldi	r21, 0x00	; 0
   10b0c:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
   10b10:	e8 81       	ld	r30, Y
   10b12:	f9 81       	ldd	r31, Y+1	; 0x01
   10b14:	81 e0       	ldi	r24, 0x01	; 1
   10b16:	84 83       	std	Z+4, r24	; 0x04
		}
	}

	return res;
}
   10b18:	c8 01       	movw	r24, r16
   10b1a:	df 91       	pop	r29
   10b1c:	cf 91       	pop	r28
   10b1e:	1f 91       	pop	r17
   10b20:	0f 91       	pop	r16
   10b22:	ff 90       	pop	r15
   10b24:	ef 90       	pop	r14
   10b26:	08 95       	ret
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
   10b28:	4e 85       	ldd	r20, Y+14	; 0x0e
   10b2a:	5f 85       	ldd	r21, Y+15	; 0x0f
   10b2c:	68 89       	ldd	r22, Y+16	; 0x10
   10b2e:	79 89       	ldd	r23, Y+17	; 0x11
   10b30:	88 81       	ld	r24, Y
   10b32:	99 81       	ldd	r25, Y+1	; 0x01
   10b34:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10b38:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
   10b3a:	00 97       	sbiw	r24, 0x00	; 0
   10b3c:	69 f7       	brne	.-38     	; 0x10b18 <_ZL12dir_registerP3DIR+0x74>
   10b3e:	d8 cf       	rjmp	.-80     	; 0x10af0 <_ZL12dir_registerP3DIR+0x4c>

00010b40 <_ZL8dir_readP3DIR>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
   10b40:	cf 93       	push	r28
   10b42:	df 93       	push	r29
   10b44:	ec 01       	movw	r28, r24
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
   10b46:	84 e0       	ldi	r24, 0x04	; 4
   10b48:	90 e0       	ldi	r25, 0x00	; 0
	while (dj->sect) {
   10b4a:	18 c0       	rjmp	.+48     	; 0x10b7c <_ZL8dir_readP3DIR+0x3c>
		res = move_window(dj->fs, dj->sect);
   10b4c:	88 81       	ld	r24, Y
   10b4e:	99 81       	ldd	r25, Y+1	; 0x01
   10b50:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10b54:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
   10b56:	00 97       	sbiw	r24, 0x00	; 0
   10b58:	51 f5       	brne	.+84     	; 0x10bae <_ZL8dir_readP3DIR+0x6e>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   10b5a:	ea 89       	ldd	r30, Y+18	; 0x12
   10b5c:	fb 89       	ldd	r31, Y+19	; 0x13
		c = dir[DIR_Name];
   10b5e:	80 81       	ld	r24, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   10b60:	88 23       	and	r24, r24
   10b62:	09 f1       	breq	.+66     	; 0x10ba6 <_ZL8dir_readP3DIR+0x66>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
   10b64:	85 3e       	cpi	r24, 0xE5	; 229
   10b66:	19 f0       	breq	.+6      	; 0x10b6e <_ZL8dir_readP3DIR+0x2e>
   10b68:	83 85       	ldd	r24, Z+11	; 0x0b
   10b6a:	83 ff       	sbrs	r24, 3
   10b6c:	18 c0       	rjmp	.+48     	; 0x10b9e <_ZL8dir_readP3DIR+0x5e>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
   10b6e:	ce 01       	movw	r24, r28
   10b70:	60 e0       	ldi	r22, 0x00	; 0
   10b72:	70 e0       	ldi	r23, 0x00	; 0
   10b74:	0e 94 ae 82 	call	0x1055c	; 0x1055c <_ZL8dir_nextP3DIRi>
		if (res != FR_OK) break;
   10b78:	00 97       	sbiw	r24, 0x00	; 0
   10b7a:	c1 f4       	brne	.+48     	; 0x10bac <_ZL8dir_readP3DIR+0x6c>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
   10b7c:	4e 85       	ldd	r20, Y+14	; 0x0e
   10b7e:	5f 85       	ldd	r21, Y+15	; 0x0f
   10b80:	68 89       	ldd	r22, Y+16	; 0x10
   10b82:	79 89       	ldd	r23, Y+17	; 0x11
   10b84:	41 15       	cp	r20, r1
   10b86:	51 05       	cpc	r21, r1
   10b88:	61 05       	cpc	r22, r1
   10b8a:	71 05       	cpc	r23, r1
   10b8c:	f9 f6       	brne	.-66     	; 0x10b4c <_ZL8dir_readP3DIR+0xc>
   10b8e:	9c 01       	movw	r18, r24
#endif
		res = dir_next(dj, 0);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
   10b90:	00 97       	sbiw	r24, 0x00	; 0
   10b92:	29 f0       	breq	.+10     	; 0x10b9e <_ZL8dir_readP3DIR+0x5e>
   10b94:	1e 86       	std	Y+14, r1	; 0x0e
   10b96:	1f 86       	std	Y+15, r1	; 0x0f
   10b98:	18 8a       	std	Y+16, r1	; 0x10
   10b9a:	19 8a       	std	Y+17, r1	; 0x11
   10b9c:	9c 01       	movw	r18, r24

	return res;
}
   10b9e:	c9 01       	movw	r24, r18
   10ba0:	df 91       	pop	r29
   10ba2:	cf 91       	pop	r28
   10ba4:	08 95       	ret
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   10ba6:	24 e0       	ldi	r18, 0x04	; 4
   10ba8:	30 e0       	ldi	r19, 0x00	; 0
   10baa:	01 c0       	rjmp	.+2      	; 0x10bae <_ZL8dir_readP3DIR+0x6e>
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
   10bac:	9c 01       	movw	r18, r24
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
   10bae:	c9 01       	movw	r24, r18
   10bb0:	f1 cf       	rjmp	.-30     	; 0x10b94 <_ZL8dir_readP3DIR+0x54>

00010bb2 <_ZL12remove_chainP5FATFSm>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   10bb2:	9f 92       	push	r9
   10bb4:	af 92       	push	r10
   10bb6:	bf 92       	push	r11
   10bb8:	cf 92       	push	r12
   10bba:	df 92       	push	r13
   10bbc:	ef 92       	push	r14
   10bbe:	ff 92       	push	r15
   10bc0:	0f 93       	push	r16
   10bc2:	1f 93       	push	r17
   10bc4:	cf 93       	push	r28
   10bc6:	df 93       	push	r29
   10bc8:	ec 01       	movw	r28, r24
   10bca:	7a 01       	movw	r14, r20
   10bcc:	8b 01       	movw	r16, r22
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   10bce:	42 30       	cpi	r20, 0x02	; 2
   10bd0:	51 05       	cpc	r21, r1
   10bd2:	61 05       	cpc	r22, r1
   10bd4:	71 05       	cpc	r23, r1
   10bd6:	08 f4       	brcc	.+2      	; 0x10bda <_ZL12remove_chainP5FATFSm+0x28>
   10bd8:	56 c0       	rjmp	.+172    	; 0x10c86 <_ZL12remove_chainP5FATFSm+0xd4>
   10bda:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10bdc:	9b 8d       	ldd	r25, Y+27	; 0x1b
   10bde:	ac 8d       	ldd	r26, Y+28	; 0x1c
   10be0:	bd 8d       	ldd	r27, Y+29	; 0x1d
   10be2:	48 17       	cp	r20, r24
   10be4:	59 07       	cpc	r21, r25
   10be6:	6a 07       	cpc	r22, r26
   10be8:	7b 07       	cpc	r23, r27
   10bea:	f0 f1       	brcs	.+124    	; 0x10c68 <_ZL12remove_chainP5FATFSm+0xb6>
   10bec:	4c c0       	rjmp	.+152    	; 0x10c86 <_ZL12remove_chainP5FATFSm+0xd4>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
   10bee:	ce 01       	movw	r24, r28
   10bf0:	b8 01       	movw	r22, r16
   10bf2:	a7 01       	movw	r20, r14
   10bf4:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   10bf8:	5b 01       	movw	r10, r22
   10bfa:	6c 01       	movw	r12, r24
			if (nxt == 0) break;				/* Empty cluster? */
   10bfc:	61 15       	cp	r22, r1
   10bfe:	71 05       	cpc	r23, r1
   10c00:	81 05       	cpc	r24, r1
   10c02:	91 05       	cpc	r25, r1
   10c04:	e9 f1       	breq	.+122    	; 0x10c80 <_ZL12remove_chainP5FATFSm+0xce>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   10c06:	81 e0       	ldi	r24, 0x01	; 1
   10c08:	a8 16       	cp	r10, r24
   10c0a:	b1 04       	cpc	r11, r1
   10c0c:	c1 04       	cpc	r12, r1
   10c0e:	d1 04       	cpc	r13, r1
   10c10:	d1 f1       	breq	.+116    	; 0x10c86 <_ZL12remove_chainP5FATFSm+0xd4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   10c12:	2f ef       	ldi	r18, 0xFF	; 255
   10c14:	a2 16       	cp	r10, r18
   10c16:	2f ef       	ldi	r18, 0xFF	; 255
   10c18:	b2 06       	cpc	r11, r18
   10c1a:	2f ef       	ldi	r18, 0xFF	; 255
   10c1c:	c2 06       	cpc	r12, r18
   10c1e:	2f ef       	ldi	r18, 0xFF	; 255
   10c20:	d2 06       	cpc	r13, r18
   10c22:	a1 f1       	breq	.+104    	; 0x10c8c <_ZL12remove_chainP5FATFSm+0xda>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   10c24:	ce 01       	movw	r24, r28
   10c26:	b8 01       	movw	r22, r16
   10c28:	a7 01       	movw	r20, r14
   10c2a:	00 e0       	ldi	r16, 0x00	; 0
   10c2c:	10 e0       	ldi	r17, 0x00	; 0
   10c2e:	98 01       	movw	r18, r16
   10c30:	0e 94 b9 80 	call	0x10172	; 0x10172 <_Z7put_fatP5FATFSmm>
   10c34:	9c 01       	movw	r18, r24
			if (res != FR_OK) break;
   10c36:	00 97       	sbiw	r24, 0x00	; 0
   10c38:	59 f5       	brne	.+86     	; 0x10c90 <_ZL12remove_chainP5FATFSm+0xde>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   10c3a:	8e 85       	ldd	r24, Y+14	; 0x0e
   10c3c:	9f 85       	ldd	r25, Y+15	; 0x0f
   10c3e:	a8 89       	ldd	r26, Y+16	; 0x10
   10c40:	b9 89       	ldd	r27, Y+17	; 0x11
   10c42:	8f 3f       	cpi	r24, 0xFF	; 255
   10c44:	2f ef       	ldi	r18, 0xFF	; 255
   10c46:	92 07       	cpc	r25, r18
   10c48:	2f ef       	ldi	r18, 0xFF	; 255
   10c4a:	a2 07       	cpc	r26, r18
   10c4c:	2f ef       	ldi	r18, 0xFF	; 255
   10c4e:	b2 07       	cpc	r27, r18
   10c50:	41 f0       	breq	.+16     	; 0x10c62 <_ZL12remove_chainP5FATFSm+0xb0>
				fs->free_clust++;
   10c52:	01 96       	adiw	r24, 0x01	; 1
   10c54:	a1 1d       	adc	r26, r1
   10c56:	b1 1d       	adc	r27, r1
   10c58:	8e 87       	std	Y+14, r24	; 0x0e
   10c5a:	9f 87       	std	Y+15, r25	; 0x0f
   10c5c:	a8 8b       	std	Y+16, r26	; 0x10
   10c5e:	b9 8b       	std	Y+17, r27	; 0x11
				fs->fsi_flag = 1;
   10c60:	9d 82       	std	Y+5, r9	; 0x05
   10c62:	86 01       	movw	r16, r12
   10c64:	75 01       	movw	r14, r10
   10c66:	02 c0       	rjmp	.+4      	; 0x10c6c <_ZL12remove_chainP5FATFSm+0xba>
   10c68:	99 24       	eor	r9, r9
   10c6a:	93 94       	inc	r9
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->n_fatent) {			/* Not a last link? */
   10c6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10c6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
   10c70:	ac 8d       	ldd	r26, Y+28	; 0x1c
   10c72:	bd 8d       	ldd	r27, Y+29	; 0x1d
   10c74:	e8 16       	cp	r14, r24
   10c76:	f9 06       	cpc	r15, r25
   10c78:	0a 07       	cpc	r16, r26
   10c7a:	1b 07       	cpc	r17, r27
   10c7c:	08 f4       	brcc	.+2      	; 0x10c80 <_ZL12remove_chainP5FATFSm+0xce>
   10c7e:	b7 cf       	rjmp	.-146    	; 0x10bee <_ZL12remove_chainP5FATFSm+0x3c>
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
   10c80:	20 e0       	ldi	r18, 0x00	; 0
   10c82:	30 e0       	ldi	r19, 0x00	; 0
   10c84:	05 c0       	rjmp	.+10     	; 0x10c90 <_ZL12remove_chainP5FATFSm+0xde>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   10c86:	22 e0       	ldi	r18, 0x02	; 2
   10c88:	30 e0       	ldi	r19, 0x00	; 0
   10c8a:	02 c0       	rjmp	.+4      	; 0x10c90 <_ZL12remove_chainP5FATFSm+0xde>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   10c8c:	21 e0       	ldi	r18, 0x01	; 1
   10c8e:	30 e0       	ldi	r19, 0x00	; 0
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
   10c90:	c9 01       	movw	r24, r18
   10c92:	df 91       	pop	r29
   10c94:	cf 91       	pop	r28
   10c96:	1f 91       	pop	r17
   10c98:	0f 91       	pop	r16
   10c9a:	ff 90       	pop	r15
   10c9c:	ef 90       	pop	r14
   10c9e:	df 90       	pop	r13
   10ca0:	cf 90       	pop	r12
   10ca2:	bf 90       	pop	r11
   10ca4:	af 90       	pop	r10
   10ca6:	9f 90       	pop	r9
   10ca8:	08 95       	ret

00010caa <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
   10caa:	88 23       	and	r24, r24
   10cac:	99 f4       	brne	.+38     	; 0x10cd4 <f_mount+0x2a>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
   10cae:	e0 91 3b 1f 	lds	r30, 0x1F3B
   10cb2:	f0 91 3c 1f 	lds	r31, 0x1F3C

	if (rfs) {
   10cb6:	30 97       	sbiw	r30, 0x00	; 0
   10cb8:	09 f0       	breq	.+2      	; 0x10cbc <f_mount+0x12>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
   10cba:	10 82       	st	Z, r1
	}

	if (fs) {
   10cbc:	61 15       	cp	r22, r1
   10cbe:	71 05       	cpc	r23, r1
   10cc0:	11 f0       	breq	.+4      	; 0x10cc6 <f_mount+0x1c>
		fs->fs_type = 0;			/* Clear new fs object */
   10cc2:	fb 01       	movw	r30, r22
   10cc4:	10 82       	st	Z, r1
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
   10cc6:	70 93 3c 1f 	sts	0x1F3C, r23
   10cca:	60 93 3b 1f 	sts	0x1F3B, r22

	return FR_OK;
   10cce:	20 e0       	ldi	r18, 0x00	; 0
   10cd0:	30 e0       	ldi	r19, 0x00	; 0
   10cd2:	02 c0       	rjmp	.+4      	; 0x10cd8 <f_mount+0x2e>
{
	FATFS *rfs;


	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
   10cd4:	2b e0       	ldi	r18, 0x0B	; 11
   10cd6:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
   10cd8:	c9 01       	movw	r24, r18
   10cda:	08 95       	ret

00010cdc <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   10cdc:	4f 92       	push	r4
   10cde:	5f 92       	push	r5
   10ce0:	6f 92       	push	r6
   10ce2:	7f 92       	push	r7
   10ce4:	8f 92       	push	r8
   10ce6:	9f 92       	push	r9
   10ce8:	af 92       	push	r10
   10cea:	bf 92       	push	r11
   10cec:	df 92       	push	r13
   10cee:	ef 92       	push	r14
   10cf0:	ff 92       	push	r15
   10cf2:	0f 93       	push	r16
   10cf4:	1f 93       	push	r17
   10cf6:	df 93       	push	r29
   10cf8:	cf 93       	push	r28
   10cfa:	cd b7       	in	r28, 0x3d	; 61
   10cfc:	de b7       	in	r29, 0x3e	; 62
   10cfe:	a4 97       	sbiw	r28, 0x24	; 36
   10d00:	0f b6       	in	r0, 0x3f	; 63
   10d02:	f8 94       	cli
   10d04:	de bf       	out	0x3e, r29	; 62
   10d06:	0f be       	out	0x3f, r0	; 63
   10d08:	cd bf       	out	0x3d, r28	; 61
   10d0a:	7c 01       	movw	r14, r24
   10d0c:	7c a3       	std	Y+36, r23	; 0x24
   10d0e:	6b a3       	std	Y+35, r22	; 0x23
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   10d10:	dc 01       	movw	r26, r24
   10d12:	1d 92       	st	X+, r1
   10d14:	1c 92       	st	X, r1

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   10d16:	5f e1       	ldi	r21, 0x1F	; 31
   10d18:	d5 2e       	mov	r13, r21
   10d1a:	d4 22       	and	r13, r20
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   10d1c:	8e 01       	movw	r16, r28
   10d1e:	03 5f       	subi	r16, 0xF3	; 243
   10d20:	1f 4f       	sbci	r17, 0xFF	; 255
   10d22:	4e 71       	andi	r20, 0x1E	; 30
   10d24:	ce 01       	movw	r24, r28
   10d26:	83 96       	adiw	r24, 0x23	; 35
   10d28:	b8 01       	movw	r22, r16
   10d2a:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   10d2e:	9c 01       	movw	r18, r24
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   10d30:	ce 01       	movw	r24, r28
   10d32:	01 96       	adiw	r24, 0x01	; 1
   10d34:	9a a3       	std	Y+34, r25	; 0x22
   10d36:	89 a3       	std	Y+33, r24	; 0x21
	if (res == FR_OK)
   10d38:	21 15       	cp	r18, r1
   10d3a:	31 05       	cpc	r19, r1
   10d3c:	31 f4       	brne	.+12     	; 0x10d4a <f_open+0x6e>
		res = follow_path(&dj, path);	/* Follow the file path */
   10d3e:	6b a1       	ldd	r22, Y+35	; 0x23
   10d40:	7c a1       	ldd	r23, Y+36	; 0x24
   10d42:	c8 01       	movw	r24, r16
   10d44:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   10d48:	9c 01       	movw	r18, r24
	dir = dj.dir;
   10d4a:	0f 8d       	ldd	r16, Y+31	; 0x1f
   10d4c:	18 a1       	ldd	r17, Y+32	; 0x20

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   10d4e:	21 15       	cp	r18, r1
   10d50:	31 05       	cpc	r19, r1
   10d52:	29 f4       	brne	.+10     	; 0x10d5e <f_open+0x82>
		if (!dir)	/* Current dir itself */
   10d54:	01 15       	cp	r16, r1
   10d56:	11 05       	cpc	r17, r1
   10d58:	11 f4       	brne	.+4      	; 0x10d5e <f_open+0x82>
			res = FR_INVALID_NAME;
   10d5a:	26 e0       	ldi	r18, 0x06	; 6
   10d5c:	30 e0       	ldi	r19, 0x00	; 0
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   10d5e:	8d 2d       	mov	r24, r13
   10d60:	90 e0       	ldi	r25, 0x00	; 0
   10d62:	ac 01       	movw	r20, r24
   10d64:	4c 71       	andi	r20, 0x1C	; 28
   10d66:	50 70       	andi	r21, 0x00	; 0
   10d68:	41 15       	cp	r20, r1
   10d6a:	51 05       	cpc	r21, r1
   10d6c:	09 f4       	brne	.+2      	; 0x10d70 <f_open+0x94>
   10d6e:	8c c0       	rjmp	.+280    	; 0x10e88 <f_open+0x1ac>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   10d70:	21 15       	cp	r18, r1
   10d72:	31 05       	cpc	r19, r1
   10d74:	89 f0       	breq	.+34     	; 0x10d98 <f_open+0xbc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   10d76:	24 30       	cpi	r18, 0x04	; 4
   10d78:	31 05       	cpc	r19, r1
   10d7a:	29 f4       	brne	.+10     	; 0x10d86 <f_open+0xaa>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   10d7c:	ce 01       	movw	r24, r28
   10d7e:	0d 96       	adiw	r24, 0x0d	; 13
   10d80:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <_ZL12dir_registerP3DIR>
   10d84:	9c 01       	movw	r18, r24
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
   10d86:	0f 8d       	ldd	r16, Y+31	; 0x1f
   10d88:	18 a1       	ldd	r17, Y+32	; 0x20
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   10d8a:	21 15       	cp	r18, r1
   10d8c:	31 05       	cpc	r19, r1
   10d8e:	09 f0       	breq	.+2      	; 0x10d92 <f_open+0xb6>
   10d90:	ff c0       	rjmp	.+510    	; 0x10f90 <f_open+0x2b4>
#if _FS_SHARE
				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   10d92:	b8 e0       	ldi	r27, 0x08	; 8
   10d94:	db 2a       	or	r13, r27
   10d96:	07 c0       	rjmp	.+14     	; 0x10da6 <f_open+0xca>
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
   10d98:	d2 fc       	sbrc	r13, 2
   10d9a:	11 c1       	rjmp	.+546    	; 0x10fbe <f_open+0x2e2>
				res = FR_EXIST;
			} else {
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
   10d9c:	f8 01       	movw	r30, r16
   10d9e:	83 85       	ldd	r24, Z+11	; 0x0b
   10da0:	81 71       	andi	r24, 0x11	; 17
   10da2:	09 f0       	breq	.+2      	; 0x10da6 <f_open+0xca>
   10da4:	12 c1       	rjmp	.+548    	; 0x10fca <f_open+0x2ee>
					res = FR_DENIED;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   10da6:	d3 fe       	sbrs	r13, 3
   10da8:	7d c0       	rjmp	.+250    	; 0x10ea4 <f_open+0x1c8>
			dw = get_fattime();					/* Created time */
   10daa:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, dw);
   10dae:	d8 01       	movw	r26, r16
   10db0:	1e 96       	adiw	r26, 0x0e	; 14
   10db2:	6c 93       	st	X, r22
   10db4:	1e 97       	sbiw	r26, 0x0e	; 14
   10db6:	1f 96       	adiw	r26, 0x0f	; 15
   10db8:	7c 93       	st	X, r23
   10dba:	1f 97       	sbiw	r26, 0x0f	; 15
   10dbc:	50 96       	adiw	r26, 0x10	; 16
   10dbe:	8c 93       	st	X, r24
   10dc0:	50 97       	sbiw	r26, 0x10	; 16
   10dc2:	51 96       	adiw	r26, 0x11	; 17
   10dc4:	9c 93       	st	X, r25
   10dc6:	51 97       	sbiw	r26, 0x11	; 17
			dir[DIR_Attr] = 0;					/* Reset attribute */
   10dc8:	1b 96       	adiw	r26, 0x0b	; 11
   10dca:	1c 92       	st	X, r1
   10dcc:	1b 97       	sbiw	r26, 0x0b	; 11
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   10dce:	5c 96       	adiw	r26, 0x1c	; 28
   10dd0:	1c 92       	st	X, r1
   10dd2:	5c 97       	sbiw	r26, 0x1c	; 28
   10dd4:	5d 96       	adiw	r26, 0x1d	; 29
   10dd6:	1c 92       	st	X, r1
   10dd8:	5d 97       	sbiw	r26, 0x1d	; 29
   10dda:	5e 96       	adiw	r26, 0x1e	; 30
   10ddc:	1c 92       	st	X, r1
   10dde:	5e 97       	sbiw	r26, 0x1e	; 30
   10de0:	5f 96       	adiw	r26, 0x1f	; 31
   10de2:	1c 92       	st	X, r1
   10de4:	5f 97       	sbiw	r26, 0x1f	; 31
			cl = LD_CLUST(dir);					/* Get start cluster */
   10de6:	55 96       	adiw	r26, 0x15	; 21
   10de8:	9c 91       	ld	r25, X
   10dea:	55 97       	sbiw	r26, 0x15	; 21
   10dec:	80 e0       	ldi	r24, 0x00	; 0
   10dee:	54 96       	adiw	r26, 0x14	; 20
   10df0:	8c 90       	ld	r8, X
   10df2:	54 97       	sbiw	r26, 0x14	; 20
   10df4:	99 24       	eor	r9, r9
   10df6:	88 2a       	or	r8, r24
   10df8:	99 2a       	or	r9, r25
   10dfa:	aa 24       	eor	r10, r10
   10dfc:	bb 24       	eor	r11, r11
   10dfe:	54 01       	movw	r10, r8
   10e00:	99 24       	eor	r9, r9
   10e02:	88 24       	eor	r8, r8
   10e04:	5b 96       	adiw	r26, 0x1b	; 27
   10e06:	3c 91       	ld	r19, X
   10e08:	5b 97       	sbiw	r26, 0x1b	; 27
   10e0a:	20 e0       	ldi	r18, 0x00	; 0
   10e0c:	5a 96       	adiw	r26, 0x1a	; 26
   10e0e:	8c 91       	ld	r24, X
   10e10:	90 e0       	ldi	r25, 0x00	; 0
   10e12:	82 2b       	or	r24, r18
   10e14:	93 2b       	or	r25, r19
   10e16:	a0 e0       	ldi	r26, 0x00	; 0
   10e18:	b0 e0       	ldi	r27, 0x00	; 0
   10e1a:	88 2a       	or	r8, r24
   10e1c:	99 2a       	or	r9, r25
   10e1e:	aa 2a       	or	r10, r26
   10e20:	bb 2a       	or	r11, r27
			ST_CLUST(dir, 0);					/* cluster = 0 */
   10e22:	f8 01       	movw	r30, r16
   10e24:	12 8e       	std	Z+26, r1	; 0x1a
   10e26:	13 8e       	std	Z+27, r1	; 0x1b
   10e28:	14 8a       	std	Z+20, r1	; 0x14
   10e2a:	15 8a       	std	Z+21, r1	; 0x15
			dj.fs->wflag = 1;
   10e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
   10e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
   10e30:	21 e0       	ldi	r18, 0x01	; 1
   10e32:	dc 01       	movw	r26, r24
   10e34:	14 96       	adiw	r26, 0x04	; 4
   10e36:	2c 93       	st	X, r18
   10e38:	14 97       	sbiw	r26, 0x04	; 4
			if (cl) {							/* Remove the cluster chain if exist */
   10e3a:	81 14       	cp	r8, r1
   10e3c:	91 04       	cpc	r9, r1
   10e3e:	a1 04       	cpc	r10, r1
   10e40:	b1 04       	cpc	r11, r1
   10e42:	81 f1       	breq	.+96     	; 0x10ea4 <f_open+0x1c8>
				dw = dj.fs->winsect;
   10e44:	9e 96       	adiw	r26, 0x2e	; 46
   10e46:	4d 90       	ld	r4, X+
   10e48:	5d 90       	ld	r5, X+
   10e4a:	6d 90       	ld	r6, X+
   10e4c:	7c 90       	ld	r7, X
   10e4e:	d1 97       	sbiw	r26, 0x31	; 49
				res = remove_chain(dj.fs, cl);
   10e50:	b5 01       	movw	r22, r10
   10e52:	a4 01       	movw	r20, r8
   10e54:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <_ZL12remove_chainP5FATFSm>
   10e58:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
   10e5a:	00 97       	sbiw	r24, 0x00	; 0
   10e5c:	09 f0       	breq	.+2      	; 0x10e60 <f_open+0x184>
   10e5e:	98 c0       	rjmp	.+304    	; 0x10f90 <f_open+0x2b4>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   10e60:	8d 85       	ldd	r24, Y+13	; 0x0d
   10e62:	9e 85       	ldd	r25, Y+14	; 0x0e
   10e64:	08 94       	sec
   10e66:	81 08       	sbc	r8, r1
   10e68:	91 08       	sbc	r9, r1
   10e6a:	a1 08       	sbc	r10, r1
   10e6c:	b1 08       	sbc	r11, r1
   10e6e:	fc 01       	movw	r30, r24
   10e70:	82 86       	std	Z+10, r8	; 0x0a
   10e72:	93 86       	std	Z+11, r9	; 0x0b
   10e74:	a4 86       	std	Z+12, r10	; 0x0c
   10e76:	b5 86       	std	Z+13, r11	; 0x0d
					res = move_window(dj.fs, dw);
   10e78:	b3 01       	movw	r22, r6
   10e7a:	a2 01       	movw	r20, r4
   10e7c:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   10e80:	9c 01       	movw	r18, r24
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
   10e82:	00 97       	sbiw	r24, 0x00	; 0
   10e84:	79 f0       	breq	.+30     	; 0x10ea4 <f_open+0x1c8>
   10e86:	84 c0       	rjmp	.+264    	; 0x10f90 <f_open+0x2b4>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   10e88:	21 15       	cp	r18, r1
   10e8a:	31 05       	cpc	r19, r1
   10e8c:	09 f0       	breq	.+2      	; 0x10e90 <f_open+0x1b4>
   10e8e:	80 c0       	rjmp	.+256    	; 0x10f90 <f_open+0x2b4>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   10e90:	d8 01       	movw	r26, r16
   10e92:	1b 96       	adiw	r26, 0x0b	; 11
   10e94:	2c 91       	ld	r18, X
   10e96:	1b 97       	sbiw	r26, 0x0b	; 11
   10e98:	24 fd       	sbrc	r18, 4
   10e9a:	94 c0       	rjmp	.+296    	; 0x10fc4 <f_open+0x2e8>
				res = FR_NO_FILE;
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   10e9c:	d1 fe       	sbrs	r13, 1
   10e9e:	02 c0       	rjmp	.+4      	; 0x10ea4 <f_open+0x1c8>
   10ea0:	20 fd       	sbrc	r18, 0
   10ea2:	93 c0       	rjmp	.+294    	; 0x10fca <f_open+0x2ee>
					res = FR_DENIED;
			}
		}
	}
	if (res == FR_OK) {
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   10ea4:	d3 fe       	sbrs	r13, 3
   10ea6:	02 c0       	rjmp	.+4      	; 0x10eac <f_open+0x1d0>
			mode |= FA__WRITTEN;
   10ea8:	b0 e2       	ldi	r27, 0x20	; 32
   10eaa:	db 2a       	or	r13, r27
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   10eac:	6d 85       	ldd	r22, Y+13	; 0x0d
   10eae:	7e 85       	ldd	r23, Y+14	; 0x0e
   10eb0:	fb 01       	movw	r30, r22
   10eb2:	26 a5       	ldd	r18, Z+46	; 0x2e
   10eb4:	37 a5       	ldd	r19, Z+47	; 0x2f
   10eb6:	40 a9       	ldd	r20, Z+48	; 0x30
   10eb8:	51 a9       	ldd	r21, Z+49	; 0x31
   10eba:	d7 01       	movw	r26, r14
   10ebc:	5a 96       	adiw	r26, 0x1a	; 26
   10ebe:	2d 93       	st	X+, r18
   10ec0:	3d 93       	st	X+, r19
   10ec2:	4d 93       	st	X+, r20
   10ec4:	5c 93       	st	X, r21
   10ec6:	5d 97       	sbiw	r26, 0x1d	; 29
		fp->dir_ptr = dir;
   10ec8:	5f 96       	adiw	r26, 0x1f	; 31
   10eca:	1c 93       	st	X, r17
   10ecc:	0e 93       	st	-X, r16
   10ece:	5e 97       	sbiw	r26, 0x1e	; 30
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
		fp->flag = mode;					/* File access mode */
   10ed0:	14 96       	adiw	r26, 0x04	; 4
   10ed2:	dc 92       	st	X, r13
		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
   10ed4:	f8 01       	movw	r30, r16
   10ed6:	35 89       	ldd	r19, Z+21	; 0x15
   10ed8:	20 e0       	ldi	r18, 0x00	; 0
   10eda:	84 89       	ldd	r24, Z+20	; 0x14
   10edc:	90 e0       	ldi	r25, 0x00	; 0
   10ede:	82 2b       	or	r24, r18
   10ee0:	93 2b       	or	r25, r19
   10ee2:	a0 e0       	ldi	r26, 0x00	; 0
   10ee4:	b0 e0       	ldi	r27, 0x00	; 0
   10ee6:	dc 01       	movw	r26, r24
   10ee8:	99 27       	eor	r25, r25
   10eea:	88 27       	eor	r24, r24
   10eec:	53 8d       	ldd	r21, Z+27	; 0x1b
   10eee:	40 e0       	ldi	r20, 0x00	; 0
   10ef0:	22 8d       	ldd	r18, Z+26	; 0x1a
   10ef2:	30 e0       	ldi	r19, 0x00	; 0
   10ef4:	24 2b       	or	r18, r20
   10ef6:	35 2b       	or	r19, r21
   10ef8:	40 e0       	ldi	r20, 0x00	; 0
   10efa:	50 e0       	ldi	r21, 0x00	; 0
   10efc:	82 2b       	or	r24, r18
   10efe:	93 2b       	or	r25, r19
   10f00:	a4 2b       	or	r26, r20
   10f02:	b5 2b       	or	r27, r21
   10f04:	f7 01       	movw	r30, r14
   10f06:	86 87       	std	Z+14, r24	; 0x0e
   10f08:	97 87       	std	Z+15, r25	; 0x0f
   10f0a:	a0 8b       	std	Z+16, r26	; 0x10
   10f0c:	b1 8b       	std	Z+17, r27	; 0x11
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   10f0e:	d8 01       	movw	r26, r16
   10f10:	5f 96       	adiw	r26, 0x1f	; 31
   10f12:	8c 91       	ld	r24, X
   10f14:	90 e0       	ldi	r25, 0x00	; 0
   10f16:	a0 e0       	ldi	r26, 0x00	; 0
   10f18:	b0 e0       	ldi	r27, 0x00	; 0
   10f1a:	b8 2f       	mov	r27, r24
   10f1c:	aa 27       	eor	r26, r26
   10f1e:	99 27       	eor	r25, r25
   10f20:	88 27       	eor	r24, r24
   10f22:	f8 01       	movw	r30, r16
   10f24:	26 8d       	ldd	r18, Z+30	; 0x1e
   10f26:	30 e0       	ldi	r19, 0x00	; 0
   10f28:	40 e0       	ldi	r20, 0x00	; 0
   10f2a:	50 e0       	ldi	r21, 0x00	; 0
   10f2c:	a9 01       	movw	r20, r18
   10f2e:	33 27       	eor	r19, r19
   10f30:	22 27       	eor	r18, r18
   10f32:	82 2b       	or	r24, r18
   10f34:	93 2b       	or	r25, r19
   10f36:	a4 2b       	or	r26, r20
   10f38:	b5 2b       	or	r27, r21
   10f3a:	24 8d       	ldd	r18, Z+28	; 0x1c
   10f3c:	30 e0       	ldi	r19, 0x00	; 0
   10f3e:	40 e0       	ldi	r20, 0x00	; 0
   10f40:	50 e0       	ldi	r21, 0x00	; 0
   10f42:	82 2b       	or	r24, r18
   10f44:	93 2b       	or	r25, r19
   10f46:	a4 2b       	or	r26, r20
   10f48:	b5 2b       	or	r27, r21
   10f4a:	35 8d       	ldd	r19, Z+29	; 0x1d
   10f4c:	20 e0       	ldi	r18, 0x00	; 0
   10f4e:	40 e0       	ldi	r20, 0x00	; 0
   10f50:	50 e0       	ldi	r21, 0x00	; 0
   10f52:	82 2b       	or	r24, r18
   10f54:	93 2b       	or	r25, r19
   10f56:	a4 2b       	or	r26, r20
   10f58:	b5 2b       	or	r27, r21
   10f5a:	f7 01       	movw	r30, r14
   10f5c:	82 87       	std	Z+10, r24	; 0x0a
   10f5e:	93 87       	std	Z+11, r25	; 0x0b
   10f60:	a4 87       	std	Z+12, r26	; 0x0c
   10f62:	b5 87       	std	Z+13, r27	; 0x0d
		fp->fptr = 0;						/* File pointer */
   10f64:	d7 01       	movw	r26, r14
   10f66:	16 96       	adiw	r26, 0x06	; 6
   10f68:	1d 92       	st	X+, r1
   10f6a:	1d 92       	st	X+, r1
   10f6c:	1d 92       	st	X+, r1
   10f6e:	1c 92       	st	X, r1
   10f70:	19 97       	sbiw	r26, 0x09	; 9
		fp->dsect = 0;
   10f72:	16 8a       	std	Z+22, r1	; 0x16
   10f74:	17 8a       	std	Z+23, r1	; 0x17
   10f76:	10 8e       	std	Z+24, r1	; 0x18
   10f78:	11 8e       	std	Z+25, r1	; 0x19
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* No cluster link map table */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   10f7a:	71 83       	std	Z+1, r23	; 0x01
   10f7c:	60 83       	st	Z, r22
   10f7e:	db 01       	movw	r26, r22
   10f80:	16 96       	adiw	r26, 0x06	; 6
   10f82:	8d 91       	ld	r24, X+
   10f84:	9c 91       	ld	r25, X
   10f86:	17 97       	sbiw	r26, 0x07	; 7
   10f88:	93 83       	std	Z+3, r25	; 0x03
   10f8a:	82 83       	std	Z+2, r24	; 0x02
   10f8c:	20 e0       	ldi	r18, 0x00	; 0
   10f8e:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
   10f90:	c9 01       	movw	r24, r18
   10f92:	a4 96       	adiw	r28, 0x24	; 36
   10f94:	0f b6       	in	r0, 0x3f	; 63
   10f96:	f8 94       	cli
   10f98:	de bf       	out	0x3e, r29	; 62
   10f9a:	0f be       	out	0x3f, r0	; 63
   10f9c:	cd bf       	out	0x3d, r28	; 61
   10f9e:	cf 91       	pop	r28
   10fa0:	df 91       	pop	r29
   10fa2:	1f 91       	pop	r17
   10fa4:	0f 91       	pop	r16
   10fa6:	ff 90       	pop	r15
   10fa8:	ef 90       	pop	r14
   10faa:	df 90       	pop	r13
   10fac:	bf 90       	pop	r11
   10fae:	af 90       	pop	r10
   10fb0:	9f 90       	pop	r9
   10fb2:	8f 90       	pop	r8
   10fb4:	7f 90       	pop	r7
   10fb6:	6f 90       	pop	r6
   10fb8:	5f 90       	pop	r5
   10fba:	4f 90       	pop	r4
   10fbc:	08 95       	ret
			mode |= FA_CREATE_ALWAYS;		/* File is created */
			dir = dj.dir;					/* New entry */
		}
		else {								/* Any object is already existing */
			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
				res = FR_EXIST;
   10fbe:	28 e0       	ldi	r18, 0x08	; 8
   10fc0:	30 e0       	ldi	r19, 0x00	; 0
   10fc2:	e6 cf       	rjmp	.-52     	; 0x10f90 <f_open+0x2b4>
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
				res = FR_NO_FILE;
   10fc4:	24 e0       	ldi	r18, 0x04	; 4
   10fc6:	30 e0       	ldi	r19, 0x00	; 0
   10fc8:	e3 cf       	rjmp	.-58     	; 0x10f90 <f_open+0x2b4>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
					res = FR_DENIED;
   10fca:	27 e0       	ldi	r18, 0x07	; 7
   10fcc:	30 e0       	ldi	r19, 0x00	; 0
   10fce:	e0 cf       	rjmp	.-64     	; 0x10f90 <f_open+0x2b4>

00010fd0 <_Z6f_readP3FILPhjPj>:
	FIL *fp, 		/* Pointer to the file object */
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   10fd0:	2f 92       	push	r2
   10fd2:	3f 92       	push	r3
   10fd4:	4f 92       	push	r4
   10fd6:	5f 92       	push	r5
   10fd8:	6f 92       	push	r6
   10fda:	7f 92       	push	r7
   10fdc:	8f 92       	push	r8
   10fde:	9f 92       	push	r9
   10fe0:	af 92       	push	r10
   10fe2:	bf 92       	push	r11
   10fe4:	cf 92       	push	r12
   10fe6:	df 92       	push	r13
   10fe8:	ef 92       	push	r14
   10fea:	ff 92       	push	r15
   10fec:	0f 93       	push	r16
   10fee:	1f 93       	push	r17
   10ff0:	df 93       	push	r29
   10ff2:	cf 93       	push	r28
   10ff4:	00 d0       	rcall	.+0      	; 0x10ff6 <_Z6f_readP3FILPhjPj+0x26>
   10ff6:	0f 92       	push	r0
   10ff8:	cd b7       	in	r28, 0x3d	; 61
   10ffa:	de b7       	in	r29, 0x3e	; 62
   10ffc:	9c 83       	std	Y+4, r25	; 0x04
   10ffe:	8b 83       	std	Y+3, r24	; 0x03
   11000:	06 2f       	mov	r16, r22
   11002:	c7 2e       	mov	r12, r23
   11004:	2a 01       	movw	r4, r20
   11006:	3a 83       	std	Y+2, r19	; 0x02
   11008:	29 83       	std	Y+1, r18	; 0x01
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
   1100a:	d9 01       	movw	r26, r18
   1100c:	1d 92       	st	X+, r1
   1100e:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   11010:	fc 01       	movw	r30, r24
   11012:	62 81       	ldd	r22, Z+2	; 0x02
   11014:	73 81       	ldd	r23, Z+3	; 0x03
   11016:	80 81       	ld	r24, Z
   11018:	91 81       	ldd	r25, Z+1	; 0x01
   1101a:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   1101e:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   11020:	00 97       	sbiw	r24, 0x00	; 0
   11022:	09 f0       	breq	.+2      	; 0x11026 <_Z6f_readP3FILPhjPj+0x56>
   11024:	48 c1       	rjmp	.+656    	; 0x112b6 <_Z6f_readP3FILPhjPj+0x2e6>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
   11026:	ab 81       	ldd	r26, Y+3	; 0x03
   11028:	bc 81       	ldd	r27, Y+4	; 0x04
   1102a:	14 96       	adiw	r26, 0x04	; 4
   1102c:	8c 91       	ld	r24, X
   1102e:	14 97       	sbiw	r26, 0x04	; 4
   11030:	87 fd       	sbrc	r24, 7
   11032:	3a c1       	rjmp	.+628    	; 0x112a8 <_Z6f_readP3FILPhjPj+0x2d8>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
   11034:	80 ff       	sbrs	r24, 0
   11036:	3c c1       	rjmp	.+632    	; 0x112b0 <_Z6f_readP3FILPhjPj+0x2e0>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
   11038:	1a 96       	adiw	r26, 0x0a	; 10
   1103a:	8d 91       	ld	r24, X+
   1103c:	9d 91       	ld	r25, X+
   1103e:	0d 90       	ld	r0, X+
   11040:	bc 91       	ld	r27, X
   11042:	a0 2d       	mov	r26, r0
   11044:	eb 81       	ldd	r30, Y+3	; 0x03
   11046:	fc 81       	ldd	r31, Y+4	; 0x04
   11048:	26 81       	ldd	r18, Z+6	; 0x06
   1104a:	37 81       	ldd	r19, Z+7	; 0x07
   1104c:	40 85       	ldd	r20, Z+8	; 0x08
   1104e:	51 85       	ldd	r21, Z+9	; 0x09
   11050:	82 1b       	sub	r24, r18
   11052:	93 0b       	sbc	r25, r19
   11054:	a4 0b       	sbc	r26, r20
   11056:	b5 0b       	sbc	r27, r21
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
   11058:	92 01       	movw	r18, r4
   1105a:	40 e0       	ldi	r20, 0x00	; 0
   1105c:	50 e0       	ldi	r21, 0x00	; 0
   1105e:	82 17       	cp	r24, r18
   11060:	93 07       	cpc	r25, r19
   11062:	a4 07       	cpc	r26, r20
   11064:	b5 07       	cpc	r27, r21
   11066:	08 f4       	brcc	.+2      	; 0x1106a <_Z6f_readP3FILPhjPj+0x9a>
   11068:	2c 01       	movw	r4, r24
	FIL *fp, 		/* Pointer to the file object */
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   1106a:	20 2e       	mov	r2, r16
   1106c:	3c 2c       	mov	r3, r12
   1106e:	17 c1       	rjmp	.+558    	; 0x1129e <_Z6f_readP3FILPhjPj+0x2ce>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   11070:	ab 81       	ldd	r26, Y+3	; 0x03
   11072:	bc 81       	ldd	r27, Y+4	; 0x04
   11074:	16 96       	adiw	r26, 0x06	; 6
   11076:	2d 91       	ld	r18, X+
   11078:	3d 91       	ld	r19, X+
   1107a:	4d 91       	ld	r20, X+
   1107c:	5c 91       	ld	r21, X
   1107e:	19 97       	sbiw	r26, 0x09	; 9
   11080:	da 01       	movw	r26, r20
   11082:	c9 01       	movw	r24, r18
   11084:	91 70       	andi	r25, 0x01	; 1
   11086:	a0 70       	andi	r26, 0x00	; 0
   11088:	b0 70       	andi	r27, 0x00	; 0
   1108a:	00 97       	sbiw	r24, 0x00	; 0
   1108c:	a1 05       	cpc	r26, r1
   1108e:	b1 05       	cpc	r27, r1
   11090:	09 f0       	breq	.+2      	; 0x11094 <_Z6f_readP3FILPhjPj+0xc4>
   11092:	ac c0       	rjmp	.+344    	; 0x111ec <_Z6f_readP3FILPhjPj+0x21c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   11094:	eb 81       	ldd	r30, Y+3	; 0x03
   11096:	fc 81       	ldd	r31, Y+4	; 0x04
   11098:	80 81       	ld	r24, Z
   1109a:	91 81       	ldd	r25, Z+1	; 0x01
   1109c:	59 01       	movw	r10, r18
   1109e:	6a 01       	movw	r12, r20
   110a0:	19 e0       	ldi	r17, 0x09	; 9
   110a2:	d6 94       	lsr	r13
   110a4:	c7 94       	ror	r12
   110a6:	b7 94       	ror	r11
   110a8:	a7 94       	ror	r10
   110aa:	1a 95       	dec	r17
   110ac:	d1 f7       	brne	.-12     	; 0x110a2 <_Z6f_readP3FILPhjPj+0xd2>
   110ae:	dc 01       	movw	r26, r24
   110b0:	12 96       	adiw	r26, 0x02	; 2
   110b2:	0c 91       	ld	r16, X
   110b4:	12 97       	sbiw	r26, 0x02	; 2
   110b6:	01 50       	subi	r16, 0x01	; 1
   110b8:	0a 21       	and	r16, r10
			if (!csect) {							/* On the cluster boundary? */
   110ba:	41 f5       	brne	.+80     	; 0x1110c <_Z6f_readP3FILPhjPj+0x13c>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
   110bc:	21 15       	cp	r18, r1
   110be:	31 05       	cpc	r19, r1
   110c0:	41 05       	cpc	r20, r1
   110c2:	51 05       	cpc	r21, r1
   110c4:	29 f4       	brne	.+10     	; 0x110d0 <_Z6f_readP3FILPhjPj+0x100>
   110c6:	66 85       	ldd	r22, Z+14	; 0x0e
   110c8:	77 85       	ldd	r23, Z+15	; 0x0f
   110ca:	80 89       	ldd	r24, Z+16	; 0x10
   110cc:	91 89       	ldd	r25, Z+17	; 0x11
   110ce:	08 c0       	rjmp	.+16     	; 0x110e0 <_Z6f_readP3FILPhjPj+0x110>
   110d0:	eb 81       	ldd	r30, Y+3	; 0x03
   110d2:	fc 81       	ldd	r31, Y+4	; 0x04
   110d4:	42 89       	ldd	r20, Z+18	; 0x12
   110d6:	53 89       	ldd	r21, Z+19	; 0x13
   110d8:	64 89       	ldd	r22, Z+20	; 0x14
   110da:	75 89       	ldd	r23, Z+21	; 0x15
   110dc:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
   110e0:	62 30       	cpi	r22, 0x02	; 2
   110e2:	71 05       	cpc	r23, r1
   110e4:	81 05       	cpc	r24, r1
   110e6:	91 05       	cpc	r25, r1
   110e8:	08 f1       	brcs	.+66     	; 0x1112c <_Z6f_readP3FILPhjPj+0x15c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   110ea:	6f 3f       	cpi	r22, 0xFF	; 255
   110ec:	bf ef       	ldi	r27, 0xFF	; 255
   110ee:	7b 07       	cpc	r23, r27
   110f0:	bf ef       	ldi	r27, 0xFF	; 255
   110f2:	8b 07       	cpc	r24, r27
   110f4:	bf ef       	ldi	r27, 0xFF	; 255
   110f6:	9b 07       	cpc	r25, r27
   110f8:	09 f4       	brne	.+2      	; 0x110fc <_Z6f_readP3FILPhjPj+0x12c>
   110fa:	8c c0       	rjmp	.+280    	; 0x11214 <_Z6f_readP3FILPhjPj+0x244>
				fp->curr_clust = clst;				/* Update current cluster */
   110fc:	ab 81       	ldd	r26, Y+3	; 0x03
   110fe:	bc 81       	ldd	r27, Y+4	; 0x04
   11100:	52 96       	adiw	r26, 0x12	; 18
   11102:	6d 93       	st	X+, r22
   11104:	7d 93       	st	X+, r23
   11106:	8d 93       	st	X+, r24
   11108:	9c 93       	st	X, r25
   1110a:	55 97       	sbiw	r26, 0x15	; 21
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
   1110c:	eb 81       	ldd	r30, Y+3	; 0x03
   1110e:	fc 81       	ldd	r31, Y+4	; 0x04
   11110:	a0 80       	ld	r10, Z
   11112:	b1 80       	ldd	r11, Z+1	; 0x01
   11114:	42 89       	ldd	r20, Z+18	; 0x12
   11116:	53 89       	ldd	r21, Z+19	; 0x13
   11118:	64 89       	ldd	r22, Z+20	; 0x14
   1111a:	75 89       	ldd	r23, Z+21	; 0x15
   1111c:	c5 01       	movw	r24, r10
   1111e:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   11122:	61 15       	cp	r22, r1
   11124:	71 05       	cpc	r23, r1
   11126:	81 05       	cpc	r24, r1
   11128:	91 05       	cpc	r25, r1
   1112a:	51 f4       	brne	.+20     	; 0x11140 <_Z6f_readP3FILPhjPj+0x170>
   1112c:	ab 81       	ldd	r26, Y+3	; 0x03
   1112e:	bc 81       	ldd	r27, Y+4	; 0x04
   11130:	14 96       	adiw	r26, 0x04	; 4
   11132:	8c 91       	ld	r24, X
   11134:	14 97       	sbiw	r26, 0x04	; 4
   11136:	80 68       	ori	r24, 0x80	; 128
   11138:	14 96       	adiw	r26, 0x04	; 4
   1113a:	8c 93       	st	X, r24
   1113c:	14 97       	sbiw	r26, 0x04	; 4
   1113e:	b4 c0       	rjmp	.+360    	; 0x112a8 <_Z6f_readP3FILPhjPj+0x2d8>
			sect += csect;
   11140:	3b 01       	movw	r6, r22
   11142:	4c 01       	movw	r8, r24
   11144:	60 0e       	add	r6, r16
   11146:	71 1c       	adc	r7, r1
   11148:	81 1c       	adc	r8, r1
   1114a:	91 1c       	adc	r9, r1
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
   1114c:	62 01       	movw	r12, r4
   1114e:	cd 2c       	mov	r12, r13
   11150:	dd 24       	eor	r13, r13
   11152:	c6 94       	lsr	r12
			if (cc) {								/* Read maximum contiguous sectors directly */
   11154:	c1 14       	cp	r12, r1
   11156:	d1 04       	cpc	r13, r1
   11158:	09 f4       	brne	.+2      	; 0x1115c <_Z6f_readP3FILPhjPj+0x18c>
   1115a:	42 c0       	rjmp	.+132    	; 0x111e0 <_Z6f_readP3FILPhjPj+0x210>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
   1115c:	f5 01       	movw	r30, r10
   1115e:	82 81       	ldd	r24, Z+2	; 0x02
   11160:	10 e0       	ldi	r17, 0x00	; 0
   11162:	96 01       	movw	r18, r12
   11164:	20 0f       	add	r18, r16
   11166:	31 1f       	adc	r19, r17
   11168:	90 e0       	ldi	r25, 0x00	; 0
   1116a:	82 17       	cp	r24, r18
   1116c:	93 07       	cpc	r25, r19
   1116e:	18 f4       	brcc	.+6      	; 0x11176 <_Z6f_readP3FILPhjPj+0x1a6>
					cc = fp->fs->csize - csect;
   11170:	6c 01       	movw	r12, r24
   11172:	c0 1a       	sub	r12, r16
   11174:	d1 0a       	sbc	r13, r17
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   11176:	d5 01       	movw	r26, r10
   11178:	11 96       	adiw	r26, 0x01	; 1
   1117a:	8c 91       	ld	r24, X
   1117c:	b1 01       	movw	r22, r2
   1117e:	a4 01       	movw	r20, r8
   11180:	93 01       	movw	r18, r6
   11182:	0c 2d       	mov	r16, r12
   11184:	0e 94 f1 9f 	call	0x13fe2	; 0x13fe2 <_Z9disk_readhPhmh>
   11188:	00 97       	sbiw	r24, 0x00	; 0
   1118a:	09 f0       	breq	.+2      	; 0x1118e <_Z6f_readP3FILPhjPj+0x1be>
   1118c:	43 c0       	rjmp	.+134    	; 0x11214 <_Z6f_readP3FILPhjPj+0x244>
					ABORT(fp->fs, FR_DISK_ERR);
#if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   1118e:	ab 81       	ldd	r26, Y+3	; 0x03
   11190:	bc 81       	ldd	r27, Y+4	; 0x04
   11192:	ed 91       	ld	r30, X+
   11194:	fc 91       	ld	r31, X
   11196:	11 97       	sbiw	r26, 0x01	; 1
   11198:	84 81       	ldd	r24, Z+4	; 0x04
   1119a:	88 23       	and	r24, r24
   1119c:	e1 f0       	breq	.+56     	; 0x111d6 <_Z6f_readP3FILPhjPj+0x206>
   1119e:	86 a5       	ldd	r24, Z+46	; 0x2e
   111a0:	97 a5       	ldd	r25, Z+47	; 0x2f
   111a2:	a0 a9       	ldd	r26, Z+48	; 0x30
   111a4:	b1 a9       	ldd	r27, Z+49	; 0x31
   111a6:	86 19       	sub	r24, r6
   111a8:	97 09       	sbc	r25, r7
   111aa:	a8 09       	sbc	r26, r8
   111ac:	b9 09       	sbc	r27, r9
   111ae:	96 01       	movw	r18, r12
   111b0:	40 e0       	ldi	r20, 0x00	; 0
   111b2:	50 e0       	ldi	r21, 0x00	; 0
   111b4:	82 17       	cp	r24, r18
   111b6:	93 07       	cpc	r25, r19
   111b8:	a4 07       	cpc	r26, r20
   111ba:	b5 07       	cpc	r27, r21
   111bc:	60 f4       	brcc	.+24     	; 0x111d6 <_Z6f_readP3FILPhjPj+0x206>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   111be:	98 2f       	mov	r25, r24
   111c0:	88 27       	eor	r24, r24
   111c2:	99 0f       	add	r25, r25
   111c4:	bf 01       	movw	r22, r30
   111c6:	6e 5c       	subi	r22, 0xCE	; 206
   111c8:	7f 4f       	sbci	r23, 0xFF	; 255
   111ca:	82 0d       	add	r24, r2
   111cc:	93 1d       	adc	r25, r3
   111ce:	40 e0       	ldi	r20, 0x00	; 0
   111d0:	52 e0       	ldi	r21, 0x02	; 2
   111d2:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
   111d6:	86 01       	movw	r16, r12
   111d8:	10 2f       	mov	r17, r16
   111da:	00 27       	eor	r16, r16
   111dc:	11 0f       	add	r17, r17
				continue;
   111de:	40 c0       	rjmp	.+128    	; 0x11260 <_Z6f_readP3FILPhjPj+0x290>
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   111e0:	eb 81       	ldd	r30, Y+3	; 0x03
   111e2:	fc 81       	ldd	r31, Y+4	; 0x04
   111e4:	66 8a       	std	Z+22, r6	; 0x16
   111e6:	77 8a       	std	Z+23, r7	; 0x17
   111e8:	80 8e       	std	Z+24, r8	; 0x18
   111ea:	91 8e       	std	Z+25, r9	; 0x19
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   111ec:	ab 81       	ldd	r26, Y+3	; 0x03
   111ee:	bc 81       	ldd	r27, Y+4	; 0x04
   111f0:	16 96       	adiw	r26, 0x06	; 6
   111f2:	ad 90       	ld	r10, X+
   111f4:	bd 90       	ld	r11, X+
   111f6:	cd 90       	ld	r12, X+
   111f8:	dc 90       	ld	r13, X
   111fa:	19 97       	sbiw	r26, 0x09	; 9
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
   111fc:	56 96       	adiw	r26, 0x16	; 22
   111fe:	4d 91       	ld	r20, X+
   11200:	5d 91       	ld	r21, X+
   11202:	6d 91       	ld	r22, X+
   11204:	7c 91       	ld	r23, X
   11206:	59 97       	sbiw	r26, 0x19	; 25
   11208:	8d 91       	ld	r24, X+
   1120a:	9c 91       	ld	r25, X
   1120c:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   11210:	00 97       	sbiw	r24, 0x00	; 0
   11212:	49 f0       	breq	.+18     	; 0x11226 <_Z6f_readP3FILPhjPj+0x256>
			ABORT(fp->fs, FR_DISK_ERR);
   11214:	eb 81       	ldd	r30, Y+3	; 0x03
   11216:	fc 81       	ldd	r31, Y+4	; 0x04
   11218:	84 81       	ldd	r24, Z+4	; 0x04
   1121a:	80 68       	ori	r24, 0x80	; 128
   1121c:	84 83       	std	Z+4, r24	; 0x04
   1121e:	e1 e0       	ldi	r30, 0x01	; 1
   11220:	ee 2e       	mov	r14, r30
   11222:	f1 2c       	mov	r15, r1
   11224:	48 c0       	rjmp	.+144    	; 0x112b6 <_Z6f_readP3FILPhjPj+0x2e6>
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   11226:	c5 01       	movw	r24, r10
   11228:	91 70       	andi	r25, 0x01	; 1
   1122a:	20 e0       	ldi	r18, 0x00	; 0
   1122c:	32 e0       	ldi	r19, 0x02	; 2
   1122e:	28 1b       	sub	r18, r24
   11230:	39 0b       	sbc	r19, r25
   11232:	82 01       	movw	r16, r4
   11234:	24 15       	cp	r18, r4
   11236:	35 05       	cpc	r19, r5
   11238:	08 f4       	brcc	.+2      	; 0x1123c <_Z6f_readP3FILPhjPj+0x26c>
   1123a:	89 01       	movw	r16, r18
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   1123c:	eb 81       	ldd	r30, Y+3	; 0x03
   1123e:	fc 81       	ldd	r31, Y+4	; 0x04
   11240:	86 81       	ldd	r24, Z+6	; 0x06
   11242:	97 81       	ldd	r25, Z+7	; 0x07
   11244:	a0 85       	ldd	r26, Z+8	; 0x08
   11246:	b1 85       	ldd	r27, Z+9	; 0x09
   11248:	91 70       	andi	r25, 0x01	; 1
   1124a:	a0 70       	andi	r26, 0x00	; 0
   1124c:	b0 70       	andi	r27, 0x00	; 0
   1124e:	c2 96       	adiw	r24, 0x32	; 50
   11250:	60 81       	ld	r22, Z
   11252:	71 81       	ldd	r23, Z+1	; 0x01
   11254:	68 0f       	add	r22, r24
   11256:	79 1f       	adc	r23, r25
   11258:	c1 01       	movw	r24, r2
   1125a:	a8 01       	movw	r20, r16
   1125c:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
   11260:	20 0e       	add	r2, r16
   11262:	31 1e       	adc	r3, r17
   11264:	98 01       	movw	r18, r16
   11266:	40 e0       	ldi	r20, 0x00	; 0
   11268:	50 e0       	ldi	r21, 0x00	; 0
   1126a:	eb 81       	ldd	r30, Y+3	; 0x03
   1126c:	fc 81       	ldd	r31, Y+4	; 0x04
   1126e:	86 81       	ldd	r24, Z+6	; 0x06
   11270:	97 81       	ldd	r25, Z+7	; 0x07
   11272:	a0 85       	ldd	r26, Z+8	; 0x08
   11274:	b1 85       	ldd	r27, Z+9	; 0x09
   11276:	82 0f       	add	r24, r18
   11278:	93 1f       	adc	r25, r19
   1127a:	a4 1f       	adc	r26, r20
   1127c:	b5 1f       	adc	r27, r21
   1127e:	86 83       	std	Z+6, r24	; 0x06
   11280:	97 83       	std	Z+7, r25	; 0x07
   11282:	a0 87       	std	Z+8, r26	; 0x08
   11284:	b1 87       	std	Z+9, r27	; 0x09
   11286:	a9 81       	ldd	r26, Y+1	; 0x01
   11288:	ba 81       	ldd	r27, Y+2	; 0x02
   1128a:	8d 91       	ld	r24, X+
   1128c:	9c 91       	ld	r25, X
   1128e:	11 97       	sbiw	r26, 0x01	; 1
   11290:	80 0f       	add	r24, r16
   11292:	91 1f       	adc	r25, r17
   11294:	11 96       	adiw	r26, 0x01	; 1
   11296:	9c 93       	st	X, r25
   11298:	8e 93       	st	-X, r24
   1129a:	40 1a       	sub	r4, r16
   1129c:	51 0a       	sbc	r5, r17
   1129e:	41 14       	cp	r4, r1
   112a0:	51 04       	cpc	r5, r1
   112a2:	09 f0       	breq	.+2      	; 0x112a6 <_Z6f_readP3FILPhjPj+0x2d6>
   112a4:	e5 ce       	rjmp	.-566    	; 0x11070 <_Z6f_readP3FILPhjPj+0xa0>
   112a6:	07 c0       	rjmp	.+14     	; 0x112b6 <_Z6f_readP3FILPhjPj+0x2e6>
	*br = 0;	/* Initialize byte counter */

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
   112a8:	72 e0       	ldi	r23, 0x02	; 2
   112aa:	e7 2e       	mov	r14, r23
   112ac:	f1 2c       	mov	r15, r1
   112ae:	03 c0       	rjmp	.+6      	; 0x112b6 <_Z6f_readP3FILPhjPj+0x2e6>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
   112b0:	67 e0       	ldi	r22, 0x07	; 7
   112b2:	e6 2e       	mov	r14, r22
   112b4:	f1 2c       	mov	r15, r1
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
   112b6:	c7 01       	movw	r24, r14
   112b8:	0f 90       	pop	r0
   112ba:	0f 90       	pop	r0
   112bc:	0f 90       	pop	r0
   112be:	0f 90       	pop	r0
   112c0:	cf 91       	pop	r28
   112c2:	df 91       	pop	r29
   112c4:	1f 91       	pop	r17
   112c6:	0f 91       	pop	r16
   112c8:	ff 90       	pop	r15
   112ca:	ef 90       	pop	r14
   112cc:	df 90       	pop	r13
   112ce:	cf 90       	pop	r12
   112d0:	bf 90       	pop	r11
   112d2:	af 90       	pop	r10
   112d4:	9f 90       	pop	r9
   112d6:	8f 90       	pop	r8
   112d8:	7f 90       	pop	r7
   112da:	6f 90       	pop	r6
   112dc:	5f 90       	pop	r5
   112de:	4f 90       	pop	r4
   112e0:	3f 90       	pop	r3
   112e2:	2f 90       	pop	r2
   112e4:	08 95       	ret

000112e6 <_Z7f_writeP3FILPKhjPj>:
	FIL *fp,			/* Pointer to the file object */
	const BYTE *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   112e6:	2f 92       	push	r2
   112e8:	3f 92       	push	r3
   112ea:	4f 92       	push	r4
   112ec:	5f 92       	push	r5
   112ee:	6f 92       	push	r6
   112f0:	7f 92       	push	r7
   112f2:	8f 92       	push	r8
   112f4:	9f 92       	push	r9
   112f6:	af 92       	push	r10
   112f8:	bf 92       	push	r11
   112fa:	cf 92       	push	r12
   112fc:	df 92       	push	r13
   112fe:	ef 92       	push	r14
   11300:	ff 92       	push	r15
   11302:	0f 93       	push	r16
   11304:	1f 93       	push	r17
   11306:	df 93       	push	r29
   11308:	cf 93       	push	r28
   1130a:	00 d0       	rcall	.+0      	; 0x1130c <_Z7f_writeP3FILPKhjPj+0x26>
   1130c:	0f 92       	push	r0
   1130e:	cd b7       	in	r28, 0x3d	; 61
   11310:	de b7       	in	r29, 0x3e	; 62
   11312:	9c 83       	std	Y+4, r25	; 0x04
   11314:	8b 83       	std	Y+3, r24	; 0x03
   11316:	06 2f       	mov	r16, r22
   11318:	c7 2e       	mov	r12, r23
   1131a:	2a 01       	movw	r4, r20
   1131c:	3a 83       	std	Y+2, r19	; 0x02
   1131e:	29 83       	std	Y+1, r18	; 0x01
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   11320:	d9 01       	movw	r26, r18
   11322:	1d 92       	st	X+, r1
   11324:	1c 92       	st	X, r1

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
   11326:	fc 01       	movw	r30, r24
   11328:	62 81       	ldd	r22, Z+2	; 0x02
   1132a:	73 81       	ldd	r23, Z+3	; 0x03
   1132c:	80 81       	ld	r24, Z
   1132e:	91 81       	ldd	r25, Z+1	; 0x01
   11330:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   11334:	7c 01       	movw	r14, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   11336:	00 97       	sbiw	r24, 0x00	; 0
   11338:	09 f0       	breq	.+2      	; 0x1133c <_Z7f_writeP3FILPKhjPj+0x56>
   1133a:	bb c1       	rjmp	.+886    	; 0x116b2 <_Z7f_writeP3FILPKhjPj+0x3cc>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
   1133c:	ab 81       	ldd	r26, Y+3	; 0x03
   1133e:	bc 81       	ldd	r27, Y+4	; 0x04
   11340:	14 96       	adiw	r26, 0x04	; 4
   11342:	8c 91       	ld	r24, X
   11344:	14 97       	sbiw	r26, 0x04	; 4
   11346:	87 fd       	sbrc	r24, 7
   11348:	ac c0       	rjmp	.+344    	; 0x114a2 <_Z7f_writeP3FILPKhjPj+0x1bc>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
   1134a:	81 ff       	sbrs	r24, 1
   1134c:	af c1       	rjmp	.+862    	; 0x116ac <_Z7f_writeP3FILPKhjPj+0x3c6>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
   1134e:	1a 96       	adiw	r26, 0x0a	; 10
   11350:	2d 91       	ld	r18, X+
   11352:	3d 91       	ld	r19, X+
   11354:	4d 91       	ld	r20, X+
   11356:	5c 91       	ld	r21, X
   11358:	1d 97       	sbiw	r26, 0x0d	; 13
   1135a:	c2 01       	movw	r24, r4
   1135c:	a0 e0       	ldi	r26, 0x00	; 0
   1135e:	b0 e0       	ldi	r27, 0x00	; 0
   11360:	82 0f       	add	r24, r18
   11362:	93 1f       	adc	r25, r19
   11364:	a4 1f       	adc	r26, r20
   11366:	b5 1f       	adc	r27, r21
   11368:	82 17       	cp	r24, r18
   1136a:	93 07       	cpc	r25, r19
   1136c:	a4 07       	cpc	r26, r20
   1136e:	b5 07       	cpc	r27, r21
   11370:	10 f4       	brcc	.+4      	; 0x11376 <_Z7f_writeP3FILPKhjPj+0x90>
   11372:	44 24       	eor	r4, r4
   11374:	55 24       	eor	r5, r5
   11376:	20 2e       	mov	r2, r16
   11378:	3c 2c       	mov	r3, r12
   1137a:	77 c1       	rjmp	.+750    	; 0x1166a <_Z7f_writeP3FILPKhjPj+0x384>

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
   1137c:	eb 81       	ldd	r30, Y+3	; 0x03
   1137e:	fc 81       	ldd	r31, Y+4	; 0x04
   11380:	26 81       	ldd	r18, Z+6	; 0x06
   11382:	37 81       	ldd	r19, Z+7	; 0x07
   11384:	40 85       	ldd	r20, Z+8	; 0x08
   11386:	51 85       	ldd	r21, Z+9	; 0x09
   11388:	da 01       	movw	r26, r20
   1138a:	c9 01       	movw	r24, r18
   1138c:	91 70       	andi	r25, 0x01	; 1
   1138e:	a0 70       	andi	r26, 0x00	; 0
   11390:	b0 70       	andi	r27, 0x00	; 0
   11392:	00 97       	sbiw	r24, 0x00	; 0
   11394:	a1 05       	cpc	r26, r1
   11396:	b1 05       	cpc	r27, r1
   11398:	09 f0       	breq	.+2      	; 0x1139c <_Z7f_writeP3FILPKhjPj+0xb6>
   1139a:	08 c1       	rjmp	.+528    	; 0x115ac <_Z7f_writeP3FILPKhjPj+0x2c6>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   1139c:	80 81       	ld	r24, Z
   1139e:	91 81       	ldd	r25, Z+1	; 0x01
   113a0:	59 01       	movw	r10, r18
   113a2:	6a 01       	movw	r12, r20
   113a4:	69 e0       	ldi	r22, 0x09	; 9
   113a6:	d6 94       	lsr	r13
   113a8:	c7 94       	ror	r12
   113aa:	b7 94       	ror	r11
   113ac:	a7 94       	ror	r10
   113ae:	6a 95       	dec	r22
   113b0:	d1 f7       	brne	.-12     	; 0x113a6 <_Z7f_writeP3FILPKhjPj+0xc0>
   113b2:	dc 01       	movw	r26, r24
   113b4:	12 96       	adiw	r26, 0x02	; 2
   113b6:	0c 91       	ld	r16, X
   113b8:	12 97       	sbiw	r26, 0x02	; 2
   113ba:	01 50       	subi	r16, 0x01	; 1
   113bc:	0a 21       	and	r16, r10
			if (!csect) {							/* On the cluster boundary? */
   113be:	09 f0       	breq	.+2      	; 0x113c2 <_Z7f_writeP3FILPKhjPj+0xdc>
   113c0:	48 c0       	rjmp	.+144    	; 0x11452 <_Z7f_writeP3FILPKhjPj+0x16c>
				if (fp->fptr == 0) {				/* On the top of the file? */
   113c2:	21 15       	cp	r18, r1
   113c4:	31 05       	cpc	r19, r1
   113c6:	41 05       	cpc	r20, r1
   113c8:	51 05       	cpc	r21, r1
   113ca:	b9 f4       	brne	.+46     	; 0x113fa <_Z7f_writeP3FILPKhjPj+0x114>
					clst = fp->org_clust;			/* Follow from the origin */
   113cc:	26 85       	ldd	r18, Z+14	; 0x0e
   113ce:	37 85       	ldd	r19, Z+15	; 0x0f
   113d0:	40 89       	ldd	r20, Z+16	; 0x10
   113d2:	51 89       	ldd	r21, Z+17	; 0x11
					if (clst == 0)					/* When there is no cluster chain, */
   113d4:	21 15       	cp	r18, r1
   113d6:	31 05       	cpc	r19, r1
   113d8:	41 05       	cpc	r20, r1
   113da:	51 05       	cpc	r21, r1
   113dc:	01 f5       	brne	.+64     	; 0x1141e <_Z7f_writeP3FILPKhjPj+0x138>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   113de:	40 e0       	ldi	r20, 0x00	; 0
   113e0:	50 e0       	ldi	r21, 0x00	; 0
   113e2:	ba 01       	movw	r22, r20
   113e4:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   113e8:	9b 01       	movw	r18, r22
   113ea:	ac 01       	movw	r20, r24
   113ec:	eb 81       	ldd	r30, Y+3	; 0x03
   113ee:	fc 81       	ldd	r31, Y+4	; 0x04
   113f0:	66 87       	std	Z+14, r22	; 0x0e
   113f2:	77 87       	std	Z+15, r23	; 0x0f
   113f4:	80 8b       	std	Z+16, r24	; 0x10
   113f6:	91 8b       	std	Z+17, r25	; 0x11
   113f8:	0c c0       	rjmp	.+24     	; 0x11412 <_Z7f_writeP3FILPKhjPj+0x12c>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
   113fa:	ab 81       	ldd	r26, Y+3	; 0x03
   113fc:	bc 81       	ldd	r27, Y+4	; 0x04
   113fe:	52 96       	adiw	r26, 0x12	; 18
   11400:	4d 91       	ld	r20, X+
   11402:	5d 91       	ld	r21, X+
   11404:	6d 91       	ld	r22, X+
   11406:	7c 91       	ld	r23, X
   11408:	55 97       	sbiw	r26, 0x15	; 21
   1140a:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   1140e:	9b 01       	movw	r18, r22
   11410:	ac 01       	movw	r20, r24
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
   11412:	21 15       	cp	r18, r1
   11414:	31 05       	cpc	r19, r1
   11416:	41 05       	cpc	r20, r1
   11418:	51 05       	cpc	r21, r1
   1141a:	09 f4       	brne	.+2      	; 0x1141e <_Z7f_writeP3FILPKhjPj+0x138>
   1141c:	2a c1       	rjmp	.+596    	; 0x11672 <_Z7f_writeP3FILPKhjPj+0x38c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   1141e:	21 30       	cpi	r18, 0x01	; 1
   11420:	31 05       	cpc	r19, r1
   11422:	41 05       	cpc	r20, r1
   11424:	51 05       	cpc	r21, r1
   11426:	31 f4       	brne	.+12     	; 0x11434 <_Z7f_writeP3FILPKhjPj+0x14e>
   11428:	eb 81       	ldd	r30, Y+3	; 0x03
   1142a:	fc 81       	ldd	r31, Y+4	; 0x04
   1142c:	84 81       	ldd	r24, Z+4	; 0x04
   1142e:	80 68       	ori	r24, 0x80	; 128
   11430:	84 83       	std	Z+4, r24	; 0x04
   11432:	37 c0       	rjmp	.+110    	; 0x114a2 <_Z7f_writeP3FILPKhjPj+0x1bc>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   11434:	2f 3f       	cpi	r18, 0xFF	; 255
   11436:	ff ef       	ldi	r31, 0xFF	; 255
   11438:	3f 07       	cpc	r19, r31
   1143a:	ff ef       	ldi	r31, 0xFF	; 255
   1143c:	4f 07       	cpc	r20, r31
   1143e:	ff ef       	ldi	r31, 0xFF	; 255
   11440:	5f 07       	cpc	r21, r31
   11442:	09 f4       	brne	.+2      	; 0x11446 <_Z7f_writeP3FILPKhjPj+0x160>
   11444:	9b c0       	rjmp	.+310    	; 0x1157c <_Z7f_writeP3FILPKhjPj+0x296>
				fp->curr_clust = clst;				/* Update current cluster */
   11446:	eb 81       	ldd	r30, Y+3	; 0x03
   11448:	fc 81       	ldd	r31, Y+4	; 0x04
   1144a:	22 8b       	std	Z+18, r18	; 0x12
   1144c:	33 8b       	std	Z+19, r19	; 0x13
   1144e:	44 8b       	std	Z+20, r20	; 0x14
   11450:	55 8b       	std	Z+21, r21	; 0x15
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
   11452:	ab 81       	ldd	r26, Y+3	; 0x03
   11454:	bc 81       	ldd	r27, Y+4	; 0x04
   11456:	ed 91       	ld	r30, X+
   11458:	fc 91       	ld	r31, X
   1145a:	11 97       	sbiw	r26, 0x01	; 1
   1145c:	66 a5       	ldd	r22, Z+46	; 0x2e
   1145e:	77 a5       	ldd	r23, Z+47	; 0x2f
   11460:	80 a9       	ldd	r24, Z+48	; 0x30
   11462:	91 a9       	ldd	r25, Z+49	; 0x31
   11464:	56 96       	adiw	r26, 0x16	; 22
   11466:	2d 91       	ld	r18, X+
   11468:	3d 91       	ld	r19, X+
   1146a:	4d 91       	ld	r20, X+
   1146c:	5c 91       	ld	r21, X
   1146e:	59 97       	sbiw	r26, 0x19	; 25
   11470:	62 17       	cp	r22, r18
   11472:	73 07       	cpc	r23, r19
   11474:	84 07       	cpc	r24, r20
   11476:	95 07       	cpc	r25, r21
   11478:	09 f0       	breq	.+2      	; 0x1147c <_Z7f_writeP3FILPKhjPj+0x196>
   1147a:	33 c1       	rjmp	.+614    	; 0x116e2 <_Z7f_writeP3FILPKhjPj+0x3fc>
   1147c:	cf 01       	movw	r24, r30
   1147e:	40 e0       	ldi	r20, 0x00	; 0
   11480:	50 e0       	ldi	r21, 0x00	; 0
   11482:	ba 01       	movw	r22, r20
   11484:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   11488:	00 97       	sbiw	r24, 0x00	; 0
   1148a:	09 f4       	brne	.+2      	; 0x1148e <_Z7f_writeP3FILPKhjPj+0x1a8>
   1148c:	2a c1       	rjmp	.+596    	; 0x116e2 <_Z7f_writeP3FILPKhjPj+0x3fc>
   1148e:	a2 c0       	rjmp	.+324    	; 0x115d4 <_Z7f_writeP3FILPKhjPj+0x2ee>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   11490:	ab 81       	ldd	r26, Y+3	; 0x03
   11492:	bc 81       	ldd	r27, Y+4	; 0x04
   11494:	14 96       	adiw	r26, 0x04	; 4
   11496:	8c 91       	ld	r24, X
   11498:	14 97       	sbiw	r26, 0x04	; 4
   1149a:	80 68       	ori	r24, 0x80	; 128
   1149c:	14 96       	adiw	r26, 0x04	; 4
   1149e:	8c 93       	st	X, r24
   114a0:	14 97       	sbiw	r26, 0x04	; 4
   114a2:	42 e0       	ldi	r20, 0x02	; 2
   114a4:	e4 2e       	mov	r14, r20
   114a6:	f1 2c       	mov	r15, r1
   114a8:	04 c1       	rjmp	.+520    	; 0x116b2 <_Z7f_writeP3FILPKhjPj+0x3cc>
			sect += csect;
   114aa:	3b 01       	movw	r6, r22
   114ac:	4c 01       	movw	r8, r24
   114ae:	60 0e       	add	r6, r16
   114b0:	71 1c       	adc	r7, r1
   114b2:	81 1c       	adc	r8, r1
   114b4:	91 1c       	adc	r9, r1
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
   114b6:	62 01       	movw	r12, r4
   114b8:	cd 2c       	mov	r12, r13
   114ba:	dd 24       	eor	r13, r13
   114bc:	c6 94       	lsr	r12
			if (cc) {								/* Write maximum contiguous sectors directly */
   114be:	c1 14       	cp	r12, r1
   114c0:	d1 04       	cpc	r13, r1
   114c2:	09 f4       	brne	.+2      	; 0x114c6 <_Z7f_writeP3FILPKhjPj+0x1e0>
   114c4:	44 c0       	rjmp	.+136    	; 0x1154e <_Z7f_writeP3FILPKhjPj+0x268>
				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
   114c6:	f5 01       	movw	r30, r10
   114c8:	82 81       	ldd	r24, Z+2	; 0x02
   114ca:	10 e0       	ldi	r17, 0x00	; 0
   114cc:	96 01       	movw	r18, r12
   114ce:	20 0f       	add	r18, r16
   114d0:	31 1f       	adc	r19, r17
   114d2:	90 e0       	ldi	r25, 0x00	; 0
   114d4:	82 17       	cp	r24, r18
   114d6:	93 07       	cpc	r25, r19
   114d8:	18 f4       	brcc	.+6      	; 0x114e0 <_Z7f_writeP3FILPKhjPj+0x1fa>
					cc = fp->fs->csize - csect;
   114da:	6c 01       	movw	r12, r24
   114dc:	c0 1a       	sub	r12, r16
   114de:	d1 0a       	sbc	r13, r17
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   114e0:	d5 01       	movw	r26, r10
   114e2:	11 96       	adiw	r26, 0x01	; 1
   114e4:	8c 91       	ld	r24, X
   114e6:	b1 01       	movw	r22, r2
   114e8:	a4 01       	movw	r20, r8
   114ea:	93 01       	movw	r18, r6
   114ec:	0c 2d       	mov	r16, r12
   114ee:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   114f2:	00 97       	sbiw	r24, 0x00	; 0
   114f4:	09 f0       	breq	.+2      	; 0x114f8 <_Z7f_writeP3FILPKhjPj+0x212>
   114f6:	6e c0       	rjmp	.+220    	; 0x115d4 <_Z7f_writeP3FILPKhjPj+0x2ee>
					ABORT(fp->fs, FR_DISK_ERR);
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
   114f8:	ab 81       	ldd	r26, Y+3	; 0x03
   114fa:	bc 81       	ldd	r27, Y+4	; 0x04
   114fc:	ed 91       	ld	r30, X+
   114fe:	fc 91       	ld	r31, X
   11500:	11 97       	sbiw	r26, 0x01	; 1
   11502:	66 a5       	ldd	r22, Z+46	; 0x2e
   11504:	77 a5       	ldd	r23, Z+47	; 0x2f
   11506:	80 a9       	ldd	r24, Z+48	; 0x30
   11508:	91 a9       	ldd	r25, Z+49	; 0x31
   1150a:	66 19       	sub	r22, r6
   1150c:	77 09       	sbc	r23, r7
   1150e:	88 09       	sbc	r24, r8
   11510:	99 09       	sbc	r25, r9
   11512:	96 01       	movw	r18, r12
   11514:	40 e0       	ldi	r20, 0x00	; 0
   11516:	50 e0       	ldi	r21, 0x00	; 0
   11518:	62 17       	cp	r22, r18
   1151a:	73 07       	cpc	r23, r19
   1151c:	84 07       	cpc	r24, r20
   1151e:	95 07       	cpc	r25, r21
   11520:	88 f4       	brcc	.+34     	; 0x11544 <_Z7f_writeP3FILPKhjPj+0x25e>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   11522:	76 2f       	mov	r23, r22
   11524:	66 27       	eor	r22, r22
   11526:	77 0f       	add	r23, r23
   11528:	62 0d       	add	r22, r2
   1152a:	73 1d       	adc	r23, r3
   1152c:	cf 01       	movw	r24, r30
   1152e:	c2 96       	adiw	r24, 0x32	; 50
   11530:	40 e0       	ldi	r20, 0x00	; 0
   11532:	52 e0       	ldi	r21, 0x02	; 2
   11534:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
					fp->fs->wflag = 0;
   11538:	ab 81       	ldd	r26, Y+3	; 0x03
   1153a:	bc 81       	ldd	r27, Y+4	; 0x04
   1153c:	ed 91       	ld	r30, X+
   1153e:	fc 91       	ld	r31, X
   11540:	11 97       	sbiw	r26, 0x01	; 1
   11542:	14 82       	std	Z+4, r1	; 0x04
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
   11544:	86 01       	movw	r16, r12
   11546:	10 2f       	mov	r17, r16
   11548:	00 27       	eor	r16, r16
   1154a:	11 0f       	add	r17, r17
				continue;
   1154c:	6f c0       	rjmp	.+222    	; 0x1162c <_Z7f_writeP3FILPKhjPj+0x346>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
   1154e:	eb 81       	ldd	r30, Y+3	; 0x03
   11550:	fc 81       	ldd	r31, Y+4	; 0x04
   11552:	26 81       	ldd	r18, Z+6	; 0x06
   11554:	37 81       	ldd	r19, Z+7	; 0x07
   11556:	40 85       	ldd	r20, Z+8	; 0x08
   11558:	51 85       	ldd	r21, Z+9	; 0x09
   1155a:	82 85       	ldd	r24, Z+10	; 0x0a
   1155c:	93 85       	ldd	r25, Z+11	; 0x0b
   1155e:	a4 85       	ldd	r26, Z+12	; 0x0c
   11560:	b5 85       	ldd	r27, Z+13	; 0x0d
   11562:	28 17       	cp	r18, r24
   11564:	39 07       	cpc	r19, r25
   11566:	4a 07       	cpc	r20, r26
   11568:	5b 07       	cpc	r21, r27
   1156a:	d0 f0       	brcs	.+52     	; 0x115a0 <_Z7f_writeP3FILPKhjPj+0x2ba>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   1156c:	c5 01       	movw	r24, r10
   1156e:	40 e0       	ldi	r20, 0x00	; 0
   11570:	50 e0       	ldi	r21, 0x00	; 0
   11572:	ba 01       	movw	r22, r20
   11574:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   11578:	00 97       	sbiw	r24, 0x00	; 0
   1157a:	51 f0       	breq	.+20     	; 0x11590 <_Z7f_writeP3FILPKhjPj+0x2aa>
   1157c:	ab 81       	ldd	r26, Y+3	; 0x03
   1157e:	bc 81       	ldd	r27, Y+4	; 0x04
   11580:	14 96       	adiw	r26, 0x04	; 4
   11582:	8c 91       	ld	r24, X
   11584:	14 97       	sbiw	r26, 0x04	; 4
   11586:	80 68       	ori	r24, 0x80	; 128
   11588:	14 96       	adiw	r26, 0x04	; 4
   1158a:	8c 93       	st	X, r24
   1158c:	14 97       	sbiw	r26, 0x04	; 4
   1158e:	27 c0       	rjmp	.+78     	; 0x115de <_Z7f_writeP3FILPKhjPj+0x2f8>
				fp->fs->winsect = sect;
   11590:	ab 81       	ldd	r26, Y+3	; 0x03
   11592:	bc 81       	ldd	r27, Y+4	; 0x04
   11594:	ed 91       	ld	r30, X+
   11596:	fc 91       	ld	r31, X
   11598:	66 a6       	std	Z+46, r6	; 0x2e
   1159a:	77 a6       	std	Z+47, r7	; 0x2f
   1159c:	80 aa       	std	Z+48, r8	; 0x30
   1159e:	91 aa       	std	Z+49, r9	; 0x31
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   115a0:	eb 81       	ldd	r30, Y+3	; 0x03
   115a2:	fc 81       	ldd	r31, Y+4	; 0x04
   115a4:	66 8a       	std	Z+22, r6	; 0x16
   115a6:	77 8a       	std	Z+23, r7	; 0x17
   115a8:	80 8e       	std	Z+24, r8	; 0x18
   115aa:	91 8e       	std	Z+25, r9	; 0x19
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   115ac:	ab 81       	ldd	r26, Y+3	; 0x03
   115ae:	bc 81       	ldd	r27, Y+4	; 0x04
   115b0:	16 96       	adiw	r26, 0x06	; 6
   115b2:	ad 90       	ld	r10, X+
   115b4:	bd 90       	ld	r11, X+
   115b6:	cd 90       	ld	r12, X+
   115b8:	dc 90       	ld	r13, X
   115ba:	19 97       	sbiw	r26, 0x09	; 9
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
   115bc:	56 96       	adiw	r26, 0x16	; 22
   115be:	4d 91       	ld	r20, X+
   115c0:	5d 91       	ld	r21, X+
   115c2:	6d 91       	ld	r22, X+
   115c4:	7c 91       	ld	r23, X
   115c6:	59 97       	sbiw	r26, 0x19	; 25
   115c8:	8d 91       	ld	r24, X+
   115ca:	9c 91       	ld	r25, X
   115cc:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   115d0:	00 97       	sbiw	r24, 0x00	; 0
   115d2:	49 f0       	breq	.+18     	; 0x115e6 <_Z7f_writeP3FILPKhjPj+0x300>
			ABORT(fp->fs, FR_DISK_ERR);
   115d4:	eb 81       	ldd	r30, Y+3	; 0x03
   115d6:	fc 81       	ldd	r31, Y+4	; 0x04
   115d8:	84 81       	ldd	r24, Z+4	; 0x04
   115da:	80 68       	ori	r24, 0x80	; 128
   115dc:	84 83       	std	Z+4, r24	; 0x04
   115de:	81 e0       	ldi	r24, 0x01	; 1
   115e0:	e8 2e       	mov	r14, r24
   115e2:	f1 2c       	mov	r15, r1
   115e4:	66 c0       	rjmp	.+204    	; 0x116b2 <_Z7f_writeP3FILPKhjPj+0x3cc>
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   115e6:	c5 01       	movw	r24, r10
   115e8:	91 70       	andi	r25, 0x01	; 1
   115ea:	20 e0       	ldi	r18, 0x00	; 0
   115ec:	32 e0       	ldi	r19, 0x02	; 2
   115ee:	28 1b       	sub	r18, r24
   115f0:	39 0b       	sbc	r19, r25
   115f2:	82 01       	movw	r16, r4
   115f4:	24 15       	cp	r18, r4
   115f6:	35 05       	cpc	r19, r5
   115f8:	08 f4       	brcc	.+2      	; 0x115fc <_Z7f_writeP3FILPKhjPj+0x316>
   115fa:	89 01       	movw	r16, r18
		if (wcnt > btw) wcnt = btw;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   115fc:	eb 81       	ldd	r30, Y+3	; 0x03
   115fe:	fc 81       	ldd	r31, Y+4	; 0x04
   11600:	86 81       	ldd	r24, Z+6	; 0x06
   11602:	97 81       	ldd	r25, Z+7	; 0x07
   11604:	a0 85       	ldd	r26, Z+8	; 0x08
   11606:	b1 85       	ldd	r27, Z+9	; 0x09
   11608:	91 70       	andi	r25, 0x01	; 1
   1160a:	a0 70       	andi	r26, 0x00	; 0
   1160c:	b0 70       	andi	r27, 0x00	; 0
   1160e:	c2 96       	adiw	r24, 0x32	; 50
   11610:	20 81       	ld	r18, Z
   11612:	31 81       	ldd	r19, Z+1	; 0x01
   11614:	82 0f       	add	r24, r18
   11616:	93 1f       	adc	r25, r19
   11618:	b1 01       	movw	r22, r2
   1161a:	a8 01       	movw	r20, r16
   1161c:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
		fp->fs->wflag = 1;
   11620:	ab 81       	ldd	r26, Y+3	; 0x03
   11622:	bc 81       	ldd	r27, Y+4	; 0x04
   11624:	ed 91       	ld	r30, X+
   11626:	fc 91       	ld	r31, X
   11628:	b1 e0       	ldi	r27, 0x01	; 1
   1162a:	b4 83       	std	Z+4, r27	; 0x04
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
   1162c:	20 0e       	add	r2, r16
   1162e:	31 1e       	adc	r3, r17
   11630:	98 01       	movw	r18, r16
   11632:	40 e0       	ldi	r20, 0x00	; 0
   11634:	50 e0       	ldi	r21, 0x00	; 0
   11636:	eb 81       	ldd	r30, Y+3	; 0x03
   11638:	fc 81       	ldd	r31, Y+4	; 0x04
   1163a:	86 81       	ldd	r24, Z+6	; 0x06
   1163c:	97 81       	ldd	r25, Z+7	; 0x07
   1163e:	a0 85       	ldd	r26, Z+8	; 0x08
   11640:	b1 85       	ldd	r27, Z+9	; 0x09
   11642:	82 0f       	add	r24, r18
   11644:	93 1f       	adc	r25, r19
   11646:	a4 1f       	adc	r26, r20
   11648:	b5 1f       	adc	r27, r21
   1164a:	86 83       	std	Z+6, r24	; 0x06
   1164c:	97 83       	std	Z+7, r25	; 0x07
   1164e:	a0 87       	std	Z+8, r26	; 0x08
   11650:	b1 87       	std	Z+9, r27	; 0x09
   11652:	a9 81       	ldd	r26, Y+1	; 0x01
   11654:	ba 81       	ldd	r27, Y+2	; 0x02
   11656:	8d 91       	ld	r24, X+
   11658:	9c 91       	ld	r25, X
   1165a:	11 97       	sbiw	r26, 0x01	; 1
   1165c:	80 0f       	add	r24, r16
   1165e:	91 1f       	adc	r25, r17
   11660:	11 96       	adiw	r26, 0x01	; 1
   11662:	9c 93       	st	X, r25
   11664:	8e 93       	st	-X, r24
   11666:	40 1a       	sub	r4, r16
   11668:	51 0a       	sbc	r5, r17
   1166a:	41 14       	cp	r4, r1
   1166c:	51 04       	cpc	r5, r1
   1166e:	09 f0       	breq	.+2      	; 0x11672 <_Z7f_writeP3FILPKhjPj+0x38c>
   11670:	85 ce       	rjmp	.-758    	; 0x1137c <_Z7f_writeP3FILPKhjPj+0x96>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   11672:	eb 81       	ldd	r30, Y+3	; 0x03
   11674:	fc 81       	ldd	r31, Y+4	; 0x04
   11676:	86 81       	ldd	r24, Z+6	; 0x06
   11678:	97 81       	ldd	r25, Z+7	; 0x07
   1167a:	a0 85       	ldd	r26, Z+8	; 0x08
   1167c:	b1 85       	ldd	r27, Z+9	; 0x09
   1167e:	22 85       	ldd	r18, Z+10	; 0x0a
   11680:	33 85       	ldd	r19, Z+11	; 0x0b
   11682:	44 85       	ldd	r20, Z+12	; 0x0c
   11684:	55 85       	ldd	r21, Z+13	; 0x0d
   11686:	28 17       	cp	r18, r24
   11688:	39 07       	cpc	r19, r25
   1168a:	4a 07       	cpc	r20, r26
   1168c:	5b 07       	cpc	r21, r27
   1168e:	20 f4       	brcc	.+8      	; 0x11698 <_Z7f_writeP3FILPKhjPj+0x3b2>
   11690:	82 87       	std	Z+10, r24	; 0x0a
   11692:	93 87       	std	Z+11, r25	; 0x0b
   11694:	a4 87       	std	Z+12, r26	; 0x0c
   11696:	b5 87       	std	Z+13, r27	; 0x0d
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   11698:	ab 81       	ldd	r26, Y+3	; 0x03
   1169a:	bc 81       	ldd	r27, Y+4	; 0x04
   1169c:	14 96       	adiw	r26, 0x04	; 4
   1169e:	8c 91       	ld	r24, X
   116a0:	14 97       	sbiw	r26, 0x04	; 4
   116a2:	80 62       	ori	r24, 0x20	; 32
   116a4:	14 96       	adiw	r26, 0x04	; 4
   116a6:	8c 93       	st	X, r24
   116a8:	14 97       	sbiw	r26, 0x04	; 4

	LEAVE_FF(fp->fs, FR_OK);
   116aa:	03 c0       	rjmp	.+6      	; 0x116b2 <_Z7f_writeP3FILPKhjPj+0x3cc>
	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
   116ac:	07 e0       	ldi	r16, 0x07	; 7
   116ae:	e0 2e       	mov	r14, r16
   116b0:	f1 2c       	mov	r15, r1

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file change flag */

	LEAVE_FF(fp->fs, FR_OK);
}
   116b2:	c7 01       	movw	r24, r14
   116b4:	0f 90       	pop	r0
   116b6:	0f 90       	pop	r0
   116b8:	0f 90       	pop	r0
   116ba:	0f 90       	pop	r0
   116bc:	cf 91       	pop	r28
   116be:	df 91       	pop	r29
   116c0:	1f 91       	pop	r17
   116c2:	0f 91       	pop	r16
   116c4:	ff 90       	pop	r15
   116c6:	ef 90       	pop	r14
   116c8:	df 90       	pop	r13
   116ca:	cf 90       	pop	r12
   116cc:	bf 90       	pop	r11
   116ce:	af 90       	pop	r10
   116d0:	9f 90       	pop	r9
   116d2:	8f 90       	pop	r8
   116d4:	7f 90       	pop	r7
   116d6:	6f 90       	pop	r6
   116d8:	5f 90       	pop	r5
   116da:	4f 90       	pop	r4
   116dc:	3f 90       	pop	r3
   116de:	2f 90       	pop	r2
   116e0:	08 95       	ret
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
   116e2:	eb 81       	ldd	r30, Y+3	; 0x03
   116e4:	fc 81       	ldd	r31, Y+4	; 0x04
   116e6:	a0 80       	ld	r10, Z
   116e8:	b1 80       	ldd	r11, Z+1	; 0x01
   116ea:	42 89       	ldd	r20, Z+18	; 0x12
   116ec:	53 89       	ldd	r21, Z+19	; 0x13
   116ee:	64 89       	ldd	r22, Z+20	; 0x14
   116f0:	75 89       	ldd	r23, Z+21	; 0x15
   116f2:	c5 01       	movw	r24, r10
   116f4:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   116f8:	61 15       	cp	r22, r1
   116fa:	71 05       	cpc	r23, r1
   116fc:	81 05       	cpc	r24, r1
   116fe:	91 05       	cpc	r25, r1
   11700:	09 f0       	breq	.+2      	; 0x11704 <_Z7f_writeP3FILPKhjPj+0x41e>
   11702:	d3 ce       	rjmp	.-602    	; 0x114aa <_Z7f_writeP3FILPKhjPj+0x1c4>
   11704:	c5 ce       	rjmp	.-630    	; 0x11490 <_Z7f_writeP3FILPKhjPj+0x1aa>

00011706 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   11706:	0f 93       	push	r16
   11708:	1f 93       	push	r17
   1170a:	cf 93       	push	r28
   1170c:	df 93       	push	r29
   1170e:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   11710:	6a 81       	ldd	r22, Y+2	; 0x02
   11712:	7b 81       	ldd	r23, Y+3	; 0x03
   11714:	88 81       	ld	r24, Y
   11716:	99 81       	ldd	r25, Y+1	; 0x01
   11718:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   1171c:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   1171e:	00 97       	sbiw	r24, 0x00	; 0
   11720:	b9 f5       	brne	.+110    	; 0x11790 <f_sync+0x8a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   11722:	8c 81       	ldd	r24, Y+4	; 0x04
   11724:	85 ff       	sbrs	r24, 5
   11726:	34 c0       	rjmp	.+104    	; 0x11790 <f_sync+0x8a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   11728:	4a 8d       	ldd	r20, Y+26	; 0x1a
   1172a:	5b 8d       	ldd	r21, Y+27	; 0x1b
   1172c:	6c 8d       	ldd	r22, Y+28	; 0x1c
   1172e:	7d 8d       	ldd	r23, Y+29	; 0x1d
   11730:	88 81       	ld	r24, Y
   11732:	99 81       	ldd	r25, Y+1	; 0x01
   11734:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   11738:	9c 01       	movw	r18, r24
			if (res == FR_OK) {
   1173a:	00 97       	sbiw	r24, 0x00	; 0
   1173c:	49 f5       	brne	.+82     	; 0x11790 <f_sync+0x8a>
				dir = fp->dir_ptr;
   1173e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   11740:	1f 8d       	ldd	r17, Y+31	; 0x1f
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   11742:	f8 01       	movw	r30, r16
   11744:	83 85       	ldd	r24, Z+11	; 0x0b
   11746:	80 62       	ori	r24, 0x20	; 32
   11748:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   1174a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1174c:	84 8f       	std	Z+28, r24	; 0x1c
   1174e:	8b 85       	ldd	r24, Y+11	; 0x0b
   11750:	85 8f       	std	Z+29, r24	; 0x1d
   11752:	8c 85       	ldd	r24, Y+12	; 0x0c
   11754:	86 8f       	std	Z+30, r24	; 0x1e
   11756:	8d 85       	ldd	r24, Y+13	; 0x0d
   11758:	87 8f       	std	Z+31, r24	; 0x1f
				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
   1175a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1175c:	82 8f       	std	Z+26, r24	; 0x1a
   1175e:	8f 85       	ldd	r24, Y+15	; 0x0f
   11760:	83 8f       	std	Z+27, r24	; 0x1b
   11762:	88 89       	ldd	r24, Y+16	; 0x10
   11764:	84 8b       	std	Z+20, r24	; 0x14
   11766:	89 89       	ldd	r24, Y+17	; 0x11
   11768:	85 8b       	std	Z+21, r24	; 0x15
				tim = get_fattime();						/* Update updated time */
   1176a:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
   1176e:	f8 01       	movw	r30, r16
   11770:	66 8b       	std	Z+22, r22	; 0x16
   11772:	77 8b       	std	Z+23, r23	; 0x17
   11774:	80 8f       	std	Z+24, r24	; 0x18
   11776:	91 8f       	std	Z+25, r25	; 0x19
				fp->flag &= ~FA__WRITTEN;
   11778:	8c 81       	ldd	r24, Y+4	; 0x04
   1177a:	8f 7d       	andi	r24, 0xDF	; 223
   1177c:	8c 83       	std	Y+4, r24	; 0x04
				fp->fs->wflag = 1;
   1177e:	e8 81       	ld	r30, Y
   11780:	f9 81       	ldd	r31, Y+1	; 0x01
   11782:	81 e0       	ldi	r24, 0x01	; 1
   11784:	84 83       	std	Z+4, r24	; 0x04
				res = sync(fp->fs);
   11786:	88 81       	ld	r24, Y
   11788:	99 81       	ldd	r25, Y+1	; 0x01
   1178a:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   1178e:	9c 01       	movw	r18, r24
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
   11790:	c9 01       	movw	r24, r18
   11792:	df 91       	pop	r29
   11794:	cf 91       	pop	r28
   11796:	1f 91       	pop	r17
   11798:	0f 91       	pop	r16
   1179a:	08 95       	ret

0001179c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   1179c:	cf 93       	push	r28
   1179e:	df 93       	push	r29
   117a0:	ec 01       	movw	r28, r24
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   117a2:	0e 94 83 8b 	call	0x11706	; 0x11706 <f_sync>
   117a6:	9c 01       	movw	r18, r24
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   117a8:	00 97       	sbiw	r24, 0x00	; 0
   117aa:	11 f4       	brne	.+4      	; 0x117b0 <f_close+0x14>
   117ac:	19 82       	std	Y+1, r1	; 0x01
   117ae:	18 82       	st	Y, r1
	return res;
#endif
}
   117b0:	c9 01       	movw	r24, r18
   117b2:	df 91       	pop	r29
   117b4:	cf 91       	pop	r28
   117b6:	08 95       	ret

000117b8 <f_chdrive>:

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   117b8:	88 23       	and	r24, r24
   117ba:	29 f4       	brne	.+10     	; 0x117c6 <f_chdrive+0xe>

	CurrVol = drv;
   117bc:	10 92 3d 1f 	sts	0x1F3D, r1

	return FR_OK;
   117c0:	20 e0       	ldi	r18, 0x00	; 0
   117c2:	30 e0       	ldi	r19, 0x00	; 0
   117c4:	02 c0       	rjmp	.+4      	; 0x117ca <f_chdrive+0x12>

FRESULT f_chdrive (
	BYTE drv		/* Drive number */
)
{
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   117c6:	2b e0       	ldi	r18, 0x0B	; 11
   117c8:	30 e0       	ldi	r19, 0x00	; 0

	CurrVol = drv;

	return FR_OK;
}
   117ca:	c9 01       	movw	r24, r18
   117cc:	08 95       	ret

000117ce <f_chdir>:


FRESULT f_chdir (
	const TCHAR *path	/* Pointer to the directory path */
)
{
   117ce:	ef 92       	push	r14
   117d0:	ff 92       	push	r15
   117d2:	0f 93       	push	r16
   117d4:	1f 93       	push	r17
   117d6:	df 93       	push	r29
   117d8:	cf 93       	push	r28
   117da:	cd b7       	in	r28, 0x3d	; 61
   117dc:	de b7       	in	r29, 0x3e	; 62
   117de:	a4 97       	sbiw	r28, 0x24	; 36
   117e0:	0f b6       	in	r0, 0x3f	; 63
   117e2:	f8 94       	cli
   117e4:	de bf       	out	0x3e, r29	; 62
   117e6:	0f be       	out	0x3f, r0	; 63
   117e8:	cd bf       	out	0x3d, r28	; 61
   117ea:	9c a3       	std	Y+36, r25	; 0x24
   117ec:	8b a3       	std	Y+35, r24	; 0x23
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
   117ee:	8e 01       	movw	r16, r28
   117f0:	03 5f       	subi	r16, 0xF3	; 243
   117f2:	1f 4f       	sbci	r17, 0xFF	; 255
   117f4:	ce 01       	movw	r24, r28
   117f6:	83 96       	adiw	r24, 0x23	; 35
   117f8:	b8 01       	movw	r22, r16
   117fa:	40 e0       	ldi	r20, 0x00	; 0
   117fc:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   11800:	fc 01       	movw	r30, r24
	if (res == FR_OK) {
   11802:	00 97       	sbiw	r24, 0x00	; 0
   11804:	09 f0       	breq	.+2      	; 0x11808 <f_chdir+0x3a>
   11806:	52 c0       	rjmp	.+164    	; 0x118ac <f_chdir+0xde>
		INIT_BUF(dj);
   11808:	ce 01       	movw	r24, r28
   1180a:	01 96       	adiw	r24, 0x01	; 1
   1180c:	9a a3       	std	Y+34, r25	; 0x22
   1180e:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the path */
   11810:	6b a1       	ldd	r22, Y+35	; 0x23
   11812:	7c a1       	ldd	r23, Y+36	; 0x24
   11814:	c8 01       	movw	r24, r16
   11816:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   1181a:	fc 01       	movw	r30, r24
		FREE_BUF();
		if (res == FR_OK) {					/* Follow completed */
   1181c:	00 97       	sbiw	r24, 0x00	; 0
   1181e:	09 f0       	breq	.+2      	; 0x11822 <f_chdir+0x54>
   11820:	40 c0       	rjmp	.+128    	; 0x118a2 <f_chdir+0xd4>
			if (!dj.dir) {
   11822:	8f 8d       	ldd	r24, Y+31	; 0x1f
   11824:	98 a1       	ldd	r25, Y+32	; 0x20
   11826:	00 97       	sbiw	r24, 0x00	; 0
   11828:	71 f4       	brne	.+28     	; 0x11846 <f_chdir+0x78>
				dj.fs->cdir = dj.sclust;	/* Start directory itself */
   1182a:	2d 85       	ldd	r18, Y+13	; 0x0d
   1182c:	3e 85       	ldd	r19, Y+14	; 0x0e
   1182e:	4b 89       	ldd	r20, Y+19	; 0x13
   11830:	5c 89       	ldd	r21, Y+20	; 0x14
   11832:	6d 89       	ldd	r22, Y+21	; 0x15
   11834:	7e 89       	ldd	r23, Y+22	; 0x16
   11836:	d9 01       	movw	r26, r18
   11838:	56 96       	adiw	r26, 0x16	; 22
   1183a:	4d 93       	st	X+, r20
   1183c:	5d 93       	st	X+, r21
   1183e:	6d 93       	st	X+, r22
   11840:	7c 93       	st	X, r23
   11842:	59 97       	sbiw	r26, 0x19	; 25
   11844:	33 c0       	rjmp	.+102    	; 0x118ac <f_chdir+0xde>
			} else {
				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
   11846:	dc 01       	movw	r26, r24
   11848:	1b 96       	adiw	r26, 0x0b	; 11
   1184a:	2c 91       	ld	r18, X
   1184c:	1b 97       	sbiw	r26, 0x0b	; 11
   1184e:	24 ff       	sbrs	r18, 4
   11850:	2b c0       	rjmp	.+86     	; 0x118a8 <f_chdir+0xda>
					dj.fs->cdir = LD_CLUST(dj.dir);
   11852:	ed 84       	ldd	r14, Y+13	; 0x0d
   11854:	fe 84       	ldd	r15, Y+14	; 0x0e
   11856:	55 96       	adiw	r26, 0x15	; 21
   11858:	5c 91       	ld	r21, X
   1185a:	55 97       	sbiw	r26, 0x15	; 21
   1185c:	40 e0       	ldi	r20, 0x00	; 0
   1185e:	54 96       	adiw	r26, 0x14	; 20
   11860:	2c 91       	ld	r18, X
   11862:	54 97       	sbiw	r26, 0x14	; 20
   11864:	30 e0       	ldi	r19, 0x00	; 0
   11866:	24 2b       	or	r18, r20
   11868:	35 2b       	or	r19, r21
   1186a:	40 e0       	ldi	r20, 0x00	; 0
   1186c:	50 e0       	ldi	r21, 0x00	; 0
   1186e:	a9 01       	movw	r20, r18
   11870:	33 27       	eor	r19, r19
   11872:	22 27       	eor	r18, r18
   11874:	5b 96       	adiw	r26, 0x1b	; 27
   11876:	1c 91       	ld	r17, X
   11878:	5b 97       	sbiw	r26, 0x1b	; 27
   1187a:	00 e0       	ldi	r16, 0x00	; 0
   1187c:	5a 96       	adiw	r26, 0x1a	; 26
   1187e:	6c 91       	ld	r22, X
   11880:	70 e0       	ldi	r23, 0x00	; 0
   11882:	60 2b       	or	r22, r16
   11884:	71 2b       	or	r23, r17
   11886:	80 e0       	ldi	r24, 0x00	; 0
   11888:	90 e0       	ldi	r25, 0x00	; 0
   1188a:	26 2b       	or	r18, r22
   1188c:	37 2b       	or	r19, r23
   1188e:	48 2b       	or	r20, r24
   11890:	59 2b       	or	r21, r25
   11892:	d7 01       	movw	r26, r14
   11894:	56 96       	adiw	r26, 0x16	; 22
   11896:	2d 93       	st	X+, r18
   11898:	3d 93       	st	X+, r19
   1189a:	4d 93       	st	X+, r20
   1189c:	5c 93       	st	X, r21
   1189e:	59 97       	sbiw	r26, 0x19	; 25
   118a0:	05 c0       	rjmp	.+10     	; 0x118ac <f_chdir+0xde>
				else
					res = FR_NO_PATH;		/* Reached but a file */
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   118a2:	84 30       	cpi	r24, 0x04	; 4
   118a4:	91 05       	cpc	r25, r1
   118a6:	11 f4       	brne	.+4      	; 0x118ac <f_chdir+0xde>
   118a8:	e5 e0       	ldi	r30, 0x05	; 5
   118aa:	f0 e0       	ldi	r31, 0x00	; 0
	}

	LEAVE_FF(dj.fs, res);
}
   118ac:	cf 01       	movw	r24, r30
   118ae:	a4 96       	adiw	r28, 0x24	; 36
   118b0:	0f b6       	in	r0, 0x3f	; 63
   118b2:	f8 94       	cli
   118b4:	de bf       	out	0x3e, r29	; 62
   118b6:	0f be       	out	0x3f, r0	; 63
   118b8:	cd bf       	out	0x3d, r28	; 61
   118ba:	cf 91       	pop	r28
   118bc:	df 91       	pop	r29
   118be:	1f 91       	pop	r17
   118c0:	0f 91       	pop	r16
   118c2:	ff 90       	pop	r15
   118c4:	ef 90       	pop	r14
   118c6:	08 95       	ret

000118c8 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR *path,	/* Pointer to the directory path */
	UINT sz_path	/* Size of path */
)
{
   118c8:	2f 92       	push	r2
   118ca:	3f 92       	push	r3
   118cc:	4f 92       	push	r4
   118ce:	5f 92       	push	r5
   118d0:	6f 92       	push	r6
   118d2:	7f 92       	push	r7
   118d4:	8f 92       	push	r8
   118d6:	9f 92       	push	r9
   118d8:	af 92       	push	r10
   118da:	bf 92       	push	r11
   118dc:	cf 92       	push	r12
   118de:	df 92       	push	r13
   118e0:	ef 92       	push	r14
   118e2:	ff 92       	push	r15
   118e4:	0f 93       	push	r16
   118e6:	1f 93       	push	r17
   118e8:	df 93       	push	r29
   118ea:	cf 93       	push	r28
   118ec:	cd b7       	in	r28, 0x3d	; 61
   118ee:	de b7       	in	r29, 0x3e	; 62
   118f0:	c2 54       	subi	r28, 0x42	; 66
   118f2:	d0 40       	sbci	r29, 0x00	; 0
   118f4:	0f b6       	in	r0, 0x3f	; 63
   118f6:	f8 94       	cli
   118f8:	de bf       	out	0x3e, r29	; 62
   118fa:	0f be       	out	0x3f, r0	; 63
   118fc:	cd bf       	out	0x3d, r28	; 61
   118fe:	9a af       	std	Y+58, r25	; 0x3a
   11900:	89 af       	std	Y+57, r24	; 0x39
   11902:	5b 01       	movw	r10, r22
	TCHAR *tp;
	FILINFO fno;
	DEF_NAMEBUF;


	*path = 0;
   11904:	dc 01       	movw	r26, r24
   11906:	1c 92       	st	X, r1
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
   11908:	6d e0       	ldi	r22, 0x0D	; 13
   1190a:	c6 2e       	mov	r12, r22
   1190c:	d1 2c       	mov	r13, r1
   1190e:	cc 0e       	add	r12, r28
   11910:	dd 1e       	adc	r13, r29
   11912:	ce 01       	movw	r24, r28
   11914:	c9 96       	adiw	r24, 0x39	; 57
   11916:	b6 01       	movw	r22, r12
   11918:	40 e0       	ldi	r20, 0x00	; 0
   1191a:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   1191e:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
   11920:	00 97       	sbiw	r24, 0x00	; 0
   11922:	09 f0       	breq	.+2      	; 0x11926 <f_getcwd+0x5e>
   11924:	02 c1       	rjmp	.+516    	; 0x11b2a <f_getcwd+0x262>
		INIT_BUF(dj);
   11926:	ce 01       	movw	r24, r28
   11928:	01 96       	adiw	r24, 0x01	; 1
   1192a:	9a a3       	std	Y+34, r25	; 0x22
   1192c:	89 a3       	std	Y+33, r24	; 0x21
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
   1192e:	ed 85       	ldd	r30, Y+13	; 0x0d
   11930:	fe 85       	ldd	r31, Y+14	; 0x0e
   11932:	86 89       	ldd	r24, Z+22	; 0x16
   11934:	97 89       	ldd	r25, Z+23	; 0x17
   11936:	a0 8d       	ldd	r26, Z+24	; 0x18
   11938:	b1 8d       	ldd	r27, Z+25	; 0x19
   1193a:	8b 8b       	std	Y+19, r24	; 0x13
   1193c:	9c 8b       	std	Y+20, r25	; 0x14
   1193e:	ad 8b       	std	Y+21, r26	; 0x15
   11940:	be 8b       	std	Y+22, r27	; 0x16
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
   11942:	85 01       	movw	r16, r10
			res = dir_sdi(&dj, 1);			/* Get parent dir */
   11944:	c6 01       	movw	r24, r12
   11946:	dc 2c       	mov	r13, r12
   11948:	c9 2e       	mov	r12, r25
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
   1194a:	53 e2       	ldi	r21, 0x23	; 35
   1194c:	45 2e       	mov	r4, r21
   1194e:	51 2c       	mov	r5, r1
   11950:	4c 0e       	add	r4, r28
   11952:	5d 1e       	adc	r5, r29
   11954:	4c e2       	ldi	r20, 0x2C	; 44
   11956:	24 2e       	mov	r2, r20
   11958:	31 2c       	mov	r3, r1
   1195a:	2c 0e       	add	r2, r28
   1195c:	3d 1e       	adc	r3, r29
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
   1195e:	aa c0       	rjmp	.+340    	; 0x11ab4 <f_getcwd+0x1ec>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
   11960:	8d 2d       	mov	r24, r13
   11962:	9c 2d       	mov	r25, r12
   11964:	61 e0       	ldi	r22, 0x01	; 1
   11966:	70 e0       	ldi	r23, 0x00	; 0
   11968:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
			if (res != FR_OK) break;
   1196c:	00 97       	sbiw	r24, 0x00	; 0
   1196e:	09 f0       	breq	.+2      	; 0x11972 <f_getcwd+0xaa>
   11970:	ac c0       	rjmp	.+344    	; 0x11aca <f_getcwd+0x202>
			res = dir_read(&dj);
   11972:	8d 2d       	mov	r24, r13
   11974:	9c 2d       	mov	r25, r12
   11976:	0e 94 a0 85 	call	0x10b40	; 0x10b40 <_ZL8dir_readP3DIR>
			if (res != FR_OK) break;
   1197a:	00 97       	sbiw	r24, 0x00	; 0
   1197c:	09 f0       	breq	.+2      	; 0x11980 <f_getcwd+0xb8>
   1197e:	a5 c0       	rjmp	.+330    	; 0x11aca <f_getcwd+0x202>
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
   11980:	ef 8d       	ldd	r30, Y+31	; 0x1f
   11982:	f8 a1       	ldd	r31, Y+32	; 0x20
   11984:	b5 89       	ldd	r27, Z+21	; 0x15
   11986:	bc af       	std	Y+60, r27	; 0x3c
   11988:	1b ae       	std	Y+59, r1	; 0x3b
   1198a:	84 89       	ldd	r24, Z+20	; 0x14
   1198c:	90 e0       	ldi	r25, 0x00	; 0
   1198e:	2b ad       	ldd	r18, Y+59	; 0x3b
   11990:	3c ad       	ldd	r19, Y+60	; 0x3c
   11992:	82 2b       	or	r24, r18
   11994:	93 2b       	or	r25, r19
   11996:	a0 e0       	ldi	r26, 0x00	; 0
   11998:	b0 e0       	ldi	r27, 0x00	; 0
   1199a:	dc 01       	movw	r26, r24
   1199c:	99 27       	eor	r25, r25
   1199e:	88 27       	eor	r24, r24
   119a0:	33 8d       	ldd	r19, Z+27	; 0x1b
   119a2:	3e af       	std	Y+62, r19	; 0x3e
   119a4:	1d ae       	std	Y+61, r1	; 0x3d
   119a6:	22 8d       	ldd	r18, Z+26	; 0x1a
   119a8:	30 e0       	ldi	r19, 0x00	; 0
   119aa:	4d ad       	ldd	r20, Y+61	; 0x3d
   119ac:	5e ad       	ldd	r21, Y+62	; 0x3e
   119ae:	24 2b       	or	r18, r20
   119b0:	35 2b       	or	r19, r21
   119b2:	40 e0       	ldi	r20, 0x00	; 0
   119b4:	50 e0       	ldi	r21, 0x00	; 0
   119b6:	82 2b       	or	r24, r18
   119b8:	93 2b       	or	r25, r19
   119ba:	a4 2b       	or	r26, r20
   119bc:	b5 2b       	or	r27, r21
   119be:	8b 8b       	std	Y+19, r24	; 0x13
   119c0:	9c 8b       	std	Y+20, r25	; 0x14
   119c2:	ad 8b       	std	Y+21, r26	; 0x15
   119c4:	be 8b       	std	Y+22, r27	; 0x16
			res = dir_sdi(&dj, 0);
   119c6:	8d 2d       	mov	r24, r13
   119c8:	9c 2d       	mov	r25, r12
   119ca:	60 e0       	ldi	r22, 0x00	; 0
   119cc:	70 e0       	ldi	r23, 0x00	; 0
   119ce:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
			if (res != FR_OK) break;
   119d2:	00 97       	sbiw	r24, 0x00	; 0
   119d4:	09 f0       	breq	.+2      	; 0x119d8 <f_getcwd+0x110>
   119d6:	79 c0       	rjmp	.+242    	; 0x11aca <f_getcwd+0x202>
			do {							/* Find the entry links to the child dir */
				res = dir_read(&dj);
   119d8:	8d 2d       	mov	r24, r13
   119da:	9c 2d       	mov	r25, r12
   119dc:	0e 94 a0 85 	call	0x10b40	; 0x10b40 <_ZL8dir_readP3DIR>
				if (res != FR_OK) break;
   119e0:	00 97       	sbiw	r24, 0x00	; 0
   119e2:	b1 f5       	brne	.+108    	; 0x11a50 <f_getcwd+0x188>
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
   119e4:	ef 8d       	ldd	r30, Y+31	; 0x1f
   119e6:	f8 a1       	ldd	r31, Y+32	; 0x20
   119e8:	55 89       	ldd	r21, Z+21	; 0x15
   119ea:	21 96       	adiw	r28, 0x01	; 1
   119ec:	5f af       	std	Y+63, r21	; 0x3f
   119ee:	21 97       	sbiw	r28, 0x01	; 1
   119f0:	1f ae       	std	Y+63, r1	; 0x3f
   119f2:	84 89       	ldd	r24, Z+20	; 0x14
   119f4:	90 e0       	ldi	r25, 0x00	; 0
   119f6:	21 96       	adiw	r28, 0x01	; 1
   119f8:	ae ad       	ldd	r26, Y+62	; 0x3e
   119fa:	bf ad       	ldd	r27, Y+63	; 0x3f
   119fc:	21 97       	sbiw	r28, 0x01	; 1
   119fe:	8a 2b       	or	r24, r26
   11a00:	9b 2b       	or	r25, r27
   11a02:	a0 e0       	ldi	r26, 0x00	; 0
   11a04:	b0 e0       	ldi	r27, 0x00	; 0
   11a06:	dc 01       	movw	r26, r24
   11a08:	99 27       	eor	r25, r25
   11a0a:	88 27       	eor	r24, r24
   11a0c:	23 8d       	ldd	r18, Z+27	; 0x1b
   11a0e:	23 96       	adiw	r28, 0x03	; 3
   11a10:	2f af       	std	Y+63, r18	; 0x3f
   11a12:	23 97       	sbiw	r28, 0x03	; 3
   11a14:	22 96       	adiw	r28, 0x02	; 2
   11a16:	1f ae       	std	Y+63, r1	; 0x3f
   11a18:	22 97       	sbiw	r28, 0x02	; 2
   11a1a:	22 8d       	ldd	r18, Z+26	; 0x1a
   11a1c:	30 e0       	ldi	r19, 0x00	; 0
   11a1e:	23 96       	adiw	r28, 0x03	; 3
   11a20:	4e ad       	ldd	r20, Y+62	; 0x3e
   11a22:	5f ad       	ldd	r21, Y+63	; 0x3f
   11a24:	23 97       	sbiw	r28, 0x03	; 3
   11a26:	24 2b       	or	r18, r20
   11a28:	35 2b       	or	r19, r21
   11a2a:	40 e0       	ldi	r20, 0x00	; 0
   11a2c:	50 e0       	ldi	r21, 0x00	; 0
   11a2e:	82 2b       	or	r24, r18
   11a30:	93 2b       	or	r25, r19
   11a32:	a4 2b       	or	r26, r20
   11a34:	b5 2b       	or	r27, r21
   11a36:	68 16       	cp	r6, r24
   11a38:	79 06       	cpc	r7, r25
   11a3a:	8a 06       	cpc	r8, r26
   11a3c:	9b 06       	cpc	r9, r27
   11a3e:	61 f0       	breq	.+24     	; 0x11a58 <f_getcwd+0x190>
				res = dir_next(&dj, 0);	
   11a40:	8d 2d       	mov	r24, r13
   11a42:	9c 2d       	mov	r25, r12
   11a44:	60 e0       	ldi	r22, 0x00	; 0
   11a46:	70 e0       	ldi	r23, 0x00	; 0
   11a48:	0e 94 ae 82 	call	0x1055c	; 0x1055c <_ZL8dir_nextP3DIRi>
			res = dir_read(&dj);
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
			if (res != FR_OK) break;
			do {							/* Find the entry links to the child dir */
   11a4c:	00 97       	sbiw	r24, 0x00	; 0
   11a4e:	21 f2       	breq	.-120    	; 0x119d8 <f_getcwd+0x110>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   11a50:	84 30       	cpi	r24, 0x04	; 4
   11a52:	91 05       	cpc	r25, r1
   11a54:	d1 f5       	brne	.+116    	; 0x11aca <f_getcwd+0x202>
   11a56:	3b c0       	rjmp	.+118    	; 0x11ace <f_getcwd+0x206>
			if (res != FR_OK) break;
#if _USE_LFN
			fno.lfname = path;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
   11a58:	8d 2d       	mov	r24, r13
   11a5a:	9c 2d       	mov	r25, r12
   11a5c:	b2 01       	movw	r22, r4
   11a5e:	0e 94 60 78 	call	0xf0c0	; 0xf0c0 <_ZL12get_fileinfoP3DIRP7FILINFO>
   11a62:	f1 01       	movw	r30, r2
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
   11a64:	80 e0       	ldi	r24, 0x00	; 0
   11a66:	90 e0       	ldi	r25, 0x00	; 0
   11a68:	01 c0       	rjmp	.+2      	; 0x11a6c <f_getcwd+0x1a4>
   11a6a:	01 96       	adiw	r24, 0x01	; 1
   11a6c:	21 91       	ld	r18, Z+
   11a6e:	22 23       	and	r18, r18
   11a70:	e1 f7       	brne	.-8      	; 0x11a6a <f_getcwd+0x1a2>
			if (i < n + 3) {
   11a72:	9c 01       	movw	r18, r24
   11a74:	2d 5f       	subi	r18, 0xFD	; 253
   11a76:	3f 4f       	sbci	r19, 0xFF	; 255
   11a78:	02 17       	cp	r16, r18
   11a7a:	13 07       	cpc	r17, r19
   11a7c:	60 f1       	brcs	.+88     	; 0x11ad6 <f_getcwd+0x20e>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
   11a7e:	fc 01       	movw	r30, r24
   11a80:	39 96       	adiw	r30, 0x09	; 9
   11a82:	e4 0d       	add	r30, r4
   11a84:	f5 1d       	adc	r31, r5
   11a86:	98 01       	movw	r18, r16
   11a88:	07 c0       	rjmp	.+14     	; 0x11a98 <f_getcwd+0x1d0>
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
			}
			while (n) path[--i] = tp[--n];
   11a8a:	21 50       	subi	r18, 0x01	; 1
   11a8c:	30 40       	sbci	r19, 0x00	; 0
   11a8e:	42 0f       	add	r20, r18
   11a90:	53 1f       	adc	r21, r19
   11a92:	62 91       	ld	r22, -Z
   11a94:	da 01       	movw	r26, r20
   11a96:	6c 93       	st	X, r22
   11a98:	49 ad       	ldd	r20, Y+57	; 0x39
   11a9a:	5a ad       	ldd	r21, Y+58	; 0x3a
   11a9c:	e2 15       	cp	r30, r2
   11a9e:	f3 05       	cpc	r31, r3
   11aa0:	a1 f7       	brne	.-24     	; 0x11a8a <f_getcwd+0x1c2>
   11aa2:	80 95       	com	r24
   11aa4:	90 95       	com	r25
			path[--i] = '/';
   11aa6:	08 0f       	add	r16, r24
   11aa8:	19 1f       	adc	r17, r25
   11aaa:	40 0f       	add	r20, r16
   11aac:	51 1f       	adc	r21, r17
   11aae:	2f e2       	ldi	r18, 0x2F	; 47
   11ab0:	fa 01       	movw	r30, r20
   11ab2:	20 83       	st	Z, r18
	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
	if (res == FR_OK) {
		INIT_BUF(dj);
		i = sz_path;		/* Bottom of buffer (dir stack base) */
		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
   11ab4:	6b 88       	ldd	r6, Y+19	; 0x13
   11ab6:	7c 88       	ldd	r7, Y+20	; 0x14
   11ab8:	8d 88       	ldd	r8, Y+21	; 0x15
   11aba:	9e 88       	ldd	r9, Y+22	; 0x16
   11abc:	61 14       	cp	r6, r1
   11abe:	71 04       	cpc	r7, r1
   11ac0:	81 04       	cpc	r8, r1
   11ac2:	91 04       	cpc	r9, r1
   11ac4:	09 f0       	breq	.+2      	; 0x11ac8 <f_getcwd+0x200>
   11ac6:	4c cf       	rjmp	.-360    	; 0x11960 <f_getcwd+0x98>
   11ac8:	09 c0       	rjmp	.+18     	; 0x11adc <f_getcwd+0x214>
			res = dir_sdi(&dj, 1);			/* Get parent dir */
			if (res != FR_OK) break;
			res = dir_read(&dj);
			if (res != FR_OK) break;
			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
			res = dir_sdi(&dj, 0);
   11aca:	7c 01       	movw	r14, r24
   11acc:	07 c0       	rjmp	.+14     	; 0x11adc <f_getcwd+0x214>
				res = dir_read(&dj);
				if (res != FR_OK) break;
				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
				res = dir_next(&dj, 0);	
			} while (res == FR_OK);
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
   11ace:	f2 e0       	ldi	r31, 0x02	; 2
   11ad0:	ef 2e       	mov	r14, r31
   11ad2:	f1 2c       	mov	r15, r1
   11ad4:	03 c0       	rjmp	.+6      	; 0x11adc <f_getcwd+0x214>
			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
			tp = fno.fname;
			if (_USE_LFN && *path) tp = path;
			for (n = 0; tp[n]; n++) ;
			if (i < n + 3) {
				res = FR_NOT_ENOUGH_CORE; break;
   11ad6:	e1 e1       	ldi	r30, 0x11	; 17
   11ad8:	ee 2e       	mov	r14, r30
   11ada:	f1 2c       	mov	r15, r1
			}
			while (n) path[--i] = tp[--n];
			path[--i] = '/';
		}
		tp = path;
   11adc:	e9 ad       	ldd	r30, Y+57	; 0x39
   11ade:	fa ad       	ldd	r31, Y+58	; 0x3a
		if (res == FR_OK) {
   11ae0:	e1 14       	cp	r14, r1
   11ae2:	f1 04       	cpc	r15, r1
   11ae4:	09 f5       	brne	.+66     	; 0x11b28 <f_getcwd+0x260>
			*tp++ = '0' + CurrVol;			/* Put drive number */
   11ae6:	80 91 3d 1f 	lds	r24, 0x1F3D
   11aea:	80 5d       	subi	r24, 0xD0	; 208
   11aec:	df 01       	movw	r26, r30
   11aee:	8d 93       	st	X+, r24
			*tp++ = ':';
   11af0:	8a e3       	ldi	r24, 0x3A	; 58
   11af2:	81 83       	std	Z+1, r24	; 0x01
   11af4:	cd 01       	movw	r24, r26
   11af6:	01 96       	adiw	r24, 0x01	; 1
			if (i == sz_path) {				/* Root-dir */
   11af8:	0a 15       	cp	r16, r10
   11afa:	1b 05       	cpc	r17, r11
   11afc:	39 f4       	brne	.+14     	; 0x11b0c <f_getcwd+0x244>
				*tp++ = '/';
   11afe:	2f e2       	ldi	r18, 0x2F	; 47
   11b00:	11 96       	adiw	r26, 0x01	; 1
   11b02:	2c 93       	st	X, r18
   11b04:	11 97       	sbiw	r26, 0x01	; 1
   11b06:	fc 01       	movw	r30, r24
   11b08:	31 96       	adiw	r30, 0x01	; 1
   11b0a:	0e c0       	rjmp	.+28     	; 0x11b28 <f_getcwd+0x260>
	LEAVE_FF(dj.fs, res);
}


#if _FS_RPATH >= 2
FRESULT f_getcwd (
   11b0c:	df 01       	movw	r26, r30
   11b0e:	12 96       	adiw	r26, 0x02	; 2
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
					*tp++ = path[i++];
   11b10:	e9 ad       	ldd	r30, Y+57	; 0x39
   11b12:	fa ad       	ldd	r31, Y+58	; 0x3a
   11b14:	e0 0f       	add	r30, r16
   11b16:	f1 1f       	adc	r31, r17
   11b18:	80 81       	ld	r24, Z
   11b1a:	8d 93       	st	X+, r24
   11b1c:	fd 01       	movw	r30, r26
   11b1e:	0f 5f       	subi	r16, 0xFF	; 255
   11b20:	1f 4f       	sbci	r17, 0xFF	; 255
			*tp++ = '0' + CurrVol;			/* Put drive number */
			*tp++ = ':';
			if (i == sz_path) {				/* Root-dir */
				*tp++ = '/';
			} else {						/* Sub-dir */
				do		/* Add stacked path str */
   11b22:	0a 15       	cp	r16, r10
   11b24:	1b 05       	cpc	r17, r11
   11b26:	a0 f3       	brcs	.-24     	; 0x11b10 <f_getcwd+0x248>
					*tp++ = path[i++];
				while (i < sz_path);
			}
		}
		*tp = 0;
   11b28:	10 82       	st	Z, r1
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
   11b2a:	c7 01       	movw	r24, r14
   11b2c:	ce 5b       	subi	r28, 0xBE	; 190
   11b2e:	df 4f       	sbci	r29, 0xFF	; 255
   11b30:	0f b6       	in	r0, 0x3f	; 63
   11b32:	f8 94       	cli
   11b34:	de bf       	out	0x3e, r29	; 62
   11b36:	0f be       	out	0x3f, r0	; 63
   11b38:	cd bf       	out	0x3d, r28	; 61
   11b3a:	cf 91       	pop	r28
   11b3c:	df 91       	pop	r29
   11b3e:	1f 91       	pop	r17
   11b40:	0f 91       	pop	r16
   11b42:	ff 90       	pop	r15
   11b44:	ef 90       	pop	r14
   11b46:	df 90       	pop	r13
   11b48:	cf 90       	pop	r12
   11b4a:	bf 90       	pop	r11
   11b4c:	af 90       	pop	r10
   11b4e:	9f 90       	pop	r9
   11b50:	8f 90       	pop	r8
   11b52:	7f 90       	pop	r7
   11b54:	6f 90       	pop	r6
   11b56:	5f 90       	pop	r5
   11b58:	4f 90       	pop	r4
   11b5a:	3f 90       	pop	r3
   11b5c:	2f 90       	pop	r2
   11b5e:	08 95       	ret

00011b60 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
   11b60:	2f 92       	push	r2
   11b62:	3f 92       	push	r3
   11b64:	4f 92       	push	r4
   11b66:	5f 92       	push	r5
   11b68:	6f 92       	push	r6
   11b6a:	7f 92       	push	r7
   11b6c:	8f 92       	push	r8
   11b6e:	9f 92       	push	r9
   11b70:	af 92       	push	r10
   11b72:	bf 92       	push	r11
   11b74:	cf 92       	push	r12
   11b76:	df 92       	push	r13
   11b78:	ef 92       	push	r14
   11b7a:	ff 92       	push	r15
   11b7c:	0f 93       	push	r16
   11b7e:	1f 93       	push	r17
   11b80:	df 93       	push	r29
   11b82:	cf 93       	push	r28
   11b84:	00 d0       	rcall	.+0      	; 0x11b86 <f_lseek+0x26>
   11b86:	00 d0       	rcall	.+0      	; 0x11b88 <f_lseek+0x28>
   11b88:	cd b7       	in	r28, 0x3d	; 61
   11b8a:	de b7       	in	r29, 0x3e	; 62
   11b8c:	9e 83       	std	Y+6, r25	; 0x06
   11b8e:	8d 83       	std	Y+5, r24	; 0x05
   11b90:	7a 01       	movw	r14, r20
   11b92:	8b 01       	movw	r16, r22
	FRESULT res;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   11b94:	dc 01       	movw	r26, r24
   11b96:	12 96       	adiw	r26, 0x02	; 2
   11b98:	6d 91       	ld	r22, X+
   11b9a:	7c 91       	ld	r23, X
   11b9c:	13 97       	sbiw	r26, 0x03	; 3
   11b9e:	8d 91       	ld	r24, X+
   11ba0:	9c 91       	ld	r25, X
   11ba2:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   11ba6:	4c 01       	movw	r8, r24
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   11ba8:	00 97       	sbiw	r24, 0x00	; 0
   11baa:	09 f0       	breq	.+2      	; 0x11bae <f_lseek+0x4e>
   11bac:	85 c1       	rjmp	.+778    	; 0x11eb8 <f_lseek+0x358>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
   11bae:	ed 81       	ldd	r30, Y+5	; 0x05
   11bb0:	fe 81       	ldd	r31, Y+6	; 0x06
   11bb2:	24 81       	ldd	r18, Z+4	; 0x04
   11bb4:	27 fd       	sbrc	r18, 7
   11bb6:	7d c1       	rjmp	.+762    	; 0x11eb2 <f_lseek+0x352>

	/* Normal Seek */
	{
		DWORD clst, bcs, nsect, ifptr;

		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
   11bb8:	82 85       	ldd	r24, Z+10	; 0x0a
   11bba:	93 85       	ldd	r25, Z+11	; 0x0b
   11bbc:	a4 85       	ldd	r26, Z+12	; 0x0c
   11bbe:	b5 85       	ldd	r27, Z+13	; 0x0d
   11bc0:	8e 15       	cp	r24, r14
   11bc2:	9f 05       	cpc	r25, r15
   11bc4:	a0 07       	cpc	r26, r16
   11bc6:	b1 07       	cpc	r27, r17
   11bc8:	20 f4       	brcc	.+8      	; 0x11bd2 <f_lseek+0x72>
   11bca:	21 fd       	sbrc	r18, 1
   11bcc:	02 c0       	rjmp	.+4      	; 0x11bd2 <f_lseek+0x72>
   11bce:	7c 01       	movw	r14, r24
   11bd0:	8d 01       	movw	r16, r26
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
   11bd2:	ed 81       	ldd	r30, Y+5	; 0x05
   11bd4:	fe 81       	ldd	r31, Y+6	; 0x06
   11bd6:	86 81       	ldd	r24, Z+6	; 0x06
   11bd8:	97 81       	ldd	r25, Z+7	; 0x07
   11bda:	a0 85       	ldd	r26, Z+8	; 0x08
   11bdc:	b1 85       	ldd	r27, Z+9	; 0x09
		fp->fptr = nsect = 0;
   11bde:	16 82       	std	Z+6, r1	; 0x06
   11be0:	17 82       	std	Z+7, r1	; 0x07
   11be2:	10 86       	std	Z+8, r1	; 0x08
   11be4:	11 86       	std	Z+9, r1	; 0x09
		if (ofs) {
   11be6:	e1 14       	cp	r14, r1
   11be8:	f1 04       	cpc	r15, r1
   11bea:	01 05       	cpc	r16, r1
   11bec:	11 05       	cpc	r17, r1
   11bee:	09 f4       	brne	.+2      	; 0x11bf2 <f_lseek+0x92>
   11bf0:	2e c1       	rjmp	.+604    	; 0x11e4e <f_lseek+0x2ee>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
   11bf2:	20 80       	ld	r2, Z
   11bf4:	31 80       	ldd	r3, Z+1	; 0x01
   11bf6:	f1 01       	movw	r30, r2
   11bf8:	a2 80       	ldd	r10, Z+2	; 0x02
   11bfa:	bb 24       	eor	r11, r11
   11bfc:	cc 24       	eor	r12, r12
   11bfe:	dd 24       	eor	r13, r13
   11c00:	29 e0       	ldi	r18, 0x09	; 9
   11c02:	aa 0c       	add	r10, r10
   11c04:	bb 1c       	adc	r11, r11
   11c06:	cc 1c       	adc	r12, r12
   11c08:	dd 1c       	adc	r13, r13
   11c0a:	2a 95       	dec	r18
   11c0c:	d1 f7       	brne	.-12     	; 0x11c02 <f_lseek+0xa2>
			if (ifptr > 0 &&
   11c0e:	00 97       	sbiw	r24, 0x00	; 0
   11c10:	a1 05       	cpc	r26, r1
   11c12:	b1 05       	cpc	r27, r1
   11c14:	f1 f1       	breq	.+124    	; 0x11c92 <f_lseek+0x132>
   11c16:	2c 01       	movw	r4, r24
   11c18:	3d 01       	movw	r6, r26
   11c1a:	08 94       	sec
   11c1c:	41 08       	sbc	r4, r1
   11c1e:	51 08       	sbc	r5, r1
   11c20:	61 08       	sbc	r6, r1
   11c22:	71 08       	sbc	r7, r1
   11c24:	c8 01       	movw	r24, r16
   11c26:	b7 01       	movw	r22, r14
   11c28:	61 50       	subi	r22, 0x01	; 1
   11c2a:	70 40       	sbci	r23, 0x00	; 0
   11c2c:	80 40       	sbci	r24, 0x00	; 0
   11c2e:	90 40       	sbci	r25, 0x00	; 0
   11c30:	a6 01       	movw	r20, r12
   11c32:	95 01       	movw	r18, r10
   11c34:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
   11c38:	29 83       	std	Y+1, r18	; 0x01
   11c3a:	3a 83       	std	Y+2, r19	; 0x02
   11c3c:	4b 83       	std	Y+3, r20	; 0x03
   11c3e:	5c 83       	std	Y+4, r21	; 0x04
   11c40:	c3 01       	movw	r24, r6
   11c42:	b2 01       	movw	r22, r4
   11c44:	a6 01       	movw	r20, r12
   11c46:	95 01       	movw	r18, r10
   11c48:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
   11c4c:	89 81       	ldd	r24, Y+1	; 0x01
   11c4e:	9a 81       	ldd	r25, Y+2	; 0x02
   11c50:	ab 81       	ldd	r26, Y+3	; 0x03
   11c52:	bc 81       	ldd	r27, Y+4	; 0x04
   11c54:	82 17       	cp	r24, r18
   11c56:	93 07       	cpc	r25, r19
   11c58:	a4 07       	cpc	r26, r20
   11c5a:	b5 07       	cpc	r27, r21
   11c5c:	d0 f0       	brcs	.+52     	; 0x11c92 <f_lseek+0x132>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
   11c5e:	88 27       	eor	r24, r24
   11c60:	99 27       	eor	r25, r25
   11c62:	dc 01       	movw	r26, r24
   11c64:	8a 19       	sub	r24, r10
   11c66:	9b 09       	sbc	r25, r11
   11c68:	ac 09       	sbc	r26, r12
   11c6a:	bd 09       	sbc	r27, r13
   11c6c:	84 21       	and	r24, r4
   11c6e:	95 21       	and	r25, r5
   11c70:	a6 21       	and	r26, r6
   11c72:	b7 21       	and	r27, r7
   11c74:	ed 81       	ldd	r30, Y+5	; 0x05
   11c76:	fe 81       	ldd	r31, Y+6	; 0x06
   11c78:	86 83       	std	Z+6, r24	; 0x06
   11c7a:	97 83       	std	Z+7, r25	; 0x07
   11c7c:	a0 87       	std	Z+8, r26	; 0x08
   11c7e:	b1 87       	std	Z+9, r27	; 0x09
				ofs -= fp->fptr;
   11c80:	e8 1a       	sub	r14, r24
   11c82:	f9 0a       	sbc	r15, r25
   11c84:	0a 0b       	sbc	r16, r26
   11c86:	1b 0b       	sbc	r17, r27
				clst = fp->curr_clust;
   11c88:	42 89       	ldd	r20, Z+18	; 0x12
   11c8a:	53 89       	ldd	r21, Z+19	; 0x13
   11c8c:	64 89       	ldd	r22, Z+20	; 0x14
   11c8e:	75 89       	ldd	r23, Z+21	; 0x15
   11c90:	36 c0       	rjmp	.+108    	; 0x11cfe <f_lseek+0x19e>
			} else {									/* When seek to back cluster, */
				clst = fp->org_clust;					/* start from the first cluster */
   11c92:	ad 81       	ldd	r26, Y+5	; 0x05
   11c94:	be 81       	ldd	r27, Y+6	; 0x06
   11c96:	1e 96       	adiw	r26, 0x0e	; 14
   11c98:	4d 91       	ld	r20, X+
   11c9a:	5d 91       	ld	r21, X+
   11c9c:	6d 91       	ld	r22, X+
   11c9e:	7c 91       	ld	r23, X
   11ca0:	51 97       	sbiw	r26, 0x11	; 17
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
   11ca2:	41 15       	cp	r20, r1
   11ca4:	51 05       	cpc	r21, r1
   11ca6:	61 05       	cpc	r22, r1
   11ca8:	71 05       	cpc	r23, r1
   11caa:	09 f5       	brne	.+66     	; 0x11cee <f_lseek+0x18e>
					clst = create_chain(fp->fs, 0);
   11cac:	c1 01       	movw	r24, r2
   11cae:	40 e0       	ldi	r20, 0x00	; 0
   11cb0:	50 e0       	ldi	r21, 0x00	; 0
   11cb2:	ba 01       	movw	r22, r20
   11cb4:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   11cb8:	ab 01       	movw	r20, r22
   11cba:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   11cbc:	41 30       	cpi	r20, 0x01	; 1
   11cbe:	51 05       	cpc	r21, r1
   11cc0:	61 05       	cpc	r22, r1
   11cc2:	71 05       	cpc	r23, r1
   11cc4:	19 f4       	brne	.+6      	; 0x11ccc <f_lseek+0x16c>
   11cc6:	ed 81       	ldd	r30, Y+5	; 0x05
   11cc8:	fe 81       	ldd	r31, Y+6	; 0x06
   11cca:	60 c0       	rjmp	.+192    	; 0x11d8c <f_lseek+0x22c>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   11ccc:	4f 3f       	cpi	r20, 0xFF	; 255
   11cce:	ff ef       	ldi	r31, 0xFF	; 255
   11cd0:	5f 07       	cpc	r21, r31
   11cd2:	ff ef       	ldi	r31, 0xFF	; 255
   11cd4:	6f 07       	cpc	r22, r31
   11cd6:	ff ef       	ldi	r31, 0xFF	; 255
   11cd8:	7f 07       	cpc	r23, r31
   11cda:	19 f4       	brne	.+6      	; 0x11ce2 <f_lseek+0x182>
   11cdc:	ad 81       	ldd	r26, Y+5	; 0x05
   11cde:	be 81       	ldd	r27, Y+6	; 0x06
   11ce0:	36 c0       	rjmp	.+108    	; 0x11d4e <f_lseek+0x1ee>
					fp->org_clust = clst;
   11ce2:	ed 81       	ldd	r30, Y+5	; 0x05
   11ce4:	fe 81       	ldd	r31, Y+6	; 0x06
   11ce6:	46 87       	std	Z+14, r20	; 0x0e
   11ce8:	57 87       	std	Z+15, r21	; 0x0f
   11cea:	60 8b       	std	Z+16, r22	; 0x10
   11cec:	71 8b       	std	Z+17, r23	; 0x11
				}
#endif
				fp->curr_clust = clst;
   11cee:	ad 81       	ldd	r26, Y+5	; 0x05
   11cf0:	be 81       	ldd	r27, Y+6	; 0x06
   11cf2:	52 96       	adiw	r26, 0x12	; 18
   11cf4:	4d 93       	st	X+, r20
   11cf6:	5d 93       	st	X+, r21
   11cf8:	6d 93       	st	X+, r22
   11cfa:	7c 93       	st	X, r23
   11cfc:	55 97       	sbiw	r26, 0x15	; 21
			}
			if (clst != 0) {
   11cfe:	41 15       	cp	r20, r1
   11d00:	51 05       	cpc	r21, r1
   11d02:	61 05       	cpc	r22, r1
   11d04:	71 05       	cpc	r23, r1
   11d06:	09 f4       	brne	.+2      	; 0x11d0a <f_lseek+0x1aa>
   11d08:	a2 c0       	rjmp	.+324    	; 0x11e4e <f_lseek+0x2ee>
   11d0a:	4d 80       	ldd	r4, Y+5	; 0x05
   11d0c:	5e 80       	ldd	r5, Y+6	; 0x06
   11d0e:	5c c0       	rjmp	.+184    	; 0x11dc8 <f_lseek+0x268>
				while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
   11d10:	f2 01       	movw	r30, r4
   11d12:	24 81       	ldd	r18, Z+4	; 0x04
   11d14:	80 81       	ld	r24, Z
   11d16:	91 81       	ldd	r25, Z+1	; 0x01
   11d18:	21 ff       	sbrs	r18, 1
   11d1a:	0a c0       	rjmp	.+20     	; 0x11d30 <f_lseek+0x1d0>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
   11d1c:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   11d20:	ab 01       	movw	r20, r22
   11d22:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* When disk gets full, clip file size */
   11d24:	41 15       	cp	r20, r1
   11d26:	51 05       	cpc	r21, r1
   11d28:	61 05       	cpc	r22, r1
   11d2a:	71 05       	cpc	r23, r1
   11d2c:	29 f4       	brne	.+10     	; 0x11d38 <f_lseek+0x1d8>
   11d2e:	55 c0       	rjmp	.+170    	; 0x11dda <f_lseek+0x27a>
							ofs = bcs; break;
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
   11d30:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   11d34:	ab 01       	movw	r20, r22
   11d36:	bc 01       	movw	r22, r24
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   11d38:	4f 3f       	cpi	r20, 0xFF	; 255
   11d3a:	ff ef       	ldi	r31, 0xFF	; 255
   11d3c:	5f 07       	cpc	r21, r31
   11d3e:	ff ef       	ldi	r31, 0xFF	; 255
   11d40:	6f 07       	cpc	r22, r31
   11d42:	ff ef       	ldi	r31, 0xFF	; 255
   11d44:	7f 07       	cpc	r23, r31
   11d46:	71 f4       	brne	.+28     	; 0x11d64 <f_lseek+0x204>
   11d48:	5e 82       	std	Y+6, r5	; 0x06
   11d4a:	4d 82       	std	Y+5, r4	; 0x05
   11d4c:	d2 01       	movw	r26, r4
   11d4e:	14 96       	adiw	r26, 0x04	; 4
   11d50:	8c 91       	ld	r24, X
   11d52:	14 97       	sbiw	r26, 0x04	; 4
   11d54:	80 68       	ori	r24, 0x80	; 128
   11d56:	14 96       	adiw	r26, 0x04	; 4
   11d58:	8c 93       	st	X, r24
   11d5a:	14 97       	sbiw	r26, 0x04	; 4
   11d5c:	f1 e0       	ldi	r31, 0x01	; 1
   11d5e:	8f 2e       	mov	r8, r31
   11d60:	91 2c       	mov	r9, r1
   11d62:	aa c0       	rjmp	.+340    	; 0x11eb8 <f_lseek+0x358>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
   11d64:	42 30       	cpi	r20, 0x02	; 2
   11d66:	51 05       	cpc	r21, r1
   11d68:	61 05       	cpc	r22, r1
   11d6a:	71 05       	cpc	r23, r1
   11d6c:	60 f0       	brcs	.+24     	; 0x11d86 <f_lseek+0x226>
   11d6e:	d2 01       	movw	r26, r4
   11d70:	ed 91       	ld	r30, X+
   11d72:	fc 91       	ld	r31, X
   11d74:	82 8d       	ldd	r24, Z+26	; 0x1a
   11d76:	93 8d       	ldd	r25, Z+27	; 0x1b
   11d78:	a4 8d       	ldd	r26, Z+28	; 0x1c
   11d7a:	b5 8d       	ldd	r27, Z+29	; 0x1d
   11d7c:	48 17       	cp	r20, r24
   11d7e:	59 07       	cpc	r21, r25
   11d80:	6a 07       	cpc	r22, r26
   11d82:	7b 07       	cpc	r23, r27
   11d84:	38 f0       	brcs	.+14     	; 0x11d94 <f_lseek+0x234>
   11d86:	5e 82       	std	Y+6, r5	; 0x06
   11d88:	4d 82       	std	Y+5, r4	; 0x05
   11d8a:	f2 01       	movw	r30, r4
   11d8c:	84 81       	ldd	r24, Z+4	; 0x04
   11d8e:	80 68       	ori	r24, 0x80	; 128
   11d90:	84 83       	std	Z+4, r24	; 0x04
   11d92:	8f c0       	rjmp	.+286    	; 0x11eb2 <f_lseek+0x352>
					fp->curr_clust = clst;
   11d94:	d2 01       	movw	r26, r4
   11d96:	52 96       	adiw	r26, 0x12	; 18
   11d98:	4d 93       	st	X+, r20
   11d9a:	5d 93       	st	X+, r21
   11d9c:	6d 93       	st	X+, r22
   11d9e:	7c 93       	st	X, r23
   11da0:	55 97       	sbiw	r26, 0x15	; 21
					fp->fptr += bcs;
   11da2:	16 96       	adiw	r26, 0x06	; 6
   11da4:	8d 91       	ld	r24, X+
   11da6:	9d 91       	ld	r25, X+
   11da8:	0d 90       	ld	r0, X+
   11daa:	bc 91       	ld	r27, X
   11dac:	a0 2d       	mov	r26, r0
   11dae:	8a 0d       	add	r24, r10
   11db0:	9b 1d       	adc	r25, r11
   11db2:	ac 1d       	adc	r26, r12
   11db4:	bd 1d       	adc	r27, r13
   11db6:	f2 01       	movw	r30, r4
   11db8:	86 83       	std	Z+6, r24	; 0x06
   11dba:	97 83       	std	Z+7, r25	; 0x07
   11dbc:	a0 87       	std	Z+8, r26	; 0x08
   11dbe:	b1 87       	std	Z+9, r27	; 0x09
					ofs -= bcs;
   11dc0:	ea 18       	sub	r14, r10
   11dc2:	fb 08       	sbc	r15, r11
   11dc4:	0c 09       	sbc	r16, r12
   11dc6:	1d 09       	sbc	r17, r13
				}
#endif
				fp->curr_clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
   11dc8:	ae 14       	cp	r10, r14
   11dca:	bf 04       	cpc	r11, r15
   11dcc:	c0 06       	cpc	r12, r16
   11dce:	d1 06       	cpc	r13, r17
   11dd0:	08 f4       	brcc	.+2      	; 0x11dd4 <f_lseek+0x274>
   11dd2:	9e cf       	rjmp	.-196    	; 0x11d10 <f_lseek+0x1b0>
   11dd4:	5e 82       	std	Y+6, r5	; 0x06
   11dd6:	4d 82       	std	Y+5, r4	; 0x05
   11dd8:	04 c0       	rjmp	.+8      	; 0x11de2 <f_lseek+0x282>
   11dda:	5e 82       	std	Y+6, r5	; 0x06
   11ddc:	4d 82       	std	Y+5, r4	; 0x05
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
						if (clst == 0) {				/* When disk gets full, clip file size */
   11dde:	86 01       	movw	r16, r12
   11de0:	75 01       	movw	r14, r10
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
					fp->curr_clust = clst;
					fp->fptr += bcs;
					ofs -= bcs;
				}
				fp->fptr += ofs;
   11de2:	ed 81       	ldd	r30, Y+5	; 0x05
   11de4:	fe 81       	ldd	r31, Y+6	; 0x06
   11de6:	86 81       	ldd	r24, Z+6	; 0x06
   11de8:	97 81       	ldd	r25, Z+7	; 0x07
   11dea:	a0 85       	ldd	r26, Z+8	; 0x08
   11dec:	b1 85       	ldd	r27, Z+9	; 0x09
   11dee:	8e 0d       	add	r24, r14
   11df0:	9f 1d       	adc	r25, r15
   11df2:	a0 1f       	adc	r26, r16
   11df4:	b1 1f       	adc	r27, r17
   11df6:	86 83       	std	Z+6, r24	; 0x06
   11df8:	97 83       	std	Z+7, r25	; 0x07
   11dfa:	a0 87       	std	Z+8, r26	; 0x08
   11dfc:	b1 87       	std	Z+9, r27	; 0x09
				if (ofs % SS(fp->fs)) {
   11dfe:	d8 01       	movw	r26, r16
   11e00:	c7 01       	movw	r24, r14
   11e02:	91 70       	andi	r25, 0x01	; 1
   11e04:	a0 70       	andi	r26, 0x00	; 0
   11e06:	b0 70       	andi	r27, 0x00	; 0
   11e08:	00 97       	sbiw	r24, 0x00	; 0
   11e0a:	a1 05       	cpc	r26, r1
   11e0c:	b1 05       	cpc	r27, r1
   11e0e:	f9 f0       	breq	.+62     	; 0x11e4e <f_lseek+0x2ee>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
   11e10:	80 81       	ld	r24, Z
   11e12:	91 81       	ldd	r25, Z+1	; 0x01
   11e14:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
   11e18:	61 15       	cp	r22, r1
   11e1a:	71 05       	cpc	r23, r1
   11e1c:	81 05       	cpc	r24, r1
   11e1e:	91 05       	cpc	r25, r1
   11e20:	51 f4       	brne	.+20     	; 0x11e36 <f_lseek+0x2d6>
   11e22:	ad 81       	ldd	r26, Y+5	; 0x05
   11e24:	be 81       	ldd	r27, Y+6	; 0x06
   11e26:	14 96       	adiw	r26, 0x04	; 4
   11e28:	8c 91       	ld	r24, X
   11e2a:	14 97       	sbiw	r26, 0x04	; 4
   11e2c:	80 68       	ori	r24, 0x80	; 128
   11e2e:	14 96       	adiw	r26, 0x04	; 4
   11e30:	8c 93       	st	X, r24
   11e32:	14 97       	sbiw	r26, 0x04	; 4
   11e34:	3e c0       	rjmp	.+124    	; 0x11eb2 <f_lseek+0x352>
					nsect += ofs / SS(fp->fs);
   11e36:	e9 e0       	ldi	r30, 0x09	; 9
   11e38:	16 95       	lsr	r17
   11e3a:	07 95       	ror	r16
   11e3c:	f7 94       	ror	r15
   11e3e:	e7 94       	ror	r14
   11e40:	ea 95       	dec	r30
   11e42:	d1 f7       	brne	.-12     	; 0x11e38 <f_lseek+0x2d8>
   11e44:	e6 0e       	add	r14, r22
   11e46:	f7 1e       	adc	r15, r23
   11e48:	08 1f       	adc	r16, r24
   11e4a:	19 1f       	adc	r17, r25
   11e4c:	03 c0       	rjmp	.+6      	; 0x11e54 <f_lseek+0x2f4>
			 && !(fp->flag & FA_WRITE)
#endif
			) ofs = fp->fsize;

		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
   11e4e:	ee 24       	eor	r14, r14
   11e50:	ff 24       	eor	r15, r15
   11e52:	87 01       	movw	r16, r14
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
					nsect += ofs / SS(fp->fs);
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
   11e54:	ed 81       	ldd	r30, Y+5	; 0x05
   11e56:	fe 81       	ldd	r31, Y+6	; 0x06
   11e58:	26 81       	ldd	r18, Z+6	; 0x06
   11e5a:	37 81       	ldd	r19, Z+7	; 0x07
   11e5c:	40 85       	ldd	r20, Z+8	; 0x08
   11e5e:	51 85       	ldd	r21, Z+9	; 0x09
   11e60:	da 01       	movw	r26, r20
   11e62:	c9 01       	movw	r24, r18
   11e64:	91 70       	andi	r25, 0x01	; 1
   11e66:	a0 70       	andi	r26, 0x00	; 0
   11e68:	b0 70       	andi	r27, 0x00	; 0
   11e6a:	00 97       	sbiw	r24, 0x00	; 0
   11e6c:	a1 05       	cpc	r26, r1
   11e6e:	b1 05       	cpc	r27, r1
   11e70:	69 f0       	breq	.+26     	; 0x11e8c <f_lseek+0x32c>
   11e72:	86 89       	ldd	r24, Z+22	; 0x16
   11e74:	97 89       	ldd	r25, Z+23	; 0x17
   11e76:	a0 8d       	ldd	r26, Z+24	; 0x18
   11e78:	b1 8d       	ldd	r27, Z+25	; 0x19
   11e7a:	e8 16       	cp	r14, r24
   11e7c:	f9 06       	cpc	r15, r25
   11e7e:	0a 07       	cpc	r16, r26
   11e80:	1b 07       	cpc	r17, r27
   11e82:	21 f0       	breq	.+8      	; 0x11e8c <f_lseek+0x32c>
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
				ABORT(fp->fs, FR_DISK_ERR);
#endif
			fp->dsect = nsect;
   11e84:	e6 8a       	std	Z+22, r14	; 0x16
   11e86:	f7 8a       	std	Z+23, r15	; 0x17
   11e88:	00 8f       	std	Z+24, r16	; 0x18
   11e8a:	11 8f       	std	Z+25, r17	; 0x19
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
   11e8c:	ed 81       	ldd	r30, Y+5	; 0x05
   11e8e:	fe 81       	ldd	r31, Y+6	; 0x06
   11e90:	82 85       	ldd	r24, Z+10	; 0x0a
   11e92:	93 85       	ldd	r25, Z+11	; 0x0b
   11e94:	a4 85       	ldd	r26, Z+12	; 0x0c
   11e96:	b5 85       	ldd	r27, Z+13	; 0x0d
   11e98:	82 17       	cp	r24, r18
   11e9a:	93 07       	cpc	r25, r19
   11e9c:	a4 07       	cpc	r26, r20
   11e9e:	b5 07       	cpc	r27, r21
   11ea0:	58 f4       	brcc	.+22     	; 0x11eb8 <f_lseek+0x358>
			fp->fsize = fp->fptr;
   11ea2:	22 87       	std	Z+10, r18	; 0x0a
   11ea4:	33 87       	std	Z+11, r19	; 0x0b
   11ea6:	44 87       	std	Z+12, r20	; 0x0c
   11ea8:	55 87       	std	Z+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
   11eaa:	84 81       	ldd	r24, Z+4	; 0x04
   11eac:	80 62       	ori	r24, 0x20	; 32
   11eae:	84 83       	std	Z+4, r24	; 0x04
   11eb0:	03 c0       	rjmp	.+6      	; 0x11eb8 <f_lseek+0x358>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
   11eb2:	72 e0       	ldi	r23, 0x02	; 2
   11eb4:	87 2e       	mov	r8, r23
   11eb6:	91 2c       	mov	r9, r1
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
}
   11eb8:	c4 01       	movw	r24, r8
   11eba:	26 96       	adiw	r28, 0x06	; 6
   11ebc:	0f b6       	in	r0, 0x3f	; 63
   11ebe:	f8 94       	cli
   11ec0:	de bf       	out	0x3e, r29	; 62
   11ec2:	0f be       	out	0x3f, r0	; 63
   11ec4:	cd bf       	out	0x3d, r28	; 61
   11ec6:	cf 91       	pop	r28
   11ec8:	df 91       	pop	r29
   11eca:	1f 91       	pop	r17
   11ecc:	0f 91       	pop	r16
   11ece:	ff 90       	pop	r15
   11ed0:	ef 90       	pop	r14
   11ed2:	df 90       	pop	r13
   11ed4:	cf 90       	pop	r12
   11ed6:	bf 90       	pop	r11
   11ed8:	af 90       	pop	r10
   11eda:	9f 90       	pop	r9
   11edc:	8f 90       	pop	r8
   11ede:	7f 90       	pop	r7
   11ee0:	6f 90       	pop	r6
   11ee2:	5f 90       	pop	r5
   11ee4:	4f 90       	pop	r4
   11ee6:	3f 90       	pop	r3
   11ee8:	2f 90       	pop	r2
   11eea:	08 95       	ret

00011eec <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const TCHAR *path	/* Pointer to the directory path */
)
{
   11eec:	0f 93       	push	r16
   11eee:	1f 93       	push	r17
   11ef0:	df 93       	push	r29
   11ef2:	cf 93       	push	r28
   11ef4:	cd b7       	in	r28, 0x3d	; 61
   11ef6:	de b7       	in	r29, 0x3e	; 62
   11ef8:	2e 97       	sbiw	r28, 0x0e	; 14
   11efa:	0f b6       	in	r0, 0x3f	; 63
   11efc:	f8 94       	cli
   11efe:	de bf       	out	0x3e, r29	; 62
   11f00:	0f be       	out	0x3f, r0	; 63
   11f02:	cd bf       	out	0x3d, r28	; 61
   11f04:	8c 01       	movw	r16, r24
   11f06:	7e 87       	std	Y+14, r23	; 0x0e
   11f08:	6d 87       	std	Y+13, r22	; 0x0d
	FRESULT res;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj->fs, 0);
   11f0a:	ce 01       	movw	r24, r28
   11f0c:	0d 96       	adiw	r24, 0x0d	; 13
   11f0e:	b8 01       	movw	r22, r16
   11f10:	40 e0       	ldi	r20, 0x00	; 0
   11f12:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   11f16:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   11f18:	00 97       	sbiw	r24, 0x00	; 0
   11f1a:	09 f0       	breq	.+2      	; 0x11f1e <f_opendir+0x32>
   11f1c:	4a c0       	rjmp	.+148    	; 0x11fb2 <f_opendir+0xc6>
		INIT_BUF(*dj);
   11f1e:	ce 01       	movw	r24, r28
   11f20:	01 96       	adiw	r24, 0x01	; 1
   11f22:	d8 01       	movw	r26, r16
   11f24:	55 96       	adiw	r26, 0x15	; 21
   11f26:	9c 93       	st	X, r25
   11f28:	8e 93       	st	-X, r24
   11f2a:	54 97       	sbiw	r26, 0x14	; 20
		res = follow_path(dj, path);			/* Follow the path to the directory */
   11f2c:	6d 85       	ldd	r22, Y+13	; 0x0d
   11f2e:	7e 85       	ldd	r23, Y+14	; 0x0e
   11f30:	c8 01       	movw	r24, r16
   11f32:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   11f36:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
   11f38:	00 97       	sbiw	r24, 0x00	; 0
   11f3a:	b1 f5       	brne	.+108    	; 0x11fa8 <f_opendir+0xbc>
			if (dj->dir) {						/* It is not the root dir */
   11f3c:	d8 01       	movw	r26, r16
   11f3e:	52 96       	adiw	r26, 0x12	; 18
   11f40:	ed 91       	ld	r30, X+
   11f42:	fc 91       	ld	r31, X
   11f44:	53 97       	sbiw	r26, 0x13	; 19
   11f46:	30 97       	sbiw	r30, 0x00	; 0
   11f48:	f9 f0       	breq	.+62     	; 0x11f88 <f_opendir+0x9c>
				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
   11f4a:	83 85       	ldd	r24, Z+11	; 0x0b
   11f4c:	84 ff       	sbrs	r24, 4
   11f4e:	2f c0       	rjmp	.+94     	; 0x11fae <f_opendir+0xc2>
					dj->sclust = LD_CLUST(dj->dir);
   11f50:	35 89       	ldd	r19, Z+21	; 0x15
   11f52:	20 e0       	ldi	r18, 0x00	; 0
   11f54:	84 89       	ldd	r24, Z+20	; 0x14
   11f56:	90 e0       	ldi	r25, 0x00	; 0
   11f58:	82 2b       	or	r24, r18
   11f5a:	93 2b       	or	r25, r19
   11f5c:	a0 e0       	ldi	r26, 0x00	; 0
   11f5e:	b0 e0       	ldi	r27, 0x00	; 0
   11f60:	dc 01       	movw	r26, r24
   11f62:	99 27       	eor	r25, r25
   11f64:	88 27       	eor	r24, r24
   11f66:	53 8d       	ldd	r21, Z+27	; 0x1b
   11f68:	40 e0       	ldi	r20, 0x00	; 0
   11f6a:	22 8d       	ldd	r18, Z+26	; 0x1a
   11f6c:	30 e0       	ldi	r19, 0x00	; 0
   11f6e:	24 2b       	or	r18, r20
   11f70:	35 2b       	or	r19, r21
   11f72:	40 e0       	ldi	r20, 0x00	; 0
   11f74:	50 e0       	ldi	r21, 0x00	; 0
   11f76:	82 2b       	or	r24, r18
   11f78:	93 2b       	or	r25, r19
   11f7a:	a4 2b       	or	r26, r20
   11f7c:	b5 2b       	or	r27, r21
   11f7e:	f8 01       	movw	r30, r16
   11f80:	86 83       	std	Z+6, r24	; 0x06
   11f82:	97 83       	std	Z+7, r25	; 0x07
   11f84:	a0 87       	std	Z+8, r26	; 0x08
   11f86:	b1 87       	std	Z+9, r27	; 0x09
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
   11f88:	d8 01       	movw	r26, r16
   11f8a:	ed 91       	ld	r30, X+
   11f8c:	fc 91       	ld	r31, X
   11f8e:	11 97       	sbiw	r26, 0x01	; 1
   11f90:	86 81       	ldd	r24, Z+6	; 0x06
   11f92:	97 81       	ldd	r25, Z+7	; 0x07
   11f94:	13 96       	adiw	r26, 0x03	; 3
   11f96:	9c 93       	st	X, r25
   11f98:	8e 93       	st	-X, r24
   11f9a:	12 97       	sbiw	r26, 0x02	; 2
				res = dir_sdi(dj, 0);			/* Rewind dir */
   11f9c:	c8 01       	movw	r24, r16
   11f9e:	60 e0       	ldi	r22, 0x00	; 0
   11fa0:	70 e0       	ldi	r23, 0x00	; 0
   11fa2:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   11fa6:	9c 01       	movw	r18, r24
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
   11fa8:	24 30       	cpi	r18, 0x04	; 4
   11faa:	31 05       	cpc	r19, r1
   11fac:	11 f4       	brne	.+4      	; 0x11fb2 <f_opendir+0xc6>
   11fae:	25 e0       	ldi	r18, 0x05	; 5
   11fb0:	30 e0       	ldi	r19, 0x00	; 0
	}

	LEAVE_FF(dj->fs, res);
}
   11fb2:	c9 01       	movw	r24, r18
   11fb4:	2e 96       	adiw	r28, 0x0e	; 14
   11fb6:	0f b6       	in	r0, 0x3f	; 63
   11fb8:	f8 94       	cli
   11fba:	de bf       	out	0x3e, r29	; 62
   11fbc:	0f be       	out	0x3f, r0	; 63
   11fbe:	cd bf       	out	0x3d, r28	; 61
   11fc0:	cf 91       	pop	r28
   11fc2:	df 91       	pop	r29
   11fc4:	1f 91       	pop	r17
   11fc6:	0f 91       	pop	r16
   11fc8:	08 95       	ret

00011fca <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
   11fca:	cf 92       	push	r12
   11fcc:	df 92       	push	r13
   11fce:	ef 92       	push	r14
   11fd0:	ff 92       	push	r15
   11fd2:	0f 93       	push	r16
   11fd4:	1f 93       	push	r17
   11fd6:	df 93       	push	r29
   11fd8:	cf 93       	push	r28
   11fda:	cd b7       	in	r28, 0x3d	; 61
   11fdc:	de b7       	in	r29, 0x3e	; 62
   11fde:	2c 97       	sbiw	r28, 0x0c	; 12
   11fe0:	0f b6       	in	r0, 0x3f	; 63
   11fe2:	f8 94       	cli
   11fe4:	de bf       	out	0x3e, r29	; 62
   11fe6:	0f be       	out	0x3f, r0	; 63
   11fe8:	cd bf       	out	0x3d, r28	; 61
   11fea:	8c 01       	movw	r16, r24
   11fec:	6b 01       	movw	r12, r22
	FRESULT res;
	DEF_NAMEBUF;


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
   11fee:	fc 01       	movw	r30, r24
   11ff0:	62 81       	ldd	r22, Z+2	; 0x02
   11ff2:	73 81       	ldd	r23, Z+3	; 0x03
   11ff4:	80 81       	ld	r24, Z
   11ff6:	91 81       	ldd	r25, Z+1	; 0x01
   11ff8:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   11ffc:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
   11ffe:	00 97       	sbiw	r24, 0x00	; 0
   12000:	79 f5       	brne	.+94     	; 0x12060 <f_readdir+0x96>
		if (!fno) {
   12002:	c1 14       	cp	r12, r1
   12004:	d1 04       	cpc	r13, r1
   12006:	31 f4       	brne	.+12     	; 0x12014 <f_readdir+0x4a>
			res = dir_sdi(dj, 0);			/* Rewind the directory object */
   12008:	c8 01       	movw	r24, r16
   1200a:	60 e0       	ldi	r22, 0x00	; 0
   1200c:	70 e0       	ldi	r23, 0x00	; 0
   1200e:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   12012:	25 c0       	rjmp	.+74     	; 0x1205e <f_readdir+0x94>
		} else {
			INIT_BUF(*dj);
   12014:	ce 01       	movw	r24, r28
   12016:	01 96       	adiw	r24, 0x01	; 1
   12018:	f8 01       	movw	r30, r16
   1201a:	95 8b       	std	Z+21, r25	; 0x15
   1201c:	84 8b       	std	Z+20, r24	; 0x14
			res = dir_read(dj);				/* Read an directory item */
   1201e:	c8 01       	movw	r24, r16
   12020:	0e 94 a0 85 	call	0x10b40	; 0x10b40 <_ZL8dir_readP3DIR>
			if (res == FR_NO_FILE) {		/* Reached end of dir */
   12024:	84 30       	cpi	r24, 0x04	; 4
   12026:	91 05       	cpc	r25, r1
   12028:	31 f4       	brne	.+12     	; 0x12036 <f_readdir+0x6c>
				dj->sect = 0;
   1202a:	f8 01       	movw	r30, r16
   1202c:	16 86       	std	Z+14, r1	; 0x0e
   1202e:	17 86       	std	Z+15, r1	; 0x0f
   12030:	10 8a       	std	Z+16, r1	; 0x10
   12032:	11 8a       	std	Z+17, r1	; 0x11
   12034:	02 c0       	rjmp	.+4      	; 0x1203a <f_readdir+0x70>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
   12036:	00 97       	sbiw	r24, 0x00	; 0
   12038:	91 f4       	brne	.+36     	; 0x1205e <f_readdir+0x94>
				get_fileinfo(dj, fno);		/* Get the object information */
   1203a:	c8 01       	movw	r24, r16
   1203c:	b6 01       	movw	r22, r12
   1203e:	0e 94 60 78 	call	0xf0c0	; 0xf0c0 <_ZL12get_fileinfoP3DIRP7FILINFO>
				res = dir_next(dj, 0);		/* Increment index for next */
   12042:	c8 01       	movw	r24, r16
   12044:	60 e0       	ldi	r22, 0x00	; 0
   12046:	70 e0       	ldi	r23, 0x00	; 0
   12048:	0e 94 ae 82 	call	0x1055c	; 0x1055c <_ZL8dir_nextP3DIRi>
				if (res == FR_NO_FILE) {
   1204c:	84 30       	cpi	r24, 0x04	; 4
   1204e:	91 05       	cpc	r25, r1
   12050:	31 f4       	brne	.+12     	; 0x1205e <f_readdir+0x94>
					dj->sect = 0;
   12052:	f8 01       	movw	r30, r16
   12054:	16 86       	std	Z+14, r1	; 0x0e
   12056:	17 86       	std	Z+15, r1	; 0x0f
   12058:	10 8a       	std	Z+16, r1	; 0x10
   1205a:	11 8a       	std	Z+17, r1	; 0x11
   1205c:	01 c0       	rjmp	.+2      	; 0x12060 <f_readdir+0x96>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) {
   1205e:	7c 01       	movw	r14, r24
			FREE_BUF();
		}
	}

	LEAVE_FF(dj->fs, res);
}
   12060:	c7 01       	movw	r24, r14
   12062:	2c 96       	adiw	r28, 0x0c	; 12
   12064:	0f b6       	in	r0, 0x3f	; 63
   12066:	f8 94       	cli
   12068:	de bf       	out	0x3e, r29	; 62
   1206a:	0f be       	out	0x3f, r0	; 63
   1206c:	cd bf       	out	0x3d, r28	; 61
   1206e:	cf 91       	pop	r28
   12070:	df 91       	pop	r29
   12072:	1f 91       	pop	r17
   12074:	0f 91       	pop	r16
   12076:	ff 90       	pop	r15
   12078:	ef 90       	pop	r14
   1207a:	df 90       	pop	r13
   1207c:	cf 90       	pop	r12
   1207e:	08 95       	ret

00012080 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
   12080:	cf 92       	push	r12
   12082:	df 92       	push	r13
   12084:	ef 92       	push	r14
   12086:	ff 92       	push	r15
   12088:	0f 93       	push	r16
   1208a:	1f 93       	push	r17
   1208c:	df 93       	push	r29
   1208e:	cf 93       	push	r28
   12090:	cd b7       	in	r28, 0x3d	; 61
   12092:	de b7       	in	r29, 0x3e	; 62
   12094:	a4 97       	sbiw	r28, 0x24	; 36
   12096:	0f b6       	in	r0, 0x3f	; 63
   12098:	f8 94       	cli
   1209a:	de bf       	out	0x3e, r29	; 62
   1209c:	0f be       	out	0x3f, r0	; 63
   1209e:	cd bf       	out	0x3d, r28	; 61
   120a0:	9c a3       	std	Y+36, r25	; 0x24
   120a2:	8b a3       	std	Y+35, r24	; 0x23
   120a4:	6b 01       	movw	r12, r22
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
   120a6:	4d e0       	ldi	r20, 0x0D	; 13
   120a8:	e4 2e       	mov	r14, r20
   120aa:	f1 2c       	mov	r15, r1
   120ac:	ec 0e       	add	r14, r28
   120ae:	fd 1e       	adc	r15, r29
   120b0:	ce 01       	movw	r24, r28
   120b2:	83 96       	adiw	r24, 0x23	; 35
   120b4:	b7 01       	movw	r22, r14
   120b6:	40 e0       	ldi	r20, 0x00	; 0
   120b8:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   120bc:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
   120be:	00 97       	sbiw	r24, 0x00	; 0
   120c0:	b9 f4       	brne	.+46     	; 0x120f0 <f_stat+0x70>
		INIT_BUF(dj);
   120c2:	ce 01       	movw	r24, r28
   120c4:	01 96       	adiw	r24, 0x01	; 1
   120c6:	9a a3       	std	Y+34, r25	; 0x22
   120c8:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
   120ca:	6b a1       	ldd	r22, Y+35	; 0x23
   120cc:	7c a1       	ldd	r23, Y+36	; 0x24
   120ce:	c7 01       	movw	r24, r14
   120d0:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   120d4:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
   120d6:	00 97       	sbiw	r24, 0x00	; 0
   120d8:	59 f4       	brne	.+22     	; 0x120f0 <f_stat+0x70>
			if (dj.dir)		/* Found an object */
   120da:	8f 8d       	ldd	r24, Y+31	; 0x1f
   120dc:	98 a1       	ldd	r25, Y+32	; 0x20
   120de:	00 97       	sbiw	r24, 0x00	; 0
   120e0:	29 f0       	breq	.+10     	; 0x120ec <f_stat+0x6c>
				get_fileinfo(&dj, fno);
   120e2:	c7 01       	movw	r24, r14
   120e4:	b6 01       	movw	r22, r12
   120e6:	0e 94 60 78 	call	0xf0c0	; 0xf0c0 <_ZL12get_fileinfoP3DIRP7FILINFO>
   120ea:	02 c0       	rjmp	.+4      	; 0x120f0 <f_stat+0x70>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
   120ec:	06 e0       	ldi	r16, 0x06	; 6
   120ee:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
   120f0:	c8 01       	movw	r24, r16
   120f2:	a4 96       	adiw	r28, 0x24	; 36
   120f4:	0f b6       	in	r0, 0x3f	; 63
   120f6:	f8 94       	cli
   120f8:	de bf       	out	0x3e, r29	; 62
   120fa:	0f be       	out	0x3f, r0	; 63
   120fc:	cd bf       	out	0x3d, r28	; 61
   120fe:	cf 91       	pop	r28
   12100:	df 91       	pop	r29
   12102:	1f 91       	pop	r17
   12104:	0f 91       	pop	r16
   12106:	ff 90       	pop	r15
   12108:	ef 90       	pop	r14
   1210a:	df 90       	pop	r13
   1210c:	cf 90       	pop	r12
   1210e:	08 95       	ret

00012110 <f_getfree>:
FRESULT f_getfree (
	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
   12110:	2f 92       	push	r2
   12112:	3f 92       	push	r3
   12114:	4f 92       	push	r4
   12116:	5f 92       	push	r5
   12118:	6f 92       	push	r6
   1211a:	7f 92       	push	r7
   1211c:	8f 92       	push	r8
   1211e:	9f 92       	push	r9
   12120:	af 92       	push	r10
   12122:	bf 92       	push	r11
   12124:	cf 92       	push	r12
   12126:	df 92       	push	r13
   12128:	ef 92       	push	r14
   1212a:	ff 92       	push	r15
   1212c:	0f 93       	push	r16
   1212e:	1f 93       	push	r17
   12130:	df 93       	push	r29
   12132:	cf 93       	push	r28
   12134:	cd b7       	in	r28, 0x3d	; 61
   12136:	de b7       	in	r29, 0x3e	; 62
   12138:	2d 97       	sbiw	r28, 0x0d	; 13
   1213a:	0f b6       	in	r0, 0x3f	; 63
   1213c:	f8 94       	cli
   1213e:	de bf       	out	0x3e, r29	; 62
   12140:	0f be       	out	0x3f, r0	; 63
   12142:	cd bf       	out	0x3d, r28	; 61
   12144:	9a 83       	std	Y+2, r25	; 0x02
   12146:	89 83       	std	Y+1, r24	; 0x01
   12148:	79 87       	std	Y+9, r23	; 0x09
   1214a:	68 87       	std	Y+8, r22	; 0x08
   1214c:	4a 01       	movw	r8, r20
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = chk_mounted(&path, fatfs, 0);
   1214e:	ce 01       	movw	r24, r28
   12150:	01 96       	adiw	r24, 0x01	; 1
   12152:	ba 01       	movw	r22, r20
   12154:	40 e0       	ldi	r20, 0x00	; 0
   12156:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   1215a:	3c 01       	movw	r6, r24
	if (res == FR_OK) {
   1215c:	00 97       	sbiw	r24, 0x00	; 0
   1215e:	09 f0       	breq	.+2      	; 0x12162 <f_getfree+0x52>
   12160:	fd c0       	rjmp	.+506    	; 0x1235c <f_getfree+0x24c>
		/* If free_clust is valid, return it without full cluster scan */
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
   12162:	d4 01       	movw	r26, r8
   12164:	ed 91       	ld	r30, X+
   12166:	fc 91       	ld	r31, X
   12168:	86 85       	ldd	r24, Z+14	; 0x0e
   1216a:	97 85       	ldd	r25, Z+15	; 0x0f
   1216c:	a0 89       	ldd	r26, Z+16	; 0x10
   1216e:	b1 89       	ldd	r27, Z+17	; 0x11
   12170:	22 8c       	ldd	r2, Z+26	; 0x1a
   12172:	33 8c       	ldd	r3, Z+27	; 0x1b
   12174:	44 8c       	ldd	r4, Z+28	; 0x1c
   12176:	55 8c       	ldd	r5, Z+29	; 0x1d
   12178:	a2 01       	movw	r20, r4
   1217a:	91 01       	movw	r18, r2
   1217c:	22 50       	subi	r18, 0x02	; 2
   1217e:	30 40       	sbci	r19, 0x00	; 0
   12180:	40 40       	sbci	r20, 0x00	; 0
   12182:	50 40       	sbci	r21, 0x00	; 0
   12184:	28 17       	cp	r18, r24
   12186:	39 07       	cpc	r19, r25
   12188:	4a 07       	cpc	r20, r26
   1218a:	5b 07       	cpc	r21, r27
   1218c:	38 f0       	brcs	.+14     	; 0x1219c <f_getfree+0x8c>
			*nclst = (*fatfs)->free_clust;
   1218e:	e8 85       	ldd	r30, Y+8	; 0x08
   12190:	f9 85       	ldd	r31, Y+9	; 0x09
   12192:	80 83       	st	Z, r24
   12194:	91 83       	std	Z+1, r25	; 0x01
   12196:	a2 83       	std	Z+2, r26	; 0x02
   12198:	b3 83       	std	Z+3, r27	; 0x03
   1219a:	e0 c0       	rjmp	.+448    	; 0x1235c <f_getfree+0x24c>
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
   1219c:	00 81       	ld	r16, Z
   1219e:	0f 83       	std	Y+7, r16	; 0x07
			n = 0;
			if (fat == FS_FAT12) {
   121a0:	01 30       	cpi	r16, 0x01	; 1
   121a2:	d1 f5       	brne	.+116    	; 0x12218 <f_getfree+0x108>
   121a4:	32 e0       	ldi	r19, 0x02	; 2
   121a6:	e3 2e       	mov	r14, r19
   121a8:	f1 2c       	mov	r15, r1
   121aa:	01 2d       	mov	r16, r1
   121ac:	11 2d       	mov	r17, r1
   121ae:	aa 24       	eor	r10, r10
   121b0:	bb 24       	eor	r11, r11
   121b2:	65 01       	movw	r12, r10
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
   121b4:	d4 01       	movw	r26, r8
   121b6:	8d 91       	ld	r24, X+
   121b8:	9c 91       	ld	r25, X
   121ba:	b8 01       	movw	r22, r16
   121bc:	a7 01       	movw	r20, r14
   121be:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   121c2:	6f 3f       	cpi	r22, 0xFF	; 255
   121c4:	bf ef       	ldi	r27, 0xFF	; 255
   121c6:	7b 07       	cpc	r23, r27
   121c8:	bf ef       	ldi	r27, 0xFF	; 255
   121ca:	8b 07       	cpc	r24, r27
   121cc:	bf ef       	ldi	r27, 0xFF	; 255
   121ce:	9b 07       	cpc	r25, r27
   121d0:	09 f4       	brne	.+2      	; 0x121d4 <f_getfree+0xc4>
   121d2:	a9 c0       	rjmp	.+338    	; 0x12326 <f_getfree+0x216>
					if (stat == 1) { res = FR_INT_ERR; break; }
   121d4:	61 30       	cpi	r22, 0x01	; 1
   121d6:	71 05       	cpc	r23, r1
   121d8:	81 05       	cpc	r24, r1
   121da:	91 05       	cpc	r25, r1
   121dc:	09 f4       	brne	.+2      	; 0x121e0 <f_getfree+0xd0>
   121de:	a7 c0       	rjmp	.+334    	; 0x1232e <f_getfree+0x21e>
					if (stat == 0) n++;
   121e0:	61 15       	cp	r22, r1
   121e2:	71 05       	cpc	r23, r1
   121e4:	81 05       	cpc	r24, r1
   121e6:	91 05       	cpc	r25, r1
   121e8:	29 f4       	brne	.+10     	; 0x121f4 <f_getfree+0xe4>
   121ea:	08 94       	sec
   121ec:	a1 1c       	adc	r10, r1
   121ee:	b1 1c       	adc	r11, r1
   121f0:	c1 1c       	adc	r12, r1
   121f2:	d1 1c       	adc	r13, r1
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
   121f4:	08 94       	sec
   121f6:	e1 1c       	adc	r14, r1
   121f8:	f1 1c       	adc	r15, r1
   121fa:	01 1d       	adc	r16, r1
   121fc:	11 1d       	adc	r17, r1
   121fe:	d4 01       	movw	r26, r8
   12200:	ed 91       	ld	r30, X+
   12202:	fc 91       	ld	r31, X
   12204:	82 8d       	ldd	r24, Z+26	; 0x1a
   12206:	93 8d       	ldd	r25, Z+27	; 0x1b
   12208:	a4 8d       	ldd	r26, Z+28	; 0x1c
   1220a:	b5 8d       	ldd	r27, Z+29	; 0x1d
   1220c:	e8 16       	cp	r14, r24
   1220e:	f9 06       	cpc	r15, r25
   12210:	0a 07       	cpc	r16, r26
   12212:	1b 07       	cpc	r17, r27
   12214:	78 f2       	brcs	.-98     	; 0x121b4 <f_getfree+0xa4>
   12216:	90 c0       	rjmp	.+288    	; 0x12338 <f_getfree+0x228>
					if (stat == 1) { res = FR_INT_ERR; break; }
					if (stat == 0) n++;
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
   12218:	82 a1       	ldd	r24, Z+34	; 0x22
   1221a:	93 a1       	ldd	r25, Z+35	; 0x23
   1221c:	a4 a1       	ldd	r26, Z+36	; 0x24
   1221e:	b5 a1       	ldd	r27, Z+37	; 0x25
   12220:	8b 83       	std	Y+3, r24	; 0x03
   12222:	9c 83       	std	Y+4, r25	; 0x04
   12224:	ad 83       	std	Y+5, r26	; 0x05
   12226:	be 83       	std	Y+6, r27	; 0x06
				i = 0; p = 0;
   12228:	e0 e0       	ldi	r30, 0x00	; 0
   1222a:	f0 e0       	ldi	r31, 0x00	; 0
   1222c:	60 e0       	ldi	r22, 0x00	; 0
   1222e:	70 e0       	ldi	r23, 0x00	; 0
		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
			*nclst = (*fatfs)->free_clust;
		} else {
			/* Get number of free clusters */
			fat = (*fatfs)->fs_type;
			n = 0;
   12230:	aa 24       	eor	r10, r10
   12232:	bb 24       	eor	r11, r11
   12234:	65 01       	movw	r12, r10
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
   12236:	61 15       	cp	r22, r1
   12238:	71 05       	cpc	r23, r1
   1223a:	e9 f4       	brne	.+58     	; 0x12276 <f_getfree+0x166>
						res = move_window(*fatfs, sect++);
   1223c:	d4 01       	movw	r26, r8
   1223e:	8d 91       	ld	r24, X+
   12240:	9c 91       	ld	r25, X
   12242:	4b 81       	ldd	r20, Y+3	; 0x03
   12244:	5c 81       	ldd	r21, Y+4	; 0x04
   12246:	6d 81       	ldd	r22, Y+5	; 0x05
   12248:	7e 81       	ldd	r23, Y+6	; 0x06
   1224a:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
						if (res != FR_OK) break;
   1224e:	00 97       	sbiw	r24, 0x00	; 0
   12250:	09 f0       	breq	.+2      	; 0x12254 <f_getfree+0x144>
   12252:	71 c0       	rjmp	.+226    	; 0x12336 <f_getfree+0x226>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
   12254:	8b 81       	ldd	r24, Y+3	; 0x03
   12256:	9c 81       	ldd	r25, Y+4	; 0x04
   12258:	ad 81       	ldd	r26, Y+5	; 0x05
   1225a:	be 81       	ldd	r27, Y+6	; 0x06
   1225c:	01 96       	adiw	r24, 0x01	; 1
   1225e:	a1 1d       	adc	r26, r1
   12260:	b1 1d       	adc	r27, r1
   12262:	8b 83       	std	Y+3, r24	; 0x03
   12264:	9c 83       	std	Y+4, r25	; 0x04
   12266:	ad 83       	std	Y+5, r26	; 0x05
   12268:	be 83       	std	Y+6, r27	; 0x06
						if (res != FR_OK) break;
						p = (*fatfs)->win;
   1226a:	d4 01       	movw	r26, r8
   1226c:	ed 91       	ld	r30, X+
   1226e:	fc 91       	ld	r31, X
   12270:	f2 96       	adiw	r30, 0x32	; 50
						i = SS(*fatfs);
   12272:	60 e0       	ldi	r22, 0x00	; 0
   12274:	72 e0       	ldi	r23, 0x02	; 2
   12276:	e1 80       	ldd	r14, Z+1	; 0x01
   12278:	10 81       	ld	r17, Z
					}
					if (fat == FS_FAT16) {
   1227a:	bf 81       	ldd	r27, Y+7	; 0x07
   1227c:	b2 30       	cpi	r27, 0x02	; 2
   1227e:	a1 f4       	brne	.+40     	; 0x122a8 <f_getfree+0x198>
						if (LD_WORD(p) == 0) n++;
   12280:	eb 86       	std	Y+11, r14	; 0x0b
   12282:	1a 86       	std	Y+10, r1	; 0x0a
   12284:	21 2f       	mov	r18, r17
   12286:	30 e0       	ldi	r19, 0x00	; 0
   12288:	0a 85       	ldd	r16, Y+10	; 0x0a
   1228a:	1b 85       	ldd	r17, Y+11	; 0x0b
   1228c:	20 2b       	or	r18, r16
   1228e:	31 2b       	or	r19, r17
   12290:	21 15       	cp	r18, r1
   12292:	31 05       	cpc	r19, r1
   12294:	29 f4       	brne	.+10     	; 0x122a0 <f_getfree+0x190>
   12296:	08 94       	sec
   12298:	a1 1c       	adc	r10, r1
   1229a:	b1 1c       	adc	r11, r1
   1229c:	c1 1c       	adc	r12, r1
   1229e:	d1 1c       	adc	r13, r1
						p += 2; i -= 2;
   122a0:	32 96       	adiw	r30, 0x02	; 2
   122a2:	62 50       	subi	r22, 0x02	; 2
   122a4:	70 40       	sbci	r23, 0x00	; 0
   122a6:	33 c0       	rjmp	.+102    	; 0x1230e <f_getfree+0x1fe>
					} else {
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
   122a8:	83 81       	ldd	r24, Z+3	; 0x03
   122aa:	90 e0       	ldi	r25, 0x00	; 0
   122ac:	a0 e0       	ldi	r26, 0x00	; 0
   122ae:	b0 e0       	ldi	r27, 0x00	; 0
   122b0:	b8 2f       	mov	r27, r24
   122b2:	aa 27       	eor	r26, r26
   122b4:	99 27       	eor	r25, r25
   122b6:	88 27       	eor	r24, r24
   122b8:	22 81       	ldd	r18, Z+2	; 0x02
   122ba:	30 e0       	ldi	r19, 0x00	; 0
   122bc:	40 e0       	ldi	r20, 0x00	; 0
   122be:	50 e0       	ldi	r21, 0x00	; 0
   122c0:	a9 01       	movw	r20, r18
   122c2:	33 27       	eor	r19, r19
   122c4:	22 27       	eor	r18, r18
   122c6:	82 2b       	or	r24, r18
   122c8:	93 2b       	or	r25, r19
   122ca:	a4 2b       	or	r26, r20
   122cc:	b5 2b       	or	r27, r21
   122ce:	21 2f       	mov	r18, r17
   122d0:	30 e0       	ldi	r19, 0x00	; 0
   122d2:	40 e0       	ldi	r20, 0x00	; 0
   122d4:	50 e0       	ldi	r21, 0x00	; 0
   122d6:	82 2b       	or	r24, r18
   122d8:	93 2b       	or	r25, r19
   122da:	a4 2b       	or	r26, r20
   122dc:	b5 2b       	or	r27, r21
   122de:	ed 86       	std	Y+13, r14	; 0x0d
   122e0:	1c 86       	std	Y+12, r1	; 0x0c
   122e2:	0c 85       	ldd	r16, Y+12	; 0x0c
   122e4:	1d 85       	ldd	r17, Y+13	; 0x0d
   122e6:	98 01       	movw	r18, r16
   122e8:	40 e0       	ldi	r20, 0x00	; 0
   122ea:	50 e0       	ldi	r21, 0x00	; 0
   122ec:	82 2b       	or	r24, r18
   122ee:	93 2b       	or	r25, r19
   122f0:	a4 2b       	or	r26, r20
   122f2:	b5 2b       	or	r27, r21
   122f4:	bf 70       	andi	r27, 0x0F	; 15
   122f6:	00 97       	sbiw	r24, 0x00	; 0
   122f8:	a1 05       	cpc	r26, r1
   122fa:	b1 05       	cpc	r27, r1
   122fc:	29 f4       	brne	.+10     	; 0x12308 <f_getfree+0x1f8>
   122fe:	08 94       	sec
   12300:	a1 1c       	adc	r10, r1
   12302:	b1 1c       	adc	r11, r1
   12304:	c1 1c       	adc	r12, r1
   12306:	d1 1c       	adc	r13, r1
						p += 4; i -= 4;
   12308:	34 96       	adiw	r30, 0x04	; 4
   1230a:	64 50       	subi	r22, 0x04	; 4
   1230c:	70 40       	sbci	r23, 0x00	; 0
				} while (++clst < (*fatfs)->n_fatent);
			} else {
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
   1230e:	08 94       	sec
   12310:	21 08       	sbc	r2, r1
   12312:	31 08       	sbc	r3, r1
   12314:	41 08       	sbc	r4, r1
   12316:	51 08       	sbc	r5, r1
   12318:	21 14       	cp	r2, r1
   1231a:	31 04       	cpc	r3, r1
   1231c:	41 04       	cpc	r4, r1
   1231e:	51 04       	cpc	r5, r1
   12320:	09 f0       	breq	.+2      	; 0x12324 <f_getfree+0x214>
   12322:	89 cf       	rjmp	.-238    	; 0x12236 <f_getfree+0x126>
   12324:	09 c0       	rjmp	.+18     	; 0x12338 <f_getfree+0x228>
			n = 0;
			if (fat == FS_FAT12) {
				clst = 2;
				do {
					stat = get_fat(*fatfs, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
   12326:	61 e0       	ldi	r22, 0x01	; 1
   12328:	66 2e       	mov	r6, r22
   1232a:	71 2c       	mov	r7, r1
   1232c:	05 c0       	rjmp	.+10     	; 0x12338 <f_getfree+0x228>
					if (stat == 1) { res = FR_INT_ERR; break; }
   1232e:	52 e0       	ldi	r21, 0x02	; 2
   12330:	65 2e       	mov	r6, r21
   12332:	71 2c       	mov	r7, r1
   12334:	01 c0       	rjmp	.+2      	; 0x12338 <f_getfree+0x228>
				clst = (*fatfs)->n_fatent;
				sect = (*fatfs)->fatbase;
				i = 0; p = 0;
				do {
					if (!i) {
						res = move_window(*fatfs, sect++);
   12336:	3c 01       	movw	r6, r24
						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
						p += 4; i -= 4;
					}
				} while (--clst);
			}
			(*fatfs)->free_clust = n;
   12338:	d4 01       	movw	r26, r8
   1233a:	ed 91       	ld	r30, X+
   1233c:	fc 91       	ld	r31, X
   1233e:	a6 86       	std	Z+14, r10	; 0x0e
   12340:	b7 86       	std	Z+15, r11	; 0x0f
   12342:	c0 8a       	std	Z+16, r12	; 0x10
   12344:	d1 8a       	std	Z+17, r13	; 0x11
			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
   12346:	bf 81       	ldd	r27, Y+7	; 0x07
   12348:	b3 30       	cpi	r27, 0x03	; 3
   1234a:	11 f4       	brne	.+4      	; 0x12350 <f_getfree+0x240>
   1234c:	81 e0       	ldi	r24, 0x01	; 1
   1234e:	85 83       	std	Z+5, r24	; 0x05
			*nclst = n;
   12350:	e8 85       	ldd	r30, Y+8	; 0x08
   12352:	f9 85       	ldd	r31, Y+9	; 0x09
   12354:	a0 82       	st	Z, r10
   12356:	b1 82       	std	Z+1, r11	; 0x01
   12358:	c2 82       	std	Z+2, r12	; 0x02
   1235a:	d3 82       	std	Z+3, r13	; 0x03
		}
	}
	LEAVE_FF(*fatfs, res);
}
   1235c:	c3 01       	movw	r24, r6
   1235e:	2d 96       	adiw	r28, 0x0d	; 13
   12360:	0f b6       	in	r0, 0x3f	; 63
   12362:	f8 94       	cli
   12364:	de bf       	out	0x3e, r29	; 62
   12366:	0f be       	out	0x3f, r0	; 63
   12368:	cd bf       	out	0x3d, r28	; 61
   1236a:	cf 91       	pop	r28
   1236c:	df 91       	pop	r29
   1236e:	1f 91       	pop	r17
   12370:	0f 91       	pop	r16
   12372:	ff 90       	pop	r15
   12374:	ef 90       	pop	r14
   12376:	df 90       	pop	r13
   12378:	cf 90       	pop	r12
   1237a:	bf 90       	pop	r11
   1237c:	af 90       	pop	r10
   1237e:	9f 90       	pop	r9
   12380:	8f 90       	pop	r8
   12382:	7f 90       	pop	r7
   12384:	6f 90       	pop	r6
   12386:	5f 90       	pop	r5
   12388:	4f 90       	pop	r4
   1238a:	3f 90       	pop	r3
   1238c:	2f 90       	pop	r2
   1238e:	08 95       	ret

00012390 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
   12390:	cf 92       	push	r12
   12392:	df 92       	push	r13
   12394:	ef 92       	push	r14
   12396:	ff 92       	push	r15
   12398:	0f 93       	push	r16
   1239a:	1f 93       	push	r17
   1239c:	cf 93       	push	r28
   1239e:	df 93       	push	r29
   123a0:	ec 01       	movw	r28, r24
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   123a2:	6a 81       	ldd	r22, Y+2	; 0x02
   123a4:	7b 81       	ldd	r23, Y+3	; 0x03
   123a6:	88 81       	ld	r24, Y
   123a8:	99 81       	ldd	r25, Y+1	; 0x01
   123aa:	0e 94 e1 78 	call	0xf1c2	; 0xf1c2 <_ZL8validateP5FATFSt>
   123ae:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
   123b0:	00 97       	sbiw	r24, 0x00	; 0
   123b2:	09 f0       	breq	.+2      	; 0x123b6 <f_truncate+0x26>
   123b4:	56 c0       	rjmp	.+172    	; 0x12462 <f_truncate+0xd2>
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
   123b6:	6c 81       	ldd	r22, Y+4	; 0x04
   123b8:	67 fd       	sbrc	r22, 7
   123ba:	05 c0       	rjmp	.+10     	; 0x123c6 <f_truncate+0x36>
			res = FR_INT_ERR;
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
   123bc:	61 fd       	sbrc	r22, 1
   123be:	5b c0       	rjmp	.+182    	; 0x12476 <f_truncate+0xe6>
				res = FR_DENIED;
   123c0:	07 e0       	ldi	r16, 0x07	; 7
   123c2:	10 e0       	ldi	r17, 0x00	; 0
   123c4:	4e c0       	rjmp	.+156    	; 0x12462 <f_truncate+0xd2>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA__ERROR) {			/* Check abort flag */
			res = FR_INT_ERR;
   123c6:	02 e0       	ldi	r16, 0x02	; 2
   123c8:	10 e0       	ldi	r17, 0x00	; 0
   123ca:	4b c0       	rjmp	.+150    	; 0x12462 <f_truncate+0xd2>
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
   123cc:	2a 87       	std	Y+10, r18	; 0x0a
   123ce:	3b 87       	std	Y+11, r19	; 0x0b
   123d0:	4c 87       	std	Y+12, r20	; 0x0c
   123d2:	5d 87       	std	Y+13, r21	; 0x0d
			fp->flag |= FA__WRITTEN;
   123d4:	60 62       	ori	r22, 0x20	; 32
   123d6:	6c 83       	std	Y+4, r22	; 0x04
   123d8:	88 81       	ld	r24, Y
   123da:	99 81       	ldd	r25, Y+1	; 0x01
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
   123dc:	21 15       	cp	r18, r1
   123de:	31 05       	cpc	r19, r1
   123e0:	41 05       	cpc	r20, r1
   123e2:	51 05       	cpc	r21, r1
   123e4:	61 f4       	brne	.+24     	; 0x123fe <f_truncate+0x6e>
				res = remove_chain(fp->fs, fp->org_clust);
   123e6:	4e 85       	ldd	r20, Y+14	; 0x0e
   123e8:	5f 85       	ldd	r21, Y+15	; 0x0f
   123ea:	68 89       	ldd	r22, Y+16	; 0x10
   123ec:	79 89       	ldd	r23, Y+17	; 0x11
   123ee:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <_ZL12remove_chainP5FATFSm>
   123f2:	8c 01       	movw	r16, r24
				fp->org_clust = 0;
   123f4:	1e 86       	std	Y+14, r1	; 0x0e
   123f6:	1f 86       	std	Y+15, r1	; 0x0f
   123f8:	18 8a       	std	Y+16, r1	; 0x10
   123fa:	19 8a       	std	Y+17, r1	; 0x11
   123fc:	2c c0       	rjmp	.+88     	; 0x12456 <f_truncate+0xc6>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
   123fe:	4a 89       	ldd	r20, Y+18	; 0x12
   12400:	5b 89       	ldd	r21, Y+19	; 0x13
   12402:	6c 89       	ldd	r22, Y+20	; 0x14
   12404:	7d 89       	ldd	r23, Y+21	; 0x15
   12406:	0e 94 ee 7e 	call	0xfddc	; 0xfddc <_Z7get_fatP5FATFSm>
   1240a:	6b 01       	movw	r12, r22
   1240c:	7c 01       	movw	r14, r24
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   1240e:	8f ef       	ldi	r24, 0xFF	; 255
   12410:	c8 16       	cp	r12, r24
   12412:	8f ef       	ldi	r24, 0xFF	; 255
   12414:	d8 06       	cpc	r13, r24
   12416:	8f ef       	ldi	r24, 0xFF	; 255
   12418:	e8 06       	cpc	r14, r24
   1241a:	8f ef       	ldi	r24, 0xFF	; 255
   1241c:	f8 06       	cpc	r15, r24
   1241e:	d1 f1       	breq	.+116    	; 0x12494 <f_truncate+0x104>
				if (ncl == 1) res = FR_INT_ERR;
   12420:	e1 e0       	ldi	r30, 0x01	; 1
   12422:	ce 16       	cp	r12, r30
   12424:	d1 04       	cpc	r13, r1
   12426:	e1 04       	cpc	r14, r1
   12428:	f1 04       	cpc	r15, r1
   1242a:	d1 f5       	brne	.+116    	; 0x124a0 <f_truncate+0x110>
   1242c:	36 c0       	rjmp	.+108    	; 0x1249a <f_truncate+0x10a>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
   1242e:	4a 89       	ldd	r20, Y+18	; 0x12
   12430:	5b 89       	ldd	r21, Y+19	; 0x13
   12432:	6c 89       	ldd	r22, Y+20	; 0x14
   12434:	7d 89       	ldd	r23, Y+21	; 0x15
   12436:	0f ef       	ldi	r16, 0xFF	; 255
   12438:	1f ef       	ldi	r17, 0xFF	; 255
   1243a:	2f ef       	ldi	r18, 0xFF	; 255
   1243c:	3f e0       	ldi	r19, 0x0F	; 15
   1243e:	0e 94 b9 80 	call	0x10172	; 0x10172 <_Z7put_fatP5FATFSmm>
   12442:	8c 01       	movw	r16, r24
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
   12444:	00 97       	sbiw	r24, 0x00	; 0
   12446:	51 f4       	brne	.+20     	; 0x1245c <f_truncate+0xcc>
   12448:	88 81       	ld	r24, Y
   1244a:	99 81       	ldd	r25, Y+1	; 0x01
   1244c:	b7 01       	movw	r22, r14
   1244e:	a6 01       	movw	r20, r12
   12450:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <_ZL12remove_chainP5FATFSm>
   12454:	8c 01       	movw	r16, r24
				}
			}
		}
		if (res != FR_OK) fp->flag |= FA__ERROR;
   12456:	01 15       	cp	r16, r1
   12458:	11 05       	cpc	r17, r1
   1245a:	19 f0       	breq	.+6      	; 0x12462 <f_truncate+0xd2>
   1245c:	8c 81       	ldd	r24, Y+4	; 0x04
   1245e:	80 68       	ori	r24, 0x80	; 128
   12460:	8c 83       	std	Y+4, r24	; 0x04
	}

	LEAVE_FF(fp->fs, res);
}
   12462:	c8 01       	movw	r24, r16
   12464:	df 91       	pop	r29
   12466:	cf 91       	pop	r28
   12468:	1f 91       	pop	r17
   1246a:	0f 91       	pop	r16
   1246c:	ff 90       	pop	r15
   1246e:	ef 90       	pop	r14
   12470:	df 90       	pop	r13
   12472:	cf 90       	pop	r12
   12474:	08 95       	ret
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
				res = FR_DENIED;
		}
	}
	if (res == FR_OK) {
		if (fp->fsize > fp->fptr) {
   12476:	2e 81       	ldd	r18, Y+6	; 0x06
   12478:	3f 81       	ldd	r19, Y+7	; 0x07
   1247a:	48 85       	ldd	r20, Y+8	; 0x08
   1247c:	59 85       	ldd	r21, Y+9	; 0x09
   1247e:	8a 85       	ldd	r24, Y+10	; 0x0a
   12480:	9b 85       	ldd	r25, Y+11	; 0x0b
   12482:	ac 85       	ldd	r26, Y+12	; 0x0c
   12484:	bd 85       	ldd	r27, Y+13	; 0x0d
   12486:	28 17       	cp	r18, r24
   12488:	39 07       	cpc	r19, r25
   1248a:	4a 07       	cpc	r20, r26
   1248c:	5b 07       	cpc	r21, r27
   1248e:	08 f4       	brcc	.+2      	; 0x12492 <f_truncate+0x102>
   12490:	9d cf       	rjmp	.-198    	; 0x123cc <f_truncate+0x3c>
   12492:	e7 cf       	rjmp	.-50     	; 0x12462 <f_truncate+0xd2>
				res = remove_chain(fp->fs, fp->org_clust);
				fp->org_clust = 0;
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->curr_clust);
				res = FR_OK;
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
   12494:	01 e0       	ldi	r16, 0x01	; 1
   12496:	10 e0       	ldi	r17, 0x00	; 0
   12498:	e1 cf       	rjmp	.-62     	; 0x1245c <f_truncate+0xcc>
				if (ncl == 1) res = FR_INT_ERR;
   1249a:	02 e0       	ldi	r16, 0x02	; 2
   1249c:	10 e0       	ldi	r17, 0x00	; 0
   1249e:	de cf       	rjmp	.-68     	; 0x1245c <f_truncate+0xcc>
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
   124a0:	88 81       	ld	r24, Y
   124a2:	99 81       	ldd	r25, Y+1	; 0x01
   124a4:	fc 01       	movw	r30, r24
   124a6:	22 8d       	ldd	r18, Z+26	; 0x1a
   124a8:	33 8d       	ldd	r19, Z+27	; 0x1b
   124aa:	44 8d       	ldd	r20, Z+28	; 0x1c
   124ac:	55 8d       	ldd	r21, Z+29	; 0x1d
   124ae:	c2 16       	cp	r12, r18
   124b0:	d3 06       	cpc	r13, r19
   124b2:	e4 06       	cpc	r14, r20
   124b4:	f5 06       	cpc	r15, r21
   124b6:	a8 f6       	brcc	.-86     	; 0x12462 <f_truncate+0xd2>
   124b8:	ba cf       	rjmp	.-140    	; 0x1242e <f_truncate+0x9e>

000124ba <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   124ba:	cf 92       	push	r12
   124bc:	df 92       	push	r13
   124be:	ef 92       	push	r14
   124c0:	ff 92       	push	r15
   124c2:	0f 93       	push	r16
   124c4:	1f 93       	push	r17
   124c6:	df 93       	push	r29
   124c8:	cf 93       	push	r28
   124ca:	cd b7       	in	r28, 0x3d	; 61
   124cc:	de b7       	in	r29, 0x3e	; 62
   124ce:	ea 97       	sbiw	r28, 0x3a	; 58
   124d0:	0f b6       	in	r0, 0x3f	; 63
   124d2:	f8 94       	cli
   124d4:	de bf       	out	0x3e, r29	; 62
   124d6:	0f be       	out	0x3f, r0	; 63
   124d8:	cd bf       	out	0x3d, r28	; 61
   124da:	9a af       	std	Y+58, r25	; 0x3a
   124dc:	89 af       	std	Y+57, r24	; 0x39
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   124de:	8e 01       	movw	r16, r28
   124e0:	03 5f       	subi	r16, 0xF3	; 243
   124e2:	1f 4f       	sbci	r17, 0xFF	; 255
   124e4:	ce 01       	movw	r24, r28
   124e6:	c9 96       	adiw	r24, 0x39	; 57
   124e8:	b8 01       	movw	r22, r16
   124ea:	41 e0       	ldi	r20, 0x01	; 1
   124ec:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   124f0:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   124f2:	00 97       	sbiw	r24, 0x00	; 0
   124f4:	09 f0       	breq	.+2      	; 0x124f8 <f_unlink+0x3e>
   124f6:	8a c0       	rjmp	.+276    	; 0x1260c <f_unlink+0x152>
		INIT_BUF(dj);
   124f8:	ce 01       	movw	r24, r28
   124fa:	01 96       	adiw	r24, 0x01	; 1
   124fc:	9a a3       	std	Y+34, r25	; 0x22
   124fe:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
   12500:	69 ad       	ldd	r22, Y+57	; 0x39
   12502:	7a ad       	ldd	r23, Y+58	; 0x3a
   12504:	c8 01       	movw	r24, r16
   12506:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   1250a:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   1250c:	00 97       	sbiw	r24, 0x00	; 0
   1250e:	09 f0       	breq	.+2      	; 0x12512 <f_unlink+0x58>
   12510:	7d c0       	rjmp	.+250    	; 0x1260c <f_unlink+0x152>
   12512:	e9 a1       	ldd	r30, Y+33	; 0x21
   12514:	fa a1       	ldd	r31, Y+34	; 0x22
   12516:	83 85       	ldd	r24, Z+11	; 0x0b
   12518:	85 ff       	sbrs	r24, 5
   1251a:	88 c0       	rjmp	.+272    	; 0x1262c <f_unlink+0x172>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
   1251c:	26 e0       	ldi	r18, 0x06	; 6
   1251e:	30 e0       	ldi	r19, 0x00	; 0
   12520:	75 c0       	rjmp	.+234    	; 0x1260c <f_unlink+0x152>
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
   12522:	83 85       	ldd	r24, Z+11	; 0x0b
   12524:	80 ff       	sbrs	r24, 0
   12526:	05 c0       	rjmp	.+10     	; 0x12532 <f_unlink+0x78>
					res = FR_DENIED;		/* Cannot remove R/O object */
   12528:	27 e0       	ldi	r18, 0x07	; 7
   1252a:	30 e0       	ldi	r19, 0x00	; 0
   1252c:	02 c0       	rjmp	.+4      	; 0x12532 <f_unlink+0x78>
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   1252e:	26 e0       	ldi	r18, 0x06	; 6
   12530:	30 e0       	ldi	r19, 0x00	; 0
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
   12532:	45 89       	ldd	r20, Z+21	; 0x15
   12534:	e4 88       	ldd	r14, Z+20	; 0x14
   12536:	93 8d       	ldd	r25, Z+27	; 0x1b
   12538:	82 8d       	ldd	r24, Z+26	; 0x1a
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   1253a:	21 15       	cp	r18, r1
   1253c:	31 05       	cpc	r19, r1
   1253e:	09 f0       	breq	.+2      	; 0x12542 <f_unlink+0x88>
   12540:	65 c0       	rjmp	.+202    	; 0x1260c <f_unlink+0x152>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
			} else {
				if (dir[DIR_Attr] & AM_RDO)
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
   12542:	34 2f       	mov	r19, r20
   12544:	20 e0       	ldi	r18, 0x00	; 0
   12546:	ff 24       	eor	r15, r15
   12548:	e2 2a       	or	r14, r18
   1254a:	f3 2a       	or	r15, r19
   1254c:	00 e0       	ldi	r16, 0x00	; 0
   1254e:	10 e0       	ldi	r17, 0x00	; 0
   12550:	87 01       	movw	r16, r14
   12552:	ff 24       	eor	r15, r15
   12554:	ee 24       	eor	r14, r14
   12556:	39 2f       	mov	r19, r25
   12558:	20 e0       	ldi	r18, 0x00	; 0
   1255a:	90 e0       	ldi	r25, 0x00	; 0
   1255c:	82 2b       	or	r24, r18
   1255e:	93 2b       	or	r25, r19
   12560:	a0 e0       	ldi	r26, 0x00	; 0
   12562:	b0 e0       	ldi	r27, 0x00	; 0
   12564:	e8 2a       	or	r14, r24
   12566:	f9 2a       	or	r15, r25
   12568:	0a 2b       	or	r16, r26
   1256a:	1b 2b       	or	r17, r27
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   1256c:	83 85       	ldd	r24, Z+11	; 0x0b
   1256e:	84 ff       	sbrs	r24, 4
   12570:	63 c0       	rjmp	.+198    	; 0x12638 <f_unlink+0x17e>
				if (dclst < 2) {
   12572:	82 e0       	ldi	r24, 0x02	; 2
   12574:	e8 16       	cp	r14, r24
   12576:	f1 04       	cpc	r15, r1
   12578:	01 05       	cpc	r16, r1
   1257a:	11 05       	cpc	r17, r1
   1257c:	70 f1       	brcs	.+92     	; 0x125da <f_unlink+0x120>
					res = FR_INT_ERR;
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   1257e:	43 e2       	ldi	r20, 0x23	; 35
   12580:	c4 2e       	mov	r12, r20
   12582:	d1 2c       	mov	r13, r1
   12584:	cc 0e       	add	r12, r28
   12586:	dd 1e       	adc	r13, r29
   12588:	c6 01       	movw	r24, r12
   1258a:	be 01       	movw	r22, r28
   1258c:	63 5f       	subi	r22, 0xF3	; 243
   1258e:	7f 4f       	sbci	r23, 0xFF	; 255
   12590:	46 e1       	ldi	r20, 0x16	; 22
   12592:	50 e0       	ldi	r21, 0x00	; 0
   12594:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
					sdj.sclust = dclst;
   12598:	e9 a6       	std	Y+41, r14	; 0x29
   1259a:	fa a6       	std	Y+42, r15	; 0x2a
   1259c:	0b a7       	std	Y+43, r16	; 0x2b
   1259e:	1c a7       	std	Y+44, r17	; 0x2c
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   125a0:	c6 01       	movw	r24, r12
   125a2:	62 e0       	ldi	r22, 0x02	; 2
   125a4:	70 e0       	ldi	r23, 0x00	; 0
   125a6:	0e 94 ee 7f 	call	0xffdc	; 0xffdc <_ZL7dir_sdiP3DIRt>
   125aa:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
   125ac:	00 97       	sbiw	r24, 0x00	; 0
   125ae:	71 f5       	brne	.+92     	; 0x1260c <f_unlink+0x152>
						res = dir_read(&sdj);
   125b0:	c6 01       	movw	r24, r12
   125b2:	0e 94 a0 85 	call	0x10b40	; 0x10b40 <_ZL8dir_readP3DIR>
   125b6:	9c 01       	movw	r18, r24
						if (res == FR_OK			/* Not empty dir */
   125b8:	00 97       	sbiw	r24, 0x00	; 0
   125ba:	91 f0       	breq	.+36     	; 0x125e0 <f_unlink+0x126>
   125bc:	eb a1       	ldd	r30, Y+35	; 0x23
   125be:	fc a1       	ldd	r31, Y+36	; 0x24
   125c0:	86 89       	ldd	r24, Z+22	; 0x16
   125c2:	97 89       	ldd	r25, Z+23	; 0x17
   125c4:	a0 8d       	ldd	r26, Z+24	; 0x18
   125c6:	b1 8d       	ldd	r27, Z+25	; 0x19
   125c8:	e8 16       	cp	r14, r24
   125ca:	f9 06       	cpc	r15, r25
   125cc:	0a 07       	cpc	r16, r26
   125ce:	1b 07       	cpc	r17, r27
   125d0:	39 f0       	breq	.+14     	; 0x125e0 <f_unlink+0x126>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   125d2:	24 30       	cpi	r18, 0x04	; 4
   125d4:	31 05       	cpc	r19, r1
   125d6:	81 f1       	breq	.+96     	; 0x12638 <f_unlink+0x17e>
   125d8:	19 c0       	rjmp	.+50     	; 0x1260c <f_unlink+0x152>
					res = FR_DENIED;		/* Cannot remove R/O object */
			}
			dclst = LD_CLUST(dir);
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
				if (dclst < 2) {
					res = FR_INT_ERR;
   125da:	22 e0       	ldi	r18, 0x02	; 2
   125dc:	30 e0       	ldi	r19, 0x00	; 0
   125de:	16 c0       	rjmp	.+44     	; 0x1260c <f_unlink+0x152>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
					sdj.sclust = dclst;
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
					if (res == FR_OK) {
						res = dir_read(&sdj);
						if (res == FR_OK			/* Not empty dir */
   125e0:	27 e0       	ldi	r18, 0x07	; 7
   125e2:	30 e0       	ldi	r19, 0x00	; 0
   125e4:	13 c0       	rjmp	.+38     	; 0x1260c <f_unlink+0x152>
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
				if (res == FR_OK) {
					if (dclst)				/* Remove the cluster chain if exist */
   125e6:	e1 14       	cp	r14, r1
   125e8:	f1 04       	cpc	r15, r1
   125ea:	01 05       	cpc	r16, r1
   125ec:	11 05       	cpc	r17, r1
   125ee:	49 f0       	breq	.+18     	; 0x12602 <f_unlink+0x148>
						res = remove_chain(dj.fs, dclst);
   125f0:	8d 85       	ldd	r24, Y+13	; 0x0d
   125f2:	9e 85       	ldd	r25, Y+14	; 0x0e
   125f4:	b8 01       	movw	r22, r16
   125f6:	a7 01       	movw	r20, r14
   125f8:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <_ZL12remove_chainP5FATFSm>
   125fc:	9c 01       	movw	r18, r24
					if (res == FR_OK) res = sync(dj.fs);
   125fe:	00 97       	sbiw	r24, 0x00	; 0
   12600:	29 f4       	brne	.+10     	; 0x1260c <f_unlink+0x152>
   12602:	8d 85       	ldd	r24, Y+13	; 0x0d
   12604:	9e 85       	ldd	r25, Y+14	; 0x0e
   12606:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   1260a:	9c 01       	movw	r18, r24
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
   1260c:	c9 01       	movw	r24, r18
   1260e:	ea 96       	adiw	r28, 0x3a	; 58
   12610:	0f b6       	in	r0, 0x3f	; 63
   12612:	f8 94       	cli
   12614:	de bf       	out	0x3e, r29	; 62
   12616:	0f be       	out	0x3f, r0	; 63
   12618:	cd bf       	out	0x3d, r28	; 61
   1261a:	cf 91       	pop	r28
   1261c:	df 91       	pop	r29
   1261e:	1f 91       	pop	r17
   12620:	0f 91       	pop	r16
   12622:	ff 90       	pop	r15
   12624:	ef 90       	pop	r14
   12626:	df 90       	pop	r13
   12628:	cf 90       	pop	r12
   1262a:	08 95       	ret
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			dir = dj.dir;
   1262c:	ef 8d       	ldd	r30, Y+31	; 0x1f
   1262e:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {
   12630:	30 97       	sbiw	r30, 0x00	; 0
   12632:	09 f0       	breq	.+2      	; 0x12636 <f_unlink+0x17c>
   12634:	76 cf       	rjmp	.-276    	; 0x12522 <f_unlink+0x68>
   12636:	7b cf       	rjmp	.-266    	; 0x1252e <f_unlink+0x74>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
   12638:	ce 01       	movw	r24, r28
   1263a:	0d 96       	adiw	r24, 0x0d	; 13
   1263c:	0e 94 98 80 	call	0x10130	; 0x10130 <_ZL10dir_removeP3DIR>
   12640:	9c 01       	movw	r18, r24
				if (res == FR_OK) {
   12642:	00 97       	sbiw	r24, 0x00	; 0
   12644:	81 f2       	breq	.-96     	; 0x125e6 <f_unlink+0x12c>
   12646:	e2 cf       	rjmp	.-60     	; 0x1260c <f_unlink+0x152>

00012648 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR *path		/* Pointer to the directory path */
)
{
   12648:	2f 92       	push	r2
   1264a:	3f 92       	push	r3
   1264c:	4f 92       	push	r4
   1264e:	5f 92       	push	r5
   12650:	6f 92       	push	r6
   12652:	7f 92       	push	r7
   12654:	8f 92       	push	r8
   12656:	9f 92       	push	r9
   12658:	af 92       	push	r10
   1265a:	bf 92       	push	r11
   1265c:	cf 92       	push	r12
   1265e:	df 92       	push	r13
   12660:	ef 92       	push	r14
   12662:	ff 92       	push	r15
   12664:	0f 93       	push	r16
   12666:	1f 93       	push	r17
   12668:	df 93       	push	r29
   1266a:	cf 93       	push	r28
   1266c:	cd b7       	in	r28, 0x3d	; 61
   1266e:	de b7       	in	r29, 0x3e	; 62
   12670:	ab 97       	sbiw	r28, 0x2b	; 43
   12672:	0f b6       	in	r0, 0x3f	; 63
   12674:	f8 94       	cli
   12676:	de bf       	out	0x3e, r29	; 62
   12678:	0f be       	out	0x3f, r0	; 63
   1267a:	cd bf       	out	0x3d, r28	; 61
   1267c:	9c a3       	std	Y+36, r25	; 0x24
   1267e:	8b a3       	std	Y+35, r24	; 0x23
	FRESULT res;
	DIR dj;
	BYTE *dir, n;
	DWORD dsc, dcl, pcl, tim = get_fattime();
   12680:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <get_fattime>
   12684:	4b 01       	movw	r8, r22
   12686:	5c 01       	movw	r10, r24
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   12688:	5d e0       	ldi	r21, 0x0D	; 13
   1268a:	c5 2e       	mov	r12, r21
   1268c:	d1 2c       	mov	r13, r1
   1268e:	cc 0e       	add	r12, r28
   12690:	dd 1e       	adc	r13, r29
   12692:	ce 01       	movw	r24, r28
   12694:	83 96       	adiw	r24, 0x23	; 35
   12696:	b6 01       	movw	r22, r12
   12698:	41 e0       	ldi	r20, 0x01	; 1
   1269a:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   1269e:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
   126a0:	00 97       	sbiw	r24, 0x00	; 0
   126a2:	09 f0       	breq	.+2      	; 0x126a6 <f_mkdir+0x5e>
   126a4:	1e c1       	rjmp	.+572    	; 0x128e2 <f_mkdir+0x29a>
		INIT_BUF(dj);
   126a6:	ce 01       	movw	r24, r28
   126a8:	01 96       	adiw	r24, 0x01	; 1
   126aa:	9a a3       	std	Y+34, r25	; 0x22
   126ac:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);			/* Follow the file path */
   126ae:	6b a1       	ldd	r22, Y+35	; 0x23
   126b0:	7c a1       	ldd	r23, Y+36	; 0x24
   126b2:	c6 01       	movw	r24, r12
   126b4:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   126b8:	8c 01       	movw	r16, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   126ba:	00 97       	sbiw	r24, 0x00	; 0
   126bc:	61 f0       	breq	.+24     	; 0x126d6 <f_mkdir+0x8e>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
   126be:	84 30       	cpi	r24, 0x04	; 4
   126c0:	91 05       	cpc	r25, r1
   126c2:	09 f0       	breq	.+2      	; 0x126c6 <f_mkdir+0x7e>
   126c4:	0e c1       	rjmp	.+540    	; 0x128e2 <f_mkdir+0x29a>
   126c6:	e9 a1       	ldd	r30, Y+33	; 0x21
   126c8:	fa a1       	ldd	r31, Y+34	; 0x22
   126ca:	83 85       	ldd	r24, Z+11	; 0x0b
   126cc:	85 ff       	sbrs	r24, 5
   126ce:	23 c1       	rjmp	.+582    	; 0x12916 <f_mkdir+0x2ce>
			res = FR_INVALID_NAME;
   126d0:	06 e0       	ldi	r16, 0x06	; 6
   126d2:	10 e0       	ldi	r17, 0x00	; 0
   126d4:	06 c1       	rjmp	.+524    	; 0x128e2 <f_mkdir+0x29a>

	res = chk_mounted(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INIT_BUF(dj);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
   126d6:	08 e0       	ldi	r16, 0x08	; 8
   126d8:	10 e0       	ldi	r17, 0x00	; 0
   126da:	03 c1       	rjmp	.+518    	; 0x128e2 <f_mkdir+0x29a>
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
   126dc:	21 e0       	ldi	r18, 0x01	; 1
   126de:	c2 16       	cp	r12, r18
   126e0:	d1 04       	cpc	r13, r1
   126e2:	e1 04       	cpc	r14, r1
   126e4:	f1 04       	cpc	r15, r1
   126e6:	09 f4       	brne	.+2      	; 0x126ea <f_mkdir+0xa2>
   126e8:	28 c1       	rjmp	.+592    	; 0x1293a <f_mkdir+0x2f2>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   126ea:	3f ef       	ldi	r19, 0xFF	; 255
   126ec:	c3 16       	cp	r12, r19
   126ee:	3f ef       	ldi	r19, 0xFF	; 255
   126f0:	d3 06       	cpc	r13, r19
   126f2:	3f ef       	ldi	r19, 0xFF	; 255
   126f4:	e3 06       	cpc	r14, r19
   126f6:	3f ef       	ldi	r19, 0xFF	; 255
   126f8:	f3 06       	cpc	r15, r19
   126fa:	09 f4       	brne	.+2      	; 0x126fe <f_mkdir+0xb6>
   126fc:	21 c1       	rjmp	.+578    	; 0x12940 <f_mkdir+0x2f8>
   126fe:	23 c1       	rjmp	.+582    	; 0x12946 <f_mkdir+0x2fe>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(dj.fs, dcl);
   12700:	0d 85       	ldd	r16, Y+13	; 0x0d
   12702:	1e 85       	ldd	r17, Y+14	; 0x0e
   12704:	c8 01       	movw	r24, r16
   12706:	b7 01       	movw	r22, r14
   12708:	a6 01       	movw	r20, r12
   1270a:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
   1270e:	6d a3       	std	Y+37, r22	; 0x25
   12710:	7e a3       	std	Y+38, r23	; 0x26
   12712:	8f a3       	std	Y+39, r24	; 0x27
   12714:	98 a7       	std	Y+40, r25	; 0x28
				dir = dj.fs->win;
   12716:	42 e3       	ldi	r20, 0x32	; 50
   12718:	64 2e       	mov	r6, r20
   1271a:	71 2c       	mov	r7, r1
   1271c:	60 0e       	add	r6, r16
   1271e:	71 1e       	adc	r7, r17
				mem_set(dir, 0, SS(dj.fs));
   12720:	c3 01       	movw	r24, r6
   12722:	60 e0       	ldi	r22, 0x00	; 0
   12724:	70 e0       	ldi	r23, 0x00	; 0
   12726:	40 e0       	ldi	r20, 0x00	; 0
   12728:	52 e0       	ldi	r21, 0x02	; 2
   1272a:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
   1272e:	c3 01       	movw	r24, r6
   12730:	60 e2       	ldi	r22, 0x20	; 32
   12732:	70 e0       	ldi	r23, 0x00	; 0
   12734:	4b e0       	ldi	r20, 0x0B	; 11
   12736:	50 e0       	ldi	r21, 0x00	; 0
   12738:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
				dir[DIR_Name] = '.';
   1273c:	3e e2       	ldi	r19, 0x2E	; 46
   1273e:	53 2e       	mov	r5, r19
   12740:	d8 01       	movw	r26, r16
   12742:	d2 96       	adiw	r26, 0x32	; 50
   12744:	5c 92       	st	X, r5
   12746:	d2 97       	sbiw	r26, 0x32	; 50
				dir[DIR_Attr] = AM_DIR;
   12748:	80 e1       	ldi	r24, 0x10	; 16
   1274a:	dd 96       	adiw	r26, 0x3d	; 61
   1274c:	8c 93       	st	X, r24
				ST_DWORD(dir+DIR_WrtTime, tim);
   1274e:	89 a6       	std	Y+41, r8	; 0x29
   12750:	f8 01       	movw	r30, r16
   12752:	e8 5b       	subi	r30, 0xB8	; 184
   12754:	ff 4f       	sbci	r31, 0xFF	; 255
   12756:	80 82       	st	Z, r8
   12758:	89 2d       	mov	r24, r9
   1275a:	99 27       	eor	r25, r25
   1275c:	8a a7       	std	Y+42, r24	; 0x2a
   1275e:	f8 01       	movw	r30, r16
   12760:	e7 5b       	subi	r30, 0xB7	; 183
   12762:	ff 4f       	sbci	r31, 0xFF	; 255
   12764:	80 83       	st	Z, r24
   12766:	c5 01       	movw	r24, r10
   12768:	aa 27       	eor	r26, r26
   1276a:	bb 27       	eor	r27, r27
   1276c:	8b a7       	std	Y+43, r24	; 0x2b
   1276e:	f8 01       	movw	r30, r16
   12770:	e6 5b       	subi	r30, 0xB6	; 182
   12772:	ff 4f       	sbci	r31, 0xFF	; 255
   12774:	80 83       	st	Z, r24
   12776:	8b 2c       	mov	r8, r11
   12778:	99 24       	eor	r9, r9
   1277a:	aa 24       	eor	r10, r10
   1277c:	bb 24       	eor	r11, r11
   1277e:	28 2c       	mov	r2, r8
   12780:	f8 01       	movw	r30, r16
   12782:	e5 5b       	subi	r30, 0xB5	; 181
   12784:	ff 4f       	sbci	r31, 0xFF	; 255
   12786:	80 82       	st	Z, r8
				ST_CLUST(dir, dcl);
   12788:	3c 2c       	mov	r3, r12
   1278a:	f8 01       	movw	r30, r16
   1278c:	e4 5b       	subi	r30, 0xB4	; 180
   1278e:	ff 4f       	sbci	r31, 0xFF	; 255
   12790:	c0 82       	st	Z, r12
   12792:	8d 2d       	mov	r24, r13
   12794:	99 27       	eor	r25, r25
   12796:	48 2e       	mov	r4, r24
   12798:	f8 01       	movw	r30, r16
   1279a:	e3 5b       	subi	r30, 0xB3	; 179
   1279c:	ff 4f       	sbci	r31, 0xFF	; 255
   1279e:	80 83       	st	Z, r24
   127a0:	c7 01       	movw	r24, r14
   127a2:	aa 27       	eor	r26, r26
   127a4:	bb 27       	eor	r27, r27
   127a6:	98 2e       	mov	r9, r24
   127a8:	f8 01       	movw	r30, r16
   127aa:	ea 5b       	subi	r30, 0xBA	; 186
   127ac:	ff 4f       	sbci	r31, 0xFF	; 255
   127ae:	80 83       	st	Z, r24
   127b0:	89 2f       	mov	r24, r25
   127b2:	99 27       	eor	r25, r25
   127b4:	a8 2e       	mov	r10, r24
   127b6:	f8 01       	movw	r30, r16
   127b8:	e9 5b       	subi	r30, 0xB9	; 185
   127ba:	ff 4f       	sbci	r31, 0xFF	; 255
   127bc:	80 83       	st	Z, r24
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
   127be:	c8 01       	movw	r24, r16
   127c0:	8e 5a       	subi	r24, 0xAE	; 174
   127c2:	9f 4f       	sbci	r25, 0xFF	; 255
   127c4:	b3 01       	movw	r22, r6
   127c6:	40 e2       	ldi	r20, 0x20	; 32
   127c8:	50 e0       	ldi	r21, 0x00	; 0
   127ca:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
				dir[33] = '.'; pcl = dj.sclust;
   127ce:	f8 01       	movw	r30, r16
   127d0:	ed 5a       	subi	r30, 0xAD	; 173
   127d2:	ff 4f       	sbci	r31, 0xFF	; 255
   127d4:	50 82       	st	Z, r5
   127d6:	8b 89       	ldd	r24, Y+19	; 0x13
   127d8:	9c 89       	ldd	r25, Y+20	; 0x14
   127da:	ad 89       	ldd	r26, Y+21	; 0x15
   127dc:	be 89       	ldd	r27, Y+22	; 0x16
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
   127de:	6d 85       	ldd	r22, Y+13	; 0x0d
   127e0:	7e 85       	ldd	r23, Y+14	; 0x0e
   127e2:	fb 01       	movw	r30, r22
   127e4:	20 81       	ld	r18, Z
   127e6:	23 30       	cpi	r18, 0x03	; 3
   127e8:	61 f4       	brne	.+24     	; 0x12802 <f_mkdir+0x1ba>
   127ea:	26 a1       	ldd	r18, Z+38	; 0x26
   127ec:	37 a1       	ldd	r19, Z+39	; 0x27
   127ee:	40 a5       	ldd	r20, Z+40	; 0x28
   127f0:	51 a5       	ldd	r21, Z+41	; 0x29
   127f2:	82 17       	cp	r24, r18
   127f4:	93 07       	cpc	r25, r19
   127f6:	a4 07       	cpc	r26, r20
   127f8:	b5 07       	cpc	r27, r21
   127fa:	19 f4       	brne	.+6      	; 0x12802 <f_mkdir+0x1ba>
					pcl = 0;
   127fc:	80 e0       	ldi	r24, 0x00	; 0
   127fe:	90 e0       	ldi	r25, 0x00	; 0
   12800:	dc 01       	movw	r26, r24
				ST_CLUST(dir+32, pcl);
   12802:	98 01       	movw	r18, r16
   12804:	24 59       	subi	r18, 0x94	; 148
   12806:	3f 4f       	sbci	r19, 0xFF	; 255
   12808:	f9 01       	movw	r30, r18
   1280a:	80 83       	st	Z, r24
   1280c:	98 01       	movw	r18, r16
   1280e:	23 59       	subi	r18, 0x93	; 147
   12810:	3f 4f       	sbci	r19, 0xFF	; 255
   12812:	f9 01       	movw	r30, r18
   12814:	90 83       	st	Z, r25
   12816:	cd 01       	movw	r24, r26
   12818:	aa 27       	eor	r26, r26
   1281a:	bb 27       	eor	r27, r27
   1281c:	98 01       	movw	r18, r16
   1281e:	2a 59       	subi	r18, 0x9A	; 154
   12820:	3f 4f       	sbci	r19, 0xFF	; 255
   12822:	f9 01       	movw	r30, r18
   12824:	80 83       	st	Z, r24
   12826:	09 59       	subi	r16, 0x99	; 153
   12828:	1f 4f       	sbci	r17, 0xFF	; 255
   1282a:	f8 01       	movw	r30, r16
   1282c:	90 83       	st	Z, r25
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   1282e:	db 01       	movw	r26, r22
   12830:	12 96       	adiw	r26, 0x02	; 2
   12832:	8c 90       	ld	r8, X
   12834:	12 97       	sbiw	r26, 0x02	; 2
					dj.fs->winsect = dsc++;
					dj.fs->wflag = 1;
   12836:	bb 24       	eor	r11, r11
   12838:	b3 94       	inc	r11
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   1283a:	2b c0       	rjmp	.+86     	; 0x12892 <f_mkdir+0x24a>
					dj.fs->winsect = dsc++;
   1283c:	8d 85       	ldd	r24, Y+13	; 0x0d
   1283e:	9e 85       	ldd	r25, Y+14	; 0x0e
   12840:	2d a1       	ldd	r18, Y+37	; 0x25
   12842:	3e a1       	ldd	r19, Y+38	; 0x26
   12844:	4f a1       	ldd	r20, Y+39	; 0x27
   12846:	58 a5       	ldd	r21, Y+40	; 0x28
   12848:	dc 01       	movw	r26, r24
   1284a:	9e 96       	adiw	r26, 0x2e	; 46
   1284c:	2d 93       	st	X+, r18
   1284e:	3d 93       	st	X+, r19
   12850:	4d 93       	st	X+, r20
   12852:	5c 93       	st	X, r21
   12854:	d1 97       	sbiw	r26, 0x31	; 49
					dj.fs->wflag = 1;
   12856:	14 96       	adiw	r26, 0x04	; 4
   12858:	bc 92       	st	X, r11
					res = move_window(dj.fs, 0);
   1285a:	40 e0       	ldi	r20, 0x00	; 0
   1285c:	50 e0       	ldi	r21, 0x00	; 0
   1285e:	ba 01       	movw	r22, r20
   12860:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   12864:	8c 01       	movw	r16, r24
					if (res != FR_OK) break;
   12866:	00 97       	sbiw	r24, 0x00	; 0
   12868:	e9 f4       	brne	.+58     	; 0x128a4 <f_mkdir+0x25c>
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					dj.fs->winsect = dsc++;
   1286a:	2d a1       	ldd	r18, Y+37	; 0x25
   1286c:	3e a1       	ldd	r19, Y+38	; 0x26
   1286e:	4f a1       	ldd	r20, Y+39	; 0x27
   12870:	58 a5       	ldd	r21, Y+40	; 0x28
   12872:	2f 5f       	subi	r18, 0xFF	; 255
   12874:	3f 4f       	sbci	r19, 0xFF	; 255
   12876:	4f 4f       	sbci	r20, 0xFF	; 255
   12878:	5f 4f       	sbci	r21, 0xFF	; 255
   1287a:	2d a3       	std	Y+37, r18	; 0x25
   1287c:	3e a3       	std	Y+38, r19	; 0x26
   1287e:	4f a3       	std	Y+39, r20	; 0x27
   12880:	58 a7       	std	Y+40, r21	; 0x28
					dj.fs->wflag = 1;
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
   12882:	c3 01       	movw	r24, r6
   12884:	60 e0       	ldi	r22, 0x00	; 0
   12886:	70 e0       	ldi	r23, 0x00	; 0
   12888:	40 e0       	ldi	r20, 0x00	; 0
   1288a:	52 e0       	ldi	r21, 0x02	; 2
   1288c:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
				dir[33] = '.'; pcl = dj.sclust;
				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
					pcl = 0;
				ST_CLUST(dir+32, pcl);
				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
   12890:	8a 94       	dec	r8
   12892:	88 20       	and	r8, r8
   12894:	99 f6       	brne	.-90     	; 0x1283c <f_mkdir+0x1f4>
					res = move_window(dj.fs, 0);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(dj.fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
   12896:	ce 01       	movw	r24, r28
   12898:	0d 96       	adiw	r24, 0x0d	; 13
   1289a:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <_ZL12dir_registerP3DIR>
   1289e:	8c 01       	movw	r16, r24
			if (res != FR_OK) {
   128a0:	00 97       	sbiw	r24, 0x00	; 0
   128a2:	39 f0       	breq	.+14     	; 0x128b2 <f_mkdir+0x26a>
				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
   128a4:	8d 85       	ldd	r24, Y+13	; 0x0d
   128a6:	9e 85       	ldd	r25, Y+14	; 0x0e
   128a8:	b7 01       	movw	r22, r14
   128aa:	a6 01       	movw	r20, r12
   128ac:	0e 94 d9 85 	call	0x10bb2	; 0x10bb2 <_ZL12remove_chainP5FATFSm>
   128b0:	18 c0       	rjmp	.+48     	; 0x128e2 <f_mkdir+0x29a>
			} else {
				dir = dj.dir;
   128b2:	ef 8d       	ldd	r30, Y+31	; 0x1f
   128b4:	f8 a1       	ldd	r31, Y+32	; 0x20
				dir[DIR_Attr] = AM_DIR;				/* Attribute */
   128b6:	80 e1       	ldi	r24, 0x10	; 16
   128b8:	83 87       	std	Z+11, r24	; 0x0b
				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
   128ba:	39 a5       	ldd	r19, Y+41	; 0x29
   128bc:	36 8b       	std	Z+22, r19	; 0x16
   128be:	4a a5       	ldd	r20, Y+42	; 0x2a
   128c0:	47 8b       	std	Z+23, r20	; 0x17
   128c2:	5b a5       	ldd	r21, Y+43	; 0x2b
   128c4:	50 8f       	std	Z+24, r21	; 0x18
   128c6:	21 8e       	std	Z+25, r2	; 0x19
				ST_CLUST(dir, dcl);					/* Table start cluster */
   128c8:	32 8e       	std	Z+26, r3	; 0x1a
   128ca:	43 8e       	std	Z+27, r4	; 0x1b
   128cc:	94 8a       	std	Z+20, r9	; 0x14
   128ce:	a5 8a       	std	Z+21, r10	; 0x15
				dj.fs->wflag = 1;
   128d0:	8d 85       	ldd	r24, Y+13	; 0x0d
   128d2:	9e 85       	ldd	r25, Y+14	; 0x0e
   128d4:	21 e0       	ldi	r18, 0x01	; 1
   128d6:	dc 01       	movw	r26, r24
   128d8:	14 96       	adiw	r26, 0x04	; 4
   128da:	2c 93       	st	X, r18
				res = sync(dj.fs);
   128dc:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   128e0:	8c 01       	movw	r16, r24
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
   128e2:	c8 01       	movw	r24, r16
   128e4:	ab 96       	adiw	r28, 0x2b	; 43
   128e6:	0f b6       	in	r0, 0x3f	; 63
   128e8:	f8 94       	cli
   128ea:	de bf       	out	0x3e, r29	; 62
   128ec:	0f be       	out	0x3f, r0	; 63
   128ee:	cd bf       	out	0x3d, r28	; 61
   128f0:	cf 91       	pop	r28
   128f2:	df 91       	pop	r29
   128f4:	1f 91       	pop	r17
   128f6:	0f 91       	pop	r16
   128f8:	ff 90       	pop	r15
   128fa:	ef 90       	pop	r14
   128fc:	df 90       	pop	r13
   128fe:	cf 90       	pop	r12
   12900:	bf 90       	pop	r11
   12902:	af 90       	pop	r10
   12904:	9f 90       	pop	r9
   12906:	8f 90       	pop	r8
   12908:	7f 90       	pop	r7
   1290a:	6f 90       	pop	r6
   1290c:	5f 90       	pop	r5
   1290e:	4f 90       	pop	r4
   12910:	3f 90       	pop	r3
   12912:	2f 90       	pop	r2
   12914:	08 95       	ret
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
   12916:	8d 85       	ldd	r24, Y+13	; 0x0d
   12918:	9e 85       	ldd	r25, Y+14	; 0x0e
   1291a:	40 e0       	ldi	r20, 0x00	; 0
   1291c:	50 e0       	ldi	r21, 0x00	; 0
   1291e:	ba 01       	movw	r22, r20
   12920:	0e 94 ce 81 	call	0x1039c	; 0x1039c <_ZL12create_chainP5FATFSm>
   12924:	6b 01       	movw	r12, r22
   12926:	7c 01       	movw	r14, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
   12928:	61 15       	cp	r22, r1
   1292a:	71 05       	cpc	r23, r1
   1292c:	81 05       	cpc	r24, r1
   1292e:	91 05       	cpc	r25, r1
   12930:	09 f0       	breq	.+2      	; 0x12934 <f_mkdir+0x2ec>
   12932:	d4 ce       	rjmp	.-600    	; 0x126dc <f_mkdir+0x94>
   12934:	07 e0       	ldi	r16, 0x07	; 7
   12936:	10 e0       	ldi	r17, 0x00	; 0
   12938:	b5 cf       	rjmp	.-150    	; 0x128a4 <f_mkdir+0x25c>
			if (dcl == 1) res = FR_INT_ERR;
   1293a:	02 e0       	ldi	r16, 0x02	; 2
   1293c:	10 e0       	ldi	r17, 0x00	; 0
   1293e:	b2 cf       	rjmp	.-156    	; 0x128a4 <f_mkdir+0x25c>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
   12940:	01 e0       	ldi	r16, 0x01	; 1
   12942:	10 e0       	ldi	r17, 0x00	; 0
   12944:	af cf       	rjmp	.-162    	; 0x128a4 <f_mkdir+0x25c>
			if (res == FR_OK)					/* Flush FAT */
				res = move_window(dj.fs, 0);
   12946:	8d 85       	ldd	r24, Y+13	; 0x0d
   12948:	9e 85       	ldd	r25, Y+14	; 0x0e
   1294a:	40 e0       	ldi	r20, 0x00	; 0
   1294c:	50 e0       	ldi	r21, 0x00	; 0
   1294e:	ba 01       	movw	r22, r20
   12950:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   12954:	8c 01       	movw	r16, r24
			if (res == FR_OK) {					/* Initialize the new directory table */
   12956:	00 97       	sbiw	r24, 0x00	; 0
   12958:	09 f4       	brne	.+2      	; 0x1295c <f_mkdir+0x314>
   1295a:	d2 ce       	rjmp	.-604    	; 0x12700 <f_mkdir+0xb8>
   1295c:	a3 cf       	rjmp	.-186    	; 0x128a4 <f_mkdir+0x25c>

0001295e <f_chmod>:
FRESULT f_chmod (
	const TCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
   1295e:	ef 92       	push	r14
   12960:	ff 92       	push	r15
   12962:	0f 93       	push	r16
   12964:	1f 93       	push	r17
   12966:	df 93       	push	r29
   12968:	cf 93       	push	r28
   1296a:	cd b7       	in	r28, 0x3d	; 61
   1296c:	de b7       	in	r29, 0x3e	; 62
   1296e:	a4 97       	sbiw	r28, 0x24	; 36
   12970:	0f b6       	in	r0, 0x3f	; 63
   12972:	f8 94       	cli
   12974:	de bf       	out	0x3e, r29	; 62
   12976:	0f be       	out	0x3f, r0	; 63
   12978:	cd bf       	out	0x3d, r28	; 61
   1297a:	9c a3       	std	Y+36, r25	; 0x24
   1297c:	8b a3       	std	Y+35, r24	; 0x23
   1297e:	f6 2e       	mov	r15, r22
   12980:	e4 2e       	mov	r14, r20
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   12982:	8e 01       	movw	r16, r28
   12984:	03 5f       	subi	r16, 0xF3	; 243
   12986:	1f 4f       	sbci	r17, 0xFF	; 255
   12988:	ce 01       	movw	r24, r28
   1298a:	83 96       	adiw	r24, 0x23	; 35
   1298c:	b8 01       	movw	r22, r16
   1298e:	41 e0       	ldi	r20, 0x01	; 1
   12990:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   12994:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   12996:	00 97       	sbiw	r24, 0x00	; 0
   12998:	39 f5       	brne	.+78     	; 0x129e8 <f_chmod+0x8a>
		INIT_BUF(dj);
   1299a:	ce 01       	movw	r24, r28
   1299c:	01 96       	adiw	r24, 0x01	; 1
   1299e:	9a a3       	std	Y+34, r25	; 0x22
   129a0:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);		/* Follow the file path */
   129a2:	2b a1       	ldd	r18, Y+35	; 0x23
   129a4:	3c a1       	ldd	r19, Y+36	; 0x24
   129a6:	c8 01       	movw	r24, r16
   129a8:	b9 01       	movw	r22, r18
   129aa:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   129ae:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   129b0:	00 97       	sbiw	r24, 0x00	; 0
   129b2:	d1 f4       	brne	.+52     	; 0x129e8 <f_chmod+0x8a>
   129b4:	e9 a1       	ldd	r30, Y+33	; 0x21
   129b6:	fa a1       	ldd	r31, Y+34	; 0x22
   129b8:	83 85       	ldd	r24, Z+11	; 0x0b
   129ba:	85 ff       	sbrs	r24, 5
   129bc:	23 c0       	rjmp	.+70     	; 0x12a04 <f_chmod+0xa6>
   129be:	12 c0       	rjmp	.+36     	; 0x129e4 <f_chmod+0x86>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
   129c0:	87 e2       	ldi	r24, 0x27	; 39
   129c2:	e8 22       	and	r14, r24
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
   129c4:	8e 2d       	mov	r24, r14
   129c6:	80 95       	com	r24
   129c8:	93 85       	ldd	r25, Z+11	; 0x0b
   129ca:	89 23       	and	r24, r25
   129cc:	ef 20       	and	r14, r15
   129ce:	8e 29       	or	r24, r14
   129d0:	83 87       	std	Z+11, r24	; 0x0b
				dj.fs->wflag = 1;
   129d2:	8d 85       	ldd	r24, Y+13	; 0x0d
   129d4:	9e 85       	ldd	r25, Y+14	; 0x0e
   129d6:	21 e0       	ldi	r18, 0x01	; 1
   129d8:	fc 01       	movw	r30, r24
   129da:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
   129dc:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   129e0:	9c 01       	movw	r18, r24
   129e2:	02 c0       	rjmp	.+4      	; 0x129e8 <f_chmod+0x8a>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
   129e4:	26 e0       	ldi	r18, 0x06	; 6
   129e6:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
   129e8:	c9 01       	movw	r24, r18
   129ea:	a4 96       	adiw	r28, 0x24	; 36
   129ec:	0f b6       	in	r0, 0x3f	; 63
   129ee:	f8 94       	cli
   129f0:	de bf       	out	0x3e, r29	; 62
   129f2:	0f be       	out	0x3f, r0	; 63
   129f4:	cd bf       	out	0x3d, r28	; 61
   129f6:	cf 91       	pop	r28
   129f8:	df 91       	pop	r29
   129fa:	1f 91       	pop	r17
   129fc:	0f 91       	pop	r16
   129fe:	ff 90       	pop	r15
   12a00:	ef 90       	pop	r14
   12a02:	08 95       	ret
		res = follow_path(&dj, path);		/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
   12a04:	ef 8d       	ldd	r30, Y+31	; 0x1f
   12a06:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {						/* Is it a root directory? */
   12a08:	30 97       	sbiw	r30, 0x00	; 0
   12a0a:	d1 f6       	brne	.-76     	; 0x129c0 <f_chmod+0x62>
   12a0c:	eb cf       	rjmp	.-42     	; 0x129e4 <f_chmod+0x86>

00012a0e <f_utime>:

FRESULT f_utime (
	const TCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the time stamp to be set */
)
{
   12a0e:	ef 92       	push	r14
   12a10:	ff 92       	push	r15
   12a12:	0f 93       	push	r16
   12a14:	1f 93       	push	r17
   12a16:	df 93       	push	r29
   12a18:	cf 93       	push	r28
   12a1a:	cd b7       	in	r28, 0x3d	; 61
   12a1c:	de b7       	in	r29, 0x3e	; 62
   12a1e:	a4 97       	sbiw	r28, 0x24	; 36
   12a20:	0f b6       	in	r0, 0x3f	; 63
   12a22:	f8 94       	cli
   12a24:	de bf       	out	0x3e, r29	; 62
   12a26:	0f be       	out	0x3f, r0	; 63
   12a28:	cd bf       	out	0x3d, r28	; 61
   12a2a:	9c a3       	std	Y+36, r25	; 0x24
   12a2c:	8b a3       	std	Y+35, r24	; 0x23
   12a2e:	8b 01       	movw	r16, r22
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   12a30:	6d e0       	ldi	r22, 0x0D	; 13
   12a32:	e6 2e       	mov	r14, r22
   12a34:	f1 2c       	mov	r15, r1
   12a36:	ec 0e       	add	r14, r28
   12a38:	fd 1e       	adc	r15, r29
   12a3a:	ce 01       	movw	r24, r28
   12a3c:	83 96       	adiw	r24, 0x23	; 35
   12a3e:	b7 01       	movw	r22, r14
   12a40:	41 e0       	ldi	r20, 0x01	; 1
   12a42:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   12a46:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   12a48:	00 97       	sbiw	r24, 0x00	; 0
   12a4a:	69 f5       	brne	.+90     	; 0x12aa6 <f_utime+0x98>
		INIT_BUF(dj);
   12a4c:	ce 01       	movw	r24, r28
   12a4e:	01 96       	adiw	r24, 0x01	; 1
   12a50:	9a a3       	std	Y+34, r25	; 0x22
   12a52:	89 a3       	std	Y+33, r24	; 0x21
		res = follow_path(&dj, path);	/* Follow the file path */
   12a54:	6b a1       	ldd	r22, Y+35	; 0x23
   12a56:	7c a1       	ldd	r23, Y+36	; 0x24
   12a58:	c7 01       	movw	r24, r14
   12a5a:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   12a5e:	9c 01       	movw	r18, r24
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
   12a60:	00 97       	sbiw	r24, 0x00	; 0
   12a62:	09 f5       	brne	.+66     	; 0x12aa6 <f_utime+0x98>
   12a64:	e9 a1       	ldd	r30, Y+33	; 0x21
   12a66:	fa a1       	ldd	r31, Y+34	; 0x22
   12a68:	83 85       	ldd	r24, Z+11	; 0x0b
   12a6a:	85 ff       	sbrs	r24, 5
   12a6c:	2a c0       	rjmp	.+84     	; 0x12ac2 <f_utime+0xb4>
   12a6e:	19 c0       	rjmp	.+50     	; 0x12aa2 <f_utime+0x94>
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
			} else {					/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
   12a70:	d8 01       	movw	r26, r16
   12a72:	16 96       	adiw	r26, 0x06	; 6
   12a74:	8c 91       	ld	r24, X
   12a76:	16 97       	sbiw	r26, 0x06	; 6
   12a78:	86 8b       	std	Z+22, r24	; 0x16
   12a7a:	17 96       	adiw	r26, 0x07	; 7
   12a7c:	8c 91       	ld	r24, X
   12a7e:	17 97       	sbiw	r26, 0x07	; 7
   12a80:	87 8b       	std	Z+23, r24	; 0x17
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
   12a82:	14 96       	adiw	r26, 0x04	; 4
   12a84:	8c 91       	ld	r24, X
   12a86:	14 97       	sbiw	r26, 0x04	; 4
   12a88:	80 8f       	std	Z+24, r24	; 0x18
   12a8a:	15 96       	adiw	r26, 0x05	; 5
   12a8c:	8c 91       	ld	r24, X
   12a8e:	81 8f       	std	Z+25, r24	; 0x19
				dj.fs->wflag = 1;
   12a90:	8d 85       	ldd	r24, Y+13	; 0x0d
   12a92:	9e 85       	ldd	r25, Y+14	; 0x0e
   12a94:	21 e0       	ldi	r18, 0x01	; 1
   12a96:	fc 01       	movw	r30, r24
   12a98:	24 83       	std	Z+4, r18	; 0x04
				res = sync(dj.fs);
   12a9a:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   12a9e:	9c 01       	movw	r18, r24
   12aa0:	02 c0       	rjmp	.+4      	; 0x12aa6 <f_utime+0x98>
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {					/* Root directory */
				res = FR_INVALID_NAME;
   12aa2:	26 e0       	ldi	r18, 0x06	; 6
   12aa4:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
   12aa6:	c9 01       	movw	r24, r18
   12aa8:	a4 96       	adiw	r28, 0x24	; 36
   12aaa:	0f b6       	in	r0, 0x3f	; 63
   12aac:	f8 94       	cli
   12aae:	de bf       	out	0x3e, r29	; 62
   12ab0:	0f be       	out	0x3f, r0	; 63
   12ab2:	cd bf       	out	0x3d, r28	; 61
   12ab4:	cf 91       	pop	r28
   12ab6:	df 91       	pop	r29
   12ab8:	1f 91       	pop	r17
   12aba:	0f 91       	pop	r16
   12abc:	ff 90       	pop	r15
   12abe:	ef 90       	pop	r14
   12ac0:	08 95       	ret
		res = follow_path(&dj, path);	/* Follow the file path */
		FREE_BUF();
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
   12ac2:	ef 8d       	ldd	r30, Y+31	; 0x1f
   12ac4:	f8 a1       	ldd	r31, Y+32	; 0x20
			if (!dir) {					/* Root directory */
   12ac6:	30 97       	sbiw	r30, 0x00	; 0
   12ac8:	99 f6       	brne	.-90     	; 0x12a70 <f_utime+0x62>
   12aca:	eb cf       	rjmp	.-42     	; 0x12aa2 <f_utime+0x94>

00012acc <f_rename>:

FRESULT f_rename (
	const TCHAR *path_old,	/* Pointer to the old name */
	const TCHAR *path_new	/* Pointer to the new name */
)
{
   12acc:	cf 92       	push	r12
   12ace:	df 92       	push	r13
   12ad0:	ef 92       	push	r14
   12ad2:	ff 92       	push	r15
   12ad4:	0f 93       	push	r16
   12ad6:	1f 93       	push	r17
   12ad8:	df 93       	push	r29
   12ada:	cf 93       	push	r28
   12adc:	cd b7       	in	r28, 0x3d	; 61
   12ade:	de b7       	in	r29, 0x3e	; 62
   12ae0:	cf 54       	subi	r28, 0x4F	; 79
   12ae2:	d0 40       	sbci	r29, 0x00	; 0
   12ae4:	0f b6       	in	r0, 0x3f	; 63
   12ae6:	f8 94       	cli
   12ae8:	de bf       	out	0x3e, r29	; 62
   12aea:	0f be       	out	0x3f, r0	; 63
   12aec:	cd bf       	out	0x3d, r28	; 61
   12aee:	8e 01       	movw	r16, r28
   12af0:	02 5b       	subi	r16, 0xB2	; 178
   12af2:	1f 4f       	sbci	r17, 0xFF	; 255
   12af4:	d8 01       	movw	r26, r16
   12af6:	8d 93       	st	X+, r24
   12af8:	9c 93       	st	X, r25
   12afa:	6b 01       	movw	r12, r22
	BYTE buf[21], *dir;
	DWORD dw;
	DEF_NAMEBUF;


	res = chk_mounted(&path_old, &djo.fs, 1);
   12afc:	82 e2       	ldi	r24, 0x22	; 34
   12afe:	e8 2e       	mov	r14, r24
   12b00:	f1 2c       	mov	r15, r1
   12b02:	ec 0e       	add	r14, r28
   12b04:	fd 1e       	adc	r15, r29
   12b06:	c8 01       	movw	r24, r16
   12b08:	b7 01       	movw	r22, r14
   12b0a:	41 e0       	ldi	r20, 0x01	; 1
   12b0c:	0e 94 96 79 	call	0xf32c	; 0xf32c <_ZL11chk_mountedPPKcPP5FATFSh>
   12b10:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
   12b12:	00 97       	sbiw	r24, 0x00	; 0
   12b14:	09 f0       	breq	.+2      	; 0x12b18 <f_rename+0x4c>
   12b16:	e4 c0       	rjmp	.+456    	; 0x12ce0 <f_rename+0x214>
		djn.fs = djo.fs;
   12b18:	8a a1       	ldd	r24, Y+34	; 0x22
   12b1a:	9b a1       	ldd	r25, Y+35	; 0x23
   12b1c:	99 af       	std	Y+57, r25	; 0x39
   12b1e:	88 af       	std	Y+56, r24	; 0x38
		INIT_BUF(djo);
   12b20:	ce 01       	movw	r24, r28
   12b22:	01 96       	adiw	r24, 0x01	; 1
   12b24:	9f ab       	std	Y+55, r25	; 0x37
   12b26:	8e ab       	std	Y+54, r24	; 0x36
		res = follow_path(&djo, path_old);		/* Check old object */
   12b28:	f8 01       	movw	r30, r16
   12b2a:	60 81       	ld	r22, Z
   12b2c:	71 81       	ldd	r23, Z+1	; 0x01
   12b2e:	c7 01       	movw	r24, r14
   12b30:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   12b34:	9c 01       	movw	r18, r24
		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
   12b36:	00 97       	sbiw	r24, 0x00	; 0
   12b38:	09 f0       	breq	.+2      	; 0x12b3c <f_rename+0x70>
   12b3a:	d2 c0       	rjmp	.+420    	; 0x12ce0 <f_rename+0x214>
   12b3c:	ee a9       	ldd	r30, Y+54	; 0x36
   12b3e:	ff a9       	ldd	r31, Y+55	; 0x37
   12b40:	83 85       	ldd	r24, Z+11	; 0x0b
   12b42:	85 ff       	sbrs	r24, 5
   12b44:	de c0       	rjmp	.+444    	; 0x12d02 <f_rename+0x236>
			res = FR_INVALID_NAME;
   12b46:	26 e0       	ldi	r18, 0x06	; 6
   12b48:	30 e0       	ldi	r19, 0x00	; 0
   12b4a:	ca c0       	rjmp	.+404    	; 0x12ce0 <f_rename+0x214>
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
   12b4c:	65 5f       	subi	r22, 0xF5	; 245
   12b4e:	7f 4f       	sbci	r23, 0xFF	; 255
   12b50:	ce 01       	movw	r24, r28
   12b52:	0d 96       	adiw	r24, 0x0d	; 13
   12b54:	45 e1       	ldi	r20, 0x15	; 21
   12b56:	50 e0       	ldi	r21, 0x00	; 0
   12b58:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
   12b5c:	8e 01       	movw	r16, r28
   12b5e:	08 5c       	subi	r16, 0xC8	; 200
   12b60:	1f 4f       	sbci	r17, 0xFF	; 255
   12b62:	c8 01       	movw	r24, r16
   12b64:	b7 01       	movw	r22, r14
   12b66:	46 e1       	ldi	r20, 0x16	; 22
   12b68:	50 e0       	ldi	r21, 0x00	; 0
   12b6a:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
				res = follow_path(&djn, path_new);
   12b6e:	c8 01       	movw	r24, r16
   12b70:	b6 01       	movw	r22, r12
   12b72:	0e 94 c9 83 	call	0x10792	; 0x10792 <_ZL11follow_pathP3DIRPKc>
   12b76:	9c 01       	movw	r18, r24
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
   12b78:	00 97       	sbiw	r24, 0x00	; 0
   12b7a:	09 f4       	brne	.+2      	; 0x12b7e <f_rename+0xb2>
   12b7c:	ac c0       	rjmp	.+344    	; 0x12cd6 <f_rename+0x20a>
				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
   12b7e:	84 30       	cpi	r24, 0x04	; 4
   12b80:	91 05       	cpc	r25, r1
   12b82:	09 f0       	breq	.+2      	; 0x12b86 <f_rename+0xba>
   12b84:	ad c0       	rjmp	.+346    	; 0x12ce0 <f_rename+0x214>
/* Start critical section that any interruption or error can cause cross-link */
					res = dir_register(&djn);			/* Register the new entry */
   12b86:	c8 01       	movw	r24, r16
   12b88:	0e 94 52 85 	call	0x10aa4	; 0x10aa4 <_ZL12dir_registerP3DIR>
   12b8c:	9c 01       	movw	r18, r24
					if (res == FR_OK) {
   12b8e:	00 97       	sbiw	r24, 0x00	; 0
   12b90:	09 f0       	breq	.+2      	; 0x12b94 <f_rename+0xc8>
   12b92:	a6 c0       	rjmp	.+332    	; 0x12ce0 <f_rename+0x214>
						dir = djn.dir;					/* Copy object information except for name */
   12b94:	fe 01       	movw	r30, r28
   12b96:	e6 5b       	subi	r30, 0xB6	; 182
   12b98:	ff 4f       	sbci	r31, 0xFF	; 255
   12b9a:	00 81       	ld	r16, Z
   12b9c:	11 81       	ldd	r17, Z+1	; 0x01
						mem_cpy(dir+13, buf+2, 19);
   12b9e:	c8 01       	movw	r24, r16
   12ba0:	0d 96       	adiw	r24, 0x0d	; 13
   12ba2:	be 01       	movw	r22, r28
   12ba4:	61 5f       	subi	r22, 0xF1	; 241
   12ba6:	7f 4f       	sbci	r23, 0xFF	; 255
   12ba8:	43 e1       	ldi	r20, 0x13	; 19
   12baa:	50 e0       	ldi	r21, 0x00	; 0
   12bac:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
						dir[DIR_Attr] = buf[0] | AM_ARC;
   12bb0:	8d 85       	ldd	r24, Y+13	; 0x0d
   12bb2:	80 62       	ori	r24, 0x20	; 32
   12bb4:	d8 01       	movw	r26, r16
   12bb6:	1b 96       	adiw	r26, 0x0b	; 11
   12bb8:	8c 93       	st	X, r24
						djo.fs->wflag = 1;
   12bba:	ea a1       	ldd	r30, Y+34	; 0x22
   12bbc:	fb a1       	ldd	r31, Y+35	; 0x23
   12bbe:	81 e0       	ldi	r24, 0x01	; 1
   12bc0:	84 83       	std	Z+4, r24	; 0x04
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
   12bc2:	28 a5       	ldd	r18, Y+40	; 0x28
   12bc4:	39 a5       	ldd	r19, Y+41	; 0x29
   12bc6:	4a a5       	ldd	r20, Y+42	; 0x2a
   12bc8:	5b a5       	ldd	r21, Y+43	; 0x2b
   12bca:	fe 01       	movw	r30, r28
   12bcc:	fe 96       	adiw	r30, 0x3e	; 62
   12bce:	80 81       	ld	r24, Z
   12bd0:	91 81       	ldd	r25, Z+1	; 0x01
   12bd2:	a2 81       	ldd	r26, Z+2	; 0x02
   12bd4:	b3 81       	ldd	r27, Z+3	; 0x03
   12bd6:	28 17       	cp	r18, r24
   12bd8:	39 07       	cpc	r19, r25
   12bda:	4a 07       	cpc	r20, r26
   12bdc:	5b 07       	cpc	r21, r27
   12bde:	09 f4       	brne	.+2      	; 0x12be2 <f_rename+0x116>
   12be0:	6d c0       	rjmp	.+218    	; 0x12cbc <f_rename+0x1f0>
   12be2:	f8 01       	movw	r30, r16
   12be4:	83 85       	ldd	r24, Z+11	; 0x0b
   12be6:	84 ff       	sbrs	r24, 4
   12be8:	69 c0       	rjmp	.+210    	; 0x12cbc <f_rename+0x1f0>
							dw = clust2sect(djn.fs, LD_CLUST(dir));
   12bea:	e8 ac       	ldd	r14, Y+56	; 0x38
   12bec:	f9 ac       	ldd	r15, Y+57	; 0x39
   12bee:	95 89       	ldd	r25, Z+21	; 0x15
   12bf0:	80 e0       	ldi	r24, 0x00	; 0
   12bf2:	44 89       	ldd	r20, Z+20	; 0x14
   12bf4:	50 e0       	ldi	r21, 0x00	; 0
   12bf6:	48 2b       	or	r20, r24
   12bf8:	59 2b       	or	r21, r25
   12bfa:	60 e0       	ldi	r22, 0x00	; 0
   12bfc:	70 e0       	ldi	r23, 0x00	; 0
   12bfe:	ba 01       	movw	r22, r20
   12c00:	55 27       	eor	r21, r21
   12c02:	44 27       	eor	r20, r20
   12c04:	33 8d       	ldd	r19, Z+27	; 0x1b
   12c06:	20 e0       	ldi	r18, 0x00	; 0
   12c08:	82 8d       	ldd	r24, Z+26	; 0x1a
   12c0a:	90 e0       	ldi	r25, 0x00	; 0
   12c0c:	82 2b       	or	r24, r18
   12c0e:	93 2b       	or	r25, r19
   12c10:	a0 e0       	ldi	r26, 0x00	; 0
   12c12:	b0 e0       	ldi	r27, 0x00	; 0
   12c14:	48 2b       	or	r20, r24
   12c16:	59 2b       	or	r21, r25
   12c18:	6a 2b       	or	r22, r26
   12c1a:	7b 2b       	or	r23, r27
   12c1c:	c7 01       	movw	r24, r14
   12c1e:	0e 94 bf 7e 	call	0xfd7e	; 0xfd7e <_Z10clust2sectP5FATFSm>
   12c22:	ab 01       	movw	r20, r22
   12c24:	bc 01       	movw	r22, r24
							if (!dw) {
   12c26:	41 15       	cp	r20, r1
   12c28:	51 05       	cpc	r21, r1
   12c2a:	61 05       	cpc	r22, r1
   12c2c:	71 05       	cpc	r23, r1
   12c2e:	09 f4       	brne	.+2      	; 0x12c32 <f_rename+0x166>
   12c30:	6f c0       	rjmp	.+222    	; 0x12d10 <f_rename+0x244>
								res = FR_INT_ERR;
							} else {
								res = move_window(djn.fs, dw);
   12c32:	c7 01       	movw	r24, r14
   12c34:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <_ZL11move_windowP5FATFSm>
   12c38:	9c 01       	movw	r18, r24
								dir = djn.fs->win+32;	/* .. entry */
   12c3a:	e8 ad       	ldd	r30, Y+56	; 0x38
   12c3c:	f9 ad       	ldd	r31, Y+57	; 0x39
								if (res == FR_OK && dir[1] == '.') {
   12c3e:	00 97       	sbiw	r24, 0x00	; 0
   12c40:	09 f0       	breq	.+2      	; 0x12c44 <f_rename+0x178>
   12c42:	4e c0       	rjmp	.+156    	; 0x12ce0 <f_rename+0x214>
   12c44:	df 01       	movw	r26, r30
   12c46:	ad 5a       	subi	r26, 0xAD	; 173
   12c48:	bf 4f       	sbci	r27, 0xFF	; 255
   12c4a:	8c 91       	ld	r24, X
   12c4c:	8e 32       	cpi	r24, 0x2E	; 46
   12c4e:	b1 f5       	brne	.+108    	; 0x12cbc <f_rename+0x1f0>
									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
   12c50:	80 81       	ld	r24, Z
   12c52:	83 30       	cpi	r24, 0x03	; 3
   12c54:	79 f4       	brne	.+30     	; 0x12c74 <f_rename+0x1a8>
   12c56:	de 01       	movw	r26, r28
   12c58:	de 96       	adiw	r26, 0x3e	; 62
   12c5a:	2d 91       	ld	r18, X+
   12c5c:	3d 91       	ld	r19, X+
   12c5e:	4d 91       	ld	r20, X+
   12c60:	5c 91       	ld	r21, X
   12c62:	86 a1       	ldd	r24, Z+38	; 0x26
   12c64:	97 a1       	ldd	r25, Z+39	; 0x27
   12c66:	a0 a5       	ldd	r26, Z+40	; 0x28
   12c68:	b1 a5       	ldd	r27, Z+41	; 0x29
   12c6a:	28 17       	cp	r18, r24
   12c6c:	39 07       	cpc	r19, r25
   12c6e:	4a 07       	cpc	r20, r26
   12c70:	5b 07       	cpc	r21, r27
   12c72:	41 f0       	breq	.+16     	; 0x12c84 <f_rename+0x1b8>
   12c74:	de 01       	movw	r26, r28
   12c76:	de 96       	adiw	r26, 0x3e	; 62
   12c78:	4d 91       	ld	r20, X+
   12c7a:	5d 91       	ld	r21, X+
   12c7c:	6d 91       	ld	r22, X+
   12c7e:	7c 91       	ld	r23, X
   12c80:	13 97       	sbiw	r26, 0x03	; 3
   12c82:	03 c0       	rjmp	.+6      	; 0x12c8a <f_rename+0x1be>
   12c84:	40 e0       	ldi	r20, 0x00	; 0
   12c86:	50 e0       	ldi	r21, 0x00	; 0
   12c88:	ba 01       	movw	r22, r20
									ST_CLUST(dir, dw);
   12c8a:	9f 01       	movw	r18, r30
   12c8c:	24 59       	subi	r18, 0x94	; 148
   12c8e:	3f 4f       	sbci	r19, 0xFF	; 255
   12c90:	d9 01       	movw	r26, r18
   12c92:	4c 93       	st	X, r20
   12c94:	9f 01       	movw	r18, r30
   12c96:	23 59       	subi	r18, 0x93	; 147
   12c98:	3f 4f       	sbci	r19, 0xFF	; 255
   12c9a:	d9 01       	movw	r26, r18
   12c9c:	5c 93       	st	X, r21
   12c9e:	ab 01       	movw	r20, r22
   12ca0:	66 27       	eor	r22, r22
   12ca2:	77 27       	eor	r23, r23
   12ca4:	9f 01       	movw	r18, r30
   12ca6:	2a 59       	subi	r18, 0x9A	; 154
   12ca8:	3f 4f       	sbci	r19, 0xFF	; 255
   12caa:	d9 01       	movw	r26, r18
   12cac:	4c 93       	st	X, r20
   12cae:	9f 01       	movw	r18, r30
   12cb0:	29 59       	subi	r18, 0x99	; 153
   12cb2:	3f 4f       	sbci	r19, 0xFF	; 255
   12cb4:	d9 01       	movw	r26, r18
   12cb6:	5c 93       	st	X, r21
									djn.fs->wflag = 1;
   12cb8:	81 e0       	ldi	r24, 0x01	; 1
   12cba:	84 83       	std	Z+4, r24	; 0x04
								}
							}
						}
						if (res == FR_OK) {
							res = dir_remove(&djo);		/* Remove old entry */
   12cbc:	ce 01       	movw	r24, r28
   12cbe:	82 96       	adiw	r24, 0x22	; 34
   12cc0:	0e 94 98 80 	call	0x10130	; 0x10130 <_ZL10dir_removeP3DIR>
   12cc4:	9c 01       	movw	r18, r24
							if (res == FR_OK)
   12cc6:	00 97       	sbiw	r24, 0x00	; 0
   12cc8:	59 f4       	brne	.+22     	; 0x12ce0 <f_rename+0x214>
								res = sync(djo.fs);
   12cca:	8a a1       	ldd	r24, Y+34	; 0x22
   12ccc:	9b a1       	ldd	r25, Y+35	; 0x23
   12cce:	0e 94 35 7e 	call	0xfc6a	; 0xfc6a <_ZL4syncP5FATFS>
   12cd2:	9c 01       	movw	r18, r24
   12cd4:	05 c0       	rjmp	.+10     	; 0x12ce0 <f_rename+0x214>
				res = FR_NO_FILE;
			} else {
				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
				res = follow_path(&djn, path_new);
				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
   12cd6:	28 e0       	ldi	r18, 0x08	; 8
   12cd8:	30 e0       	ldi	r19, 0x00	; 0
   12cda:	02 c0       	rjmp	.+4      	; 0x12ce0 <f_rename+0x214>
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
				res = FR_NO_FILE;
   12cdc:	24 e0       	ldi	r18, 0x04	; 4
   12cde:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(djo.fs, res);
}
   12ce0:	c9 01       	movw	r24, r18
   12ce2:	c1 5b       	subi	r28, 0xB1	; 177
   12ce4:	df 4f       	sbci	r29, 0xFF	; 255
   12ce6:	0f b6       	in	r0, 0x3f	; 63
   12ce8:	f8 94       	cli
   12cea:	de bf       	out	0x3e, r29	; 62
   12cec:	0f be       	out	0x3f, r0	; 63
   12cee:	cd bf       	out	0x3d, r28	; 61
   12cf0:	cf 91       	pop	r28
   12cf2:	df 91       	pop	r29
   12cf4:	1f 91       	pop	r17
   12cf6:	0f 91       	pop	r16
   12cf8:	ff 90       	pop	r15
   12cfa:	ef 90       	pop	r14
   12cfc:	df 90       	pop	r13
   12cfe:	cf 90       	pop	r12
   12d00:	08 95       	ret
			res = FR_INVALID_NAME;
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&djo, 2);
#endif
		if (res == FR_OK) {						/* Old object is found */
			if (!djo.dir) {						/* Is root dir? */
   12d02:	6c a9       	ldd	r22, Y+52	; 0x34
   12d04:	7d a9       	ldd	r23, Y+53	; 0x35
   12d06:	61 15       	cp	r22, r1
   12d08:	71 05       	cpc	r23, r1
   12d0a:	09 f0       	breq	.+2      	; 0x12d0e <f_rename+0x242>
   12d0c:	1f cf       	rjmp	.-450    	; 0x12b4c <f_rename+0x80>
   12d0e:	e6 cf       	rjmp	.-52     	; 0x12cdc <f_rename+0x210>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						djo.fs->wflag = 1;
						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the directory if needed */
							dw = clust2sect(djn.fs, LD_CLUST(dir));
							if (!dw) {
								res = FR_INT_ERR;
   12d10:	22 e0       	ldi	r18, 0x02	; 2
   12d12:	30 e0       	ldi	r19, 0x00	; 0
   12d14:	e5 cf       	rjmp	.-54     	; 0x12ce0 <f_rename+0x214>

00012d16 <f_mkfs>:
FRESULT f_mkfs (
	BYTE drv,		/* Logical drive number */
	BYTE sfd,		/* Partitioning rule 0:FDISK, 1:SFD */
	UINT au			/* Allocation unit size [bytes] */
)
{
   12d16:	2f 92       	push	r2
   12d18:	3f 92       	push	r3
   12d1a:	4f 92       	push	r4
   12d1c:	5f 92       	push	r5
   12d1e:	6f 92       	push	r6
   12d20:	7f 92       	push	r7
   12d22:	8f 92       	push	r8
   12d24:	9f 92       	push	r9
   12d26:	af 92       	push	r10
   12d28:	bf 92       	push	r11
   12d2a:	cf 92       	push	r12
   12d2c:	df 92       	push	r13
   12d2e:	ef 92       	push	r14
   12d30:	ff 92       	push	r15
   12d32:	0f 93       	push	r16
   12d34:	1f 93       	push	r17
   12d36:	df 93       	push	r29
   12d38:	cf 93       	push	r28
   12d3a:	cd b7       	in	r28, 0x3d	; 61
   12d3c:	de b7       	in	r29, 0x3e	; 62
   12d3e:	a3 97       	sbiw	r28, 0x23	; 35
   12d40:	0f b6       	in	r0, 0x3f	; 63
   12d42:	f8 94       	cli
   12d44:	de bf       	out	0x3e, r29	; 62
   12d46:	0f be       	out	0x3f, r0	; 63
   12d48:	cd bf       	out	0x3d, r28	; 61
   12d4a:	06 2f       	mov	r16, r22
   12d4c:	6a 01       	movw	r12, r20
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   12d4e:	88 23       	and	r24, r24
   12d50:	09 f0       	breq	.+2      	; 0x12d54 <f_mkfs+0x3e>
   12d52:	d5 c4       	rjmp	.+2474   	; 0x136fe <f_mkfs+0x9e8>
	fs = FatFs[drv];
   12d54:	a0 90 3b 1f 	lds	r10, 0x1F3B
   12d58:	b0 90 3c 1f 	lds	r11, 0x1F3C
	if (!fs) return FR_NOT_ENABLED;
   12d5c:	a1 14       	cp	r10, r1
   12d5e:	b1 04       	cpc	r11, r1
   12d60:	09 f4       	brne	.+2      	; 0x12d64 <f_mkfs+0x4e>
   12d62:	d0 c4       	rjmp	.+2464   	; 0x13704 <f_mkfs+0x9ee>
	fs->fs_type = 0;
   12d64:	d5 01       	movw	r26, r10
   12d66:	1c 92       	st	X, r1
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
   12d68:	0e 94 22 9f 	call	0x13e44	; 0x13e44 <_Z15disk_initializeh>
	if (stat & STA_NOINIT) return FR_NOT_READY;
   12d6c:	80 fd       	sbrc	r24, 0
   12d6e:	cd c4       	rjmp	.+2458   	; 0x1370a <f_mkfs+0x9f4>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   12d70:	82 fd       	sbrc	r24, 2
   12d72:	ce c4       	rjmp	.+2460   	; 0x13710 <f_mkfs+0x9fa>
#if _MAX_SS != 512					/* Get disk sector size */
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, (BYTE*)&n_vol) != RES_OK || n_vol < 128)
   12d74:	80 e0       	ldi	r24, 0x00	; 0
   12d76:	61 e0       	ldi	r22, 0x01	; 1
   12d78:	ae 01       	movw	r20, r28
   12d7a:	4b 5f       	subi	r20, 0xFB	; 251
   12d7c:	5f 4f       	sbci	r21, 0xFF	; 255
   12d7e:	0e 94 bd a0 	call	0x1417a	; 0x1417a <_Z10disk_ioctlhhPh>
   12d82:	00 97       	sbiw	r24, 0x00	; 0
   12d84:	09 f0       	breq	.+2      	; 0x12d88 <f_mkfs+0x72>
   12d86:	ca c4       	rjmp	.+2452   	; 0x1371c <f_mkfs+0xa06>
   12d88:	4d 80       	ldd	r4, Y+5	; 0x05
   12d8a:	5e 80       	ldd	r5, Y+6	; 0x06
   12d8c:	6f 80       	ldd	r6, Y+7	; 0x07
   12d8e:	78 84       	ldd	r7, Y+8	; 0x08
   12d90:	b0 e8       	ldi	r27, 0x80	; 128
   12d92:	4b 16       	cp	r4, r27
   12d94:	51 04       	cpc	r5, r1
   12d96:	61 04       	cpc	r6, r1
   12d98:	71 04       	cpc	r7, r1
   12d9a:	08 f4       	brcc	.+2      	; 0x12d9e <f_mkfs+0x88>
   12d9c:	bf c4       	rjmp	.+2430   	; 0x1371c <f_mkfs+0xa06>
   12d9e:	da c4       	rjmp	.+2484   	; 0x13754 <f_mkfs+0xa3e>
		return FR_DISK_ERR;
	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
   12da0:	1a 8a       	std	Y+18, r1	; 0x12
   12da2:	1b 8a       	std	Y+19, r1	; 0x13
   12da4:	1c 8a       	std	Y+20, r1	; 0x14
   12da6:	1d 8a       	std	Y+21, r1	; 0x15
	n_vol -= b_vol;
   12da8:	2a 89       	ldd	r18, Y+18	; 0x12
   12daa:	3b 89       	ldd	r19, Y+19	; 0x13
   12dac:	4c 89       	ldd	r20, Y+20	; 0x14
   12dae:	5d 89       	ldd	r21, Y+21	; 0x15
   12db0:	42 1a       	sub	r4, r18
   12db2:	53 0a       	sbc	r5, r19
   12db4:	64 0a       	sbc	r6, r20
   12db6:	75 0a       	sbc	r7, r21
   12db8:	4d 82       	std	Y+5, r4	; 0x05
   12dba:	5e 82       	std	Y+6, r5	; 0x06
   12dbc:	6f 82       	std	Y+7, r6	; 0x07
   12dbe:	78 86       	std	Y+8, r7	; 0x08
	if (au & (au - 1)) au = 0;		/* Check validity of the allocation unit size */
   12dc0:	c6 01       	movw	r24, r12
   12dc2:	01 97       	sbiw	r24, 0x01	; 1
   12dc4:	8c 21       	and	r24, r12
   12dc6:	9d 21       	and	r25, r13
   12dc8:	00 97       	sbiw	r24, 0x00	; 0
   12dca:	19 f4       	brne	.+6      	; 0x12dd2 <f_mkfs+0xbc>
	if (!au) {						/* AU auto selection */
   12dcc:	c1 14       	cp	r12, r1
   12dce:	d1 04       	cpc	r13, r1
   12dd0:	09 f5       	brne	.+66     	; 0x12e14 <f_mkfs+0xfe>
		vs = n_vol / (2000 / (SS(fs) / 512));
   12dd2:	c3 01       	movw	r24, r6
   12dd4:	b2 01       	movw	r22, r4
   12dd6:	20 ed       	ldi	r18, 0xD0	; 208
   12dd8:	37 e0       	ldi	r19, 0x07	; 7
   12dda:	40 e0       	ldi	r20, 0x00	; 0
   12ddc:	50 e0       	ldi	r21, 0x00	; 0
   12dde:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
   12de2:	69 01       	movw	r12, r18
   12de4:	7a 01       	movw	r14, r20
   12de6:	ec e6       	ldi	r30, 0x6C	; 108
   12de8:	f1 e1       	ldi	r31, 0x11	; 17
		for (i = 0; vs < vst[i]; i++) ;
   12dea:	20 e0       	ldi	r18, 0x00	; 0
   12dec:	30 e0       	ldi	r19, 0x00	; 0
   12dee:	02 c0       	rjmp	.+4      	; 0x12df4 <f_mkfs+0xde>
   12df0:	2f 5f       	subi	r18, 0xFF	; 255
   12df2:	3f 4f       	sbci	r19, 0xFF	; 255
   12df4:	81 91       	ld	r24, Z+
   12df6:	91 91       	ld	r25, Z+
   12df8:	a0 e0       	ldi	r26, 0x00	; 0
   12dfa:	b0 e0       	ldi	r27, 0x00	; 0
   12dfc:	c8 16       	cp	r12, r24
   12dfe:	d9 06       	cpc	r13, r25
   12e00:	ea 06       	cpc	r14, r26
   12e02:	fb 06       	cpc	r15, r27
   12e04:	a8 f3       	brcs	.-22     	; 0x12df0 <f_mkfs+0xda>
		au = cst[i];
   12e06:	f9 01       	movw	r30, r18
   12e08:	ee 0f       	add	r30, r30
   12e0a:	ff 1f       	adc	r31, r31
   12e0c:	ea 5a       	subi	r30, 0xAA	; 170
   12e0e:	fe 4e       	sbci	r31, 0xEE	; 238
   12e10:	c0 80       	ld	r12, Z
   12e12:	d1 80       	ldd	r13, Z+1	; 0x01
	}
	au /= SS(fs);		/* Number of sectors per cluster */
   12e14:	a6 01       	movw	r20, r12
   12e16:	45 2f       	mov	r20, r21
   12e18:	55 27       	eor	r21, r21
   12e1a:	46 95       	lsr	r20
   12e1c:	5b 8f       	std	Y+27, r21	; 0x1b
   12e1e:	4a 8f       	std	Y+26, r20	; 0x1a
	if (au == 0) au = 1;
   12e20:	41 15       	cp	r20, r1
   12e22:	51 05       	cpc	r21, r1
   12e24:	21 f4       	brne	.+8      	; 0x12e2e <f_mkfs+0x118>
   12e26:	81 e0       	ldi	r24, 0x01	; 1
   12e28:	90 e0       	ldi	r25, 0x00	; 0
   12e2a:	9b 8f       	std	Y+27, r25	; 0x1b
   12e2c:	8a 8f       	std	Y+26, r24	; 0x1a
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
   12e2e:	4a 8d       	ldd	r20, Y+26	; 0x1a
   12e30:	5b 8d       	ldd	r21, Y+27	; 0x1b
   12e32:	9a 01       	movw	r18, r20
   12e34:	40 e0       	ldi	r20, 0x00	; 0
   12e36:	50 e0       	ldi	r21, 0x00	; 0
   12e38:	2e 8b       	std	Y+22, r18	; 0x16
   12e3a:	3f 8b       	std	Y+23, r19	; 0x17
   12e3c:	48 8f       	std	Y+24, r20	; 0x18
   12e3e:	59 8f       	std	Y+25, r21	; 0x19
   12e40:	c3 01       	movw	r24, r6
   12e42:	b2 01       	movw	r22, r4
   12e44:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
   12e48:	26 3f       	cpi	r18, 0xF6	; 246
   12e4a:	8f e0       	ldi	r24, 0x0F	; 15
   12e4c:	38 07       	cpc	r19, r24
   12e4e:	80 e0       	ldi	r24, 0x00	; 0
   12e50:	48 07       	cpc	r20, r24
   12e52:	80 e0       	ldi	r24, 0x00	; 0
   12e54:	58 07       	cpc	r21, r24
   12e56:	50 f0       	brcs	.+20     	; 0x12e6c <f_mkfs+0x156>
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
   12e58:	26 3f       	cpi	r18, 0xF6	; 246
   12e5a:	9f ef       	ldi	r25, 0xFF	; 255
   12e5c:	39 07       	cpc	r19, r25
   12e5e:	90 e0       	ldi	r25, 0x00	; 0
   12e60:	49 07       	cpc	r20, r25
   12e62:	90 e0       	ldi	r25, 0x00	; 0
   12e64:	59 07       	cpc	r21, r25
   12e66:	08 f0       	brcs	.+2      	; 0x12e6a <f_mkfs+0x154>
   12e68:	81 c4       	rjmp	.+2306   	; 0x1376c <f_mkfs+0xa56>
   12e6a:	a7 c4       	rjmp	.+2382   	; 0x137ba <f_mkfs+0xaa4>
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
   12e6c:	da 01       	movw	r26, r20
   12e6e:	c9 01       	movw	r24, r18
   12e70:	88 0f       	add	r24, r24
   12e72:	99 1f       	adc	r25, r25
   12e74:	aa 1f       	adc	r26, r26
   12e76:	bb 1f       	adc	r27, r27
   12e78:	82 0f       	add	r24, r18
   12e7a:	93 1f       	adc	r25, r19
   12e7c:	a4 1f       	adc	r26, r20
   12e7e:	b5 1f       	adc	r27, r21
   12e80:	01 96       	adiw	r24, 0x01	; 1
   12e82:	a1 1d       	adc	r26, r1
   12e84:	b1 1d       	adc	r27, r1
   12e86:	b6 95       	lsr	r27
   12e88:	a7 95       	ror	r26
   12e8a:	97 95       	ror	r25
   12e8c:	87 95       	ror	r24
   12e8e:	03 96       	adiw	r24, 0x03	; 3
   12e90:	a1 1d       	adc	r26, r1
   12e92:	b1 1d       	adc	r27, r1
	if (au == 0) au = 1;
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
   12e94:	e1 e0       	ldi	r30, 0x01	; 1
   12e96:	e9 87       	std	Y+9, r30	; 0x09
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
   12e98:	4f ef       	ldi	r20, 0xFF	; 255
   12e9a:	c4 2e       	mov	r12, r20
   12e9c:	41 e0       	ldi	r20, 0x01	; 1
   12e9e:	d4 2e       	mov	r13, r20
   12ea0:	e1 2c       	mov	r14, r1
   12ea2:	f1 2c       	mov	r15, r1
   12ea4:	c8 0e       	add	r12, r24
   12ea6:	d9 1e       	adc	r13, r25
   12ea8:	ea 1e       	adc	r14, r26
   12eaa:	fb 1e       	adc	r15, r27
   12eac:	39 e0       	ldi	r19, 0x09	; 9
   12eae:	f6 94       	lsr	r15
   12eb0:	e7 94       	ror	r14
   12eb2:	d7 94       	ror	r13
   12eb4:	c7 94       	ror	r12
   12eb6:	3a 95       	dec	r19
   12eb8:	d1 f7       	brne	.-12     	; 0x12eae <f_mkfs+0x198>
		n_rsv = 1;
		n_dir = N_ROOTDIR * 32UL / SS(fs);
   12eba:	20 e2       	ldi	r18, 0x20	; 32
   12ebc:	30 e0       	ldi	r19, 0x00	; 0
   12ebe:	40 e0       	ldi	r20, 0x00	; 0
   12ec0:	50 e0       	ldi	r21, 0x00	; 0
   12ec2:	28 a3       	std	Y+32, r18	; 0x20
   12ec4:	39 a3       	std	Y+33, r19	; 0x21
   12ec6:	4a a3       	std	Y+34, r20	; 0x22
   12ec8:	5b a3       	std	Y+35, r21	; 0x23
		n_rsv = 32;
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
		n_rsv = 1;
   12eca:	81 e0       	ldi	r24, 0x01	; 1
   12ecc:	90 e0       	ldi	r25, 0x00	; 0
   12ece:	a0 e0       	ldi	r26, 0x00	; 0
   12ed0:	b0 e0       	ldi	r27, 0x00	; 0
   12ed2:	8e 87       	std	Y+14, r24	; 0x0e
   12ed4:	9f 87       	std	Y+15, r25	; 0x0f
   12ed6:	a8 8b       	std	Y+16, r26	; 0x10
   12ed8:	b9 8b       	std	Y+17, r27	; 0x11
		n_dir = N_ROOTDIR * 32UL / SS(fs);
	}
	b_fat = b_vol + n_rsv;				/* FAT area start sector */
   12eda:	2e 85       	ldd	r18, Y+14	; 0x0e
   12edc:	3f 85       	ldd	r19, Y+15	; 0x0f
   12ede:	48 89       	ldd	r20, Y+16	; 0x10
   12ee0:	59 89       	ldd	r21, Y+17	; 0x11
   12ee2:	8a 89       	ldd	r24, Y+18	; 0x12
   12ee4:	9b 89       	ldd	r25, Y+19	; 0x13
   12ee6:	ac 89       	ldd	r26, Y+20	; 0x14
   12ee8:	bd 89       	ldd	r27, Y+21	; 0x15
   12eea:	28 0f       	add	r18, r24
   12eec:	39 1f       	adc	r19, r25
   12eee:	4a 1f       	adc	r20, r26
   12ef0:	5b 1f       	adc	r21, r27
   12ef2:	2c 8f       	std	Y+28, r18	; 0x1c
   12ef4:	3d 8f       	std	Y+29, r19	; 0x1d
   12ef6:	4e 8f       	std	Y+30, r20	; 0x1e
   12ef8:	5f 8f       	std	Y+31, r21	; 0x1f
	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
   12efa:	28 a1       	ldd	r18, Y+32	; 0x20
   12efc:	39 a1       	ldd	r19, Y+33	; 0x21
   12efe:	4a a1       	ldd	r20, Y+34	; 0x22
   12f00:	5b a1       	ldd	r21, Y+35	; 0x23
   12f02:	2c 0d       	add	r18, r12
   12f04:	3d 1d       	adc	r19, r13
   12f06:	4e 1d       	adc	r20, r14
   12f08:	5f 1d       	adc	r21, r15
	b_data = b_dir + n_dir;				/* Data area start sector */
   12f0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   12f0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   12f0e:	ae 8d       	ldd	r26, Y+30	; 0x1e
   12f10:	bf 8d       	ldd	r27, Y+31	; 0x1f
   12f12:	28 0f       	add	r18, r24
   12f14:	39 1f       	adc	r19, r25
   12f16:	4a 1f       	adc	r20, r26
   12f18:	5b 1f       	adc	r21, r27
   12f1a:	2a 87       	std	Y+10, r18	; 0x0a
   12f1c:	3b 87       	std	Y+11, r19	; 0x0b
   12f1e:	4c 87       	std	Y+12, r20	; 0x0c
   12f20:	5d 87       	std	Y+13, r21	; 0x0d
	if (n_vol < b_data + au) return FR_MKFS_ABORTED;	/* Too small volume */
   12f22:	da 01       	movw	r26, r20
   12f24:	c9 01       	movw	r24, r18
   12f26:	2e 89       	ldd	r18, Y+22	; 0x16
   12f28:	3f 89       	ldd	r19, Y+23	; 0x17
   12f2a:	48 8d       	ldd	r20, Y+24	; 0x18
   12f2c:	59 8d       	ldd	r21, Y+25	; 0x19
   12f2e:	82 0f       	add	r24, r18
   12f30:	93 1f       	adc	r25, r19
   12f32:	a4 1f       	adc	r26, r20
   12f34:	b5 1f       	adc	r27, r21
   12f36:	48 16       	cp	r4, r24
   12f38:	59 06       	cpc	r5, r25
   12f3a:	6a 06       	cpc	r6, r26
   12f3c:	7b 06       	cpc	r7, r27
   12f3e:	08 f4       	brcc	.+2      	; 0x12f42 <f_mkfs+0x22c>
   12f40:	ea c3       	rjmp	.+2004   	; 0x13716 <f_mkfs+0xa00>

	/* Align data start sector to erase block boundary (for flash memory media) */
	if (disk_ioctl(drv, GET_BLOCK_SIZE, (BYTE*)&n) != RES_OK || !n || n > 32768) n = 1;
   12f42:	80 e0       	ldi	r24, 0x00	; 0
   12f44:	63 e0       	ldi	r22, 0x03	; 3
   12f46:	ae 01       	movw	r20, r28
   12f48:	4f 5f       	subi	r20, 0xFF	; 255
   12f4a:	5f 4f       	sbci	r21, 0xFF	; 255
   12f4c:	0e 94 bd a0 	call	0x1417a	; 0x1417a <_Z10disk_ioctlhhPh>
   12f50:	00 97       	sbiw	r24, 0x00	; 0
   12f52:	81 f4       	brne	.+32     	; 0x12f74 <f_mkfs+0x25e>
   12f54:	89 81       	ldd	r24, Y+1	; 0x01
   12f56:	9a 81       	ldd	r25, Y+2	; 0x02
   12f58:	ab 81       	ldd	r26, Y+3	; 0x03
   12f5a:	bc 81       	ldd	r27, Y+4	; 0x04
   12f5c:	00 97       	sbiw	r24, 0x00	; 0
   12f5e:	a1 05       	cpc	r26, r1
   12f60:	b1 05       	cpc	r27, r1
   12f62:	41 f0       	breq	.+16     	; 0x12f74 <f_mkfs+0x25e>
   12f64:	81 30       	cpi	r24, 0x01	; 1
   12f66:	30 e8       	ldi	r19, 0x80	; 128
   12f68:	93 07       	cpc	r25, r19
   12f6a:	30 e0       	ldi	r19, 0x00	; 0
   12f6c:	a3 07       	cpc	r26, r19
   12f6e:	30 e0       	ldi	r19, 0x00	; 0
   12f70:	b3 07       	cpc	r27, r19
   12f72:	40 f0       	brcs	.+16     	; 0x12f84 <f_mkfs+0x26e>
   12f74:	81 e0       	ldi	r24, 0x01	; 1
   12f76:	90 e0       	ldi	r25, 0x00	; 0
   12f78:	a0 e0       	ldi	r26, 0x00	; 0
   12f7a:	b0 e0       	ldi	r27, 0x00	; 0
   12f7c:	89 83       	std	Y+1, r24	; 0x01
   12f7e:	9a 83       	std	Y+2, r25	; 0x02
   12f80:	ab 83       	std	Y+3, r26	; 0x03
   12f82:	bc 83       	std	Y+4, r27	; 0x04
	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
   12f84:	29 81       	ldd	r18, Y+1	; 0x01
   12f86:	3a 81       	ldd	r19, Y+2	; 0x02
   12f88:	4b 81       	ldd	r20, Y+3	; 0x03
   12f8a:	5c 81       	ldd	r21, Y+4	; 0x04
   12f8c:	da 01       	movw	r26, r20
   12f8e:	c9 01       	movw	r24, r18
   12f90:	01 97       	sbiw	r24, 0x01	; 1
   12f92:	a1 09       	sbc	r26, r1
   12f94:	b1 09       	sbc	r27, r1
   12f96:	6a 84       	ldd	r6, Y+10	; 0x0a
   12f98:	7b 84       	ldd	r7, Y+11	; 0x0b
   12f9a:	8c 84       	ldd	r8, Y+12	; 0x0c
   12f9c:	9d 84       	ldd	r9, Y+13	; 0x0d
   12f9e:	86 0d       	add	r24, r6
   12fa0:	97 1d       	adc	r25, r7
   12fa2:	a8 1d       	adc	r26, r8
   12fa4:	b9 1d       	adc	r27, r9
   12fa6:	50 95       	com	r21
   12fa8:	40 95       	com	r20
   12faa:	30 95       	com	r19
   12fac:	21 95       	neg	r18
   12fae:	3f 4f       	sbci	r19, 0xFF	; 255
   12fb0:	4f 4f       	sbci	r20, 0xFF	; 255
   12fb2:	5f 4f       	sbci	r21, 0xFF	; 255
   12fb4:	82 23       	and	r24, r18
   12fb6:	93 23       	and	r25, r19
   12fb8:	a4 23       	and	r26, r20
   12fba:	b5 23       	and	r27, r21
	n = (n - b_data) / N_FATS;
   12fbc:	86 19       	sub	r24, r6
   12fbe:	97 09       	sbc	r25, r7
   12fc0:	a8 09       	sbc	r26, r8
   12fc2:	b9 09       	sbc	r27, r9
   12fc4:	89 83       	std	Y+1, r24	; 0x01
   12fc6:	9a 83       	std	Y+2, r25	; 0x02
   12fc8:	ab 83       	std	Y+3, r26	; 0x03
   12fca:	bc 83       	std	Y+4, r27	; 0x04
	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
   12fcc:	19 85       	ldd	r17, Y+9	; 0x09
   12fce:	13 30       	cpi	r17, 0x03	; 3
   12fd0:	c9 f4       	brne	.+50     	; 0x13004 <f_mkfs+0x2ee>
		n_rsv += n;
   12fd2:	2e 85       	ldd	r18, Y+14	; 0x0e
   12fd4:	3f 85       	ldd	r19, Y+15	; 0x0f
   12fd6:	48 89       	ldd	r20, Y+16	; 0x10
   12fd8:	59 89       	ldd	r21, Y+17	; 0x11
   12fda:	28 0f       	add	r18, r24
   12fdc:	39 1f       	adc	r19, r25
   12fde:	4a 1f       	adc	r20, r26
   12fe0:	5b 1f       	adc	r21, r27
   12fe2:	2e 87       	std	Y+14, r18	; 0x0e
   12fe4:	3f 87       	std	Y+15, r19	; 0x0f
   12fe6:	48 8b       	std	Y+16, r20	; 0x10
   12fe8:	59 8b       	std	Y+17, r21	; 0x11
		b_fat += n;
   12fea:	6c 8c       	ldd	r6, Y+28	; 0x1c
   12fec:	7d 8c       	ldd	r7, Y+29	; 0x1d
   12fee:	8e 8c       	ldd	r8, Y+30	; 0x1e
   12ff0:	9f 8c       	ldd	r9, Y+31	; 0x1f
   12ff2:	68 0e       	add	r6, r24
   12ff4:	79 1e       	adc	r7, r25
   12ff6:	8a 1e       	adc	r8, r26
   12ff8:	9b 1e       	adc	r9, r27
   12ffa:	6c 8e       	std	Y+28, r6	; 0x1c
   12ffc:	7d 8e       	std	Y+29, r7	; 0x1d
   12ffe:	8e 8e       	std	Y+30, r8	; 0x1e
   13000:	9f 8e       	std	Y+31, r9	; 0x1f
   13002:	04 c0       	rjmp	.+8      	; 0x1300c <f_mkfs+0x2f6>
	} else {					/* FAT12/16: Expand FAT size */
		n_fat += n;
   13004:	c8 0e       	add	r12, r24
   13006:	d9 1e       	adc	r13, r25
   13008:	ea 1e       	adc	r14, r26
   1300a:	fb 1e       	adc	r15, r27
	}

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
   1300c:	4d 80       	ldd	r4, Y+5	; 0x05
   1300e:	5e 80       	ldd	r5, Y+6	; 0x06
   13010:	6f 80       	ldd	r6, Y+7	; 0x07
   13012:	78 84       	ldd	r7, Y+8	; 0x08
   13014:	c3 01       	movw	r24, r6
   13016:	b2 01       	movw	r22, r4
   13018:	2e 85       	ldd	r18, Y+14	; 0x0e
   1301a:	3f 85       	ldd	r19, Y+15	; 0x0f
   1301c:	48 89       	ldd	r20, Y+16	; 0x10
   1301e:	59 89       	ldd	r21, Y+17	; 0x11
   13020:	62 1b       	sub	r22, r18
   13022:	73 0b       	sbc	r23, r19
   13024:	84 0b       	sbc	r24, r20
   13026:	95 0b       	sbc	r25, r21
   13028:	6c 19       	sub	r22, r12
   1302a:	7d 09       	sbc	r23, r13
   1302c:	8e 09       	sbc	r24, r14
   1302e:	9f 09       	sbc	r25, r15
   13030:	28 a1       	ldd	r18, Y+32	; 0x20
   13032:	39 a1       	ldd	r19, Y+33	; 0x21
   13034:	4a a1       	ldd	r20, Y+34	; 0x22
   13036:	5b a1       	ldd	r21, Y+35	; 0x23
   13038:	62 1b       	sub	r22, r18
   1303a:	73 0b       	sbc	r23, r19
   1303c:	84 0b       	sbc	r24, r20
   1303e:	95 0b       	sbc	r25, r21
   13040:	2e 89       	ldd	r18, Y+22	; 0x16
   13042:	3f 89       	ldd	r19, Y+23	; 0x17
   13044:	48 8d       	ldd	r20, Y+24	; 0x18
   13046:	59 8d       	ldd	r21, Y+25	; 0x19
   13048:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
   1304c:	2a 87       	std	Y+10, r18	; 0x0a
   1304e:	3b 87       	std	Y+11, r19	; 0x0b
   13050:	4c 87       	std	Y+12, r20	; 0x0c
   13052:	5d 87       	std	Y+13, r21	; 0x0d
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
   13054:	39 85       	ldd	r19, Y+9	; 0x09
   13056:	32 30       	cpi	r19, 0x02	; 2
   13058:	69 f4       	brne	.+26     	; 0x13074 <f_mkfs+0x35e>
   1305a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1305c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1305e:	ac 85       	ldd	r26, Y+12	; 0x0c
   13060:	bd 85       	ldd	r27, Y+13	; 0x0d
   13062:	86 3f       	cpi	r24, 0xF6	; 246
   13064:	ef e0       	ldi	r30, 0x0F	; 15
   13066:	9e 07       	cpc	r25, r30
   13068:	e0 e0       	ldi	r30, 0x00	; 0
   1306a:	ae 07       	cpc	r26, r30
   1306c:	e0 e0       	ldi	r30, 0x00	; 0
   1306e:	be 07       	cpc	r27, r30
   13070:	88 f4       	brcc	.+34     	; 0x13094 <f_mkfs+0x37e>
   13072:	51 c3       	rjmp	.+1698   	; 0x13716 <f_mkfs+0xa00>
   13074:	f9 85       	ldd	r31, Y+9	; 0x09
   13076:	f3 30       	cpi	r31, 0x03	; 3
   13078:	69 f4       	brne	.+26     	; 0x13094 <f_mkfs+0x37e>
   1307a:	2a 85       	ldd	r18, Y+10	; 0x0a
   1307c:	3b 85       	ldd	r19, Y+11	; 0x0b
   1307e:	4c 85       	ldd	r20, Y+12	; 0x0c
   13080:	5d 85       	ldd	r21, Y+13	; 0x0d
   13082:	26 3f       	cpi	r18, 0xF6	; 246
   13084:	8f ef       	ldi	r24, 0xFF	; 255
   13086:	38 07       	cpc	r19, r24
   13088:	80 e0       	ldi	r24, 0x00	; 0
   1308a:	48 07       	cpc	r20, r24
   1308c:	80 e0       	ldi	r24, 0x00	; 0
   1308e:	58 07       	cpc	r21, r24
   13090:	08 f4       	brcc	.+2      	; 0x13094 <f_mkfs+0x37e>
   13092:	41 c3       	rjmp	.+1666   	; 0x13716 <f_mkfs+0xa00>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd) {
   13094:	00 23       	and	r16, r16
   13096:	09 f0       	breq	.+2      	; 0x1309a <f_mkfs+0x384>
   13098:	af c0       	rjmp	.+350    	; 0x131f8 <f_mkfs+0x4e2>
		md = 0xF0;
	} else {
		DWORD n_disk = b_vol + n_vol;
   1309a:	0a 89       	ldd	r16, Y+18	; 0x12
   1309c:	1b 89       	ldd	r17, Y+19	; 0x13
   1309e:	2c 89       	ldd	r18, Y+20	; 0x14
   130a0:	3d 89       	ldd	r19, Y+21	; 0x15
   130a2:	40 0e       	add	r4, r16
   130a4:	51 1e       	adc	r5, r17
   130a6:	62 1e       	adc	r6, r18
   130a8:	73 1e       	adc	r7, r19

		mem_set(fs->win, 0, SS(fs));
   130aa:	22 e3       	ldi	r18, 0x32	; 50
   130ac:	22 2e       	mov	r2, r18
   130ae:	31 2c       	mov	r3, r1
   130b0:	2a 0c       	add	r2, r10
   130b2:	3b 1c       	adc	r3, r11
   130b4:	c1 01       	movw	r24, r2
   130b6:	60 e0       	ldi	r22, 0x00	; 0
   130b8:	70 e0       	ldi	r23, 0x00	; 0
   130ba:	40 e0       	ldi	r20, 0x00	; 0
   130bc:	52 e0       	ldi	r21, 0x02	; 2
   130be:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
		tbl = fs->win+MBR_Table;
		ST_DWORD(tbl, 0x00010180);			/* Partition start in CHS */
   130c2:	f5 01       	movw	r30, r10
   130c4:	e0 51       	subi	r30, 0x10	; 16
   130c6:	fe 4f       	sbci	r31, 0xFE	; 254
   130c8:	80 e8       	ldi	r24, 0x80	; 128
   130ca:	80 83       	st	Z, r24
   130cc:	f5 01       	movw	r30, r10
   130ce:	ef 50       	subi	r30, 0x0F	; 15
   130d0:	fe 4f       	sbci	r31, 0xFE	; 254
   130d2:	81 e0       	ldi	r24, 0x01	; 1
   130d4:	80 83       	st	Z, r24
   130d6:	f5 01       	movw	r30, r10
   130d8:	ee 50       	subi	r30, 0x0E	; 14
   130da:	fe 4f       	sbci	r31, 0xFE	; 254
   130dc:	80 83       	st	Z, r24
   130de:	f5 01       	movw	r30, r10
   130e0:	ed 50       	subi	r30, 0x0D	; 13
   130e2:	fe 4f       	sbci	r31, 0xFE	; 254
   130e4:	10 82       	st	Z, r1
   130e6:	85 01       	movw	r16, r10
   130e8:	09 50       	subi	r16, 0x09	; 9
   130ea:	1e 4f       	sbci	r17, 0xFE	; 254
   130ec:	96 ef       	ldi	r25, 0xF6	; 246
   130ee:	89 2e       	mov	r8, r25
   130f0:	91 e0       	ldi	r25, 0x01	; 1
   130f2:	99 2e       	mov	r9, r25
   130f4:	8a 0c       	add	r8, r10
   130f6:	9b 1c       	adc	r9, r11
		if (n_disk < 63UL * 255 * 1024) {	/* Partition end in CHS */
   130f8:	20 e0       	ldi	r18, 0x00	; 0
   130fa:	42 16       	cp	r4, r18
   130fc:	24 e0       	ldi	r18, 0x04	; 4
   130fe:	52 06       	cpc	r5, r18
   13100:	2b ef       	ldi	r18, 0xFB	; 251
   13102:	62 06       	cpc	r6, r18
   13104:	20 e0       	ldi	r18, 0x00	; 0
   13106:	72 06       	cpc	r7, r18
   13108:	a8 f4       	brcc	.+42     	; 0x13134 <f_mkfs+0x41e>
			n_disk = n_disk / 63 / 255;
   1310a:	c3 01       	movw	r24, r6
   1310c:	b2 01       	movw	r22, r4
   1310e:	21 ec       	ldi	r18, 0xC1	; 193
   13110:	3e e3       	ldi	r19, 0x3E	; 62
   13112:	40 e0       	ldi	r20, 0x00	; 0
   13114:	50 e0       	ldi	r21, 0x00	; 0
   13116:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
			tbl[7] = (BYTE)n_disk;
   1311a:	d8 01       	movw	r26, r16
   1311c:	2c 93       	st	X, r18
			tbl[6] = (BYTE)((n_disk >> 2) | 63);
   1311e:	82 e0       	ldi	r24, 0x02	; 2
   13120:	56 95       	lsr	r21
   13122:	47 95       	ror	r20
   13124:	37 95       	ror	r19
   13126:	27 95       	ror	r18
   13128:	8a 95       	dec	r24
   1312a:	d1 f7       	brne	.-12     	; 0x13120 <f_mkfs+0x40a>
   1312c:	2f 63       	ori	r18, 0x3F	; 63
   1312e:	f4 01       	movw	r30, r8
   13130:	20 83       	st	Z, r18
   13132:	05 c0       	rjmp	.+10     	; 0x1313e <f_mkfs+0x428>
		} else {
			ST_WORD(&tbl[6], 0xFFFF);
   13134:	8f ef       	ldi	r24, 0xFF	; 255
   13136:	d4 01       	movw	r26, r8
   13138:	8c 93       	st	X, r24
   1313a:	f8 01       	movw	r30, r16
   1313c:	80 83       	st	Z, r24
		}
		tbl[5] = 254;
   1313e:	f5 01       	movw	r30, r10
   13140:	eb 50       	subi	r30, 0x0B	; 11
   13142:	fe 4f       	sbci	r31, 0xFE	; 254
   13144:	8e ef       	ldi	r24, 0xFE	; 254
   13146:	80 83       	st	Z, r24
		if (fmt != FS_FAT32)				/* System ID */
   13148:	f9 85       	ldd	r31, Y+9	; 0x09
   1314a:	f3 30       	cpi	r31, 0x03	; 3
   1314c:	99 f0       	breq	.+38     	; 0x13174 <f_mkfs+0x45e>
			tbl[4] = (n_vol < 0x10000) ? 0x04 : 0x06;
   1314e:	8d 81       	ldd	r24, Y+5	; 0x05
   13150:	9e 81       	ldd	r25, Y+6	; 0x06
   13152:	af 81       	ldd	r26, Y+7	; 0x07
   13154:	b8 85       	ldd	r27, Y+8	; 0x08
   13156:	80 30       	cpi	r24, 0x00	; 0
   13158:	00 e0       	ldi	r16, 0x00	; 0
   1315a:	90 07       	cpc	r25, r16
   1315c:	01 e0       	ldi	r16, 0x01	; 1
   1315e:	a0 07       	cpc	r26, r16
   13160:	00 e0       	ldi	r16, 0x00	; 0
   13162:	b0 07       	cpc	r27, r16
   13164:	10 f4       	brcc	.+4      	; 0x1316a <f_mkfs+0x454>
   13166:	84 e0       	ldi	r24, 0x04	; 4
   13168:	01 c0       	rjmp	.+2      	; 0x1316c <f_mkfs+0x456>
   1316a:	86 e0       	ldi	r24, 0x06	; 6
   1316c:	f5 01       	movw	r30, r10
   1316e:	ec 50       	subi	r30, 0x0C	; 12
   13170:	fe 4f       	sbci	r31, 0xFE	; 254
   13172:	04 c0       	rjmp	.+8      	; 0x1317c <f_mkfs+0x466>
		else
			tbl[4] = 0x0c;
   13174:	f5 01       	movw	r30, r10
   13176:	ec 50       	subi	r30, 0x0C	; 12
   13178:	fe 4f       	sbci	r31, 0xFE	; 254
   1317a:	8c e0       	ldi	r24, 0x0C	; 12
   1317c:	80 83       	st	Z, r24
		ST_DWORD(tbl+8, 63);				/* Partition start in LBA */
   1317e:	f5 01       	movw	r30, r10
   13180:	e8 50       	subi	r30, 0x08	; 8
   13182:	fe 4f       	sbci	r31, 0xFE	; 254
   13184:	8f e3       	ldi	r24, 0x3F	; 63
   13186:	80 83       	st	Z, r24
   13188:	f5 01       	movw	r30, r10
   1318a:	e7 50       	subi	r30, 0x07	; 7
   1318c:	fe 4f       	sbci	r31, 0xFE	; 254
   1318e:	10 82       	st	Z, r1
   13190:	f5 01       	movw	r30, r10
   13192:	e6 50       	subi	r30, 0x06	; 6
   13194:	fe 4f       	sbci	r31, 0xFE	; 254
   13196:	10 82       	st	Z, r1
   13198:	f5 01       	movw	r30, r10
   1319a:	e5 50       	subi	r30, 0x05	; 5
   1319c:	fe 4f       	sbci	r31, 0xFE	; 254
   1319e:	10 82       	st	Z, r1
		ST_DWORD(tbl+12, n_vol);			/* Partition size in LBA */
   131a0:	3d 81       	ldd	r19, Y+5	; 0x05
   131a2:	2e 81       	ldd	r18, Y+6	; 0x06
   131a4:	9f 81       	ldd	r25, Y+7	; 0x07
   131a6:	88 85       	ldd	r24, Y+8	; 0x08
   131a8:	f5 01       	movw	r30, r10
   131aa:	e4 50       	subi	r30, 0x04	; 4
   131ac:	fe 4f       	sbci	r31, 0xFE	; 254
   131ae:	30 83       	st	Z, r19
   131b0:	f5 01       	movw	r30, r10
   131b2:	e3 50       	subi	r30, 0x03	; 3
   131b4:	fe 4f       	sbci	r31, 0xFE	; 254
   131b6:	20 83       	st	Z, r18
   131b8:	f5 01       	movw	r30, r10
   131ba:	e2 50       	subi	r30, 0x02	; 2
   131bc:	fe 4f       	sbci	r31, 0xFE	; 254
   131be:	90 83       	st	Z, r25
   131c0:	f5 01       	movw	r30, r10
   131c2:	e1 50       	subi	r30, 0x01	; 1
   131c4:	fe 4f       	sbci	r31, 0xFE	; 254
   131c6:	80 83       	st	Z, r24
		ST_WORD(tbl+64, 0xAA55);			/* Signature */
   131c8:	f5 01       	movw	r30, r10
   131ca:	e0 5d       	subi	r30, 0xD0	; 208
   131cc:	fd 4f       	sbci	r31, 0xFD	; 253
   131ce:	85 e5       	ldi	r24, 0x55	; 85
   131d0:	80 83       	st	Z, r24
   131d2:	f5 01       	movw	r30, r10
   131d4:	ef 5c       	subi	r30, 0xCF	; 207
   131d6:	fd 4f       	sbci	r31, 0xFD	; 253
   131d8:	8a ea       	ldi	r24, 0xAA	; 170
   131da:	80 83       	st	Z, r24
		if (disk_write(drv, fs->win, 0, 1) != RES_OK)
   131dc:	80 e0       	ldi	r24, 0x00	; 0
   131de:	b1 01       	movw	r22, r2
   131e0:	20 e0       	ldi	r18, 0x00	; 0
   131e2:	30 e0       	ldi	r19, 0x00	; 0
   131e4:	a9 01       	movw	r20, r18
   131e6:	01 e0       	ldi	r16, 0x01	; 1
   131e8:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   131ec:	00 97       	sbiw	r24, 0x00	; 0
   131ee:	09 f0       	breq	.+2      	; 0x131f2 <f_mkfs+0x4dc>
   131f0:	95 c2       	rjmp	.+1322   	; 0x1371c <f_mkfs+0xa06>
			return FR_DISK_ERR;
		md = 0xF8;
   131f2:	18 ef       	ldi	r17, 0xF8	; 248
   131f4:	1e 8b       	std	Y+22, r17	; 0x16
   131f6:	02 c0       	rjmp	.+4      	; 0x131fc <f_mkfs+0x4e6>
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;

	/* Create partition table if required */
	if (sfd) {
		md = 0xF0;
   131f8:	20 ef       	ldi	r18, 0xF0	; 240
   131fa:	2e 8b       	std	Y+22, r18	; 0x16
			return FR_DISK_ERR;
		md = 0xF8;
	}

	/* Create volume boot record */
	tbl = fs->win;							/* Clear sector */
   131fc:	02 e3       	ldi	r16, 0x32	; 50
   131fe:	80 2e       	mov	r8, r16
   13200:	91 2c       	mov	r9, r1
   13202:	8a 0c       	add	r8, r10
   13204:	9b 1c       	adc	r9, r11
	mem_set(tbl, 0, SS(fs));
   13206:	c4 01       	movw	r24, r8
   13208:	60 e0       	ldi	r22, 0x00	; 0
   1320a:	70 e0       	ldi	r23, 0x00	; 0
   1320c:	40 e0       	ldi	r20, 0x00	; 0
   1320e:	52 e0       	ldi	r21, 0x02	; 2
   13210:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot code, OEM name */
   13214:	c4 01       	movw	r24, r8
   13216:	62 e2       	ldi	r22, 0x22	; 34
   13218:	71 e1       	ldi	r23, 0x11	; 17
   1321a:	4b e0       	ldi	r20, 0x0B	; 11
   1321c:	50 e0       	ldi	r21, 0x00	; 0
   1321e:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
	i = SS(fs);								/* Sector size */
	ST_WORD(tbl+BPB_BytsPerSec, i);
   13222:	d5 01       	movw	r26, r10
   13224:	dd 96       	adiw	r26, 0x3d	; 61
   13226:	1c 92       	st	X, r1
   13228:	dd 97       	sbiw	r26, 0x3d	; 61
   1322a:	82 e0       	ldi	r24, 0x02	; 2
   1322c:	de 96       	adiw	r26, 0x3e	; 62
   1322e:	8c 93       	st	X, r24
   13230:	de 97       	sbiw	r26, 0x3e	; 62
	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
   13232:	ea 8d       	ldd	r30, Y+26	; 0x1a
   13234:	df 96       	adiw	r26, 0x3f	; 63
   13236:	ec 93       	st	X, r30
   13238:	df 97       	sbiw	r26, 0x3f	; 63
	ST_WORD(tbl+BPB_RsvdSecCnt, n_rsv);		/* Reserved sectors */
   1323a:	f5 01       	movw	r30, r10
   1323c:	e0 5c       	subi	r30, 0xC0	; 192
   1323e:	ff 4f       	sbci	r31, 0xFF	; 255
   13240:	6e 84       	ldd	r6, Y+14	; 0x0e
   13242:	60 82       	st	Z, r6
   13244:	f5 01       	movw	r30, r10
   13246:	ef 5b       	subi	r30, 0xBF	; 191
   13248:	ff 4f       	sbci	r31, 0xFF	; 255
   1324a:	7f 84       	ldd	r7, Y+15	; 0x0f
   1324c:	70 82       	st	Z, r7
	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
   1324e:	f5 01       	movw	r30, r10
   13250:	ee 5b       	subi	r30, 0xBE	; 190
   13252:	ff 4f       	sbci	r31, 0xFF	; 255
   13254:	81 e0       	ldi	r24, 0x01	; 1
   13256:	80 83       	st	Z, r24
	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of rootdir entries */
   13258:	09 85       	ldd	r16, Y+9	; 0x09
   1325a:	03 30       	cpi	r16, 0x03	; 3
   1325c:	19 f4       	brne	.+6      	; 0x13264 <f_mkfs+0x54e>
   1325e:	80 e0       	ldi	r24, 0x00	; 0
   13260:	90 e0       	ldi	r25, 0x00	; 0
   13262:	02 c0       	rjmp	.+4      	; 0x13268 <f_mkfs+0x552>
   13264:	80 e0       	ldi	r24, 0x00	; 0
   13266:	92 e0       	ldi	r25, 0x02	; 2
	ST_WORD(tbl+BPB_RootEntCnt, i);
   13268:	f5 01       	movw	r30, r10
   1326a:	ed 5b       	subi	r30, 0xBD	; 189
   1326c:	ff 4f       	sbci	r31, 0xFF	; 255
   1326e:	10 82       	st	Z, r1
   13270:	f5 01       	movw	r30, r10
   13272:	ec 5b       	subi	r30, 0xBC	; 188
   13274:	ff 4f       	sbci	r31, 0xFF	; 255
   13276:	90 83       	st	Z, r25
	if (n_vol < 0x10000) {					/* Number of total sectors */
   13278:	8d 81       	ldd	r24, Y+5	; 0x05
   1327a:	9e 81       	ldd	r25, Y+6	; 0x06
   1327c:	af 81       	ldd	r26, Y+7	; 0x07
   1327e:	b8 85       	ldd	r27, Y+8	; 0x08
   13280:	29 2f       	mov	r18, r25
   13282:	33 27       	eor	r19, r19
   13284:	80 30       	cpi	r24, 0x00	; 0
   13286:	10 e0       	ldi	r17, 0x00	; 0
   13288:	91 07       	cpc	r25, r17
   1328a:	11 e0       	ldi	r17, 0x01	; 1
   1328c:	a1 07       	cpc	r26, r17
   1328e:	10 e0       	ldi	r17, 0x00	; 0
   13290:	b1 07       	cpc	r27, r17
   13292:	48 f4       	brcc	.+18     	; 0x132a6 <f_mkfs+0x590>
		ST_WORD(tbl+BPB_TotSec16, n_vol);
   13294:	f5 01       	movw	r30, r10
   13296:	eb 5b       	subi	r30, 0xBB	; 187
   13298:	ff 4f       	sbci	r31, 0xFF	; 255
   1329a:	80 83       	st	Z, r24
   1329c:	f5 01       	movw	r30, r10
   1329e:	ea 5b       	subi	r30, 0xBA	; 186
   132a0:	ff 4f       	sbci	r31, 0xFF	; 255
   132a2:	20 83       	st	Z, r18
   132a4:	10 c0       	rjmp	.+32     	; 0x132c6 <f_mkfs+0x5b0>
	} else {
		ST_DWORD(tbl+BPB_TotSec32, n_vol);
   132a6:	f5 01       	movw	r30, r10
   132a8:	ee 5a       	subi	r30, 0xAE	; 174
   132aa:	ff 4f       	sbci	r31, 0xFF	; 255
   132ac:	80 83       	st	Z, r24
   132ae:	f5 01       	movw	r30, r10
   132b0:	ed 5a       	subi	r30, 0xAD	; 173
   132b2:	ff 4f       	sbci	r31, 0xFF	; 255
   132b4:	20 83       	st	Z, r18
   132b6:	f5 01       	movw	r30, r10
   132b8:	ec 5a       	subi	r30, 0xAC	; 172
   132ba:	ff 4f       	sbci	r31, 0xFF	; 255
   132bc:	a0 83       	st	Z, r26
   132be:	f5 01       	movw	r30, r10
   132c0:	eb 5a       	subi	r30, 0xAB	; 171
   132c2:	ff 4f       	sbci	r31, 0xFF	; 255
   132c4:	b0 83       	st	Z, r27
	}
	tbl[BPB_Media] = md;					/* Media descriptor */
   132c6:	f5 01       	movw	r30, r10
   132c8:	e9 5b       	subi	r30, 0xB9	; 185
   132ca:	ff 4f       	sbci	r31, 0xFF	; 255
   132cc:	2e 89       	ldd	r18, Y+22	; 0x16
   132ce:	20 83       	st	Z, r18
	ST_WORD(tbl+BPB_SecPerTrk, 63);			/* Number of sectors per track */
   132d0:	f5 01       	movw	r30, r10
   132d2:	e6 5b       	subi	r30, 0xB6	; 182
   132d4:	ff 4f       	sbci	r31, 0xFF	; 255
   132d6:	8f e3       	ldi	r24, 0x3F	; 63
   132d8:	80 83       	st	Z, r24
   132da:	f5 01       	movw	r30, r10
   132dc:	e5 5b       	subi	r30, 0xB5	; 181
   132de:	ff 4f       	sbci	r31, 0xFF	; 255
   132e0:	10 82       	st	Z, r1
	ST_WORD(tbl+BPB_NumHeads, 255);			/* Number of heads */
   132e2:	f5 01       	movw	r30, r10
   132e4:	e4 5b       	subi	r30, 0xB4	; 180
   132e6:	ff 4f       	sbci	r31, 0xFF	; 255
   132e8:	8f ef       	ldi	r24, 0xFF	; 255
   132ea:	80 83       	st	Z, r24
   132ec:	f5 01       	movw	r30, r10
   132ee:	e3 5b       	subi	r30, 0xB3	; 179
   132f0:	ff 4f       	sbci	r31, 0xFF	; 255
   132f2:	10 82       	st	Z, r1
	ST_DWORD(tbl+BPB_HiddSec, b_vol);		/* Hidden sectors */
   132f4:	f5 01       	movw	r30, r10
   132f6:	e2 5b       	subi	r30, 0xB2	; 178
   132f8:	ff 4f       	sbci	r31, 0xFF	; 255
   132fa:	3a 89       	ldd	r19, Y+18	; 0x12
   132fc:	30 83       	st	Z, r19
   132fe:	f5 01       	movw	r30, r10
   13300:	e1 5b       	subi	r30, 0xB1	; 177
   13302:	ff 4f       	sbci	r31, 0xFF	; 255
   13304:	10 82       	st	Z, r1
   13306:	f5 01       	movw	r30, r10
   13308:	e0 5b       	subi	r30, 0xB0	; 176
   1330a:	ff 4f       	sbci	r31, 0xFF	; 255
   1330c:	10 82       	st	Z, r1
   1330e:	f5 01       	movw	r30, r10
   13310:	ef 5a       	subi	r30, 0xAF	; 175
   13312:	ff 4f       	sbci	r31, 0xFF	; 255
   13314:	10 82       	st	Z, r1
	n = get_fattime();						/* Use current time as VSN */
   13316:	0e 94 4d 1e 	call	0x3c9a	; 0x3c9a <get_fattime>
   1331a:	69 83       	std	Y+1, r22	; 0x01
   1331c:	7a 83       	std	Y+2, r23	; 0x02
   1331e:	8b 83       	std	Y+3, r24	; 0x03
   13320:	9c 83       	std	Y+4, r25	; 0x04
   13322:	47 2f       	mov	r20, r23
   13324:	55 27       	eor	r21, r21
   13326:	2c 01       	movw	r4, r24
   13328:	66 24       	eor	r6, r6
   1332a:	77 24       	eor	r7, r7
   1332c:	09 2f       	mov	r16, r25
   1332e:	11 27       	eor	r17, r17
   13330:	22 27       	eor	r18, r18
   13332:	33 27       	eor	r19, r19
   13334:	0e 87       	std	Y+14, r16	; 0x0e
   13336:	1f 87       	std	Y+15, r17	; 0x0f
   13338:	28 8b       	std	Y+16, r18	; 0x10
   1333a:	39 8b       	std	Y+17, r19	; 0x11
   1333c:	95 01       	movw	r18, r10
   1333e:	2a 5a       	subi	r18, 0xAA	; 170
   13340:	3f 4f       	sbci	r19, 0xFF	; 255
   13342:	2d 2c       	mov	r2, r13
   13344:	33 24       	eor	r3, r3
   13346:	85 01       	movw	r16, r10
   13348:	08 5a       	subi	r16, 0xA8	; 168
   1334a:	1f 4f       	sbci	r17, 0xFF	; 255
   1334c:	d5 01       	movw	r26, r10
   1334e:	a7 5a       	subi	r26, 0xA7	; 167
   13350:	bf 4f       	sbci	r27, 0xFF	; 255
	if (fmt == FS_FAT32) {
   13352:	e9 85       	ldd	r30, Y+9	; 0x09
   13354:	e3 30       	cpi	r30, 0x03	; 3
   13356:	09 f0       	breq	.+2      	; 0x1335a <f_mkfs+0x644>
   13358:	4d c0       	rjmp	.+154    	; 0x133f4 <f_mkfs+0x6de>
		ST_DWORD(tbl+BS_VolID32, n);		/* VSN */
   1335a:	f5 01       	movw	r30, r10
   1335c:	eb 58       	subi	r30, 0x8B	; 139
   1335e:	ff 4f       	sbci	r31, 0xFF	; 255
   13360:	60 83       	st	Z, r22
   13362:	f5 01       	movw	r30, r10
   13364:	ea 58       	subi	r30, 0x8A	; 138
   13366:	ff 4f       	sbci	r31, 0xFF	; 255
   13368:	40 83       	st	Z, r20
   1336a:	f5 01       	movw	r30, r10
   1336c:	e9 58       	subi	r30, 0x89	; 137
   1336e:	ff 4f       	sbci	r31, 0xFF	; 255
   13370:	40 82       	st	Z, r4
   13372:	f5 01       	movw	r30, r10
   13374:	e8 58       	subi	r30, 0x88	; 136
   13376:	ff 4f       	sbci	r31, 0xFF	; 255
   13378:	6e 84       	ldd	r6, Y+14	; 0x0e
   1337a:	60 82       	st	Z, r6
		ST_DWORD(tbl+BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
   1337c:	f9 01       	movw	r30, r18
   1337e:	c0 82       	st	Z, r12
   13380:	f5 01       	movw	r30, r10
   13382:	e9 5a       	subi	r30, 0xA9	; 169
   13384:	ff 4f       	sbci	r31, 0xFF	; 255
   13386:	20 82       	st	Z, r2
   13388:	f8 01       	movw	r30, r16
   1338a:	e0 82       	st	Z, r14
   1338c:	fc 92       	st	X, r15
		ST_DWORD(tbl+BPB_RootClus, 2);		/* Root directory start cluster (2) */
   1338e:	f5 01       	movw	r30, r10
   13390:	e2 5a       	subi	r30, 0xA2	; 162
   13392:	ff 4f       	sbci	r31, 0xFF	; 255
   13394:	82 e0       	ldi	r24, 0x02	; 2
   13396:	80 83       	st	Z, r24
   13398:	f5 01       	movw	r30, r10
   1339a:	e1 5a       	subi	r30, 0xA1	; 161
   1339c:	ff 4f       	sbci	r31, 0xFF	; 255
   1339e:	10 82       	st	Z, r1
   133a0:	f5 01       	movw	r30, r10
   133a2:	e0 5a       	subi	r30, 0xA0	; 160
   133a4:	ff 4f       	sbci	r31, 0xFF	; 255
   133a6:	10 82       	st	Z, r1
   133a8:	f5 01       	movw	r30, r10
   133aa:	ef 59       	subi	r30, 0x9F	; 159
   133ac:	ff 4f       	sbci	r31, 0xFF	; 255
   133ae:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_FSInfo, 1);			/* FSInfo record offset (VBR+1) */
   133b0:	f5 01       	movw	r30, r10
   133b2:	ee 59       	subi	r30, 0x9E	; 158
   133b4:	ff 4f       	sbci	r31, 0xFF	; 255
   133b6:	81 e0       	ldi	r24, 0x01	; 1
   133b8:	80 83       	st	Z, r24
   133ba:	f5 01       	movw	r30, r10
   133bc:	ed 59       	subi	r30, 0x9D	; 157
   133be:	ff 4f       	sbci	r31, 0xFF	; 255
   133c0:	10 82       	st	Z, r1
		ST_WORD(tbl+BPB_BkBootSec, 6);		/* Backup boot record offset (VBR+6) */
   133c2:	f5 01       	movw	r30, r10
   133c4:	ec 59       	subi	r30, 0x9C	; 156
   133c6:	ff 4f       	sbci	r31, 0xFF	; 255
   133c8:	86 e0       	ldi	r24, 0x06	; 6
   133ca:	80 83       	st	Z, r24
   133cc:	f5 01       	movw	r30, r10
   133ce:	eb 59       	subi	r30, 0x9B	; 155
   133d0:	ff 4f       	sbci	r31, 0xFF	; 255
   133d2:	10 82       	st	Z, r1
		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
   133d4:	f5 01       	movw	r30, r10
   133d6:	ee 58       	subi	r30, 0x8E	; 142
   133d8:	ff 4f       	sbci	r31, 0xFF	; 255
   133da:	80 e8       	ldi	r24, 0x80	; 128
   133dc:	80 83       	st	Z, r24
		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
   133de:	f5 01       	movw	r30, r10
   133e0:	ec 58       	subi	r30, 0x8C	; 140
   133e2:	ff 4f       	sbci	r31, 0xFF	; 255
   133e4:	89 e2       	ldi	r24, 0x29	; 41
   133e6:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
   133e8:	c5 01       	movw	r24, r10
   133ea:	87 58       	subi	r24, 0x87	; 135
   133ec:	9f 4f       	sbci	r25, 0xFF	; 255
   133ee:	6e e2       	ldi	r22, 0x2E	; 46
   133f0:	71 e1       	ldi	r23, 0x11	; 17
   133f2:	21 c0       	rjmp	.+66     	; 0x13436 <f_mkfs+0x720>
	} else {
		ST_DWORD(tbl+BS_VolID, n);			/* VSN */
   133f4:	6c 93       	st	X, r22
   133f6:	f5 01       	movw	r30, r10
   133f8:	e6 5a       	subi	r30, 0xA6	; 166
   133fa:	ff 4f       	sbci	r31, 0xFF	; 255
   133fc:	40 83       	st	Z, r20
   133fe:	f5 01       	movw	r30, r10
   13400:	e5 5a       	subi	r30, 0xA5	; 165
   13402:	ff 4f       	sbci	r31, 0xFF	; 255
   13404:	40 82       	st	Z, r4
   13406:	f5 01       	movw	r30, r10
   13408:	e4 5a       	subi	r30, 0xA4	; 164
   1340a:	ff 4f       	sbci	r31, 0xFF	; 255
   1340c:	6e 84       	ldd	r6, Y+14	; 0x0e
   1340e:	60 82       	st	Z, r6
		ST_WORD(tbl+BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
   13410:	f5 01       	movw	r30, r10
   13412:	e8 5b       	subi	r30, 0xB8	; 184
   13414:	ff 4f       	sbci	r31, 0xFF	; 255
   13416:	c0 82       	st	Z, r12
   13418:	f5 01       	movw	r30, r10
   1341a:	e7 5b       	subi	r30, 0xB7	; 183
   1341c:	ff 4f       	sbci	r31, 0xFF	; 255
   1341e:	20 82       	st	Z, r2
		tbl[BS_DrvNum] = 0x80;				/* Drive number */
   13420:	80 e8       	ldi	r24, 0x80	; 128
   13422:	d9 01       	movw	r26, r18
   13424:	8c 93       	st	X, r24
		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
   13426:	89 e2       	ldi	r24, 0x29	; 41
   13428:	f8 01       	movw	r30, r16
   1342a:	80 83       	st	Z, r24
		mem_cpy(tbl+BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
   1342c:	c5 01       	movw	r24, r10
   1342e:	83 5a       	subi	r24, 0xA3	; 163
   13430:	9f 4f       	sbci	r25, 0xFF	; 255
   13432:	62 e4       	ldi	r22, 0x42	; 66
   13434:	71 e1       	ldi	r23, 0x11	; 17
   13436:	43 e1       	ldi	r20, 0x13	; 19
   13438:	50 e0       	ldi	r21, 0x00	; 0
   1343a:	0e 94 46 78 	call	0xf08c	; 0xf08c <_ZL7mem_cpyPvPKvj>
	}
	ST_WORD(tbl+BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
   1343e:	f5 01       	movw	r30, r10
   13440:	e0 5d       	subi	r30, 0xD0	; 208
   13442:	fd 4f       	sbci	r31, 0xFD	; 253
   13444:	85 e5       	ldi	r24, 0x55	; 85
   13446:	80 83       	st	Z, r24
   13448:	f5 01       	movw	r30, r10
   1344a:	ef 5c       	subi	r30, 0xCF	; 207
   1344c:	fd 4f       	sbci	r31, 0xFD	; 253
   1344e:	8a ea       	ldi	r24, 0xAA	; 170
   13450:	80 83       	st	Z, r24
	if (disk_write(drv, tbl, b_vol, 1) != RES_OK)/* Write original (VBR) */
   13452:	80 e0       	ldi	r24, 0x00	; 0
   13454:	b4 01       	movw	r22, r8
   13456:	2a 89       	ldd	r18, Y+18	; 0x12
   13458:	3b 89       	ldd	r19, Y+19	; 0x13
   1345a:	4c 89       	ldd	r20, Y+20	; 0x14
   1345c:	5d 89       	ldd	r21, Y+21	; 0x15
   1345e:	01 e0       	ldi	r16, 0x01	; 1
   13460:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   13464:	00 97       	sbiw	r24, 0x00	; 0
   13466:	09 f0       	breq	.+2      	; 0x1346a <f_mkfs+0x754>
   13468:	59 c1       	rjmp	.+690    	; 0x1371c <f_mkfs+0xa06>
		return FR_DISK_ERR;
	if (fmt == FS_FAT32)					/* Write backup (VBR+6) */
   1346a:	f9 85       	ldd	r31, Y+9	; 0x09
   1346c:	f3 30       	cpi	r31, 0x03	; 3
   1346e:	61 f4       	brne	.+24     	; 0x13488 <f_mkfs+0x772>
		disk_write(drv, tbl, b_vol + 6, 1);
   13470:	2a 89       	ldd	r18, Y+18	; 0x12
   13472:	3b 89       	ldd	r19, Y+19	; 0x13
   13474:	4c 89       	ldd	r20, Y+20	; 0x14
   13476:	5d 89       	ldd	r21, Y+21	; 0x15
   13478:	2a 5f       	subi	r18, 0xFA	; 250
   1347a:	3f 4f       	sbci	r19, 0xFF	; 255
   1347c:	4f 4f       	sbci	r20, 0xFF	; 255
   1347e:	5f 4f       	sbci	r21, 0xFF	; 255
   13480:	80 e0       	ldi	r24, 0x00	; 0
   13482:	b4 01       	movw	r22, r8
   13484:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>

	/* Initialize FAT area */
	wsect = b_fat;
	for (i = 0; i < N_FATS; i++) {
		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
   13488:	c4 01       	movw	r24, r8
   1348a:	60 e0       	ldi	r22, 0x00	; 0
   1348c:	70 e0       	ldi	r23, 0x00	; 0
   1348e:	40 e0       	ldi	r20, 0x00	; 0
   13490:	52 e0       	ldi	r21, 0x02	; 2
   13492:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
		n = md;								/* Media descriptor byte */
   13496:	6e 88       	ldd	r6, Y+22	; 0x16
   13498:	26 2d       	mov	r18, r6
   1349a:	30 e0       	ldi	r19, 0x00	; 0
   1349c:	40 e0       	ldi	r20, 0x00	; 0
   1349e:	50 e0       	ldi	r21, 0x00	; 0
		if (fmt != FS_FAT32) {
   134a0:	09 85       	ldd	r16, Y+9	; 0x09
   134a2:	03 30       	cpi	r16, 0x03	; 3
   134a4:	c9 f0       	breq	.+50     	; 0x134d8 <f_mkfs+0x7c2>
			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
   134a6:	01 30       	cpi	r16, 0x01	; 1
   134a8:	29 f0       	breq	.+10     	; 0x134b4 <f_mkfs+0x79e>
   134aa:	80 e0       	ldi	r24, 0x00	; 0
   134ac:	9f ef       	ldi	r25, 0xFF	; 255
   134ae:	af ef       	ldi	r26, 0xFF	; 255
   134b0:	bf ef       	ldi	r27, 0xFF	; 255
   134b2:	04 c0       	rjmp	.+8      	; 0x134bc <f_mkfs+0x7a6>
   134b4:	80 e0       	ldi	r24, 0x00	; 0
   134b6:	9f ef       	ldi	r25, 0xFF	; 255
   134b8:	af ef       	ldi	r26, 0xFF	; 255
   134ba:	b0 e0       	ldi	r27, 0x00	; 0
   134bc:	82 2b       	or	r24, r18
   134be:	93 2b       	or	r25, r19
   134c0:	a4 2b       	or	r26, r20
   134c2:	b5 2b       	or	r27, r21
   134c4:	89 83       	std	Y+1, r24	; 0x01
   134c6:	9a 83       	std	Y+2, r25	; 0x02
   134c8:	ab 83       	std	Y+3, r26	; 0x03
   134ca:	bc 83       	std	Y+4, r27	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT12/16) */
   134cc:	f5 01       	movw	r30, r10
   134ce:	82 ab       	std	Z+50, r24	; 0x32
   134d0:	93 ab       	std	Z+51, r25	; 0x33
   134d2:	a4 ab       	std	Z+52, r26	; 0x34
   134d4:	b5 ab       	std	Z+53, r27	; 0x35
   134d6:	2d c0       	rjmp	.+90     	; 0x13532 <f_mkfs+0x81c>
		} else {
			n |= 0xFFFFFF00;
   134d8:	3f 6f       	ori	r19, 0xFF	; 255
   134da:	4f 6f       	ori	r20, 0xFF	; 255
   134dc:	5f 6f       	ori	r21, 0xFF	; 255
   134de:	29 83       	std	Y+1, r18	; 0x01
   134e0:	3a 83       	std	Y+2, r19	; 0x02
   134e2:	4b 83       	std	Y+3, r20	; 0x03
   134e4:	5c 83       	std	Y+4, r21	; 0x04
			ST_DWORD(tbl+0, n);				/* Reserve cluster #0-1 (FAT32) */
   134e6:	d5 01       	movw	r26, r10
   134e8:	d2 96       	adiw	r26, 0x32	; 50
   134ea:	2c 93       	st	X, r18
   134ec:	d2 97       	sbiw	r26, 0x32	; 50
   134ee:	8f ef       	ldi	r24, 0xFF	; 255
   134f0:	d3 96       	adiw	r26, 0x33	; 51
   134f2:	8c 93       	st	X, r24
   134f4:	d3 97       	sbiw	r26, 0x33	; 51
   134f6:	d4 96       	adiw	r26, 0x34	; 52
   134f8:	8c 93       	st	X, r24
   134fa:	d4 97       	sbiw	r26, 0x34	; 52
   134fc:	d5 96       	adiw	r26, 0x35	; 53
   134fe:	8c 93       	st	X, r24
   13500:	d5 97       	sbiw	r26, 0x35	; 53
			ST_DWORD(tbl+4, 0xFFFFFFFF);
   13502:	d6 96       	adiw	r26, 0x36	; 54
   13504:	8c 93       	st	X, r24
   13506:	d6 97       	sbiw	r26, 0x36	; 54
   13508:	d7 96       	adiw	r26, 0x37	; 55
   1350a:	8c 93       	st	X, r24
   1350c:	d7 97       	sbiw	r26, 0x37	; 55
   1350e:	d8 96       	adiw	r26, 0x38	; 56
   13510:	8c 93       	st	X, r24
   13512:	d8 97       	sbiw	r26, 0x38	; 56
   13514:	d9 96       	adiw	r26, 0x39	; 57
   13516:	8c 93       	st	X, r24
   13518:	d9 97       	sbiw	r26, 0x39	; 57
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
   1351a:	da 96       	adiw	r26, 0x3a	; 58
   1351c:	8c 93       	st	X, r24
   1351e:	da 97       	sbiw	r26, 0x3a	; 58
   13520:	db 96       	adiw	r26, 0x3b	; 59
   13522:	8c 93       	st	X, r24
   13524:	db 97       	sbiw	r26, 0x3b	; 59
   13526:	dc 96       	adiw	r26, 0x3c	; 60
   13528:	8c 93       	st	X, r24
   1352a:	dc 97       	sbiw	r26, 0x3c	; 60
   1352c:	8f e0       	ldi	r24, 0x0F	; 15
   1352e:	dd 96       	adiw	r26, 0x3d	; 61
   13530:	8c 93       	st	X, r24
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   13532:	80 e0       	ldi	r24, 0x00	; 0
   13534:	b4 01       	movw	r22, r8
   13536:	2c 8d       	ldd	r18, Y+28	; 0x1c
   13538:	3d 8d       	ldd	r19, Y+29	; 0x1d
   1353a:	4e 8d       	ldd	r20, Y+30	; 0x1e
   1353c:	5f 8d       	ldd	r21, Y+31	; 0x1f
   1353e:	01 e0       	ldi	r16, 0x01	; 1
   13540:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   13544:	00 97       	sbiw	r24, 0x00	; 0
   13546:	09 f0       	breq	.+2      	; 0x1354a <f_mkfs+0x834>
   13548:	e9 c0       	rjmp	.+466    	; 0x1371c <f_mkfs+0xa06>
   1354a:	4c 8c       	ldd	r4, Y+28	; 0x1c
   1354c:	5d 8c       	ldd	r5, Y+29	; 0x1d
   1354e:	6e 8c       	ldd	r6, Y+30	; 0x1e
   13550:	7f 8c       	ldd	r7, Y+31	; 0x1f
   13552:	08 94       	sec
   13554:	41 1c       	adc	r4, r1
   13556:	51 1c       	adc	r5, r1
   13558:	61 1c       	adc	r6, r1
   1355a:	71 1c       	adc	r7, r1
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
   1355c:	c4 01       	movw	r24, r8
   1355e:	60 e0       	ldi	r22, 0x00	; 0
   13560:	70 e0       	ldi	r23, 0x00	; 0
   13562:	40 e0       	ldi	r20, 0x00	; 0
   13564:	52 e0       	ldi	r21, 0x02	; 2
   13566:	0e 94 55 78 	call	0xf0aa	; 0xf0aa <_ZL7mem_setPvij>
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector write */
   1356a:	81 e0       	ldi	r24, 0x01	; 1
   1356c:	90 e0       	ldi	r25, 0x00	; 0
   1356e:	a0 e0       	ldi	r26, 0x00	; 0
   13570:	b0 e0       	ldi	r27, 0x00	; 0
   13572:	16 c0       	rjmp	.+44     	; 0x135a0 <f_mkfs+0x88a>
			if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   13574:	80 e0       	ldi	r24, 0x00	; 0
   13576:	b4 01       	movw	r22, r8
   13578:	a3 01       	movw	r20, r6
   1357a:	92 01       	movw	r18, r4
   1357c:	01 e0       	ldi	r16, 0x01	; 1
   1357e:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   13582:	00 97       	sbiw	r24, 0x00	; 0
   13584:	09 f0       	breq	.+2      	; 0x13588 <f_mkfs+0x872>
   13586:	ca c0       	rjmp	.+404    	; 0x1371c <f_mkfs+0xa06>
   13588:	08 94       	sec
   1358a:	41 1c       	adc	r4, r1
   1358c:	51 1c       	adc	r5, r1
   1358e:	61 1c       	adc	r6, r1
   13590:	71 1c       	adc	r7, r1
			ST_DWORD(tbl+8, 0x0FFFFFFF);	/* Reserve cluster #2 for root dir */
		}
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector write */
   13592:	89 81       	ldd	r24, Y+1	; 0x01
   13594:	9a 81       	ldd	r25, Y+2	; 0x02
   13596:	ab 81       	ldd	r26, Y+3	; 0x03
   13598:	bc 81       	ldd	r27, Y+4	; 0x04
   1359a:	01 96       	adiw	r24, 0x01	; 1
   1359c:	a1 1d       	adc	r26, r1
   1359e:	b1 1d       	adc	r27, r1
   135a0:	89 83       	std	Y+1, r24	; 0x01
   135a2:	9a 83       	std	Y+2, r25	; 0x02
   135a4:	ab 83       	std	Y+3, r26	; 0x03
   135a6:	bc 83       	std	Y+4, r27	; 0x04
   135a8:	89 81       	ldd	r24, Y+1	; 0x01
   135aa:	9a 81       	ldd	r25, Y+2	; 0x02
   135ac:	ab 81       	ldd	r26, Y+3	; 0x03
   135ae:	bc 81       	ldd	r27, Y+4	; 0x04
   135b0:	8c 15       	cp	r24, r12
   135b2:	9d 05       	cpc	r25, r13
   135b4:	ae 05       	cpc	r26, r14
   135b6:	bf 05       	cpc	r27, r15
   135b8:	e8 f2       	brcs	.-70     	; 0x13574 <f_mkfs+0x85e>
				return FR_DISK_ERR;
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
   135ba:	b9 85       	ldd	r27, Y+9	; 0x09
   135bc:	b3 30       	cpi	r27, 0x03	; 3
   135be:	19 f0       	breq	.+6      	; 0x135c6 <f_mkfs+0x8b0>
   135c0:	28 a0       	ldd	r2, Y+32	; 0x20
   135c2:	39 a0       	ldd	r3, Y+33	; 0x21
   135c4:	02 c0       	rjmp	.+4      	; 0x135ca <f_mkfs+0x8b4>
   135c6:	2a 8c       	ldd	r2, Y+26	; 0x1a
   135c8:	3b 8c       	ldd	r3, Y+27	; 0x1b
   135ca:	a3 01       	movw	r20, r6
   135cc:	92 01       	movw	r18, r4
   135ce:	02 c0       	rjmp	.+4      	; 0x135d4 <f_mkfs+0x8be>
	do {
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
   135d0:	a7 01       	movw	r20, r14
   135d2:	96 01       	movw	r18, r12
   135d4:	69 01       	movw	r12, r18
   135d6:	7a 01       	movw	r14, r20
   135d8:	08 94       	sec
   135da:	c1 1c       	adc	r12, r1
   135dc:	d1 1c       	adc	r13, r1
   135de:	e1 1c       	adc	r14, r1
   135e0:	f1 1c       	adc	r15, r1
   135e2:	80 e0       	ldi	r24, 0x00	; 0
   135e4:	b4 01       	movw	r22, r8
   135e6:	01 e0       	ldi	r16, 0x01	; 1
   135e8:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
   135ec:	00 97       	sbiw	r24, 0x00	; 0
   135ee:	09 f0       	breq	.+2      	; 0x135f2 <f_mkfs+0x8dc>
   135f0:	95 c0       	rjmp	.+298    	; 0x1371c <f_mkfs+0xa06>
		}
	}

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
	do {
   135f2:	08 94       	sec
   135f4:	21 08       	sbc	r2, r1
   135f6:	31 08       	sbc	r3, r1
   135f8:	21 14       	cp	r2, r1
   135fa:	31 04       	cpc	r3, r1
   135fc:	49 f7       	brne	.-46     	; 0x135d0 <f_mkfs+0x8ba>
		disk_ioctl(drv, CTRL_ERASE_SECTOR, eb);
	}
#endif

	/* Create FSInfo if needed */
	if (fmt == FS_FAT32) {
   135fe:	e9 85       	ldd	r30, Y+9	; 0x09
   13600:	e3 30       	cpi	r30, 0x03	; 3
   13602:	09 f0       	breq	.+2      	; 0x13606 <f_mkfs+0x8f0>
   13604:	6f c0       	rjmp	.+222    	; 0x136e4 <f_mkfs+0x9ce>
		ST_WORD(tbl+BS_55AA, 0xAA55);
   13606:	f5 01       	movw	r30, r10
   13608:	e0 5d       	subi	r30, 0xD0	; 208
   1360a:	fd 4f       	sbci	r31, 0xFD	; 253
   1360c:	85 e5       	ldi	r24, 0x55	; 85
   1360e:	80 83       	st	Z, r24
   13610:	f5 01       	movw	r30, r10
   13612:	ef 5c       	subi	r30, 0xCF	; 207
   13614:	fd 4f       	sbci	r31, 0xFD	; 253
   13616:	8a ea       	ldi	r24, 0xAA	; 170
   13618:	80 83       	st	Z, r24
		ST_DWORD(tbl+FSI_LeadSig, 0x41615252);
   1361a:	82 e5       	ldi	r24, 0x52	; 82
   1361c:	d5 01       	movw	r26, r10
   1361e:	d2 96       	adiw	r26, 0x32	; 50
   13620:	8c 93       	st	X, r24
   13622:	d2 97       	sbiw	r26, 0x32	; 50
   13624:	d3 96       	adiw	r26, 0x33	; 51
   13626:	8c 93       	st	X, r24
   13628:	d3 97       	sbiw	r26, 0x33	; 51
   1362a:	81 e6       	ldi	r24, 0x61	; 97
   1362c:	d4 96       	adiw	r26, 0x34	; 52
   1362e:	8c 93       	st	X, r24
   13630:	d4 97       	sbiw	r26, 0x34	; 52
   13632:	91 e4       	ldi	r25, 0x41	; 65
   13634:	d5 96       	adiw	r26, 0x35	; 53
   13636:	9c 93       	st	X, r25
		ST_DWORD(tbl+FSI_StrucSig, 0x61417272);
   13638:	f5 01       	movw	r30, r10
   1363a:	ea 5e       	subi	r30, 0xEA	; 234
   1363c:	fd 4f       	sbci	r31, 0xFD	; 253
   1363e:	22 e7       	ldi	r18, 0x72	; 114
   13640:	20 83       	st	Z, r18
   13642:	f5 01       	movw	r30, r10
   13644:	e9 5e       	subi	r30, 0xE9	; 233
   13646:	fd 4f       	sbci	r31, 0xFD	; 253
   13648:	20 83       	st	Z, r18
   1364a:	f5 01       	movw	r30, r10
   1364c:	e8 5e       	subi	r30, 0xE8	; 232
   1364e:	fd 4f       	sbci	r31, 0xFD	; 253
   13650:	90 83       	st	Z, r25
   13652:	f5 01       	movw	r30, r10
   13654:	e7 5e       	subi	r30, 0xE7	; 231
   13656:	fd 4f       	sbci	r31, 0xFD	; 253
   13658:	80 83       	st	Z, r24
		ST_DWORD(tbl+FSI_Free_Count, n_clst - 1);
   1365a:	f5 01       	movw	r30, r10
   1365c:	e6 5e       	subi	r30, 0xE6	; 230
   1365e:	fd 4f       	sbci	r31, 0xFD	; 253
   13660:	8a 85       	ldd	r24, Y+10	; 0x0a
   13662:	81 50       	subi	r24, 0x01	; 1
   13664:	80 83       	st	Z, r24
   13666:	f5 01       	movw	r30, r10
   13668:	e5 5e       	subi	r30, 0xE5	; 229
   1366a:	fd 4f       	sbci	r31, 0xFD	; 253
   1366c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1366e:	9b 85       	ldd	r25, Y+11	; 0x0b
   13670:	01 97       	sbiw	r24, 0x01	; 1
   13672:	90 83       	st	Z, r25
   13674:	8a 85       	ldd	r24, Y+10	; 0x0a
   13676:	9b 85       	ldd	r25, Y+11	; 0x0b
   13678:	ac 85       	ldd	r26, Y+12	; 0x0c
   1367a:	bd 85       	ldd	r27, Y+13	; 0x0d
   1367c:	01 97       	sbiw	r24, 0x01	; 1
   1367e:	a1 09       	sbc	r26, r1
   13680:	b1 09       	sbc	r27, r1
   13682:	f5 01       	movw	r30, r10
   13684:	e4 5e       	subi	r30, 0xE4	; 228
   13686:	fd 4f       	sbci	r31, 0xFD	; 253
   13688:	a0 83       	st	Z, r26
   1368a:	f5 01       	movw	r30, r10
   1368c:	e3 5e       	subi	r30, 0xE3	; 227
   1368e:	fd 4f       	sbci	r31, 0xFD	; 253
   13690:	b0 83       	st	Z, r27
		ST_DWORD(tbl+FSI_Nxt_Free, 0xFFFFFFFF);
   13692:	f5 01       	movw	r30, r10
   13694:	e2 5e       	subi	r30, 0xE2	; 226
   13696:	fd 4f       	sbci	r31, 0xFD	; 253
   13698:	8f ef       	ldi	r24, 0xFF	; 255
   1369a:	80 83       	st	Z, r24
   1369c:	f5 01       	movw	r30, r10
   1369e:	e1 5e       	subi	r30, 0xE1	; 225
   136a0:	fd 4f       	sbci	r31, 0xFD	; 253
   136a2:	80 83       	st	Z, r24
   136a4:	f5 01       	movw	r30, r10
   136a6:	e0 5e       	subi	r30, 0xE0	; 224
   136a8:	fd 4f       	sbci	r31, 0xFD	; 253
   136aa:	80 83       	st	Z, r24
   136ac:	f5 01       	movw	r30, r10
   136ae:	ef 5d       	subi	r30, 0xDF	; 223
   136b0:	fd 4f       	sbci	r31, 0xFD	; 253
   136b2:	80 83       	st	Z, r24
		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
   136b4:	2a 89       	ldd	r18, Y+18	; 0x12
   136b6:	3b 89       	ldd	r19, Y+19	; 0x13
   136b8:	4c 89       	ldd	r20, Y+20	; 0x14
   136ba:	5d 89       	ldd	r21, Y+21	; 0x15
   136bc:	2f 5f       	subi	r18, 0xFF	; 255
   136be:	3f 4f       	sbci	r19, 0xFF	; 255
   136c0:	4f 4f       	sbci	r20, 0xFF	; 255
   136c2:	5f 4f       	sbci	r21, 0xFF	; 255
   136c4:	80 e0       	ldi	r24, 0x00	; 0
   136c6:	b4 01       	movw	r22, r8
   136c8:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
   136cc:	2a 89       	ldd	r18, Y+18	; 0x12
   136ce:	3b 89       	ldd	r19, Y+19	; 0x13
   136d0:	4c 89       	ldd	r20, Y+20	; 0x14
   136d2:	5d 89       	ldd	r21, Y+21	; 0x15
   136d4:	29 5f       	subi	r18, 0xF9	; 249
   136d6:	3f 4f       	sbci	r19, 0xFF	; 255
   136d8:	4f 4f       	sbci	r20, 0xFF	; 255
   136da:	5f 4f       	sbci	r21, 0xFF	; 255
   136dc:	80 e0       	ldi	r24, 0x00	; 0
   136de:	b4 01       	movw	r22, r8
   136e0:	0e 94 47 a0 	call	0x1408e	; 0x1408e <_Z10disk_writehPKhmh>
	}

	return (disk_ioctl(drv, CTRL_SYNC, (BYTE*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
   136e4:	80 e0       	ldi	r24, 0x00	; 0
   136e6:	60 e0       	ldi	r22, 0x00	; 0
   136e8:	40 e0       	ldi	r20, 0x00	; 0
   136ea:	50 e0       	ldi	r21, 0x00	; 0
   136ec:	0e 94 bd a0 	call	0x1417a	; 0x1417a <_Z10disk_ioctlhhPh>
	FATFS *fs;
	DSTATUS stat;


	/* Check mounted drive and clear work area */
	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
   136f0:	21 e0       	ldi	r18, 0x01	; 1
   136f2:	30 e0       	ldi	r19, 0x00	; 0
   136f4:	00 97       	sbiw	r24, 0x00	; 0
   136f6:	a1 f4       	brne	.+40     	; 0x13720 <f_mkfs+0xa0a>
   136f8:	20 e0       	ldi	r18, 0x00	; 0
   136fa:	30 e0       	ldi	r19, 0x00	; 0
   136fc:	11 c0       	rjmp	.+34     	; 0x13720 <f_mkfs+0xa0a>
   136fe:	2b e0       	ldi	r18, 0x0B	; 11
   13700:	30 e0       	ldi	r19, 0x00	; 0
   13702:	0e c0       	rjmp	.+28     	; 0x13720 <f_mkfs+0xa0a>
	fs = FatFs[drv];
	if (!fs) return FR_NOT_ENABLED;
   13704:	2c e0       	ldi	r18, 0x0C	; 12
   13706:	30 e0       	ldi	r19, 0x00	; 0
   13708:	0b c0       	rjmp	.+22     	; 0x13720 <f_mkfs+0xa0a>
	fs->fs_type = 0;
	drv = LD2PD(drv);

	/* Get disk statics */
	stat = disk_initialize(drv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
   1370a:	23 e0       	ldi	r18, 0x03	; 3
   1370c:	30 e0       	ldi	r19, 0x00	; 0
   1370e:	08 c0       	rjmp	.+16     	; 0x13720 <f_mkfs+0xa0a>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
   13710:	2a e0       	ldi	r18, 0x0A	; 10
   13712:	30 e0       	ldi	r19, 0x00	; 0
   13714:	05 c0       	rjmp	.+10     	; 0x13720 <f_mkfs+0xa0a>

	/* Determine number of cluster and final check of validity of the FAT sub-type */
	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
		return FR_MKFS_ABORTED;
   13716:	2e e0       	ldi	r18, 0x0E	; 14
   13718:	30 e0       	ldi	r19, 0x00	; 0
   1371a:	02 c0       	rjmp	.+4      	; 0x13720 <f_mkfs+0xa0a>

	/* Initialize root directory */
	i = (fmt == FS_FAT32) ? au : n_dir;
	do {
		if (disk_write(drv, tbl, wsect++, 1) != RES_OK)
			return FR_DISK_ERR;
   1371c:	21 e0       	ldi	r18, 0x01	; 1
   1371e:	30 e0       	ldi	r19, 0x00	; 0
		disk_write(drv, tbl, b_vol + 1, 1);	/* Write original (VBR+1) */
		disk_write(drv, tbl, b_vol + 7, 1);	/* Write backup (VBR+7) */
	}

	return (disk_ioctl(drv, CTRL_SYNC, (BYTE*)0) == RES_OK) ? FR_OK : FR_DISK_ERR;
}
   13720:	c9 01       	movw	r24, r18
   13722:	a3 96       	adiw	r28, 0x23	; 35
   13724:	0f b6       	in	r0, 0x3f	; 63
   13726:	f8 94       	cli
   13728:	de bf       	out	0x3e, r29	; 62
   1372a:	0f be       	out	0x3f, r0	; 63
   1372c:	cd bf       	out	0x3d, r28	; 61
   1372e:	cf 91       	pop	r28
   13730:	df 91       	pop	r29
   13732:	1f 91       	pop	r17
   13734:	0f 91       	pop	r16
   13736:	ff 90       	pop	r15
   13738:	ef 90       	pop	r14
   1373a:	df 90       	pop	r13
   1373c:	cf 90       	pop	r12
   1373e:	bf 90       	pop	r11
   13740:	af 90       	pop	r10
   13742:	9f 90       	pop	r9
   13744:	8f 90       	pop	r8
   13746:	7f 90       	pop	r7
   13748:	6f 90       	pop	r6
   1374a:	5f 90       	pop	r5
   1374c:	4f 90       	pop	r4
   1374e:	3f 90       	pop	r3
   13750:	2f 90       	pop	r2
   13752:	08 95       	ret
	if (disk_ioctl(drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK)
		return FR_DISK_ERR;
#endif
	if (disk_ioctl(drv, GET_SECTOR_COUNT, (BYTE*)&n_vol) != RES_OK || n_vol < 128)
		return FR_DISK_ERR;
	b_vol = (sfd) ? 0 : 63;	/* Volume start sector */
   13754:	00 23       	and	r16, r16
   13756:	09 f0       	breq	.+2      	; 0x1375a <f_mkfs+0xa44>
   13758:	23 cb       	rjmp	.-2490   	; 0x12da0 <f_mkfs+0x8a>
   1375a:	2f e3       	ldi	r18, 0x3F	; 63
   1375c:	30 e0       	ldi	r19, 0x00	; 0
   1375e:	40 e0       	ldi	r20, 0x00	; 0
   13760:	50 e0       	ldi	r21, 0x00	; 0
   13762:	2a 8b       	std	Y+18, r18	; 0x12
   13764:	3b 8b       	std	Y+19, r19	; 0x13
   13766:	4c 8b       	std	Y+20, r20	; 0x14
   13768:	5d 8b       	std	Y+21, r21	; 0x15
   1376a:	1e cb       	rjmp	.-2500   	; 0x12da8 <f_mkfs+0x92>
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
   1376c:	69 01       	movw	r12, r18
   1376e:	7a 01       	movw	r14, r20
   13770:	42 e0       	ldi	r20, 0x02	; 2
   13772:	cc 0c       	add	r12, r12
   13774:	dd 1c       	adc	r13, r13
   13776:	ee 1c       	adc	r14, r14
   13778:	ff 1c       	adc	r15, r15
   1377a:	4a 95       	dec	r20
   1377c:	d1 f7       	brne	.-12     	; 0x13772 <f_mkfs+0xa5c>
   1377e:	87 e0       	ldi	r24, 0x07	; 7
   13780:	92 e0       	ldi	r25, 0x02	; 2
   13782:	a0 e0       	ldi	r26, 0x00	; 0
   13784:	b0 e0       	ldi	r27, 0x00	; 0
   13786:	c8 0e       	add	r12, r24
   13788:	d9 1e       	adc	r13, r25
   1378a:	ea 1e       	adc	r14, r26
   1378c:	fb 1e       	adc	r15, r27
   1378e:	39 e0       	ldi	r19, 0x09	; 9
   13790:	f6 94       	lsr	r15
   13792:	e7 94       	ror	r14
   13794:	d7 94       	ror	r13
   13796:	c7 94       	ror	r12
   13798:	3a 95       	dec	r19
   1379a:	d1 f7       	brne	.-12     	; 0x13790 <f_mkfs+0xa7a>

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
   1379c:	93 e0       	ldi	r25, 0x03	; 3
   1379e:	99 87       	std	Y+9, r25	; 0x09

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
		n_dir = 0;
   137a0:	18 a2       	std	Y+32, r1	; 0x20
   137a2:	19 a2       	std	Y+33, r1	; 0x21
   137a4:	1a a2       	std	Y+34, r1	; 0x22
   137a6:	1b a2       	std	Y+35, r1	; 0x23
	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;

	/* Determine offset and size of FAT structure */
	if (fmt == FS_FAT32) {
		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
		n_rsv = 32;
   137a8:	20 e2       	ldi	r18, 0x20	; 32
   137aa:	30 e0       	ldi	r19, 0x00	; 0
   137ac:	40 e0       	ldi	r20, 0x00	; 0
   137ae:	50 e0       	ldi	r21, 0x00	; 0
   137b0:	2e 87       	std	Y+14, r18	; 0x0e
   137b2:	3f 87       	std	Y+15, r19	; 0x0f
   137b4:	48 8b       	std	Y+16, r20	; 0x10
   137b6:	59 8b       	std	Y+17, r21	; 0x11
   137b8:	90 cb       	rjmp	.-2272   	; 0x12eda <f_mkfs+0x1c4>
		n_dir = 0;
	} else {
		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
   137ba:	da 01       	movw	r26, r20
   137bc:	c9 01       	movw	r24, r18
   137be:	02 96       	adiw	r24, 0x02	; 2
   137c0:	a1 1d       	adc	r26, r1
   137c2:	b1 1d       	adc	r27, r1
   137c4:	88 0f       	add	r24, r24
   137c6:	99 1f       	adc	r25, r25
   137c8:	aa 1f       	adc	r26, r26
   137ca:	bb 1f       	adc	r27, r27
	if (au > 128) au = 128;

	/* Pre-compute number of clusters and FAT syb-type */
	n_clst = n_vol / au;
	fmt = FS_FAT12;
	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
   137cc:	32 e0       	ldi	r19, 0x02	; 2
   137ce:	39 87       	std	Y+9, r19	; 0x09
   137d0:	63 cb       	rjmp	.-2362   	; 0x12e98 <f_mkfs+0x182>

000137d2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
   137d2:	4f 92       	push	r4
   137d4:	5f 92       	push	r5
   137d6:	6f 92       	push	r6
   137d8:	7f 92       	push	r7
   137da:	8f 92       	push	r8
   137dc:	9f 92       	push	r9
   137de:	af 92       	push	r10
   137e0:	bf 92       	push	r11
   137e2:	cf 92       	push	r12
   137e4:	df 92       	push	r13
   137e6:	ef 92       	push	r14
   137e8:	ff 92       	push	r15
   137ea:	0f 93       	push	r16
   137ec:	1f 93       	push	r17
   137ee:	df 93       	push	r29
   137f0:	cf 93       	push	r28
   137f2:	00 d0       	rcall	.+0      	; 0x137f4 <f_gets+0x22>
   137f4:	0f 92       	push	r0
   137f6:	cd b7       	in	r28, 0x3d	; 61
   137f8:	de b7       	in	r29, 0x3e	; 62
   137fa:	5c 01       	movw	r10, r24
   137fc:	7b 01       	movw	r14, r22
   137fe:	3a 01       	movw	r6, r20
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   13800:	6c 01       	movw	r12, r24
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fil		/* Pointer to the file object */
)
{
	int n = 0;
   13802:	00 e0       	ldi	r16, 0x00	; 0
   13804:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   13806:	08 94       	sec
   13808:	e1 08       	sbc	r14, r1
   1380a:	f1 08       	sbc	r15, r1
		f_read(fil, s, 1, &rc);
   1380c:	b3 e0       	ldi	r27, 0x03	; 3
   1380e:	4b 2e       	mov	r4, r27
   13810:	51 2c       	mov	r5, r1
   13812:	4c 0e       	add	r4, r28
   13814:	5d 1e       	adc	r5, r29
   13816:	4e 01       	movw	r8, r28
   13818:	08 94       	sec
   1381a:	81 1c       	adc	r8, r1
   1381c:	91 1c       	adc	r9, r1
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   1381e:	14 c0       	rjmp	.+40     	; 0x13848 <f_gets+0x76>
		f_read(fil, s, 1, &rc);
   13820:	c3 01       	movw	r24, r6
   13822:	b4 01       	movw	r22, r8
   13824:	41 e0       	ldi	r20, 0x01	; 1
   13826:	50 e0       	ldi	r21, 0x00	; 0
   13828:	92 01       	movw	r18, r4
   1382a:	0e 94 e8 87 	call	0x10fd0	; 0x10fd0 <_Z6f_readP3FILPhjPj>
		if (rc != 1) break;			/* Break on EOF or error */
   1382e:	8b 81       	ldd	r24, Y+3	; 0x03
   13830:	9c 81       	ldd	r25, Y+4	; 0x04
   13832:	81 30       	cpi	r24, 0x01	; 1
   13834:	91 05       	cpc	r25, r1
   13836:	59 f4       	brne	.+22     	; 0x1384e <f_gets+0x7c>
		c = s[0];
   13838:	89 81       	ldd	r24, Y+1	; 0x01
		}
#endif
#if _USE_STRFUNC >= 2
		if (c == '\r') continue;	/* Strip '\r' */
#endif
		*p++ = c;
   1383a:	f6 01       	movw	r30, r12
   1383c:	81 93       	st	Z+, r24
   1383e:	6f 01       	movw	r12, r30
		n++;
   13840:	0f 5f       	subi	r16, 0xFF	; 255
   13842:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
   13844:	8a 30       	cpi	r24, 0x0A	; 10
   13846:	19 f0       	breq	.+6      	; 0x1384e <f_gets+0x7c>
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {			/* Read bytes until buffer gets filled */
   13848:	0e 15       	cp	r16, r14
   1384a:	1f 05       	cpc	r17, r15
   1384c:	4c f3       	brlt	.-46     	; 0x13820 <f_gets+0x4e>
#endif
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
   1384e:	f6 01       	movw	r30, r12
   13850:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
   13852:	01 15       	cp	r16, r1
   13854:	11 05       	cpc	r17, r1
   13856:	11 f4       	brne	.+4      	; 0x1385c <f_gets+0x8a>
   13858:	aa 24       	eor	r10, r10
   1385a:	bb 24       	eor	r11, r11
}
   1385c:	c5 01       	movw	r24, r10
   1385e:	0f 90       	pop	r0
   13860:	0f 90       	pop	r0
   13862:	0f 90       	pop	r0
   13864:	0f 90       	pop	r0
   13866:	cf 91       	pop	r28
   13868:	df 91       	pop	r29
   1386a:	1f 91       	pop	r17
   1386c:	0f 91       	pop	r16
   1386e:	ff 90       	pop	r15
   13870:	ef 90       	pop	r14
   13872:	df 90       	pop	r13
   13874:	cf 90       	pop	r12
   13876:	bf 90       	pop	r11
   13878:	af 90       	pop	r10
   1387a:	9f 90       	pop	r9
   1387c:	8f 90       	pop	r8
   1387e:	7f 90       	pop	r7
   13880:	6f 90       	pop	r6
   13882:	5f 90       	pop	r5
   13884:	4f 90       	pop	r4
   13886:	08 95       	ret

00013888 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
   13888:	df 93       	push	r29
   1388a:	cf 93       	push	r28
   1388c:	00 d0       	rcall	.+0      	; 0x1388e <f_putc+0x6>
   1388e:	0f 92       	push	r0
   13890:	0f 92       	push	r0
   13892:	cd b7       	in	r28, 0x3d	; 61
   13894:	de b7       	in	r29, 0x3e	; 62
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
   13896:	8b 83       	std	Y+3, r24	; 0x03
	btw = 1;
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
   13898:	cb 01       	movw	r24, r22
   1389a:	be 01       	movw	r22, r28
   1389c:	6d 5f       	subi	r22, 0xFD	; 253
   1389e:	7f 4f       	sbci	r23, 0xFF	; 255
   138a0:	41 e0       	ldi	r20, 0x01	; 1
   138a2:	50 e0       	ldi	r21, 0x00	; 0
   138a4:	9e 01       	movw	r18, r28
   138a6:	2f 5f       	subi	r18, 0xFF	; 255
   138a8:	3f 4f       	sbci	r19, 0xFF	; 255
   138aa:	0e 94 73 89 	call	0x112e6	; 0x112e6 <_Z7f_writeP3FILPKhjPj>
	return (bw == btw) ? 1 : EOF;	/* Return the result */
   138ae:	89 81       	ldd	r24, Y+1	; 0x01
   138b0:	9a 81       	ldd	r25, Y+2	; 0x02
   138b2:	81 30       	cpi	r24, 0x01	; 1
   138b4:	91 05       	cpc	r25, r1
   138b6:	19 f4       	brne	.+6      	; 0x138be <f_putc+0x36>
   138b8:	21 e0       	ldi	r18, 0x01	; 1
   138ba:	30 e0       	ldi	r19, 0x00	; 0
   138bc:	02 c0       	rjmp	.+4      	; 0x138c2 <f_putc+0x3a>
   138be:	2f ef       	ldi	r18, 0xFF	; 255
   138c0:	3f ef       	ldi	r19, 0xFF	; 255
}
   138c2:	c9 01       	movw	r24, r18
   138c4:	0f 90       	pop	r0
   138c6:	0f 90       	pop	r0
   138c8:	0f 90       	pop	r0
   138ca:	0f 90       	pop	r0
   138cc:	0f 90       	pop	r0
   138ce:	cf 91       	pop	r28
   138d0:	df 91       	pop	r29
   138d2:	08 95       	ret

000138d4 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
   138d4:	ef 92       	push	r14
   138d6:	ff 92       	push	r15
   138d8:	0f 93       	push	r16
   138da:	1f 93       	push	r17
   138dc:	cf 93       	push	r28
   138de:	df 93       	push	r29
   138e0:	7b 01       	movw	r14, r22
	int n;


	for (n = 0; *str; str++, n++) {
		if (f_putc(*str, fil) == EOF) return EOF;
   138e2:	08 2f       	mov	r16, r24
   138e4:	19 2f       	mov	r17, r25
)
{
	int n;


	for (n = 0; *str; str++, n++) {
   138e6:	c0 e0       	ldi	r28, 0x00	; 0
   138e8:	d0 e0       	ldi	r29, 0x00	; 0
   138ea:	08 c0       	rjmp	.+16     	; 0x138fc <f_puts+0x28>
		if (f_putc(*str, fil) == EOF) return EOF;
   138ec:	b7 01       	movw	r22, r14
   138ee:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
   138f2:	2f ef       	ldi	r18, 0xFF	; 255
   138f4:	8f 3f       	cpi	r24, 0xFF	; 255
   138f6:	92 07       	cpc	r25, r18
   138f8:	39 f0       	breq	.+14     	; 0x13908 <f_puts+0x34>
)
{
	int n;


	for (n = 0; *str; str++, n++) {
   138fa:	21 96       	adiw	r28, 0x01	; 1
   138fc:	f8 01       	movw	r30, r16
   138fe:	81 91       	ld	r24, Z+
   13900:	8f 01       	movw	r16, r30
   13902:	88 23       	and	r24, r24
   13904:	99 f7       	brne	.-26     	; 0x138ec <f_puts+0x18>
   13906:	02 c0       	rjmp	.+4      	; 0x1390c <f_puts+0x38>
		if (f_putc(*str, fil) == EOF) return EOF;
   13908:	cf ef       	ldi	r28, 0xFF	; 255
   1390a:	df ef       	ldi	r29, 0xFF	; 255
	}
	return n;
}
   1390c:	ce 01       	movw	r24, r28
   1390e:	df 91       	pop	r29
   13910:	cf 91       	pop	r28
   13912:	1f 91       	pop	r17
   13914:	0f 91       	pop	r16
   13916:	ff 90       	pop	r15
   13918:	ef 90       	pop	r14
   1391a:	08 95       	ret

0001391c <f_printf>:
int f_printf (
	FIL* fil,			/* Pointer to the file object */
	const TCHAR* str,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
   1391c:	2f 92       	push	r2
   1391e:	3f 92       	push	r3
   13920:	4f 92       	push	r4
   13922:	5f 92       	push	r5
   13924:	6f 92       	push	r6
   13926:	7f 92       	push	r7
   13928:	8f 92       	push	r8
   1392a:	9f 92       	push	r9
   1392c:	af 92       	push	r10
   1392e:	bf 92       	push	r11
   13930:	cf 92       	push	r12
   13932:	df 92       	push	r13
   13934:	ef 92       	push	r14
   13936:	ff 92       	push	r15
   13938:	0f 93       	push	r16
   1393a:	1f 93       	push	r17
   1393c:	df 93       	push	r29
   1393e:	cf 93       	push	r28
   13940:	cd b7       	in	r28, 0x3d	; 61
   13942:	de b7       	in	r29, 0x3e	; 62
   13944:	64 97       	sbiw	r28, 0x14	; 20
   13946:	0f b6       	in	r0, 0x3f	; 63
   13948:	f8 94       	cli
   1394a:	de bf       	out	0x3e, r29	; 62
   1394c:	0f be       	out	0x3f, r0	; 63
   1394e:	cd bf       	out	0x3d, r28	; 61
   13950:	4a a4       	ldd	r4, Y+42	; 0x2a
   13952:	5b a4       	ldd	r5, Y+43	; 0x2b
   13954:	8c a4       	ldd	r8, Y+44	; 0x2c
   13956:	9d a4       	ldd	r9, Y+45	; 0x2d
	ULONG val;
	TCHAR c, d, s[16];
	int res, cc;


	va_start(arp, str);
   13958:	8e 01       	movw	r16, r28
   1395a:	02 5d       	subi	r16, 0xD2	; 210
   1395c:	1f 4f       	sbci	r17, 0xFF	; 255

	for (cc = res = 0; cc != EOF; res += cc) {
   1395e:	20 e0       	ldi	r18, 0x00	; 0
   13960:	30 e0       	ldi	r19, 0x00	; 0
   13962:	66 24       	eor	r6, r6
   13964:	77 24       	eor	r7, r7
				d += 7;
				if (c == 'x') d += 0x20;
			}
			s[i++] = d + '0';
		} while (val && i < sizeof(s) / sizeof(s[0]));
		if (f & 4) s[i++] = '-';
   13966:	c9 01       	movw	r24, r18


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
   13968:	d4 01       	movw	r26, r8
   1396a:	2c 91       	ld	r18, X
		if (c == 0) break;			/* End of string */
   1396c:	22 23       	and	r18, r18
   1396e:	09 f4       	brne	.+2      	; 0x13972 <f_printf+0x56>
   13970:	36 c1       	rjmp	.+620    	; 0x13bde <f_printf+0x2c2>


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
		c = *str++;
   13972:	08 94       	sec
   13974:	81 1c       	adc	r8, r1
   13976:	91 1c       	adc	r9, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
   13978:	25 32       	cpi	r18, 0x25	; 37
   1397a:	61 f0       	breq	.+24     	; 0x13994 <f_printf+0x78>
			cc = f_putc(c, fil);
   1397c:	82 2f       	mov	r24, r18
   1397e:	b2 01       	movw	r22, r4
   13980:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
			if (cc != EOF) cc = 1;
   13984:	bf ef       	ldi	r27, 0xFF	; 255
   13986:	8f 3f       	cpi	r24, 0xFF	; 255
   13988:	9b 07       	cpc	r25, r27
   1398a:	09 f4       	brne	.+2      	; 0x1398e <f_printf+0x72>
   1398c:	21 c1       	rjmp	.+578    	; 0x13bd0 <f_printf+0x2b4>
   1398e:	81 e0       	ldi	r24, 0x01	; 1
   13990:	90 e0       	ldi	r25, 0x00	; 0
   13992:	1e c1       	rjmp	.+572    	; 0x13bd0 <f_printf+0x2b4>
			continue;
		}
		w = f = 0;
		c = *str++;
   13994:	f4 01       	movw	r30, r8
   13996:	f1 90       	ld	r15, Z+
   13998:	4f 01       	movw	r8, r30
		if (c == '0') {				/* Flag: '0' padding */
   1399a:	ff 2d       	mov	r31, r15
   1399c:	f0 33       	cpi	r31, 0x30	; 48
   1399e:	31 f4       	brne	.+12     	; 0x139ac <f_printf+0x90>
			f = 1; c = *str++;
   139a0:	d4 01       	movw	r26, r8
   139a2:	fd 90       	ld	r15, X+
   139a4:	4d 01       	movw	r8, r26
   139a6:	ee 24       	eor	r14, r14
   139a8:	e3 94       	inc	r14
   139aa:	01 c0       	rjmp	.+2      	; 0x139ae <f_printf+0x92>
		if (c != '%') {				/* Non escape character */
			cc = f_putc(c, fil);
			if (cc != EOF) cc = 1;
			continue;
		}
		w = f = 0;
   139ac:	ee 24       	eor	r14, r14
   139ae:	cc 24       	eor	r12, r12
   139b0:	dd 24       	eor	r13, r13
   139b2:	96 01       	movw	r18, r12
   139b4:	f4 01       	movw	r30, r8
   139b6:	13 c0       	rjmp	.+38     	; 0x139de <f_printf+0xc2>
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
   139b8:	b9 01       	movw	r22, r18
   139ba:	66 0f       	add	r22, r22
   139bc:	77 1f       	adc	r23, r23
   139be:	43 e0       	ldi	r20, 0x03	; 3
   139c0:	22 0f       	add	r18, r18
   139c2:	33 1f       	adc	r19, r19
   139c4:	4a 95       	dec	r20
   139c6:	e1 f7       	brne	.-8      	; 0x139c0 <f_printf+0xa4>
   139c8:	26 0f       	add	r18, r22
   139ca:	37 1f       	adc	r19, r23
   139cc:	4f 2d       	mov	r20, r15
   139ce:	55 27       	eor	r21, r21
   139d0:	47 fd       	sbrc	r20, 7
   139d2:	50 95       	com	r21
   139d4:	24 0f       	add	r18, r20
   139d6:	35 1f       	adc	r19, r21
   139d8:	20 53       	subi	r18, 0x30	; 48
   139da:	30 40       	sbci	r19, 0x00	; 0
			c = *str++;
   139dc:	f1 90       	ld	r15, Z+
		w = f = 0;
		c = *str++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *str++;
		}
		while (IsDigit(c)) {		/* Precision */
   139de:	4f 2d       	mov	r20, r15
   139e0:	40 53       	subi	r20, 0x30	; 48
   139e2:	4a 30       	cpi	r20, 0x0A	; 10
   139e4:	48 f3       	brcs	.-46     	; 0x139b8 <f_printf+0x9c>
   139e6:	69 01       	movw	r12, r18
   139e8:	4f 01       	movw	r8, r30
			w = w * 10 + c - '0';
			c = *str++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
   139ea:	bf 2d       	mov	r27, r15
   139ec:	bc 36       	cpi	r27, 0x6C	; 108
   139ee:	11 f0       	breq	.+4      	; 0x139f4 <f_printf+0xd8>
   139f0:	bc 34       	cpi	r27, 0x4C	; 76
   139f2:	29 f4       	brne	.+10     	; 0x139fe <f_printf+0xe2>
			f |= 2; c = *str++;
   139f4:	e2 e0       	ldi	r30, 0x02	; 2
   139f6:	ee 2a       	or	r14, r30
   139f8:	d4 01       	movw	r26, r8
   139fa:	fd 90       	ld	r15, X+
   139fc:	4d 01       	movw	r8, r26
		}
		if (!c) break;
   139fe:	ff 20       	and	r15, r15
   13a00:	09 f4       	brne	.+2      	; 0x13a04 <f_printf+0xe8>
   13a02:	ed c0       	rjmp	.+474    	; 0x13bde <f_printf+0x2c2>
		d = c;
		if (IsLower(d)) d -= 0x20;
   13a04:	8f 2d       	mov	r24, r15
   13a06:	81 56       	subi	r24, 0x61	; 97
   13a08:	8a 31       	cpi	r24, 0x1A	; 26
   13a0a:	18 f4       	brcc	.+6      	; 0x13a12 <f_printf+0xf6>
   13a0c:	4f 2d       	mov	r20, r15
   13a0e:	40 52       	subi	r20, 0x20	; 32
   13a10:	01 c0       	rjmp	.+2      	; 0x13a14 <f_printf+0xf8>
   13a12:	4f 2d       	mov	r20, r15
		switch (d) {				/* Type is... */
   13a14:	4f 34       	cpi	r20, 0x4F	; 79
   13a16:	99 f1       	breq	.+102    	; 0x13a7e <f_printf+0x162>
   13a18:	40 35       	cpi	r20, 0x50	; 80
   13a1a:	3c f4       	brge	.+14     	; 0x13a2a <f_printf+0x10e>
   13a1c:	43 34       	cpi	r20, 0x43	; 67
   13a1e:	d1 f0       	breq	.+52     	; 0x13a54 <f_printf+0x138>
   13a20:	44 34       	cpi	r20, 0x44	; 68
   13a22:	51 f0       	breq	.+20     	; 0x13a38 <f_printf+0x11c>
   13a24:	42 34       	cpi	r20, 0x42	; 66
   13a26:	21 f5       	brne	.+72     	; 0x13a70 <f_printf+0x154>
   13a28:	28 c0       	rjmp	.+80     	; 0x13a7a <f_printf+0x15e>
   13a2a:	45 35       	cpi	r20, 0x55	; 85
   13a2c:	29 f0       	breq	.+10     	; 0x13a38 <f_printf+0x11c>
   13a2e:	48 35       	cpi	r20, 0x58	; 88
   13a30:	e9 f0       	breq	.+58     	; 0x13a6c <f_printf+0x150>
   13a32:	43 35       	cpi	r20, 0x53	; 83
   13a34:	e9 f4       	brne	.+58     	; 0x13a70 <f_printf+0x154>
   13a36:	02 c0       	rjmp	.+4      	; 0x13a3c <f_printf+0x120>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
   13a38:	aa e0       	ldi	r26, 0x0A	; 10
   13a3a:	22 c0       	rjmp	.+68     	; 0x13a80 <f_printf+0x164>
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			cc = f_puts(va_arg(arp, TCHAR*), fil); continue;
   13a3c:	22 e0       	ldi	r18, 0x02	; 2
   13a3e:	e2 2e       	mov	r14, r18
   13a40:	f1 2c       	mov	r15, r1
   13a42:	e0 0e       	add	r14, r16
   13a44:	f1 1e       	adc	r15, r17
   13a46:	f8 01       	movw	r30, r16
   13a48:	80 81       	ld	r24, Z
   13a4a:	91 81       	ldd	r25, Z+1	; 0x01
   13a4c:	b2 01       	movw	r22, r4
   13a4e:	0e 94 6a 9c 	call	0x138d4	; 0x138d4 <f_puts>
   13a52:	0a c0       	rjmp	.+20     	; 0x13a68 <f_printf+0x14c>
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
   13a54:	92 e0       	ldi	r25, 0x02	; 2
   13a56:	e9 2e       	mov	r14, r25
   13a58:	f1 2c       	mov	r15, r1
   13a5a:	e0 0e       	add	r14, r16
   13a5c:	f1 1e       	adc	r15, r17
   13a5e:	d8 01       	movw	r26, r16
   13a60:	8c 91       	ld	r24, X
   13a62:	b2 01       	movw	r22, r4
   13a64:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
   13a68:	87 01       	movw	r16, r14
   13a6a:	b2 c0       	rjmp	.+356    	; 0x13bd0 <f_printf+0x2b4>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
   13a6c:	a0 e1       	ldi	r26, 0x10	; 16
   13a6e:	08 c0       	rjmp	.+16     	; 0x13a80 <f_printf+0x164>
		default:					/* Unknown */
			cc = f_putc(c, fil); continue;
   13a70:	8f 2d       	mov	r24, r15
   13a72:	b2 01       	movw	r22, r4
   13a74:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
   13a78:	ab c0       	rjmp	.+342    	; 0x13bd0 <f_printf+0x2b4>
		case 'S' :					/* String */
			cc = f_puts(va_arg(arp, TCHAR*), fil); continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
		case 'B' :					/* Binary */
			r = 2; break;
   13a7a:	a2 e0       	ldi	r26, 0x02	; 2
   13a7c:	01 c0       	rjmp	.+2      	; 0x13a80 <f_printf+0x164>
		case 'O' :					/* Octal */
			r = 8; break;
   13a7e:	a8 e0       	ldi	r26, 0x08	; 8
		default:					/* Unknown */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument */
		val = (f & 2) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
   13a80:	e1 fe       	sbrs	r14, 1
   13a82:	0a c0       	rjmp	.+20     	; 0x13a98 <f_printf+0x17c>
   13a84:	f8 01       	movw	r30, r16
   13a86:	0c 5f       	subi	r16, 0xFC	; 252
   13a88:	1f 4f       	sbci	r17, 0xFF	; 255
   13a8a:	60 81       	ld	r22, Z
   13a8c:	71 81       	ldd	r23, Z+1	; 0x01
   13a8e:	82 81       	ldd	r24, Z+2	; 0x02
   13a90:	93 81       	ldd	r25, Z+3	; 0x03
		if (d == 'D' && (val & 0x80000000)) {
   13a92:	44 34       	cpi	r20, 0x44	; 68
   13a94:	f1 f4       	brne	.+60     	; 0x13ad2 <f_printf+0x1b6>
   13a96:	12 c0       	rjmp	.+36     	; 0x13abc <f_printf+0x1a0>
   13a98:	98 01       	movw	r18, r16
   13a9a:	2e 5f       	subi	r18, 0xFE	; 254
   13a9c:	3f 4f       	sbci	r19, 0xFF	; 255
   13a9e:	f8 01       	movw	r30, r16
   13aa0:	60 81       	ld	r22, Z
   13aa2:	71 81       	ldd	r23, Z+1	; 0x01
		default:					/* Unknown */
			cc = f_putc(c, fil); continue;
		}

		/* Get an argument */
		val = (f & 2) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : va_arg(arp, unsigned int));
   13aa4:	44 34       	cpi	r20, 0x44	; 68
   13aa6:	31 f4       	brne	.+12     	; 0x13ab4 <f_printf+0x198>
   13aa8:	88 27       	eor	r24, r24
   13aaa:	77 fd       	sbrc	r23, 7
   13aac:	80 95       	com	r24
   13aae:	98 2f       	mov	r25, r24
   13ab0:	89 01       	movw	r16, r18
   13ab2:	04 c0       	rjmp	.+8      	; 0x13abc <f_printf+0x1a0>
   13ab4:	80 e0       	ldi	r24, 0x00	; 0
   13ab6:	90 e0       	ldi	r25, 0x00	; 0
   13ab8:	89 01       	movw	r16, r18
   13aba:	0b c0       	rjmp	.+22     	; 0x13ad2 <f_printf+0x1b6>
		if (d == 'D' && (val & 0x80000000)) {
   13abc:	97 ff       	sbrs	r25, 7
   13abe:	09 c0       	rjmp	.+18     	; 0x13ad2 <f_printf+0x1b6>
			val = 0 - val;
   13ac0:	90 95       	com	r25
   13ac2:	80 95       	com	r24
   13ac4:	70 95       	com	r23
   13ac6:	61 95       	neg	r22
   13ac8:	7f 4f       	sbci	r23, 0xFF	; 255
   13aca:	8f 4f       	sbci	r24, 0xFF	; 255
   13acc:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 4;
   13ace:	f4 e0       	ldi	r31, 0x04	; 4
   13ad0:	ef 2a       	or	r14, r31
   13ad2:	1e 01       	movw	r2, r28
   13ad4:	08 94       	sec
   13ad6:	21 1c       	adc	r2, r1
   13ad8:	31 1c       	adc	r3, r1
		}
		/* Put it in numeral string */
		i = 0;
   13ada:	aa 24       	eor	r10, r10
   13adc:	bb 24       	eor	r11, r11
		do {
			d = (TCHAR)(val % r); val /= r;
   13ade:	2a 2f       	mov	r18, r26
   13ae0:	30 e0       	ldi	r19, 0x00	; 0
   13ae2:	40 e0       	ldi	r20, 0x00	; 0
   13ae4:	50 e0       	ldi	r21, 0x00	; 0
   13ae6:	29 8b       	std	Y+17, r18	; 0x11
   13ae8:	3a 8b       	std	Y+18, r19	; 0x12
   13aea:	4b 8b       	std	Y+19, r20	; 0x13
   13aec:	5c 8b       	std	Y+20, r21	; 0x14
   13aee:	29 89       	ldd	r18, Y+17	; 0x11
   13af0:	3a 89       	ldd	r19, Y+18	; 0x12
   13af2:	4b 89       	ldd	r20, Y+19	; 0x13
   13af4:	5c 89       	ldd	r21, Y+20	; 0x14
   13af6:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
   13afa:	e6 2f       	mov	r30, r22
   13afc:	ca 01       	movw	r24, r20
   13afe:	b9 01       	movw	r22, r18
			if (d > 9) {
   13b00:	ea 30       	cpi	r30, 0x0A	; 10
   13b02:	44 f0       	brlt	.+16     	; 0x13b14 <f_printf+0x1f8>
				d += 7;
   13b04:	fe 2f       	mov	r31, r30
   13b06:	f9 5f       	subi	r31, 0xF9	; 249
				if (c == 'x') d += 0x20;
   13b08:	af 2d       	mov	r26, r15
   13b0a:	a8 37       	cpi	r26, 0x78	; 120
   13b0c:	11 f0       	breq	.+4      	; 0x13b12 <f_printf+0x1f6>
		/* Put it in numeral string */
		i = 0;
		do {
			d = (TCHAR)(val % r); val /= r;
			if (d > 9) {
				d += 7;
   13b0e:	ef 2f       	mov	r30, r31
   13b10:	01 c0       	rjmp	.+2      	; 0x13b14 <f_printf+0x1f8>
				if (c == 'x') d += 0x20;
   13b12:	e9 5d       	subi	r30, 0xD9	; 217
			}
			s[i++] = d + '0';
   13b14:	e0 5d       	subi	r30, 0xD0	; 208
   13b16:	d1 01       	movw	r26, r2
   13b18:	ed 93       	st	X+, r30
   13b1a:	1d 01       	movw	r2, r26
   13b1c:	08 94       	sec
   13b1e:	a1 1c       	adc	r10, r1
   13b20:	b1 1c       	adc	r11, r1
			val = 0 - val;
			f |= 4;
		}
		/* Put it in numeral string */
		i = 0;
		do {
   13b22:	21 15       	cp	r18, r1
   13b24:	31 05       	cpc	r19, r1
   13b26:	41 05       	cpc	r20, r1
   13b28:	51 05       	cpc	r21, r1
   13b2a:	21 f0       	breq	.+8      	; 0x13b34 <f_printf+0x218>
   13b2c:	b0 e1       	ldi	r27, 0x10	; 16
   13b2e:	ab 16       	cp	r10, r27
   13b30:	b1 04       	cpc	r11, r1
   13b32:	e9 f6       	brne	.-70     	; 0x13aee <f_printf+0x1d2>
				d += 7;
				if (c == 'x') d += 0x20;
			}
			s[i++] = d + '0';
		} while (val && i < sizeof(s) / sizeof(s[0]));
		if (f & 4) s[i++] = '-';
   13b34:	ff 24       	eor	r15, r15
   13b36:	e2 fe       	sbrs	r14, 2
   13b38:	0b c0       	rjmp	.+22     	; 0x13b50 <f_printf+0x234>
   13b3a:	e1 e0       	ldi	r30, 0x01	; 1
   13b3c:	f0 e0       	ldi	r31, 0x00	; 0
   13b3e:	ec 0f       	add	r30, r28
   13b40:	fd 1f       	adc	r31, r29
   13b42:	ea 0d       	add	r30, r10
   13b44:	fb 1d       	adc	r31, r11
   13b46:	2d e2       	ldi	r18, 0x2D	; 45
   13b48:	20 83       	st	Z, r18
   13b4a:	08 94       	sec
   13b4c:	a1 1c       	adc	r10, r1
   13b4e:	b1 1c       	adc	r11, r1
		cc = 0;
   13b50:	80 e0       	ldi	r24, 0x00	; 0
   13b52:	90 e0       	ldi	r25, 0x00	; 0
		while (i < w-- && cc != EOF) {
			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
   13b54:	31 e0       	ldi	r19, 0x01	; 1
   13b56:	e3 22       	and	r14, r19
   13b58:	ff 24       	eor	r15, r15
			}
			s[i++] = d + '0';
		} while (val && i < sizeof(s) / sizeof(s[0]));
		if (f & 4) s[i++] = '-';
		cc = 0;
		while (i < w-- && cc != EOF) {
   13b5a:	0a c0       	rjmp	.+20     	; 0x13b70 <f_printf+0x254>
			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
   13b5c:	80 e3       	ldi	r24, 0x30	; 48
   13b5e:	b2 01       	movw	r22, r4
   13b60:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
			res++;
   13b64:	08 94       	sec
   13b66:	61 1c       	adc	r6, r1
   13b68:	71 1c       	adc	r7, r1
   13b6a:	08 94       	sec
   13b6c:	c1 08       	sbc	r12, r1
   13b6e:	d1 08       	sbc	r13, r1
			}
			s[i++] = d + '0';
		} while (val && i < sizeof(s) / sizeof(s[0]));
		if (f & 4) s[i++] = '-';
		cc = 0;
		while (i < w-- && cc != EOF) {
   13b70:	ac 14       	cp	r10, r12
   13b72:	bd 04       	cpc	r11, r13
   13b74:	48 f4       	brcc	.+18     	; 0x13b88 <f_printf+0x26c>
   13b76:	4f ef       	ldi	r20, 0xFF	; 255
   13b78:	8f 3f       	cpi	r24, 0xFF	; 255
   13b7a:	94 07       	cpc	r25, r20
   13b7c:	29 f0       	breq	.+10     	; 0x13b88 <f_printf+0x26c>
			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
   13b7e:	e1 14       	cp	r14, r1
   13b80:	f1 04       	cpc	r15, r1
   13b82:	61 f7       	brne	.-40     	; 0x13b5c <f_printf+0x240>
   13b84:	80 e2       	ldi	r24, 0x20	; 32
   13b86:	eb cf       	rjmp	.-42     	; 0x13b5e <f_printf+0x242>


/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/
int f_printf (
   13b88:	81 e0       	ldi	r24, 0x01	; 1
   13b8a:	e8 2e       	mov	r14, r24
   13b8c:	f1 2c       	mov	r15, r1
   13b8e:	ec 0e       	add	r14, r28
   13b90:	fd 1e       	adc	r15, r29
   13b92:	ea 0c       	add	r14, r10
   13b94:	fb 1c       	adc	r15, r11
		while (i < w-- && cc != EOF) {
			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
			res++;
		}
		do {
			cc = f_putc(s[--i], fil); 
   13b96:	08 94       	sec
   13b98:	a1 08       	sbc	r10, r1
   13b9a:	b1 08       	sbc	r11, r1
   13b9c:	d7 01       	movw	r26, r14
   13b9e:	8e 91       	ld	r24, -X
   13ba0:	7d 01       	movw	r14, r26
   13ba2:	b2 01       	movw	r22, r4
   13ba4:	0e 94 44 9c 	call	0x13888	; 0x13888 <f_putc>
			res++;
   13ba8:	08 94       	sec
   13baa:	61 1c       	adc	r6, r1
   13bac:	71 1c       	adc	r7, r1
		cc = 0;
		while (i < w-- && cc != EOF) {
			cc = f_putc((TCHAR)((f & 1) ? '0' : ' '), fil);
			res++;
		}
		do {
   13bae:	a1 14       	cp	r10, r1
   13bb0:	b1 04       	cpc	r11, r1
   13bb2:	29 f0       	breq	.+10     	; 0x13bbe <f_printf+0x2a2>
   13bb4:	bf ef       	ldi	r27, 0xFF	; 255
   13bb6:	8f 3f       	cpi	r24, 0xFF	; 255
   13bb8:	9b 07       	cpc	r25, r27
   13bba:	69 f7       	brne	.-38     	; 0x13b96 <f_printf+0x27a>
   13bbc:	04 c0       	rjmp	.+8      	; 0x13bc6 <f_printf+0x2aa>
			cc = f_putc(s[--i], fil); 
			res++;
		} while (i && cc != EOF);
		if (cc != EOF) cc = 0;
   13bbe:	ef ef       	ldi	r30, 0xFF	; 255
   13bc0:	8f 3f       	cpi	r24, 0xFF	; 255
   13bc2:	9e 07       	cpc	r25, r30
   13bc4:	19 f4       	brne	.+6      	; 0x13bcc <f_printf+0x2b0>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			cc = f_puts(va_arg(arp, TCHAR*), fil); continue;
		case 'C' :					/* Character */
			cc = f_putc((TCHAR)va_arg(arp, int), fil); continue;
   13bc6:	8f ef       	ldi	r24, 0xFF	; 255
   13bc8:	9f ef       	ldi	r25, 0xFF	; 255
   13bca:	02 c0       	rjmp	.+4      	; 0x13bd0 <f_printf+0x2b4>
		}
		do {
			cc = f_putc(s[--i], fil); 
			res++;
		} while (i && cc != EOF);
		if (cc != EOF) cc = 0;
   13bcc:	80 e0       	ldi	r24, 0x00	; 0
   13bce:	90 e0       	ldi	r25, 0x00	; 0
	int res, cc;


	va_start(arp, str);

	for (cc = res = 0; cc != EOF; res += cc) {
   13bd0:	68 0e       	add	r6, r24
   13bd2:	79 1e       	adc	r7, r25
   13bd4:	ff ef       	ldi	r31, 0xFF	; 255
   13bd6:	8f 3f       	cpi	r24, 0xFF	; 255
   13bd8:	9f 07       	cpc	r25, r31
   13bda:	09 f0       	breq	.+2      	; 0x13bde <f_printf+0x2c2>
   13bdc:	c5 ce       	rjmp	.-630    	; 0x13968 <f_printf+0x4c>
   13bde:	9c 01       	movw	r18, r24
		} while (i && cc != EOF);
		if (cc != EOF) cc = 0;
	}

	va_end(arp);
	return (cc == EOF) ? cc : res;
   13be0:	4f ef       	ldi	r20, 0xFF	; 255
   13be2:	8f 3f       	cpi	r24, 0xFF	; 255
   13be4:	94 07       	cpc	r25, r20
   13be6:	09 f0       	breq	.+2      	; 0x13bea <f_printf+0x2ce>
   13be8:	93 01       	movw	r18, r6
}
   13bea:	c9 01       	movw	r24, r18
   13bec:	64 96       	adiw	r28, 0x14	; 20
   13bee:	0f b6       	in	r0, 0x3f	; 63
   13bf0:	f8 94       	cli
   13bf2:	de bf       	out	0x3e, r29	; 62
   13bf4:	0f be       	out	0x3f, r0	; 63
   13bf6:	cd bf       	out	0x3d, r28	; 61
   13bf8:	cf 91       	pop	r28
   13bfa:	df 91       	pop	r29
   13bfc:	1f 91       	pop	r17
   13bfe:	0f 91       	pop	r16
   13c00:	ff 90       	pop	r15
   13c02:	ef 90       	pop	r14
   13c04:	df 90       	pop	r13
   13c06:	cf 90       	pop	r12
   13c08:	bf 90       	pop	r11
   13c0a:	af 90       	pop	r10
   13c0c:	9f 90       	pop	r9
   13c0e:	8f 90       	pop	r8
   13c10:	7f 90       	pop	r7
   13c12:	6f 90       	pop	r6
   13c14:	5f 90       	pop	r5
   13c16:	4f 90       	pop	r4
   13c18:	3f 90       	pop	r3
   13c1a:	2f 90       	pop	r2
   13c1c:	08 95       	ret

00013c1e <_ZL8rcvr_spiv>:
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
	SPDR = 0xFF;
   13c1e:	8f ef       	ldi	r24, 0xFF	; 255
   13c20:	8e bd       	out	0x2e, r24	; 46
	loop_until_bit_is_set(SPSR, SPIF);
   13c22:	0d b4       	in	r0, 0x2d	; 45
   13c24:	07 fe       	sbrs	r0, 7
   13c26:	fd cf       	rjmp	.-6      	; 0x13c22 <_ZL8rcvr_spiv+0x4>
	return SPDR;
   13c28:	8e b5       	in	r24, 0x2e	; 46
}
   13c2a:	08 95       	ret

00013c2c <_ZL10wait_readyv>:
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms (G: now 50x16ms) */
   13c2c:	82 e3       	ldi	r24, 0x32	; 50
   13c2e:	80 93 41 1f 	sts	0x1F41, r24
	rcvr_spi();
   13c32:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
	do
		if (rcvr_spi() == 0xFF) return 1;
   13c36:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   13c3a:	8f 3f       	cpi	r24, 0xFF	; 255
   13c3c:	39 f0       	breq	.+14     	; 0x13c4c <_ZL10wait_readyv+0x20>
static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms (G: now 50x16ms) */
	rcvr_spi();
	do
   13c3e:	80 91 41 1f 	lds	r24, 0x1F41
   13c42:	88 23       	and	r24, r24
   13c44:	c1 f7       	brne	.-16     	; 0x13c36 <_ZL10wait_readyv+0xa>
		if (rcvr_spi() == 0xFF) return 1;
	while (Timer2);
	
	return 0;
   13c46:	20 e0       	ldi	r18, 0x00	; 0
   13c48:	30 e0       	ldi	r19, 0x00	; 0
   13c4a:	02 c0       	rjmp	.+4      	; 0x13c50 <_ZL10wait_readyv+0x24>
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
	Timer2 = 50;	/* Wait for ready in timeout of 500ms (G: now 50x16ms) */
	rcvr_spi();
	do
		if (rcvr_spi() == 0xFF) return 1;
   13c4c:	21 e0       	ldi	r18, 0x01	; 1
   13c4e:	30 e0       	ldi	r19, 0x00	; 0
	while (Timer2);
	
	return 0;
}
   13c50:	c9 01       	movw	r24, r18
   13c52:	08 95       	ret

00013c54 <_ZL8deselectv>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();
   13c54:	28 9a       	sbi	0x05, 0	; 5
	rcvr_spi();
   13c56:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
}
   13c5a:	08 95       	ret

00013c5c <_ZL6selectv>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();
   13c5c:	28 98       	cbi	0x05, 0	; 5
	if (!wait_ready()) {
   13c5e:	0e 94 16 9e 	call	0x13c2c	; 0x13c2c <_ZL10wait_readyv>
   13c62:	00 97       	sbiw	r24, 0x00	; 0
   13c64:	29 f4       	brne	.+10     	; 0x13c70 <_ZL6selectv+0x14>
		deselect();
   13c66:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
		return 0;
   13c6a:	20 e0       	ldi	r18, 0x00	; 0
   13c6c:	30 e0       	ldi	r19, 0x00	; 0
   13c6e:	02 c0       	rjmp	.+4      	; 0x13c74 <_ZL6selectv+0x18>
	}
	return 1;
   13c70:	21 e0       	ldi	r18, 0x01	; 1
   13c72:	30 e0       	ldi	r19, 0x00	; 0
}
   13c74:	c9 01       	movw	r24, r18
   13c76:	08 95       	ret

00013c78 <_ZL9power_offv>:


static
void power_off (void)
{
	SPCR = 0;				/* Disable SPI function */
   13c78:	1c bc       	out	0x2c, r1	; 44
	// DDRB  = 0b11000000;		/* Disable drivers */
	// PORTB = 0b10110000;
	
	// PORTE |=  0x80;			/* Socket power off */
	Stat |= STA_NOINIT;
   13c7a:	80 91 82 11 	lds	r24, 0x1182
   13c7e:	81 60       	ori	r24, 0x01	; 1
   13c80:	80 93 82 11 	sts	0x1182, r24
}
   13c84:	08 95       	ret

00013c86 <_ZL14rcvr_datablockPhj>:
static
int rcvr_datablock (
			BYTE *buff,	/* Data buffer to store received data */
			UINT btr	/* Byte count (must be multiple of 4) */
			)
{
   13c86:	0f 93       	push	r16
   13c88:	1f 93       	push	r17
   13c8a:	cf 93       	push	r28
   13c8c:	df 93       	push	r29
   13c8e:	ec 01       	movw	r28, r24
   13c90:	8b 01       	movw	r16, r22
	BYTE token;
	
	
	Timer1 = 20;
   13c92:	84 e1       	ldi	r24, 0x14	; 20
   13c94:	80 93 40 1f 	sts	0x1F40, r24
	do {				/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
   13c98:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
{
	BYTE token;
	
	
	Timer1 = 20;
	do {				/* Wait for data packet in timeout of 200ms */
   13c9c:	8f 3f       	cpi	r24, 0xFF	; 255
   13c9e:	29 f4       	brne	.+10     	; 0x13caa <_ZL14rcvr_datablockPhj+0x24>
   13ca0:	80 91 40 1f 	lds	r24, 0x1F40
   13ca4:	88 23       	and	r24, r24
   13ca6:	c1 f7       	brne	.-16     	; 0x13c98 <_ZL14rcvr_datablockPhj+0x12>
   13ca8:	27 c0       	rjmp	.+78     	; 0x13cf8 <_ZL14rcvr_datablockPhj+0x72>
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
   13caa:	8e 3f       	cpi	r24, 0xFE	; 254
   13cac:	29 f5       	brne	.+74     	; 0x13cf8 <_ZL14rcvr_datablockPhj+0x72>
	
	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
   13cae:	8f ef       	ldi	r24, 0xFF	; 255
   13cb0:	8e bd       	out	0x2e, r24	; 46
   13cb2:	0d b4       	in	r0, 0x2d	; 45
   13cb4:	07 fe       	sbrs	r0, 7
   13cb6:	fd cf       	rjmp	.-6      	; 0x13cb2 <_ZL14rcvr_datablockPhj+0x2c>
   13cb8:	9e b5       	in	r25, 0x2e	; 46
   13cba:	98 83       	st	Y, r25
		rcvr_spi_m(buff++);
   13cbc:	8e bd       	out	0x2e, r24	; 46
   13cbe:	0d b4       	in	r0, 0x2d	; 45
   13cc0:	07 fe       	sbrs	r0, 7
   13cc2:	fd cf       	rjmp	.-6      	; 0x13cbe <_ZL14rcvr_datablockPhj+0x38>
   13cc4:	9e b5       	in	r25, 0x2e	; 46
   13cc6:	99 83       	std	Y+1, r25	; 0x01
		rcvr_spi_m(buff++);
   13cc8:	8e bd       	out	0x2e, r24	; 46
   13cca:	0d b4       	in	r0, 0x2d	; 45
   13ccc:	07 fe       	sbrs	r0, 7
   13cce:	fd cf       	rjmp	.-6      	; 0x13cca <_ZL14rcvr_datablockPhj+0x44>
   13cd0:	9e b5       	in	r25, 0x2e	; 46
   13cd2:	9a 83       	std	Y+2, r25	; 0x02
		rcvr_spi_m(buff++);
   13cd4:	8e bd       	out	0x2e, r24	; 46
   13cd6:	0d b4       	in	r0, 0x2d	; 45
   13cd8:	07 fe       	sbrs	r0, 7
   13cda:	fd cf       	rjmp	.-6      	; 0x13cd6 <_ZL14rcvr_datablockPhj+0x50>
   13cdc:	9e b5       	in	r25, 0x2e	; 46
   13cde:	9b 83       	std	Y+3, r25	; 0x03
	do {				/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
	
	do {							/* Receive the data block into buffer */
   13ce0:	04 50       	subi	r16, 0x04	; 4
   13ce2:	10 40       	sbci	r17, 0x00	; 0
   13ce4:	11 f0       	breq	.+4      	; 0x13cea <_ZL14rcvr_datablockPhj+0x64>
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
   13ce6:	24 96       	adiw	r28, 0x04	; 4
   13ce8:	e3 cf       	rjmp	.-58     	; 0x13cb0 <_ZL14rcvr_datablockPhj+0x2a>
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
		rcvr_spi_m(buff++);
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
   13cea:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
	rcvr_spi();
   13cee:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
	
	return 1;						/* Return with success */
   13cf2:	21 e0       	ldi	r18, 0x01	; 1
   13cf4:	30 e0       	ldi	r19, 0x00	; 0
   13cf6:	02 c0       	rjmp	.+4      	; 0x13cfc <_ZL14rcvr_datablockPhj+0x76>
	
	Timer1 = 20;
	do {				/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* If not valid data token, retutn with error */
   13cf8:	20 e0       	ldi	r18, 0x00	; 0
   13cfa:	30 e0       	ldi	r19, 0x00	; 0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();
	
	return 1;						/* Return with success */
}
   13cfc:	c9 01       	movw	r24, r18
   13cfe:	df 91       	pop	r29
   13d00:	cf 91       	pop	r28
   13d02:	1f 91       	pop	r17
   13d04:	0f 91       	pop	r16
   13d06:	08 95       	ret

00013d08 <_ZL14xmit_datablockPKhh>:
static
int xmit_datablock (
			const BYTE *buff,	/* 512 byte data block to be transmitted */
			BYTE token		/* Data/Stop token */
			)
{
   13d08:	0f 93       	push	r16
   13d0a:	1f 93       	push	r17
   13d0c:	df 93       	push	r29
   13d0e:	cf 93       	push	r28
   13d10:	0f 92       	push	r0
   13d12:	cd b7       	in	r28, 0x3d	; 61
   13d14:	de b7       	in	r29, 0x3e	; 62
   13d16:	8c 01       	movw	r16, r24
	BYTE resp, wc;
	
	
	if (!wait_ready()) return 0;
   13d18:	69 83       	std	Y+1, r22	; 0x01
   13d1a:	0e 94 16 9e 	call	0x13c2c	; 0x13c2c <_ZL10wait_readyv>
   13d1e:	69 81       	ldd	r22, Y+1	; 0x01
   13d20:	00 97       	sbiw	r24, 0x00	; 0
   13d22:	49 f1       	breq	.+82     	; 0x13d76 <_ZL14xmit_datablockPKhh+0x6e>
	
	xmit_spi(token);	/* Xmit data token */
   13d24:	6e bd       	out	0x2e, r22	; 46
   13d26:	0d b4       	in	r0, 0x2d	; 45
   13d28:	07 fe       	sbrs	r0, 7
   13d2a:	fd cf       	rjmp	.-6      	; 0x13d26 <_ZL14xmit_datablockPKhh+0x1e>
	if (token != 0xFD) {	/* Is data token */
   13d2c:	6d 3f       	cpi	r22, 0xFD	; 253
   13d2e:	31 f1       	breq	.+76     	; 0x13d7c <_ZL14xmit_datablockPKhh+0x74>
   13d30:	80 e0       	ldi	r24, 0x00	; 0
		wc = 0;
		do {		/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
   13d32:	f8 01       	movw	r30, r16
   13d34:	90 81       	ld	r25, Z
   13d36:	9e bd       	out	0x2e, r25	; 46
   13d38:	0d b4       	in	r0, 0x2d	; 45
   13d3a:	07 fe       	sbrs	r0, 7
   13d3c:	fd cf       	rjmp	.-6      	; 0x13d38 <_ZL14xmit_datablockPKhh+0x30>
			xmit_spi(*buff++);
   13d3e:	f8 01       	movw	r30, r16
   13d40:	91 81       	ldd	r25, Z+1	; 0x01
   13d42:	9e bd       	out	0x2e, r25	; 46
   13d44:	0d b4       	in	r0, 0x2d	; 45
   13d46:	07 fe       	sbrs	r0, 7
   13d48:	fd cf       	rjmp	.-6      	; 0x13d44 <_ZL14xmit_datablockPKhh+0x3c>
	if (!wait_ready()) return 0;
	
	xmit_spi(token);	/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {		/* Xmit the 512 byte data block to MMC */
   13d4a:	81 50       	subi	r24, 0x01	; 1
   13d4c:	19 f0       	breq	.+6      	; 0x13d54 <_ZL14xmit_datablockPKhh+0x4c>
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
   13d4e:	0e 5f       	subi	r16, 0xFE	; 254
   13d50:	1f 4f       	sbci	r17, 0xFF	; 255
   13d52:	ef cf       	rjmp	.-34     	; 0x13d32 <_ZL14xmit_datablockPKhh+0x2a>
		wc = 0;
		do {		/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
		} while (--wc);
		xmit_spi(0xFF);			/* CRC (Dummy) */
   13d54:	8f ef       	ldi	r24, 0xFF	; 255
   13d56:	8e bd       	out	0x2e, r24	; 46
   13d58:	0d b4       	in	r0, 0x2d	; 45
   13d5a:	07 fe       	sbrs	r0, 7
   13d5c:	fd cf       	rjmp	.-6      	; 0x13d58 <_ZL14xmit_datablockPKhh+0x50>
		xmit_spi(0xFF);
   13d5e:	8f ef       	ldi	r24, 0xFF	; 255
   13d60:	8e bd       	out	0x2e, r24	; 46
   13d62:	0d b4       	in	r0, 0x2d	; 45
   13d64:	07 fe       	sbrs	r0, 7
   13d66:	fd cf       	rjmp	.-6      	; 0x13d62 <_ZL14xmit_datablockPKhh+0x5a>
		resp = rcvr_spi();		/* Reveive data response */
   13d68:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
		if ((resp & 0x1F) != 0x05)	/* If not accepted, return with error */
   13d6c:	8f 71       	andi	r24, 0x1F	; 31
/*-----------------------------------------------------------------------*/
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

static
int xmit_datablock (
   13d6e:	21 e0       	ldi	r18, 0x01	; 1
   13d70:	30 e0       	ldi	r19, 0x00	; 0
   13d72:	85 30       	cpi	r24, 0x05	; 5
   13d74:	29 f0       	breq	.+10     	; 0x13d80 <_ZL14xmit_datablockPKhh+0x78>
			)
{
	BYTE resp, wc;
	
	
	if (!wait_ready()) return 0;
   13d76:	20 e0       	ldi	r18, 0x00	; 0
   13d78:	30 e0       	ldi	r19, 0x00	; 0
   13d7a:	02 c0       	rjmp	.+4      	; 0x13d80 <_ZL14xmit_datablockPKhh+0x78>
		resp = rcvr_spi();		/* Reveive data response */
		if ((resp & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}
	
	return 1;
   13d7c:	21 e0       	ldi	r18, 0x01	; 1
   13d7e:	30 e0       	ldi	r19, 0x00	; 0
}
   13d80:	c9 01       	movw	r24, r18
   13d82:	0f 90       	pop	r0
   13d84:	cf 91       	pop	r28
   13d86:	df 91       	pop	r29
   13d88:	1f 91       	pop	r17
   13d8a:	0f 91       	pop	r16
   13d8c:	08 95       	ret

00013d8e <_ZL8send_cmdhm>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
		   BYTE cmd,		/* Command index */
		   DWORD arg		/* Argument */
		   )
{
   13d8e:	ef 92       	push	r14
   13d90:	ff 92       	push	r15
   13d92:	0f 93       	push	r16
   13d94:	1f 93       	push	r17
   13d96:	cf 93       	push	r28
   13d98:	c8 2f       	mov	r28, r24
   13d9a:	7a 01       	movw	r14, r20
   13d9c:	8b 01       	movw	r16, r22
	BYTE n, res;
	
	
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
   13d9e:	87 ff       	sbrs	r24, 7
   13da0:	0a c0       	rjmp	.+20     	; 0x13db6 <_ZL8send_cmdhm+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
   13da2:	87 e3       	ldi	r24, 0x37	; 55
   13da4:	40 e0       	ldi	r20, 0x00	; 0
   13da6:	50 e0       	ldi	r21, 0x00	; 0
   13da8:	ba 01       	movw	r22, r20
   13daa:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
		if (res > 1) return res;
   13dae:	82 30       	cpi	r24, 0x02	; 2
   13db0:	08 f0       	brcs	.+2      	; 0x13db4 <_ZL8send_cmdhm+0x26>
   13db2:	42 c0       	rjmp	.+132    	; 0x13e38 <_ZL8send_cmdhm+0xaa>
{
	BYTE n, res;
	
	
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
   13db4:	cf 77       	andi	r28, 0x7F	; 127
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}
	
	/* Select the card and wait for ready */
	deselect();
   13db6:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
	if (!select()) return 0xFF;
   13dba:	0e 94 2e 9e 	call	0x13c5c	; 0x13c5c <_ZL6selectv>
   13dbe:	00 97       	sbiw	r24, 0x00	; 0
   13dc0:	d1 f1       	breq	.+116    	; 0x13e36 <_ZL8send_cmdhm+0xa8>
	
	/* Send command packet */
	xmit_spi(0x40 | cmd);			/* Start + Command index */
   13dc2:	8c 2f       	mov	r24, r28
   13dc4:	80 64       	ori	r24, 0x40	; 64
   13dc6:	8e bd       	out	0x2e, r24	; 46
   13dc8:	0d b4       	in	r0, 0x2d	; 45
   13dca:	07 fe       	sbrs	r0, 7
   13dcc:	fd cf       	rjmp	.-6      	; 0x13dc8 <_ZL8send_cmdhm+0x3a>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
   13dce:	81 2f       	mov	r24, r17
   13dd0:	99 27       	eor	r25, r25
   13dd2:	aa 27       	eor	r26, r26
   13dd4:	bb 27       	eor	r27, r27
   13dd6:	8e bd       	out	0x2e, r24	; 46
   13dd8:	0d b4       	in	r0, 0x2d	; 45
   13dda:	07 fe       	sbrs	r0, 7
   13ddc:	fd cf       	rjmp	.-6      	; 0x13dd8 <_ZL8send_cmdhm+0x4a>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
   13dde:	c8 01       	movw	r24, r16
   13de0:	aa 27       	eor	r26, r26
   13de2:	bb 27       	eor	r27, r27
   13de4:	8e bd       	out	0x2e, r24	; 46
   13de6:	0d b4       	in	r0, 0x2d	; 45
   13de8:	07 fe       	sbrs	r0, 7
   13dea:	fd cf       	rjmp	.-6      	; 0x13de6 <_ZL8send_cmdhm+0x58>
	xmit_spi((BYTE)(arg >> 8));		/* Argument[15..8] */
   13dec:	55 27       	eor	r21, r21
   13dee:	41 2f       	mov	r20, r17
   13df0:	30 2f       	mov	r19, r16
   13df2:	2f 2d       	mov	r18, r15
   13df4:	2e bd       	out	0x2e, r18	; 46
   13df6:	0d b4       	in	r0, 0x2d	; 45
   13df8:	07 fe       	sbrs	r0, 7
   13dfa:	fd cf       	rjmp	.-6      	; 0x13df6 <_ZL8send_cmdhm+0x68>
	xmit_spi((BYTE)arg);			/* Argument[7..0] */
   13dfc:	ee bc       	out	0x2e, r14	; 46
   13dfe:	0d b4       	in	r0, 0x2d	; 45
   13e00:	07 fe       	sbrs	r0, 7
   13e02:	fd cf       	rjmp	.-6      	; 0x13dfe <_ZL8send_cmdhm+0x70>
	n = 0x01;				/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
   13e04:	cc 23       	and	r28, r28
   13e06:	21 f0       	breq	.+8      	; 0x13e10 <_ZL8send_cmdhm+0x82>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
   13e08:	c8 30       	cpi	r28, 0x08	; 8
   13e0a:	21 f0       	breq	.+8      	; 0x13e14 <_ZL8send_cmdhm+0x86>
	xmit_spi(0x40 | cmd);			/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));		/* Argument[15..8] */
	xmit_spi((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;				/* Dummy CRC + Stop */
   13e0c:	81 e0       	ldi	r24, 0x01	; 1
   13e0e:	03 c0       	rjmp	.+6      	; 0x13e16 <_ZL8send_cmdhm+0x88>
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
   13e10:	85 e9       	ldi	r24, 0x95	; 149
   13e12:	01 c0       	rjmp	.+2      	; 0x13e16 <_ZL8send_cmdhm+0x88>
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
   13e14:	87 e8       	ldi	r24, 0x87	; 135
	xmit_spi(n);
   13e16:	8e bd       	out	0x2e, r24	; 46
   13e18:	0d b4       	in	r0, 0x2d	; 45
   13e1a:	07 fe       	sbrs	r0, 7
   13e1c:	fd cf       	rjmp	.-6      	; 0x13e18 <_ZL8send_cmdhm+0x8a>
	
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
   13e1e:	cc 30       	cpi	r28, 0x0C	; 12
   13e20:	11 f4       	brne	.+4      	; 0x13e26 <_ZL8send_cmdhm+0x98>
   13e22:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));		/* Argument[15..8] */
	xmit_spi((BYTE)arg);			/* Argument[7..0] */
	n = 0x01;				/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;		/* Valid CRC for CMD8(0x1AA) */
   13e26:	ca e0       	ldi	r28, 0x0A	; 10
	
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;					/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
   13e28:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
	xmit_spi(n);
	
	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;					/* Wait for a valid response in timeout of 10 attempts */
	do
   13e2c:	87 ff       	sbrs	r24, 7
   13e2e:	04 c0       	rjmp	.+8      	; 0x13e38 <_ZL8send_cmdhm+0xaa>
   13e30:	c1 50       	subi	r28, 0x01	; 1
   13e32:	d1 f7       	brne	.-12     	; 0x13e28 <_ZL8send_cmdhm+0x9a>
   13e34:	01 c0       	rjmp	.+2      	; 0x13e38 <_ZL8send_cmdhm+0xaa>
		if (res > 1) return res;
	}
	
	/* Select the card and wait for ready */
	deselect();
	if (!select()) return 0xFF;
   13e36:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);
	
	return res;			/* Return with the response value */
}
   13e38:	cf 91       	pop	r28
   13e3a:	1f 91       	pop	r17
   13e3c:	0f 91       	pop	r16
   13e3e:	ff 90       	pop	r15
   13e40:	ef 90       	pop	r14
   13e42:	08 95       	ret

00013e44 <_Z15disk_initializeh>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
			 BYTE drv		/* Physical drive nmuber (0) */
			 )
{
   13e44:	cf 92       	push	r12
   13e46:	df 92       	push	r13
   13e48:	ef 92       	push	r14
   13e4a:	ff 92       	push	r15
   13e4c:	0f 93       	push	r16
   13e4e:	1f 93       	push	r17
   13e50:	df 93       	push	r29
   13e52:	cf 93       	push	r28
   13e54:	00 d0       	rcall	.+0      	; 0x13e56 <_Z15disk_initializeh+0x12>
   13e56:	0f 92       	push	r0
   13e58:	cd b7       	in	r28, 0x3d	; 61
   13e5a:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];
	
	
	if (drv) return STA_NOINIT;		/* Supports only single drive */
   13e5c:	88 23       	and	r24, r24
   13e5e:	09 f0       	breq	.+2      	; 0x13e62 <_Z15disk_initializeh+0x1e>
   13e60:	9f c0       	rjmp	.+318    	; 0x13fa0 <_Z15disk_initializeh+0x15c>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
   13e62:	80 91 82 11 	lds	r24, 0x1182
   13e66:	81 fd       	sbrc	r24, 1
   13e68:	98 c0       	rjmp	.+304    	; 0x13f9a <_Z15disk_initializeh+0x156>

static
void power_on (void)
{
	// PORTE &= ~0x80;			// Socket power on
	for (Timer1 = 2; Timer1; );	// Wait for 20ms
   13e6a:	82 e0       	ldi	r24, 0x02	; 2
   13e6c:	80 93 40 1f 	sts	0x1F40, r24
   13e70:	80 91 40 1f 	lds	r24, 0x1F40
   13e74:	88 23       	and	r24, r24
   13e76:	e1 f7       	brne	.-8      	; 0x13e70 <_Z15disk_initializeh+0x2c>
	//PORTB = 0b10110101;		// Enable drivers
	//DDRB  = 0b11000111;
	
	SPCR = 0x52;			// Enable SPI function in mode 0
   13e78:	82 e5       	ldi	r24, 0x52	; 82
   13e7a:	8c bd       	out	0x2c, r24	; 44
	SPSR = 0x00; // G: was 0x01;			// SPI 2x mode
   13e7c:	1d bc       	out	0x2d, r1	; 45
	
	if (drv) return STA_NOINIT;		/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
	
	power_on();				/* Force socket power on */
	FCLK_SLOW();
   13e7e:	8c bd       	out	0x2c, r24	; 44
   13e80:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
   13e82:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   13e86:	11 50       	subi	r17, 0x01	; 1
   13e88:	e1 f7       	brne	.-8      	; 0x13e82 <_Z15disk_initializeh+0x3e>
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {		/* Enter Idle state */
   13e8a:	80 e0       	ldi	r24, 0x00	; 0
   13e8c:	40 e0       	ldi	r20, 0x00	; 0
   13e8e:	50 e0       	ldi	r21, 0x00	; 0
   13e90:	ba 01       	movw	r22, r20
   13e92:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13e96:	81 30       	cpi	r24, 0x01	; 1
   13e98:	09 f0       	breq	.+2      	; 0x13e9c <_Z15disk_initializeh+0x58>
   13e9a:	95 c0       	rjmp	.+298    	; 0x13fc6 <_Z15disk_initializeh+0x182>
		Timer1 = 100;			/* Initialization timeout of 1000 msec */
   13e9c:	84 e6       	ldi	r24, 0x64	; 100
   13e9e:	80 93 40 1f 	sts	0x1F40, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
   13ea2:	88 e0       	ldi	r24, 0x08	; 8
   13ea4:	4a ea       	ldi	r20, 0xAA	; 170
   13ea6:	51 e0       	ldi	r21, 0x01	; 1
   13ea8:	60 e0       	ldi	r22, 0x00	; 0
   13eaa:	70 e0       	ldi	r23, 0x00	; 0
   13eac:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13eb0:	81 30       	cpi	r24, 0x01	; 1
   13eb2:	f1 f5       	brne	.+124    	; 0x13f30 <_Z15disk_initializeh+0xec>
   13eb4:	8e 01       	movw	r16, r28
   13eb6:	0f 5f       	subi	r16, 0xFF	; 255
   13eb8:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
   13eba:	35 e0       	ldi	r19, 0x05	; 5
   13ebc:	e3 2e       	mov	r14, r19
   13ebe:	f1 2c       	mov	r15, r1
   13ec0:	ec 0e       	add	r14, r28
   13ec2:	fd 1e       	adc	r15, r29
   13ec4:	68 01       	movw	r12, r16
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {		/* Enter Idle state */
		Timer1 = 100;			/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();  /* Get trailing return value of R7 resp */
   13ec6:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   13eca:	f6 01       	movw	r30, r12
   13ecc:	81 93       	st	Z+, r24
   13ece:	6f 01       	movw	r12, r30
   13ed0:	ee 15       	cp	r30, r14
   13ed2:	ff 05       	cpc	r31, r15
   13ed4:	c1 f7       	brne	.-16     	; 0x13ec6 <_Z15disk_initializeh+0x82>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {	      /* The card can work at vdd range of 2.7-3.6V */
   13ed6:	8b 81       	ldd	r24, Y+3	; 0x03
   13ed8:	81 30       	cpi	r24, 0x01	; 1
   13eda:	09 f0       	breq	.+2      	; 0x13ede <_Z15disk_initializeh+0x9a>
   13edc:	74 c0       	rjmp	.+232    	; 0x13fc6 <_Z15disk_initializeh+0x182>
   13ede:	8c 81       	ldd	r24, Y+4	; 0x04
   13ee0:	8a 3a       	cpi	r24, 0xAA	; 170
   13ee2:	09 f0       	breq	.+2      	; 0x13ee6 <_Z15disk_initializeh+0xa2>
   13ee4:	70 c0       	rjmp	.+224    	; 0x13fc6 <_Z15disk_initializeh+0x182>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
   13ee6:	80 91 40 1f 	lds	r24, 0x1F40
   13eea:	88 23       	and	r24, r24
   13eec:	09 f4       	brne	.+2      	; 0x13ef0 <_Z15disk_initializeh+0xac>
   13eee:	66 c0       	rjmp	.+204    	; 0x13fbc <_Z15disk_initializeh+0x178>
   13ef0:	89 ea       	ldi	r24, 0xA9	; 169
   13ef2:	40 e0       	ldi	r20, 0x00	; 0
   13ef4:	50 e0       	ldi	r21, 0x00	; 0
   13ef6:	60 e0       	ldi	r22, 0x00	; 0
   13ef8:	70 e4       	ldi	r23, 0x40	; 64
   13efa:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13efe:	88 23       	and	r24, r24
   13f00:	91 f7       	brne	.-28     	; 0x13ee6 <_Z15disk_initializeh+0xa2>
   13f02:	5c c0       	rjmp	.+184    	; 0x13fbc <_Z15disk_initializeh+0x178>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {  /* Check CCS bit in the OCR */
   13f04:	8a e3       	ldi	r24, 0x3A	; 58
   13f06:	40 e0       	ldi	r20, 0x00	; 0
   13f08:	50 e0       	ldi	r21, 0x00	; 0
   13f0a:	ba 01       	movw	r22, r20
   13f0c:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13f10:	88 23       	and	r24, r24
   13f12:	09 f0       	breq	.+2      	; 0x13f16 <_Z15disk_initializeh+0xd2>
   13f14:	58 c0       	rjmp	.+176    	; 0x13fc6 <_Z15disk_initializeh+0x182>
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
   13f16:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   13f1a:	f8 01       	movw	r30, r16
   13f1c:	81 93       	st	Z+, r24
   13f1e:	8f 01       	movw	r16, r30
   13f20:	ee 15       	cp	r30, r14
   13f22:	ff 05       	cpc	r31, r15
   13f24:	c1 f7       	brne	.-16     	; 0x13f16 <_Z15disk_initializeh+0xd2>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
   13f26:	89 81       	ldd	r24, Y+1	; 0x01
   13f28:	86 ff       	sbrs	r24, 6
   13f2a:	26 c0       	rjmp	.+76     	; 0x13f78 <_Z15disk_initializeh+0x134>
   13f2c:	0c e0       	ldi	r16, 0x0C	; 12
   13f2e:	25 c0       	rjmp	.+74     	; 0x13f7a <_Z15disk_initializeh+0x136>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
   13f30:	89 ea       	ldi	r24, 0xA9	; 169
   13f32:	40 e0       	ldi	r20, 0x00	; 0
   13f34:	50 e0       	ldi	r21, 0x00	; 0
   13f36:	ba 01       	movw	r22, r20
   13f38:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13f3c:	82 30       	cpi	r24, 0x02	; 2
   13f3e:	18 f4       	brcc	.+6      	; 0x13f46 <_Z15disk_initializeh+0x102>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
   13f40:	02 e0       	ldi	r16, 0x02	; 2
   13f42:	19 ea       	ldi	r17, 0xA9	; 169
   13f44:	02 c0       	rjmp	.+4      	; 0x13f4a <_Z15disk_initializeh+0x106>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
   13f46:	01 e0       	ldi	r16, 0x01	; 1
   13f48:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));	/* Wait for leaving idle state */
   13f4a:	80 91 40 1f 	lds	r24, 0x1F40
   13f4e:	88 23       	and	r24, r24
   13f50:	e1 f1       	breq	.+120    	; 0x13fca <_Z15disk_initializeh+0x186>
   13f52:	81 2f       	mov	r24, r17
   13f54:	40 e0       	ldi	r20, 0x00	; 0
   13f56:	50 e0       	ldi	r21, 0x00	; 0
   13f58:	ba 01       	movw	r22, r20
   13f5a:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13f5e:	88 23       	and	r24, r24
   13f60:	a1 f7       	brne	.-24     	; 0x13f4a <_Z15disk_initializeh+0x106>
   13f62:	33 c0       	rjmp	.+102    	; 0x13fca <_Z15disk_initializeh+0x186>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
   13f64:	80 e1       	ldi	r24, 0x10	; 16
   13f66:	40 e0       	ldi	r20, 0x00	; 0
   13f68:	52 e0       	ldi	r21, 0x02	; 2
   13f6a:	60 e0       	ldi	r22, 0x00	; 0
   13f6c:	70 e0       	ldi	r23, 0x00	; 0
   13f6e:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   13f72:	88 23       	and	r24, r24
   13f74:	11 f0       	breq	.+4      	; 0x13f7a <_Z15disk_initializeh+0x136>
   13f76:	27 c0       	rjmp	.+78     	; 0x13fc6 <_Z15disk_initializeh+0x182>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();  /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {	      /* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {  /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
   13f78:	04 e0       	ldi	r16, 0x04	; 4
			while (Timer1 && send_cmd(cmd, 0));	/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
		}
	}
	CardType = ty;
   13f7a:	00 93 42 1f 	sts	0x1F42, r16
	deselect();
   13f7e:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
	
	if (ty) {			/* Initialization succeded */
   13f82:	00 23       	and	r16, r16
   13f84:	41 f0       	breq	.+16     	; 0x13f96 <_Z15disk_initializeh+0x152>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT */
   13f86:	80 91 82 11 	lds	r24, 0x1182
   13f8a:	8e 7f       	andi	r24, 0xFE	; 254
   13f8c:	80 93 82 11 	sts	0x1182, r24
		FCLK_FAST();
   13f90:	80 e5       	ldi	r24, 0x50	; 80
   13f92:	8c bd       	out	0x2c, r24	; 44
   13f94:	02 c0       	rjmp	.+4      	; 0x13f9a <_Z15disk_initializeh+0x156>
	} else {			/* Initialization failed */
		power_off();
   13f96:	0e 94 3c 9e 	call	0x13c78	; 0x13c78 <_ZL9power_offv>
	}
	
	return Stat;
   13f9a:	80 91 82 11 	lds	r24, 0x1182
   13f9e:	01 c0       	rjmp	.+2      	; 0x13fa2 <_Z15disk_initializeh+0x15e>
			 )
{
	BYTE n, cmd, ty, ocr[4];
	
	
	if (drv) return STA_NOINIT;		/* Supports only single drive */
   13fa0:	81 e0       	ldi	r24, 0x01	; 1
	} else {			/* Initialization failed */
		power_off();
	}
	
	return Stat;
}
   13fa2:	0f 90       	pop	r0
   13fa4:	0f 90       	pop	r0
   13fa6:	0f 90       	pop	r0
   13fa8:	0f 90       	pop	r0
   13faa:	cf 91       	pop	r28
   13fac:	df 91       	pop	r29
   13fae:	1f 91       	pop	r17
   13fb0:	0f 91       	pop	r16
   13fb2:	ff 90       	pop	r15
   13fb4:	ef 90       	pop	r14
   13fb6:	df 90       	pop	r13
   13fb8:	cf 90       	pop	r12
   13fba:	08 95       	ret
		Timer1 = 100;			/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();  /* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {	      /* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {  /* Check CCS bit in the OCR */
   13fbc:	80 91 40 1f 	lds	r24, 0x1F40
   13fc0:	88 23       	and	r24, r24
   13fc2:	09 f0       	breq	.+2      	; 0x13fc6 <_Z15disk_initializeh+0x182>
   13fc4:	9f cf       	rjmp	.-194    	; 0x13f04 <_Z15disk_initializeh+0xc0>
	
	power_on();				/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
	
	ty = 0;
   13fc6:	00 e0       	ldi	r16, 0x00	; 0
   13fc8:	d8 cf       	rjmp	.-80     	; 0x13f7a <_Z15disk_initializeh+0x136>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));	/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
   13fca:	80 91 40 1f 	lds	r24, 0x1F40
   13fce:	88 23       	and	r24, r24
   13fd0:	d1 f3       	breq	.-12     	; 0x13fc6 <_Z15disk_initializeh+0x182>
   13fd2:	c8 cf       	rjmp	.-112    	; 0x13f64 <_Z15disk_initializeh+0x120>

00013fd4 <_Z11disk_statush>:

DSTATUS disk_status (
					 BYTE drv		/* Physical drive nmuber (0) */
					 )
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
   13fd4:	88 23       	and	r24, r24
   13fd6:	19 f4       	brne	.+6      	; 0x13fde <_Z11disk_statush+0xa>
	return Stat;
   13fd8:	80 91 82 11 	lds	r24, 0x1182
   13fdc:	08 95       	ret

DSTATUS disk_status (
					 BYTE drv		/* Physical drive nmuber (0) */
					 )
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
   13fde:	81 e0       	ldi	r24, 0x01	; 1
	return Stat;
}
   13fe0:	08 95       	ret

00013fe2 <_Z9disk_readhPhmh>:
				   BYTE drv,			/* Physical drive nmuber (0) */
				   BYTE *buff,			/* Pointer to the data buffer to store read data */
				   DWORD sector,		/* Start sector number (LBA) */
				   BYTE count			/* Sector count (1..255) */
				   )
{
   13fe2:	0f 93       	push	r16
   13fe4:	cf 93       	push	r28
   13fe6:	df 93       	push	r29
   13fe8:	eb 01       	movw	r28, r22
   13fea:	ba 01       	movw	r22, r20
   13fec:	a9 01       	movw	r20, r18
	if (drv || !count) return RES_PARERR;
   13fee:	88 23       	and	r24, r24
   13ff0:	09 f0       	breq	.+2      	; 0x13ff4 <_Z9disk_readhPhmh+0x12>
   13ff2:	43 c0       	rjmp	.+134    	; 0x1407a <_Z9disk_readhPhmh+0x98>
   13ff4:	00 23       	and	r16, r16
   13ff6:	09 f4       	brne	.+2      	; 0x13ffa <_Z9disk_readhPhmh+0x18>
   13ff8:	40 c0       	rjmp	.+128    	; 0x1407a <_Z9disk_readhPhmh+0x98>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   13ffa:	80 91 82 11 	lds	r24, 0x1182
   13ffe:	80 fd       	sbrc	r24, 0
   14000:	3f c0       	rjmp	.+126    	; 0x14080 <_Z9disk_readhPhmh+0x9e>
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
   14002:	80 91 42 1f 	lds	r24, 0x1F42
   14006:	83 fd       	sbrc	r24, 3
   14008:	07 c0       	rjmp	.+14     	; 0x14018 <_Z9disk_readhPhmh+0x36>
   1400a:	e9 e0       	ldi	r30, 0x09	; 9
   1400c:	44 0f       	add	r20, r20
   1400e:	55 1f       	adc	r21, r21
   14010:	66 1f       	adc	r22, r22
   14012:	77 1f       	adc	r23, r23
   14014:	ea 95       	dec	r30
   14016:	d1 f7       	brne	.-12     	; 0x1400c <_Z9disk_readhPhmh+0x2a>
	
	if (count == 1) {	/* Single block read */
   14018:	01 30       	cpi	r16, 0x01	; 1
   1401a:	69 f4       	brne	.+26     	; 0x14036 <_Z9disk_readhPhmh+0x54>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
   1401c:	81 e1       	ldi	r24, 0x11	; 17
   1401e:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14022:	88 23       	and	r24, r24
   14024:	09 f5       	brne	.+66     	; 0x14068 <_Z9disk_readhPhmh+0x86>
			&& rcvr_datablock(buff, 512))
   14026:	ce 01       	movw	r24, r28
   14028:	60 e0       	ldi	r22, 0x00	; 0
   1402a:	72 e0       	ldi	r23, 0x02	; 2
   1402c:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
	
	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
   14030:	00 97       	sbiw	r24, 0x00	; 0
   14032:	c9 f4       	brne	.+50     	; 0x14066 <_Z9disk_readhPhmh+0x84>
   14034:	19 c0       	rjmp	.+50     	; 0x14068 <_Z9disk_readhPhmh+0x86>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
   14036:	82 e1       	ldi	r24, 0x12	; 18
   14038:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   1403c:	88 23       	and	r24, r24
   1403e:	a1 f4       	brne	.+40     	; 0x14068 <_Z9disk_readhPhmh+0x86>
			do {
				if (!rcvr_datablock(buff, 512)) break;
   14040:	ce 01       	movw	r24, r28
   14042:	60 e0       	ldi	r22, 0x00	; 0
   14044:	72 e0       	ldi	r23, 0x02	; 2
   14046:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
   1404a:	00 97       	sbiw	r24, 0x00	; 0
   1404c:	29 f0       	breq	.+10     	; 0x14058 <_Z9disk_readhPhmh+0x76>
			&& rcvr_datablock(buff, 512))
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
			do {
   1404e:	01 50       	subi	r16, 0x01	; 1
   14050:	19 f0       	breq	.+6      	; 0x14058 <_Z9disk_readhPhmh+0x76>
				if (!rcvr_datablock(buff, 512)) break;
				buff += 512;
   14052:	c0 50       	subi	r28, 0x00	; 0
   14054:	de 4f       	sbci	r29, 0xFE	; 254
   14056:	f4 cf       	rjmp	.-24     	; 0x14040 <_Z9disk_readhPhmh+0x5e>
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
   14058:	8c e0       	ldi	r24, 0x0C	; 12
   1405a:	40 e0       	ldi	r20, 0x00	; 0
   1405c:	50 e0       	ldi	r21, 0x00	; 0
   1405e:	ba 01       	movw	r22, r20
   14060:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14064:	01 c0       	rjmp	.+2      	; 0x14068 <_Z9disk_readhPhmh+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
	
	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
   14066:	00 e0       	ldi	r16, 0x00	; 0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
   14068:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
				   BYTE *buff,			/* Pointer to the data buffer to store read data */
				   DWORD sector,		/* Start sector number (LBA) */
				   BYTE count			/* Sector count (1..255) */
				   )
{
	if (drv || !count) return RES_PARERR;
   1406c:	21 e0       	ldi	r18, 0x01	; 1
   1406e:	30 e0       	ldi	r19, 0x00	; 0
   14070:	00 23       	and	r16, r16
   14072:	41 f4       	brne	.+16     	; 0x14084 <_Z9disk_readhPhmh+0xa2>
   14074:	20 e0       	ldi	r18, 0x00	; 0
   14076:	30 e0       	ldi	r19, 0x00	; 0
   14078:	05 c0       	rjmp	.+10     	; 0x14084 <_Z9disk_readhPhmh+0xa2>
   1407a:	24 e0       	ldi	r18, 0x04	; 4
   1407c:	30 e0       	ldi	r19, 0x00	; 0
   1407e:	02 c0       	rjmp	.+4      	; 0x14084 <_Z9disk_readhPhmh+0xa2>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   14080:	23 e0       	ldi	r18, 0x03	; 3
   14082:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();
	
	return count ? RES_ERROR : RES_OK;
}
   14084:	c9 01       	movw	r24, r18
   14086:	df 91       	pop	r29
   14088:	cf 91       	pop	r28
   1408a:	0f 91       	pop	r16
   1408c:	08 95       	ret

0001408e <_Z10disk_writehPKhmh>:
					BYTE drv,			/* Physical drive nmuber (0) */
					const BYTE *buff,	/* Pointer to the data to be written */
					DWORD sector,		/* Start sector number (LBA) */
					BYTE count			/* Sector count (1..255) */
					)
{
   1408e:	cf 92       	push	r12
   14090:	df 92       	push	r13
   14092:	ef 92       	push	r14
   14094:	ff 92       	push	r15
   14096:	0f 93       	push	r16
   14098:	cf 93       	push	r28
   1409a:	df 93       	push	r29
   1409c:	eb 01       	movw	r28, r22
   1409e:	69 01       	movw	r12, r18
   140a0:	7a 01       	movw	r14, r20
	if (drv || !count) return RES_PARERR;
   140a2:	88 23       	and	r24, r24
   140a4:	09 f0       	breq	.+2      	; 0x140a8 <_Z10disk_writehPKhmh+0x1a>
   140a6:	58 c0       	rjmp	.+176    	; 0x14158 <_Z10disk_writehPKhmh+0xca>
   140a8:	00 23       	and	r16, r16
   140aa:	09 f4       	brne	.+2      	; 0x140ae <_Z10disk_writehPKhmh+0x20>
   140ac:	55 c0       	rjmp	.+170    	; 0x14158 <_Z10disk_writehPKhmh+0xca>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   140ae:	80 91 82 11 	lds	r24, 0x1182
   140b2:	80 fd       	sbrc	r24, 0
   140b4:	54 c0       	rjmp	.+168    	; 0x1415e <_Z10disk_writehPKhmh+0xd0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
   140b6:	80 91 82 11 	lds	r24, 0x1182
   140ba:	82 fd       	sbrc	r24, 2
   140bc:	53 c0       	rjmp	.+166    	; 0x14164 <_Z10disk_writehPKhmh+0xd6>
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
   140be:	80 91 42 1f 	lds	r24, 0x1F42
   140c2:	90 e0       	ldi	r25, 0x00	; 0
   140c4:	83 fd       	sbrc	r24, 3
   140c6:	07 c0       	rjmp	.+14     	; 0x140d6 <_Z10disk_writehPKhmh+0x48>
   140c8:	f9 e0       	ldi	r31, 0x09	; 9
   140ca:	cc 0c       	add	r12, r12
   140cc:	dd 1c       	adc	r13, r13
   140ce:	ee 1c       	adc	r14, r14
   140d0:	ff 1c       	adc	r15, r15
   140d2:	fa 95       	dec	r31
   140d4:	d1 f7       	brne	.-12     	; 0x140ca <_Z10disk_writehPKhmh+0x3c>
	
	if (count == 1) {	/* Single block write */
   140d6:	01 30       	cpi	r16, 0x01	; 1
   140d8:	71 f4       	brne	.+28     	; 0x140f6 <_Z10disk_writehPKhmh+0x68>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
   140da:	88 e1       	ldi	r24, 0x18	; 24
   140dc:	b7 01       	movw	r22, r14
   140de:	a6 01       	movw	r20, r12
   140e0:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   140e4:	88 23       	and	r24, r24
   140e6:	79 f5       	brne	.+94     	; 0x14146 <_Z10disk_writehPKhmh+0xb8>
			&& xmit_datablock(buff, 0xFE))
   140e8:	ce 01       	movw	r24, r28
   140ea:	6e ef       	ldi	r22, 0xFE	; 254
   140ec:	0e 94 84 9e 	call	0x13d08	; 0x13d08 <_ZL14xmit_datablockPKhh>
	if (Stat & STA_PROTECT) return RES_WRPRT;
	
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
	
	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
   140f0:	00 97       	sbiw	r24, 0x00	; 0
   140f2:	31 f5       	brne	.+76     	; 0x14140 <_Z10disk_writehPKhmh+0xb2>
   140f4:	28 c0       	rjmp	.+80     	; 0x14146 <_Z10disk_writehPKhmh+0xb8>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
   140f6:	86 70       	andi	r24, 0x06	; 6
   140f8:	90 70       	andi	r25, 0x00	; 0
   140fa:	00 97       	sbiw	r24, 0x00	; 0
   140fc:	39 f0       	breq	.+14     	; 0x1410c <_Z10disk_writehPKhmh+0x7e>
   140fe:	40 2f       	mov	r20, r16
   14100:	50 e0       	ldi	r21, 0x00	; 0
   14102:	60 e0       	ldi	r22, 0x00	; 0
   14104:	70 e0       	ldi	r23, 0x00	; 0
   14106:	87 e9       	ldi	r24, 0x97	; 151
   14108:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
   1410c:	89 e1       	ldi	r24, 0x19	; 25
   1410e:	b7 01       	movw	r22, r14
   14110:	a6 01       	movw	r20, r12
   14112:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14116:	88 23       	and	r24, r24
   14118:	b1 f4       	brne	.+44     	; 0x14146 <_Z10disk_writehPKhmh+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
   1411a:	ce 01       	movw	r24, r28
   1411c:	6c ef       	ldi	r22, 0xFC	; 252
   1411e:	0e 94 84 9e 	call	0x13d08	; 0x13d08 <_ZL14xmit_datablockPKhh>
   14122:	00 97       	sbiw	r24, 0x00	; 0
   14124:	29 f0       	breq	.+10     	; 0x14130 <_Z10disk_writehPKhmh+0xa2>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
   14126:	01 50       	subi	r16, 0x01	; 1
   14128:	19 f0       	breq	.+6      	; 0x14130 <_Z10disk_writehPKhmh+0xa2>
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
   1412a:	c0 50       	subi	r28, 0x00	; 0
   1412c:	de 4f       	sbci	r29, 0xFE	; 254
   1412e:	f5 cf       	rjmp	.-22     	; 0x1411a <_Z10disk_writehPKhmh+0x8c>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
   14130:	80 e0       	ldi	r24, 0x00	; 0
   14132:	90 e0       	ldi	r25, 0x00	; 0
   14134:	6d ef       	ldi	r22, 0xFD	; 253
   14136:	0e 94 84 9e 	call	0x13d08	; 0x13d08 <_ZL14xmit_datablockPKhh>
   1413a:	00 97       	sbiw	r24, 0x00	; 0
   1413c:	19 f0       	breq	.+6      	; 0x14144 <_Z10disk_writehPKhmh+0xb6>
   1413e:	03 c0       	rjmp	.+6      	; 0x14146 <_Z10disk_writehPKhmh+0xb8>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
	
	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
   14140:	00 e0       	ldi	r16, 0x00	; 0
   14142:	01 c0       	rjmp	.+2      	; 0x14146 <_Z10disk_writehPKhmh+0xb8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
   14144:	01 e0       	ldi	r16, 0x01	; 1
		}
	}
	deselect();
   14146:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
					const BYTE *buff,	/* Pointer to the data to be written */
					DWORD sector,		/* Start sector number (LBA) */
					BYTE count			/* Sector count (1..255) */
					)
{
	if (drv || !count) return RES_PARERR;
   1414a:	21 e0       	ldi	r18, 0x01	; 1
   1414c:	30 e0       	ldi	r19, 0x00	; 0
   1414e:	00 23       	and	r16, r16
   14150:	59 f4       	brne	.+22     	; 0x14168 <_Z10disk_writehPKhmh+0xda>
   14152:	20 e0       	ldi	r18, 0x00	; 0
   14154:	30 e0       	ldi	r19, 0x00	; 0
   14156:	08 c0       	rjmp	.+16     	; 0x14168 <_Z10disk_writehPKhmh+0xda>
   14158:	24 e0       	ldi	r18, 0x04	; 4
   1415a:	30 e0       	ldi	r19, 0x00	; 0
   1415c:	05 c0       	rjmp	.+10     	; 0x14168 <_Z10disk_writehPKhmh+0xda>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
   1415e:	23 e0       	ldi	r18, 0x03	; 3
   14160:	30 e0       	ldi	r19, 0x00	; 0
   14162:	02 c0       	rjmp	.+4      	; 0x14168 <_Z10disk_writehPKhmh+0xda>
	if (Stat & STA_PROTECT) return RES_WRPRT;
   14164:	22 e0       	ldi	r18, 0x02	; 2
   14166:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	deselect();
	
	return count ? RES_ERROR : RES_OK;
}
   14168:	c9 01       	movw	r24, r18
   1416a:	df 91       	pop	r29
   1416c:	cf 91       	pop	r28
   1416e:	0f 91       	pop	r16
   14170:	ff 90       	pop	r15
   14172:	ef 90       	pop	r14
   14174:	df 90       	pop	r13
   14176:	cf 90       	pop	r12
   14178:	08 95       	ret

0001417a <_Z10disk_ioctlhhPh>:
DRESULT disk_ioctl (
			BYTE drv,		/* Physical drive nmuber (0) */
			BYTE ctrl,		/* Control code */
			BYTE *buff		/* Buffer to send/receive control data */
			)
{
   1417a:	ff 92       	push	r15
   1417c:	0f 93       	push	r16
   1417e:	1f 93       	push	r17
   14180:	df 93       	push	r29
   14182:	cf 93       	push	r28
   14184:	cd b7       	in	r28, 0x3d	; 61
   14186:	de b7       	in	r29, 0x3e	; 62
   14188:	60 97       	sbiw	r28, 0x10	; 16
   1418a:	0f b6       	in	r0, 0x3f	; 63
   1418c:	f8 94       	cli
   1418e:	de bf       	out	0x3e, r29	; 62
   14190:	0f be       	out	0x3f, r0	; 63
   14192:	cd bf       	out	0x3d, r28	; 61
   14194:	8a 01       	movw	r16, r20
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;
	
	
	if (drv) return RES_PARERR;
   14196:	88 23       	and	r24, r24
   14198:	09 f0       	breq	.+2      	; 0x1419c <_Z10disk_ioctlhhPh+0x22>
   1419a:	66 c1       	rjmp	.+716    	; 0x14468 <_Z10disk_ioctlhhPh+0x2ee>
	
	res = RES_ERROR;
	
	if (ctrl == CTRL_POWER) {
   1419c:	65 30       	cpi	r22, 0x05	; 5
   1419e:	a9 f4       	brne	.+42     	; 0x141ca <_Z10disk_ioctlhhPh+0x50>
		switch (ptr[0]) {
   141a0:	fa 01       	movw	r30, r20
   141a2:	80 81       	ld	r24, Z
   141a4:	88 23       	and	r24, r24
   141a6:	21 f0       	breq	.+8      	; 0x141b0 <_Z10disk_ioctlhhPh+0x36>
   141a8:	81 30       	cpi	r24, 0x01	; 1
   141aa:	09 f0       	breq	.+2      	; 0x141ae <_Z10disk_ioctlhhPh+0x34>
   141ac:	5d c1       	rjmp	.+698    	; 0x14468 <_Z10disk_ioctlhhPh+0x2ee>
   141ae:	03 c0       	rjmp	.+6      	; 0x141b6 <_Z10disk_ioctlhhPh+0x3c>
			case 0:		/* Sub control code (POWER_OFF) */
				power_off();		/* Power off */
   141b0:	0e 94 3c 9e 	call	0x13c78	; 0x13c78 <_ZL9power_offv>
   141b4:	07 c0       	rjmp	.+14     	; 0x141c4 <_Z10disk_ioctlhhPh+0x4a>
/* is nothing to do in these functions and chk_power always returns 1.   */

static
int power_status(void)		/* Socket power state: 0=off, 1=on */
{
	return (PORTE & 0x80) ? 0 : 1;
   141b6:	8e b1       	in	r24, 0x0e	; 14
			case 0:		/* Sub control code (POWER_OFF) */
				power_off();		/* Power off */
				res = RES_OK;
				break;
			case 1:		/* Sub control code (POWER_GET) */
				ptr[1] = (BYTE)power_status();
   141b8:	80 95       	com	r24
   141ba:	88 1f       	adc	r24, r24
   141bc:	88 27       	eor	r24, r24
   141be:	88 1f       	adc	r24, r24
   141c0:	fa 01       	movw	r30, r20
   141c2:	81 83       	std	Z+1, r24	; 0x01
				res = RES_OK;
   141c4:	00 e0       	ldi	r16, 0x00	; 0
   141c6:	10 e0       	ldi	r17, 0x00	; 0
				break;
   141c8:	54 c1       	rjmp	.+680    	; 0x14472 <_Z10disk_ioctlhhPh+0x2f8>
			default :
				res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
   141ca:	80 91 82 11 	lds	r24, 0x1182
   141ce:	80 fd       	sbrc	r24, 0
   141d0:	4e c1       	rjmp	.+668    	; 0x1446e <_Z10disk_ioctlhhPh+0x2f4>
		
		switch (ctrl) {
   141d2:	6a 30       	cpi	r22, 0x0A	; 10
   141d4:	09 f4       	brne	.+2      	; 0x141d8 <_Z10disk_ioctlhhPh+0x5e>
   141d6:	08 c1       	rjmp	.+528    	; 0x143e8 <_Z10disk_ioctlhhPh+0x26e>
   141d8:	6b 30       	cpi	r22, 0x0B	; 11
   141da:	58 f4       	brcc	.+22     	; 0x141f2 <_Z10disk_ioctlhhPh+0x78>
   141dc:	61 30       	cpi	r22, 0x01	; 1
   141de:	f1 f0       	breq	.+60     	; 0x1421c <_Z10disk_ioctlhhPh+0xa2>
   141e0:	61 30       	cpi	r22, 0x01	; 1
   141e2:	a0 f0       	brcs	.+40     	; 0x1420c <_Z10disk_ioctlhhPh+0x92>
   141e4:	62 30       	cpi	r22, 0x02	; 2
   141e6:	09 f4       	brne	.+2      	; 0x141ea <_Z10disk_ioctlhhPh+0x70>
   141e8:	73 c0       	rjmp	.+230    	; 0x142d0 <_Z10disk_ioctlhhPh+0x156>
   141ea:	63 30       	cpi	r22, 0x03	; 3
   141ec:	09 f0       	breq	.+2      	; 0x141f0 <_Z10disk_ioctlhhPh+0x76>
   141ee:	34 c1       	rjmp	.+616    	; 0x14458 <_Z10disk_ioctlhhPh+0x2de>
   141f0:	75 c0       	rjmp	.+234    	; 0x142dc <_Z10disk_ioctlhhPh+0x162>
   141f2:	6c 30       	cpi	r22, 0x0C	; 12
   141f4:	09 f4       	brne	.+2      	; 0x141f8 <_Z10disk_ioctlhhPh+0x7e>
   141f6:	ff c0       	rjmp	.+510    	; 0x143f6 <_Z10disk_ioctlhhPh+0x27c>
   141f8:	6c 30       	cpi	r22, 0x0C	; 12
   141fa:	08 f4       	brcc	.+2      	; 0x141fe <_Z10disk_ioctlhhPh+0x84>
   141fc:	fa c0       	rjmp	.+500    	; 0x143f2 <_Z10disk_ioctlhhPh+0x278>
   141fe:	6d 30       	cpi	r22, 0x0D	; 13
   14200:	09 f4       	brne	.+2      	; 0x14204 <_Z10disk_ioctlhhPh+0x8a>
   14202:	06 c1       	rjmp	.+524    	; 0x14410 <_Z10disk_ioctlhhPh+0x296>
   14204:	6e 30       	cpi	r22, 0x0E	; 14
   14206:	09 f0       	breq	.+2      	; 0x1420a <_Z10disk_ioctlhhPh+0x90>
   14208:	27 c1       	rjmp	.+590    	; 0x14458 <_Z10disk_ioctlhhPh+0x2de>
   1420a:	14 c1       	rjmp	.+552    	; 0x14434 <_Z10disk_ioctlhhPh+0x2ba>
			case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
				if (select()) {
   1420c:	0e 94 2e 9e 	call	0x13c5c	; 0x13c5c <_ZL6selectv>
   14210:	00 97       	sbiw	r24, 0x00	; 0
   14212:	09 f4       	brne	.+2      	; 0x14216 <_Z10disk_ioctlhhPh+0x9c>
   14214:	3b c1       	rjmp	.+630    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
					deselect();
   14216:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
   1421a:	21 c1       	rjmp	.+578    	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
					res = RES_OK;
				}
				break;
				
			case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
   1421c:	89 e0       	ldi	r24, 0x09	; 9
   1421e:	40 e0       	ldi	r20, 0x00	; 0
   14220:	50 e0       	ldi	r21, 0x00	; 0
   14222:	ba 01       	movw	r22, r20
   14224:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14228:	88 23       	and	r24, r24
   1422a:	09 f0       	breq	.+2      	; 0x1422e <_Z10disk_ioctlhhPh+0xb4>
   1422c:	2f c1       	rjmp	.+606    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
   1422e:	ce 01       	movw	r24, r28
   14230:	01 96       	adiw	r24, 0x01	; 1
   14232:	60 e1       	ldi	r22, 0x10	; 16
   14234:	70 e0       	ldi	r23, 0x00	; 0
   14236:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
   1423a:	00 97       	sbiw	r24, 0x00	; 0
   1423c:	09 f4       	brne	.+2      	; 0x14240 <_Z10disk_ioctlhhPh+0xc6>
   1423e:	26 c1       	rjmp	.+588    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
					if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
   14240:	49 81       	ldd	r20, Y+1	; 0x01
   14242:	50 e0       	ldi	r21, 0x00	; 0
   14244:	36 e0       	ldi	r19, 0x06	; 6
   14246:	55 95       	asr	r21
   14248:	47 95       	ror	r20
   1424a:	3a 95       	dec	r19
   1424c:	e1 f7       	brne	.-8      	; 0x14246 <_Z10disk_ioctlhhPh+0xcc>
   1424e:	6a 85       	ldd	r22, Y+10	; 0x0a
   14250:	29 85       	ldd	r18, Y+9	; 0x09
   14252:	41 30       	cpi	r20, 0x01	; 1
   14254:	51 05       	cpc	r21, r1
   14256:	89 f4       	brne	.+34     	; 0x1427a <_Z10disk_ioctlhhPh+0x100>
						csize = csd[9] + ((WORD)csd[8] << 8) + 1;
   14258:	86 2f       	mov	r24, r22
   1425a:	90 e0       	ldi	r25, 0x00	; 0
   1425c:	01 96       	adiw	r24, 0x01	; 1
   1425e:	52 2f       	mov	r21, r18
   14260:	40 e0       	ldi	r20, 0x00	; 0
   14262:	84 0f       	add	r24, r20
   14264:	95 1f       	adc	r25, r21
						*(DWORD*)buff = (DWORD)csize << 10;
   14266:	a0 e0       	ldi	r26, 0x00	; 0
   14268:	b0 e0       	ldi	r27, 0x00	; 0
   1426a:	2a e0       	ldi	r18, 0x0A	; 10
   1426c:	88 0f       	add	r24, r24
   1426e:	99 1f       	adc	r25, r25
   14270:	aa 1f       	adc	r26, r26
   14272:	bb 1f       	adc	r27, r27
   14274:	2a 95       	dec	r18
   14276:	d1 f7       	brne	.-12     	; 0x1426c <_Z10disk_ioctlhhPh+0xf2>
   14278:	5d c0       	rjmp	.+186    	; 0x14334 <_Z10disk_ioctlhhPh+0x1ba>
					} else {					/* SDC ver 1.XX or MMC*/
						n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
						csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
   1427a:	88 85       	ldd	r24, Y+8	; 0x08
   1427c:	90 e0       	ldi	r25, 0x00	; 0
   1427e:	88 0f       	add	r24, r24
   14280:	99 1f       	adc	r25, r25
   14282:	88 0f       	add	r24, r24
   14284:	99 1f       	adc	r25, r25
   14286:	01 96       	adiw	r24, 0x01	; 1
   14288:	30 e0       	ldi	r19, 0x00	; 0
   1428a:	f6 e0       	ldi	r31, 0x06	; 6
   1428c:	35 95       	asr	r19
   1428e:	27 95       	ror	r18
   14290:	fa 95       	dec	r31
   14292:	e1 f7       	brne	.-8      	; 0x1428c <_Z10disk_ioctlhhPh+0x112>
   14294:	82 0f       	add	r24, r18
   14296:	93 1f       	adc	r25, r19
   14298:	2f 81       	ldd	r18, Y+7	; 0x07
   1429a:	30 e0       	ldi	r19, 0x00	; 0
   1429c:	23 70       	andi	r18, 0x03	; 3
   1429e:	30 70       	andi	r19, 0x00	; 0
   142a0:	32 2f       	mov	r19, r18
   142a2:	22 27       	eor	r18, r18
   142a4:	33 0f       	add	r19, r19
   142a6:	33 0f       	add	r19, r19
   142a8:	82 0f       	add	r24, r18
   142aa:	93 1f       	adc	r25, r19
						*(DWORD*)buff = (DWORD)csize << (n - 9);
   142ac:	a0 e0       	ldi	r26, 0x00	; 0
   142ae:	b0 e0       	ldi	r27, 0x00	; 0
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
					if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
						csize = csd[9] + ((WORD)csd[8] << 8) + 1;
						*(DWORD*)buff = (DWORD)csize << 10;
					} else {					/* SDC ver 1.XX or MMC*/
						n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
   142b0:	2e 81       	ldd	r18, Y+6	; 0x06
   142b2:	2f 70       	andi	r18, 0x0F	; 15
   142b4:	4b 85       	ldd	r20, Y+11	; 0x0b
   142b6:	44 1f       	adc	r20, r20
   142b8:	44 27       	eor	r20, r20
   142ba:	44 1f       	adc	r20, r20
   142bc:	24 0f       	add	r18, r20
   142be:	2e 5f       	subi	r18, 0xFE	; 254
   142c0:	36 2f       	mov	r19, r22
   142c2:	33 70       	andi	r19, 0x03	; 3
   142c4:	33 0f       	add	r19, r19
   142c6:	23 0f       	add	r18, r19
						csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
						*(DWORD*)buff = (DWORD)csize << (n - 9);
   142c8:	30 e0       	ldi	r19, 0x00	; 0
   142ca:	29 50       	subi	r18, 0x09	; 9
   142cc:	30 40       	sbci	r19, 0x00	; 0
   142ce:	2b c0       	rjmp	.+86     	; 0x14326 <_Z10disk_ioctlhhPh+0x1ac>
					res = RES_OK;
				}
				break;
				
			case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
				*(WORD*)buff = 512;
   142d0:	80 e0       	ldi	r24, 0x00	; 0
   142d2:	92 e0       	ldi	r25, 0x02	; 2
   142d4:	fa 01       	movw	r30, r20
   142d6:	91 83       	std	Z+1, r25	; 0x01
   142d8:	80 83       	st	Z, r24
   142da:	c1 c0       	rjmp	.+386    	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
				res = RES_OK;
				break;
				
			case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
				if (CardType & CT_SD2) {	/* SDv2? */
   142dc:	f0 90 42 1f 	lds	r15, 0x1F42
   142e0:	f2 fe       	sbrs	r15, 2
   142e2:	2e c0       	rjmp	.+92     	; 0x14340 <_Z10disk_ioctlhhPh+0x1c6>
					if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
   142e4:	8d e8       	ldi	r24, 0x8D	; 141
   142e6:	40 e0       	ldi	r20, 0x00	; 0
   142e8:	50 e0       	ldi	r21, 0x00	; 0
   142ea:	ba 01       	movw	r22, r20
   142ec:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   142f0:	88 23       	and	r24, r24
   142f2:	09 f0       	breq	.+2      	; 0x142f6 <_Z10disk_ioctlhhPh+0x17c>
   142f4:	cb c0       	rjmp	.+406    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
						rcvr_spi();
   142f6:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
						if (rcvr_datablock(csd, 16)) {				/* Read partial block */
   142fa:	ce 01       	movw	r24, r28
   142fc:	01 96       	adiw	r24, 0x01	; 1
   142fe:	60 e1       	ldi	r22, 0x10	; 16
   14300:	70 e0       	ldi	r23, 0x00	; 0
   14302:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
   14306:	00 97       	sbiw	r24, 0x00	; 0
   14308:	09 f4       	brne	.+2      	; 0x1430c <_Z10disk_ioctlhhPh+0x192>
   1430a:	c0 c0       	rjmp	.+384    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
   1430c:	70 e3       	ldi	r23, 0x30	; 48
   1430e:	f7 2e       	mov	r15, r23
							for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
   14310:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   14314:	fa 94       	dec	r15
   14316:	e1 f7       	brne	.-8      	; 0x14310 <_Z10disk_ioctlhhPh+0x196>
							*(DWORD*)buff = 16UL << (csd[10] >> 4);
   14318:	2b 85       	ldd	r18, Y+11	; 0x0b
   1431a:	22 95       	swap	r18
   1431c:	2f 70       	andi	r18, 0x0F	; 15
   1431e:	80 e1       	ldi	r24, 0x10	; 16
   14320:	90 e0       	ldi	r25, 0x00	; 0
   14322:	a0 e0       	ldi	r26, 0x00	; 0
   14324:	b0 e0       	ldi	r27, 0x00	; 0
   14326:	04 c0       	rjmp	.+8      	; 0x14330 <_Z10disk_ioctlhhPh+0x1b6>
   14328:	88 0f       	add	r24, r24
   1432a:	99 1f       	adc	r25, r25
   1432c:	aa 1f       	adc	r26, r26
   1432e:	bb 1f       	adc	r27, r27
   14330:	2a 95       	dec	r18
   14332:	d2 f7       	brpl	.-12     	; 0x14328 <_Z10disk_ioctlhhPh+0x1ae>
   14334:	f8 01       	movw	r30, r16
   14336:	80 83       	st	Z, r24
   14338:	91 83       	std	Z+1, r25	; 0x01
   1433a:	a2 83       	std	Z+2, r26	; 0x02
   1433c:	b3 83       	std	Z+3, r27	; 0x03
   1433e:	8f c0       	rjmp	.+286    	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
							res = RES_OK;
						}
					}
				} else {					/* SDv1 or MMCv3 */
					if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
   14340:	89 e0       	ldi	r24, 0x09	; 9
   14342:	40 e0       	ldi	r20, 0x00	; 0
   14344:	50 e0       	ldi	r21, 0x00	; 0
   14346:	ba 01       	movw	r22, r20
   14348:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   1434c:	88 23       	and	r24, r24
   1434e:	09 f0       	breq	.+2      	; 0x14352 <_Z10disk_ioctlhhPh+0x1d8>
   14350:	9d c0       	rjmp	.+314    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
   14352:	ce 01       	movw	r24, r28
   14354:	01 96       	adiw	r24, 0x01	; 1
   14356:	60 e1       	ldi	r22, 0x10	; 16
   14358:	70 e0       	ldi	r23, 0x00	; 0
   1435a:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
   1435e:	00 97       	sbiw	r24, 0x00	; 0
   14360:	09 f4       	brne	.+2      	; 0x14364 <_Z10disk_ioctlhhPh+0x1ea>
   14362:	94 c0       	rjmp	.+296    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
   14364:	4b 85       	ldd	r20, Y+11	; 0x0b
   14366:	8c 85       	ldd	r24, Y+12	; 0x0c
						if (CardType & CT_SD1) {	/* SDv1 */
   14368:	f1 fe       	sbrs	r15, 1
   1436a:	1b c0       	rjmp	.+54     	; 0x143a2 <_Z10disk_ioctlhhPh+0x228>
							*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
   1436c:	88 1f       	adc	r24, r24
   1436e:	88 27       	eor	r24, r24
   14370:	88 1f       	adc	r24, r24
   14372:	90 e0       	ldi	r25, 0x00	; 0
   14374:	01 96       	adiw	r24, 0x01	; 1
   14376:	50 e0       	ldi	r21, 0x00	; 0
   14378:	4f 73       	andi	r20, 0x3F	; 63
   1437a:	50 70       	andi	r21, 0x00	; 0
   1437c:	44 0f       	add	r20, r20
   1437e:	55 1f       	adc	r21, r21
   14380:	84 0f       	add	r24, r20
   14382:	95 1f       	adc	r25, r21
   14384:	2e 85       	ldd	r18, Y+14	; 0x0e
   14386:	30 e0       	ldi	r19, 0x00	; 0
   14388:	46 e0       	ldi	r20, 0x06	; 6
   1438a:	35 95       	asr	r19
   1438c:	27 95       	ror	r18
   1438e:	4a 95       	dec	r20
   14390:	e1 f7       	brne	.-8      	; 0x1438a <_Z10disk_ioctlhhPh+0x210>
   14392:	21 50       	subi	r18, 0x01	; 1
   14394:	30 40       	sbci	r19, 0x00	; 0
   14396:	02 c0       	rjmp	.+4      	; 0x1439c <_Z10disk_ioctlhhPh+0x222>
   14398:	88 0f       	add	r24, r24
   1439a:	99 1f       	adc	r25, r25
   1439c:	2a 95       	dec	r18
   1439e:	e2 f7       	brpl	.-8      	; 0x14398 <_Z10disk_ioctlhhPh+0x21e>
   143a0:	20 c0       	rjmp	.+64     	; 0x143e2 <_Z10disk_ioctlhhPh+0x268>
						} else {					/* MMCv3 */
							*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
   143a2:	28 2f       	mov	r18, r24
   143a4:	30 e0       	ldi	r19, 0x00	; 0
   143a6:	23 70       	andi	r18, 0x03	; 3
   143a8:	30 70       	andi	r19, 0x00	; 0
   143aa:	93 e0       	ldi	r25, 0x03	; 3
   143ac:	22 0f       	add	r18, r18
   143ae:	33 1f       	adc	r19, r19
   143b0:	9a 95       	dec	r25
   143b2:	e1 f7       	brne	.-8      	; 0x143ac <_Z10disk_ioctlhhPh+0x232>
   143b4:	82 95       	swap	r24
   143b6:	86 95       	lsr	r24
   143b8:	87 70       	andi	r24, 0x07	; 7
   143ba:	28 0f       	add	r18, r24
   143bc:	31 1d       	adc	r19, r1
   143be:	2f 5f       	subi	r18, 0xFF	; 255
   143c0:	3f 4f       	sbci	r19, 0xFF	; 255
   143c2:	50 e0       	ldi	r21, 0x00	; 0
   143c4:	4c 77       	andi	r20, 0x7C	; 124
   143c6:	50 70       	andi	r21, 0x00	; 0
   143c8:	55 95       	asr	r21
   143ca:	47 95       	ror	r20
   143cc:	55 95       	asr	r21
   143ce:	47 95       	ror	r20
   143d0:	4f 5f       	subi	r20, 0xFF	; 255
   143d2:	5f 4f       	sbci	r21, 0xFF	; 255
   143d4:	24 9f       	mul	r18, r20
   143d6:	c0 01       	movw	r24, r0
   143d8:	25 9f       	mul	r18, r21
   143da:	90 0d       	add	r25, r0
   143dc:	34 9f       	mul	r19, r20
   143de:	90 0d       	add	r25, r0
   143e0:	11 24       	eor	r1, r1
   143e2:	a0 e0       	ldi	r26, 0x00	; 0
   143e4:	b0 e0       	ldi	r27, 0x00	; 0
   143e6:	a6 cf       	rjmp	.-180    	; 0x14334 <_Z10disk_ioctlhhPh+0x1ba>
					}
				}
				break;
				
			case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
				*ptr = CardType;
   143e8:	80 91 42 1f 	lds	r24, 0x1F42
   143ec:	fa 01       	movw	r30, r20
   143ee:	80 83       	st	Z, r24
   143f0:	36 c0       	rjmp	.+108    	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
				res = RES_OK;
				break;
				
			case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
				if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
   143f2:	89 e0       	ldi	r24, 0x09	; 9
   143f4:	01 c0       	rjmp	.+2      	; 0x143f8 <_Z10disk_ioctlhhPh+0x27e>
					&& rcvr_datablock(ptr, 16))
					res = RES_OK;
				break;
				
			case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
				if (send_cmd(CMD10, 0) == 0		/* READ_CID */
   143f6:	8a e0       	ldi	r24, 0x0A	; 10
   143f8:	40 e0       	ldi	r20, 0x00	; 0
   143fa:	50 e0       	ldi	r21, 0x00	; 0
   143fc:	ba 01       	movw	r22, r20
   143fe:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14402:	88 23       	and	r24, r24
   14404:	09 f0       	breq	.+2      	; 0x14408 <_Z10disk_ioctlhhPh+0x28e>
   14406:	42 c0       	rjmp	.+132    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
					&& rcvr_datablock(ptr, 16))
   14408:	c8 01       	movw	r24, r16
   1440a:	60 e1       	ldi	r22, 0x10	; 16
   1440c:	70 e0       	ldi	r23, 0x00	; 0
   1440e:	1f c0       	rjmp	.+62     	; 0x1444e <_Z10disk_ioctlhhPh+0x2d4>
					res = RES_OK;
				break;
				
			case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
				if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
   14410:	8a e3       	ldi	r24, 0x3A	; 58
   14412:	40 e0       	ldi	r20, 0x00	; 0
   14414:	50 e0       	ldi	r21, 0x00	; 0
   14416:	ba 01       	movw	r22, r20
   14418:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   1441c:	88 23       	and	r24, r24
   1441e:	b1 f5       	brne	.+108    	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
   14420:	a4 e0       	ldi	r26, 0x04	; 4
   14422:	fa 2e       	mov	r15, r26
					for (n = 4; n; n--) *ptr++ = rcvr_spi();
   14424:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
   14428:	f8 01       	movw	r30, r16
   1442a:	81 93       	st	Z+, r24
   1442c:	8f 01       	movw	r16, r30
   1442e:	fa 94       	dec	r15
   14430:	c9 f7       	brne	.-14     	; 0x14424 <_Z10disk_ioctlhhPh+0x2aa>
   14432:	15 c0       	rjmp	.+42     	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
					res = RES_OK;
				}
				break;
				
			case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
				if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
   14434:	8d e8       	ldi	r24, 0x8D	; 141
   14436:	40 e0       	ldi	r20, 0x00	; 0
   14438:	50 e0       	ldi	r21, 0x00	; 0
   1443a:	ba 01       	movw	r22, r20
   1443c:	0e 94 c7 9e 	call	0x13d8e	; 0x13d8e <_ZL8send_cmdhm>
   14440:	88 23       	and	r24, r24
   14442:	21 f5       	brne	.+72     	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
					rcvr_spi();
   14444:	0e 94 0f 9e 	call	0x13c1e	; 0x13c1e <_ZL8rcvr_spiv>
					if (rcvr_datablock(ptr, 64))
   14448:	c8 01       	movw	r24, r16
   1444a:	60 e4       	ldi	r22, 0x40	; 64
   1444c:	70 e0       	ldi	r23, 0x00	; 0
   1444e:	0e 94 43 9e 	call	0x13c86	; 0x13c86 <_ZL14rcvr_datablockPhj>
   14452:	00 97       	sbiw	r24, 0x00	; 0
   14454:	21 f4       	brne	.+8      	; 0x1445e <_Z10disk_ioctlhhPh+0x2e4>
   14456:	1a c0       	rjmp	.+52     	; 0x1448c <_Z10disk_ioctlhhPh+0x312>
						res = RES_OK;
				}
				break;
				
			default:
				res = RES_PARERR;
   14458:	04 e0       	ldi	r16, 0x04	; 4
   1445a:	10 e0       	ldi	r17, 0x00	; 0
   1445c:	02 c0       	rjmp	.+4      	; 0x14462 <_Z10disk_ioctlhhPh+0x2e8>
				
			case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
				if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
					rcvr_spi();
					if (rcvr_datablock(ptr, 64))
						res = RES_OK;
   1445e:	00 e0       	ldi	r16, 0x00	; 0
   14460:	10 e0       	ldi	r17, 0x00	; 0
				
			default:
				res = RES_PARERR;
		}
		
		deselect();
   14462:	0e 94 2a 9e 	call	0x13c54	; 0x13c54 <_ZL8deselectv>
   14466:	05 c0       	rjmp	.+10     	; 0x14472 <_Z10disk_ioctlhhPh+0x2f8>
			case 1:		/* Sub control code (POWER_GET) */
				ptr[1] = (BYTE)power_status();
				res = RES_OK;
				break;
			default :
				res = RES_PARERR;
   14468:	04 e0       	ldi	r16, 0x04	; 4
   1446a:	10 e0       	ldi	r17, 0x00	; 0
   1446c:	02 c0       	rjmp	.+4      	; 0x14472 <_Z10disk_ioctlhhPh+0x2f8>
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
   1446e:	03 e0       	ldi	r16, 0x03	; 3
   14470:	10 e0       	ldi	r17, 0x00	; 0
		
		deselect();
	}
	
	return res;
}
   14472:	c8 01       	movw	r24, r16
   14474:	60 96       	adiw	r28, 0x10	; 16
   14476:	0f b6       	in	r0, 0x3f	; 63
   14478:	f8 94       	cli
   1447a:	de bf       	out	0x3e, r29	; 62
   1447c:	0f be       	out	0x3f, r0	; 63
   1447e:	cd bf       	out	0x3d, r28	; 61
   14480:	cf 91       	pop	r28
   14482:	df 91       	pop	r29
   14484:	1f 91       	pop	r17
   14486:	0f 91       	pop	r16
   14488:	ff 90       	pop	r15
   1448a:	08 95       	ret
	WORD csize;
	
	
	if (drv) return RES_PARERR;
	
	res = RES_ERROR;
   1448c:	01 e0       	ldi	r16, 0x01	; 1
   1448e:	10 e0       	ldi	r17, 0x00	; 0
   14490:	e8 cf       	rjmp	.-48     	; 0x14462 <_Z10disk_ioctlhhPh+0x2e8>

00014492 <_Z14disk_timerprocv>:
	n = Timer1;			// 100Hz decrement timer 
	if (n) Timer1 = --n;
	n = Timer2;
	if (n) Timer2 = --n;
	*/
        if (Timer1) Timer1--;
   14492:	80 91 40 1f 	lds	r24, 0x1F40
   14496:	88 23       	and	r24, r24
   14498:	29 f0       	breq	.+10     	; 0x144a4 <_Z14disk_timerprocv+0x12>
   1449a:	80 91 40 1f 	lds	r24, 0x1F40
   1449e:	81 50       	subi	r24, 0x01	; 1
   144a0:	80 93 40 1f 	sts	0x1F40, r24
        if (Timer2) Timer2--;
   144a4:	80 91 41 1f 	lds	r24, 0x1F41
   144a8:	88 23       	and	r24, r24
   144aa:	29 f0       	breq	.+10     	; 0x144b6 <_Z14disk_timerprocv+0x24>
   144ac:	80 91 41 1f 	lds	r24, 0x1F41
   144b0:	81 50       	subi	r24, 0x01	; 1
   144b2:	80 93 41 1f 	sts	0x1F41, r24

	s = Stat;
   144b6:	80 91 82 11 	lds	r24, 0x1182
		s &= ~STA_NODISK;
	else				// Socket empty
		s |= (STA_NODISK | STA_NOINIT);
	*/
        s &= ~STA_NODISK;
        s &= ~STA_PROTECT;
   144ba:	89 7f       	andi	r24, 0xF9	; 249

	Stat = s;
   144bc:	80 93 82 11 	sts	0x1182, r24
}
   144c0:	08 95       	ret

000144c2 <_Z17frskyComputeVoltshjh>:
uint8_t frskyTxBufferCount = 0;
uint8_t FrskyRxBufferReady = 0;
uint8_t frskyStreaming = 0;

uint16_t frskyComputeVolts(uint8_t rawADC, uint16_t ratio/* max cirecuit designed input voltage */, uint8_t decimals/* 1 or 2. defaults to 1 */)
{
   144c2:	ef 92       	push	r14
   144c4:	ff 92       	push	r15
   144c6:	0f 93       	push	r16
   144c8:	1f 93       	push	r17
   144ca:	cf 93       	push	r28
   144cc:	c4 2f       	mov	r28, r20
  uint16_t val;
  val = (uint32_t)rawADC * ratio / ((decimals == 2) ? 255 : 2550); // result is naturally rounded and will in fact always be <= 16 bits
   144ce:	7b 01       	movw	r14, r22
   144d0:	00 e0       	ldi	r16, 0x00	; 0
   144d2:	10 e0       	ldi	r17, 0x00	; 0
   144d4:	28 2f       	mov	r18, r24
   144d6:	30 e0       	ldi	r19, 0x00	; 0
   144d8:	40 e0       	ldi	r20, 0x00	; 0
   144da:	50 e0       	ldi	r21, 0x00	; 0
   144dc:	c8 01       	movw	r24, r16
   144de:	b7 01       	movw	r22, r14
   144e0:	0e 94 dc aa 	call	0x155b8	; 0x155b8 <__mulsi3>
   144e4:	c2 30       	cpi	r28, 0x02	; 2
   144e6:	29 f4       	brne	.+10     	; 0x144f2 <_Z17frskyComputeVoltshjh+0x30>
   144e8:	2f ef       	ldi	r18, 0xFF	; 255
   144ea:	30 e0       	ldi	r19, 0x00	; 0
   144ec:	40 e0       	ldi	r20, 0x00	; 0
   144ee:	50 e0       	ldi	r21, 0x00	; 0
   144f0:	04 c0       	rjmp	.+8      	; 0x144fa <_Z17frskyComputeVoltshjh+0x38>
   144f2:	26 ef       	ldi	r18, 0xF6	; 246
   144f4:	39 e0       	ldi	r19, 0x09	; 9
   144f6:	40 e0       	ldi	r20, 0x00	; 0
   144f8:	50 e0       	ldi	r21, 0x00	; 0
   144fa:	0e 94 2e ab 	call	0x1565c	; 0x1565c <__udivmodsi4>
  return val;
}
   144fe:	c9 01       	movw	r24, r18
   14500:	cf 91       	pop	r28
   14502:	1f 91       	pop	r17
   14504:	0f 91       	pop	r16
   14506:	ff 90       	pop	r15
   14508:	ef 90       	pop	r14
   1450a:	08 95       	ret

0001450c <_Z14frskyPutAValuehhhhh>:
   type defaults to 0 -- volts
   mode defaults to 0 -- no special display attributes
   decimals can be either 1 or 2 and defaults to 1
  */
void frskyPutAValue(uint8_t x, uint8_t y, uint8_t channel, uint8_t value, uint8_t mode)
{
   1450c:	ef 92       	push	r14
   1450e:	ff 92       	push	r15
   14510:	0f 93       	push	r16
   14512:	1f 93       	push	r17
   14514:	cf 93       	push	r28
   14516:	df 93       	push	r29
   14518:	e8 2e       	mov	r14, r24
   1451a:	f6 2e       	mov	r15, r22
   1451c:	10 2f       	mov	r17, r16
  if (g_model.frsky.channels[channel].type == 0/*volts*/)
   1451e:	64 2f       	mov	r22, r20
   14520:	70 e0       	ldi	r23, 0x00	; 0
   14522:	fb 01       	movw	r30, r22
   14524:	83 e0       	ldi	r24, 0x03	; 3
   14526:	ee 0f       	add	r30, r30
   14528:	ff 1f       	adc	r31, r31
   1452a:	8a 95       	dec	r24
   1452c:	e1 f7       	brne	.-8      	; 0x14526 <_Z14frskyPutAValuehhhhh+0x1a>
   1452e:	e6 1b       	sub	r30, r22
   14530:	f7 0b       	sbc	r31, r23
   14532:	df 01       	movw	r26, r30
   14534:	a8 5a       	subi	r26, 0xA8	; 168
   14536:	ba 4e       	sbci	r27, 0xEA	; 234
   14538:	8c 91       	ld	r24, X
   1453a:	82 95       	swap	r24
   1453c:	8f 70       	andi	r24, 0x0F	; 15
   1453e:	31 f5       	brne	.+76     	; 0x1458c <_Z14frskyPutAValuehhhhh+0x80>
  {
    uint16_t val = frskyComputeVolts(value, g_model.frsky.channels[channel].ratio, (mode & PREC2) ? 2 : 1);
   14540:	e9 5a       	subi	r30, 0xA9	; 169
   14542:	fa 4e       	sbci	r31, 0xEA	; 234
   14544:	60 81       	ld	r22, Z
   14546:	71 81       	ldd	r23, Z+1	; 0x01
   14548:	7f 70       	andi	r23, 0x0F	; 15
   1454a:	c0 2f       	mov	r28, r16
   1454c:	d0 e0       	ldi	r29, 0x00	; 0
   1454e:	c0 76       	andi	r28, 0x60	; 96
   14550:	d0 70       	andi	r29, 0x00	; 0
   14552:	20 97       	sbiw	r28, 0x00	; 0
   14554:	11 f0       	breq	.+4      	; 0x1455a <_Z14frskyPutAValuehhhhh+0x4e>
   14556:	42 e0       	ldi	r20, 0x02	; 2
   14558:	01 c0       	rjmp	.+2      	; 0x1455c <_Z14frskyPutAValuehhhhh+0x50>
   1455a:	41 e0       	ldi	r20, 0x01	; 1
   1455c:	82 2f       	mov	r24, r18
   1455e:	0e 94 61 a2 	call	0x144c2	; 0x144c2 <_Z17frskyComputeVoltshjh>
   14562:	48 2f       	mov	r20, r24
    lcd_outdezNAtt(x, y, val, mode | (mode&PREC2 ? PREC2 : PREC1));
   14564:	20 97       	sbiw	r28, 0x00	; 0
   14566:	11 f0       	breq	.+4      	; 0x1456c <_Z14frskyPutAValuehhhhh+0x60>
   14568:	20 e6       	ldi	r18, 0x60	; 96
   1456a:	01 c0       	rjmp	.+2      	; 0x1456e <_Z14frskyPutAValuehhhhh+0x62>
   1456c:	20 e5       	ldi	r18, 0x50	; 80
   1456e:	21 2b       	or	r18, r17
   14570:	8e 2d       	mov	r24, r14
   14572:	6f 2d       	mov	r22, r15
   14574:	59 2f       	mov	r21, r25
   14576:	00 e0       	ldi	r16, 0x00	; 0
   14578:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
    lcd_putcAtt(lcd_lastPos, y, 'v', mode);
   1457c:	80 91 02 1f 	lds	r24, 0x1F02
   14580:	6f 2d       	mov	r22, r15
   14582:	46 e7       	ldi	r20, 0x76	; 118
   14584:	21 2f       	mov	r18, r17
   14586:	0e 94 c6 66 	call	0xcd8c	; 0xcd8c <_Z11lcd_putcAtthhch>
   1458a:	09 c0       	rjmp	.+18     	; 0x1459e <_Z14frskyPutAValuehhhhh+0x92>
  }
  else /* assume raw */
  {
    lcd_outdezNAtt(x, y, value, mode&(~(PREC1|PREC2)), 3|LEADING0);
   1458c:	1f 78       	andi	r17, 0x8F	; 143
   1458e:	8e 2d       	mov	r24, r14
   14590:	6f 2d       	mov	r22, r15
   14592:	42 2f       	mov	r20, r18
   14594:	50 e0       	ldi	r21, 0x00	; 0
   14596:	21 2f       	mov	r18, r17
   14598:	03 e1       	ldi	r16, 0x13	; 19
   1459a:	0e 94 29 69 	call	0xd252	; 0xd252 <_Z14lcd_outdezNAtthhihh>
  }
}
   1459e:	df 91       	pop	r29
   145a0:	cf 91       	pop	r28
   145a2:	1f 91       	pop	r17
   145a4:	0f 91       	pop	r16
   145a6:	ff 90       	pop	r15
   145a8:	ef 90       	pop	r14
   145aa:	08 95       	ret

000145ac <_Z14frskyPushValueRPhh>:
#ifdef FRSKY_HUB
FrskyHubData frskyHubData;
#endif

void frskyPushValue(uint8_t *&ptr, uint8_t value)
{
   145ac:	cf 93       	push	r28
   145ae:	df 93       	push	r29
   145b0:	fc 01       	movw	r30, r24
  // byte stuff the only byte than might need it
  if (value == START_STOP) {
   145b2:	6e 37       	cpi	r22, 0x7E	; 126
   145b4:	49 f4       	brne	.+18     	; 0x145c8 <_Z14frskyPushValueRPhh+0x1c>
    *ptr++ = 0x5e;
   145b6:	c0 81       	ld	r28, Z
   145b8:	d1 81       	ldd	r29, Z+1	; 0x01
   145ba:	de 01       	movw	r26, r28
   145bc:	8e e5       	ldi	r24, 0x5E	; 94
   145be:	8d 93       	st	X+, r24
    *ptr++ = BYTESTUFF;
   145c0:	8d e7       	ldi	r24, 0x7D	; 125
   145c2:	89 83       	std	Y+1, r24	; 0x01
   145c4:	11 96       	adiw	r26, 0x01	; 1
   145c6:	0f c0       	rjmp	.+30     	; 0x145e6 <_Z14frskyPushValueRPhh+0x3a>
   145c8:	a0 81       	ld	r26, Z
   145ca:	b1 81       	ldd	r27, Z+1	; 0x01
  }
  else if (value == BYTESTUFF) {
   145cc:	6d 37       	cpi	r22, 0x7D	; 125
   145ce:	51 f4       	brne	.+20     	; 0x145e4 <_Z14frskyPushValueRPhh+0x38>
    *ptr++ = 0x5d;
   145d0:	ed 01       	movw	r28, r26
   145d2:	8d e5       	ldi	r24, 0x5D	; 93
   145d4:	89 93       	st	Y+, r24
    *ptr++ = BYTESTUFF;
   145d6:	11 96       	adiw	r26, 0x01	; 1
   145d8:	6c 93       	st	X, r22
   145da:	11 97       	sbiw	r26, 0x01	; 1
   145dc:	21 96       	adiw	r28, 0x01	; 1
   145de:	d1 83       	std	Z+1, r29	; 0x01
   145e0:	c0 83       	st	Z, r28
   145e2:	03 c0       	rjmp	.+6      	; 0x145ea <_Z14frskyPushValueRPhh+0x3e>
  }
  else {
    *ptr++ = value;
   145e4:	6d 93       	st	X+, r22
   145e6:	b1 83       	std	Z+1, r27	; 0x01
   145e8:	a0 83       	st	Z, r26
  }
}
   145ea:	df 91       	pop	r29
   145ec:	cf 91       	pop	r28
   145ee:	08 95       	ret

000145f0 <_Z18parseTelemHubIndexh>:
#endif

#ifdef FRSKY_HUB
int8_t parseTelemHubIndex(uint8_t index)
{
  if (index > 0x26)
   145f0:	87 32       	cpi	r24, 0x27	; 39
   145f2:	60 f4       	brcc	.+24     	; 0x1460c <_Z18parseTelemHubIndexh+0x1c>
    index = 0; // invalid index
  if (index > 0x21)
   145f4:	82 32       	cpi	r24, 0x22	; 34
   145f6:	10 f0       	brcs	.+4      	; 0x145fc <_Z18parseTelemHubIndexh+0xc>
    index -= 5;
   145f8:	85 50       	subi	r24, 0x05	; 5
   145fa:	02 c0       	rjmp	.+4      	; 0x14600 <_Z18parseTelemHubIndexh+0x10>
  if (index > 0x0f)
   145fc:	80 31       	cpi	r24, 0x10	; 16
   145fe:	10 f0       	brcs	.+4      	; 0x14604 <_Z18parseTelemHubIndexh+0x14>
    index -= 6;
   14600:	86 50       	subi	r24, 0x06	; 6
   14602:	02 c0       	rjmp	.+4      	; 0x14608 <_Z18parseTelemHubIndexh+0x18>
  if (index > 0x08)
   14604:	89 30       	cpi	r24, 0x09	; 9
   14606:	18 f0       	brcs	.+6      	; 0x1460e <_Z18parseTelemHubIndexh+0x1e>
    index -= 2;
   14608:	82 50       	subi	r24, 0x02	; 2
   1460a:	01 c0       	rjmp	.+2      	; 0x1460e <_Z18parseTelemHubIndexh+0x1e>

#ifdef FRSKY_HUB
int8_t parseTelemHubIndex(uint8_t index)
{
  if (index > 0x26)
    index = 0; // invalid index
   1460c:	80 e0       	ldi	r24, 0x00	; 0
    index -= 5;
  if (index > 0x0f)
    index -= 6;
  if (index > 0x08)
    index -= 2;
  return 2*(index-1);
   1460e:	88 0f       	add	r24, r24
}
   14610:	82 50       	subi	r24, 0x02	; 2
   14612:	08 95       	ret

00014614 <_Z17parseTelemHubByteh>:
void parseTelemHubByte(uint8_t byte)
{
  static int8_t structPos;
  static TS_STATE state = TS_IDLE;

  if (byte == 0x5e) {
   14614:	8e 35       	cpi	r24, 0x5E	; 94
   14616:	19 f4       	brne	.+6      	; 0x1461e <_Z17parseTelemHubByteh+0xa>
    state = TS_DATA_ID;
   14618:	81 e0       	ldi	r24, 0x01	; 1
   1461a:	90 e0       	ldi	r25, 0x00	; 0
   1461c:	3f c0       	rjmp	.+126    	; 0x1469c <_Z17parseTelemHubByteh+0x88>
    return;
  }
  if (state == TS_IDLE) {
   1461e:	20 91 1a 22 	lds	r18, 0x221A
   14622:	30 91 1b 22 	lds	r19, 0x221B
   14626:	21 15       	cp	r18, r1
   14628:	31 05       	cpc	r19, r1
   1462a:	09 f4       	brne	.+2      	; 0x1462e <_Z17parseTelemHubByteh+0x1a>
   1462c:	46 c0       	rjmp	.+140    	; 0x146ba <_Z17parseTelemHubByteh+0xa6>
    return;
  }
  if (state & TS_XOR) {
   1462e:	27 ff       	sbrs	r18, 7
   14630:	08 c0       	rjmp	.+16     	; 0x14642 <_Z17parseTelemHubByteh+0x2e>
    byte = byte ^ 0x60;
   14632:	90 e6       	ldi	r25, 0x60	; 96
   14634:	89 27       	eor	r24, r25
    state = (TS_STATE)(state - TS_XOR);
   14636:	20 58       	subi	r18, 0x80	; 128
   14638:	30 40       	sbci	r19, 0x00	; 0
   1463a:	30 93 1b 22 	sts	0x221B, r19
   1463e:	20 93 1a 22 	sts	0x221A, r18
   14642:	20 91 1a 22 	lds	r18, 0x221A
   14646:	30 91 1b 22 	lds	r19, 0x221B
  }
  if (byte == 0x5d) {
   1464a:	8d 35       	cpi	r24, 0x5D	; 93
   1464c:	31 f4       	brne	.+12     	; 0x1465a <_Z17parseTelemHubByteh+0x46>
    state = (TS_STATE)(state | TS_XOR);
   1464e:	20 68       	ori	r18, 0x80	; 128
   14650:	30 93 1b 22 	sts	0x221B, r19
   14654:	20 93 1a 22 	sts	0x221A, r18
    return;
   14658:	08 95       	ret
  }
  if (state == TS_DATA_ID) {
   1465a:	21 30       	cpi	r18, 0x01	; 1
   1465c:	31 05       	cpc	r19, r1
   1465e:	89 f4       	brne	.+34     	; 0x14682 <_Z17parseTelemHubByteh+0x6e>
    structPos = parseTelemHubIndex(byte);
   14660:	0e 94 f8 a2 	call	0x145f0	; 0x145f0 <_Z18parseTelemHubIndexh>
   14664:	80 93 1c 22 	sts	0x221C, r24
    state = TS_DATA_LOW;
   14668:	22 e0       	ldi	r18, 0x02	; 2
   1466a:	30 e0       	ldi	r19, 0x00	; 0
   1466c:	30 93 1b 22 	sts	0x221B, r19
   14670:	20 93 1a 22 	sts	0x221A, r18
    if (structPos < 0)
   14674:	87 ff       	sbrs	r24, 7
   14676:	21 c0       	rjmp	.+66     	; 0x146ba <_Z17parseTelemHubByteh+0xa6>
      state = TS_IDLE;
   14678:	10 92 1b 22 	sts	0x221B, r1
   1467c:	10 92 1a 22 	sts	0x221A, r1
   14680:	08 95       	ret
   14682:	e0 91 1c 22 	lds	r30, 0x221C
    return;
  }
  if (state == TS_DATA_LOW) {
   14686:	22 30       	cpi	r18, 0x02	; 2
   14688:	31 05       	cpc	r19, r1
   1468a:	69 f4       	brne	.+26     	; 0x146a6 <_Z17parseTelemHubByteh+0x92>
    ((uint8_t*)&frskyHubData)[structPos] = byte;
   1468c:	ff 27       	eor	r31, r31
   1468e:	e7 fd       	sbrc	r30, 7
   14690:	f0 95       	com	r31
   14692:	e3 58       	subi	r30, 0x83	; 131
   14694:	f0 4e       	sbci	r31, 0xE0	; 224
   14696:	80 83       	st	Z, r24
    state = TS_DATA_HIGH;
   14698:	83 e0       	ldi	r24, 0x03	; 3
   1469a:	90 e0       	ldi	r25, 0x00	; 0
   1469c:	90 93 1b 22 	sts	0x221B, r25
   146a0:	80 93 1a 22 	sts	0x221A, r24
    return;
   146a4:	08 95       	ret
  }
  ((uint8_t*)&frskyHubData)[structPos+1] = byte;
   146a6:	ff 27       	eor	r31, r31
   146a8:	e7 fd       	sbrc	r30, 7
   146aa:	f0 95       	com	r31
   146ac:	e2 58       	subi	r30, 0x82	; 130
   146ae:	f0 4e       	sbci	r31, 0xE0	; 224
   146b0:	80 83       	st	Z, r24
  state = TS_IDLE;
   146b2:	10 92 1b 22 	sts	0x221B, r1
   146b6:	10 92 1a 22 	sts	0x221A, r1
   146ba:	08 95       	ret

000146bc <__vector_26>:
/*
   USART0 Transmit Data Register Emtpy ISR
   Used to transmit FrSky data packets
*/
ISR(USART0_UDRE_vect)
{
   146bc:	1f 92       	push	r1
   146be:	0f 92       	push	r0
   146c0:	0f b6       	in	r0, 0x3f	; 63
   146c2:	0f 92       	push	r0
   146c4:	0b b6       	in	r0, 0x3b	; 59
   146c6:	0f 92       	push	r0
   146c8:	11 24       	eor	r1, r1
   146ca:	8f 93       	push	r24
   146cc:	ef 93       	push	r30
   146ce:	ff 93       	push	r31
  if (frskyTxBufferCount > 0) {
   146d0:	e0 91 62 1f 	lds	r30, 0x1F62
   146d4:	ee 23       	and	r30, r30
   146d6:	51 f0       	breq	.+20     	; 0x146ec <__vector_26+0x30>
    UDR0 = frskyTxBuffer[--frskyTxBufferCount];
   146d8:	e1 50       	subi	r30, 0x01	; 1
   146da:	e0 93 62 1f 	sts	0x1F62, r30
   146de:	f0 e0       	ldi	r31, 0x00	; 0
   146e0:	ea 5a       	subi	r30, 0xAA	; 170
   146e2:	f0 4e       	sbci	r31, 0xE0	; 224
   146e4:	80 81       	ld	r24, Z
   146e6:	80 93 c6 00 	sts	0x00C6, r24
   146ea:	05 c0       	rjmp	.+10     	; 0x146f6 <__vector_26+0x3a>
  }
  else {
    UCSR0B &= ~(1 << UDRIE0); // disable UDRE0 interrupt
   146ec:	80 91 c1 00 	lds	r24, 0x00C1
   146f0:	8f 7d       	andi	r24, 0xDF	; 223
   146f2:	80 93 c1 00 	sts	0x00C1, r24
  }
}
   146f6:	ff 91       	pop	r31
   146f8:	ef 91       	pop	r30
   146fa:	8f 91       	pop	r24
   146fc:	0f 90       	pop	r0
   146fe:	0b be       	out	0x3b, r0	; 59
   14700:	0f 90       	pop	r0
   14702:	0f be       	out	0x3f, r0	; 63
   14704:	0f 90       	pop	r0
   14706:	1f 90       	pop	r1
   14708:	18 95       	reti

0001470a <_Z19frskyTransmitBufferv>:

/******************************************/

void frskyTransmitBuffer()
{
  UCSR0B |= (1 << UDRIE0); // enable  UDRE0 interrupt
   1470a:	e1 ec       	ldi	r30, 0xC1	; 193
   1470c:	f0 e0       	ldi	r31, 0x00	; 0
   1470e:	80 81       	ld	r24, Z
   14710:	80 62       	ori	r24, 0x20	; 32
   14712:	80 83       	st	Z, r24
}
   14714:	08 95       	ret

00014716 <_Z13FRSKY10mspollv>:

uint8_t FrskyAlarmSendState = 0 ;
void FRSKY10mspoll(void)
{
   14716:	df 93       	push	r29
   14718:	cf 93       	push	r28
   1471a:	0f 92       	push	r0
   1471c:	0f 92       	push	r0
   1471e:	cd b7       	in	r28, 0x3d	; 61
   14720:	de b7       	in	r29, 0x3e	; 62
  if (frskyTxBufferCount)
   14722:	80 91 62 1f 	lds	r24, 0x1F62
   14726:	88 23       	and	r24, r24
   14728:	09 f0       	breq	.+2      	; 0x1472c <_Z13FRSKY10mspollv+0x16>
   1472a:	6b c0       	rjmp	.+214    	; 0x14802 <_Z13FRSKY10mspollv+0xec>
    return; // we only have one buffer. If it's in use, then we can't send yet.

  uint8_t *ptr = &frskyTxBuffer[0];

  *ptr++ = START_STOP;        // End of packet
   1472c:	8e e7       	ldi	r24, 0x7E	; 126
   1472e:	80 93 56 1f 	sts	0x1F56, r24
  *ptr++ = 0x00;
   14732:	10 92 57 1f 	sts	0x1F57, r1
  *ptr++ = 0x00;
   14736:	10 92 58 1f 	sts	0x1F58, r1
  *ptr++ = 0x00;
   1473a:	10 92 59 1f 	sts	0x1F59, r1
  *ptr++ = 0x00;
   1473e:	10 92 5a 1f 	sts	0x1F5A, r1
  *ptr++ = 0x00;
   14742:	10 92 5b 1f 	sts	0x1F5B, r1
   14746:	2c e5       	ldi	r18, 0x5C	; 92
   14748:	3f e1       	ldi	r19, 0x1F	; 31
   1474a:	3a 83       	std	Y+2, r19	; 0x02
   1474c:	29 83       	std	Y+1, r18	; 0x01

  // Now send a packet
  FrskyAlarmSendState -= 1 ;
   1474e:	e0 91 af 1f 	lds	r30, 0x1FAF
   14752:	e1 50       	subi	r30, 0x01	; 1
   14754:	e0 93 af 1f 	sts	0x1FAF, r30
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
  if (FrskyAlarmSendState < SEND_MODEL_ALARMS) {
   14758:	e4 30       	cpi	r30, 0x04	; 4
   1475a:	08 f0       	brcs	.+2      	; 0x1475e <_Z13FRSKY10mspollv+0x48>
   1475c:	45 c0       	rjmp	.+138    	; 0x147e8 <_Z13FRSKY10mspollv+0xd2>
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
   1475e:	8e 2f       	mov	r24, r30
   14760:	86 95       	lsr	r24
   14762:	41 e0       	ldi	r20, 0x01	; 1
   14764:	48 1b       	sub	r20, r24
    *ptr++ = ALARM_LEVEL(channel, alarm);
   14766:	50 e0       	ldi	r21, 0x00	; 0
  *ptr++ = 0x00;
  *ptr++ = 0x00;

  // Now send a packet
  FrskyAlarmSendState -= 1 ;
  uint8_t alarm = 1 - (FrskyAlarmSendState % 2);
   14768:	f0 e0       	ldi	r31, 0x00	; 0
  if (FrskyAlarmSendState < SEND_MODEL_ALARMS) {
    uint8_t channel = 1 - (FrskyAlarmSendState / 2);
    *ptr++ = ALARM_LEVEL(channel, alarm);
   1476a:	e0 95       	com	r30
   1476c:	f0 95       	com	r31
   1476e:	e1 70       	andi	r30, 0x01	; 1
   14770:	f0 70       	andi	r31, 0x00	; 0
   14772:	ca 01       	movw	r24, r20
   14774:	63 e0       	ldi	r22, 0x03	; 3
   14776:	88 0f       	add	r24, r24
   14778:	99 1f       	adc	r25, r25
   1477a:	6a 95       	dec	r22
   1477c:	e1 f7       	brne	.-8      	; 0x14776 <_Z13FRSKY10mspollv+0x60>
   1477e:	84 1b       	sub	r24, r20
   14780:	95 0b       	sbc	r25, r21
   14782:	dc 01       	movw	r26, r24
   14784:	a5 5a       	subi	r26, 0xA5	; 165
   14786:	ba 4e       	sbci	r27, 0xEA	; 234
   14788:	4c 91       	ld	r20, X
   1478a:	64 2f       	mov	r22, r20
   1478c:	6f 70       	andi	r22, 0x0F	; 15
   1478e:	70 e0       	ldi	r23, 0x00	; 0
   14790:	df 01       	movw	r26, r30
   14792:	aa 0f       	add	r26, r26
   14794:	bb 1f       	adc	r27, r27
   14796:	02 c0       	rjmp	.+4      	; 0x1479c <_Z13FRSKY10mspollv+0x86>
   14798:	75 95       	asr	r23
   1479a:	67 95       	ror	r22
   1479c:	aa 95       	dec	r26
   1479e:	e2 f7       	brpl	.-8      	; 0x14798 <_Z13FRSKY10mspollv+0x82>
   147a0:	63 70       	andi	r22, 0x03	; 3
   147a2:	60 93 5c 1f 	sts	0x1F5C, r22
    *ptr++ = ALARM_GREATER(channel, alarm);
   147a6:	42 95       	swap	r20
   147a8:	43 70       	andi	r20, 0x03	; 3
   147aa:	50 e0       	ldi	r21, 0x00	; 0
   147ac:	0e 2e       	mov	r0, r30
   147ae:	02 c0       	rjmp	.+4      	; 0x147b4 <_Z13FRSKY10mspollv+0x9e>
   147b0:	55 95       	asr	r21
   147b2:	47 95       	ror	r20
   147b4:	0a 94       	dec	r0
   147b6:	e2 f7       	brpl	.-8      	; 0x147b0 <_Z13FRSKY10mspollv+0x9a>
   147b8:	41 70       	andi	r20, 0x01	; 1
   147ba:	40 93 5d 1f 	sts	0x1F5D, r20
   147be:	2e 5f       	subi	r18, 0xFE	; 254
   147c0:	3f 4f       	sbci	r19, 0xFF	; 255
   147c2:	3a 83       	std	Y+2, r19	; 0x02
   147c4:	29 83       	std	Y+1, r18	; 0x01
    frskyPushValue(ptr, g_model.frsky.channels[channel].alarms_value[alarm]);
   147c6:	e8 0f       	add	r30, r24
   147c8:	f9 1f       	adc	r31, r25
   147ca:	e7 5a       	subi	r30, 0xA7	; 167
   147cc:	fa 4e       	sbci	r31, 0xEA	; 234
   147ce:	ce 01       	movw	r24, r28
   147d0:	01 96       	adiw	r24, 0x01	; 1
   147d2:	60 81       	ld	r22, Z
   147d4:	0e 94 d6 a2 	call	0x145ac	; 0x145ac <_Z14frskyPushValueRPhh>
    *ptr++ = (A22PKT + FrskyAlarmSendState); // fc - fb - fa - f9
   147d8:	80 91 af 1f 	lds	r24, 0x1FAF
   147dc:	87 50       	subi	r24, 0x07	; 7
   147de:	e9 81       	ldd	r30, Y+1	; 0x01
   147e0:	fa 81       	ldd	r31, Y+2	; 0x02
   147e2:	81 93       	st	Z+, r24
   147e4:	fa 83       	std	Y+2, r31	; 0x02
   147e6:	e9 83       	std	Y+1, r30	; 0x01
  }

  *ptr++ = START_STOP;        // Start of packet
   147e8:	e9 81       	ldd	r30, Y+1	; 0x01
   147ea:	fa 81       	ldd	r31, Y+2	; 0x02
   147ec:	8e e7       	ldi	r24, 0x7E	; 126
   147ee:	81 93       	st	Z+, r24
   147f0:	fa 83       	std	Y+2, r31	; 0x02
   147f2:	e9 83       	std	Y+1, r30	; 0x01

  frskyTxBufferCount = ptr - &frskyTxBuffer[0];
   147f4:	86 e5       	ldi	r24, 0x56	; 86
   147f6:	9f e1       	ldi	r25, 0x1F	; 31
   147f8:	e8 1b       	sub	r30, r24
   147fa:	e0 93 62 1f 	sts	0x1F62, r30
  frskyTransmitBuffer();
   147fe:	0e 94 85 a3 	call	0x1470a	; 0x1470a <_Z19frskyTransmitBufferv>
}
   14802:	0f 90       	pop	r0
   14804:	0f 90       	pop	r0
   14806:	cf 91       	pop	r28
   14808:	df 91       	pop	r29
   1480a:	08 95       	ret

0001480c <_Z17FRSKY_alarmRaisedh>:

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
   1480c:	90 e0       	ldi	r25, 0x00	; 0
   1480e:	ac 01       	movw	r20, r24
   14810:	a3 e0       	ldi	r26, 0x03	; 3
   14812:	44 0f       	add	r20, r20
   14814:	55 1f       	adc	r21, r21
   14816:	aa 95       	dec	r26
   14818:	e1 f7       	brne	.-8      	; 0x14812 <_Z17FRSKY_alarmRaisedh+0x6>
   1481a:	48 1b       	sub	r20, r24
   1481c:	59 0b       	sbc	r21, r25
   1481e:	fa 01       	movw	r30, r20
   14820:	e5 5a       	subi	r30, 0xA5	; 165
   14822:	fa 4e       	sbci	r31, 0xEA	; 234
   14824:	e0 81       	ld	r30, Z
   14826:	6e 2f       	mov	r22, r30
   14828:	6f 70       	andi	r22, 0x0F	; 15
   1482a:	70 e0       	ldi	r23, 0x00	; 0
   1482c:	9b 01       	movw	r18, r22
   1482e:	23 70       	andi	r18, 0x03	; 3
   14830:	30 70       	andi	r19, 0x00	; 0
   14832:	21 15       	cp	r18, r1
   14834:	31 05       	cpc	r19, r1
   14836:	11 f1       	breq	.+68     	; 0x1487c <_Z17FRSKY_alarmRaisedh+0x70>
      if (ALARM_GREATER(idx, i)) {
   14838:	e2 95       	swap	r30
   1483a:	e3 70       	andi	r30, 0x03	; 3
   1483c:	9c 01       	movw	r18, r24
   1483e:	22 0f       	add	r18, r18
   14840:	33 1f       	adc	r19, r19
   14842:	45 57       	subi	r20, 0x75	; 117
   14844:	5d 4e       	sbci	r21, 0xED	; 237
   14846:	e0 fd       	sbrc	r30, 0
   14848:	0d c0       	rjmp	.+26     	; 0x14864 <_Z17FRSKY_alarmRaisedh+0x58>
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
          return true;
      }
      else {
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
   1484a:	28 0f       	add	r18, r24
   1484c:	39 1f       	adc	r19, r25
   1484e:	2b 59       	subi	r18, 0x9B	; 155
   14850:	30 4e       	sbci	r19, 0xE0	; 224
   14852:	42 53       	subi	r20, 0x32	; 50
   14854:	5d 4f       	sbci	r21, 0xFD	; 253
   14856:	f9 01       	movw	r30, r18
   14858:	30 81       	ld	r19, Z
   1485a:	fa 01       	movw	r30, r20
   1485c:	20 81       	ld	r18, Z
   1485e:	32 17       	cp	r19, r18
   14860:	68 f4       	brcc	.+26     	; 0x1487c <_Z17FRSKY_alarmRaisedh+0x70>
   14862:	47 c0       	rjmp	.+142    	; 0x148f2 <_Z17FRSKY_alarmRaisedh+0xe6>
bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
   14864:	28 0f       	add	r18, r24
   14866:	39 1f       	adc	r19, r25
   14868:	2b 59       	subi	r18, 0x9B	; 155
   1486a:	30 4e       	sbci	r19, 0xE0	; 224
   1486c:	42 53       	subi	r20, 0x32	; 50
   1486e:	5d 4f       	sbci	r21, 0xFD	; 253
   14870:	f9 01       	movw	r30, r18
   14872:	30 81       	ld	r19, Z
   14874:	fa 01       	movw	r30, r20
   14876:	20 81       	ld	r18, Z
   14878:	23 17       	cp	r18, r19
   1487a:	d8 f1       	brcs	.+118    	; 0x148f2 <_Z17FRSKY_alarmRaisedh+0xe6>
}

bool FRSKY_alarmRaised(uint8_t idx)
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
   1487c:	76 95       	lsr	r23
   1487e:	67 95       	ror	r22
   14880:	76 95       	lsr	r23
   14882:	67 95       	ror	r22
   14884:	61 15       	cp	r22, r1
   14886:	71 05       	cpc	r23, r1
   14888:	91 f1       	breq	.+100    	; 0x148ee <_Z17FRSKY_alarmRaisedh+0xe2>
      if (ALARM_GREATER(idx, i)) {
   1488a:	ac 01       	movw	r20, r24
   1488c:	a3 e0       	ldi	r26, 0x03	; 3
   1488e:	44 0f       	add	r20, r20
   14890:	55 1f       	adc	r21, r21
   14892:	aa 95       	dec	r26
   14894:	e1 f7       	brne	.-8      	; 0x1488e <_Z17FRSKY_alarmRaisedh+0x82>
   14896:	48 1b       	sub	r20, r24
   14898:	59 0b       	sbc	r21, r25
   1489a:	fa 01       	movw	r30, r20
   1489c:	e5 5a       	subi	r30, 0xA5	; 165
   1489e:	fa 4e       	sbci	r31, 0xEA	; 234
   148a0:	60 81       	ld	r22, Z
   148a2:	62 95       	swap	r22
   148a4:	63 70       	andi	r22, 0x03	; 3
   148a6:	70 e0       	ldi	r23, 0x00	; 0
   148a8:	76 95       	lsr	r23
   148aa:	67 95       	ror	r22
   148ac:	9c 01       	movw	r18, r24
   148ae:	22 0f       	add	r18, r18
   148b0:	33 1f       	adc	r19, r19
   148b2:	45 57       	subi	r20, 0x75	; 117
   148b4:	5d 4e       	sbci	r21, 0xED	; 237
   148b6:	61 15       	cp	r22, r1
   148b8:	71 05       	cpc	r23, r1
   148ba:	69 f0       	breq	.+26     	; 0x148d6 <_Z17FRSKY_alarmRaisedh+0xca>
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
   148bc:	82 0f       	add	r24, r18
   148be:	93 1f       	adc	r25, r19
   148c0:	8b 59       	subi	r24, 0x9B	; 155
   148c2:	90 4e       	sbci	r25, 0xE0	; 224
   148c4:	41 53       	subi	r20, 0x31	; 49
   148c6:	5d 4f       	sbci	r21, 0xFD	; 253
   148c8:	fc 01       	movw	r30, r24
   148ca:	90 81       	ld	r25, Z
   148cc:	fa 01       	movw	r30, r20
   148ce:	80 81       	ld	r24, Z
   148d0:	89 17       	cp	r24, r25
   148d2:	68 f4       	brcc	.+26     	; 0x148ee <_Z17FRSKY_alarmRaisedh+0xe2>
   148d4:	0e c0       	rjmp	.+28     	; 0x148f2 <_Z17FRSKY_alarmRaisedh+0xe6>
          return true;
      }
      else {
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
   148d6:	82 0f       	add	r24, r18
   148d8:	93 1f       	adc	r25, r19
   148da:	8b 59       	subi	r24, 0x9B	; 155
   148dc:	90 4e       	sbci	r25, 0xE0	; 224
   148de:	41 53       	subi	r20, 0x31	; 49
   148e0:	5d 4f       	sbci	r21, 0xFD	; 253
   148e2:	fc 01       	movw	r30, r24
   148e4:	90 81       	ld	r25, Z
   148e6:	fa 01       	movw	r30, r20
   148e8:	80 81       	ld	r24, Z
   148ea:	98 17       	cp	r25, r24
   148ec:	20 f0       	brcs	.+8      	; 0x148f6 <_Z17FRSKY_alarmRaisedh+0xea>
          return true;
      }
    }
  }
  return false;
   148ee:	80 e0       	ldi	r24, 0x00	; 0
   148f0:	08 95       	ret
{
  for (int i=0; i<2; i++) {
    if (ALARM_LEVEL(idx, i) != alarm_off) {
      if (ALARM_GREATER(idx, i)) {
        if (frskyTelemetry[idx].value > g_model.frsky.channels[idx].alarms_value[i])
          return true;
   148f2:	81 e0       	ldi	r24, 0x01	; 1
   148f4:	08 95       	ret
      }
      else {
        if (frskyTelemetry[idx].value < g_model.frsky.channels[idx].alarms_value[i])
          return true;
   148f6:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
  }
  return false;
}
   148f8:	08 95       	ret

000148fa <_Z15FRSKY_EnableTXDv>:

inline void FRSKY_EnableTXD(void)
{
  frskyTxBufferCount = 0;
   148fa:	10 92 62 1f 	sts	0x1F62, r1
  UCSR0B |= (1 << TXEN0); // enable TX
   148fe:	e1 ec       	ldi	r30, 0xC1	; 193
   14900:	f0 e0       	ldi	r31, 0x00	; 0
   14902:	80 81       	ld	r24, Z
   14904:	88 60       	ori	r24, 0x08	; 8
   14906:	80 83       	st	Z, r24
}
   14908:	08 95       	ret

0001490a <_Z15FRSKY_EnableRXDv>:

inline void FRSKY_EnableRXD(void)
{
  UCSR0B |= (1 << RXEN0);  // enable RX
   1490a:	e1 ec       	ldi	r30, 0xC1	; 193
   1490c:	f0 e0       	ldi	r31, 0x00	; 0
   1490e:	80 81       	ld	r24, Z
   14910:	80 61       	ori	r24, 0x10	; 16
   14912:	80 83       	st	Z, r24
  UCSR0B |= (1 << RXCIE0); // enable Interrupt
   14914:	80 81       	ld	r24, Z
   14916:	80 68       	ori	r24, 0x80	; 128
   14918:	80 83       	st	Z, r24
}
   1491a:	08 95       	ret

0001491c <_ZN9FrskyData3setEh>:
  FRSKY_EnableTXD(); // enable FrSky-Telemetry reception
  FRSKY_EnableRXD(); // enable FrSky-Telemetry reception
}

void FrskyData::set(uint8_t value)
{
   1491c:	fc 01       	movw	r30, r24
   this->value = value;
   1491e:	60 83       	st	Z, r22
   if (!max || max < value)
   14920:	82 81       	ldd	r24, Z+2	; 0x02
   14922:	88 23       	and	r24, r24
   14924:	11 f0       	breq	.+4      	; 0x1492a <_ZN9FrskyData3setEh+0xe>
   14926:	86 17       	cp	r24, r22
   14928:	08 f4       	brcc	.+2      	; 0x1492c <_ZN9FrskyData3setEh+0x10>
     max = value;
   1492a:	62 83       	std	Z+2, r22	; 0x02
   if (!min || min > value)
   1492c:	81 81       	ldd	r24, Z+1	; 0x01
   1492e:	88 23       	and	r24, r24
   14930:	11 f0       	breq	.+4      	; 0x14936 <_ZN9FrskyData3setEh+0x1a>
   14932:	68 17       	cp	r22, r24
   14934:	08 f4       	brcc	.+2      	; 0x14938 <_ZN9FrskyData3setEh+0x1c>
     min = value;
   14936:	61 83       	std	Z+1, r22	; 0x01
   14938:	08 95       	ret

0001493a <_Z18processFrskyPacketPh>:
    - Alarm level/mode/threshold settings for Ch1A, Ch1B, Ch2A, Ch2B
    - User Data packets
*/

void processFrskyPacket(uint8_t *packet)
{
   1493a:	0f 93       	push	r16
   1493c:	1f 93       	push	r17
   1493e:	cf 93       	push	r28
   14940:	df 93       	push	r29
   14942:	ec 01       	movw	r28, r24
  // What type of packet?
  switch (packet[0])
   14944:	88 81       	ld	r24, Y
   14946:	8d 3f       	cpi	r24, 0xFD	; 253
   14948:	89 f1       	breq	.+98     	; 0x149ac <_Z18processFrskyPacketPh+0x72>
   1494a:	8e 3f       	cpi	r24, 0xFE	; 254
   1494c:	18 f4       	brcc	.+6      	; 0x14954 <_Z18processFrskyPacketPh+0x1a>
   1494e:	89 3f       	cpi	r24, 0xF9	; 249
   14950:	c8 f1       	brcs	.+114    	; 0x149c4 <_Z18processFrskyPacketPh+0x8a>
   14952:	03 c0       	rjmp	.+6      	; 0x1495a <_Z18processFrskyPacketPh+0x20>
   14954:	8e 3f       	cpi	r24, 0xFE	; 254
   14956:	b1 f5       	brne	.+108    	; 0x149c4 <_Z18processFrskyPacketPh+0x8a>
   14958:	13 c0       	rjmp	.+38     	; 0x14980 <_Z18processFrskyPacketPh+0x46>
    case A21PKT:
    case A12PKT:
    case A11PKT:
      {
        struct FrskyAlarm *alarmptr ;
        alarmptr = &frskyAlarms[(packet[0]-A22PKT)] ;
   1495a:	90 e0       	ldi	r25, 0x00	; 0
   1495c:	89 5f       	subi	r24, 0xF9	; 249
   1495e:	90 40       	sbci	r25, 0x00	; 0
        alarmptr->value = packet[1];
   14960:	fc 01       	movw	r30, r24
   14962:	ee 0f       	add	r30, r30
   14964:	ff 1f       	adc	r31, r31
   14966:	e8 0f       	add	r30, r24
   14968:	f9 1f       	adc	r31, r25
   1496a:	ef 58       	subi	r30, 0x8F	; 143
   1496c:	f0 4e       	sbci	r31, 0xE0	; 224
   1496e:	89 81       	ldd	r24, Y+1	; 0x01
   14970:	82 83       	std	Z+2, r24	; 0x02
        alarmptr->greater = packet[2] & 0x01;
   14972:	8a 81       	ldd	r24, Y+2	; 0x02
   14974:	81 70       	andi	r24, 0x01	; 1
   14976:	81 83       	std	Z+1, r24	; 0x01
        alarmptr->level = packet[3] & 0x03;
   14978:	8b 81       	ldd	r24, Y+3	; 0x03
   1497a:	83 70       	andi	r24, 0x03	; 3
   1497c:	80 83       	st	Z, r24
      }
      break;
   1497e:	22 c0       	rjmp	.+68     	; 0x149c4 <_Z18processFrskyPacketPh+0x8a>
    case LINKPKT: // A1/A2/RSSI values
      frskyTelemetry[0].set(packet[1]);
   14980:	85 e6       	ldi	r24, 0x65	; 101
   14982:	9f e1       	ldi	r25, 0x1F	; 31
   14984:	69 81       	ldd	r22, Y+1	; 0x01
   14986:	0e 94 8e a4 	call	0x1491c	; 0x1491c <_ZN9FrskyData3setEh>
      frskyTelemetry[1].set(packet[2]);
   1498a:	88 e6       	ldi	r24, 0x68	; 104
   1498c:	9f e1       	ldi	r25, 0x1F	; 31
   1498e:	6a 81       	ldd	r22, Y+2	; 0x02
   14990:	0e 94 8e a4 	call	0x1491c	; 0x1491c <_ZN9FrskyData3setEh>
      frskyRSSI[0].set(packet[3]);
   14994:	8b e6       	ldi	r24, 0x6B	; 107
   14996:	9f e1       	ldi	r25, 0x1F	; 31
   14998:	6b 81       	ldd	r22, Y+3	; 0x03
   1499a:	0e 94 8e a4 	call	0x1491c	; 0x1491c <_ZN9FrskyData3setEh>
      frskyRSSI[1].set(packet[4] / 2);
   1499e:	6c 81       	ldd	r22, Y+4	; 0x04
   149a0:	66 95       	lsr	r22
   149a2:	8e e6       	ldi	r24, 0x6E	; 110
   149a4:	9f e1       	ldi	r25, 0x1F	; 31
   149a6:	0e 94 8e a4 	call	0x1491c	; 0x1491c <_ZN9FrskyData3setEh>
      break;
   149aa:	0c c0       	rjmp	.+24     	; 0x149c4 <_Z18processFrskyPacketPh+0x8a>

    case USRPKT: // User Data packet
#ifdef FRSKY_HUB
      uint8_t numBytes = 3 + (packet[1] & 0x07); // sanitize in case of data corruption leading to buffer overflow
   149ac:	19 81       	ldd	r17, Y+1	; 0x01
   149ae:	17 70       	andi	r17, 0x07	; 7
   149b0:	1d 5f       	subi	r17, 0xFD	; 253
    - A1/A2/RSSI telemetry data
    - Alarm level/mode/threshold settings for Ch1A, Ch1B, Ch2A, Ch2B
    - User Data packets
*/

void processFrskyPacket(uint8_t *packet)
   149b2:	23 96       	adiw	r28, 0x03	; 3
      break;

    case USRPKT: // User Data packet
#ifdef FRSKY_HUB
      uint8_t numBytes = 3 + (packet[1] & 0x07); // sanitize in case of data corruption leading to buffer overflow
      for (uint8_t i=3; i<numBytes; i++) {
   149b4:	03 e0       	ldi	r16, 0x03	; 3
   149b6:	04 c0       	rjmp	.+8      	; 0x149c0 <_Z18processFrskyPacketPh+0x86>
        parseTelemHubByte(packet[i]);
   149b8:	89 91       	ld	r24, Y+
   149ba:	0e 94 0a a3 	call	0x14614	; 0x14614 <_Z17parseTelemHubByteh>
      break;

    case USRPKT: // User Data packet
#ifdef FRSKY_HUB
      uint8_t numBytes = 3 + (packet[1] & 0x07); // sanitize in case of data corruption leading to buffer overflow
      for (uint8_t i=3; i<numBytes; i++) {
   149be:	0f 5f       	subi	r16, 0xFF	; 255
   149c0:	01 17       	cp	r16, r17
   149c2:	d0 f3       	brcs	.-12     	; 0x149b8 <_Z18processFrskyPacketPh+0x7e>
      // TODO frskyUsrStreaming = FRSKY_TIMEOUT10ms*3; // reset counter only if valid frsky packets are being detected
#endif
      break;
  }

  FrskyRxBufferReady = 0;
   149c4:	10 92 63 1f 	sts	0x1F63, r1
  frskyStreaming = FRSKY_TIMEOUT10ms; // reset counter only if valid frsky packets are being detected
   149c8:	84 e1       	ldi	r24, 0x14	; 20
   149ca:	80 93 64 1f 	sts	0x1F64, r24
}
   149ce:	df 91       	pop	r29
   149d0:	cf 91       	pop	r28
   149d2:	1f 91       	pop	r17
   149d4:	0f 91       	pop	r16
   149d6:	08 95       	ret

000149d8 <__vector_25>:
   a second buffer to receive data while one buffer is being processed (slowly).
*/

#ifndef SIMU
ISR(USART0_RX_vect)
{
   149d8:	1f 92       	push	r1
   149da:	0f 92       	push	r0
   149dc:	0f b6       	in	r0, 0x3f	; 63
   149de:	0f 92       	push	r0
   149e0:	0b b6       	in	r0, 0x3b	; 59
   149e2:	0f 92       	push	r0
   149e4:	11 24       	eor	r1, r1
   149e6:	2f 93       	push	r18
   149e8:	3f 93       	push	r19
   149ea:	4f 93       	push	r20
   149ec:	5f 93       	push	r21
   149ee:	6f 93       	push	r22
   149f0:	7f 93       	push	r23
   149f2:	8f 93       	push	r24
   149f4:	9f 93       	push	r25
   149f6:	af 93       	push	r26
   149f8:	bf 93       	push	r27
   149fa:	ef 93       	push	r30
   149fc:	ff 93       	push	r31
  uint8_t data;
  
  static uint8_t numPktBytes = 0;
  static uint8_t dataState = frskyDataIdle;
  
  UCSR0B &= ~(1 << RXCIE0); // disable Interrupt
   149fe:	80 91 c1 00 	lds	r24, 0x00C1
   14a02:	8f 77       	andi	r24, 0x7F	; 127
   14a04:	80 93 c1 00 	sts	0x00C1, r24
  sei() ;
   14a08:	78 94       	sei

  stat = UCSR0A; // USART control and Status Register 0 A
   14a0a:	90 91 c0 00 	lds	r25, 0x00C0
              UCSZ02:   Character Size bit 2
              RXB80:    Rx data bit 8
              TXB80:    Tx data bit 8
    */

  data = UDR0; // USART data register 0
   14a0e:	80 91 c6 00 	lds	r24, 0x00C6

  if (stat & ((1 << FE0) | (1 << DOR0) | (1 << UPE0)))
   14a12:	9c 71       	andi	r25, 0x1C	; 28
   14a14:	29 f0       	breq	.+10     	; 0x14a20 <__vector_25+0x48>
  { // discard buffer and start fresh on any comms error
    FrskyRxBufferReady = 0;
   14a16:	10 92 63 1f 	sts	0x1F63, r1
    numPktBytes = 0;
   14a1a:	10 92 19 22 	sts	0x2219, r1
   14a1e:	4d c0       	rjmp	.+154    	; 0x14aba <__vector_25+0xe2>
  } 
  else
  {
    if (FrskyRxBufferReady == 0) // can't get more data if the buffer hasn't been cleared
   14a20:	90 91 63 1f 	lds	r25, 0x1F63
   14a24:	99 23       	and	r25, r25
   14a26:	09 f0       	breq	.+2      	; 0x14a2a <__vector_25+0x52>
   14a28:	48 c0       	rjmp	.+144    	; 0x14aba <__vector_25+0xe2>
    {
      switch (dataState) 
   14a2a:	90 91 18 22 	lds	r25, 0x2218
   14a2e:	91 30       	cpi	r25, 0x01	; 1
   14a30:	39 f0       	breq	.+14     	; 0x14a40 <__vector_25+0x68>
   14a32:	91 30       	cpi	r25, 0x01	; 1
   14a34:	d8 f1       	brcs	.+118    	; 0x14aac <__vector_25+0xd4>
   14a36:	92 30       	cpi	r25, 0x02	; 2
   14a38:	79 f0       	breq	.+30     	; 0x14a58 <__vector_25+0x80>
   14a3a:	93 30       	cpi	r25, 0x03	; 3
   14a3c:	f1 f5       	brne	.+124    	; 0x14aba <__vector_25+0xe2>
   14a3e:	26 c0       	rjmp	.+76     	; 0x14a8c <__vector_25+0xb4>
      {
        case frskyDataStart:
          if (data == START_STOP) break; // Remain in userDataStart if possible 0x7e,0x7e doublet found.
   14a40:	8e 37       	cpi	r24, 0x7E	; 126
   14a42:	d9 f1       	breq	.+118    	; 0x14aba <__vector_25+0xe2>

          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
   14a44:	90 91 19 22 	lds	r25, 0x2219
   14a48:	93 31       	cpi	r25, 0x13	; 19
   14a4a:	70 f5       	brcc	.+92     	; 0x14aa8 <__vector_25+0xd0>
            frskyRxBuffer[numPktBytes++] = data;
   14a4c:	e9 2f       	mov	r30, r25
   14a4e:	f0 e0       	ldi	r31, 0x00	; 0
   14a50:	ed 5b       	subi	r30, 0xBD	; 189
   14a52:	f0 4e       	sbci	r31, 0xE0	; 224
   14a54:	80 83       	st	Z, r24
   14a56:	25 c0       	rjmp	.+74     	; 0x14aa2 <__vector_25+0xca>
          dataState = frskyDataInFrame;
          break;

        case frskyDataInFrame:
          if (data == BYTESTUFF)
   14a58:	8d 37       	cpi	r24, 0x7D	; 125
   14a5a:	11 f4       	brne	.+4      	; 0x14a60 <__vector_25+0x88>
          { 
              dataState = frskyDataXOR; // XOR next byte
   14a5c:	83 e0       	ldi	r24, 0x03	; 3
   14a5e:	2b c0       	rjmp	.+86     	; 0x14ab6 <__vector_25+0xde>
              break; 
          }
          if (data == START_STOP) // end of frame detected
   14a60:	8e 37       	cpi	r24, 0x7E	; 126
   14a62:	39 f4       	brne	.+14     	; 0x14a72 <__vector_25+0x9a>
          {
            processFrskyPacket(frskyRxBuffer); // FrskyRxBufferReady = 1;
   14a64:	83 e4       	ldi	r24, 0x43	; 67
   14a66:	9f e1       	ldi	r25, 0x1F	; 31
   14a68:	0e 94 9d a4 	call	0x1493a	; 0x1493a <_Z18processFrskyPacketPh>
            dataState = frskyDataIdle;
   14a6c:	10 92 18 22 	sts	0x2218, r1
            break;
   14a70:	24 c0       	rjmp	.+72     	; 0x14aba <__vector_25+0xe2>
          }
          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
   14a72:	90 91 19 22 	lds	r25, 0x2219
   14a76:	93 31       	cpi	r25, 0x13	; 19
   14a78:	00 f5       	brcc	.+64     	; 0x14aba <__vector_25+0xe2>
            frskyRxBuffer[numPktBytes++] = data;
   14a7a:	e9 2f       	mov	r30, r25
   14a7c:	f0 e0       	ldi	r31, 0x00	; 0
   14a7e:	ed 5b       	subi	r30, 0xBD	; 189
   14a80:	f0 4e       	sbci	r31, 0xE0	; 224
   14a82:	80 83       	st	Z, r24
   14a84:	9f 5f       	subi	r25, 0xFF	; 255
   14a86:	90 93 19 22 	sts	0x2219, r25
   14a8a:	17 c0       	rjmp	.+46     	; 0x14aba <__vector_25+0xe2>
          break;

        case frskyDataXOR:
          if (numPktBytes < FRSKY_RX_PACKET_SIZE)
   14a8c:	90 91 19 22 	lds	r25, 0x2219
   14a90:	93 31       	cpi	r25, 0x13	; 19
   14a92:	50 f4       	brcc	.+20     	; 0x14aa8 <__vector_25+0xd0>
            frskyRxBuffer[numPktBytes++] = data ^ STUFF_MASK;
   14a94:	e9 2f       	mov	r30, r25
   14a96:	f0 e0       	ldi	r31, 0x00	; 0
   14a98:	ed 5b       	subi	r30, 0xBD	; 189
   14a9a:	f0 4e       	sbci	r31, 0xE0	; 224
   14a9c:	20 e2       	ldi	r18, 0x20	; 32
   14a9e:	28 27       	eor	r18, r24
   14aa0:	20 83       	st	Z, r18
   14aa2:	9f 5f       	subi	r25, 0xFF	; 255
   14aa4:	90 93 19 22 	sts	0x2219, r25
          dataState = frskyDataInFrame;
   14aa8:	82 e0       	ldi	r24, 0x02	; 2
   14aaa:	05 c0       	rjmp	.+10     	; 0x14ab6 <__vector_25+0xde>
          break;

        case frskyDataIdle:
          if (data == START_STOP)
   14aac:	8e 37       	cpi	r24, 0x7E	; 126
   14aae:	29 f4       	brne	.+10     	; 0x14aba <__vector_25+0xe2>
          {
            numPktBytes = 0;
   14ab0:	10 92 19 22 	sts	0x2219, r1
            dataState = frskyDataStart;
   14ab4:	81 e0       	ldi	r24, 0x01	; 1
   14ab6:	80 93 18 22 	sts	0x2218, r24
          break;

      } // switch
    } // if (FrskyRxBufferReady == 0)
  }
  cli() ;
   14aba:	f8 94       	cli
  UCSR0B |= (1 << RXCIE0); // enable Interrupt
   14abc:	80 91 c1 00 	lds	r24, 0x00C1
   14ac0:	80 68       	ori	r24, 0x80	; 128
   14ac2:	80 93 c1 00 	sts	0x00C1, r24
}
   14ac6:	ff 91       	pop	r31
   14ac8:	ef 91       	pop	r30
   14aca:	bf 91       	pop	r27
   14acc:	af 91       	pop	r26
   14ace:	9f 91       	pop	r25
   14ad0:	8f 91       	pop	r24
   14ad2:	7f 91       	pop	r23
   14ad4:	6f 91       	pop	r22
   14ad6:	5f 91       	pop	r21
   14ad8:	4f 91       	pop	r20
   14ada:	3f 91       	pop	r19
   14adc:	2f 91       	pop	r18
   14ade:	0f 90       	pop	r0
   14ae0:	0b be       	out	0x3b, r0	; 59
   14ae2:	0f 90       	pop	r0
   14ae4:	0f be       	out	0x3f, r0	; 63
   14ae6:	0f 90       	pop	r0
   14ae8:	1f 90       	pop	r1
   14aea:	18 95       	reti

00014aec <_Z14resetTelemetryv>:
// These global so we can close any open file from anywhere
FATFS FATFS_Obj;
FIL g_oLogFile;
#endif
void resetTelemetry()
{
   14aec:	1f 93       	push	r17
   14aee:	cf 93       	push	r28
   14af0:	df 93       	push	r29
  memset(frskyTelemetry, 0, sizeof(frskyTelemetry));
   14af2:	86 e0       	ldi	r24, 0x06	; 6
   14af4:	e5 e6       	ldi	r30, 0x65	; 101
   14af6:	ff e1       	ldi	r31, 0x1F	; 31
   14af8:	df 01       	movw	r26, r30
   14afa:	98 2f       	mov	r25, r24
   14afc:	1d 92       	st	X+, r1
   14afe:	9a 95       	dec	r25
   14b00:	e9 f7       	brne	.-6      	; 0x14afc <_Z14resetTelemetryv+0x10>
  memset(frskyRSSI, 0, sizeof(frskyRSSI));
   14b02:	eb e6       	ldi	r30, 0x6B	; 107
   14b04:	ff e1       	ldi	r31, 0x1F	; 31
   14b06:	df 01       	movw	r26, r30
   14b08:	1d 92       	st	X+, r1
   14b0a:	8a 95       	dec	r24
   14b0c:	e9 f7       	brne	.-6      	; 0x14b08 <_Z14resetTelemetryv+0x1c>
  // Determine and set log file filename
  
  FRESULT result;

  // close any file left open. E.G. Changing models with log switch still on.
  if (g_oLogFile.fs) f_close(&g_oLogFile); 
   14b0e:	80 91 f8 21 	lds	r24, 0x21F8
   14b12:	90 91 f9 21 	lds	r25, 0x21F9
   14b16:	00 97       	sbiw	r24, 0x00	; 0
   14b18:	21 f0       	breq	.+8      	; 0x14b22 <_Z14resetTelemetryv+0x36>
   14b1a:	88 ef       	ldi	r24, 0xF8	; 248
   14b1c:	91 e2       	ldi	r25, 0x21	; 33
   14b1e:	0e 94 ce 8b 	call	0x1179c	; 0x1179c <f_close>

  strcpy(g_logFilename, "/G9XLOGS/M00_000.TXT");
   14b22:	80 eb       	ldi	r24, 0xB0	; 176
   14b24:	9f e1       	ldi	r25, 0x1F	; 31
   14b26:	63 e8       	ldi	r22, 0x83	; 131
   14b28:	71 e1       	ldi	r23, 0x11	; 17
   14b2a:	0e 94 8d ab 	call	0x1571a	; 0x1571a <strcpy>

  uint8_t num = g_eeGeneral.currModel + 1;
   14b2e:	80 91 6b 12 	lds	r24, 0x126B
   14b32:	8f 5f       	subi	r24, 0xFF	; 255
  char *n = &g_logFilename[11];
  *n = (char)((num % 10) + '0');
   14b34:	6a e0       	ldi	r22, 0x0A	; 10
   14b36:	0e 94 fb aa 	call	0x155f6	; 0x155f6 <__udivmodqi4>
   14b3a:	90 5d       	subi	r25, 0xD0	; 208
   14b3c:	90 93 bb 1f 	sts	0x1FBB, r25
  *(--n) = (char)((num / 10) + '0');
   14b40:	80 5d       	subi	r24, 0xD0	; 208
   14b42:	80 93 ba 1f 	sts	0x1FBA, r24

  result = f_mount(0, &FATFS_Obj);
   14b46:	80 e0       	ldi	r24, 0x00	; 0
   14b48:	66 ec       	ldi	r22, 0xC6	; 198
   14b4a:	7f e1       	ldi	r23, 0x1F	; 31
   14b4c:	0e 94 55 86 	call	0x10caa	; 0x10caa <f_mount>
  if (result!=FR_OK)
   14b50:	00 97       	sbiw	r24, 0x00	; 0
   14b52:	29 f0       	breq	.+10     	; 0x14b5e <_Z14resetTelemetryv+0x72>
  {
    strcpy(g_logFilename, "FILE SYSTEM ERROR");
   14b54:	80 eb       	ldi	r24, 0xB0	; 176
   14b56:	9f e1       	ldi	r25, 0x1F	; 31
   14b58:	68 e9       	ldi	r22, 0x98	; 152
   14b5a:	71 e1       	ldi	r23, 0x11	; 17
   14b5c:	43 c0       	rjmp	.+134    	; 0x14be4 <_Z14resetTelemetryv+0xf8>

        // bump log file counter (file extension)
        n = &g_logFilename[15];
        if (++*n > '9')
        {
          *n='0';
   14b5e:	10 e3       	ldi	r17, 0x30	; 48
  else
  {
    // Skip over any existing log files ... _000, _001, etc. (or find first gap in numbering)
    while (1)
    {
      result = f_open(&g_oLogFile, g_logFilename, FA_OPEN_EXISTING | FA_READ);
   14b60:	88 ef       	ldi	r24, 0xF8	; 248
   14b62:	91 e2       	ldi	r25, 0x21	; 33
   14b64:	60 eb       	ldi	r22, 0xB0	; 176
   14b66:	7f e1       	ldi	r23, 0x1F	; 31
   14b68:	41 e0       	ldi	r20, 0x01	; 1
   14b6a:	0e 94 6e 86 	call	0x10cdc	; 0x10cdc <f_open>
   14b6e:	ec 01       	movw	r28, r24

      if (result == FR_OK)
   14b70:	00 97       	sbiw	r24, 0x00	; 0
   14b72:	01 f5       	brne	.+64     	; 0x14bb4 <_Z14resetTelemetryv+0xc8>
      {
        f_close(&g_oLogFile);
   14b74:	88 ef       	ldi	r24, 0xF8	; 248
   14b76:	91 e2       	ldi	r25, 0x21	; 33
   14b78:	0e 94 ce 8b 	call	0x1179c	; 0x1179c <f_close>

        // bump log file counter (file extension)
        n = &g_logFilename[15];
        if (++*n > '9')
   14b7c:	80 91 bf 1f 	lds	r24, 0x1FBF
   14b80:	8f 5f       	subi	r24, 0xFF	; 255
   14b82:	80 93 bf 1f 	sts	0x1FBF, r24
   14b86:	8a 33       	cpi	r24, 0x3A	; 58
   14b88:	5c f3       	brlt	.-42     	; 0x14b60 <_Z14resetTelemetryv+0x74>
        {
          *n='0';
   14b8a:	10 93 bf 1f 	sts	0x1FBF, r17
          n--;
          if (++*n > '9')
   14b8e:	80 91 be 1f 	lds	r24, 0x1FBE
   14b92:	8f 5f       	subi	r24, 0xFF	; 255
   14b94:	80 93 be 1f 	sts	0x1FBE, r24
   14b98:	8a 33       	cpi	r24, 0x3A	; 58
   14b9a:	14 f3       	brlt	.-60     	; 0x14b60 <_Z14resetTelemetryv+0x74>
          {
            *n='0';
   14b9c:	10 93 be 1f 	sts	0x1FBE, r17
            n--;
            if (++*n > '9')
   14ba0:	80 91 bd 1f 	lds	r24, 0x1FBD
   14ba4:	8f 5f       	subi	r24, 0xFF	; 255
   14ba6:	80 93 bd 1f 	sts	0x1FBD, r24
   14baa:	8a 33       	cpi	r24, 0x3A	; 58
   14bac:	cc f2       	brlt	.-78     	; 0x14b60 <_Z14resetTelemetryv+0x74>
            {
              *n='0';
   14bae:	10 93 bd 1f 	sts	0x1FBD, r17
              break; // Wow. We looped back around past 999 to 000! abort loop
   14bb2:	09 c0       	rjmp	.+18     	; 0x14bc6 <_Z14resetTelemetryv+0xda>
            }
          }
        }
      }
      else if (result == FR_NO_PATH)
   14bb4:	85 30       	cpi	r24, 0x05	; 5
   14bb6:	91 05       	cpc	r25, r1
   14bb8:	31 f4       	brne	.+12     	; 0x14bc6 <_Z14resetTelemetryv+0xda>
      {
        if (f_mkdir("/G9XLOGS") != FR_OK)
   14bba:	8a ea       	ldi	r24, 0xAA	; 170
   14bbc:	91 e1       	ldi	r25, 0x11	; 17
   14bbe:	0e 94 24 93 	call	0x12648	; 0x12648 <f_mkdir>
   14bc2:	00 97       	sbiw	r24, 0x00	; 0
   14bc4:	69 f2       	breq	.-102    	; 0x14b60 <_Z14resetTelemetryv+0x74>
      }
      else
        break;
    }

    switch (result)
   14bc6:	c3 30       	cpi	r28, 0x03	; 3
   14bc8:	d1 05       	cpc	r29, r1
   14bca:	41 f0       	breq	.+16     	; 0x14bdc <_Z14resetTelemetryv+0xf0>
   14bcc:	c5 30       	cpi	r28, 0x05	; 5
   14bce:	d1 05       	cpc	r29, r1
   14bd0:	59 f4       	brne	.+22     	; 0x14be8 <_Z14resetTelemetryv+0xfc>
    {
      case FR_NO_PATH:
        strcpy(g_logFilename, "Check /G9XLOGS folder");
   14bd2:	80 eb       	ldi	r24, 0xB0	; 176
   14bd4:	9f e1       	ldi	r25, 0x1F	; 31
   14bd6:	63 eb       	ldi	r22, 0xB3	; 179
   14bd8:	71 e1       	ldi	r23, 0x11	; 17
   14bda:	04 c0       	rjmp	.+8      	; 0x14be4 <_Z14resetTelemetryv+0xf8>
        break;
      case FR_NOT_READY:
        strcpy(g_logFilename, "DATA CARD NOT PRESENT");
   14bdc:	80 eb       	ldi	r24, 0xB0	; 176
   14bde:	9f e1       	ldi	r25, 0x1F	; 31
   14be0:	69 ec       	ldi	r22, 0xC9	; 201
   14be2:	71 e1       	ldi	r23, 0x11	; 17
   14be4:	0e 94 8d ab 	call	0x1571a	; 0x1571a <strcpy>

  // g_logFilename should now be set appropriately.

#endif

}
   14be8:	df 91       	pop	r29
   14bea:	cf 91       	pop	r28
   14bec:	1f 91       	pop	r17
   14bee:	08 95       	ret

00014bf0 <_Z10FRSKY_Initv>:
}

void FRSKY_Init(void)
{
  // clear frsky variables
  memset(frskyAlarms, 0, sizeof(frskyAlarms));
   14bf0:	8c e0       	ldi	r24, 0x0C	; 12
   14bf2:	e1 e7       	ldi	r30, 0x71	; 113
   14bf4:	ff e1       	ldi	r31, 0x1F	; 31
   14bf6:	df 01       	movw	r26, r30
   14bf8:	1d 92       	st	X+, r1
   14bfa:	8a 95       	dec	r24
   14bfc:	e9 f7       	brne	.-6      	; 0x14bf8 <_Z10FRSKY_Initv+0x8>
  resetTelemetry();
   14bfe:	0e 94 76 a5 	call	0x14aec	; 0x14aec <_Z14resetTelemetryv>

  DDRE &= ~(1 << DDE0);    // set RXD0 pin as input
   14c02:	68 98       	cbi	0x0d, 0	; 13
  PORTE &= ~(1 << PORTE0); // disable pullup on RXD0 pin
   14c04:	70 98       	cbi	0x0e, 0	; 14
#undef BAUD
#define BAUD 9600
#ifndef SIMU
#include <util/setbaud.h>

  UBRR0H = UBRRH_VALUE;
   14c06:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = UBRRL_VALUE;
   14c0a:	87 e6       	ldi	r24, 0x67	; 103
   14c0c:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0A &= ~(1 << U2X0); // disable double speed operation.
   14c10:	80 91 c0 00 	lds	r24, 0x00C0
   14c14:	8d 7f       	andi	r24, 0xFD	; 253
   14c16:	80 93 c0 00 	sts	0x00C0, r24

  // set 8N1
  UCSR0B = 0 | (0 << RXCIE0) | (0 << TXCIE0) | (0 << UDRIE0) | (0 << RXEN0) | (0 << TXEN0) | (0 << UCSZ02);
   14c1a:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0 | (1 << UCSZ01) | (1 << UCSZ00);
   14c1e:	86 e0       	ldi	r24, 0x06	; 6
   14c20:	80 93 c2 00 	sts	0x00C2, r24

  
  while (UCSR0A & (1 << RXC0)) UDR0; // flush receive buffer
   14c24:	02 c0       	rjmp	.+4      	; 0x14c2a <_Z10FRSKY_Initv+0x3a>
   14c26:	80 91 c6 00 	lds	r24, 0x00C6
   14c2a:	80 91 c0 00 	lds	r24, 0x00C0
   14c2e:	87 fd       	sbrc	r24, 7
   14c30:	fa cf       	rjmp	.-12     	; 0x14c26 <_Z10FRSKY_Initv+0x36>

#endif

  // These should be running right from power up on a FrSky enabled '9X.
  FRSKY_EnableTXD(); // enable FrSky-Telemetry reception
   14c32:	0e 94 7d a4 	call	0x148fa	; 0x148fa <_Z15FRSKY_EnableTXDv>
  FRSKY_EnableRXD(); // enable FrSky-Telemetry reception
   14c36:	0e 94 85 a4 	call	0x1490a	; 0x1490a <_Z15FRSKY_EnableRXDv>
}
   14c3a:	08 95       	ret

00014c3c <_Z7setDesth>:
  stn6,
  stn7
};

MixData* setDest(uint8_t dch)
{
   14c3c:	ff 92       	push	r15
   14c3e:	0f 93       	push	r16
   14c40:	1f 93       	push	r17
   14c42:	cf 93       	push	r28
   14c44:	df 93       	push	r29
   14c46:	f8 2e       	mov	r15, r24
    uint8_t i = 0;
    while ((g_model.mixData[i].destCh<=dch) && (g_model.mixData[i].destCh) && (i<MAX_MIXERS)) i++;
   14c48:	20 e0       	ldi	r18, 0x00	; 0
   14c4a:	30 e0       	ldi	r19, 0x00	; 0
   14c4c:	90 e0       	ldi	r25, 0x00	; 0
   14c4e:	a2 2f       	mov	r26, r18
   14c50:	a9 01       	movw	r20, r18
   14c52:	f9 01       	movw	r30, r18
   14c54:	b3 e0       	ldi	r27, 0x03	; 3
   14c56:	ee 0f       	add	r30, r30
   14c58:	ff 1f       	adc	r31, r31
   14c5a:	ba 95       	dec	r27
   14c5c:	e1 f7       	brne	.-8      	; 0x14c56 <_Z7setDesth+0x1a>
   14c5e:	e2 0f       	add	r30, r18
   14c60:	f3 1f       	adc	r31, r19
   14c62:	e1 56       	subi	r30, 0x61	; 97
   14c64:	fd 4e       	sbci	r31, 0xED	; 237
   14c66:	e0 81       	ld	r30, Z
   14c68:	ef 71       	andi	r30, 0x1F	; 31
   14c6a:	6e 2f       	mov	r22, r30
   14c6c:	70 e0       	ldi	r23, 0x00	; 0
   14c6e:	86 17       	cp	r24, r22
   14c70:	97 07       	cpc	r25, r23
   14c72:	3c f0       	brlt	.+14     	; 0x14c82 <_Z7setDesth+0x46>
   14c74:	ee 23       	and	r30, r30
   14c76:	29 f0       	breq	.+10     	; 0x14c82 <_Z7setDesth+0x46>
   14c78:	2f 5f       	subi	r18, 0xFF	; 255
   14c7a:	3f 4f       	sbci	r19, 0xFF	; 255
   14c7c:	21 32       	cpi	r18, 0x21	; 33
   14c7e:	31 05       	cpc	r19, r1
   14c80:	31 f7       	brne	.-52     	; 0x14c4e <_Z7setDesth+0x12>
    if(i==MAX_MIXERS) return &g_model.mixData[0];
   14c82:	a0 32       	cpi	r26, 0x20	; 32
   14c84:	a9 f1       	breq	.+106    	; 0x14cf0 <_Z7setDesth+0xb4>

    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
   14c86:	ea 01       	movw	r28, r20
   14c88:	e3 e0       	ldi	r30, 0x03	; 3
   14c8a:	cc 0f       	add	r28, r28
   14c8c:	dd 1f       	adc	r29, r29
   14c8e:	ea 95       	dec	r30
   14c90:	e1 f7       	brne	.-8      	; 0x14c8a <_Z7setDesth+0x4e>
   14c92:	c4 0f       	add	r28, r20
   14c94:	d5 1f       	adc	r29, r21
   14c96:	8e 01       	movw	r16, r28
   14c98:	01 56       	subi	r16, 0x61	; 97
   14c9a:	1d 4e       	sbci	r17, 0xED	; 237
{
    uint8_t i = 0;
    while ((g_model.mixData[i].destCh<=dch) && (g_model.mixData[i].destCh) && (i<MAX_MIXERS)) i++;
    if(i==MAX_MIXERS) return &g_model.mixData[0];

    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
   14c9c:	9a 01       	movw	r18, r20
   14c9e:	2f 5f       	subi	r18, 0xFF	; 255
   14ca0:	3f 4f       	sbci	r19, 0xFF	; 255
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
   14ca2:	c9 01       	movw	r24, r18
   14ca4:	73 e0       	ldi	r23, 0x03	; 3
   14ca6:	88 0f       	add	r24, r24
   14ca8:	99 1f       	adc	r25, r25
   14caa:	7a 95       	dec	r23
   14cac:	e1 f7       	brne	.-8      	; 0x14ca6 <_Z7setDesth+0x6a>
   14cae:	82 0f       	add	r24, r18
   14cb0:	93 1f       	adc	r25, r19
   14cb2:	9a 01       	movw	r18, r20
   14cb4:	20 95       	com	r18
   14cb6:	30 95       	com	r19
   14cb8:	20 5e       	subi	r18, 0xE0	; 224
   14cba:	3f 4f       	sbci	r19, 0xFF	; 255
   14cbc:	a9 01       	movw	r20, r18
   14cbe:	63 e0       	ldi	r22, 0x03	; 3
   14cc0:	44 0f       	add	r20, r20
   14cc2:	55 1f       	adc	r21, r21
   14cc4:	6a 95       	dec	r22
   14cc6:	e1 f7       	brne	.-8      	; 0x14cc0 <_Z7setDesth+0x84>
   14cc8:	42 0f       	add	r20, r18
   14cca:	53 1f       	adc	r21, r19
   14ccc:	81 56       	subi	r24, 0x61	; 97
   14cce:	9d 4e       	sbci	r25, 0xED	; 237
   14cd0:	b8 01       	movw	r22, r16
   14cd2:	0e 94 74 ab 	call	0x156e8	; 0x156e8 <memmove>
    memset(&g_model.mixData[i],0,sizeof(MixData));
   14cd6:	89 e0       	ldi	r24, 0x09	; 9
   14cd8:	d8 01       	movw	r26, r16
   14cda:	1d 92       	st	X+, r1
   14cdc:	8a 95       	dec	r24
   14cde:	e9 f7       	brne	.-6      	; 0x14cda <_Z7setDesth+0x9e>
    g_model.mixData[i].destCh = dch;
   14ce0:	e8 01       	movw	r28, r16
   14ce2:	9f 2d       	mov	r25, r15
   14ce4:	9f 71       	andi	r25, 0x1F	; 31
   14ce6:	88 81       	ld	r24, Y
   14ce8:	80 7e       	andi	r24, 0xE0	; 224
   14cea:	89 2b       	or	r24, r25
   14cec:	88 83       	st	Y, r24
    return &g_model.mixData[i];
   14cee:	02 c0       	rjmp	.+4      	; 0x14cf4 <_Z7setDesth+0xb8>

MixData* setDest(uint8_t dch)
{
    uint8_t i = 0;
    while ((g_model.mixData[i].destCh<=dch) && (g_model.mixData[i].destCh) && (i<MAX_MIXERS)) i++;
    if(i==MAX_MIXERS) return &g_model.mixData[0];
   14cf0:	0f e9       	ldi	r16, 0x9F	; 159
   14cf2:	12 e1       	ldi	r17, 0x12	; 18
    memmove(&g_model.mixData[i+1],&g_model.mixData[i],
            (MAX_MIXERS-(i+1))*sizeof(MixData) );
    memset(&g_model.mixData[i],0,sizeof(MixData));
    g_model.mixData[i].destCh = dch;
    return &g_model.mixData[i];
}
   14cf4:	c8 01       	movw	r24, r16
   14cf6:	df 91       	pop	r29
   14cf8:	cf 91       	pop	r28
   14cfa:	1f 91       	pop	r17
   14cfc:	0f 91       	pop	r16
   14cfe:	ff 90       	pop	r15
   14d00:	08 95       	ret

00014d02 <_Z10clearMixesv>:

void clearMixes()
{
    memset(g_model.mixData,0,sizeof(g_model.mixData)); //clear all mixes
   14d02:	80 e2       	ldi	r24, 0x20	; 32
   14d04:	91 e0       	ldi	r25, 0x01	; 1
   14d06:	ef e9       	ldi	r30, 0x9F	; 159
   14d08:	f2 e1       	ldi	r31, 0x12	; 18
   14d0a:	df 01       	movw	r26, r30
   14d0c:	9c 01       	movw	r18, r24
   14d0e:	1d 92       	st	X+, r1
   14d10:	21 50       	subi	r18, 0x01	; 1
   14d12:	30 40       	sbci	r19, 0x00	; 0
   14d14:	e1 f7       	brne	.-8      	; 0x14d0e <_Z10clearMixesv+0xc>
    STORE_MODELVARS;
   14d16:	82 e0       	ldi	r24, 0x02	; 2
   14d18:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>
}
   14d1c:	08 95       	ret

00014d1e <_Z11clearCurvesv>:

void clearCurves()
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
   14d1e:	e7 e4       	ldi	r30, 0x47	; 71
   14d20:	f4 e1       	ldi	r31, 0x14	; 20
   14d22:	88 e2       	ldi	r24, 0x28	; 40
   14d24:	df 01       	movw	r26, r30
   14d26:	1d 92       	st	X+, r1
   14d28:	8a 95       	dec	r24
   14d2a:	e9 f7       	brne	.-6      	; 0x14d26 <_Z11clearCurvesv+0x8>
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
   14d2c:	b8 96       	adiw	r30, 0x28	; 40
   14d2e:	88 e4       	ldi	r24, 0x48	; 72
   14d30:	df 01       	movw	r26, r30
   14d32:	1d 92       	st	X+, r1
   14d34:	8a 95       	dec	r24
   14d36:	e9 f7       	brne	.-6      	; 0x14d32 <_Z11clearCurvesv+0x14>
}
   14d38:	08 95       	ret

00014d3a <_Z8setCurvehPKa>:

void setCurve(uint8_t c, const pm_int8_t ar[])
{
   14d3a:	28 2f       	mov	r18, r24
   14d3c:	30 e0       	ldi	r19, 0x00	; 0
    if(c<MAX_CURVE5) //5 pt curve
   14d3e:	88 30       	cpi	r24, 0x08	; 8
   14d40:	c0 f4       	brcc	.+48     	; 0x14d72 <_Z8setCurvehPKa+0x38>
   14d42:	e6 2f       	mov	r30, r22
   14d44:	f7 2f       	mov	r31, r23
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
   14d46:	d9 01       	movw	r26, r18
   14d48:	aa 0f       	add	r26, r26
   14d4a:	bb 1f       	adc	r27, r27
   14d4c:	aa 0f       	add	r26, r26
   14d4e:	bb 1f       	adc	r27, r27
   14d50:	a2 0f       	add	r26, r18
   14d52:	b3 1f       	adc	r27, r19
   14d54:	a9 5b       	subi	r26, 0xB9	; 185
   14d56:	bb 4e       	sbci	r27, 0xEB	; 235
   14d58:	95 e0       	ldi	r25, 0x05	; 5
   14d5a:	89 9f       	mul	r24, r25
   14d5c:	c0 01       	movw	r24, r0
   14d5e:	11 24       	eor	r1, r1
   14d60:	84 5b       	subi	r24, 0xB4	; 180
   14d62:	9b 4e       	sbci	r25, 0xEB	; 235
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
   14d64:	24 91       	lpm	r18, Z+
   14d66:	2d 93       	st	X+, r18
   14d68:	31 96       	adiw	r30, 0x01	; 1
   14d6a:	a8 17       	cp	r26, r24
   14d6c:	b9 07       	cpc	r27, r25
   14d6e:	d1 f7       	brne	.-12     	; 0x14d64 <_Z8setCurvehPKa+0x2a>
   14d70:	08 95       	ret
   14d72:	e6 2f       	mov	r30, r22
   14d74:	f7 2f       	mov	r31, r23
    else  //9 pt curve
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
   14d76:	28 50       	subi	r18, 0x08	; 8
   14d78:	30 40       	sbci	r19, 0x00	; 0
{
    memset(g_model.curves5,0,sizeof(g_model.curves5)); //clear all curves
    memset(g_model.curves9,0,sizeof(g_model.curves9)); //clear all curves
}

void setCurve(uint8_t c, const pm_int8_t ar[])
   14d7a:	d9 01       	movw	r26, r18
   14d7c:	93 e0       	ldi	r25, 0x03	; 3
   14d7e:	aa 0f       	add	r26, r26
   14d80:	bb 1f       	adc	r27, r27
   14d82:	9a 95       	dec	r25
   14d84:	e1 f7       	brne	.-8      	; 0x14d7e <_Z8setCurvehPKa+0x44>
   14d86:	a2 0f       	add	r26, r18
   14d88:	b3 1f       	adc	r27, r19
   14d8a:	a1 59       	subi	r26, 0x91	; 145
   14d8c:	bb 4e       	sbci	r27, 0xEB	; 235
   14d8e:	99 e0       	ldi	r25, 0x09	; 9
   14d90:	89 9f       	mul	r24, r25
   14d92:	c0 01       	movw	r24, r0
   14d94:	11 24       	eor	r1, r1
   14d96:	80 5d       	subi	r24, 0xD0	; 208
   14d98:	9b 4e       	sbci	r25, 0xEB	; 235
{
    if(c<MAX_CURVE5) //5 pt curve
        for(uint8_t i=0; i<5; i++) g_model.curves5[c][i] = pgm_read_byte(&ar[i]);
    else  //9 pt curve
        for(uint8_t i=0; i<9; i++) g_model.curves9[c-MAX_CURVE5][i] = pgm_read_byte(&ar[i]);
   14d9a:	24 91       	lpm	r18, Z+
   14d9c:	2d 93       	st	X+, r18
   14d9e:	31 96       	adiw	r30, 0x01	; 1
   14da0:	a8 17       	cp	r26, r24
   14da2:	b9 07       	cpc	r27, r25
   14da4:	d1 f7       	brne	.-12     	; 0x14d9a <_Z8setCurvehPKa+0x60>
   14da6:	08 95       	ret

00014da8 <_Z9setSwitchhhaa>:
}

void setSwitch(uint8_t idx, uint8_t func, int8_t v1, int8_t v2)
{
    g_model.customSw[idx-1].func = func;
   14da8:	90 e0       	ldi	r25, 0x00	; 0
   14daa:	01 97       	sbiw	r24, 0x01	; 1
   14dac:	fc 01       	movw	r30, r24
   14dae:	ee 0f       	add	r30, r30
   14db0:	ff 1f       	adc	r31, r31
   14db2:	e8 0f       	add	r30, r24
   14db4:	f9 1f       	adc	r31, r25
   14db6:	e5 57       	subi	r30, 0x75	; 117
   14db8:	fd 4e       	sbci	r31, 0xED	; 237
   14dba:	df 01       	movw	r26, r30
   14dbc:	a2 5d       	subi	r26, 0xD2	; 210
   14dbe:	bd 4f       	sbci	r27, 0xFD	; 253
   14dc0:	6c 93       	st	X, r22
    g_model.customSw[idx-1].v1   = v1;
   14dc2:	df 01       	movw	r26, r30
   14dc4:	a4 5d       	subi	r26, 0xD4	; 212
   14dc6:	bd 4f       	sbci	r27, 0xFD	; 253
   14dc8:	4c 93       	st	X, r20
    g_model.customSw[idx-1].v2   = v2;
   14dca:	e3 5d       	subi	r30, 0xD3	; 211
   14dcc:	fd 4f       	sbci	r31, 0xFD	; 253
   14dce:	20 83       	st	Z, r18
}
   14dd0:	08 95       	ret

00014dd2 <_Z13applyTemplateh>:
const pm_int8_t heli_ar2[] = {90, 70, 50, 70, 90};
const pm_int8_t heli_ar3[] = {-20, -20, 0, 60, 100};
const pm_int8_t heli_ar4[] = {-100, -60, 0, 60, 100};
const pm_int8_t heli_ar5[] = {-100, 0, 0, 0, 100};
void applyTemplate(uint8_t idx)
{
   14dd2:	6f 92       	push	r6
   14dd4:	7f 92       	push	r7
   14dd6:	8f 92       	push	r8
   14dd8:	9f 92       	push	r9
   14dda:	af 92       	push	r10
   14ddc:	bf 92       	push	r11
   14dde:	cf 92       	push	r12
   14de0:	df 92       	push	r13
   14de2:	ef 92       	push	r14
   14de4:	ff 92       	push	r15
   14de6:	0f 93       	push	r16
   14de8:	1f 93       	push	r17
   14dea:	df 93       	push	r29
   14dec:	cf 93       	push	r28
   14dee:	00 d0       	rcall	.+0      	; 0x14df0 <_Z13applyTemplateh+0x1e>
   14df0:	0f 92       	push	r0
   14df2:	cd b7       	in	r28, 0x3d	; 61
   14df4:	de b7       	in	r29, 0x3e	; 62
   14df6:	18 2f       	mov	r17, r24
    MixData *md = &g_model.mixData[0];

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
   14df8:	19 82       	std	Y+1, r1	; 0x01
   14dfa:	1a 82       	std	Y+2, r1	; 0x02
   14dfc:	1b 82       	std	Y+3, r1	; 0x03
   14dfe:	1c 82       	std	Y+4, r1	; 0x04
    for(uint8_t i=1; i<=4; i++) //generate inverse array
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
   14e00:	80 91 87 12 	lds	r24, 0x1287
   14e04:	90 e0       	ldi	r25, 0x00	; 0
   14e06:	88 0f       	add	r24, r24
   14e08:	99 1f       	adc	r25, r25
   14e0a:	88 0f       	add	r24, r24
   14e0c:	99 1f       	adc	r25, r25

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for(uint8_t i=1; i<=4; i++) //generate inverse array
   14e0e:	21 e0       	ldi	r18, 0x01	; 1
   14e10:	0d c0       	rjmp	.+26     	; 0x14e2c <_Z13applyTemplateh+0x5a>
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
   14e12:	e3 17       	cp	r30, r19
   14e14:	21 f4       	brne	.+8      	; 0x14e1e <_Z13applyTemplateh+0x4c>
   14e16:	de 01       	movw	r26, r28
   14e18:	ae 0f       	add	r26, r30
   14e1a:	b1 1d       	adc	r27, r1
   14e1c:	2c 93       	st	X, r18
   14e1e:	3f 5f       	subi	r19, 0xFF	; 255
   14e20:	35 30       	cpi	r19, 0x05	; 5
   14e22:	b9 f7       	brne	.-18     	; 0x14e12 <_Z13applyTemplateh+0x40>

    //CC(STK)   -> vSTK
    //ICC(vSTK) -> STK
#define ICC(x) icc[(x)-1]
    uint8_t icc[4] = {0};
    for(uint8_t i=1; i<=4; i++) //generate inverse array
   14e24:	2f 5f       	subi	r18, 0xFF	; 255
   14e26:	01 96       	adiw	r24, 0x01	; 1
   14e28:	25 30       	cpi	r18, 0x05	; 5
   14e2a:	31 f0       	breq	.+12     	; 0x14e38 <_Z13applyTemplateh+0x66>
        for(uint8_t j=1; j<=4; j++) if(CC(i)==j) icc[j-1]=i;
   14e2c:	fc 01       	movw	r30, r24
   14e2e:	ee 5f       	subi	r30, 0xFE	; 254
   14e30:	f9 4f       	sbci	r31, 0xF9	; 249
   14e32:	31 e0       	ldi	r19, 0x01	; 1
   14e34:	e4 91       	lpm	r30, Z+
   14e36:	ed cf       	rjmp	.-38     	; 0x14e12 <_Z13applyTemplateh+0x40>


    switch (idx){
   14e38:	13 30       	cpi	r17, 0x03	; 3
   14e3a:	09 f4       	brne	.+2      	; 0x14e3e <_Z13applyTemplateh+0x6c>
   14e3c:	bc c0       	rjmp	.+376    	; 0x14fb6 <_Z13applyTemplateh+0x1e4>
   14e3e:	14 30       	cpi	r17, 0x04	; 4
   14e40:	38 f4       	brcc	.+14     	; 0x14e50 <_Z13applyTemplateh+0x7e>
   14e42:	11 30       	cpi	r17, 0x01	; 1
   14e44:	09 f4       	brne	.+2      	; 0x14e48 <_Z13applyTemplateh+0x76>
   14e46:	57 c0       	rjmp	.+174    	; 0x14ef6 <_Z13applyTemplateh+0x124>
   14e48:	12 30       	cpi	r17, 0x02	; 2
   14e4a:	08 f0       	brcs	.+2      	; 0x14e4e <_Z13applyTemplateh+0x7c>
   14e4c:	62 c0       	rjmp	.+196    	; 0x14f12 <_Z13applyTemplateh+0x140>
   14e4e:	0a c0       	rjmp	.+20     	; 0x14e64 <_Z13applyTemplateh+0x92>
   14e50:	15 30       	cpi	r17, 0x05	; 5
   14e52:	09 f4       	brne	.+2      	; 0x14e56 <_Z13applyTemplateh+0x84>
   14e54:	9d c1       	rjmp	.+826    	; 0x15190 <_Z13applyTemplateh+0x3be>
   14e56:	15 30       	cpi	r17, 0x05	; 5
   14e58:	08 f4       	brcc	.+2      	; 0x14e5c <_Z13applyTemplateh+0x8a>
   14e5a:	ff c0       	rjmp	.+510    	; 0x1505a <_Z13applyTemplateh+0x288>
   14e5c:	16 30       	cpi	r17, 0x06	; 6
   14e5e:	09 f0       	breq	.+2      	; 0x14e62 <_Z13applyTemplateh+0x90>
   14e60:	95 c3       	rjmp	.+1834   	; 0x1558c <_Z13applyTemplateh+0x7ba>
   14e62:	54 c3       	rjmp	.+1704   	; 0x1550c <_Z13applyTemplateh+0x73a>
        //Simple 4-Ch
    case (0):
        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_RUD);  md->weight=100;
   14e64:	89 81       	ldd	r24, Y+1	; 0x01
   14e66:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14e6a:	dc 01       	movw	r26, r24
   14e6c:	e0 91 82 12 	lds	r30, 0x1282
   14e70:	f0 e0       	ldi	r31, 0x00	; 0
   14e72:	ee 0f       	add	r30, r30
   14e74:	ff 1f       	adc	r31, r31
   14e76:	ee 0f       	add	r30, r30
   14e78:	ff 1f       	adc	r31, r31
   14e7a:	ee 59       	subi	r30, 0x9E	; 158
   14e7c:	f9 4f       	sbci	r31, 0xF9	; 249
   14e7e:	e4 91       	lpm	r30, Z+
   14e80:	11 96       	adiw	r26, 0x01	; 1
   14e82:	ec 93       	st	X, r30
   14e84:	11 97       	sbiw	r26, 0x01	; 1
   14e86:	14 e6       	ldi	r17, 0x64	; 100
   14e88:	12 96       	adiw	r26, 0x02	; 2
   14e8a:	1c 93       	st	X, r17
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_ELE);  md->weight=100;
   14e8c:	8a 81       	ldd	r24, Y+2	; 0x02
   14e8e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14e92:	dc 01       	movw	r26, r24
   14e94:	e0 91 82 12 	lds	r30, 0x1282
   14e98:	f0 e0       	ldi	r31, 0x00	; 0
   14e9a:	ee 0f       	add	r30, r30
   14e9c:	ff 1f       	adc	r31, r31
   14e9e:	ee 0f       	add	r30, r30
   14ea0:	ff 1f       	adc	r31, r31
   14ea2:	ed 59       	subi	r30, 0x9D	; 157
   14ea4:	f9 4f       	sbci	r31, 0xF9	; 249
   14ea6:	e4 91       	lpm	r30, Z+
   14ea8:	11 96       	adiw	r26, 0x01	; 1
   14eaa:	ec 93       	st	X, r30
   14eac:	11 97       	sbiw	r26, 0x01	; 1
   14eae:	12 96       	adiw	r26, 0x02	; 2
   14eb0:	1c 93       	st	X, r17
        md=setDest(ICC(STK_THR));  md->srcRaw=CM(STK_THR);  md->weight=100;
   14eb2:	8b 81       	ldd	r24, Y+3	; 0x03
   14eb4:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14eb8:	dc 01       	movw	r26, r24
   14eba:	e0 91 82 12 	lds	r30, 0x1282
   14ebe:	f0 e0       	ldi	r31, 0x00	; 0
   14ec0:	ee 0f       	add	r30, r30
   14ec2:	ff 1f       	adc	r31, r31
   14ec4:	ee 0f       	add	r30, r30
   14ec6:	ff 1f       	adc	r31, r31
   14ec8:	ec 59       	subi	r30, 0x9C	; 156
   14eca:	f9 4f       	sbci	r31, 0xF9	; 249
   14ecc:	e4 91       	lpm	r30, Z+
   14ece:	11 96       	adiw	r26, 0x01	; 1
   14ed0:	ec 93       	st	X, r30
   14ed2:	11 97       	sbiw	r26, 0x01	; 1
   14ed4:	12 96       	adiw	r26, 0x02	; 2
   14ed6:	1c 93       	st	X, r17
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_AIL);  md->weight=100;
   14ed8:	8c 81       	ldd	r24, Y+4	; 0x04
   14eda:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14ede:	dc 01       	movw	r26, r24
   14ee0:	e0 91 82 12 	lds	r30, 0x1282
   14ee4:	f0 e0       	ldi	r31, 0x00	; 0
   14ee6:	ee 0f       	add	r30, r30
   14ee8:	ff 1f       	adc	r31, r31
   14eea:	ee 0f       	add	r30, r30
   14eec:	ff 1f       	adc	r31, r31
   14eee:	eb 59       	subi	r30, 0x9B	; 155
   14ef0:	f9 4f       	sbci	r31, 0xF9	; 249
   14ef2:	e4 91       	lpm	r30, Z+
   14ef4:	59 c0       	rjmp	.+178    	; 0x14fa8 <_Z13applyTemplateh+0x1d6>
        break;

        //T-Cut
    case (1):
        md=setDest(ICC(STK_THR));  md->srcRaw=MIX_MAX;  md->weight=-100;  md->swtch=DSW_THR;  md->mltpx=MLTPX_REP;
   14ef6:	8b 81       	ldd	r24, Y+3	; 0x03
   14ef8:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14efc:	fc 01       	movw	r30, r24
   14efe:	88 e0       	ldi	r24, 0x08	; 8
   14f00:	81 83       	std	Z+1, r24	; 0x01
   14f02:	8c e9       	ldi	r24, 0x9C	; 156
   14f04:	82 83       	std	Z+2, r24	; 0x02
   14f06:	13 83       	std	Z+3, r17	; 0x03
   14f08:	87 81       	ldd	r24, Z+7	; 0x07
   14f0a:	81 7f       	andi	r24, 0xF1	; 241
   14f0c:	84 60       	ori	r24, 0x04	; 4
   14f0e:	87 83       	std	Z+7, r24	; 0x07
        break;
   14f10:	3d c3       	rjmp	.+1658   	; 0x1558c <_Z13applyTemplateh+0x7ba>

        //V-Tail
    case (2):
        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_RUD);  md->weight= 100;
   14f12:	09 81       	ldd	r16, Y+1	; 0x01
   14f14:	80 2f       	mov	r24, r16
   14f16:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14f1a:	dc 01       	movw	r26, r24
   14f1c:	e0 91 82 12 	lds	r30, 0x1282
   14f20:	f0 e0       	ldi	r31, 0x00	; 0
   14f22:	ee 0f       	add	r30, r30
   14f24:	ff 1f       	adc	r31, r31
   14f26:	ee 0f       	add	r30, r30
   14f28:	ff 1f       	adc	r31, r31
   14f2a:	ee 59       	subi	r30, 0x9E	; 158
   14f2c:	f9 4f       	sbci	r31, 0xF9	; 249
   14f2e:	e4 91       	lpm	r30, Z+
   14f30:	11 96       	adiw	r26, 0x01	; 1
   14f32:	ec 93       	st	X, r30
   14f34:	11 97       	sbiw	r26, 0x01	; 1
   14f36:	14 e6       	ldi	r17, 0x64	; 100
   14f38:	12 96       	adiw	r26, 0x02	; 2
   14f3a:	1c 93       	st	X, r17
        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_ELE);  md->weight=-100;
   14f3c:	80 2f       	mov	r24, r16
   14f3e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14f42:	dc 01       	movw	r26, r24
   14f44:	e0 91 82 12 	lds	r30, 0x1282
   14f48:	f0 e0       	ldi	r31, 0x00	; 0
   14f4a:	ee 0f       	add	r30, r30
   14f4c:	ff 1f       	adc	r31, r31
   14f4e:	ee 0f       	add	r30, r30
   14f50:	ff 1f       	adc	r31, r31
   14f52:	ed 59       	subi	r30, 0x9D	; 157
   14f54:	f9 4f       	sbci	r31, 0xF9	; 249
   14f56:	e4 91       	lpm	r30, Z+
   14f58:	11 96       	adiw	r26, 0x01	; 1
   14f5a:	ec 93       	st	X, r30
   14f5c:	11 97       	sbiw	r26, 0x01	; 1
   14f5e:	8c e9       	ldi	r24, 0x9C	; 156
   14f60:	12 96       	adiw	r26, 0x02	; 2
   14f62:	8c 93       	st	X, r24
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_RUD);  md->weight= 100;
   14f64:	0a 81       	ldd	r16, Y+2	; 0x02
   14f66:	80 2f       	mov	r24, r16
   14f68:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14f6c:	dc 01       	movw	r26, r24
   14f6e:	e0 91 82 12 	lds	r30, 0x1282
   14f72:	f0 e0       	ldi	r31, 0x00	; 0
   14f74:	ee 0f       	add	r30, r30
   14f76:	ff 1f       	adc	r31, r31
   14f78:	ee 0f       	add	r30, r30
   14f7a:	ff 1f       	adc	r31, r31
   14f7c:	ee 59       	subi	r30, 0x9E	; 158
   14f7e:	f9 4f       	sbci	r31, 0xF9	; 249
   14f80:	e4 91       	lpm	r30, Z+
   14f82:	11 96       	adiw	r26, 0x01	; 1
   14f84:	ec 93       	st	X, r30
   14f86:	11 97       	sbiw	r26, 0x01	; 1
   14f88:	12 96       	adiw	r26, 0x02	; 2
   14f8a:	1c 93       	st	X, r17
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_ELE);  md->weight= 100;
   14f8c:	80 2f       	mov	r24, r16
   14f8e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14f92:	dc 01       	movw	r26, r24
   14f94:	e0 91 82 12 	lds	r30, 0x1282
   14f98:	f0 e0       	ldi	r31, 0x00	; 0
   14f9a:	ee 0f       	add	r30, r30
   14f9c:	ff 1f       	adc	r31, r31
   14f9e:	ee 0f       	add	r30, r30
   14fa0:	ff 1f       	adc	r31, r31
   14fa2:	ed 59       	subi	r30, 0x9D	; 157
   14fa4:	f9 4f       	sbci	r31, 0xF9	; 249
   14fa6:	e4 91       	lpm	r30, Z+
   14fa8:	11 96       	adiw	r26, 0x01	; 1
   14faa:	ec 93       	st	X, r30
   14fac:	11 97       	sbiw	r26, 0x01	; 1
   14fae:	12 96       	adiw	r26, 0x02	; 2
   14fb0:	1c 93       	st	X, r17
   14fb2:	12 97       	sbiw	r26, 0x02	; 2
        break;
   14fb4:	eb c2       	rjmp	.+1494   	; 0x1558c <_Z13applyTemplateh+0x7ba>

        //Elevon\\Delta
    case (3):
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_ELE);  md->weight= 100;
   14fb6:	0a 81       	ldd	r16, Y+2	; 0x02
   14fb8:	80 2f       	mov	r24, r16
   14fba:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14fbe:	dc 01       	movw	r26, r24
   14fc0:	e0 91 82 12 	lds	r30, 0x1282
   14fc4:	f0 e0       	ldi	r31, 0x00	; 0
   14fc6:	ee 0f       	add	r30, r30
   14fc8:	ff 1f       	adc	r31, r31
   14fca:	ee 0f       	add	r30, r30
   14fcc:	ff 1f       	adc	r31, r31
   14fce:	ed 59       	subi	r30, 0x9D	; 157
   14fd0:	f9 4f       	sbci	r31, 0xF9	; 249
   14fd2:	e4 91       	lpm	r30, Z+
   14fd4:	11 96       	adiw	r26, 0x01	; 1
   14fd6:	ec 93       	st	X, r30
   14fd8:	11 97       	sbiw	r26, 0x01	; 1
   14fda:	14 e6       	ldi	r17, 0x64	; 100
   14fdc:	12 96       	adiw	r26, 0x02	; 2
   14fde:	1c 93       	st	X, r17
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_AIL);  md->weight= 100;
   14fe0:	80 2f       	mov	r24, r16
   14fe2:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   14fe6:	dc 01       	movw	r26, r24
   14fe8:	e0 91 82 12 	lds	r30, 0x1282
   14fec:	f0 e0       	ldi	r31, 0x00	; 0
   14fee:	ee 0f       	add	r30, r30
   14ff0:	ff 1f       	adc	r31, r31
   14ff2:	ee 0f       	add	r30, r30
   14ff4:	ff 1f       	adc	r31, r31
   14ff6:	eb 59       	subi	r30, 0x9B	; 155
   14ff8:	f9 4f       	sbci	r31, 0xF9	; 249
   14ffa:	e4 91       	lpm	r30, Z+
   14ffc:	11 96       	adiw	r26, 0x01	; 1
   14ffe:	ec 93       	st	X, r30
   15000:	11 97       	sbiw	r26, 0x01	; 1
   15002:	12 96       	adiw	r26, 0x02	; 2
   15004:	1c 93       	st	X, r17
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_ELE);  md->weight= 100;
   15006:	0c 81       	ldd	r16, Y+4	; 0x04
   15008:	80 2f       	mov	r24, r16
   1500a:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1500e:	dc 01       	movw	r26, r24
   15010:	e0 91 82 12 	lds	r30, 0x1282
   15014:	f0 e0       	ldi	r31, 0x00	; 0
   15016:	ee 0f       	add	r30, r30
   15018:	ff 1f       	adc	r31, r31
   1501a:	ee 0f       	add	r30, r30
   1501c:	ff 1f       	adc	r31, r31
   1501e:	ed 59       	subi	r30, 0x9D	; 157
   15020:	f9 4f       	sbci	r31, 0xF9	; 249
   15022:	e4 91       	lpm	r30, Z+
   15024:	11 96       	adiw	r26, 0x01	; 1
   15026:	ec 93       	st	X, r30
   15028:	11 97       	sbiw	r26, 0x01	; 1
   1502a:	12 96       	adiw	r26, 0x02	; 2
   1502c:	1c 93       	st	X, r17
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_AIL);  md->weight=-100;
   1502e:	80 2f       	mov	r24, r16
   15030:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15034:	dc 01       	movw	r26, r24
   15036:	e0 91 82 12 	lds	r30, 0x1282
   1503a:	f0 e0       	ldi	r31, 0x00	; 0
   1503c:	ee 0f       	add	r30, r30
   1503e:	ff 1f       	adc	r31, r31
   15040:	ee 0f       	add	r30, r30
   15042:	ff 1f       	adc	r31, r31
   15044:	eb 59       	subi	r30, 0x9B	; 155
   15046:	f9 4f       	sbci	r31, 0xF9	; 249
   15048:	e4 91       	lpm	r30, Z+
   1504a:	11 96       	adiw	r26, 0x01	; 1
   1504c:	ec 93       	st	X, r30
   1504e:	11 97       	sbiw	r26, 0x01	; 1
   15050:	8c e9       	ldi	r24, 0x9C	; 156
   15052:	12 96       	adiw	r26, 0x02	; 2
   15054:	8c 93       	st	X, r24
   15056:	12 97       	sbiw	r26, 0x02	; 2
        break;
   15058:	99 c2       	rjmp	.+1330   	; 0x1558c <_Z13applyTemplateh+0x7ba>

        //eCCPM
    case (4):
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_ELE);  md->weight= 72;
   1505a:	1a 81       	ldd	r17, Y+2	; 0x02
   1505c:	81 2f       	mov	r24, r17
   1505e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15062:	dc 01       	movw	r26, r24
   15064:	e0 91 82 12 	lds	r30, 0x1282
   15068:	f0 e0       	ldi	r31, 0x00	; 0
   1506a:	ee 0f       	add	r30, r30
   1506c:	ff 1f       	adc	r31, r31
   1506e:	ee 0f       	add	r30, r30
   15070:	ff 1f       	adc	r31, r31
   15072:	ed 59       	subi	r30, 0x9D	; 157
   15074:	f9 4f       	sbci	r31, 0xF9	; 249
   15076:	e4 91       	lpm	r30, Z+
   15078:	11 96       	adiw	r26, 0x01	; 1
   1507a:	ec 93       	st	X, r30
   1507c:	11 97       	sbiw	r26, 0x01	; 1
   1507e:	88 e4       	ldi	r24, 0x48	; 72
   15080:	12 96       	adiw	r26, 0x02	; 2
   15082:	8c 93       	st	X, r24
        md=setDest(ICC(STK_ELE));  md->srcRaw=CM(STK_THR);  md->weight= 55;
   15084:	81 2f       	mov	r24, r17
   15086:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1508a:	dc 01       	movw	r26, r24
   1508c:	e0 91 82 12 	lds	r30, 0x1282
   15090:	f0 e0       	ldi	r31, 0x00	; 0
   15092:	ee 0f       	add	r30, r30
   15094:	ff 1f       	adc	r31, r31
   15096:	ee 0f       	add	r30, r30
   15098:	ff 1f       	adc	r31, r31
   1509a:	ec 59       	subi	r30, 0x9C	; 156
   1509c:	f9 4f       	sbci	r31, 0xF9	; 249
   1509e:	e4 91       	lpm	r30, Z+
   150a0:	11 96       	adiw	r26, 0x01	; 1
   150a2:	ec 93       	st	X, r30
   150a4:	11 97       	sbiw	r26, 0x01	; 1
   150a6:	17 e3       	ldi	r17, 0x37	; 55
   150a8:	12 96       	adiw	r26, 0x02	; 2
   150aa:	1c 93       	st	X, r17
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_ELE);  md->weight=-36;
   150ac:	fc 80       	ldd	r15, Y+4	; 0x04
   150ae:	8f 2d       	mov	r24, r15
   150b0:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   150b4:	dc 01       	movw	r26, r24
   150b6:	e0 91 82 12 	lds	r30, 0x1282
   150ba:	f0 e0       	ldi	r31, 0x00	; 0
   150bc:	ee 0f       	add	r30, r30
   150be:	ff 1f       	adc	r31, r31
   150c0:	ee 0f       	add	r30, r30
   150c2:	ff 1f       	adc	r31, r31
   150c4:	ed 59       	subi	r30, 0x9D	; 157
   150c6:	f9 4f       	sbci	r31, 0xF9	; 249
   150c8:	e4 91       	lpm	r30, Z+
   150ca:	11 96       	adiw	r26, 0x01	; 1
   150cc:	ec 93       	st	X, r30
   150ce:	11 97       	sbiw	r26, 0x01	; 1
   150d0:	0c ed       	ldi	r16, 0xDC	; 220
   150d2:	12 96       	adiw	r26, 0x02	; 2
   150d4:	0c 93       	st	X, r16
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_AIL);  md->weight= 62;
   150d6:	8f 2d       	mov	r24, r15
   150d8:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   150dc:	dc 01       	movw	r26, r24
   150de:	e0 91 82 12 	lds	r30, 0x1282
   150e2:	f0 e0       	ldi	r31, 0x00	; 0
   150e4:	ee 0f       	add	r30, r30
   150e6:	ff 1f       	adc	r31, r31
   150e8:	ee 0f       	add	r30, r30
   150ea:	ff 1f       	adc	r31, r31
   150ec:	eb 59       	subi	r30, 0x9B	; 155
   150ee:	f9 4f       	sbci	r31, 0xF9	; 249
   150f0:	e4 91       	lpm	r30, Z+
   150f2:	11 96       	adiw	r26, 0x01	; 1
   150f4:	ec 93       	st	X, r30
   150f6:	11 97       	sbiw	r26, 0x01	; 1
   150f8:	8e e3       	ldi	r24, 0x3E	; 62
   150fa:	12 96       	adiw	r26, 0x02	; 2
   150fc:	8c 93       	st	X, r24
        md=setDest(ICC(STK_AIL));  md->srcRaw=CM(STK_THR);  md->weight= 55;
   150fe:	8f 2d       	mov	r24, r15
   15100:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15104:	dc 01       	movw	r26, r24
   15106:	e0 91 82 12 	lds	r30, 0x1282
   1510a:	f0 e0       	ldi	r31, 0x00	; 0
   1510c:	ee 0f       	add	r30, r30
   1510e:	ff 1f       	adc	r31, r31
   15110:	ee 0f       	add	r30, r30
   15112:	ff 1f       	adc	r31, r31
   15114:	ec 59       	subi	r30, 0x9C	; 156
   15116:	f9 4f       	sbci	r31, 0xF9	; 249
   15118:	e4 91       	lpm	r30, Z+
   1511a:	11 96       	adiw	r26, 0x01	; 1
   1511c:	ec 93       	st	X, r30
   1511e:	11 97       	sbiw	r26, 0x01	; 1
   15120:	12 96       	adiw	r26, 0x02	; 2
   15122:	1c 93       	st	X, r17
        md=setDest(6);             md->srcRaw=CM(STK_ELE);  md->weight=-36;
   15124:	86 e0       	ldi	r24, 0x06	; 6
   15126:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1512a:	dc 01       	movw	r26, r24
   1512c:	e0 91 82 12 	lds	r30, 0x1282
   15130:	f0 e0       	ldi	r31, 0x00	; 0
   15132:	ee 0f       	add	r30, r30
   15134:	ff 1f       	adc	r31, r31
   15136:	ee 0f       	add	r30, r30
   15138:	ff 1f       	adc	r31, r31
   1513a:	ed 59       	subi	r30, 0x9D	; 157
   1513c:	f9 4f       	sbci	r31, 0xF9	; 249
   1513e:	e4 91       	lpm	r30, Z+
   15140:	11 96       	adiw	r26, 0x01	; 1
   15142:	ec 93       	st	X, r30
   15144:	11 97       	sbiw	r26, 0x01	; 1
   15146:	12 96       	adiw	r26, 0x02	; 2
   15148:	0c 93       	st	X, r16
        md=setDest(6);             md->srcRaw=CM(STK_AIL);  md->weight=-62;
   1514a:	86 e0       	ldi	r24, 0x06	; 6
   1514c:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15150:	dc 01       	movw	r26, r24
   15152:	e0 91 82 12 	lds	r30, 0x1282
   15156:	f0 e0       	ldi	r31, 0x00	; 0
   15158:	ee 0f       	add	r30, r30
   1515a:	ff 1f       	adc	r31, r31
   1515c:	ee 0f       	add	r30, r30
   1515e:	ff 1f       	adc	r31, r31
   15160:	eb 59       	subi	r30, 0x9B	; 155
   15162:	f9 4f       	sbci	r31, 0xF9	; 249
   15164:	e4 91       	lpm	r30, Z+
   15166:	11 96       	adiw	r26, 0x01	; 1
   15168:	ec 93       	st	X, r30
   1516a:	11 97       	sbiw	r26, 0x01	; 1
   1516c:	82 ec       	ldi	r24, 0xC2	; 194
   1516e:	12 96       	adiw	r26, 0x02	; 2
   15170:	8c 93       	st	X, r24
        md=setDest(6);             md->srcRaw=CM(STK_THR);  md->weight= 55;
   15172:	86 e0       	ldi	r24, 0x06	; 6
   15174:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15178:	dc 01       	movw	r26, r24
   1517a:	e0 91 82 12 	lds	r30, 0x1282
   1517e:	f0 e0       	ldi	r31, 0x00	; 0
   15180:	ee 0f       	add	r30, r30
   15182:	ff 1f       	adc	r31, r31
   15184:	ee 0f       	add	r30, r30
   15186:	ff 1f       	adc	r31, r31
   15188:	ec 59       	subi	r30, 0x9C	; 156
   1518a:	f9 4f       	sbci	r31, 0xF9	; 249
   1518c:	e4 91       	lpm	r30, Z+
   1518e:	0c cf       	rjmp	.-488    	; 0x14fa8 <_Z13applyTemplateh+0x1d6>
        break;

        //Heli Setup
    case (5):
        clearMixes();  //This time we want a clean slate
   15190:	0e 94 81 a6 	call	0x14d02	; 0x14d02 <_Z10clearMixesv>
        clearCurves();
   15194:	0e 94 8f a6 	call	0x14d1e	; 0x14d1e <_Z11clearCurvesv>

        //Set up Mixes
        md=setDest(ICC(STK_AIL));  md->srcRaw=CH(9);   md->weight=  50;
   15198:	0c 81       	ldd	r16, Y+4	; 0x04
   1519a:	80 2f       	mov	r24, r16
   1519c:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   151a0:	fc 01       	movw	r30, r24
   151a2:	8d e1       	ldi	r24, 0x1D	; 29
   151a4:	d8 2e       	mov	r13, r24
   151a6:	d1 82       	std	Z+1, r13	; 0x01
   151a8:	b2 e3       	ldi	r27, 0x32	; 50
   151aa:	ab 2e       	mov	r10, r27
   151ac:	a2 82       	std	Z+2, r10	; 0x02
        md=setDest(ICC(STK_AIL));  md->srcRaw=CH(10);  md->weight=-100;
   151ae:	80 2f       	mov	r24, r16
   151b0:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   151b4:	fc 01       	movw	r30, r24
   151b6:	ae e1       	ldi	r26, 0x1E	; 30
   151b8:	ca 2e       	mov	r12, r26
   151ba:	c1 82       	std	Z+1, r12	; 0x01
   151bc:	7c e9       	ldi	r23, 0x9C	; 156
   151be:	f7 2e       	mov	r15, r23
   151c0:	f2 82       	std	Z+2, r15	; 0x02
        md=setDest(ICC(STK_AIL));  md->srcRaw=CH(11);  md->weight= 100; md->carryTrim=TRIM_OFF;
   151c2:	80 2f       	mov	r24, r16
   151c4:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   151c8:	fc 01       	movw	r30, r24
   151ca:	6f e1       	ldi	r22, 0x1F	; 31
   151cc:	e6 2e       	mov	r14, r22
   151ce:	e1 82       	std	Z+1, r14	; 0x01
   151d0:	04 e6       	ldi	r16, 0x64	; 100
   151d2:	02 83       	std	Z+2, r16	; 0x02
   151d4:	87 81       	ldd	r24, Z+7	; 0x07
   151d6:	81 60       	ori	r24, 0x01	; 1
   151d8:	87 83       	std	Z+7, r24	; 0x07

        md=setDest(ICC(STK_ELE));  md->srcRaw=CH(9);   md->weight=-100;
   151da:	ba 80       	ldd	r11, Y+2	; 0x02
   151dc:	8b 2d       	mov	r24, r11
   151de:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   151e2:	fc 01       	movw	r30, r24
   151e4:	d1 82       	std	Z+1, r13	; 0x01
   151e6:	f2 82       	std	Z+2, r15	; 0x02
        md=setDest(ICC(STK_ELE));  md->srcRaw=CH(11);  md->weight= 100; md->carryTrim=TRIM_OFF;
   151e8:	8b 2d       	mov	r24, r11
   151ea:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   151ee:	fc 01       	movw	r30, r24
   151f0:	e1 82       	std	Z+1, r14	; 0x01
   151f2:	02 83       	std	Z+2, r16	; 0x02
   151f4:	87 81       	ldd	r24, Z+7	; 0x07
   151f6:	81 60       	ori	r24, 0x01	; 1
   151f8:	87 83       	std	Z+7, r24	; 0x07

        md=setDest(ICC(STK_THR));  md->srcRaw=CM(STK_THR);  md->weight= 100; md->swtch=DSW_ID0; md->curve=CV(1); md->carryTrim=TRIM_OFF;
   151fa:	8b 80       	ldd	r8, Y+3	; 0x03
   151fc:	88 2d       	mov	r24, r8
   151fe:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15202:	dc 01       	movw	r26, r24
   15204:	e0 91 82 12 	lds	r30, 0x1282
   15208:	f0 e0       	ldi	r31, 0x00	; 0
   1520a:	ee 0f       	add	r30, r30
   1520c:	ff 1f       	adc	r31, r31
   1520e:	ee 0f       	add	r30, r30
   15210:	ff 1f       	adc	r31, r31
   15212:	ec 59       	subi	r30, 0x9C	; 156
   15214:	f9 4f       	sbci	r31, 0xF9	; 249
   15216:	e4 91       	lpm	r30, Z+
   15218:	11 96       	adiw	r26, 0x01	; 1
   1521a:	ec 93       	st	X, r30
   1521c:	11 97       	sbiw	r26, 0x01	; 1
   1521e:	12 96       	adiw	r26, 0x02	; 2
   15220:	0c 93       	st	X, r16
   15222:	12 97       	sbiw	r26, 0x02	; 2
   15224:	44 e0       	ldi	r20, 0x04	; 4
   15226:	64 2e       	mov	r6, r20
   15228:	13 96       	adiw	r26, 0x03	; 3
   1522a:	6c 92       	st	X, r6
   1522c:	13 97       	sbiw	r26, 0x03	; 3
   1522e:	37 e0       	ldi	r19, 0x07	; 7
   15230:	b3 2e       	mov	r11, r19
   15232:	14 96       	adiw	r26, 0x04	; 4
   15234:	bc 92       	st	X, r11
   15236:	14 97       	sbiw	r26, 0x04	; 4
   15238:	17 96       	adiw	r26, 0x07	; 7
   1523a:	8c 91       	ld	r24, X
   1523c:	17 97       	sbiw	r26, 0x07	; 7
   1523e:	81 60       	ori	r24, 0x01	; 1
   15240:	17 96       	adiw	r26, 0x07	; 7
   15242:	8c 93       	st	X, r24
        md=setDest(ICC(STK_THR));  md->srcRaw=CM(STK_THR);  md->weight= 100; md->swtch=DSW_ID1; md->curve=CV(2); md->carryTrim=TRIM_OFF;
   15244:	88 2d       	mov	r24, r8
   15246:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1524a:	dc 01       	movw	r26, r24
   1524c:	e0 91 82 12 	lds	r30, 0x1282
   15250:	f0 e0       	ldi	r31, 0x00	; 0
   15252:	ee 0f       	add	r30, r30
   15254:	ff 1f       	adc	r31, r31
   15256:	ee 0f       	add	r30, r30
   15258:	ff 1f       	adc	r31, r31
   1525a:	ec 59       	subi	r30, 0x9C	; 156
   1525c:	f9 4f       	sbci	r31, 0xF9	; 249
   1525e:	e4 91       	lpm	r30, Z+
   15260:	11 96       	adiw	r26, 0x01	; 1
   15262:	ec 93       	st	X, r30
   15264:	11 97       	sbiw	r26, 0x01	; 1
   15266:	12 96       	adiw	r26, 0x02	; 2
   15268:	0c 93       	st	X, r16
   1526a:	12 97       	sbiw	r26, 0x02	; 2
   1526c:	13 96       	adiw	r26, 0x03	; 3
   1526e:	1c 93       	st	X, r17
   15270:	13 97       	sbiw	r26, 0x03	; 3
   15272:	98 e0       	ldi	r25, 0x08	; 8
   15274:	99 2e       	mov	r9, r25
   15276:	14 96       	adiw	r26, 0x04	; 4
   15278:	9c 92       	st	X, r9
   1527a:	14 97       	sbiw	r26, 0x04	; 4
   1527c:	17 96       	adiw	r26, 0x07	; 7
   1527e:	8c 91       	ld	r24, X
   15280:	17 97       	sbiw	r26, 0x07	; 7
   15282:	81 60       	ori	r24, 0x01	; 1
   15284:	17 96       	adiw	r26, 0x07	; 7
   15286:	8c 93       	st	X, r24
        md=setDest(ICC(STK_THR));  md->srcRaw=CM(STK_THR);  md->weight= 110; md->swtch=DSW_ID2; md->curve=CV(2); md->carryTrim=TRIM_OFF;
   15288:	88 2d       	mov	r24, r8
   1528a:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1528e:	dc 01       	movw	r26, r24
   15290:	e0 91 82 12 	lds	r30, 0x1282
   15294:	f0 e0       	ldi	r31, 0x00	; 0
   15296:	ee 0f       	add	r30, r30
   15298:	ff 1f       	adc	r31, r31
   1529a:	ee 0f       	add	r30, r30
   1529c:	ff 1f       	adc	r31, r31
   1529e:	ec 59       	subi	r30, 0x9C	; 156
   152a0:	f9 4f       	sbci	r31, 0xF9	; 249
   152a2:	e4 91       	lpm	r30, Z+
   152a4:	11 96       	adiw	r26, 0x01	; 1
   152a6:	ec 93       	st	X, r30
   152a8:	11 97       	sbiw	r26, 0x01	; 1
   152aa:	8e e6       	ldi	r24, 0x6E	; 110
   152ac:	12 96       	adiw	r26, 0x02	; 2
   152ae:	8c 93       	st	X, r24
   152b0:	12 97       	sbiw	r26, 0x02	; 2
   152b2:	76 e0       	ldi	r23, 0x06	; 6
   152b4:	77 2e       	mov	r7, r23
   152b6:	13 96       	adiw	r26, 0x03	; 3
   152b8:	7c 92       	st	X, r7
   152ba:	13 97       	sbiw	r26, 0x03	; 3
   152bc:	14 96       	adiw	r26, 0x04	; 4
   152be:	9c 92       	st	X, r9
   152c0:	14 97       	sbiw	r26, 0x04	; 4
   152c2:	17 96       	adiw	r26, 0x07	; 7
   152c4:	8c 91       	ld	r24, X
   152c6:	17 97       	sbiw	r26, 0x07	; 7
   152c8:	81 60       	ori	r24, 0x01	; 1
   152ca:	17 96       	adiw	r26, 0x07	; 7
   152cc:	8c 93       	st	X, r24
        md=setDest(ICC(STK_THR));  md->srcRaw=MIX_MAX;      md->weight=-125; md->swtch=DSW_THR;  md->mltpx=MLTPX_REP; md->carryTrim=TRIM_OFF;
   152ce:	88 2d       	mov	r24, r8
   152d0:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   152d4:	fc 01       	movw	r30, r24
   152d6:	91 82       	std	Z+1, r9	; 0x01
   152d8:	83 e8       	ldi	r24, 0x83	; 131
   152da:	82 83       	std	Z+2, r24	; 0x02
   152dc:	88 24       	eor	r8, r8
   152de:	83 94       	inc	r8
   152e0:	83 82       	std	Z+3, r8	; 0x03
   152e2:	87 81       	ldd	r24, Z+7	; 0x07
   152e4:	81 7f       	andi	r24, 0xF1	; 241
   152e6:	85 60       	ori	r24, 0x05	; 5
   152e8:	87 83       	std	Z+7, r24	; 0x07

        md=setDest(ICC(STK_RUD));  md->srcRaw=CM(STK_RUD); md->weight=100;
   152ea:	89 81       	ldd	r24, Y+1	; 0x01
   152ec:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   152f0:	dc 01       	movw	r26, r24
   152f2:	e0 91 82 12 	lds	r30, 0x1282
   152f6:	f0 e0       	ldi	r31, 0x00	; 0
   152f8:	ee 0f       	add	r30, r30
   152fa:	ff 1f       	adc	r31, r31
   152fc:	ee 0f       	add	r30, r30
   152fe:	ff 1f       	adc	r31, r31
   15300:	ee 59       	subi	r30, 0x9E	; 158
   15302:	f9 4f       	sbci	r31, 0xF9	; 249
   15304:	e4 91       	lpm	r30, Z+
   15306:	11 96       	adiw	r26, 0x01	; 1
   15308:	ec 93       	st	X, r30
   1530a:	11 97       	sbiw	r26, 0x01	; 1
   1530c:	12 96       	adiw	r26, 0x02	; 2
   1530e:	0c 93       	st	X, r16

        md=setDest(5);  md->srcRaw=MIX_MAX; md->weight= 50; md->swtch=-DSW_GEA; md->carryTrim=TRIM_OFF;
   15310:	85 e0       	ldi	r24, 0x05	; 5
   15312:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15316:	fc 01       	movw	r30, r24
   15318:	91 82       	std	Z+1, r9	; 0x01
   1531a:	a2 82       	std	Z+2, r10	; 0x02
   1531c:	88 ef       	ldi	r24, 0xF8	; 248
   1531e:	83 83       	std	Z+3, r24	; 0x03
   15320:	87 81       	ldd	r24, Z+7	; 0x07
   15322:	81 60       	ori	r24, 0x01	; 1
   15324:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=MIX_MAX; md->weight=-50; md->swtch= DSW_GEA; md->carryTrim=TRIM_OFF;
   15326:	85 e0       	ldi	r24, 0x05	; 5
   15328:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1532c:	fc 01       	movw	r30, r24
   1532e:	91 82       	std	Z+1, r9	; 0x01
   15330:	5e ec       	ldi	r21, 0xCE	; 206
   15332:	a5 2e       	mov	r10, r21
   15334:	a2 82       	std	Z+2, r10	; 0x02
   15336:	93 82       	std	Z+3, r9	; 0x03
   15338:	87 81       	ldd	r24, Z+7	; 0x07
   1533a:	81 60       	ori	r24, 0x01	; 1
   1533c:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(5);  md->srcRaw=STK_P3;  md->weight= 40; md->carryTrim=TRIM_OFF;
   1533e:	85 e0       	ldi	r24, 0x05	; 5
   15340:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15344:	fc 01       	movw	r30, r24
   15346:	b1 82       	std	Z+1, r11	; 0x01
   15348:	88 e2       	ldi	r24, 0x28	; 40
   1534a:	82 83       	std	Z+2, r24	; 0x02
   1534c:	87 81       	ldd	r24, Z+7	; 0x07
   1534e:	81 60       	ori	r24, 0x01	; 1
   15350:	87 83       	std	Z+7, r24	; 0x07

        md=setDest(6);  md->srcRaw=CH(9);   md->weight= -50;
   15352:	86 e0       	ldi	r24, 0x06	; 6
   15354:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15358:	fc 01       	movw	r30, r24
   1535a:	d1 82       	std	Z+1, r13	; 0x01
   1535c:	a2 82       	std	Z+2, r10	; 0x02
        md=setDest(6);  md->srcRaw=CH(10);  md->weight=-100;
   1535e:	86 e0       	ldi	r24, 0x06	; 6
   15360:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15364:	fc 01       	movw	r30, r24
   15366:	c1 82       	std	Z+1, r12	; 0x01
   15368:	f2 82       	std	Z+2, r15	; 0x02
        md=setDest(6);  md->srcRaw=CH(11);  md->weight=-100; md->carryTrim=TRIM_OFF;
   1536a:	86 e0       	ldi	r24, 0x06	; 6
   1536c:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15370:	fc 01       	movw	r30, r24
   15372:	e1 82       	std	Z+1, r14	; 0x01
   15374:	f2 82       	std	Z+2, r15	; 0x02
   15376:	87 81       	ldd	r24, Z+7	; 0x07
   15378:	81 60       	ori	r24, 0x01	; 1
   1537a:	87 83       	std	Z+7, r24	; 0x07

        md=setDest(9);  md->srcRaw=CM(STK_ELE);  md->weight= 60;
   1537c:	89 e0       	ldi	r24, 0x09	; 9
   1537e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15382:	dc 01       	movw	r26, r24
   15384:	e0 91 82 12 	lds	r30, 0x1282
   15388:	f0 e0       	ldi	r31, 0x00	; 0
   1538a:	ee 0f       	add	r30, r30
   1538c:	ff 1f       	adc	r31, r31
   1538e:	ee 0f       	add	r30, r30
   15390:	ff 1f       	adc	r31, r31
   15392:	ed 59       	subi	r30, 0x9D	; 157
   15394:	f9 4f       	sbci	r31, 0xF9	; 249
   15396:	e4 91       	lpm	r30, Z+
   15398:	11 96       	adiw	r26, 0x01	; 1
   1539a:	ec 93       	st	X, r30
   1539c:	11 97       	sbiw	r26, 0x01	; 1
   1539e:	8c e3       	ldi	r24, 0x3C	; 60
   153a0:	12 96       	adiw	r26, 0x02	; 2
   153a2:	8c 93       	st	X, r24
        md=setDest(10); md->srcRaw=CM(STK_AIL);  md->weight=-52;
   153a4:	8a e0       	ldi	r24, 0x0A	; 10
   153a6:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   153aa:	dc 01       	movw	r26, r24
   153ac:	e0 91 82 12 	lds	r30, 0x1282
   153b0:	f0 e0       	ldi	r31, 0x00	; 0
   153b2:	ee 0f       	add	r30, r30
   153b4:	ff 1f       	adc	r31, r31
   153b6:	ee 0f       	add	r30, r30
   153b8:	ff 1f       	adc	r31, r31
   153ba:	eb 59       	subi	r30, 0x9B	; 155
   153bc:	f9 4f       	sbci	r31, 0xF9	; 249
   153be:	e4 91       	lpm	r30, Z+
   153c0:	11 96       	adiw	r26, 0x01	; 1
   153c2:	ec 93       	st	X, r30
   153c4:	11 97       	sbiw	r26, 0x01	; 1
   153c6:	8c ec       	ldi	r24, 0xCC	; 204
   153c8:	12 96       	adiw	r26, 0x02	; 2
   153ca:	8c 93       	st	X, r24
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight= 70; md->swtch=DSW_ID0; md->curve=CV(3); md->carryTrim=TRIM_OFF;
   153cc:	8b e0       	ldi	r24, 0x0B	; 11
   153ce:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   153d2:	dc 01       	movw	r26, r24
   153d4:	e0 91 82 12 	lds	r30, 0x1282
   153d8:	f0 e0       	ldi	r31, 0x00	; 0
   153da:	ee 0f       	add	r30, r30
   153dc:	ff 1f       	adc	r31, r31
   153de:	ee 0f       	add	r30, r30
   153e0:	ff 1f       	adc	r31, r31
   153e2:	ec 59       	subi	r30, 0x9C	; 156
   153e4:	f9 4f       	sbci	r31, 0xF9	; 249
   153e6:	e4 91       	lpm	r30, Z+
   153e8:	11 96       	adiw	r26, 0x01	; 1
   153ea:	ec 93       	st	X, r30
   153ec:	11 97       	sbiw	r26, 0x01	; 1
   153ee:	96 e4       	ldi	r25, 0x46	; 70
   153f0:	f9 2e       	mov	r15, r25
   153f2:	12 96       	adiw	r26, 0x02	; 2
   153f4:	fc 92       	st	X, r15
   153f6:	12 97       	sbiw	r26, 0x02	; 2
   153f8:	13 96       	adiw	r26, 0x03	; 3
   153fa:	6c 92       	st	X, r6
   153fc:	13 97       	sbiw	r26, 0x03	; 3
   153fe:	89 e0       	ldi	r24, 0x09	; 9
   15400:	14 96       	adiw	r26, 0x04	; 4
   15402:	8c 93       	st	X, r24
   15404:	14 97       	sbiw	r26, 0x04	; 4
   15406:	17 96       	adiw	r26, 0x07	; 7
   15408:	8c 91       	ld	r24, X
   1540a:	17 97       	sbiw	r26, 0x07	; 7
   1540c:	81 60       	ori	r24, 0x01	; 1
   1540e:	17 96       	adiw	r26, 0x07	; 7
   15410:	8c 93       	st	X, r24
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight= 70; md->swtch=DSW_ID1; md->curve=CV(4); md->carryTrim=TRIM_OFF;
   15412:	8b e0       	ldi	r24, 0x0B	; 11
   15414:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15418:	dc 01       	movw	r26, r24
   1541a:	e0 91 82 12 	lds	r30, 0x1282
   1541e:	f0 e0       	ldi	r31, 0x00	; 0
   15420:	ee 0f       	add	r30, r30
   15422:	ff 1f       	adc	r31, r31
   15424:	ee 0f       	add	r30, r30
   15426:	ff 1f       	adc	r31, r31
   15428:	ec 59       	subi	r30, 0x9C	; 156
   1542a:	f9 4f       	sbci	r31, 0xF9	; 249
   1542c:	e4 91       	lpm	r30, Z+
   1542e:	11 96       	adiw	r26, 0x01	; 1
   15430:	ec 93       	st	X, r30
   15432:	11 97       	sbiw	r26, 0x01	; 1
   15434:	12 96       	adiw	r26, 0x02	; 2
   15436:	fc 92       	st	X, r15
   15438:	12 97       	sbiw	r26, 0x02	; 2
   1543a:	13 96       	adiw	r26, 0x03	; 3
   1543c:	1c 93       	st	X, r17
   1543e:	13 97       	sbiw	r26, 0x03	; 3
   15440:	1a e0       	ldi	r17, 0x0A	; 10
   15442:	14 96       	adiw	r26, 0x04	; 4
   15444:	1c 93       	st	X, r17
   15446:	14 97       	sbiw	r26, 0x04	; 4
   15448:	17 96       	adiw	r26, 0x07	; 7
   1544a:	8c 91       	ld	r24, X
   1544c:	17 97       	sbiw	r26, 0x07	; 7
   1544e:	81 60       	ori	r24, 0x01	; 1
   15450:	17 96       	adiw	r26, 0x07	; 7
   15452:	8c 93       	st	X, r24
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight= 70; md->swtch=DSW_ID2; md->curve=CV(4); md->carryTrim=TRIM_OFF;
   15454:	8b e0       	ldi	r24, 0x0B	; 11
   15456:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1545a:	dc 01       	movw	r26, r24
   1545c:	e0 91 82 12 	lds	r30, 0x1282
   15460:	f0 e0       	ldi	r31, 0x00	; 0
   15462:	ee 0f       	add	r30, r30
   15464:	ff 1f       	adc	r31, r31
   15466:	ee 0f       	add	r30, r30
   15468:	ff 1f       	adc	r31, r31
   1546a:	ec 59       	subi	r30, 0x9C	; 156
   1546c:	f9 4f       	sbci	r31, 0xF9	; 249
   1546e:	e4 91       	lpm	r30, Z+
   15470:	11 96       	adiw	r26, 0x01	; 1
   15472:	ec 93       	st	X, r30
   15474:	11 97       	sbiw	r26, 0x01	; 1
   15476:	12 96       	adiw	r26, 0x02	; 2
   15478:	fc 92       	st	X, r15
   1547a:	12 97       	sbiw	r26, 0x02	; 2
   1547c:	13 96       	adiw	r26, 0x03	; 3
   1547e:	7c 92       	st	X, r7
   15480:	13 97       	sbiw	r26, 0x03	; 3
   15482:	14 96       	adiw	r26, 0x04	; 4
   15484:	1c 93       	st	X, r17
   15486:	14 97       	sbiw	r26, 0x04	; 4
   15488:	17 96       	adiw	r26, 0x07	; 7
   1548a:	8c 91       	ld	r24, X
   1548c:	17 97       	sbiw	r26, 0x07	; 7
   1548e:	81 60       	ori	r24, 0x01	; 1
   15490:	17 96       	adiw	r26, 0x07	; 7
   15492:	8c 93       	st	X, r24
        md=setDest(11); md->srcRaw=CM(STK_THR);  md->weight=100; md->swtch=DSW_THR; md->curve=CV(5); md->carryTrim=TRIM_OFF;  md->mltpx=MLTPX_REP;
   15494:	8b e0       	ldi	r24, 0x0B	; 11
   15496:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1549a:	dc 01       	movw	r26, r24
   1549c:	e0 91 82 12 	lds	r30, 0x1282
   154a0:	f0 e0       	ldi	r31, 0x00	; 0
   154a2:	ee 0f       	add	r30, r30
   154a4:	ff 1f       	adc	r31, r31
   154a6:	ee 0f       	add	r30, r30
   154a8:	ff 1f       	adc	r31, r31
   154aa:	ec 59       	subi	r30, 0x9C	; 156
   154ac:	f9 4f       	sbci	r31, 0xF9	; 249
   154ae:	e4 91       	lpm	r30, Z+
   154b0:	11 96       	adiw	r26, 0x01	; 1
   154b2:	ec 93       	st	X, r30
   154b4:	11 97       	sbiw	r26, 0x01	; 1
   154b6:	12 96       	adiw	r26, 0x02	; 2
   154b8:	0c 93       	st	X, r16
   154ba:	12 97       	sbiw	r26, 0x02	; 2
   154bc:	13 96       	adiw	r26, 0x03	; 3
   154be:	8c 92       	st	X, r8
   154c0:	13 97       	sbiw	r26, 0x03	; 3
   154c2:	8b e0       	ldi	r24, 0x0B	; 11
   154c4:	14 96       	adiw	r26, 0x04	; 4
   154c6:	8c 93       	st	X, r24
   154c8:	14 97       	sbiw	r26, 0x04	; 4
   154ca:	17 96       	adiw	r26, 0x07	; 7
   154cc:	8c 91       	ld	r24, X
   154ce:	17 97       	sbiw	r26, 0x07	; 7
   154d0:	80 7f       	andi	r24, 0xF0	; 240
   154d2:	85 60       	ori	r24, 0x05	; 5
   154d4:	17 96       	adiw	r26, 0x07	; 7
   154d6:	8c 93       	st	X, r24

        //Set up Curves
        setCurve(CURVE5(1), heli_ar1);
   154d8:	80 e0       	ldi	r24, 0x00	; 0
   154da:	6f ed       	ldi	r22, 0xDF	; 223
   154dc:	71 e1       	ldi	r23, 0x11	; 17
   154de:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <_Z8setCurvehPKa>
        setCurve(CURVE5(2), heli_ar2);
   154e2:	81 e0       	ldi	r24, 0x01	; 1
   154e4:	64 ee       	ldi	r22, 0xE4	; 228
   154e6:	71 e1       	ldi	r23, 0x11	; 17
   154e8:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <_Z8setCurvehPKa>
        setCurve(CURVE5(3), heli_ar3);
   154ec:	82 e0       	ldi	r24, 0x02	; 2
   154ee:	69 ee       	ldi	r22, 0xE9	; 233
   154f0:	71 e1       	ldi	r23, 0x11	; 17
   154f2:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <_Z8setCurvehPKa>
        setCurve(CURVE5(4), heli_ar4);
   154f6:	83 e0       	ldi	r24, 0x03	; 3
   154f8:	6e ee       	ldi	r22, 0xEE	; 238
   154fa:	71 e1       	ldi	r23, 0x11	; 17
   154fc:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <_Z8setCurvehPKa>
        setCurve(CURVE5(5), heli_ar5);
   15500:	84 e0       	ldi	r24, 0x04	; 4
   15502:	63 ef       	ldi	r22, 0xF3	; 243
   15504:	71 e1       	ldi	r23, 0x11	; 17
   15506:	0e 94 9d a6 	call	0x14d3a	; 0x14d3a <_Z8setCurvehPKa>
        break;
   1550a:	40 c0       	rjmp	.+128    	; 0x1558c <_Z13applyTemplateh+0x7ba>

        //Servo Test
    case (6):
        md=setDest(15); md->srcRaw=CH(16);   md->weight= 100; md->speedUp = 8; md->speedDown = 8;
   1550c:	8f e0       	ldi	r24, 0x0F	; 15
   1550e:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15512:	fc 01       	movw	r30, r24
   15514:	84 e2       	ldi	r24, 0x24	; 36
   15516:	81 83       	std	Z+1, r24	; 0x01
   15518:	84 e6       	ldi	r24, 0x64	; 100
   1551a:	82 83       	std	Z+2, r24	; 0x02
   1551c:	88 e8       	ldi	r24, 0x88	; 136
   1551e:	86 83       	std	Z+6, r24	; 0x06
        md=setDest(16); md->srcRaw=MIX_FULL; md->weight= 110; md->swtch=DSW_SW1;
   15520:	80 e1       	ldi	r24, 0x10	; 16
   15522:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15526:	fc 01       	movw	r30, r24
   15528:	89 e0       	ldi	r24, 0x09	; 9
   1552a:	81 83       	std	Z+1, r24	; 0x01
   1552c:	1e e6       	ldi	r17, 0x6E	; 110
   1552e:	12 83       	std	Z+2, r17	; 0x02
   15530:	8a e0       	ldi	r24, 0x0A	; 10
   15532:	83 83       	std	Z+3, r24	; 0x03
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight=-110; md->swtch=DSW_SW2; md->mltpx=MLTPX_REP;
   15534:	80 e1       	ldi	r24, 0x10	; 16
   15536:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   1553a:	fc 01       	movw	r30, r24
   1553c:	08 e0       	ldi	r16, 0x08	; 8
   1553e:	01 83       	std	Z+1, r16	; 0x01
   15540:	82 e9       	ldi	r24, 0x92	; 146
   15542:	82 83       	std	Z+2, r24	; 0x02
   15544:	8b e0       	ldi	r24, 0x0B	; 11
   15546:	83 83       	std	Z+3, r24	; 0x03
   15548:	87 81       	ldd	r24, Z+7	; 0x07
   1554a:	81 7f       	andi	r24, 0xF1	; 241
   1554c:	84 60       	ori	r24, 0x04	; 4
   1554e:	87 83       	std	Z+7, r24	; 0x07
        md=setDest(16); md->srcRaw=MIX_MAX;  md->weight= 110; md->swtch=DSW_SW3; md->mltpx=MLTPX_REP;
   15550:	80 e1       	ldi	r24, 0x10	; 16
   15552:	0e 94 1e a6 	call	0x14c3c	; 0x14c3c <_Z7setDesth>
   15556:	fc 01       	movw	r30, r24
   15558:	01 83       	std	Z+1, r16	; 0x01
   1555a:	12 83       	std	Z+2, r17	; 0x02
   1555c:	8c e0       	ldi	r24, 0x0C	; 12
   1555e:	83 83       	std	Z+3, r24	; 0x03
   15560:	87 81       	ldd	r24, Z+7	; 0x07
   15562:	81 7f       	andi	r24, 0xF1	; 241
   15564:	84 60       	ori	r24, 0x04	; 4
   15566:	87 83       	std	Z+7, r24	; 0x07

        setSwitch(1,CS_LESS,CH(15),CH(16));
   15568:	81 e0       	ldi	r24, 0x01	; 1
   1556a:	6b e0       	ldi	r22, 0x0B	; 11
   1556c:	43 e2       	ldi	r20, 0x23	; 35
   1556e:	24 e2       	ldi	r18, 0x24	; 36
   15570:	0e 94 d4 a6 	call	0x14da8	; 0x14da8 <_Z9setSwitchhhaa>
        setSwitch(2,CS_VPOS,CH(15),   105);
   15574:	82 e0       	ldi	r24, 0x02	; 2
   15576:	61 e0       	ldi	r22, 0x01	; 1
   15578:	43 e2       	ldi	r20, 0x23	; 35
   1557a:	29 e6       	ldi	r18, 0x69	; 105
   1557c:	0e 94 d4 a6 	call	0x14da8	; 0x14da8 <_Z9setSwitchhhaa>
        setSwitch(3,CS_VNEG,CH(15),  -105);
   15580:	83 e0       	ldi	r24, 0x03	; 3
   15582:	62 e0       	ldi	r22, 0x02	; 2
   15584:	43 e2       	ldi	r20, 0x23	; 35
   15586:	27 e9       	ldi	r18, 0x97	; 151
   15588:	0e 94 d4 a6 	call	0x14da8	; 0x14da8 <_Z9setSwitchhhaa>

    default:
        break;

    }
    STORE_MODELVARS;
   1558c:	82 e0       	ldi	r24, 0x02	; 2
   1558e:	0e 94 3f 60 	call	0xc07e	; 0xc07e <_Z7eeDirtyh>

}
   15592:	0f 90       	pop	r0
   15594:	0f 90       	pop	r0
   15596:	0f 90       	pop	r0
   15598:	0f 90       	pop	r0
   1559a:	cf 91       	pop	r28
   1559c:	df 91       	pop	r29
   1559e:	1f 91       	pop	r17
   155a0:	0f 91       	pop	r16
   155a2:	ff 90       	pop	r15
   155a4:	ef 90       	pop	r14
   155a6:	df 90       	pop	r13
   155a8:	cf 90       	pop	r12
   155aa:	bf 90       	pop	r11
   155ac:	af 90       	pop	r10
   155ae:	9f 90       	pop	r9
   155b0:	8f 90       	pop	r8
   155b2:	7f 90       	pop	r7
   155b4:	6f 90       	pop	r6
   155b6:	08 95       	ret

000155b8 <__mulsi3>:
   155b8:	62 9f       	mul	r22, r18
   155ba:	d0 01       	movw	r26, r0
   155bc:	73 9f       	mul	r23, r19
   155be:	f0 01       	movw	r30, r0
   155c0:	82 9f       	mul	r24, r18
   155c2:	e0 0d       	add	r30, r0
   155c4:	f1 1d       	adc	r31, r1
   155c6:	64 9f       	mul	r22, r20
   155c8:	e0 0d       	add	r30, r0
   155ca:	f1 1d       	adc	r31, r1
   155cc:	92 9f       	mul	r25, r18
   155ce:	f0 0d       	add	r31, r0
   155d0:	83 9f       	mul	r24, r19
   155d2:	f0 0d       	add	r31, r0
   155d4:	74 9f       	mul	r23, r20
   155d6:	f0 0d       	add	r31, r0
   155d8:	65 9f       	mul	r22, r21
   155da:	f0 0d       	add	r31, r0
   155dc:	99 27       	eor	r25, r25
   155de:	72 9f       	mul	r23, r18
   155e0:	b0 0d       	add	r27, r0
   155e2:	e1 1d       	adc	r30, r1
   155e4:	f9 1f       	adc	r31, r25
   155e6:	63 9f       	mul	r22, r19
   155e8:	b0 0d       	add	r27, r0
   155ea:	e1 1d       	adc	r30, r1
   155ec:	f9 1f       	adc	r31, r25
   155ee:	bd 01       	movw	r22, r26
   155f0:	cf 01       	movw	r24, r30
   155f2:	11 24       	eor	r1, r1
   155f4:	08 95       	ret

000155f6 <__udivmodqi4>:
   155f6:	99 1b       	sub	r25, r25
   155f8:	79 e0       	ldi	r23, 0x09	; 9
   155fa:	04 c0       	rjmp	.+8      	; 0x15604 <__udivmodqi4_ep>

000155fc <__udivmodqi4_loop>:
   155fc:	99 1f       	adc	r25, r25
   155fe:	96 17       	cp	r25, r22
   15600:	08 f0       	brcs	.+2      	; 0x15604 <__udivmodqi4_ep>
   15602:	96 1b       	sub	r25, r22

00015604 <__udivmodqi4_ep>:
   15604:	88 1f       	adc	r24, r24
   15606:	7a 95       	dec	r23
   15608:	c9 f7       	brne	.-14     	; 0x155fc <__udivmodqi4_loop>
   1560a:	80 95       	com	r24
   1560c:	08 95       	ret

0001560e <__udivmodhi4>:
   1560e:	aa 1b       	sub	r26, r26
   15610:	bb 1b       	sub	r27, r27
   15612:	51 e1       	ldi	r21, 0x11	; 17
   15614:	07 c0       	rjmp	.+14     	; 0x15624 <__udivmodhi4_ep>

00015616 <__udivmodhi4_loop>:
   15616:	aa 1f       	adc	r26, r26
   15618:	bb 1f       	adc	r27, r27
   1561a:	a6 17       	cp	r26, r22
   1561c:	b7 07       	cpc	r27, r23
   1561e:	10 f0       	brcs	.+4      	; 0x15624 <__udivmodhi4_ep>
   15620:	a6 1b       	sub	r26, r22
   15622:	b7 0b       	sbc	r27, r23

00015624 <__udivmodhi4_ep>:
   15624:	88 1f       	adc	r24, r24
   15626:	99 1f       	adc	r25, r25
   15628:	5a 95       	dec	r21
   1562a:	a9 f7       	brne	.-22     	; 0x15616 <__udivmodhi4_loop>
   1562c:	80 95       	com	r24
   1562e:	90 95       	com	r25
   15630:	bc 01       	movw	r22, r24
   15632:	cd 01       	movw	r24, r26
   15634:	08 95       	ret

00015636 <__divmodhi4>:
   15636:	97 fb       	bst	r25, 7
   15638:	09 2e       	mov	r0, r25
   1563a:	07 26       	eor	r0, r23
   1563c:	0a d0       	rcall	.+20     	; 0x15652 <__divmodhi4_neg1>
   1563e:	77 fd       	sbrc	r23, 7
   15640:	04 d0       	rcall	.+8      	; 0x1564a <__divmodhi4_neg2>
   15642:	e5 df       	rcall	.-54     	; 0x1560e <__udivmodhi4>
   15644:	06 d0       	rcall	.+12     	; 0x15652 <__divmodhi4_neg1>
   15646:	00 20       	and	r0, r0
   15648:	1a f4       	brpl	.+6      	; 0x15650 <__divmodhi4_exit>

0001564a <__divmodhi4_neg2>:
   1564a:	70 95       	com	r23
   1564c:	61 95       	neg	r22
   1564e:	7f 4f       	sbci	r23, 0xFF	; 255

00015650 <__divmodhi4_exit>:
   15650:	08 95       	ret

00015652 <__divmodhi4_neg1>:
   15652:	f6 f7       	brtc	.-4      	; 0x15650 <__divmodhi4_exit>
   15654:	90 95       	com	r25
   15656:	81 95       	neg	r24
   15658:	9f 4f       	sbci	r25, 0xFF	; 255
   1565a:	08 95       	ret

0001565c <__udivmodsi4>:
   1565c:	a1 e2       	ldi	r26, 0x21	; 33
   1565e:	1a 2e       	mov	r1, r26
   15660:	aa 1b       	sub	r26, r26
   15662:	bb 1b       	sub	r27, r27
   15664:	fd 01       	movw	r30, r26
   15666:	0d c0       	rjmp	.+26     	; 0x15682 <__udivmodsi4_ep>

00015668 <__udivmodsi4_loop>:
   15668:	aa 1f       	adc	r26, r26
   1566a:	bb 1f       	adc	r27, r27
   1566c:	ee 1f       	adc	r30, r30
   1566e:	ff 1f       	adc	r31, r31
   15670:	a2 17       	cp	r26, r18
   15672:	b3 07       	cpc	r27, r19
   15674:	e4 07       	cpc	r30, r20
   15676:	f5 07       	cpc	r31, r21
   15678:	20 f0       	brcs	.+8      	; 0x15682 <__udivmodsi4_ep>
   1567a:	a2 1b       	sub	r26, r18
   1567c:	b3 0b       	sbc	r27, r19
   1567e:	e4 0b       	sbc	r30, r20
   15680:	f5 0b       	sbc	r31, r21

00015682 <__udivmodsi4_ep>:
   15682:	66 1f       	adc	r22, r22
   15684:	77 1f       	adc	r23, r23
   15686:	88 1f       	adc	r24, r24
   15688:	99 1f       	adc	r25, r25
   1568a:	1a 94       	dec	r1
   1568c:	69 f7       	brne	.-38     	; 0x15668 <__udivmodsi4_loop>
   1568e:	60 95       	com	r22
   15690:	70 95       	com	r23
   15692:	80 95       	com	r24
   15694:	90 95       	com	r25
   15696:	9b 01       	movw	r18, r22
   15698:	ac 01       	movw	r20, r24
   1569a:	bd 01       	movw	r22, r26
   1569c:	cf 01       	movw	r24, r30
   1569e:	08 95       	ret

000156a0 <__divmodsi4>:
   156a0:	97 fb       	bst	r25, 7
   156a2:	09 2e       	mov	r0, r25
   156a4:	05 26       	eor	r0, r21
   156a6:	0e d0       	rcall	.+28     	; 0x156c4 <__divmodsi4_neg1>
   156a8:	57 fd       	sbrc	r21, 7
   156aa:	04 d0       	rcall	.+8      	; 0x156b4 <__divmodsi4_neg2>
   156ac:	d7 df       	rcall	.-82     	; 0x1565c <__udivmodsi4>
   156ae:	0a d0       	rcall	.+20     	; 0x156c4 <__divmodsi4_neg1>
   156b0:	00 1c       	adc	r0, r0
   156b2:	38 f4       	brcc	.+14     	; 0x156c2 <__divmodsi4_exit>

000156b4 <__divmodsi4_neg2>:
   156b4:	50 95       	com	r21
   156b6:	40 95       	com	r20
   156b8:	30 95       	com	r19
   156ba:	21 95       	neg	r18
   156bc:	3f 4f       	sbci	r19, 0xFF	; 255
   156be:	4f 4f       	sbci	r20, 0xFF	; 255
   156c0:	5f 4f       	sbci	r21, 0xFF	; 255

000156c2 <__divmodsi4_exit>:
   156c2:	08 95       	ret

000156c4 <__divmodsi4_neg1>:
   156c4:	f6 f7       	brtc	.-4      	; 0x156c2 <__divmodsi4_exit>
   156c6:	90 95       	com	r25
   156c8:	80 95       	com	r24
   156ca:	70 95       	com	r23
   156cc:	61 95       	neg	r22
   156ce:	7f 4f       	sbci	r23, 0xFF	; 255
   156d0:	8f 4f       	sbci	r24, 0xFF	; 255
   156d2:	9f 4f       	sbci	r25, 0xFF	; 255
   156d4:	08 95       	ret

000156d6 <memcpy_P>:
   156d6:	fb 01       	movw	r30, r22
   156d8:	dc 01       	movw	r26, r24
   156da:	02 c0       	rjmp	.+4      	; 0x156e0 <memcpy_P+0xa>
   156dc:	05 90       	lpm	r0, Z+
   156de:	0d 92       	st	X+, r0
   156e0:	41 50       	subi	r20, 0x01	; 1
   156e2:	50 40       	sbci	r21, 0x00	; 0
   156e4:	d8 f7       	brcc	.-10     	; 0x156dc <memcpy_P+0x6>
   156e6:	08 95       	ret

000156e8 <memmove>:
   156e8:	68 17       	cp	r22, r24
   156ea:	79 07       	cpc	r23, r25
   156ec:	68 f4       	brcc	.+26     	; 0x15708 <memmove+0x20>
   156ee:	fb 01       	movw	r30, r22
   156f0:	dc 01       	movw	r26, r24
   156f2:	e4 0f       	add	r30, r20
   156f4:	f5 1f       	adc	r31, r21
   156f6:	a4 0f       	add	r26, r20
   156f8:	b5 1f       	adc	r27, r21
   156fa:	02 c0       	rjmp	.+4      	; 0x15700 <memmove+0x18>
   156fc:	02 90       	ld	r0, -Z
   156fe:	0e 92       	st	-X, r0
   15700:	41 50       	subi	r20, 0x01	; 1
   15702:	50 40       	sbci	r21, 0x00	; 0
   15704:	d8 f7       	brcc	.-10     	; 0x156fc <memmove+0x14>
   15706:	08 95       	ret
   15708:	0c 94 a4 ab 	jmp	0x15748	; 0x15748 <memcpy>

0001570c <memset>:
   1570c:	dc 01       	movw	r26, r24
   1570e:	01 c0       	rjmp	.+2      	; 0x15712 <memset+0x6>
   15710:	6d 93       	st	X+, r22
   15712:	41 50       	subi	r20, 0x01	; 1
   15714:	50 40       	sbci	r21, 0x00	; 0
   15716:	e0 f7       	brcc	.-8      	; 0x15710 <memset+0x4>
   15718:	08 95       	ret

0001571a <strcpy>:
   1571a:	fb 01       	movw	r30, r22
   1571c:	dc 01       	movw	r26, r24
   1571e:	01 90       	ld	r0, Z+
   15720:	0d 92       	st	X+, r0
   15722:	00 20       	and	r0, r0
   15724:	e1 f7       	brne	.-8      	; 0x1571e <strcpy+0x4>
   15726:	08 95       	ret

00015728 <__eerd_block_m2560>:
   15728:	dc 01       	movw	r26, r24
   1572a:	cb 01       	movw	r24, r22

0001572c <__eerd_blraw_m2560>:
   1572c:	fc 01       	movw	r30, r24
   1572e:	f9 99       	sbic	0x1f, 1	; 31
   15730:	fe cf       	rjmp	.-4      	; 0x1572e <__eerd_blraw_m2560+0x2>
   15732:	06 c0       	rjmp	.+12     	; 0x15740 <__eerd_blraw_m2560+0x14>
   15734:	f2 bd       	out	0x22, r31	; 34
   15736:	e1 bd       	out	0x21, r30	; 33
   15738:	f8 9a       	sbi	0x1f, 0	; 31
   1573a:	31 96       	adiw	r30, 0x01	; 1
   1573c:	00 b4       	in	r0, 0x20	; 32
   1573e:	0d 92       	st	X+, r0
   15740:	41 50       	subi	r20, 0x01	; 1
   15742:	50 40       	sbci	r21, 0x00	; 0
   15744:	b8 f7       	brcc	.-18     	; 0x15734 <__eerd_blraw_m2560+0x8>
   15746:	08 95       	ret

00015748 <memcpy>:
   15748:	fb 01       	movw	r30, r22
   1574a:	dc 01       	movw	r26, r24
   1574c:	02 c0       	rjmp	.+4      	; 0x15752 <memcpy+0xa>
   1574e:	01 90       	ld	r0, Z+
   15750:	0d 92       	st	X+, r0
   15752:	41 50       	subi	r20, 0x01	; 1
   15754:	50 40       	sbci	r21, 0x00	; 0
   15756:	d8 f7       	brcc	.-10     	; 0x1574e <memcpy+0x6>
   15758:	08 95       	ret

0001575a <_exit>:
   1575a:	f8 94       	cli

0001575c <__stop_program>:
   1575c:	ff cf       	rjmp	.-2      	; 0x1575c <__stop_program>
